
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cccc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800ce60  0800ce60  0000de60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d280  0800d280  0000f2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d280  0800d280  0000e280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d288  0800d288  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d288  0800d288  0000e288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d28c  0800d28c  0000e28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d290  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c4  2**0
                  CONTENTS
 10 .bss          00001f84  200002c4  200002c4  0000f2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002248  20002248  0000f2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c86  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038b0  00000000  00000000  00021f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00025830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9f  00000000  00000000  000267d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a50  00000000  00000000  00027377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001545e  00000000  00000000  00049dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be1b3  00000000  00000000  0005f225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d3d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050e8  00000000  00000000  0011d41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00122504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce44 	.word	0x0800ce44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800ce44 	.word	0x0800ce44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <API_PrintAngles>:
 * @param r Roll
 * @param r Pitch
 * @param r Yaw
 */
void API_PrintAngles(uint32_t timestamp, float r, float p, float y)
{
 8000f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f3c:	b08a      	sub	sp, #40	@ 0x28
 8000f3e:	af06      	add	r7, sp, #24
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f46:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f4a:	ed87 1a00 	vstr	s2, [r7]
	sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\n", timestamp, r, p, y);
 8000f4e:	68b8      	ldr	r0, [r7, #8]
 8000f50:	f7ff fafa 	bl	8000548 <__aeabi_f2d>
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff faf5 	bl	8000548 <__aeabi_f2d>
 8000f5e:	4680      	mov	r8, r0
 8000f60:	4689      	mov	r9, r1
 8000f62:	6838      	ldr	r0, [r7, #0]
 8000f64:	f7ff faf0 	bl	8000548 <__aeabi_f2d>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f70:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f74:	e9cd 4500 	strd	r4, r5, [sp]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	490b      	ldr	r1, [pc, #44]	@ (8000fa8 <API_PrintAngles+0x70>)
 8000f7c:	480b      	ldr	r0, [pc, #44]	@ (8000fac <API_PrintAngles+0x74>)
 8000f7e:	f009 fc97 	bl	800a8b0 <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 8000f82:	bf00      	nop
 8000f84:	4809      	ldr	r0, [pc, #36]	@ (8000fac <API_PrintAngles+0x74>)
 8000f86:	f7ff f973 	bl	8000270 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4806      	ldr	r0, [pc, #24]	@ (8000fac <API_PrintAngles+0x74>)
 8000f92:	f008 fb17 	bl	80095c4 <CDC_Transmit_FS>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d0f3      	beq.n	8000f84 <API_PrintAngles+0x4c>
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fa8:	0800ce60 	.word	0x0800ce60
 8000fac:	20000464 	.word	0x20000464

08000fb0 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	887a      	ldrh	r2, [r7, #2]
 8000fce:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6a3a      	ldr	r2, [r7, #32]
 8000fd4:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000fda:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6858      	ldr	r0, [r3, #4]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	899b      	ldrh	r3, [r3, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f002 f836 	bl	8003068 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f001 f9cf 	bl	80023a0 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6858      	ldr	r0, [r3, #4]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	899b      	ldrh	r3, [r3, #12]
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	f002 f82b 	bl	8003068 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001012:	2032      	movs	r0, #50	@ 0x32
 8001014:	f001 f9c4 	bl	80023a0 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8001018:	22b6      	movs	r2, #182	@ 0xb6
 800101a:	217e      	movs	r1, #126	@ 0x7e
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 f959 	bl	80012d4 <BMI088_WriteAccRegister>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	4413      	add	r3, r2
 800102a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 800102c:	2032      	movs	r0, #50	@ 0x32
 800102e:	f001 f9b7 	bl	80023a0 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8001032:	f107 0316 	add.w	r3, r7, #22
 8001036:	461a      	mov	r2, r3
 8001038:	2100      	movs	r1, #0
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f000 f8d0 	bl	80011e0 <BMI088_ReadAccRegister>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	4413      	add	r3, r2
 8001048:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 800104a:	200a      	movs	r0, #10
 800104c:	f001 f9a8 	bl	80023a0 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8001050:	22a8      	movs	r2, #168	@ 0xa8
 8001052:	2140      	movs	r1, #64	@ 0x40
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 f93d 	bl	80012d4 <BMI088_WriteAccRegister>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	4413      	add	r3, r2
 8001062:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f001 f99b 	bl	80023a0 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 800106a:	2200      	movs	r2, #0
 800106c:	2141      	movs	r1, #65	@ 0x41
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f930 	bl	80012d4 <BMI088_WriteAccRegister>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	4413      	add	r3, r2
 800107c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f001 f98e 	bl	80023a0 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8001084:	220a      	movs	r2, #10
 8001086:	2153      	movs	r1, #83	@ 0x53
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f923 	bl	80012d4 <BMI088_WriteAccRegister>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	4413      	add	r3, r2
 8001096:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001098:	200a      	movs	r0, #10
 800109a:	f001 f981 	bl	80023a0 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 800109e:	2204      	movs	r2, #4
 80010a0:	2158      	movs	r1, #88	@ 0x58
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f916 	bl	80012d4 <BMI088_WriteAccRegister>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	4413      	add	r3, r2
 80010b0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f001 f974 	bl	80023a0 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 80010b8:	2200      	movs	r2, #0
 80010ba:	217c      	movs	r1, #124	@ 0x7c
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 f909 	bl	80012d4 <BMI088_WriteAccRegister>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	4413      	add	r3, r2
 80010ca:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f001 f967 	bl	80023a0 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80010d2:	2204      	movs	r2, #4
 80010d4:	217d      	movs	r1, #125	@ 0x7d
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 f8fc 	bl	80012d4 <BMI088_WriteAccRegister>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	4413      	add	r3, r2
 80010e4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f001 f95a 	bl	80023a0 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4a3a      	ldr	r2, [pc, #232]	@ (80011d8 <BMI088_Init+0x228>)
 80010f0:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2292      	movs	r2, #146	@ 0x92
 80010f6:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	89db      	ldrh	r3, [r3, #14]
 8001100:	2201      	movs	r2, #1
 8001102:	4619      	mov	r1, r3
 8001104:	f001 ffb0 	bl	8003068 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001108:	22b6      	movs	r2, #182	@ 0xb6
 800110a:	2114      	movs	r1, #20
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 f91b 	bl	8001348 <BMI088_WriteGyrRegister>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	4413      	add	r3, r2
 800111a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 800111c:	20fa      	movs	r0, #250	@ 0xfa
 800111e:	f001 f93f 	bl	80023a0 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8001122:	f107 0316 	add.w	r3, r7, #22
 8001126:	461a      	mov	r2, r3
 8001128:	2100      	movs	r1, #0
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 f896 	bl	800125c <BMI088_ReadGyrRegister>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	4413      	add	r3, r2
 8001138:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 800113a:	200a      	movs	r0, #10
 800113c:	f001 f930 	bl	80023a0 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8001140:	2201      	movs	r2, #1
 8001142:	210f      	movs	r1, #15
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 f8ff 	bl	8001348 <BMI088_WriteGyrRegister>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	4413      	add	r3, r2
 8001152:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001154:	200a      	movs	r0, #10
 8001156:	f001 f923 	bl	80023a0 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 800115a:	2207      	movs	r2, #7
 800115c:	2110      	movs	r1, #16
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 f8f2 	bl	8001348 <BMI088_WriteGyrRegister>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	4413      	add	r3, r2
 800116c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800116e:	200a      	movs	r0, #10
 8001170:	f001 f916 	bl	80023a0 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8001174:	2280      	movs	r2, #128	@ 0x80
 8001176:	2115      	movs	r1, #21
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 f8e5 	bl	8001348 <BMI088_WriteGyrRegister>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	4413      	add	r3, r2
 8001186:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f001 f909 	bl	80023a0 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 800118e:	2201      	movs	r2, #1
 8001190:	2116      	movs	r1, #22
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f8d8 	bl	8001348 <BMI088_WriteGyrRegister>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	4413      	add	r3, r2
 80011a0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f001 f8fc 	bl	80023a0 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80011a8:	2201      	movs	r2, #1
 80011aa:	2118      	movs	r1, #24
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f000 f8cb 	bl	8001348 <BMI088_WriteGyrRegister>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	4413      	add	r3, r2
 80011ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f001 f8ef 	bl	80023a0 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <BMI088_Init+0x22c>)
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2282      	movs	r2, #130	@ 0x82
 80011cc:	769a      	strb	r2, [r3, #26]

	return status;
 80011ce:	7dfb      	ldrb	r3, [r7, #23]

}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	3a6b70a4 	.word	0x3a6b70a4
 80011dc:	3a0ba058 	.word	0x3a0ba058

080011e0 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	460b      	mov	r3, r1
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	753b      	strb	r3, [r7, #20]
 80011f8:	2300      	movs	r3, #0
 80011fa:	757b      	strb	r3, [r7, #21]
 80011fc:	2300      	movs	r3, #0
 80011fe:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6858      	ldr	r0, [r3, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	899b      	ldrh	r3, [r3, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	f001 ff2c 	bl	8003068 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	f107 0210 	add.w	r2, r7, #16
 8001218:	f107 0114 	add.w	r1, r7, #20
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2303      	movs	r3, #3
 8001224:	f003 fff9 	bl	800521a <HAL_SPI_TransmitReceive>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6858      	ldr	r0, [r3, #4]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	899b      	ldrh	r3, [r3, #12]
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	f001 ff11 	bl	8003068 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 800124c:	7cba      	ldrb	r2, [r7, #18]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8001252:	7dfb      	ldrb	r3, [r7, #23]

}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af02      	add	r7, sp, #8
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	460b      	mov	r3, r1
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001270:	b2db      	uxtb	r3, r3
 8001272:	753b      	strb	r3, [r7, #20]
 8001274:	2300      	movs	r3, #0
 8001276:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6898      	ldr	r0, [r3, #8]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	89db      	ldrh	r3, [r3, #14]
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	f001 fef0 	bl	8003068 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	f107 0210 	add.w	r2, r7, #16
 8001290:	f107 0114 	add.w	r1, r7, #20
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2302      	movs	r3, #2
 800129c:	f003 ffbd 	bl	800521a <HAL_SPI_TransmitReceive>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf0c      	ite	eq
 80012a6:	2301      	moveq	r3, #1
 80012a8:	2300      	movne	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6898      	ldr	r0, [r3, #8]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	89db      	ldrh	r3, [r3, #14]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4619      	mov	r1, r3
 80012ba:	f001 fed5 	bl	8003068 <HAL_GPIO_WritePin>

	if (status == 1) {
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d102      	bne.n	80012ca <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80012c4:	7c7a      	ldrb	r2, [r7, #17]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80012ca:	7dfb      	ldrb	r3, [r7, #23]

}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
 80012e0:	4613      	mov	r3, r2
 80012e2:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	733b      	strb	r3, [r7, #12]
 80012e8:	78bb      	ldrb	r3, [r7, #2]
 80012ea:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6858      	ldr	r0, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	899b      	ldrh	r3, [r3, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	f001 feb6 	bl	8003068 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	f107 010c 	add.w	r1, r7, #12
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	2202      	movs	r2, #2
 800130a:	f003 fe42 	bl	8004f92 <HAL_SPI_Transmit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800131c:	bf00      	nop
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f004 fb3a 	bl	800599c <HAL_SPI_GetState>
 8001328:	4603      	mov	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	d1f7      	bne.n	800131e <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6858      	ldr	r0, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	899b      	ldrh	r3, [r3, #12]
 8001336:	2201      	movs	r2, #1
 8001338:	4619      	mov	r1, r3
 800133a:	f001 fe95 	bl	8003068 <HAL_GPIO_WritePin>

	return status;
 800133e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
 8001354:	4613      	mov	r3, r2
 8001356:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	733b      	strb	r3, [r7, #12]
 800135c:	78bb      	ldrb	r3, [r7, #2]
 800135e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6898      	ldr	r0, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	89db      	ldrh	r3, [r3, #14]
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	f001 fe7c 	bl	8003068 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	f107 010c 	add.w	r1, r7, #12
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	2202      	movs	r2, #2
 800137e:	f003 fe08 	bl	8004f92 <HAL_SPI_Transmit>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001390:	bf00      	nop
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f004 fb00 	bl	800599c <HAL_SPI_GetState>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d1f7      	bne.n	8001392 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6898      	ldr	r0, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	89db      	ldrh	r3, [r3, #14]
 80013aa:	2201      	movs	r2, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	f001 fe5b 	bl	8003068 <HAL_GPIO_WritePin>

	return status;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]

}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6858      	ldr	r0, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	899b      	ldrh	r3, [r3, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	f001 fe4a 	bl	8003068 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f103 0112 	add.w	r1, r3, #18
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80013e4:	2308      	movs	r3, #8
 80013e6:	f004 f8c1 	bl	800556c <HAL_SPI_TransmitReceive_DMA>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d104      	bne.n	80013fa <BMI088_ReadAccelerometerDMA+0x3e>

		imu->readingAcc = 1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	741a      	strb	r2, [r3, #16]
		return 1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e008      	b.n	800140c <BMI088_ReadAccelerometerDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6858      	ldr	r0, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f001 fe2f 	bl	8003068 <HAL_GPIO_WritePin>
		return 0;
 800140a:	2300      	movs	r3, #0

	}

}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6858      	ldr	r0, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	899b      	ldrh	r3, [r3, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	4619      	mov	r1, r3
 8001428:	f001 fe1e 	bl	8003068 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001438:	b2db      	uxtb	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001444:	b2db      	uxtb	r3, r3
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001452:	b2db      	uxtb	r3, r3
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800145e:	b2db      	uxtb	r3, r3
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800146c:	b2db      	uxtb	r3, r3
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b21a      	sxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001478:	b2db      	uxtb	r3, r3
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6898      	ldr	r0, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	89db      	ldrh	r3, [r3, #14]
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	f001 fdba 	bl	8003068 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f103 011a 	add.w	r1, r3, #26
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001504:	2307      	movs	r3, #7
 8001506:	f004 f831 	bl	800556c <HAL_SPI_TransmitReceive_DMA>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d104      	bne.n	800151a <BMI088_ReadGyroscopeDMA+0x3e>

		imu->readingGyr = 1;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	745a      	strb	r2, [r3, #17]
		return 1;
 8001516:	2301      	movs	r3, #1
 8001518:	e008      	b.n	800152c <BMI088_ReadGyroscopeDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6898      	ldr	r0, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	89db      	ldrh	r3, [r3, #14]
 8001522:	2201      	movs	r2, #1
 8001524:	4619      	mov	r1, r3
 8001526:	f001 fd9f 	bl	8003068 <HAL_GPIO_WritePin>
		return 0;
 800152a:	2300      	movs	r3, #0

	}

}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6898      	ldr	r0, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	89db      	ldrh	r3, [r3, #14]
 8001544:	2201      	movs	r2, #1
 8001546:	4619      	mov	r1, r3
 8001548:	f001 fd8e 	bl	8003068 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001558:	b2db      	uxtb	r3, r3
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001564:	b2db      	uxtb	r3, r3
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001572:	b2db      	uxtb	r3, r3
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800157e:	b2db      	uxtb	r3, r3
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800158c:	b2db      	uxtb	r3, r3
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001598:	b2db      	uxtb	r3, r3
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <EKF_CalculateGyroBias>:
 * @param imu IMU algorithm structure
 * @param samples number of samples to calculate the mean average bias
 * @param ret_bias address (array) where to write the calculated bias values
 */
void EKF_CalculateGyroBias(BMI088* imu, int samples)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	@ 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
    float bias[3] = {0,0,0};
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < samples; i++) {
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	e01d      	b.n	800165a <EKF_CalculateGyroBias+0x5e>
        bias[0] += imu->gyr_rps[0];
 800161e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	edc7 7a03 	vstr	s15, [r7, #12]
        bias[1] += imu->gyr_rps[1];
 8001630:	ed97 7a04 	vldr	s14, [r7, #16]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800163a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163e:	edc7 7a04 	vstr	s15, [r7, #16]
        bias[2] += imu->gyr_rps[2];
 8001642:	ed97 7a05 	vldr	s14, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800164c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001650:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < samples; i++) {
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	3301      	adds	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbdd      	blt.n	800161e <EKF_CalculateGyroBias+0x22>
    }
    for (int i = 0; i < 3; i++) {
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	e016      	b.n	8001696 <EKF_CalculateGyroBias+0x9a>
        gyro_bias[i] = bias[i] / samples;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	3320      	adds	r3, #32
 800166e:	443b      	add	r3, r7
 8001670:	3b14      	subs	r3, #20
 8001672:	edd3 6a00 	vldr	s13, [r3]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001684:	4a09      	ldr	r2, [pc, #36]	@ (80016ac <EKF_CalculateGyroBias+0xb0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	3301      	adds	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b02      	cmp	r3, #2
 800169a:	dde5      	ble.n	8001668 <EKF_CalculateGyroBias+0x6c>
    }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	200002ec 	.word	0x200002ec

080016b0 <EKF_Predict>:
 * @brief Function to calculate the predict step of Extended Kalman Filter
 * @param dt delta time
 * @param gyro_data gyroscope measurements
 */
void EKF_Predict(float dt, float gyro_data[3])
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ba:	6038      	str	r0, [r7, #0]
    float gx = gyro_data[0] - gyro_bias[0];
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	ed93 7a00 	vldr	s14, [r3]
 80016c2:	4b26      	ldr	r3, [pc, #152]	@ (800175c <EKF_Predict+0xac>)
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016cc:	edc7 7a05 	vstr	s15, [r7, #20]
    float gy = gyro_data[1] - gyro_bias[1];
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3304      	adds	r3, #4
 80016d4:	ed93 7a00 	vldr	s14, [r3]
 80016d8:	4b20      	ldr	r3, [pc, #128]	@ (800175c <EKF_Predict+0xac>)
 80016da:	edd3 7a01 	vldr	s15, [r3, #4]
 80016de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e2:	edc7 7a04 	vstr	s15, [r7, #16]
    float gz = gyro_data[2] - gyro_bias[2];
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3308      	adds	r3, #8
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <EKF_Predict+0xac>)
 80016f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	edc7 7a03 	vstr	s15, [r7, #12]

    state[0] += gx * dt;
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <EKF_Predict+0xb0>)
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	edd7 6a05 	vldr	s13, [r7, #20]
 8001706:	edd7 7a01 	vldr	s15, [r7, #4]
 800170a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <EKF_Predict+0xb0>)
 8001714:	edc3 7a00 	vstr	s15, [r3]
    state[1] += gy * dt;
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <EKF_Predict+0xb0>)
 800171a:	ed93 7a01 	vldr	s14, [r3, #4]
 800171e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001722:	edd7 7a01 	vldr	s15, [r7, #4]
 8001726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <EKF_Predict+0xb0>)
 8001730:	edc3 7a01 	vstr	s15, [r3, #4]
    state[2] += gz * dt;
 8001734:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <EKF_Predict+0xb0>)
 8001736:	ed93 7a02 	vldr	s14, [r3, #8]
 800173a:	edd7 6a03 	vldr	s13, [r7, #12]
 800173e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174a:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <EKF_Predict+0xb0>)
 800174c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001750:	bf00      	nop
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	200002ec 	.word	0x200002ec
 8001760:	200002e0 	.word	0x200002e0
 8001764:	00000000 	.word	0x00000000

08001768 <EKF_Update>:
/**
 * @brief Function to calculate the update step of Extended Kalman Filter
 * @param accel_data accelerometer measurements
 */
void EKF_Update(float accel_data[3])
{
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	ed2d 8b02 	vpush	{d8}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    float accel_roll = atan2f(accel_data[1], accel_data[2]);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3304      	adds	r3, #4
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3308      	adds	r3, #8
 8001780:	ed93 7a00 	vldr	s14, [r3]
 8001784:	eef0 0a47 	vmov.f32	s1, s14
 8001788:	eeb0 0a67 	vmov.f32	s0, s15
 800178c:	f00b f9bc 	bl	800cb08 <atan2f>
 8001790:	ed87 0a05 	vstr	s0, [r7, #20]
    float accel_pitch = atan2f(-accel_data[0], sqrtf(accel_data[1] * accel_data[1] + accel_data[2] * accel_data[2]));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	eeb1 8a67 	vneg.f32	s16, s15
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3304      	adds	r3, #4
 80017a2:	ed93 7a00 	vldr	s14, [r3]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3304      	adds	r3, #4
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3308      	adds	r3, #8
 80017b6:	edd3 6a00 	vldr	s13, [r3]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3308      	adds	r3, #8
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	f00b f99d 	bl	800cb0c <sqrtf>
 80017d2:	eef0 7a40 	vmov.f32	s15, s0
 80017d6:	eef0 0a67 	vmov.f32	s1, s15
 80017da:	eeb0 0a48 	vmov.f32	s0, s16
 80017de:	f00b f993 	bl	800cb08 <atan2f>
 80017e2:	ed87 0a04 	vstr	s0, [r7, #16]

    float y[2] = {accel_roll - state[0], accel_pitch - state[1]};
 80017e6:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <EKF_Update+0x138>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80017f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f4:	edc7 7a02 	vstr	s15, [r7, #8]
 80017f8:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <EKF_Update+0x138>)
 80017fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80017fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001806:	edc7 7a03 	vstr	s15, [r7, #12]

    state[0] += y[0] * 0.1;
 800180a:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <EKF_Update+0x138>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe9a 	bl	8000548 <__aeabi_f2d>
 8001814:	4604      	mov	r4, r0
 8001816:	460d      	mov	r5, r1
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe94 	bl	8000548 <__aeabi_f2d>
 8001820:	a31d      	add	r3, pc, #116	@ (adr r3, 8001898 <EKF_Update+0x130>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fee7 	bl	80005f8 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	f7fe fd2b 	bl	800028c <__adddf3>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f9b3 	bl	8000ba8 <__aeabi_d2f>
 8001842:	4603      	mov	r3, r0
 8001844:	4a16      	ldr	r2, [pc, #88]	@ (80018a0 <EKF_Update+0x138>)
 8001846:	6013      	str	r3, [r2, #0]
    state[1] += y[1] * 0.1;
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <EKF_Update+0x138>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe7b 	bl	8000548 <__aeabi_f2d>
 8001852:	4604      	mov	r4, r0
 8001854:	460d      	mov	r5, r1
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe75 	bl	8000548 <__aeabi_f2d>
 800185e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001898 <EKF_Update+0x130>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fec8 	bl	80005f8 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4620      	mov	r0, r4
 800186e:	4629      	mov	r1, r5
 8001870:	f7fe fd0c 	bl	800028c <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f994 	bl	8000ba8 <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	4a07      	ldr	r2, [pc, #28]	@ (80018a0 <EKF_Update+0x138>)
 8001884:	6053      	str	r3, [r2, #4]
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	ecbd 8b02 	vpop	{d8}
 8001890:	bdb0      	pop	{r4, r5, r7, pc}
 8001892:	bf00      	nop
 8001894:	f3af 8000 	nop.w
 8001898:	9999999a 	.word	0x9999999a
 800189c:	3fb99999 	.word	0x3fb99999
 80018a0:	200002e0 	.word	0x200002e0
 80018a4:	00000000 	.word	0x00000000

080018a8 <EKF_FindAngles>:
 * @param accel_data accelerometer measurements
 * @param gyro_data gyroscope measurements
 * @param ret_angles variable where to write the calculated angles values
 */
void EKF_FindAngles(float accel_data[3], float gyro_data[3], float* ret_angles)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
    uint32_t curr_time = HAL_GetTick();
 80018b4:	f000 fd68 	bl	8002388 <HAL_GetTick>
 80018b8:	6178      	str	r0, [r7, #20]
    float dt = (curr_time - prev_time) / 1000.0f;
 80018ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001978 <EKF_FindAngles+0xd0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ca:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800197c <EKF_FindAngles+0xd4>
 80018ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d2:	edc7 7a04 	vstr	s15, [r7, #16]
    prev_time = curr_time;
 80018d6:	4a28      	ldr	r2, [pc, #160]	@ (8001978 <EKF_FindAngles+0xd0>)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	6013      	str	r3, [r2, #0]

    EKF_Predict(dt, gyro_data);
 80018dc:	68b8      	ldr	r0, [r7, #8]
 80018de:	ed97 0a04 	vldr	s0, [r7, #16]
 80018e2:	f7ff fee5 	bl	80016b0 <EKF_Predict>
    EKF_Update(accel_data);
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff ff3e 	bl	8001768 <EKF_Update>

    ret_angles[0] = state[0] * (180.0 / M_PI);		// Roll
 80018ec:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <EKF_FindAngles+0xd8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe29 	bl	8000548 <__aeabi_f2d>
 80018f6:	a31e      	add	r3, pc, #120	@ (adr r3, 8001970 <EKF_FindAngles+0xc8>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe fe7c 	bl	80005f8 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f94e 	bl	8000ba8 <__aeabi_d2f>
 800190c:	4602      	mov	r2, r0
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
    ret_angles[1] = state[1] * (180.0 / M_PI);		// Pitch
 8001912:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <EKF_FindAngles+0xd8>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe16 	bl	8000548 <__aeabi_f2d>
 800191c:	a314      	add	r3, pc, #80	@ (adr r3, 8001970 <EKF_FindAngles+0xc8>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fe69 	bl	80005f8 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	1d1c      	adds	r4, r3, #4
 8001932:	f7ff f939 	bl	8000ba8 <__aeabi_d2f>
 8001936:	4603      	mov	r3, r0
 8001938:	6023      	str	r3, [r4, #0]
    ret_angles[2] = state[2] * (180.0 / M_PI);		// Yaw
 800193a:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <EKF_FindAngles+0xd8>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe02 	bl	8000548 <__aeabi_f2d>
 8001944:	a30a      	add	r3, pc, #40	@ (adr r3, 8001970 <EKF_FindAngles+0xc8>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fe55 	bl	80005f8 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f103 0408 	add.w	r4, r3, #8
 800195c:	f7ff f924 	bl	8000ba8 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	6023      	str	r3, [r4, #0]

}
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	f3af 8000 	nop.w
 8001970:	1a63c1f8 	.word	0x1a63c1f8
 8001974:	404ca5dc 	.word	0x404ca5dc
 8001978:	200002f8 	.word	0x200002f8
 800197c:	447a0000 	.word	0x447a0000
 8001980:	200002e0 	.word	0x200002e0

08001984 <HAL_GPIO_EXTI_Callback>:
uint32_t timerToggle = 0;



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d103      	bne.n	800199c <HAL_GPIO_EXTI_Callback+0x18>
	{
		// we check if the interrupt pin is the accelerometer one
		BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 8001994:	4806      	ldr	r0, [pc, #24]	@ (80019b0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001996:	f7ff fd11 	bl	80013bc <BMI088_ReadAccelerometerDMA>
	else if(GPIO_Pin == INT_GYR_Pin)
	{
		// we check if the interrupt pin is the gyroscope one
		BMI088_ReadGyroscopeDMA(&imu);
	}
}
 800199a:	e005      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == INT_GYR_Pin)
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d102      	bne.n	80019a8 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 80019a2:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80019a4:	f7ff fd9a 	bl	80014dc <BMI088_ReadGyroscopeDMA>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000414 	.word	0x20000414

080019b4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_SPI_TxRxCpltCallback+0x38>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10d      	bne.n	80019e2 <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80019c8:	7c1b      	ldrb	r3, [r3, #16]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 80019ce:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80019d0:	f7ff fd20 	bl	8001414 <BMI088_ReadAccelerometerDMA_Complete>
		}

		if (imu.readingGyr)
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80019d6:	7c5b      	ldrb	r3, [r3, #17]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 80019dc:	4804      	ldr	r0, [pc, #16]	@ (80019f0 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80019de:	f7ff fda9 	bl	8001534 <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40013000 	.word	0x40013000
 80019f0:	20000414 	.word	0x20000414

080019f4 <Take_IMU_Measurements>:


void Take_IMU_Measurements(BMI088 *imu)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	acc[0] = imu->acc_mps2[0];
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <Take_IMU_Measurements+0x44>)
 8001a02:	6013      	str	r3, [r2, #0]
	acc[1] = imu->acc_mps2[1];
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a08:	4a0b      	ldr	r2, [pc, #44]	@ (8001a38 <Take_IMU_Measurements+0x44>)
 8001a0a:	6053      	str	r3, [r2, #4]
	acc[2] = imu->acc_mps2[2];
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	4a09      	ldr	r2, [pc, #36]	@ (8001a38 <Take_IMU_Measurements+0x44>)
 8001a12:	6093      	str	r3, [r2, #8]
	gyr[0] = imu->gyr_rps[0];
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <Take_IMU_Measurements+0x48>)
 8001a1a:	6013      	str	r3, [r2, #0]
	gyr[1] = imu->gyr_rps[1];
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a20:	4a06      	ldr	r2, [pc, #24]	@ (8001a3c <Take_IMU_Measurements+0x48>)
 8001a22:	6053      	str	r3, [r2, #4]
	gyr[2] = imu->gyr_rps[2];
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a28:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <Take_IMU_Measurements+0x48>)
 8001a2a:	6093      	str	r3, [r2, #8]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	200004e4 	.word	0x200004e4
 8001a3c:	200004f0 	.word	0x200004f0

08001a40 <Toggle>:


void Toggle()
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	// Toggle to show if the code is running
	if ((HAL_GetTick() - timerToggle) >= SAMPLE_TIME_MS_TOGGLE)
 8001a44:	f000 fca0 	bl	8002388 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <Toggle+0x38>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a54:	d308      	bcc.n	8001a68 <Toggle+0x28>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001a56:	2110      	movs	r1, #16
 8001a58:	4808      	ldr	r0, [pc, #32]	@ (8001a7c <Toggle+0x3c>)
 8001a5a:	f001 fb1e 	bl	800309a <HAL_GPIO_TogglePin>
		timerToggle = HAL_GetTick();
 8001a5e:	f000 fc93 	bl	8002388 <HAL_GetTick>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a04      	ldr	r2, [pc, #16]	@ (8001a78 <Toggle+0x38>)
 8001a66:	6013      	str	r3, [r2, #0]
	}
	timerUSB = HAL_GetTick();
 8001a68:	f000 fc8e 	bl	8002388 <HAL_GetTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <Toggle+0x40>)
 8001a70:	6013      	str	r3, [r2, #0]
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000050c 	.word	0x2000050c
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	20000508 	.word	0x20000508

08001a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8a:	f000 fc17 	bl	80022bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8e:	f000 f85b 	bl	8001b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a92:	f000 f921 	bl	8001cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a96:	f000 f8f7 	bl	8001c88 <MX_DMA_Init>
  MX_SPI1_Init();
 8001a9a:	f000 f8bf 	bl	8001c1c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001a9e:	f007 fcd3 	bl	8009448 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8001aa2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aa6:	f000 fc7b 	bl	80023a0 <HAL_Delay>
  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 8001aaa:	2310      	movs	r3, #16
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <main+0xa4>)
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b2c <main+0xa8>)
 8001ab6:	491e      	ldr	r1, [pc, #120]	@ (8001b30 <main+0xac>)
 8001ab8:	481e      	ldr	r0, [pc, #120]	@ (8001b34 <main+0xb0>)
 8001aba:	f7ff fa79 	bl	8000fb0 <BMI088_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  EKF_CalculateGyroBias(&imu, 500);
 8001abe:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001ac2:	481c      	ldr	r0, [pc, #112]	@ (8001b34 <main+0xb0>)
 8001ac4:	f7ff fd9a 	bl	80015fc <EKF_CalculateGyroBias>
  HAL_Delay(1000);
 8001ac8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001acc:	f000 fc68 	bl	80023a0 <HAL_Delay>


  while (1)
  {
	if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB)
 8001ad0:	f000 fc5a 	bl	8002388 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <main+0xb4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b09      	cmp	r3, #9
 8001ade:	d9f7      	bls.n	8001ad0 <main+0x4c>
	{
		Take_IMU_Measurements(&imu);
 8001ae0:	4814      	ldr	r0, [pc, #80]	@ (8001b34 <main+0xb0>)
 8001ae2:	f7ff ff87 	bl	80019f4 <Take_IMU_Measurements>
		EKF_FindAngles(acc, gyr, angles);
 8001ae6:	4a15      	ldr	r2, [pc, #84]	@ (8001b3c <main+0xb8>)
 8001ae8:	4915      	ldr	r1, [pc, #84]	@ (8001b40 <main+0xbc>)
 8001aea:	4816      	ldr	r0, [pc, #88]	@ (8001b44 <main+0xc0>)
 8001aec:	f7ff fedc 	bl	80018a8 <EKF_FindAngles>

		Toggle();
 8001af0:	f7ff ffa6 	bl	8001a40 <Toggle>
		}
//#endif //USE_API
//#ifdef USE_API
		else
		{
			API_PrintAngles(1000*HAL_GetTick(), angles[0], angles[1], angles[2]);
 8001af4:	f000 fc48 	bl	8002388 <HAL_GetTick>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <main+0xb8>)
 8001b04:	edd2 7a00 	vldr	s15, [r2]
 8001b08:	4a0c      	ldr	r2, [pc, #48]	@ (8001b3c <main+0xb8>)
 8001b0a:	ed92 7a01 	vldr	s14, [r2, #4]
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b3c <main+0xb8>)
 8001b10:	edd2 6a02 	vldr	s13, [r2, #8]
 8001b14:	eeb0 1a66 	vmov.f32	s2, s13
 8001b18:	eef0 0a47 	vmov.f32	s1, s14
 8001b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fa09 	bl	8000f38 <API_PrintAngles>
	if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB)
 8001b26:	e7d3      	b.n	8001ad0 <main+0x4c>
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	200002fc 	.word	0x200002fc
 8001b34:	20000414 	.word	0x20000414
 8001b38:	20000508 	.word	0x20000508
 8001b3c:	200004fc 	.word	0x200004fc
 8001b40:	200004f0 	.word	0x200004f0
 8001b44:	200004e4 	.word	0x200004e4

08001b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b094      	sub	sp, #80	@ 0x50
 8001b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	2230      	movs	r2, #48	@ 0x30
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f008 ff0d 	bl	800a976 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	4b28      	ldr	r3, [pc, #160]	@ (8001c14 <SystemClock_Config+0xcc>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b74:	4a27      	ldr	r2, [pc, #156]	@ (8001c14 <SystemClock_Config+0xcc>)
 8001b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7c:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <SystemClock_Config+0xcc>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <SystemClock_Config+0xd0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <SystemClock_Config+0xd0>)
 8001b92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <SystemClock_Config+0xd0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ba8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bbc:	23a8      	movs	r3, #168	@ 0xa8
 8001bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bc4:	2307      	movs	r3, #7
 8001bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 fce9 	bl	80045a4 <HAL_RCC_OscConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bd8:	f000 f924 	bl	8001e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bdc:	230f      	movs	r3, #15
 8001bde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be0:	2302      	movs	r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001be8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 ff4a 	bl	8004a94 <HAL_RCC_ClockConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c06:	f000 f90d 	bl	8001e24 <Error_Handler>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	3750      	adds	r7, #80	@ 0x50
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40007000 	.word	0x40007000

08001c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c20:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c22:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <MX_SPI1_Init+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c26:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c50:	2210      	movs	r2, #16
 8001c52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c68:	220a      	movs	r2, #10
 8001c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c6e:	f003 f907 	bl	8004e80 <HAL_SPI_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c78:	f000 f8d4 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200002fc 	.word	0x200002fc
 8001c84:	40013000 	.word	0x40013000

08001c88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <MX_DMA_Init+0x4c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <MX_DMA_Init+0x4c>)
 8001c98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <MX_DMA_Init+0x4c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2038      	movs	r0, #56	@ 0x38
 8001cb0:	f000 fc75 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cb4:	2038      	movs	r0, #56	@ 0x38
 8001cb6:	f000 fc8e 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	203b      	movs	r0, #59	@ 0x3b
 8001cc0:	f000 fc6d 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001cc4:	203b      	movs	r0, #59	@ 0x3b
 8001cc6:	f000 fc86 	bl	80025d6 <HAL_NVIC_EnableIRQ>

}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b48      	ldr	r3, [pc, #288]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a47      	ldr	r2, [pc, #284]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b45      	ldr	r3, [pc, #276]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b41      	ldr	r3, [pc, #260]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a39      	ldr	r2, [pc, #228]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b37      	ldr	r3, [pc, #220]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a32      	ldr	r2, [pc, #200]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b30      	ldr	r3, [pc, #192]	@ (8001e14 <MX_GPIO_Init+0x13c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2110      	movs	r1, #16
 8001d62:	482d      	ldr	r0, [pc, #180]	@ (8001e18 <MX_GPIO_Init+0x140>)
 8001d64:	f001 f980 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	482b      	ldr	r0, [pc, #172]	@ (8001e1c <MX_GPIO_Init+0x144>)
 8001d6e:	f001 f97b 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2110      	movs	r1, #16
 8001d76:	482a      	ldr	r0, [pc, #168]	@ (8001e20 <MX_GPIO_Init+0x148>)
 8001d78:	f001 f976 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8001d7c:	230c      	movs	r3, #12
 8001d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4822      	ldr	r0, [pc, #136]	@ (8001e1c <MX_GPIO_Init+0x144>)
 8001d92:	f000 ffcd 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 8001d96:	2310      	movs	r3, #16
 8001d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	481a      	ldr	r0, [pc, #104]	@ (8001e18 <MX_GPIO_Init+0x140>)
 8001dae:	f000 ffbf 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 8001db2:	2310      	movs	r3, #16
 8001db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4814      	ldr	r0, [pc, #80]	@ (8001e1c <MX_GPIO_Init+0x144>)
 8001dca:	f000 ffb1 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dce:	2310      	movs	r3, #16
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	480e      	ldr	r0, [pc, #56]	@ (8001e20 <MX_GPIO_Init+0x148>)
 8001de6:	f000 ffa3 	bl	8002d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2008      	movs	r0, #8
 8001df0:	f000 fbd5 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001df4:	2008      	movs	r0, #8
 8001df6:	f000 fbee 	bl	80025d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2009      	movs	r0, #9
 8001e00:	f000 fbcd 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e04:	2009      	movs	r0, #9
 8001e06:	f000 fbe6 	bl	80025d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	@ 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020400 	.word	0x40020400

08001e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <Error_Handler+0x8>

08001e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a08      	ldr	r2, [pc, #32]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd0 <HAL_SPI_MspInit+0x150>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	f040 8092 	bne.w	8001fc8 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd4 <HAL_SPI_MspInit+0x154>)
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eac:	4a49      	ldr	r2, [pc, #292]	@ (8001fd4 <HAL_SPI_MspInit+0x154>)
 8001eae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001eb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb4:	4b47      	ldr	r3, [pc, #284]	@ (8001fd4 <HAL_SPI_MspInit+0x154>)
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4b43      	ldr	r3, [pc, #268]	@ (8001fd4 <HAL_SPI_MspInit+0x154>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec8:	4a42      	ldr	r2, [pc, #264]	@ (8001fd4 <HAL_SPI_MspInit+0x154>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed0:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <HAL_SPI_MspInit+0x154>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001edc:	23e0      	movs	r3, #224	@ 0xe0
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eec:	2305      	movs	r3, #5
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4838      	ldr	r0, [pc, #224]	@ (8001fd8 <HAL_SPI_MspInit+0x158>)
 8001ef8:	f000 ff1a 	bl	8002d30 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001efc:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001efe:	4a38      	ldr	r2, [pc, #224]	@ (8001fe0 <HAL_SPI_MspInit+0x160>)
 8001f00:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f02:	4b36      	ldr	r3, [pc, #216]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f04:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001f08:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f0a:	4b34      	ldr	r3, [pc, #208]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f10:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f16:	4b31      	ldr	r3, [pc, #196]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f1c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001f30:	4b2a      	ldr	r3, [pc, #168]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f36:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f38:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001f3e:	4827      	ldr	r0, [pc, #156]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f40:	f000 fb64 	bl	800260c <HAL_DMA_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001f4a:	f7ff ff6b 	bl	8001e24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a22      	ldr	r2, [pc, #136]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f52:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001f54:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <HAL_SPI_MspInit+0x15c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001f5a:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f5c:	4a22      	ldr	r2, [pc, #136]	@ (8001fe8 <HAL_SPI_MspInit+0x168>)
 8001f5e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001f60:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f62:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001f66:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f6a:	2240      	movs	r2, #64	@ 0x40
 8001f6c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f7a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f94:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f96:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001f9c:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001f9e:	f000 fb35 	bl	800260c <HAL_DMA_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001fa8:	f7ff ff3c 	bl	8001e24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001fb0:	649a      	str	r2, [r3, #72]	@ 0x48
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe4 <HAL_SPI_MspInit+0x164>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2023      	movs	r0, #35	@ 0x23
 8001fbe:	f000 faee 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fc2:	2023      	movs	r0, #35	@ 0x23
 8001fc4:	f000 fb07 	bl	80025d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	@ 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40013000 	.word	0x40013000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	20000354 	.word	0x20000354
 8001fe0:	40026410 	.word	0x40026410
 8001fe4:	200003b4 	.word	0x200003b4
 8001fe8:	40026458 	.word	0x40026458

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <MemManage_Handler+0x4>

08002004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <UsageFault_Handler+0x4>

08002014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002042:	f000 f98d 	bl	8002360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}

0800204a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 800204e:	2004      	movs	r0, #4
 8002050:	f001 f83e 	bl	80030d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 800205c:	2008      	movs	r0, #8
 800205e:	f001 f837 	bl	80030d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <SPI1_IRQHandler+0x10>)
 800206e:	f003 fb79 	bl	8005764 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200002fc 	.word	0x200002fc

0800207c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <DMA2_Stream0_IRQHandler+0x10>)
 8002082:	f000 fbeb 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000354 	.word	0x20000354

08002090 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <DMA2_Stream3_IRQHandler+0x10>)
 8002096:	f000 fbe1 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200003b4 	.word	0x200003b4

080020a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020a8:	4802      	ldr	r0, [pc, #8]	@ (80020b4 <OTG_FS_IRQHandler+0x10>)
 80020aa:	f001 f96d 	bl	8003388 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200019f8 	.word	0x200019f8

080020b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return 1;
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_kill>:

int _kill(int pid, int sig)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020d2:	f008 fca3 	bl	800aa1c <__errno>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2216      	movs	r2, #22
 80020da:	601a      	str	r2, [r3, #0]
  return -1;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_exit>:

void _exit (int status)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ffe7 	bl	80020c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020fa:	bf00      	nop
 80020fc:	e7fd      	b.n	80020fa <_exit+0x12>

080020fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e00a      	b.n	8002126 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002110:	f3af 8000 	nop.w
 8002114:	4601      	mov	r1, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	60ba      	str	r2, [r7, #8]
 800211c:	b2ca      	uxtb	r2, r1
 800211e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	dbf0      	blt.n	8002110 <_read+0x12>
  }

  return len;
 800212e:	687b      	ldr	r3, [r7, #4]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e009      	b.n	800215e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	60ba      	str	r2, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	dbf1      	blt.n	800214a <_write+0x12>
  }
  return len;
 8002166:	687b      	ldr	r3, [r7, #4]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_close>:

int _close(int file)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002198:	605a      	str	r2, [r3, #4]
  return 0;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_isatty>:

int _isatty(int file)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e0:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <_sbrk+0x5c>)
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <_sbrk+0x60>)
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <_sbrk+0x64>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <_sbrk+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d207      	bcs.n	8002218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002208:	f008 fc08 	bl	800aa1c <__errno>
 800220c:	4603      	mov	r3, r0
 800220e:	220c      	movs	r2, #12
 8002210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e009      	b.n	800222c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <_sbrk+0x64>)
 8002228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20020000 	.word	0x20020000
 8002238:	00000400 	.word	0x00000400
 800223c:	20000510 	.word	0x20000510
 8002240:	20002248 	.word	0x20002248

08002244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <SystemInit+0x20>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224e:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <SystemInit+0x20>)
 8002250:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002254:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002268:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800226c:	f7ff ffea 	bl	8002244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002270:	480c      	ldr	r0, [pc, #48]	@ (80022a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002272:	490d      	ldr	r1, [pc, #52]	@ (80022a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002274:	4a0d      	ldr	r2, [pc, #52]	@ (80022ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002288:	4c0a      	ldr	r4, [pc, #40]	@ (80022b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002296:	f008 fbc7 	bl	800aa28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229a:	f7ff fbf3 	bl	8001a84 <main>
  bx  lr    
 800229e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a8:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80022ac:	0800d290 	.word	0x0800d290
  ldr r2, =_sbss
 80022b0:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80022b4:	20002248 	.word	0x20002248

080022b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC_IRQHandler>
	...

080022bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c0:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <HAL_Init+0x40>)
 80022c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <HAL_Init+0x40>)
 80022d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a07      	ldr	r2, [pc, #28]	@ (80022fc <HAL_Init+0x40>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f000 f94f 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ea:	200f      	movs	r0, #15
 80022ec:	f000 f808 	bl	8002300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f0:	f7ff fd9e 	bl	8001e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002308:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_InitTick+0x54>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_InitTick+0x58>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002316:	fbb3 f3f1 	udiv	r3, r3, r1
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f967 	bl	80025f2 <HAL_SYSTICK_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00e      	b.n	800234c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b0f      	cmp	r3, #15
 8002332:	d80a      	bhi.n	800234a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002334:	2200      	movs	r2, #0
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f000 f92f 	bl	800259e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002340:	4a06      	ldr	r2, [pc, #24]	@ (800235c <HAL_InitTick+0x5c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000000 	.word	0x20000000
 8002358:	20000008 	.word	0x20000008
 800235c:	20000004 	.word	0x20000004

08002360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_IncTick+0x20>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_IncTick+0x24>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4413      	add	r3, r2
 8002370:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <HAL_IncTick+0x24>)
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000008 	.word	0x20000008
 8002384:	20000514 	.word	0x20000514

08002388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return uwTick;
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <HAL_GetTick+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000514 	.word	0x20000514

080023a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff ffee 	bl	8002388 <HAL_GetTick>
 80023ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d005      	beq.n	80023c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_Delay+0x44>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023c6:	bf00      	nop
 80023c8:	f7ff ffde 	bl	8002388 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d8f7      	bhi.n	80023c8 <HAL_Delay+0x28>
  {
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000008 	.word	0x20000008

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	@ (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4907      	ldr	r1, [pc, #28]	@ (8002484 <__NVIC_EnableIRQ+0x38>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	@ (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	@ (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	@ 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	@ 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002554:	d301      	bcc.n	800255a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002556:	2301      	movs	r3, #1
 8002558:	e00f      	b.n	800257a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255a:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <SysTick_Config+0x40>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002562:	210f      	movs	r1, #15
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f7ff ff8e 	bl	8002488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <SysTick_Config+0x40>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <SysTick_Config+0x40>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff29 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff3e 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff8e 	bl	80024dc <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5d 	bl	8002488 <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff31 	bl	800244c <__NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffa2 	bl	8002544 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff feb6 	bl	8002388 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e099      	b.n	800275c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002648:	e00f      	b.n	800266a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800264a:	f7ff fe9d 	bl	8002388 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b05      	cmp	r3, #5
 8002656:	d908      	bls.n	800266a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2203      	movs	r2, #3
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e078      	b.n	800275c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e8      	bne.n	800264a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4b38      	ldr	r3, [pc, #224]	@ (8002764 <HAL_DMA_Init+0x158>)
 8002684:	4013      	ands	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002696:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d107      	bne.n	80026d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	4313      	orrs	r3, r2
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 0307 	bic.w	r3, r3, #7
 80026ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d117      	bne.n	800272e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00e      	beq.n	800272e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fa91 	bl	8002c38 <DMA_CheckFifoParam>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2240      	movs	r2, #64	@ 0x40
 8002720:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800272a:	2301      	movs	r3, #1
 800272c:	e016      	b.n	800275c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fa48 	bl	8002bcc <DMA_CalcBaseAndBitshift>
 800273c:	4603      	mov	r3, r0
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	223f      	movs	r2, #63	@ 0x3f
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	f010803f 	.word	0xf010803f

08002768 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_DMA_Start_IT+0x26>
 800278a:	2302      	movs	r3, #2
 800278c:	e040      	b.n	8002810 <HAL_DMA_Start_IT+0xa8>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d12f      	bne.n	8002802 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2202      	movs	r2, #2
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f9da 	bl	8002b70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c0:	223f      	movs	r2, #63	@ 0x3f
 80027c2:	409a      	lsls	r2, r3
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0216 	orr.w	r2, r2, #22
 80027d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0208 	orr.w	r2, r2, #8
 80027ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e005      	b.n	800280e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800280a:	2302      	movs	r3, #2
 800280c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800280e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d004      	beq.n	8002836 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2280      	movs	r2, #128	@ 0x80
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e00c      	b.n	8002850 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2205      	movs	r2, #5
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002868:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa4 <HAL_DMA_IRQHandler+0x248>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a8e      	ldr	r2, [pc, #568]	@ (8002aa8 <HAL_DMA_IRQHandler+0x24c>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0a9b      	lsrs	r3, r3, #10
 8002874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002886:	2208      	movs	r2, #8
 8002888:	409a      	lsls	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0204 	bic.w	r2, r2, #4
 80028ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	2208      	movs	r2, #8
 80028b6:	409a      	lsls	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028cc:	2201      	movs	r2, #1
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	2201      	movs	r2, #1
 80028ec:	409a      	lsls	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f6:	f043 0202 	orr.w	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	2204      	movs	r2, #4
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d012      	beq.n	8002934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00b      	beq.n	8002934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	2204      	movs	r2, #4
 8002922:	409a      	lsls	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292c:	f043 0204 	orr.w	r2, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002938:	2210      	movs	r2, #16
 800293a:	409a      	lsls	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d043      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d03c      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002956:	2210      	movs	r2, #16
 8002958:	409a      	lsls	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d018      	beq.n	800299e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d108      	bne.n	800298c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d024      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
 800298a:	e01f      	b.n	80029cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
 800299c:	e016      	b.n	80029cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0208 	bic.w	r2, r2, #8
 80029ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	2220      	movs	r2, #32
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 808f 	beq.w	8002afc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8087 	beq.w	8002afc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	2220      	movs	r2, #32
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d136      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0216 	bic.w	r2, r2, #22
 8002a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_DMA_IRQHandler+0x1da>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0208 	bic.w	r2, r2, #8
 8002a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	223f      	movs	r2, #63	@ 0x3f
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d07e      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
        }
        return;
 8002a72:	e079      	b.n	8002b68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01d      	beq.n	8002abe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10d      	bne.n	8002aac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d031      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
 8002aa0:	e02c      	b.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
 8002aa2:	bf00      	nop
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e01e      	b.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0210 	bic.w	r2, r2, #16
 8002ada:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d032      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2205      	movs	r2, #5
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d307      	bcc.n	8002b44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f2      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x2cc>
 8002b42:	e000      	b.n	8002b46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
 8002b66:	e000      	b.n	8002b6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b68:	bf00      	nop
    }
  }
}
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b40      	cmp	r3, #64	@ 0x40
 8002b9c:	d108      	bne.n	8002bb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bae:	e007      	b.n	8002bc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3b10      	subs	r3, #16
 8002bdc:	4a14      	ldr	r2, [pc, #80]	@ (8002c30 <DMA_CalcBaseAndBitshift+0x64>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002be6:	4a13      	ldr	r2, [pc, #76]	@ (8002c34 <DMA_CalcBaseAndBitshift+0x68>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d909      	bls.n	8002c0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	1d1a      	adds	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c0c:	e007      	b.n	8002c1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	aaaaaaab 	.word	0xaaaaaaab
 8002c34:	0800ced0 	.word	0x0800ced0

08002c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11f      	bne.n	8002c92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d856      	bhi.n	8002d06 <DMA_CheckFifoParam+0xce>
 8002c58:	a201      	add	r2, pc, #4	@ (adr r2, 8002c60 <DMA_CheckFifoParam+0x28>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c83 	.word	0x08002c83
 8002c68:	08002c71 	.word	0x08002c71
 8002c6c:	08002d07 	.word	0x08002d07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d046      	beq.n	8002d0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c80:	e043      	b.n	8002d0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c8a:	d140      	bne.n	8002d0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c90:	e03d      	b.n	8002d0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c9a:	d121      	bne.n	8002ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d837      	bhi.n	8002d12 <DMA_CheckFifoParam+0xda>
 8002ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca8 <DMA_CheckFifoParam+0x70>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002cb9 	.word	0x08002cb9
 8002cac:	08002cbf 	.word	0x08002cbf
 8002cb0:	08002cb9 	.word	0x08002cb9
 8002cb4:	08002cd1 	.word	0x08002cd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	e030      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d025      	beq.n	8002d16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cce:	e022      	b.n	8002d16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cd8:	d11f      	bne.n	8002d1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cde:	e01c      	b.n	8002d1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d903      	bls.n	8002cee <DMA_CheckFifoParam+0xb6>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d003      	beq.n	8002cf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cec:	e018      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf2:	e015      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      break;
 8002d04:	e00b      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
      break;
 8002d06:	bf00      	nop
 8002d08:	e00a      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e008      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e006      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e004      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e002      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	@ 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e16b      	b.n	8003024 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 815a 	bne.w	800301e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d130      	bne.n	8002de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db8:	2201      	movs	r2, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0201 	and.w	r2, r3, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d017      	beq.n	8002e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d123      	bne.n	8002e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80b4 	beq.w	800301e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b60      	ldr	r3, [pc, #384]	@ (800303c <HAL_GPIO_Init+0x30c>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	4a5f      	ldr	r2, [pc, #380]	@ (800303c <HAL_GPIO_Init+0x30c>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800303c <HAL_GPIO_Init+0x30c>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8003040 <HAL_GPIO_Init+0x310>)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	@ (8003044 <HAL_GPIO_Init+0x314>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02b      	beq.n	8002f56 <HAL_GPIO_Init+0x226>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a51      	ldr	r2, [pc, #324]	@ (8003048 <HAL_GPIO_Init+0x318>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d025      	beq.n	8002f52 <HAL_GPIO_Init+0x222>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a50      	ldr	r2, [pc, #320]	@ (800304c <HAL_GPIO_Init+0x31c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01f      	beq.n	8002f4e <HAL_GPIO_Init+0x21e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4f      	ldr	r2, [pc, #316]	@ (8003050 <HAL_GPIO_Init+0x320>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d019      	beq.n	8002f4a <HAL_GPIO_Init+0x21a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4e      	ldr	r2, [pc, #312]	@ (8003054 <HAL_GPIO_Init+0x324>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_GPIO_Init+0x216>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4d      	ldr	r2, [pc, #308]	@ (8003058 <HAL_GPIO_Init+0x328>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00d      	beq.n	8002f42 <HAL_GPIO_Init+0x212>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4c      	ldr	r2, [pc, #304]	@ (800305c <HAL_GPIO_Init+0x32c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <HAL_GPIO_Init+0x20e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4b      	ldr	r2, [pc, #300]	@ (8003060 <HAL_GPIO_Init+0x330>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_GPIO_Init+0x20a>
 8002f36:	2307      	movs	r3, #7
 8002f38:	e00e      	b.n	8002f58 <HAL_GPIO_Init+0x228>
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	e00c      	b.n	8002f58 <HAL_GPIO_Init+0x228>
 8002f3e:	2306      	movs	r3, #6
 8002f40:	e00a      	b.n	8002f58 <HAL_GPIO_Init+0x228>
 8002f42:	2305      	movs	r3, #5
 8002f44:	e008      	b.n	8002f58 <HAL_GPIO_Init+0x228>
 8002f46:	2304      	movs	r3, #4
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x228>
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e004      	b.n	8002f58 <HAL_GPIO_Init+0x228>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e002      	b.n	8002f58 <HAL_GPIO_Init+0x228>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_GPIO_Init+0x228>
 8002f56:	2300      	movs	r3, #0
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f002 0203 	and.w	r2, r2, #3
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	4093      	lsls	r3, r2
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f68:	4935      	ldr	r1, [pc, #212]	@ (8003040 <HAL_GPIO_Init+0x310>)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	3302      	adds	r3, #2
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f76:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <HAL_GPIO_Init+0x334>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f9a:	4a32      	ldr	r2, [pc, #200]	@ (8003064 <HAL_GPIO_Init+0x334>)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa0:	4b30      	ldr	r3, [pc, #192]	@ (8003064 <HAL_GPIO_Init+0x334>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc4:	4a27      	ldr	r2, [pc, #156]	@ (8003064 <HAL_GPIO_Init+0x334>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fca:	4b26      	ldr	r3, [pc, #152]	@ (8003064 <HAL_GPIO_Init+0x334>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fee:	4a1d      	ldr	r2, [pc, #116]	@ (8003064 <HAL_GPIO_Init+0x334>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <HAL_GPIO_Init+0x334>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003018:	4a12      	ldr	r2, [pc, #72]	@ (8003064 <HAL_GPIO_Init+0x334>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	2b0f      	cmp	r3, #15
 8003028:	f67f ae90 	bls.w	8002d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	40013800 	.word	0x40013800
 8003044:	40020000 	.word	0x40020000
 8003048:	40020400 	.word	0x40020400
 800304c:	40020800 	.word	0x40020800
 8003050:	40020c00 	.word	0x40020c00
 8003054:	40021000 	.word	0x40021000
 8003058:	40021400 	.word	0x40021400
 800305c:	40021800 	.word	0x40021800
 8003060:	40021c00 	.word	0x40021c00
 8003064:	40013c00 	.word	0x40013c00

08003068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
 8003074:	4613      	mov	r3, r2
 8003076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003078:	787b      	ldrb	r3, [r7, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003084:	e003      	b.n	800308e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	041a      	lsls	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ac:	887a      	ldrh	r2, [r7, #2]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	041a      	lsls	r2, r3, #16
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	400b      	ands	r3, r1
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030da:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d006      	beq.n	80030f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030e6:	4a05      	ldr	r2, [pc, #20]	@ (80030fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fc48 	bl	8001984 <HAL_GPIO_EXTI_Callback>
  }
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40013c00 	.word	0x40013c00

08003100 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
 8003106:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e101      	b.n	8003316 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f006 fb91 	bl	8009854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2203      	movs	r2, #3
 8003136:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003140:	d102      	bne.n	8003148 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f002 ff78 	bl	8006042 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7c1a      	ldrb	r2, [r3, #16]
 800315a:	f88d 2000 	strb.w	r2, [sp]
 800315e:	3304      	adds	r3, #4
 8003160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003162:	f002 fe57 	bl	8005e14 <USB_CoreInit>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0ce      	b.n	8003316 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f002 ff70 	bl	8006064 <USB_SetCurrentMode>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2202      	movs	r2, #2
 800318e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0bf      	b.n	8003316 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e04a      	b.n	8003232 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3315      	adds	r3, #21
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	3314      	adds	r3, #20
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	b298      	uxth	r0, r3
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	332e      	adds	r3, #46	@ 0x2e
 80031d8:	4602      	mov	r2, r0
 80031da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	3318      	adds	r3, #24
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	331c      	adds	r3, #28
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	3320      	adds	r3, #32
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	3324      	adds	r3, #36	@ 0x24
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	3301      	adds	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	791b      	ldrb	r3, [r3, #4]
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	429a      	cmp	r2, r3
 800323a:	d3af      	bcc.n	800319c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e044      	b.n	80032cc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	3301      	adds	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	791b      	ldrb	r3, [r3, #4]
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3b5      	bcc.n	8003242 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7c1a      	ldrb	r2, [r3, #16]
 80032de:	f88d 2000 	strb.w	r2, [sp]
 80032e2:	3304      	adds	r3, #4
 80032e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e6:	f002 ff09 	bl	80060fc <USB_DevInit>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e00c      	b.n	8003316 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 ff53 	bl	80071ba <USB_DevDisconnect>

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_PCD_Start+0x1c>
 8003336:	2302      	movs	r3, #2
 8003338:	e022      	b.n	8003380 <HAL_PCD_Start+0x62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f002 fe5a 	bl	8006020 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f003 ff01 	bl	8007178 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b08d      	sub	sp, #52	@ 0x34
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 ffbf 	bl	8007322 <USB_GetMode>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f040 848c 	bne.w	8003cc4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f003 ff23 	bl	80071fc <USB_ReadInterrupts>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8482 	beq.w	8003cc2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 ff10 	bl	80071fc <USB_ReadInterrupts>
 80033dc:	4603      	mov	r3, r0
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f002 0202 	and.w	r2, r2, #2
 80033f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fefe 	bl	80071fc <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b10      	cmp	r3, #16
 8003408:	d161      	bne.n	80034ce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0210 	bic.w	r2, r2, #16
 8003418:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	3304      	adds	r3, #4
 8003438:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	0c5b      	lsrs	r3, r3, #17
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	2b02      	cmp	r3, #2
 8003444:	d124      	bne.n	8003490 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d035      	beq.n	80034be <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800345c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003460:	b29b      	uxth	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	6a38      	ldr	r0, [r7, #32]
 8003466:	f003 fd35 	bl	8006ed4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003476:	441a      	add	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003488:	441a      	add	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	615a      	str	r2, [r3, #20]
 800348e:	e016      	b.n	80034be <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	0c5b      	lsrs	r3, r3, #17
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2b06      	cmp	r3, #6
 800349a:	d110      	bne.n	80034be <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034a2:	2208      	movs	r2, #8
 80034a4:	4619      	mov	r1, r3
 80034a6:	6a38      	ldr	r0, [r7, #32]
 80034a8:	f003 fd14 	bl	8006ed4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b8:	441a      	add	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0210 	orr.w	r2, r2, #16
 80034cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 fe92 	bl	80071fc <USB_ReadInterrupts>
 80034d8:	4603      	mov	r3, r0
 80034da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034e2:	f040 80a7 	bne.w	8003634 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f003 fe97 	bl	8007222 <USB_ReadDevAllOutEpInterrupt>
 80034f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80034f6:	e099      	b.n	800362c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 808e 	beq.w	8003620 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f003 febb 	bl	800728a <USB_ReadDevOutEPInterrupt>
 8003514:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00c      	beq.n	800353a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	2301      	movs	r3, #1
 8003530:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003532:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fea3 	bl	8004280 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00c      	beq.n	800355e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003550:	461a      	mov	r2, r3
 8003552:	2308      	movs	r3, #8
 8003554:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003556:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 ff79 	bl	8004450 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003574:	461a      	mov	r2, r3
 8003576:	2310      	movs	r3, #16
 8003578:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d030      	beq.n	80035e6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358c:	2b80      	cmp	r3, #128	@ 0x80
 800358e:	d109      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800359e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035a2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	3304      	adds	r3, #4
 80035b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	78db      	ldrb	r3, [r3, #3]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d108      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f006 fa46 	bl	8009a60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e0:	461a      	mov	r2, r3
 80035e2:	2302      	movs	r3, #2
 80035e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035fc:	461a      	mov	r2, r3
 80035fe:	2320      	movs	r3, #32
 8003600:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800361e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	3301      	adds	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	2b00      	cmp	r3, #0
 8003630:	f47f af62 	bne.w	80034f8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f003 fddf 	bl	80071fc <USB_ReadInterrupts>
 800363e:	4603      	mov	r3, r0
 8003640:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003644:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003648:	f040 80db 	bne.w	8003802 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f003 fe00 	bl	8007256 <USB_ReadDevAllInEpInterrupt>
 8003656:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800365c:	e0cd      	b.n	80037fa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800365e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80c2 	beq.w	80037ee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f003 fe26 	bl	80072c6 <USB_ReadDevInEPInterrupt>
 800367a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d057      	beq.n	8003736 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	2201      	movs	r2, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800369a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69f9      	ldr	r1, [r7, #28]
 80036a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036a6:	4013      	ands	r3, r2
 80036a8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b6:	461a      	mov	r2, r3
 80036b8:	2301      	movs	r3, #1
 80036ba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	799b      	ldrb	r3, [r3, #6]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d132      	bne.n	800372a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3320      	adds	r3, #32
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4403      	add	r3, r0
 80036e4:	331c      	adds	r3, #28
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4419      	add	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4403      	add	r3, r0
 80036f8:	3320      	adds	r3, #32
 80036fa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <HAL_PCD_IRQHandler+0x3a2>
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	3324      	adds	r3, #36	@ 0x24
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d108      	bne.n	800372a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003722:	461a      	mov	r2, r3
 8003724:	2101      	movs	r1, #1
 8003726:	f003 fe2d 	bl	8007384 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	b2db      	uxtb	r3, r3
 800372e:	4619      	mov	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f006 f910 	bl	8009956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800374c:	461a      	mov	r2, r3
 800374e:	2308      	movs	r3, #8
 8003750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003768:	461a      	mov	r2, r3
 800376a:	2310      	movs	r3, #16
 800376c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003784:	461a      	mov	r2, r3
 8003786:	2340      	movs	r3, #64	@ 0x40
 8003788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d023      	beq.n	80037dc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003794:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003796:	6a38      	ldr	r0, [r7, #32]
 8003798:	f002 fe14 	bl	80063c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800379c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	3310      	adds	r3, #16
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	3304      	adds	r3, #4
 80037ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	78db      	ldrb	r3, [r3, #3]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d108      	bne.n	80037ca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2200      	movs	r2, #0
 80037bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	4619      	mov	r1, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f006 f95d 	bl	8009a84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d6:	461a      	mov	r2, r3
 80037d8:	2302      	movs	r3, #2
 80037da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fcbd 	bl	8004168 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	3301      	adds	r3, #1
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f af2e 	bne.w	800365e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f003 fcf8 	bl	80071fc <USB_ReadInterrupts>
 800380c:	4603      	mov	r3, r0
 800380e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003812:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003816:	d122      	bne.n	800385e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800383e:	2100      	movs	r1, #0
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fea3 	bl	800458c <HAL_PCDEx_LPM_Callback>
 8003846:	e002      	b.n	800384e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f006 f8fb 	bl	8009a44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800385c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f003 fcca 	bl	80071fc <USB_ReadInterrupts>
 8003868:	4603      	mov	r3, r0
 800386a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800386e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003872:	d112      	bne.n	800389a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d102      	bne.n	800388a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f006 f8b7 	bl	80099f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003898:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f003 fcac 	bl	80071fc <USB_ReadInterrupts>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ae:	f040 80b7 	bne.w	8003a20 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2110      	movs	r1, #16
 80038cc:	4618      	mov	r0, r3
 80038ce:	f002 fd79 	bl	80063c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038d6:	e046      	b.n	8003966 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e4:	461a      	mov	r2, r3
 80038e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	440a      	add	r2, r1
 8003902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003906:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800390a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800390c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003918:	461a      	mov	r2, r3
 800391a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800391e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003930:	0151      	lsls	r1, r2, #5
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	440a      	add	r2, r1
 8003936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800393a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800393e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003950:	0151      	lsls	r1, r2, #5
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	440a      	add	r2, r1
 8003956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800395a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800395e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003962:	3301      	adds	r3, #1
 8003964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	791b      	ldrb	r3, [r3, #4]
 800396a:	461a      	mov	r2, r3
 800396c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396e:	4293      	cmp	r3, r2
 8003970:	d3b2      	bcc.n	80038d8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003980:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003984:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	7bdb      	ldrb	r3, [r3, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003994:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800399e:	f043 030b 	orr.w	r3, r3, #11
 80039a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039b4:	f043 030b 	orr.w	r3, r3, #11
 80039b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ba:	e015      	b.n	80039e8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039ce:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80039d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039e2:	f043 030b 	orr.w	r3, r3, #11
 80039e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80039fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f003 fcba 	bl	8007384 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 fbe9 	bl	80071fc <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a34:	d123      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 fc7f 	bl	800733e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f002 fd36 	bl	80064b6 <USB_GetDevSpeed>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681c      	ldr	r4, [r3, #0]
 8003a56:	f001 fa07 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8003a5a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a60:	461a      	mov	r2, r3
 8003a62:	4620      	mov	r0, r4
 8003a64:	f002 fa3a 	bl	8005edc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f005 ff9c 	bl	80099a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 fbba 	bl	80071fc <USB_ReadInterrupts>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d10a      	bne.n	8003aa8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f005 ff79 	bl	800998a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f002 0208 	and.w	r2, r2, #8
 8003aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f003 fba5 	bl	80071fc <USB_ReadInterrupts>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab8:	2b80      	cmp	r3, #128	@ 0x80
 8003aba:	d123      	bne.n	8003b04 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ac8:	2301      	movs	r3, #1
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003acc:	e014      	b.n	8003af8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d105      	bne.n	8003af2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	4619      	mov	r1, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fb0a 	bl	8004106 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	3301      	adds	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	791b      	ldrb	r3, [r3, #4]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d3e4      	bcc.n	8003ace <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 fb77 	bl	80071fc <USB_ReadInterrupts>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b18:	d13c      	bne.n	8003b94 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b1e:	e02b      	b.n	8003b78 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3318      	adds	r3, #24
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d115      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	da12      	bge.n	8003b72 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3317      	adds	r3, #23
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 faca 	bl	8004106 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	3301      	adds	r3, #1
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	791b      	ldrb	r3, [r3, #4]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d3cd      	bcc.n	8003b20 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 fb2f 	bl	80071fc <USB_ReadInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ba4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ba8:	d156      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003baa:	2301      	movs	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bae:	e045      	b.n	8003c3c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d12e      	bne.n	8003c36 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bd8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	da2b      	bge.n	8003c36 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003bea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d121      	bne.n	8003c36 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c32:	6053      	str	r3, [r2, #4]
            break;
 8003c34:	e008      	b.n	8003c48 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	3301      	adds	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	791b      	ldrb	r3, [r3, #4]
 8003c40:	461a      	mov	r2, r3
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d3b3      	bcc.n	8003bb0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f003 facd 	bl	80071fc <USB_ReadInterrupts>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6c:	d10a      	bne.n	8003c84 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f005 ff1a 	bl	8009aa8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 fab7 	bl	80071fc <USB_ReadInterrupts>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d115      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f005 ff0a 	bl	8009ac4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6859      	ldr	r1, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	e000      	b.n	8003cc4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003cc2:	bf00      	nop
    }
  }
}
 8003cc4:	3734      	adds	r7, #52	@ 0x34
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}

08003cca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_PCD_SetAddress+0x1a>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e012      	b.n	8003d0a <HAL_PCD_SetAddress+0x40>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f003 fa16 	bl	800712c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	4608      	mov	r0, r1
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4603      	mov	r3, r0
 8003d22:	70fb      	strb	r3, [r7, #3]
 8003d24:	460b      	mov	r3, r1
 8003d26:	803b      	strh	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	da0f      	bge.n	8003d58 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	f003 020f 	and.w	r2, r3, #15
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	3310      	adds	r3, #16
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	705a      	strb	r2, [r3, #1]
 8003d56:	e00f      	b.n	8003d78 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	f003 020f 	and.w	r2, r3, #15
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3304      	adds	r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003d84:	883b      	ldrh	r3, [r7, #0]
 8003d86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	78ba      	ldrb	r2, [r7, #2]
 8003d92:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003da6:	78bb      	ldrb	r3, [r7, #2]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d102      	bne.n	8003db2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_PCD_EP_Open+0xae>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e00e      	b.n	8003dde <HAL_PCD_EP_Open+0xcc>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68f9      	ldr	r1, [r7, #12]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f002 fb96 	bl	8006500 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003ddc:	7afb      	ldrb	r3, [r7, #11]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	da0f      	bge.n	8003e1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	3310      	adds	r3, #16
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3304      	adds	r3, #4
 8003e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	705a      	strb	r2, [r3, #1]
 8003e18:	e00f      	b.n	8003e3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	f003 020f 	and.w	r2, r3, #15
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4413      	add	r3, r2
 8003e30:	3304      	adds	r3, #4
 8003e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_PCD_EP_Close+0x6e>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e00e      	b.n	8003e72 <HAL_PCD_EP_Close+0x8c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68f9      	ldr	r1, [r7, #12]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f002 fbd4 	bl	8006610 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b086      	sub	sp, #24
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	460b      	mov	r3, r1
 8003e88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e8a:	7afb      	ldrb	r3, [r7, #11]
 8003e8c:	f003 020f 	and.w	r2, r3, #15
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ebc:	7afb      	ldrb	r3, [r7, #11]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	799b      	ldrb	r3, [r3, #6]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d102      	bne.n	8003ed6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	799b      	ldrb	r3, [r3, #6]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6979      	ldr	r1, [r7, #20]
 8003ee2:	f002 fc71 	bl	80067c8 <USB_EPStartXfer>

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 020f 	and.w	r2, r3, #15
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f12:	681b      	ldr	r3, [r3, #0]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f30:	7afb      	ldrb	r3, [r7, #11]
 8003f32:	f003 020f 	and.w	r2, r3, #15
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	3310      	adds	r3, #16
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2200      	movs	r2, #0
 8003f58:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f60:	7afb      	ldrb	r3, [r7, #11]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	799b      	ldrb	r3, [r3, #6]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d102      	bne.n	8003f7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	799b      	ldrb	r3, [r3, #6]
 8003f82:	461a      	mov	r2, r3
 8003f84:	6979      	ldr	r1, [r7, #20]
 8003f86:	f002 fc1f 	bl	80067c8 <USB_EPStartXfer>

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	7912      	ldrb	r2, [r2, #4]
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e04f      	b.n	8004052 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	da0f      	bge.n	8003fda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 020f 	and.w	r2, r3, #15
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	3310      	adds	r3, #16
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4413      	add	r3, r2
 8003fce:	3304      	adds	r3, #4
 8003fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	705a      	strb	r2, [r3, #1]
 8003fd8:	e00d      	b.n	8003ff6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	3304      	adds	r3, #4
 8003fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_PCD_EP_SetStall+0x82>
 8004012:	2302      	movs	r3, #2
 8004014:	e01d      	b.n	8004052 <HAL_PCD_EP_SetStall+0xbe>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	4618      	mov	r0, r3
 8004026:	f002 ffad 	bl	8006f84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7999      	ldrb	r1, [r3, #6]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004042:	461a      	mov	r2, r3
 8004044:	f003 f99e 	bl	8007384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	460b      	mov	r3, r1
 8004064:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	7912      	ldrb	r2, [r2, #4]
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e042      	b.n	80040fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800407c:	2b00      	cmp	r3, #0
 800407e:	da0f      	bge.n	80040a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	3310      	adds	r3, #16
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	705a      	strb	r2, [r3, #1]
 800409e:	e00f      	b.n	80040c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	f003 020f 	and.w	r2, r3, #15
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_PCD_EP_ClrStall+0x86>
 80040dc:	2302      	movs	r3, #2
 80040de:	e00e      	b.n	80040fe <HAL_PCD_EP_ClrStall+0xa4>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68f9      	ldr	r1, [r7, #12]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f002 ffb6 	bl	8007060 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004116:	2b00      	cmp	r3, #0
 8004118:	da0c      	bge.n	8004134 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 020f 	and.w	r2, r3, #15
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	3310      	adds	r3, #16
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	3304      	adds	r3, #4
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e00c      	b.n	800414e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	f003 020f 	and.w	r2, r3, #15
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	3304      	adds	r3, #4
 800414c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	4618      	mov	r0, r3
 8004156:	f002 fdd5 	bl	8006d04 <USB_EPStopXfer>
 800415a:	4603      	mov	r3, r0
 800415c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800415e:	7afb      	ldrb	r3, [r7, #11]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	@ 0x28
 800416c:	af02      	add	r7, sp, #8
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	3310      	adds	r3, #16
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4413      	add	r3, r2
 800418c:	3304      	adds	r3, #4
 800418e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	429a      	cmp	r2, r3
 800419a:	d901      	bls.n	80041a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e06b      	b.n	8004278 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d902      	bls.n	80041bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	3303      	adds	r3, #3
 80041c0:	089b      	lsrs	r3, r3, #2
 80041c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041c4:	e02a      	b.n	800421c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d902      	bls.n	80041e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3303      	adds	r3, #3
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	4603      	mov	r3, r0
 80041fe:	6978      	ldr	r0, [r7, #20]
 8004200:	f002 fe2a 	bl	8006e58 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	441a      	add	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	441a      	add	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	429a      	cmp	r2, r3
 8004230:	d809      	bhi.n	8004246 <PCD_WriteEmptyTxFifo+0xde>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800423a:	429a      	cmp	r2, r3
 800423c:	d203      	bcs.n	8004246 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1bf      	bne.n	80041c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	429a      	cmp	r2, r3
 8004250:	d811      	bhi.n	8004276 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	2201      	movs	r2, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	43db      	mvns	r3, r3
 800426c:	6939      	ldr	r1, [r7, #16]
 800426e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004272:	4013      	ands	r3, r2
 8004274:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	333c      	adds	r3, #60	@ 0x3c
 8004298:	3304      	adds	r3, #4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	799b      	ldrb	r3, [r3, #6]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d17b      	bne.n	80043ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d015      	beq.n	80042ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	4a61      	ldr	r2, [pc, #388]	@ (8004448 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	f240 80b9 	bls.w	800443c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80b3 	beq.w	800443c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e2:	461a      	mov	r2, r3
 80042e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042e8:	6093      	str	r3, [r2, #8]
 80042ea:	e0a7      	b.n	800443c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004302:	461a      	mov	r2, r3
 8004304:	2320      	movs	r3, #32
 8004306:	6093      	str	r3, [r2, #8]
 8004308:	e098      	b.n	800443c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	f040 8093 	bne.w	800443c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	4a4b      	ldr	r2, [pc, #300]	@ (8004448 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d90f      	bls.n	800433e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004334:	461a      	mov	r2, r3
 8004336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800433a:	6093      	str	r3, [r2, #8]
 800433c:	e07e      	b.n	800443c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1a      	ldr	r2, [r3, #32]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	0159      	lsls	r1, r3, #5
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	440b      	add	r3, r1
 8004360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436a:	1ad2      	subs	r2, r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d114      	bne.n	80043a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004388:	461a      	mov	r2, r3
 800438a:	2101      	movs	r1, #1
 800438c:	f002 fffa 	bl	8007384 <USB_EP0_OutStart>
 8004390:	e006      	b.n	80043a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	441a      	add	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f005 faba 	bl	8009920 <HAL_PCD_DataOutStageCallback>
 80043ac:	e046      	b.n	800443c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	4a26      	ldr	r2, [pc, #152]	@ (800444c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d124      	bne.n	8004400 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	461a      	mov	r2, r3
 80043ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043d2:	6093      	str	r3, [r2, #8]
 80043d4:	e032      	b.n	800443c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ec:	461a      	mov	r2, r3
 80043ee:	2320      	movs	r3, #32
 80043f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f005 fa91 	bl	8009920 <HAL_PCD_DataOutStageCallback>
 80043fe:	e01d      	b.n	800443c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d114      	bne.n	8004430 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d108      	bne.n	8004430 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004428:	461a      	mov	r2, r3
 800442a:	2100      	movs	r1, #0
 800442c:	f002 ffaa 	bl	8007384 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f005 fa72 	bl	8009920 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	4f54300a 	.word	0x4f54300a
 800444c:	4f54310a 	.word	0x4f54310a

08004450 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	333c      	adds	r3, #60	@ 0x3c
 8004468:	3304      	adds	r3, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a15      	ldr	r2, [pc, #84]	@ (80044d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d90e      	bls.n	80044a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800449c:	461a      	mov	r2, r3
 800449e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f005 fa29 	bl	80098fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a0a      	ldr	r2, [pc, #40]	@ (80044d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d90c      	bls.n	80044cc <PCD_EP_OutSetupPacket_int+0x7c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	799b      	ldrb	r3, [r3, #6]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d108      	bne.n	80044cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044c4:	461a      	mov	r2, r3
 80044c6:	2101      	movs	r1, #1
 80044c8:	f002 ff5c 	bl	8007384 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	4f54300a 	.word	0x4f54300a

080044dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
 80044e8:	4613      	mov	r3, r2
 80044ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044fa:	883b      	ldrh	r3, [r7, #0]
 80044fc:	0419      	lsls	r1, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	430a      	orrs	r2, r1
 8004506:	629a      	str	r2, [r3, #40]	@ 0x28
 8004508:	e028      	b.n	800455c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	4413      	add	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004518:	2300      	movs	r3, #0
 800451a:	73fb      	strb	r3, [r7, #15]
 800451c:	e00d      	b.n	800453a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	3340      	adds	r3, #64	@ 0x40
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	4413      	add	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	3301      	adds	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	7bfa      	ldrb	r2, [r7, #15]
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	3b01      	subs	r3, #1
 8004540:	429a      	cmp	r2, r3
 8004542:	d3ec      	bcc.n	800451e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004544:	883b      	ldrh	r3, [r7, #0]
 8004546:	0418      	lsls	r0, r3, #16
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	3b01      	subs	r3, #1
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	4302      	orrs	r2, r0
 8004554:	3340      	adds	r3, #64	@ 0x40
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	887a      	ldrh	r2, [r7, #2]
 800457c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e267      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d075      	beq.n	80046ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045c2:	4b88      	ldr	r3, [pc, #544]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d00c      	beq.n	80045e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ce:	4b85      	ldr	r3, [pc, #532]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d112      	bne.n	8004600 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045da:	4b82      	ldr	r3, [pc, #520]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045e6:	d10b      	bne.n	8004600 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	4b7e      	ldr	r3, [pc, #504]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d05b      	beq.n	80046ac <HAL_RCC_OscConfig+0x108>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d157      	bne.n	80046ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e242      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004608:	d106      	bne.n	8004618 <HAL_RCC_OscConfig+0x74>
 800460a:	4b76      	ldr	r3, [pc, #472]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a75      	ldr	r2, [pc, #468]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e01d      	b.n	8004654 <HAL_RCC_OscConfig+0xb0>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0x98>
 8004622:	4b70      	ldr	r3, [pc, #448]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6f      	ldr	r2, [pc, #444]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	4b6d      	ldr	r3, [pc, #436]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6c      	ldr	r2, [pc, #432]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e00b      	b.n	8004654 <HAL_RCC_OscConfig+0xb0>
 800463c:	4b69      	ldr	r3, [pc, #420]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a68      	ldr	r2, [pc, #416]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b66      	ldr	r3, [pc, #408]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a65      	ldr	r2, [pc, #404]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 800464e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7fd fe94 	bl	8002388 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004664:	f7fd fe90 	bl	8002388 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	@ 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e207      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004676:	4b5b      	ldr	r3, [pc, #364]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0xc0>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fd fe80 	bl	8002388 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7fd fe7c 	bl	8002388 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	@ 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e1f3      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469e:	4b51      	ldr	r3, [pc, #324]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0xe8>
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d063      	beq.n	8004782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046ba:	4b4a      	ldr	r3, [pc, #296]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c6:	4b47      	ldr	r3, [pc, #284]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d11c      	bne.n	800470c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d2:	4b44      	ldr	r3, [pc, #272]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d116      	bne.n	800470c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046de:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_RCC_OscConfig+0x152>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d001      	beq.n	80046f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e1c7      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f6:	4b3b      	ldr	r3, [pc, #236]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4937      	ldr	r1, [pc, #220]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	e03a      	b.n	8004782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d020      	beq.n	8004756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004714:	4b34      	ldr	r3, [pc, #208]	@ (80047e8 <HAL_RCC_OscConfig+0x244>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fd fe35 	bl	8002388 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004722:	f7fd fe31 	bl	8002388 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e1a8      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004734:	4b2b      	ldr	r3, [pc, #172]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004740:	4b28      	ldr	r3, [pc, #160]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4925      	ldr	r1, [pc, #148]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]
 8004754:	e015      	b.n	8004782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004756:	4b24      	ldr	r3, [pc, #144]	@ (80047e8 <HAL_RCC_OscConfig+0x244>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fd fe14 	bl	8002388 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004764:	f7fd fe10 	bl	8002388 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e187      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004776:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d036      	beq.n	80047fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004796:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <HAL_RCC_OscConfig+0x248>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fd fdf4 	bl	8002388 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a4:	f7fd fdf0 	bl	8002388 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e167      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <HAL_RCC_OscConfig+0x240>)
 80047b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x200>
 80047c2:	e01b      	b.n	80047fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c4:	4b09      	ldr	r3, [pc, #36]	@ (80047ec <HAL_RCC_OscConfig+0x248>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ca:	f7fd fddd 	bl	8002388 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d0:	e00e      	b.n	80047f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d2:	f7fd fdd9 	bl	8002388 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d907      	bls.n	80047f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e150      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
 80047e4:	40023800 	.word	0x40023800
 80047e8:	42470000 	.word	0x42470000
 80047ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f0:	4b88      	ldr	r3, [pc, #544]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ea      	bne.n	80047d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8097 	beq.w	8004938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800480a:	2300      	movs	r3, #0
 800480c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480e:	4b81      	ldr	r3, [pc, #516]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10f      	bne.n	800483a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	4a7c      	ldr	r2, [pc, #496]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004828:	6413      	str	r3, [r2, #64]	@ 0x40
 800482a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004836:	2301      	movs	r3, #1
 8004838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483a:	4b77      	ldr	r3, [pc, #476]	@ (8004a18 <HAL_RCC_OscConfig+0x474>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d118      	bne.n	8004878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004846:	4b74      	ldr	r3, [pc, #464]	@ (8004a18 <HAL_RCC_OscConfig+0x474>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a73      	ldr	r2, [pc, #460]	@ (8004a18 <HAL_RCC_OscConfig+0x474>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004852:	f7fd fd99 	bl	8002388 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7fd fd95 	bl	8002388 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e10c      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a18 <HAL_RCC_OscConfig+0x474>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d106      	bne.n	800488e <HAL_RCC_OscConfig+0x2ea>
 8004880:	4b64      	ldr	r3, [pc, #400]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004884:	4a63      	ldr	r2, [pc, #396]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	6713      	str	r3, [r2, #112]	@ 0x70
 800488c:	e01c      	b.n	80048c8 <HAL_RCC_OscConfig+0x324>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b05      	cmp	r3, #5
 8004894:	d10c      	bne.n	80048b0 <HAL_RCC_OscConfig+0x30c>
 8004896:	4b5f      	ldr	r3, [pc, #380]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	4a5e      	ldr	r2, [pc, #376]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 800489c:	f043 0304 	orr.w	r3, r3, #4
 80048a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ae:	e00b      	b.n	80048c8 <HAL_RCC_OscConfig+0x324>
 80048b0:	4b58      	ldr	r3, [pc, #352]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b4:	4a57      	ldr	r2, [pc, #348]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80048bc:	4b55      	ldr	r3, [pc, #340]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c0:	4a54      	ldr	r2, [pc, #336]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048c2:	f023 0304 	bic.w	r3, r3, #4
 80048c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fd fd5a 	bl	8002388 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d8:	f7fd fd56 	bl	8002388 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0cb      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ee:	4b49      	ldr	r3, [pc, #292]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0ee      	beq.n	80048d8 <HAL_RCC_OscConfig+0x334>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fc:	f7fd fd44 	bl	8002388 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004902:	e00a      	b.n	800491a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004904:	f7fd fd40 	bl	8002388 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e0b5      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800491a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1ee      	bne.n	8004904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004926:	7dfb      	ldrb	r3, [r7, #23]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d105      	bne.n	8004938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800492c:	4b39      	ldr	r3, [pc, #228]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	4a38      	ldr	r2, [pc, #224]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004936:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80a1 	beq.w	8004a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004942:	4b34      	ldr	r3, [pc, #208]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b08      	cmp	r3, #8
 800494c:	d05c      	beq.n	8004a08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d141      	bne.n	80049da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004956:	4b31      	ldr	r3, [pc, #196]	@ (8004a1c <HAL_RCC_OscConfig+0x478>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fd fd14 	bl	8002388 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd fd10 	bl	8002388 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e087      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	4b27      	ldr	r3, [pc, #156]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69da      	ldr	r2, [r3, #28]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	019b      	lsls	r3, r3, #6
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004998:	085b      	lsrs	r3, r3, #1
 800499a:	3b01      	subs	r3, #1
 800499c:	041b      	lsls	r3, r3, #16
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	491b      	ldr	r1, [pc, #108]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ac:	4b1b      	ldr	r3, [pc, #108]	@ (8004a1c <HAL_RCC_OscConfig+0x478>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fd fce9 	bl	8002388 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fd fce5 	bl	8002388 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e05c      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049cc:	4b11      	ldr	r3, [pc, #68]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x416>
 80049d8:	e054      	b.n	8004a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b10      	ldr	r3, [pc, #64]	@ (8004a1c <HAL_RCC_OscConfig+0x478>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fd fcd2 	bl	8002388 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fd fcce 	bl	8002388 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e045      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCC_OscConfig+0x470>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x444>
 8004a06:	e03d      	b.n	8004a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e038      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a20:	4b1b      	ldr	r3, [pc, #108]	@ (8004a90 <HAL_RCC_OscConfig+0x4ec>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d028      	beq.n	8004a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d121      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d11a      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d111      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800

08004a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0cc      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b68      	ldr	r3, [pc, #416]	@ (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d90c      	bls.n	8004ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b65      	ldr	r3, [pc, #404]	@ (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b63      	ldr	r3, [pc, #396]	@ (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0b8      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d020      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae8:	4b59      	ldr	r3, [pc, #356]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4a58      	ldr	r2, [pc, #352]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004af2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b00:	4b53      	ldr	r3, [pc, #332]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a52      	ldr	r2, [pc, #328]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b0c:	4b50      	ldr	r3, [pc, #320]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	494d      	ldr	r1, [pc, #308]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d044      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	4b47      	ldr	r3, [pc, #284]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d119      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e07f      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d003      	beq.n	8004b52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b52:	4b3f      	ldr	r3, [pc, #252]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e06f      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b62:	4b3b      	ldr	r3, [pc, #236]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e067      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b72:	4b37      	ldr	r3, [pc, #220]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f023 0203 	bic.w	r2, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4934      	ldr	r1, [pc, #208]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b84:	f7fd fc00 	bl	8002388 <HAL_GetTick>
 8004b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8c:	f7fd fbfc 	bl	8002388 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e04f      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 020c 	and.w	r2, r3, #12
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d1eb      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b25      	ldr	r3, [pc, #148]	@ (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d20c      	bcs.n	8004bdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b22      	ldr	r3, [pc, #136]	@ (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b20      	ldr	r3, [pc, #128]	@ (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e032      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be8:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4916      	ldr	r1, [pc, #88]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d009      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c06:	4b12      	ldr	r3, [pc, #72]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	490e      	ldr	r1, [pc, #56]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c1a:	f000 f821 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	490a      	ldr	r1, [pc, #40]	@ (8004c54 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2c:	5ccb      	ldrb	r3, [r1, r3]
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	4a09      	ldr	r2, [pc, #36]	@ (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c36:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd fb60 	bl	8002300 <HAL_InitTick>

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023c00 	.word	0x40023c00
 8004c50:	40023800 	.word	0x40023800
 8004c54:	0800cec0 	.word	0x0800cec0
 8004c58:	20000000 	.word	0x20000000
 8004c5c:	20000004 	.word	0x20000004

08004c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c64:	b094      	sub	sp, #80	@ 0x50
 8004c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c78:	4b79      	ldr	r3, [pc, #484]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 030c 	and.w	r3, r3, #12
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d00d      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	f200 80e1 	bhi.w	8004e4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0x34>
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d003      	beq.n	8004c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c92:	e0db      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c94:	4b73      	ldr	r3, [pc, #460]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c98:	e0db      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c9a:	4b72      	ldr	r3, [pc, #456]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c9e:	e0d8      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ca8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004caa:	4b6d      	ldr	r3, [pc, #436]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d063      	beq.n	8004d7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	099b      	lsrs	r3, r3, #6
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cca:	2300      	movs	r3, #0
 8004ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	f04f 0000 	mov.w	r0, #0
 8004cda:	f04f 0100 	mov.w	r1, #0
 8004cde:	0159      	lsls	r1, r3, #5
 8004ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce4:	0150      	lsls	r0, r2, #5
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4621      	mov	r1, r4
 8004cec:	1a51      	subs	r1, r2, r1
 8004cee:	6139      	str	r1, [r7, #16]
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d04:	4659      	mov	r1, fp
 8004d06:	018b      	lsls	r3, r1, #6
 8004d08:	4651      	mov	r1, sl
 8004d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d0e:	4651      	mov	r1, sl
 8004d10:	018a      	lsls	r2, r1, #6
 8004d12:	4651      	mov	r1, sl
 8004d14:	ebb2 0801 	subs.w	r8, r2, r1
 8004d18:	4659      	mov	r1, fp
 8004d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d32:	4690      	mov	r8, r2
 8004d34:	4699      	mov	r9, r3
 8004d36:	4623      	mov	r3, r4
 8004d38:	eb18 0303 	adds.w	r3, r8, r3
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	462b      	mov	r3, r5
 8004d40:	eb49 0303 	adc.w	r3, r9, r3
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d52:	4629      	mov	r1, r5
 8004d54:	028b      	lsls	r3, r1, #10
 8004d56:	4621      	mov	r1, r4
 8004d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	028a      	lsls	r2, r1, #10
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d66:	2200      	movs	r2, #0
 8004d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d70:	f7fb ff6a 	bl	8000c48 <__aeabi_uldivmod>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4613      	mov	r3, r2
 8004d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d7c:	e058      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7e:	4b38      	ldr	r3, [pc, #224]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	099b      	lsrs	r3, r3, #6
 8004d84:	2200      	movs	r2, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	4611      	mov	r1, r2
 8004d8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d8e:	623b      	str	r3, [r7, #32]
 8004d90:	2300      	movs	r3, #0
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	f04f 0000 	mov.w	r0, #0
 8004da0:	f04f 0100 	mov.w	r1, #0
 8004da4:	0159      	lsls	r1, r3, #5
 8004da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004daa:	0150      	lsls	r0, r2, #5
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4641      	mov	r1, r8
 8004db2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004db6:	4649      	mov	r1, r9
 8004db8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dd0:	ebb2 040a 	subs.w	r4, r2, sl
 8004dd4:	eb63 050b 	sbc.w	r5, r3, fp
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	00eb      	lsls	r3, r5, #3
 8004de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004de6:	00e2      	lsls	r2, r4, #3
 8004de8:	4614      	mov	r4, r2
 8004dea:	461d      	mov	r5, r3
 8004dec:	4643      	mov	r3, r8
 8004dee:	18e3      	adds	r3, r4, r3
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	464b      	mov	r3, r9
 8004df4:	eb45 0303 	adc.w	r3, r5, r3
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e06:	4629      	mov	r1, r5
 8004e08:	028b      	lsls	r3, r1, #10
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e10:	4621      	mov	r1, r4
 8004e12:	028a      	lsls	r2, r1, #10
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	61fa      	str	r2, [r7, #28]
 8004e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e24:	f7fb ff10 	bl	8000c48 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e30:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e4a:	e002      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e4c:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3750      	adds	r7, #80	@ 0x50
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800
 8004e64:	00f42400 	.word	0x00f42400

08004e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	@ (8004e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000000 	.word	0x20000000

08004e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e07b      	b.n	8004f8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d108      	bne.n	8004eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ea2:	d009      	beq.n	8004eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	61da      	str	r2, [r3, #28]
 8004eaa:	e005      	b.n	8004eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fc ffd4 	bl	8001e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3c:	ea42 0103 	orr.w	r1, r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	f003 0104 	and.w	r1, r3, #4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	f003 0210 	and.w	r2, r3, #16
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b088      	sub	sp, #32
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fa2:	f7fd f9f1 	bl	8002388 <HAL_GetTick>
 8004fa6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d001      	beq.n	8004fbc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e12a      	b.n	8005212 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_SPI_Transmit+0x36>
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e122      	b.n	8005212 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_SPI_Transmit+0x48>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e11b      	b.n	8005212 <HAL_SPI_Transmit+0x280>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	88fa      	ldrh	r2, [r7, #6]
 8004ffa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	88fa      	ldrh	r2, [r7, #6]
 8005000:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005028:	d10f      	bne.n	800504a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005048:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005054:	2b40      	cmp	r3, #64	@ 0x40
 8005056:	d007      	beq.n	8005068 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005066:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005070:	d152      	bne.n	8005118 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_SPI_Transmit+0xee>
 800507a:	8b7b      	ldrh	r3, [r7, #26]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d145      	bne.n	800510c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005084:	881a      	ldrh	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005090:	1c9a      	adds	r2, r3, #2
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050a4:	e032      	b.n	800510c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d112      	bne.n	80050da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	881a      	ldrh	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c4:	1c9a      	adds	r2, r3, #2
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050d8:	e018      	b.n	800510c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050da:	f7fd f955 	bl	8002388 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d803      	bhi.n	80050f2 <HAL_SPI_Transmit+0x160>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f0:	d102      	bne.n	80050f8 <HAL_SPI_Transmit+0x166>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e082      	b.n	8005212 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1c7      	bne.n	80050a6 <HAL_SPI_Transmit+0x114>
 8005116:	e053      	b.n	80051c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_SPI_Transmit+0x194>
 8005120:	8b7b      	ldrh	r3, [r7, #26]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d147      	bne.n	80051b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	7812      	ldrb	r2, [r2, #0]
 8005132:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800514c:	e033      	b.n	80051b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b02      	cmp	r3, #2
 800515a:	d113      	bne.n	8005184 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005182:	e018      	b.n	80051b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005184:	f7fd f900 	bl	8002388 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d803      	bhi.n	800519c <HAL_SPI_Transmit+0x20a>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d102      	bne.n	80051a2 <HAL_SPI_Transmit+0x210>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e02d      	b.n	8005212 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1c6      	bne.n	800514e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	6839      	ldr	r1, [r7, #0]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fdd1 	bl	8005d6c <SPI_EndRxTxTransaction>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005210:	2300      	movs	r3, #0
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b08a      	sub	sp, #40	@ 0x28
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005228:	2301      	movs	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800522c:	f7fd f8ac 	bl	8002388 <HAL_GetTick>
 8005230:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005238:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005240:	887b      	ldrh	r3, [r7, #2]
 8005242:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005244:	7ffb      	ldrb	r3, [r7, #31]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d00c      	beq.n	8005264 <HAL_SPI_TransmitReceive+0x4a>
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005250:	d106      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x46>
 800525a:	7ffb      	ldrb	r3, [r7, #31]
 800525c:	2b04      	cmp	r3, #4
 800525e:	d001      	beq.n	8005264 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
 8005262:	e17f      	b.n	8005564 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_SPI_TransmitReceive+0x5c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_SPI_TransmitReceive+0x5c>
 8005270:	887b      	ldrh	r3, [r7, #2]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e174      	b.n	8005564 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_SPI_TransmitReceive+0x6e>
 8005284:	2302      	movs	r3, #2
 8005286:	e16d      	b.n	8005564 <HAL_SPI_TransmitReceive+0x34a>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b04      	cmp	r3, #4
 800529a:	d003      	beq.n	80052a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2205      	movs	r2, #5
 80052a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	887a      	ldrh	r2, [r7, #2]
 80052b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	887a      	ldrh	r2, [r7, #2]
 80052ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	887a      	ldrh	r2, [r7, #2]
 80052c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	887a      	ldrh	r2, [r7, #2]
 80052cc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e4:	2b40      	cmp	r3, #64	@ 0x40
 80052e6:	d007      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005300:	d17e      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <HAL_SPI_TransmitReceive+0xf6>
 800530a:	8afb      	ldrh	r3, [r7, #22]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d16c      	bne.n	80053ea <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005320:	1c9a      	adds	r2, r3, #2
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005334:	e059      	b.n	80053ea <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b02      	cmp	r3, #2
 8005342:	d11b      	bne.n	800537c <HAL_SPI_TransmitReceive+0x162>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <HAL_SPI_TransmitReceive+0x162>
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	2b01      	cmp	r3, #1
 8005352:	d113      	bne.n	800537c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005364:	1c9a      	adds	r2, r3, #2
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b01      	cmp	r3, #1
 8005388:	d119      	bne.n	80053be <HAL_SPI_TransmitReceive+0x1a4>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d014      	beq.n	80053be <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	b292      	uxth	r2, r2
 80053a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	1c9a      	adds	r2, r3, #2
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053ba:	2301      	movs	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053be:	f7fc ffe3 	bl	8002388 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d80d      	bhi.n	80053ea <HAL_SPI_TransmitReceive+0x1d0>
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d009      	beq.n	80053ea <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e0bc      	b.n	8005564 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1a0      	bne.n	8005336 <HAL_SPI_TransmitReceive+0x11c>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d19b      	bne.n	8005336 <HAL_SPI_TransmitReceive+0x11c>
 80053fe:	e082      	b.n	8005506 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_SPI_TransmitReceive+0x1f4>
 8005408:	8afb      	ldrh	r3, [r7, #22]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d171      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	7812      	ldrb	r2, [r2, #0]
 800541a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005434:	e05d      	b.n	80054f2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b02      	cmp	r3, #2
 8005442:	d11c      	bne.n	800547e <HAL_SPI_TransmitReceive+0x264>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d017      	beq.n	800547e <HAL_SPI_TransmitReceive+0x264>
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	2b01      	cmp	r3, #1
 8005452:	d114      	bne.n	800547e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	7812      	ldrb	r2, [r2, #0]
 8005460:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b01      	cmp	r3, #1
 800548a:	d119      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x2a6>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054bc:	2301      	movs	r3, #1
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054c0:	f7fc ff62 	bl	8002388 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d803      	bhi.n	80054d8 <HAL_SPI_TransmitReceive+0x2be>
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d6:	d102      	bne.n	80054de <HAL_SPI_TransmitReceive+0x2c4>
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e038      	b.n	8005564 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d19c      	bne.n	8005436 <HAL_SPI_TransmitReceive+0x21c>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d197      	bne.n	8005436 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005506:	6a3a      	ldr	r2, [r7, #32]
 8005508:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fc2e 	bl	8005d6c <SPI_EndRxTxTransaction>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e01d      	b.n	8005564 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005562:	2300      	movs	r3, #0
  }
}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	@ 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005580:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005588:	7dfb      	ldrb	r3, [r7, #23]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d00c      	beq.n	80055a8 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005594:	d106      	bne.n	80055a4 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <HAL_SPI_TransmitReceive_DMA+0x38>
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d001      	beq.n	80055a8 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80055a4:	2302      	movs	r3, #2
 80055a6:	e0cf      	b.n	8005748 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_SPI_TransmitReceive_DMA+0x4e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <HAL_SPI_TransmitReceive_DMA+0x4e>
 80055b4:	887b      	ldrh	r3, [r7, #2]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e0c4      	b.n	8005748 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_SPI_TransmitReceive_DMA+0x60>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e0bd      	b.n	8005748 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d003      	beq.n	80055e8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2205      	movs	r2, #5
 80055e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	887a      	ldrh	r2, [r7, #2]
 80055f8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	887a      	ldrh	r2, [r7, #2]
 80055fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	887a      	ldrh	r2, [r7, #2]
 800560a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	887a      	ldrh	r2, [r7, #2]
 8005610:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b04      	cmp	r3, #4
 8005628:	d108      	bne.n	800563c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562e:	4a48      	ldr	r2, [pc, #288]	@ (8005750 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005630:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005636:	4a47      	ldr	r2, [pc, #284]	@ (8005754 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005638:	63da      	str	r2, [r3, #60]	@ 0x3c
 800563a:	e007      	b.n	800564c <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005640:	4a45      	ldr	r2, [pc, #276]	@ (8005758 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005642:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005648:	4a44      	ldr	r2, [pc, #272]	@ (800575c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800564a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005650:	4a43      	ldr	r2, [pc, #268]	@ (8005760 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005652:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005658:	2200      	movs	r2, #0
 800565a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	330c      	adds	r3, #12
 8005666:	4619      	mov	r1, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005672:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005674:	f7fd f878 	bl	8002768 <HAL_DMA_Start_IT>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005682:	f043 0210 	orr.w	r2, r3, #16
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e058      	b.n	8005748 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0201 	orr.w	r2, r2, #1
 80056a4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056aa:	2200      	movs	r2, #0
 80056ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b2:	2200      	movs	r2, #0
 80056b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ba:	2200      	movs	r2, #0
 80056bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056c2:	2200      	movs	r2, #0
 80056c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	4619      	mov	r1, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056dc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80056de:	f7fd f843 	bl	8002768 <HAL_DMA_Start_IT>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ec:	f043 0210 	orr.w	r2, r3, #16
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e023      	b.n	8005748 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570a:	2b40      	cmp	r3, #64	@ 0x40
 800570c:	d007      	beq.n	800571e <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800571c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0220 	orr.w	r2, r2, #32
 8005734:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0202 	orr.w	r2, r2, #2
 8005744:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	08005af1 	.word	0x08005af1
 8005754:	080059b9 	.word	0x080059b9
 8005758:	08005b0d 	.word	0x08005b0d
 800575c:	08005a61 	.word	0x08005a61
 8005760:	08005b29 	.word	0x08005b29

08005764 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10e      	bne.n	80057a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800578c:	2b00      	cmp	r3, #0
 800578e:	d009      	beq.n	80057a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
    return;
 80057a2:	e0ce      	b.n	8005942 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <HAL_SPI_IRQHandler+0x5e>
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
    return;
 80057c0:	e0bf      	b.n	8005942 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <HAL_SPI_IRQHandler+0x7e>
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d105      	bne.n	80057e2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80b0 	beq.w	8005942 <HAL_SPI_IRQHandler+0x1de>
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80aa 	beq.w	8005942 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d023      	beq.n	8005840 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b03      	cmp	r3, #3
 8005802:	d011      	beq.n	8005828 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005808:	f043 0204 	orr.w	r2, r3, #4
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	e00b      	b.n	8005840 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]
        return;
 800583e:	e080      	b.n	8005942 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584e:	f043 0201 	orr.w	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00c      	beq.n	8005898 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005882:	f043 0208 	orr.w	r2, r3, #8
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589c:	2b00      	cmp	r3, #0
 800589e:	d04f      	beq.n	8005940 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058ae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <HAL_SPI_IRQHandler+0x168>
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d034      	beq.n	8005936 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0203 	bic.w	r2, r2, #3
 80058da:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d011      	beq.n	8005908 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e8:	4a17      	ldr	r2, [pc, #92]	@ (8005948 <HAL_SPI_IRQHandler+0x1e4>)
 80058ea:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fc ff91 	bl	8002818 <HAL_DMA_Abort_IT>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005900:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800590c:	2b00      	cmp	r3, #0
 800590e:	d016      	beq.n	800593e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005914:	4a0c      	ldr	r2, [pc, #48]	@ (8005948 <HAL_SPI_IRQHandler+0x1e4>)
 8005916:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591c:	4618      	mov	r0, r3
 800591e:	f7fc ff7b 	bl	8002818 <HAL_DMA_Abort_IT>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005934:	e003      	b.n	800593e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f826 	bl	8005988 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800593c:	e000      	b.n	8005940 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800593e:	bf00      	nop
    return;
 8005940:	bf00      	nop
  }
}
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	08005b69 	.word	0x08005b69

0800594c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059aa:	b2db      	uxtb	r3, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059c6:	f7fc fcdf 	bl	8002388 <HAL_GetTick>
 80059ca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059da:	d03b      	beq.n	8005a54 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0220 	bic.w	r2, r2, #32
 80059ea:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10d      	bne.n	8005a10 <SPI_DMAReceiveCplt+0x58>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059fc:	d108      	bne.n	8005a10 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0203 	bic.w	r2, r2, #3
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	e007      	b.n	8005a20 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	2164      	movs	r1, #100	@ 0x64
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f93b 	bl	8005ca0 <SPI_EndRxTransaction>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f7ff ff9b 	bl	8005988 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005a52:	e002      	b.n	8005a5a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff ff79 	bl	800594c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6e:	f7fc fc8b 	bl	8002388 <HAL_GetTick>
 8005a72:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a82:	d02f      	beq.n	8005ae4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0220 	bic.w	r2, r2, #32
 8005a92:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	2164      	movs	r1, #100	@ 0x64
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f967 	bl	8005d6c <SPI_EndRxTxTransaction>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa8:	f043 0220 	orr.w	r2, r3, #32
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0203 	bic.w	r2, r2, #3
 8005abe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff ff53 	bl	8005988 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005ae2:	e002      	b.n	8005aea <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7fb ff65 	bl	80019b4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff ff2e 	bl	8005960 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f7ff ff2a 	bl	8005974 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b20:	bf00      	nop
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0203 	bic.w	r2, r2, #3
 8005b44:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4a:	f043 0210 	orr.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff ff14 	bl	8005988 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff ff00 	bl	8005988 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ba0:	f7fc fbf2 	bl	8002388 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	4413      	add	r3, r2
 8005bae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bb0:	f7fc fbea 	bl	8002388 <HAL_GetTick>
 8005bb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bb6:	4b39      	ldr	r3, [pc, #228]	@ (8005c9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	015b      	lsls	r3, r3, #5
 8005bbc:	0d1b      	lsrs	r3, r3, #20
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	fb02 f303 	mul.w	r3, r2, r3
 8005bc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bc6:	e054      	b.n	8005c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bce:	d050      	beq.n	8005c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bd0:	f7fc fbda 	bl	8002388 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d902      	bls.n	8005be6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d13d      	bne.n	8005c62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bfe:	d111      	bne.n	8005c24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c08:	d004      	beq.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c12:	d107      	bne.n	8005c24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c2c:	d10f      	bne.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e017      	b.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	bf0c      	ite	eq
 8005c82:	2301      	moveq	r3, #1
 8005c84:	2300      	movne	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d19b      	bne.n	8005bc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000000 	.word	0x20000000

08005ca0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cb4:	d111      	bne.n	8005cda <SPI_EndRxTransaction+0x3a>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cbe:	d004      	beq.n	8005cca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc8:	d107      	bne.n	8005cda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ce2:	d12a      	bne.n	8005d3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cec:	d012      	beq.n	8005d14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2180      	movs	r1, #128	@ 0x80
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff ff49 	bl	8005b90 <SPI_WaitFlagStateUntilTimeout>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d02d      	beq.n	8005d60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e026      	b.n	8005d62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff ff36 	bl	8005b90 <SPI_WaitFlagStateUntilTimeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01a      	beq.n	8005d60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2e:	f043 0220 	orr.w	r2, r3, #32
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e013      	b.n	8005d62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2200      	movs	r2, #0
 8005d42:	2101      	movs	r1, #1
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff ff23 	bl	8005b90 <SPI_WaitFlagStateUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d54:	f043 0220 	orr.w	r2, r3, #32
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e000      	b.n	8005d62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	2102      	movs	r1, #2
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff ff04 	bl	8005b90 <SPI_WaitFlagStateUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d007      	beq.n	8005d9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e032      	b.n	8005e04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e0c <SPI_EndRxTxTransaction+0xa0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e10 <SPI_EndRxTxTransaction+0xa4>)
 8005da4:	fba2 2303 	umull	r2, r3, r2, r3
 8005da8:	0d5b      	lsrs	r3, r3, #21
 8005daa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dbc:	d112      	bne.n	8005de4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2180      	movs	r1, #128	@ 0x80
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f7ff fee1 	bl	8005b90 <SPI_WaitFlagStateUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d016      	beq.n	8005e02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd8:	f043 0220 	orr.w	r2, r3, #32
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e00f      	b.n	8005e04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfa:	2b80      	cmp	r3, #128	@ 0x80
 8005dfc:	d0f2      	beq.n	8005de4 <SPI_EndRxTxTransaction+0x78>
 8005dfe:	e000      	b.n	8005e02 <SPI_EndRxTxTransaction+0x96>
        break;
 8005e00:	bf00      	nop
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000000 	.word	0x20000000
 8005e10:	165e9f81 	.word	0x165e9f81

08005e14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e14:	b084      	sub	sp, #16
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	f107 001c 	add.w	r0, r7, #28
 8005e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e26:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d123      	bne.n	8005e76 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d105      	bne.n	8005e6a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 fae8 	bl	8007440 <USB_CoreReset>
 8005e70:	4603      	mov	r3, r0
 8005e72:	73fb      	strb	r3, [r7, #15]
 8005e74:	e01b      	b.n	8005eae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 fadc 	bl	8007440 <USB_CoreReset>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e8c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ea0:	e005      	b.n	8005eae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005eae:	7fbb      	ldrb	r3, [r7, #30]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d10b      	bne.n	8005ecc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f043 0206 	orr.w	r2, r3, #6
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f043 0220 	orr.w	r2, r3, #32
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ed8:	b004      	add	sp, #16
 8005eda:	4770      	bx	lr

08005edc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d165      	bne.n	8005fbc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4a41      	ldr	r2, [pc, #260]	@ (8005ff8 <USB_SetTurnaroundTime+0x11c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d906      	bls.n	8005f06 <USB_SetTurnaroundTime+0x2a>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a40      	ldr	r2, [pc, #256]	@ (8005ffc <USB_SetTurnaroundTime+0x120>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d202      	bcs.n	8005f06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f00:	230f      	movs	r3, #15
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e062      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4a3c      	ldr	r2, [pc, #240]	@ (8005ffc <USB_SetTurnaroundTime+0x120>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d306      	bcc.n	8005f1c <USB_SetTurnaroundTime+0x40>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4a3b      	ldr	r2, [pc, #236]	@ (8006000 <USB_SetTurnaroundTime+0x124>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d202      	bcs.n	8005f1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f16:	230e      	movs	r3, #14
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e057      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4a38      	ldr	r2, [pc, #224]	@ (8006000 <USB_SetTurnaroundTime+0x124>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d306      	bcc.n	8005f32 <USB_SetTurnaroundTime+0x56>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4a37      	ldr	r2, [pc, #220]	@ (8006004 <USB_SetTurnaroundTime+0x128>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d202      	bcs.n	8005f32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005f2c:	230d      	movs	r3, #13
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e04c      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4a33      	ldr	r2, [pc, #204]	@ (8006004 <USB_SetTurnaroundTime+0x128>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d306      	bcc.n	8005f48 <USB_SetTurnaroundTime+0x6c>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4a32      	ldr	r2, [pc, #200]	@ (8006008 <USB_SetTurnaroundTime+0x12c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d802      	bhi.n	8005f48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005f42:	230c      	movs	r3, #12
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e041      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8006008 <USB_SetTurnaroundTime+0x12c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d906      	bls.n	8005f5e <USB_SetTurnaroundTime+0x82>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4a2e      	ldr	r2, [pc, #184]	@ (800600c <USB_SetTurnaroundTime+0x130>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d802      	bhi.n	8005f5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f58:	230b      	movs	r3, #11
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e036      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4a2a      	ldr	r2, [pc, #168]	@ (800600c <USB_SetTurnaroundTime+0x130>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d906      	bls.n	8005f74 <USB_SetTurnaroundTime+0x98>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	4a29      	ldr	r2, [pc, #164]	@ (8006010 <USB_SetTurnaroundTime+0x134>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d802      	bhi.n	8005f74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f6e:	230a      	movs	r3, #10
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	e02b      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4a26      	ldr	r2, [pc, #152]	@ (8006010 <USB_SetTurnaroundTime+0x134>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d906      	bls.n	8005f8a <USB_SetTurnaroundTime+0xae>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4a25      	ldr	r2, [pc, #148]	@ (8006014 <USB_SetTurnaroundTime+0x138>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d202      	bcs.n	8005f8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f84:	2309      	movs	r3, #9
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e020      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4a21      	ldr	r2, [pc, #132]	@ (8006014 <USB_SetTurnaroundTime+0x138>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d306      	bcc.n	8005fa0 <USB_SetTurnaroundTime+0xc4>
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4a20      	ldr	r2, [pc, #128]	@ (8006018 <USB_SetTurnaroundTime+0x13c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d802      	bhi.n	8005fa0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	e015      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8006018 <USB_SetTurnaroundTime+0x13c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d906      	bls.n	8005fb6 <USB_SetTurnaroundTime+0xda>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4a1c      	ldr	r2, [pc, #112]	@ (800601c <USB_SetTurnaroundTime+0x140>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d202      	bcs.n	8005fb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005fb0:	2307      	movs	r3, #7
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	e00a      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005fb6:	2306      	movs	r3, #6
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e007      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005fc2:	2309      	movs	r3, #9
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	e001      	b.n	8005fcc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005fc8:	2309      	movs	r3, #9
 8005fca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	029b      	lsls	r3, r3, #10
 8005fe0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	00d8acbf 	.word	0x00d8acbf
 8005ffc:	00e4e1c0 	.word	0x00e4e1c0
 8006000:	00f42400 	.word	0x00f42400
 8006004:	01067380 	.word	0x01067380
 8006008:	011a499f 	.word	0x011a499f
 800600c:	01312cff 	.word	0x01312cff
 8006010:	014ca43f 	.word	0x014ca43f
 8006014:	016e3600 	.word	0x016e3600
 8006018:	01a6ab1f 	.word	0x01a6ab1f
 800601c:	01e84800 	.word	0x01e84800

08006020 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f043 0201 	orr.w	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f023 0201 	bic.w	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d115      	bne.n	80060b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006092:	200a      	movs	r0, #10
 8006094:	f7fc f984 	bl	80023a0 <HAL_Delay>
      ms += 10U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	330a      	adds	r3, #10
 800609c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 f93f 	bl	8007322 <USB_GetMode>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d01e      	beq.n	80060e8 <USB_SetCurrentMode+0x84>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80060ae:	d9f0      	bls.n	8006092 <USB_SetCurrentMode+0x2e>
 80060b0:	e01a      	b.n	80060e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d115      	bne.n	80060e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060c4:	200a      	movs	r0, #10
 80060c6:	f7fc f96b 	bl	80023a0 <HAL_Delay>
      ms += 10U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	330a      	adds	r3, #10
 80060ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f001 f926 	bl	8007322 <USB_GetMode>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <USB_SetCurrentMode+0x84>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2bc7      	cmp	r3, #199	@ 0xc7
 80060e0:	d9f0      	bls.n	80060c4 <USB_SetCurrentMode+0x60>
 80060e2:	e001      	b.n	80060e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e005      	b.n	80060f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80060ec:	d101      	bne.n	80060f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060fc:	b084      	sub	sp, #16
 80060fe:	b580      	push	{r7, lr}
 8006100:	b086      	sub	sp, #24
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800610a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006116:	2300      	movs	r3, #0
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	e009      	b.n	8006130 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	3340      	adds	r3, #64	@ 0x40
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	2200      	movs	r2, #0
 8006128:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	3301      	adds	r3, #1
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b0e      	cmp	r3, #14
 8006134:	d9f2      	bls.n	800611c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006136:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800613a:	2b00      	cmp	r3, #0
 800613c:	d11c      	bne.n	8006178 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800614c:	f043 0302 	orr.w	r3, r3, #2
 8006150:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006162:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	639a      	str	r2, [r3, #56]	@ 0x38
 8006176:	e00b      	b.n	8006190 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006188:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006196:	461a      	mov	r2, r3
 8006198:	2300      	movs	r3, #0
 800619a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800619c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d10d      	bne.n	80061c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061ac:	2100      	movs	r1, #0
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f968 	bl	8006484 <USB_SetDevSpeed>
 80061b4:	e008      	b.n	80061c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061b6:	2101      	movs	r1, #1
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f963 	bl	8006484 <USB_SetDevSpeed>
 80061be:	e003      	b.n	80061c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061c0:	2103      	movs	r1, #3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f95e 	bl	8006484 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061c8:	2110      	movs	r1, #16
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f8fa 	bl	80063c4 <USB_FlushTxFifo>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f924 	bl	8006428 <USB_FlushRxFifo>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061f0:	461a      	mov	r2, r3
 80061f2:	2300      	movs	r3, #0
 80061f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061fc:	461a      	mov	r2, r3
 80061fe:	2300      	movs	r3, #0
 8006200:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006208:	461a      	mov	r2, r3
 800620a:	2300      	movs	r3, #0
 800620c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	e043      	b.n	800629c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006226:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800622a:	d118      	bne.n	800625e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623e:	461a      	mov	r2, r3
 8006240:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e013      	b.n	8006270 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006254:	461a      	mov	r2, r3
 8006256:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	e008      	b.n	8006270 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626a:	461a      	mov	r2, r3
 800626c:	2300      	movs	r3, #0
 800626e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627c:	461a      	mov	r2, r3
 800627e:	2300      	movs	r3, #0
 8006280:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800628e:	461a      	mov	r2, r3
 8006290:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006294:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	3301      	adds	r3, #1
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062a0:	461a      	mov	r2, r3
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d3b5      	bcc.n	8006214 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a8:	2300      	movs	r3, #0
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	e043      	b.n	8006336 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062c4:	d118      	bne.n	80062f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d8:	461a      	mov	r2, r3
 80062da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	e013      	b.n	800630a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ee:	461a      	mov	r2, r3
 80062f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	e008      	b.n	800630a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006304:	461a      	mov	r2, r3
 8006306:	2300      	movs	r3, #0
 8006308:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006316:	461a      	mov	r2, r3
 8006318:	2300      	movs	r3, #0
 800631a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006328:	461a      	mov	r2, r3
 800632a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800632e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	3301      	adds	r3, #1
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800633a:	461a      	mov	r2, r3
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4293      	cmp	r3, r2
 8006340:	d3b5      	bcc.n	80062ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006354:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006362:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f043 0210 	orr.w	r2, r3, #16
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	4b10      	ldr	r3, [pc, #64]	@ (80063c0 <USB_DevInit+0x2c4>)
 800637e:	4313      	orrs	r3, r2
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006384:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f043 0208 	orr.w	r2, r3, #8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006398:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800639c:	2b01      	cmp	r3, #1
 800639e:	d107      	bne.n	80063b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063a8:	f043 0304 	orr.w	r3, r3, #4
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063bc:	b004      	add	sp, #16
 80063be:	4770      	bx	lr
 80063c0:	803c3800 	.word	0x803c3800

080063c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3301      	adds	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063de:	d901      	bls.n	80063e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e01b      	b.n	800641c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	daf2      	bge.n	80063d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	019b      	lsls	r3, r3, #6
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3301      	adds	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006408:	d901      	bls.n	800640e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e006      	b.n	800641c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b20      	cmp	r3, #32
 8006418:	d0f0      	beq.n	80063fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3301      	adds	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006440:	d901      	bls.n	8006446 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e018      	b.n	8006478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	daf2      	bge.n	8006434 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2210      	movs	r2, #16
 8006456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3301      	adds	r3, #1
 800645c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006464:	d901      	bls.n	800646a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e006      	b.n	8006478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b10      	cmp	r3, #16
 8006474:	d0f0      	beq.n	8006458 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064a4:	4313      	orrs	r3, r2
 80064a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b087      	sub	sp, #28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 0306 	and.w	r3, r3, #6
 80064ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80064d6:	2300      	movs	r3, #0
 80064d8:	75fb      	strb	r3, [r7, #23]
 80064da:	e00a      	b.n	80064f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d002      	beq.n	80064e8 <USB_GetDevSpeed+0x32>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b06      	cmp	r3, #6
 80064e6:	d102      	bne.n	80064ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80064e8:	2302      	movs	r3, #2
 80064ea:	75fb      	strb	r3, [r7, #23]
 80064ec:	e001      	b.n	80064f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80064ee:	230f      	movs	r3, #15
 80064f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d13a      	bne.n	8006592 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	2101      	movs	r1, #1
 800652e:	fa01 f303 	lsl.w	r3, r1, r3
 8006532:	b29b      	uxth	r3, r3
 8006534:	68f9      	ldr	r1, [r7, #12]
 8006536:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800653a:	4313      	orrs	r3, r2
 800653c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d155      	bne.n	8006600 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	791b      	ldrb	r3, [r3, #4]
 800656e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006570:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	059b      	lsls	r3, r3, #22
 8006576:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006578:	4313      	orrs	r3, r2
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	440a      	add	r2, r1
 8006582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800658a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e036      	b.n	8006600 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	2101      	movs	r1, #1
 80065a4:	fa01 f303 	lsl.w	r3, r1, r3
 80065a8:	041b      	lsls	r3, r3, #16
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065b0:	4313      	orrs	r3, r2
 80065b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d11a      	bne.n	8006600 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	791b      	ldrb	r3, [r3, #4]
 80065e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065e6:	430b      	orrs	r3, r1
 80065e8:	4313      	orrs	r3, r2
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d161      	bne.n	80066f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800663e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006642:	d11f      	bne.n	8006684 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	440a      	add	r2, r1
 800665a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800665e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006662:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	440a      	add	r2, r1
 800667a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800667e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	2101      	movs	r1, #1
 8006696:	fa01 f303 	lsl.w	r3, r1, r3
 800669a:	b29b      	uxth	r3, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066a4:	4013      	ands	r3, r2
 80066a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f003 030f 	and.w	r3, r3, #15
 80066b8:	2101      	movs	r1, #1
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	b29b      	uxth	r3, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	68f9      	ldr	r1, [r7, #12]
 80066c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066c8:	4013      	ands	r3, r2
 80066ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	0159      	lsls	r1, r3, #5
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	440b      	add	r3, r1
 80066e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e6:	4619      	mov	r1, r3
 80066e8:	4b35      	ldr	r3, [pc, #212]	@ (80067c0 <USB_DeactivateEndpoint+0x1b0>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]
 80066ee:	e060      	b.n	80067b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006702:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006706:	d11f      	bne.n	8006748 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006722:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006726:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	440a      	add	r2, r1
 800673e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006742:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006746:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	2101      	movs	r1, #1
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	43db      	mvns	r3, r3
 8006762:	68f9      	ldr	r1, [r7, #12]
 8006764:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006768:	4013      	ands	r3, r2
 800676a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	2101      	movs	r1, #1
 800677e:	fa01 f303 	lsl.w	r3, r1, r3
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	43db      	mvns	r3, r3
 8006786:	68f9      	ldr	r1, [r7, #12]
 8006788:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800678c:	4013      	ands	r3, r2
 800678e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	0159      	lsls	r1, r3, #5
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	440b      	add	r3, r1
 80067a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067aa:	4619      	mov	r1, r3
 80067ac:	4b05      	ldr	r3, [pc, #20]	@ (80067c4 <USB_DeactivateEndpoint+0x1b4>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	ec337800 	.word	0xec337800
 80067c4:	eff37800 	.word	0xeff37800

080067c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08a      	sub	sp, #40	@ 0x28
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	f040 817f 	bne.w	8006ae8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d132      	bne.n	8006858 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	440a      	add	r2, r1
 8006808:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800680c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006810:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006830:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006850:	0cdb      	lsrs	r3, r3, #19
 8006852:	04db      	lsls	r3, r3, #19
 8006854:	6113      	str	r3, [r2, #16]
 8006856:	e097      	b.n	8006988 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006872:	0cdb      	lsrs	r3, r3, #19
 8006874:	04db      	lsls	r3, r3, #19
 8006876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006892:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006896:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800689a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d11a      	bne.n	80068d8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d903      	bls.n	80068b6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068d4:	6113      	str	r3, [r2, #16]
 80068d6:	e044      	b.n	8006962 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	1e5a      	subs	r2, r3, #1
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	8afb      	ldrh	r3, [r7, #22]
 80068fe:	04d9      	lsls	r1, r3, #19
 8006900:	4ba4      	ldr	r3, [pc, #656]	@ (8006b94 <USB_EPStartXfer+0x3cc>)
 8006902:	400b      	ands	r3, r1
 8006904:	69b9      	ldr	r1, [r7, #24]
 8006906:	0148      	lsls	r0, r1, #5
 8006908:	69f9      	ldr	r1, [r7, #28]
 800690a:	4401      	add	r1, r0
 800690c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006910:	4313      	orrs	r3, r2
 8006912:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	791b      	ldrb	r3, [r3, #4]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d122      	bne.n	8006962 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	440a      	add	r2, r1
 8006932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006936:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800693a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	8afb      	ldrh	r3, [r7, #22]
 800694c:	075b      	lsls	r3, r3, #29
 800694e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006952:	69b9      	ldr	r1, [r7, #24]
 8006954:	0148      	lsls	r0, r1, #5
 8006956:	69f9      	ldr	r1, [r7, #28]
 8006958:	4401      	add	r1, r0
 800695a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800695e:	4313      	orrs	r3, r2
 8006960:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	0148      	lsls	r0, r1, #5
 800697c:	69f9      	ldr	r1, [r7, #28]
 800697e:	4401      	add	r1, r0
 8006980:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006984:	4313      	orrs	r3, r2
 8006986:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d14b      	bne.n	8006a26 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a2:	461a      	mov	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	791b      	ldrb	r3, [r3, #4]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d128      	bne.n	8006a04 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d110      	bne.n	80069e4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	69fa      	ldr	r2, [r7, #28]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e00f      	b.n	8006a04 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a02:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	e166      	b.n	8006cf4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a40:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a44:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	791b      	ldrb	r3, [r3, #4]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d015      	beq.n	8006a7a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 814e 	beq.w	8006cf4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	2101      	movs	r1, #1
 8006a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6e:	69f9      	ldr	r1, [r7, #28]
 8006a70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a74:	4313      	orrs	r3, r2
 8006a76:	634b      	str	r3, [r1, #52]	@ 0x34
 8006a78:	e13c      	b.n	8006cf4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d110      	bne.n	8006aac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	e00f      	b.n	8006acc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	68d9      	ldr	r1, [r3, #12]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	781a      	ldrb	r2, [r3, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	b298      	uxth	r0, r3
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	4603      	mov	r3, r0
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f9b9 	bl	8006e58 <USB_WritePacket>
 8006ae6:	e105      	b.n	8006cf4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	0151      	lsls	r1, r2, #5
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	440a      	add	r2, r1
 8006afe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b02:	0cdb      	lsrs	r3, r3, #19
 8006b04:	04db      	lsls	r3, r3, #19
 8006b06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b22:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b26:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b2a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d132      	bne.n	8006b98 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b60:	69b9      	ldr	r1, [r7, #24]
 8006b62:	0148      	lsls	r0, r1, #5
 8006b64:	69f9      	ldr	r1, [r7, #28]
 8006b66:	4401      	add	r1, r0
 8006b68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b8e:	6113      	str	r3, [r2, #16]
 8006b90:	e062      	b.n	8006c58 <USB_EPStartXfer+0x490>
 8006b92:	bf00      	nop
 8006b94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d123      	bne.n	8006be8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb6:	69b9      	ldr	r1, [r7, #24]
 8006bb8:	0148      	lsls	r0, r1, #5
 8006bba:	69f9      	ldr	r1, [r7, #28]
 8006bbc:	4401      	add	r1, r0
 8006bbe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006be0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006be4:	6113      	str	r3, [r2, #16]
 8006be6:	e037      	b.n	8006c58 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	1e5a      	subs	r2, r3, #1
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	8afa      	ldrh	r2, [r7, #22]
 8006c04:	fb03 f202 	mul.w	r2, r3, r2
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	8afb      	ldrh	r3, [r7, #22]
 8006c1c:	04d9      	lsls	r1, r3, #19
 8006c1e:	4b38      	ldr	r3, [pc, #224]	@ (8006d00 <USB_EPStartXfer+0x538>)
 8006c20:	400b      	ands	r3, r1
 8006c22:	69b9      	ldr	r1, [r7, #24]
 8006c24:	0148      	lsls	r0, r1, #5
 8006c26:	69f9      	ldr	r1, [r7, #28]
 8006c28:	4401      	add	r1, r0
 8006c2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	0148      	lsls	r0, r1, #5
 8006c4c:	69f9      	ldr	r1, [r7, #28]
 8006c4e:	4401      	add	r1, r0
 8006c50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c54:	4313      	orrs	r3, r2
 8006c56:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d10d      	bne.n	8006c7a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	68d9      	ldr	r1, [r3, #12]
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c76:	460a      	mov	r2, r1
 8006c78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	791b      	ldrb	r3, [r3, #4]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d128      	bne.n	8006cd4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d110      	bne.n	8006cb4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	0151      	lsls	r1, r2, #5
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	440a      	add	r2, r1
 8006ca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	e00f      	b.n	8006cd4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006cf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	1ff80000 	.word	0x1ff80000

08006d04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	785b      	ldrb	r3, [r3, #1]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d14a      	bne.n	8006db8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d3a:	f040 8086 	bne.w	8006e4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	7812      	ldrb	r2, [r2, #0]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	7812      	ldrb	r2, [r2, #0]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d902      	bls.n	8006d9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
          break;
 8006d9a:	e056      	b.n	8006e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006db4:	d0e7      	beq.n	8006d86 <USB_EPStopXfer+0x82>
 8006db6:	e048      	b.n	8006e4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dd0:	d13b      	bne.n	8006e4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	7812      	ldrb	r2, [r2, #0]
 8006de6:	0151      	lsls	r1, r2, #5
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	440a      	add	r2, r1
 8006dec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006df0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006df4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	7812      	ldrb	r2, [r2, #0]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d902      	bls.n	8006e30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e2e:	e00c      	b.n	8006e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e48:	d0e7      	beq.n	8006e1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b089      	sub	sp, #36	@ 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	4611      	mov	r1, r2
 8006e64:	461a      	mov	r2, r3
 8006e66:	460b      	mov	r3, r1
 8006e68:	71fb      	strb	r3, [r7, #7]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d123      	bne.n	8006ec6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e7e:	88bb      	ldrh	r3, [r7, #4]
 8006e80:	3303      	adds	r3, #3
 8006e82:	089b      	lsrs	r3, r3, #2
 8006e84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	e018      	b.n	8006ebe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	031a      	lsls	r2, r3, #12
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e98:	461a      	mov	r2, r3
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d3e2      	bcc.n	8006e8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3724      	adds	r7, #36	@ 0x24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b08b      	sub	sp, #44	@ 0x2c
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	089b      	lsrs	r3, r3, #2
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006ef2:	88fb      	ldrh	r3, [r7, #6]
 8006ef4:	f003 0303 	and.w	r3, r3, #3
 8006ef8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	623b      	str	r3, [r7, #32]
 8006efe:	e014      	b.n	8006f2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	3301      	adds	r3, #1
 8006f10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	3301      	adds	r3, #1
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	3301      	adds	r3, #1
 8006f22:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	3301      	adds	r3, #1
 8006f28:	623b      	str	r3, [r7, #32]
 8006f2a:	6a3a      	ldr	r2, [r7, #32]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d3e6      	bcc.n	8006f00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f32:	8bfb      	ldrh	r3, [r7, #30]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01e      	beq.n	8006f76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f42:	461a      	mov	r2, r3
 8006f44:	f107 0310 	add.w	r3, r7, #16
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	701a      	strb	r2, [r3, #0]
      i++;
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	3301      	adds	r3, #1
 8006f62:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f66:	3301      	adds	r3, #1
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006f6a:	8bfb      	ldrh	r3, [r7, #30]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f70:	8bfb      	ldrh	r3, [r7, #30]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1ea      	bne.n	8006f4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	372c      	adds	r7, #44	@ 0x2c
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d12c      	bne.n	8006ffa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	db12      	blt.n	8006fd8 <USB_EPSetStall+0x54>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00f      	beq.n	8006fd8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006fd6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ff2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	e02b      	b.n	8007052 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	db12      	blt.n	8007032 <USB_EPSetStall+0xae>
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00f      	beq.n	8007032 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	440a      	add	r2, r1
 8007028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800702c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007030:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	0151      	lsls	r1, r2, #5
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	440a      	add	r2, r1
 8007048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800704c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007050:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d128      	bne.n	80070ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	440a      	add	r2, r1
 8007092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007096:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800709a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	791b      	ldrb	r3, [r3, #4]
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d003      	beq.n	80070ac <USB_EPClearStall+0x4c>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	791b      	ldrb	r3, [r3, #4]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d138      	bne.n	800711e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	e027      	b.n	800711e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	791b      	ldrb	r3, [r3, #4]
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d003      	beq.n	80070fe <USB_EPClearStall+0x9e>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	791b      	ldrb	r3, [r3, #4]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d10f      	bne.n	800711e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	440a      	add	r2, r1
 8007114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800711c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800714a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800714e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007160:	68f9      	ldr	r1, [r7, #12]
 8007162:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007166:	4313      	orrs	r3, r2
 8007168:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007192:	f023 0303 	bic.w	r3, r3, #3
 8007196:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071a6:	f023 0302 	bic.w	r3, r3, #2
 80071aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80071d4:	f023 0303 	bic.w	r3, r3, #3
 80071d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071e8:	f043 0302 	orr.w	r3, r3, #2
 80071ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4013      	ands	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007214:	68fb      	ldr	r3, [r7, #12]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	4013      	ands	r3, r2
 8007244:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	0c1b      	lsrs	r3, r3, #16
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	4013      	ands	r3, r2
 8007278:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	b29b      	uxth	r3, r3
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800728a:	b480      	push	{r7}
 800728c:	b085      	sub	sp, #20
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4013      	ands	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072b8:	68bb      	ldr	r3, [r7, #8]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b087      	sub	sp, #28
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	460b      	mov	r3, r1
 80072d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	fa22 f303 	lsr.w	r3, r2, r3
 80072f6:	01db      	lsls	r3, r3, #7
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4013      	ands	r3, r2
 8007312:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007314:	68bb      	ldr	r3, [r7, #8]
}
 8007316:	4618      	mov	r0, r3
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	f003 0301 	and.w	r3, r3, #1
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800733e:	b480      	push	{r7}
 8007340:	b085      	sub	sp, #20
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007358:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800735c:	f023 0307 	bic.w	r3, r3, #7
 8007360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	460b      	mov	r3, r1
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	333c      	adds	r3, #60	@ 0x3c
 800739a:	3304      	adds	r3, #4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	4a26      	ldr	r2, [pc, #152]	@ (800743c <USB_EP0_OutStart+0xb8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d90a      	bls.n	80073be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073b8:	d101      	bne.n	80073be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e037      	b.n	800742e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073c4:	461a      	mov	r2, r3
 80073c6:	2300      	movs	r3, #0
 80073c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073ec:	f043 0318 	orr.w	r3, r3, #24
 80073f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007400:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007404:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007406:	7afb      	ldrb	r3, [r7, #11]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d10f      	bne.n	800742c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007426:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800742a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	4f54300a 	.word	0x4f54300a

08007440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007458:	d901      	bls.n	800745e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e01b      	b.n	8007496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	daf2      	bge.n	800744c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f043 0201 	orr.w	r2, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3301      	adds	r3, #1
 800747a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007482:	d901      	bls.n	8007488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e006      	b.n	8007496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b01      	cmp	r3, #1
 8007492:	d0f0      	beq.n	8007476 <USB_CoreReset+0x36>

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
	...

080074a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80074b4:	f002 fc9e 	bl	8009df4 <USBD_static_malloc>
 80074b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d109      	bne.n	80074d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	32b0      	adds	r2, #176	@ 0xb0
 80074ca:	2100      	movs	r1, #0
 80074cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80074d0:	2302      	movs	r3, #2
 80074d2:	e0d4      	b.n	800767e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80074d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80074d8:	2100      	movs	r1, #0
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f003 fa4b 	bl	800a976 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	32b0      	adds	r2, #176	@ 0xb0
 80074ea:	68f9      	ldr	r1, [r7, #12]
 80074ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	32b0      	adds	r2, #176	@ 0xb0
 80074fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7c1b      	ldrb	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d138      	bne.n	800757e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800750c:	4b5e      	ldr	r3, [pc, #376]	@ (8007688 <USBD_CDC_Init+0x1e4>)
 800750e:	7819      	ldrb	r1, [r3, #0]
 8007510:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007514:	2202      	movs	r2, #2
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f002 fb49 	bl	8009bae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800751c:	4b5a      	ldr	r3, [pc, #360]	@ (8007688 <USBD_CDC_Init+0x1e4>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f003 020f 	and.w	r2, r3, #15
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	3324      	adds	r3, #36	@ 0x24
 8007532:	2201      	movs	r2, #1
 8007534:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007536:	4b55      	ldr	r3, [pc, #340]	@ (800768c <USBD_CDC_Init+0x1e8>)
 8007538:	7819      	ldrb	r1, [r3, #0]
 800753a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800753e:	2202      	movs	r2, #2
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f002 fb34 	bl	8009bae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007546:	4b51      	ldr	r3, [pc, #324]	@ (800768c <USBD_CDC_Init+0x1e8>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800755e:	2201      	movs	r2, #1
 8007560:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007562:	4b4b      	ldr	r3, [pc, #300]	@ (8007690 <USBD_CDC_Init+0x1ec>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	f003 020f 	and.w	r2, r3, #15
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	3326      	adds	r3, #38	@ 0x26
 8007578:	2210      	movs	r2, #16
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	e035      	b.n	80075ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800757e:	4b42      	ldr	r3, [pc, #264]	@ (8007688 <USBD_CDC_Init+0x1e4>)
 8007580:	7819      	ldrb	r1, [r3, #0]
 8007582:	2340      	movs	r3, #64	@ 0x40
 8007584:	2202      	movs	r2, #2
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f002 fb11 	bl	8009bae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800758c:	4b3e      	ldr	r3, [pc, #248]	@ (8007688 <USBD_CDC_Init+0x1e4>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	f003 020f 	and.w	r2, r3, #15
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	3324      	adds	r3, #36	@ 0x24
 80075a2:	2201      	movs	r2, #1
 80075a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80075a6:	4b39      	ldr	r3, [pc, #228]	@ (800768c <USBD_CDC_Init+0x1e8>)
 80075a8:	7819      	ldrb	r1, [r3, #0]
 80075aa:	2340      	movs	r3, #64	@ 0x40
 80075ac:	2202      	movs	r2, #2
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f002 fafd 	bl	8009bae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80075b4:	4b35      	ldr	r3, [pc, #212]	@ (800768c <USBD_CDC_Init+0x1e8>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	f003 020f 	and.w	r2, r3, #15
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075cc:	2201      	movs	r2, #1
 80075ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80075d0:	4b2f      	ldr	r3, [pc, #188]	@ (8007690 <USBD_CDC_Init+0x1ec>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	f003 020f 	and.w	r2, r3, #15
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	3326      	adds	r3, #38	@ 0x26
 80075e6:	2210      	movs	r2, #16
 80075e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075ea:	4b29      	ldr	r3, [pc, #164]	@ (8007690 <USBD_CDC_Init+0x1ec>)
 80075ec:	7819      	ldrb	r1, [r3, #0]
 80075ee:	2308      	movs	r3, #8
 80075f0:	2203      	movs	r2, #3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f002 fadb 	bl	8009bae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80075f8:	4b25      	ldr	r3, [pc, #148]	@ (8007690 <USBD_CDC_Init+0x1ec>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f003 020f 	and.w	r2, r3, #15
 8007600:	6879      	ldr	r1, [r7, #4]
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	3324      	adds	r3, #36	@ 0x24
 800760e:	2201      	movs	r2, #1
 8007610:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	33b0      	adds	r3, #176	@ 0xb0
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007648:	2302      	movs	r3, #2
 800764a:	e018      	b.n	800767e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	7c1b      	ldrb	r3, [r3, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007654:	4b0d      	ldr	r3, [pc, #52]	@ (800768c <USBD_CDC_Init+0x1e8>)
 8007656:	7819      	ldrb	r1, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800765e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f002 fb92 	bl	8009d8c <USBD_LL_PrepareReceive>
 8007668:	e008      	b.n	800767c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800766a:	4b08      	ldr	r3, [pc, #32]	@ (800768c <USBD_CDC_Init+0x1e8>)
 800766c:	7819      	ldrb	r1, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007674:	2340      	movs	r3, #64	@ 0x40
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f002 fb88 	bl	8009d8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000093 	.word	0x20000093
 800768c:	20000094 	.word	0x20000094
 8007690:	20000095 	.word	0x20000095

08007694 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80076a0:	4b3a      	ldr	r3, [pc, #232]	@ (800778c <USBD_CDC_DeInit+0xf8>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f002 faa7 	bl	8009bfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80076ac:	4b37      	ldr	r3, [pc, #220]	@ (800778c <USBD_CDC_DeInit+0xf8>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f003 020f 	and.w	r2, r3, #15
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	3324      	adds	r3, #36	@ 0x24
 80076c2:	2200      	movs	r2, #0
 80076c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80076c6:	4b32      	ldr	r3, [pc, #200]	@ (8007790 <USBD_CDC_DeInit+0xfc>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f002 fa94 	bl	8009bfa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80076d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007790 <USBD_CDC_DeInit+0xfc>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	f003 020f 	and.w	r2, r3, #15
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076ea:	2200      	movs	r2, #0
 80076ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80076ee:	4b29      	ldr	r3, [pc, #164]	@ (8007794 <USBD_CDC_DeInit+0x100>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f002 fa80 	bl	8009bfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80076fa:	4b26      	ldr	r3, [pc, #152]	@ (8007794 <USBD_CDC_DeInit+0x100>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	f003 020f 	and.w	r2, r3, #15
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	4613      	mov	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	440b      	add	r3, r1
 800770e:	3324      	adds	r3, #36	@ 0x24
 8007710:	2200      	movs	r2, #0
 8007712:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007714:	4b1f      	ldr	r3, [pc, #124]	@ (8007794 <USBD_CDC_DeInit+0x100>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	f003 020f 	and.w	r2, r3, #15
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	3326      	adds	r3, #38	@ 0x26
 800772a:	2200      	movs	r2, #0
 800772c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	32b0      	adds	r2, #176	@ 0xb0
 8007738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01f      	beq.n	8007780 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	33b0      	adds	r3, #176	@ 0xb0
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	32b0      	adds	r2, #176	@ 0xb0
 800775e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007762:	4618      	mov	r0, r3
 8007764:	f002 fb54 	bl	8009e10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	32b0      	adds	r2, #176	@ 0xb0
 8007772:	2100      	movs	r1, #0
 8007774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000093 	.word	0x20000093
 8007790:	20000094 	.word	0x20000094
 8007794:	20000095 	.word	0x20000095

08007798 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	32b0      	adds	r2, #176	@ 0xb0
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e0bf      	b.n	8007948 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d050      	beq.n	8007876 <USBD_CDC_Setup+0xde>
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	f040 80af 	bne.w	8007938 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	88db      	ldrh	r3, [r3, #6]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d03a      	beq.n	8007858 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	da1b      	bge.n	8007824 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	33b0      	adds	r3, #176	@ 0xb0
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007802:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	88d2      	ldrh	r2, [r2, #6]
 8007808:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	88db      	ldrh	r3, [r3, #6]
 800780e:	2b07      	cmp	r3, #7
 8007810:	bf28      	it	cs
 8007812:	2307      	movcs	r3, #7
 8007814:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	89fa      	ldrh	r2, [r7, #14]
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 fd93 	bl	8009348 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007822:	e090      	b.n	8007946 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	785a      	ldrb	r2, [r3, #1]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	88db      	ldrh	r3, [r3, #6]
 8007832:	2b3f      	cmp	r3, #63	@ 0x3f
 8007834:	d803      	bhi.n	800783e <USBD_CDC_Setup+0xa6>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	88db      	ldrh	r3, [r3, #6]
 800783a:	b2da      	uxtb	r2, r3
 800783c:	e000      	b.n	8007840 <USBD_CDC_Setup+0xa8>
 800783e:	2240      	movs	r2, #64	@ 0x40
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007846:	6939      	ldr	r1, [r7, #16]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800784e:	461a      	mov	r2, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 fda5 	bl	80093a0 <USBD_CtlPrepareRx>
      break;
 8007856:	e076      	b.n	8007946 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	33b0      	adds	r3, #176	@ 0xb0
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	7850      	ldrb	r0, [r2, #1]
 800786e:	2200      	movs	r2, #0
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	4798      	blx	r3
      break;
 8007874:	e067      	b.n	8007946 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	2b0b      	cmp	r3, #11
 800787c:	d851      	bhi.n	8007922 <USBD_CDC_Setup+0x18a>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <USBD_CDC_Setup+0xec>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078b5 	.word	0x080078b5
 8007888:	08007931 	.word	0x08007931
 800788c:	08007923 	.word	0x08007923
 8007890:	08007923 	.word	0x08007923
 8007894:	08007923 	.word	0x08007923
 8007898:	08007923 	.word	0x08007923
 800789c:	08007923 	.word	0x08007923
 80078a0:	08007923 	.word	0x08007923
 80078a4:	08007923 	.word	0x08007923
 80078a8:	08007923 	.word	0x08007923
 80078ac:	080078df 	.word	0x080078df
 80078b0:	08007909 	.word	0x08007909
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d107      	bne.n	80078d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078c0:	f107 030a 	add.w	r3, r7, #10
 80078c4:	2202      	movs	r2, #2
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fd3d 	bl	8009348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078ce:	e032      	b.n	8007936 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fcbb 	bl	800924e <USBD_CtlError>
            ret = USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	75fb      	strb	r3, [r7, #23]
          break;
 80078dc:	e02b      	b.n	8007936 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d107      	bne.n	80078fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80078ea:	f107 030d 	add.w	r3, r7, #13
 80078ee:	2201      	movs	r2, #1
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 fd28 	bl	8009348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078f8:	e01d      	b.n	8007936 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 fca6 	bl	800924e <USBD_CtlError>
            ret = USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	75fb      	strb	r3, [r7, #23]
          break;
 8007906:	e016      	b.n	8007936 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b03      	cmp	r3, #3
 8007912:	d00f      	beq.n	8007934 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 fc99 	bl	800924e <USBD_CtlError>
            ret = USBD_FAIL;
 800791c:	2303      	movs	r3, #3
 800791e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007920:	e008      	b.n	8007934 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 fc92 	bl	800924e <USBD_CtlError>
          ret = USBD_FAIL;
 800792a:	2303      	movs	r3, #3
 800792c:	75fb      	strb	r3, [r7, #23]
          break;
 800792e:	e002      	b.n	8007936 <USBD_CDC_Setup+0x19e>
          break;
 8007930:	bf00      	nop
 8007932:	e008      	b.n	8007946 <USBD_CDC_Setup+0x1ae>
          break;
 8007934:	bf00      	nop
      }
      break;
 8007936:	e006      	b.n	8007946 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 fc87 	bl	800924e <USBD_CtlError>
      ret = USBD_FAIL;
 8007940:	2303      	movs	r3, #3
 8007942:	75fb      	strb	r3, [r7, #23]
      break;
 8007944:	bf00      	nop
  }

  return (uint8_t)ret;
 8007946:	7dfb      	ldrb	r3, [r7, #23]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007962:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	32b0      	adds	r2, #176	@ 0xb0
 800796e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007976:	2303      	movs	r3, #3
 8007978:	e065      	b.n	8007a46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	32b0      	adds	r2, #176	@ 0xb0
 8007984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007988:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	f003 020f 	and.w	r2, r3, #15
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	3318      	adds	r3, #24
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d02f      	beq.n	8007a04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	f003 020f 	and.w	r2, r3, #15
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	3318      	adds	r3, #24
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	f003 010f 	and.w	r1, r3, #15
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	460b      	mov	r3, r1
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	440b      	add	r3, r1
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4403      	add	r3, r0
 80079cc:	331c      	adds	r3, #28
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80079d4:	fb01 f303 	mul.w	r3, r1, r3
 80079d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d112      	bne.n	8007a04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	f003 020f 	and.w	r2, r3, #15
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	440b      	add	r3, r1
 80079f0:	3318      	adds	r3, #24
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80079f6:	78f9      	ldrb	r1, [r7, #3]
 80079f8:	2300      	movs	r3, #0
 80079fa:	2200      	movs	r2, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f002 f9a4 	bl	8009d4a <USBD_LL_Transmit>
 8007a02:	e01f      	b.n	8007a44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	33b0      	adds	r3, #176	@ 0xb0
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d010      	beq.n	8007a44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	33b0      	adds	r3, #176	@ 0xb0
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007a40:	78fa      	ldrb	r2, [r7, #3]
 8007a42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	460b      	mov	r3, r1
 8007a58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	32b0      	adds	r2, #176	@ 0xb0
 8007a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	32b0      	adds	r2, #176	@ 0xb0
 8007a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e01a      	b.n	8007ab6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f002 f9a2 	bl	8009dce <USBD_LL_GetRxDataSize>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	33b0      	adds	r3, #176	@ 0xb0
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	32b0      	adds	r2, #176	@ 0xb0
 8007ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e024      	b.n	8007b2a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	33b0      	adds	r3, #176	@ 0xb0
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d019      	beq.n	8007b28 <USBD_CDC_EP0_RxReady+0x6a>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007afa:	2bff      	cmp	r3, #255	@ 0xff
 8007afc:	d014      	beq.n	8007b28 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	33b0      	adds	r3, #176	@ 0xb0
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007b16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	22ff      	movs	r2, #255	@ 0xff
 8007b24:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b3c:	2182      	movs	r1, #130	@ 0x82
 8007b3e:	4818      	ldr	r0, [pc, #96]	@ (8007ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b40:	f000 fd4f 	bl	80085e2 <USBD_GetEpDesc>
 8007b44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b46:	2101      	movs	r1, #1
 8007b48:	4815      	ldr	r0, [pc, #84]	@ (8007ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b4a:	f000 fd4a 	bl	80085e2 <USBD_GetEpDesc>
 8007b4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b50:	2181      	movs	r1, #129	@ 0x81
 8007b52:	4813      	ldr	r0, [pc, #76]	@ (8007ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b54:	f000 fd45 	bl	80085e2 <USBD_GetEpDesc>
 8007b58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2210      	movs	r2, #16
 8007b64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d006      	beq.n	8007b7a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b74:	711a      	strb	r2, [r3, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d006      	beq.n	8007b8e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b88:	711a      	strb	r2, [r3, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2243      	movs	r2, #67	@ 0x43
 8007b92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b94:	4b02      	ldr	r3, [pc, #8]	@ (8007ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000050 	.word	0x20000050

08007ba4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bac:	2182      	movs	r1, #130	@ 0x82
 8007bae:	4818      	ldr	r0, [pc, #96]	@ (8007c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007bb0:	f000 fd17 	bl	80085e2 <USBD_GetEpDesc>
 8007bb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	4815      	ldr	r0, [pc, #84]	@ (8007c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007bba:	f000 fd12 	bl	80085e2 <USBD_GetEpDesc>
 8007bbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bc0:	2181      	movs	r1, #129	@ 0x81
 8007bc2:	4813      	ldr	r0, [pc, #76]	@ (8007c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007bc4:	f000 fd0d 	bl	80085e2 <USBD_GetEpDesc>
 8007bc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2210      	movs	r2, #16
 8007bd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2200      	movs	r2, #0
 8007be0:	711a      	strb	r2, [r3, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f042 0202 	orr.w	r2, r2, #2
 8007be8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d006      	beq.n	8007bfe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	711a      	strb	r2, [r3, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f042 0202 	orr.w	r2, r2, #2
 8007bfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2243      	movs	r2, #67	@ 0x43
 8007c02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c04:	4b02      	ldr	r3, [pc, #8]	@ (8007c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000050 	.word	0x20000050

08007c14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c1c:	2182      	movs	r1, #130	@ 0x82
 8007c1e:	4818      	ldr	r0, [pc, #96]	@ (8007c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c20:	f000 fcdf 	bl	80085e2 <USBD_GetEpDesc>
 8007c24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c26:	2101      	movs	r1, #1
 8007c28:	4815      	ldr	r0, [pc, #84]	@ (8007c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c2a:	f000 fcda 	bl	80085e2 <USBD_GetEpDesc>
 8007c2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c30:	2181      	movs	r1, #129	@ 0x81
 8007c32:	4813      	ldr	r0, [pc, #76]	@ (8007c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c34:	f000 fcd5 	bl	80085e2 <USBD_GetEpDesc>
 8007c38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2210      	movs	r2, #16
 8007c44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d006      	beq.n	8007c5a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c54:	711a      	strb	r2, [r3, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d006      	beq.n	8007c6e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c68:	711a      	strb	r2, [r3, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2243      	movs	r2, #67	@ 0x43
 8007c72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c74:	4b02      	ldr	r3, [pc, #8]	@ (8007c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000050 	.word	0x20000050

08007c84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	220a      	movs	r2, #10
 8007c90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c92:	4b03      	ldr	r3, [pc, #12]	@ (8007ca0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	2000000c 	.word	0x2000000c

08007ca4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e009      	b.n	8007ccc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	33b0      	adds	r3, #176	@ 0xb0
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	32b0      	adds	r2, #176	@ 0xb0
 8007cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e008      	b.n	8007d10 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	371c      	adds	r7, #28
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	32b0      	adds	r2, #176	@ 0xb0
 8007d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e004      	b.n	8007d4a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
	...

08007d58 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	32b0      	adds	r2, #176	@ 0xb0
 8007d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d70:	2301      	movs	r3, #1
 8007d72:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e025      	b.n	8007dca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11f      	bne.n	8007dc8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007d90:	4b10      	ldr	r3, [pc, #64]	@ (8007dd4 <USBD_CDC_TransmitPacket+0x7c>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	f003 020f 	and.w	r2, r3, #15
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4613      	mov	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4403      	add	r3, r0
 8007daa:	3318      	adds	r3, #24
 8007dac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007dae:	4b09      	ldr	r3, [pc, #36]	@ (8007dd4 <USBD_CDC_TransmitPacket+0x7c>)
 8007db0:	7819      	ldrb	r1, [r3, #0]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 ffc3 	bl	8009d4a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20000093 	.word	0x20000093

08007dd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	32b0      	adds	r2, #176	@ 0xb0
 8007dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	32b0      	adds	r2, #176	@ 0xb0
 8007dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e018      	b.n	8007e38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7c1b      	ldrb	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10a      	bne.n	8007e24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e40 <USBD_CDC_ReceivePacket+0x68>)
 8007e10:	7819      	ldrb	r1, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 ffb5 	bl	8009d8c <USBD_LL_PrepareReceive>
 8007e22:	e008      	b.n	8007e36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e24:	4b06      	ldr	r3, [pc, #24]	@ (8007e40 <USBD_CDC_ReceivePacket+0x68>)
 8007e26:	7819      	ldrb	r1, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e2e:	2340      	movs	r3, #64	@ 0x40
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 ffab 	bl	8009d8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20000094 	.word	0x20000094

08007e44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e01f      	b.n	8007e9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	79fa      	ldrb	r2, [r7, #7]
 8007e8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f001 fe25 	bl	8009ae0 <USBD_LL_Init>
 8007e96:	4603      	mov	r3, r0
 8007e98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e025      	b.n	8007f08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	32ae      	adds	r2, #174	@ 0xae
 8007ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00f      	beq.n	8007ef8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	32ae      	adds	r2, #174	@ 0xae
 8007ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	f107 020e 	add.w	r2, r7, #14
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fe2d 	bl	8009b78 <USBD_LL_Start>
 8007f1e:	4603      	mov	r3, r0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d009      	beq.n	8007f6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	78fa      	ldrb	r2, [r7, #3]
 8007f62:	4611      	mov	r1, r2
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	4611      	mov	r1, r2
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 f90c 	bl	80091da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007fde:	f003 031f 	and.w	r3, r3, #31
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d01a      	beq.n	800801c <USBD_LL_SetupStage+0x72>
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d822      	bhi.n	8008030 <USBD_LL_SetupStage+0x86>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <USBD_LL_SetupStage+0x4a>
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d00a      	beq.n	8008008 <USBD_LL_SetupStage+0x5e>
 8007ff2:	e01d      	b.n	8008030 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fb63 	bl	80086c8 <USBD_StdDevReq>
 8008002:	4603      	mov	r3, r0
 8008004:	73fb      	strb	r3, [r7, #15]
      break;
 8008006:	e020      	b.n	800804a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fbcb 	bl	80087ac <USBD_StdItfReq>
 8008016:	4603      	mov	r3, r0
 8008018:	73fb      	strb	r3, [r7, #15]
      break;
 800801a:	e016      	b.n	800804a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fc2d 	bl	8008884 <USBD_StdEPReq>
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]
      break;
 800802e:	e00c      	b.n	800804a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008036:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800803a:	b2db      	uxtb	r3, r3
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 fdfa 	bl	8009c38 <USBD_LL_StallEP>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]
      break;
 8008048:	bf00      	nop
  }

  return ret;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	460b      	mov	r3, r1
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008066:	7afb      	ldrb	r3, [r7, #11]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d16e      	bne.n	800814a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008072:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800807a:	2b03      	cmp	r3, #3
 800807c:	f040 8098 	bne.w	80081b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	429a      	cmp	r2, r3
 800808a:	d913      	bls.n	80080b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	1ad2      	subs	r2, r2, r3
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	4293      	cmp	r3, r2
 80080a4:	bf28      	it	cs
 80080a6:	4613      	movcs	r3, r2
 80080a8:	461a      	mov	r2, r3
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f001 f994 	bl	80093da <USBD_CtlContinueRx>
 80080b2:	e07d      	b.n	80081b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d014      	beq.n	80080ec <USBD_LL_DataOutStage+0x98>
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d81d      	bhi.n	8008102 <USBD_LL_DataOutStage+0xae>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <USBD_LL_DataOutStage+0x7c>
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d003      	beq.n	80080d6 <USBD_LL_DataOutStage+0x82>
 80080ce:	e018      	b.n	8008102 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	75bb      	strb	r3, [r7, #22]
            break;
 80080d4:	e018      	b.n	8008108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	4619      	mov	r1, r3
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 fa64 	bl	80085ae <USBD_CoreFindIF>
 80080e6:	4603      	mov	r3, r0
 80080e8:	75bb      	strb	r3, [r7, #22]
            break;
 80080ea:	e00d      	b.n	8008108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	4619      	mov	r1, r3
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fa66 	bl	80085c8 <USBD_CoreFindEP>
 80080fc:	4603      	mov	r3, r0
 80080fe:	75bb      	strb	r3, [r7, #22]
            break;
 8008100:	e002      	b.n	8008108 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	75bb      	strb	r3, [r7, #22]
            break;
 8008106:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008108:	7dbb      	ldrb	r3, [r7, #22]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d119      	bne.n	8008142 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b03      	cmp	r3, #3
 8008118:	d113      	bne.n	8008142 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800811a:	7dba      	ldrb	r2, [r7, #22]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	32ae      	adds	r2, #174	@ 0xae
 8008120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00b      	beq.n	8008142 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800812a:	7dba      	ldrb	r2, [r7, #22]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008132:	7dba      	ldrb	r2, [r7, #22]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	32ae      	adds	r2, #174	@ 0xae
 8008138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f001 f95a 	bl	80093fc <USBD_CtlSendStatus>
 8008148:	e032      	b.n	80081b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800814a:	7afb      	ldrb	r3, [r7, #11]
 800814c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008150:	b2db      	uxtb	r3, r3
 8008152:	4619      	mov	r1, r3
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 fa37 	bl	80085c8 <USBD_CoreFindEP>
 800815a:	4603      	mov	r3, r0
 800815c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800815e:	7dbb      	ldrb	r3, [r7, #22]
 8008160:	2bff      	cmp	r3, #255	@ 0xff
 8008162:	d025      	beq.n	80081b0 <USBD_LL_DataOutStage+0x15c>
 8008164:	7dbb      	ldrb	r3, [r7, #22]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d122      	bne.n	80081b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b03      	cmp	r3, #3
 8008174:	d117      	bne.n	80081a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008176:	7dba      	ldrb	r2, [r7, #22]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	32ae      	adds	r2, #174	@ 0xae
 800817c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00f      	beq.n	80081a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008186:	7dba      	ldrb	r2, [r7, #22]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800818e:	7dba      	ldrb	r2, [r7, #22]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	32ae      	adds	r2, #174	@ 0xae
 8008194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	7afa      	ldrb	r2, [r7, #11]
 800819c:	4611      	mov	r1, r2
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	4798      	blx	r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	e000      	b.n	80081b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	460b      	mov	r3, r1
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80081c8:	7afb      	ldrb	r3, [r7, #11]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d16f      	bne.n	80082ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3314      	adds	r3, #20
 80081d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d15a      	bne.n	8008294 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d914      	bls.n	8008214 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	689a      	ldr	r2, [r3, #8]
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	1ad2      	subs	r2, r2, r3
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	461a      	mov	r2, r3
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f001 f8bc 	bl	800937e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008206:	2300      	movs	r3, #0
 8008208:	2200      	movs	r2, #0
 800820a:	2100      	movs	r1, #0
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f001 fdbd 	bl	8009d8c <USBD_LL_PrepareReceive>
 8008212:	e03f      	b.n	8008294 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	429a      	cmp	r2, r3
 800821e:	d11c      	bne.n	800825a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008228:	429a      	cmp	r2, r3
 800822a:	d316      	bcc.n	800825a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008236:	429a      	cmp	r2, r3
 8008238:	d20f      	bcs.n	800825a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800823a:	2200      	movs	r2, #0
 800823c:	2100      	movs	r1, #0
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f001 f89d 	bl	800937e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800824c:	2300      	movs	r3, #0
 800824e:	2200      	movs	r2, #0
 8008250:	2100      	movs	r1, #0
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f001 fd9a 	bl	8009d8c <USBD_LL_PrepareReceive>
 8008258:	e01c      	b.n	8008294 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b03      	cmp	r3, #3
 8008264:	d10f      	bne.n	8008286 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008286:	2180      	movs	r1, #128	@ 0x80
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f001 fcd5 	bl	8009c38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f001 f8c7 	bl	8009422 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d03a      	beq.n	8008314 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7ff fe42 	bl	8007f28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80082ac:	e032      	b.n	8008314 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80082ae:	7afb      	ldrb	r3, [r7, #11]
 80082b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	4619      	mov	r1, r3
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 f985 	bl	80085c8 <USBD_CoreFindEP>
 80082be:	4603      	mov	r3, r0
 80082c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	2bff      	cmp	r3, #255	@ 0xff
 80082c6:	d025      	beq.n	8008314 <USBD_LL_DataInStage+0x15a>
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d122      	bne.n	8008314 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d11c      	bne.n	8008314 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80082da:	7dfa      	ldrb	r2, [r7, #23]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	32ae      	adds	r2, #174	@ 0xae
 80082e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d014      	beq.n	8008314 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80082ea:	7dfa      	ldrb	r2, [r7, #23]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80082f2:	7dfa      	ldrb	r2, [r7, #23]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	32ae      	adds	r2, #174	@ 0xae
 80082f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	7afa      	ldrb	r2, [r7, #11]
 8008300:	4611      	mov	r1, r2
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800830a:	7dbb      	ldrb	r3, [r7, #22]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008310:	7dbb      	ldrb	r3, [r7, #22]
 8008312:	e000      	b.n	8008316 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008356:	2b00      	cmp	r3, #0
 8008358:	d014      	beq.n	8008384 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00e      	beq.n	8008384 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6852      	ldr	r2, [r2, #4]
 8008372:	b2d2      	uxtb	r2, r2
 8008374:	4611      	mov	r1, r2
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008380:	2303      	movs	r3, #3
 8008382:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008384:	2340      	movs	r3, #64	@ 0x40
 8008386:	2200      	movs	r2, #0
 8008388:	2100      	movs	r1, #0
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 fc0f 	bl	8009bae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2240      	movs	r2, #64	@ 0x40
 800839c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083a0:	2340      	movs	r3, #64	@ 0x40
 80083a2:	2200      	movs	r2, #0
 80083a4:	2180      	movs	r1, #128	@ 0x80
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fc01 	bl	8009bae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2240      	movs	r2, #64	@ 0x40
 80083b6:	621a      	str	r2, [r3, #32]

  return ret;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d006      	beq.n	8008404 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2204      	movs	r2, #4
 8008408:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b04      	cmp	r3, #4
 800842c:	d106      	bne.n	800843c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008434:	b2da      	uxtb	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b03      	cmp	r3, #3
 800845c:	d110      	bne.n	8008480 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00b      	beq.n	8008480 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	32ae      	adds	r2, #174	@ 0xae
 80084a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e01c      	b.n	80084e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d115      	bne.n	80084e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	32ae      	adds	r2, #174	@ 0xae
 80084c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00b      	beq.n	80084e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	32ae      	adds	r2, #174	@ 0xae
 80084d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	78fa      	ldrb	r2, [r7, #3]
 80084de:	4611      	mov	r1, r2
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	460b      	mov	r3, r1
 80084f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	32ae      	adds	r2, #174	@ 0xae
 8008504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800850c:	2303      	movs	r3, #3
 800850e:	e01c      	b.n	800854a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b03      	cmp	r3, #3
 800851a:	d115      	bne.n	8008548 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	32ae      	adds	r2, #174	@ 0xae
 8008526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	32ae      	adds	r2, #174	@ 0xae
 800853a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008540:	78fa      	ldrb	r2, [r7, #3]
 8008542:	4611      	mov	r1, r2
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00e      	beq.n	80085a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	6852      	ldr	r2, [r2, #4]
 8008592:	b2d2      	uxtb	r2, r2
 8008594:	4611      	mov	r1, r2
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80085a0:	2303      	movs	r3, #3
 80085a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	460b      	mov	r3, r1
 80085b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80085ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80085d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b086      	sub	sp, #24
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	885b      	ldrh	r3, [r3, #2]
 80085fe:	b29b      	uxth	r3, r3
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	7812      	ldrb	r2, [r2, #0]
 8008604:	4293      	cmp	r3, r2
 8008606:	d91f      	bls.n	8008648 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800860e:	e013      	b.n	8008638 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008610:	f107 030a 	add.w	r3, r7, #10
 8008614:	4619      	mov	r1, r3
 8008616:	6978      	ldr	r0, [r7, #20]
 8008618:	f000 f81b 	bl	8008652 <USBD_GetNextDesc>
 800861c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	785b      	ldrb	r3, [r3, #1]
 8008622:	2b05      	cmp	r3, #5
 8008624:	d108      	bne.n	8008638 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	789b      	ldrb	r3, [r3, #2]
 800862e:	78fa      	ldrb	r2, [r7, #3]
 8008630:	429a      	cmp	r2, r3
 8008632:	d008      	beq.n	8008646 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008634:	2300      	movs	r3, #0
 8008636:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	885b      	ldrh	r3, [r3, #2]
 800863c:	b29a      	uxth	r2, r3
 800863e:	897b      	ldrh	r3, [r7, #10]
 8008640:	429a      	cmp	r2, r3
 8008642:	d8e5      	bhi.n	8008610 <USBD_GetEpDesc+0x2e>
 8008644:	e000      	b.n	8008648 <USBD_GetEpDesc+0x66>
          break;
 8008646:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008648:	693b      	ldr	r3, [r7, #16]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	7812      	ldrb	r2, [r2, #0]
 8008668:	4413      	add	r3, r2
 800866a:	b29a      	uxth	r2, r3
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4413      	add	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800867c:	68fb      	ldr	r3, [r7, #12]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800868a:	b480      	push	{r7}
 800868c:	b087      	sub	sp, #28
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	3301      	adds	r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086a8:	8a3b      	ldrh	r3, [r7, #16]
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	b21a      	sxth	r2, r3
 80086ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	b21b      	sxth	r3, r3
 80086b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086b8:	89fb      	ldrh	r3, [r7, #14]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
	...

080086c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086de:	2b40      	cmp	r3, #64	@ 0x40
 80086e0:	d005      	beq.n	80086ee <USBD_StdDevReq+0x26>
 80086e2:	2b40      	cmp	r3, #64	@ 0x40
 80086e4:	d857      	bhi.n	8008796 <USBD_StdDevReq+0xce>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00f      	beq.n	800870a <USBD_StdDevReq+0x42>
 80086ea:	2b20      	cmp	r3, #32
 80086ec:	d153      	bne.n	8008796 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	32ae      	adds	r2, #174	@ 0xae
 80086f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	4798      	blx	r3
 8008704:	4603      	mov	r3, r0
 8008706:	73fb      	strb	r3, [r7, #15]
      break;
 8008708:	e04a      	b.n	80087a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	2b09      	cmp	r3, #9
 8008710:	d83b      	bhi.n	800878a <USBD_StdDevReq+0xc2>
 8008712:	a201      	add	r2, pc, #4	@ (adr r2, 8008718 <USBD_StdDevReq+0x50>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	0800876d 	.word	0x0800876d
 800871c:	08008781 	.word	0x08008781
 8008720:	0800878b 	.word	0x0800878b
 8008724:	08008777 	.word	0x08008777
 8008728:	0800878b 	.word	0x0800878b
 800872c:	0800874b 	.word	0x0800874b
 8008730:	08008741 	.word	0x08008741
 8008734:	0800878b 	.word	0x0800878b
 8008738:	08008763 	.word	0x08008763
 800873c:	08008755 	.word	0x08008755
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa3c 	bl	8008bc0 <USBD_GetDescriptor>
          break;
 8008748:	e024      	b.n	8008794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fba1 	bl	8008e94 <USBD_SetAddress>
          break;
 8008752:	e01f      	b.n	8008794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fbe0 	bl	8008f1c <USBD_SetConfig>
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]
          break;
 8008760:	e018      	b.n	8008794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fc83 	bl	8009070 <USBD_GetConfig>
          break;
 800876a:	e013      	b.n	8008794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fcb4 	bl	80090dc <USBD_GetStatus>
          break;
 8008774:	e00e      	b.n	8008794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fce3 	bl	8009144 <USBD_SetFeature>
          break;
 800877e:	e009      	b.n	8008794 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fd07 	bl	8009196 <USBD_ClrFeature>
          break;
 8008788:	e004      	b.n	8008794 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fd5e 	bl	800924e <USBD_CtlError>
          break;
 8008792:	bf00      	nop
      }
      break;
 8008794:	e004      	b.n	80087a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fd58 	bl	800924e <USBD_CtlError>
      break;
 800879e:	bf00      	nop
  }

  return ret;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop

080087ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087c2:	2b40      	cmp	r3, #64	@ 0x40
 80087c4:	d005      	beq.n	80087d2 <USBD_StdItfReq+0x26>
 80087c6:	2b40      	cmp	r3, #64	@ 0x40
 80087c8:	d852      	bhi.n	8008870 <USBD_StdItfReq+0xc4>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <USBD_StdItfReq+0x26>
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d14e      	bne.n	8008870 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	3b01      	subs	r3, #1
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d840      	bhi.n	8008862 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	889b      	ldrh	r3, [r3, #4]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d836      	bhi.n	8008858 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	889b      	ldrh	r3, [r3, #4]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff fedb 	bl	80085ae <USBD_CoreFindIF>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2bff      	cmp	r3, #255	@ 0xff
 8008800:	d01d      	beq.n	800883e <USBD_StdItfReq+0x92>
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d11a      	bne.n	800883e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008808:	7bba      	ldrb	r2, [r7, #14]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	32ae      	adds	r2, #174	@ 0xae
 800880e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00f      	beq.n	8008838 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008818:	7bba      	ldrb	r2, [r7, #14]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008820:	7bba      	ldrb	r2, [r7, #14]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	32ae      	adds	r2, #174	@ 0xae
 8008826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
 8008832:	4603      	mov	r3, r0
 8008834:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008836:	e004      	b.n	8008842 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008838:	2303      	movs	r3, #3
 800883a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800883c:	e001      	b.n	8008842 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800883e:	2303      	movs	r3, #3
 8008840:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	88db      	ldrh	r3, [r3, #6]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d110      	bne.n	800886c <USBD_StdItfReq+0xc0>
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10d      	bne.n	800886c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fdd3 	bl	80093fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008856:	e009      	b.n	800886c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fcf7 	bl	800924e <USBD_CtlError>
          break;
 8008860:	e004      	b.n	800886c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fcf2 	bl	800924e <USBD_CtlError>
          break;
 800886a:	e000      	b.n	800886e <USBD_StdItfReq+0xc2>
          break;
 800886c:	bf00      	nop
      }
      break;
 800886e:	e004      	b.n	800887a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fceb 	bl	800924e <USBD_CtlError>
      break;
 8008878:	bf00      	nop
  }

  return ret;
 800887a:	7bfb      	ldrb	r3, [r7, #15]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	889b      	ldrh	r3, [r3, #4]
 8008896:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088a0:	2b40      	cmp	r3, #64	@ 0x40
 80088a2:	d007      	beq.n	80088b4 <USBD_StdEPReq+0x30>
 80088a4:	2b40      	cmp	r3, #64	@ 0x40
 80088a6:	f200 817f 	bhi.w	8008ba8 <USBD_StdEPReq+0x324>
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d02a      	beq.n	8008904 <USBD_StdEPReq+0x80>
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	f040 817a 	bne.w	8008ba8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff fe85 	bl	80085c8 <USBD_CoreFindEP>
 80088be:	4603      	mov	r3, r0
 80088c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088c2:	7b7b      	ldrb	r3, [r7, #13]
 80088c4:	2bff      	cmp	r3, #255	@ 0xff
 80088c6:	f000 8174 	beq.w	8008bb2 <USBD_StdEPReq+0x32e>
 80088ca:	7b7b      	ldrb	r3, [r7, #13]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f040 8170 	bne.w	8008bb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80088d2:	7b7a      	ldrb	r2, [r7, #13]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80088da:	7b7a      	ldrb	r2, [r7, #13]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	32ae      	adds	r2, #174	@ 0xae
 80088e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 8163 	beq.w	8008bb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80088ec:	7b7a      	ldrb	r2, [r7, #13]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	32ae      	adds	r2, #174	@ 0xae
 80088f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
 80088fe:	4603      	mov	r3, r0
 8008900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008902:	e156      	b.n	8008bb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	785b      	ldrb	r3, [r3, #1]
 8008908:	2b03      	cmp	r3, #3
 800890a:	d008      	beq.n	800891e <USBD_StdEPReq+0x9a>
 800890c:	2b03      	cmp	r3, #3
 800890e:	f300 8145 	bgt.w	8008b9c <USBD_StdEPReq+0x318>
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 809b 	beq.w	8008a4e <USBD_StdEPReq+0x1ca>
 8008918:	2b01      	cmp	r3, #1
 800891a:	d03c      	beq.n	8008996 <USBD_StdEPReq+0x112>
 800891c:	e13e      	b.n	8008b9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b02      	cmp	r3, #2
 8008928:	d002      	beq.n	8008930 <USBD_StdEPReq+0xac>
 800892a:	2b03      	cmp	r3, #3
 800892c:	d016      	beq.n	800895c <USBD_StdEPReq+0xd8>
 800892e:	e02c      	b.n	800898a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00d      	beq.n	8008952 <USBD_StdEPReq+0xce>
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	2b80      	cmp	r3, #128	@ 0x80
 800893a:	d00a      	beq.n	8008952 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 f979 	bl	8009c38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008946:	2180      	movs	r1, #128	@ 0x80
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 f975 	bl	8009c38 <USBD_LL_StallEP>
 800894e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008950:	e020      	b.n	8008994 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fc7a 	bl	800924e <USBD_CtlError>
              break;
 800895a:	e01b      	b.n	8008994 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	885b      	ldrh	r3, [r3, #2]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10e      	bne.n	8008982 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008964:	7bbb      	ldrb	r3, [r7, #14]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <USBD_StdEPReq+0xfe>
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	2b80      	cmp	r3, #128	@ 0x80
 800896e:	d008      	beq.n	8008982 <USBD_StdEPReq+0xfe>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	88db      	ldrh	r3, [r3, #6]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d104      	bne.n	8008982 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 f95b 	bl	8009c38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fd3a 	bl	80093fc <USBD_CtlSendStatus>

              break;
 8008988:	e004      	b.n	8008994 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc5e 	bl	800924e <USBD_CtlError>
              break;
 8008992:	bf00      	nop
          }
          break;
 8008994:	e107      	b.n	8008ba6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d002      	beq.n	80089a8 <USBD_StdEPReq+0x124>
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d016      	beq.n	80089d4 <USBD_StdEPReq+0x150>
 80089a6:	e04b      	b.n	8008a40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00d      	beq.n	80089ca <USBD_StdEPReq+0x146>
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b80      	cmp	r3, #128	@ 0x80
 80089b2:	d00a      	beq.n	80089ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 f93d 	bl	8009c38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089be:	2180      	movs	r1, #128	@ 0x80
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 f939 	bl	8009c38 <USBD_LL_StallEP>
 80089c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089c8:	e040      	b.n	8008a4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fc3e 	bl	800924e <USBD_CtlError>
              break;
 80089d2:	e03b      	b.n	8008a4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	885b      	ldrh	r3, [r3, #2]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d136      	bne.n	8008a4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d004      	beq.n	80089f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f001 f943 	bl	8009c76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fd03 	bl	80093fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fde4 	bl	80085c8 <USBD_CoreFindEP>
 8008a00:	4603      	mov	r3, r0
 8008a02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a04:	7b7b      	ldrb	r3, [r7, #13]
 8008a06:	2bff      	cmp	r3, #255	@ 0xff
 8008a08:	d01f      	beq.n	8008a4a <USBD_StdEPReq+0x1c6>
 8008a0a:	7b7b      	ldrb	r3, [r7, #13]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d11c      	bne.n	8008a4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a10:	7b7a      	ldrb	r2, [r7, #13]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a18:	7b7a      	ldrb	r2, [r7, #13]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	32ae      	adds	r2, #174	@ 0xae
 8008a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d010      	beq.n	8008a4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a28:	7b7a      	ldrb	r2, [r7, #13]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	32ae      	adds	r2, #174	@ 0xae
 8008a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	4798      	blx	r3
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008a3e:	e004      	b.n	8008a4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fc03 	bl	800924e <USBD_CtlError>
              break;
 8008a48:	e000      	b.n	8008a4c <USBD_StdEPReq+0x1c8>
              break;
 8008a4a:	bf00      	nop
          }
          break;
 8008a4c:	e0ab      	b.n	8008ba6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d002      	beq.n	8008a60 <USBD_StdEPReq+0x1dc>
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d032      	beq.n	8008ac4 <USBD_StdEPReq+0x240>
 8008a5e:	e097      	b.n	8008b90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d007      	beq.n	8008a76 <USBD_StdEPReq+0x1f2>
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
 8008a68:	2b80      	cmp	r3, #128	@ 0x80
 8008a6a:	d004      	beq.n	8008a76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fbed 	bl	800924e <USBD_CtlError>
                break;
 8008a74:	e091      	b.n	8008b9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	da0b      	bge.n	8008a96 <USBD_StdEPReq+0x212>
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	3310      	adds	r3, #16
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	4413      	add	r3, r2
 8008a92:	3304      	adds	r3, #4
 8008a94:	e00b      	b.n	8008aae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	4413      	add	r3, r2
 8008aac:	3304      	adds	r3, #4
 8008aae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fc43 	bl	8009348 <USBD_CtlSendData>
              break;
 8008ac2:	e06a      	b.n	8008b9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	da11      	bge.n	8008af0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	f003 020f 	and.w	r2, r3, #15
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	440b      	add	r3, r1
 8008ade:	3324      	adds	r3, #36	@ 0x24
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d117      	bne.n	8008b16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fbb0 	bl	800924e <USBD_CtlError>
                  break;
 8008aee:	e054      	b.n	8008b9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	f003 020f 	and.w	r2, r3, #15
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fb9d 	bl	800924e <USBD_CtlError>
                  break;
 8008b14:	e041      	b.n	8008b9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da0b      	bge.n	8008b36 <USBD_StdEPReq+0x2b2>
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	3310      	adds	r3, #16
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	4413      	add	r3, r2
 8008b32:	3304      	adds	r3, #4
 8008b34:	e00b      	b.n	8008b4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d002      	beq.n	8008b5c <USBD_StdEPReq+0x2d8>
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	2b80      	cmp	r3, #128	@ 0x80
 8008b5a:	d103      	bne.n	8008b64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	e00e      	b.n	8008b82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 f8a3 	bl	8009cb4 <USBD_LL_IsStallEP>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2201      	movs	r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	e002      	b.n	8008b82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2202      	movs	r2, #2
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fbdd 	bl	8009348 <USBD_CtlSendData>
              break;
 8008b8e:	e004      	b.n	8008b9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fb5b 	bl	800924e <USBD_CtlError>
              break;
 8008b98:	bf00      	nop
          }
          break;
 8008b9a:	e004      	b.n	8008ba6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fb55 	bl	800924e <USBD_CtlError>
          break;
 8008ba4:	bf00      	nop
      }
      break;
 8008ba6:	e005      	b.n	8008bb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fb4f 	bl	800924e <USBD_CtlError>
      break;
 8008bb0:	e000      	b.n	8008bb4 <USBD_StdEPReq+0x330>
      break;
 8008bb2:	bf00      	nop
  }

  return ret;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	0a1b      	lsrs	r3, r3, #8
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	3b01      	subs	r3, #1
 8008be0:	2b06      	cmp	r3, #6
 8008be2:	f200 8128 	bhi.w	8008e36 <USBD_GetDescriptor+0x276>
 8008be6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bec <USBD_GetDescriptor+0x2c>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c09 	.word	0x08008c09
 8008bf0:	08008c21 	.word	0x08008c21
 8008bf4:	08008c61 	.word	0x08008c61
 8008bf8:	08008e37 	.word	0x08008e37
 8008bfc:	08008e37 	.word	0x08008e37
 8008c00:	08008dd7 	.word	0x08008dd7
 8008c04:	08008e03 	.word	0x08008e03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	7c12      	ldrb	r2, [r2, #16]
 8008c14:	f107 0108 	add.w	r1, r7, #8
 8008c18:	4610      	mov	r0, r2
 8008c1a:	4798      	blx	r3
 8008c1c:	60f8      	str	r0, [r7, #12]
      break;
 8008c1e:	e112      	b.n	8008e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	7c1b      	ldrb	r3, [r3, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10d      	bne.n	8008c44 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c30:	f107 0208 	add.w	r2, r7, #8
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
 8008c38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	2202      	movs	r2, #2
 8008c40:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c42:	e100      	b.n	8008e46 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4c:	f107 0208 	add.w	r2, r7, #8
 8008c50:	4610      	mov	r0, r2
 8008c52:	4798      	blx	r3
 8008c54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	701a      	strb	r2, [r3, #0]
      break;
 8008c5e:	e0f2      	b.n	8008e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	885b      	ldrh	r3, [r3, #2]
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b05      	cmp	r3, #5
 8008c68:	f200 80ac 	bhi.w	8008dc4 <USBD_GetDescriptor+0x204>
 8008c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c74 <USBD_GetDescriptor+0xb4>)
 8008c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c72:	bf00      	nop
 8008c74:	08008c8d 	.word	0x08008c8d
 8008c78:	08008cc1 	.word	0x08008cc1
 8008c7c:	08008cf5 	.word	0x08008cf5
 8008c80:	08008d29 	.word	0x08008d29
 8008c84:	08008d5d 	.word	0x08008d5d
 8008c88:	08008d91 	.word	0x08008d91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00b      	beq.n	8008cb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	7c12      	ldrb	r2, [r2, #16]
 8008ca4:	f107 0108 	add.w	r1, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cae:	e091      	b.n	8008dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 facb 	bl	800924e <USBD_CtlError>
            err++;
 8008cb8:	7afb      	ldrb	r3, [r7, #11]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cbe:	e089      	b.n	8008dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00b      	beq.n	8008ce4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	7c12      	ldrb	r2, [r2, #16]
 8008cd8:	f107 0108 	add.w	r1, r7, #8
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4798      	blx	r3
 8008ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ce2:	e077      	b.n	8008dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fab1 	bl	800924e <USBD_CtlError>
            err++;
 8008cec:	7afb      	ldrb	r3, [r7, #11]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cf2:	e06f      	b.n	8008dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00b      	beq.n	8008d18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	7c12      	ldrb	r2, [r2, #16]
 8008d0c:	f107 0108 	add.w	r1, r7, #8
 8008d10:	4610      	mov	r0, r2
 8008d12:	4798      	blx	r3
 8008d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d16:	e05d      	b.n	8008dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fa97 	bl	800924e <USBD_CtlError>
            err++;
 8008d20:	7afb      	ldrb	r3, [r7, #11]
 8008d22:	3301      	adds	r3, #1
 8008d24:	72fb      	strb	r3, [r7, #11]
          break;
 8008d26:	e055      	b.n	8008dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00b      	beq.n	8008d4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	7c12      	ldrb	r2, [r2, #16]
 8008d40:	f107 0108 	add.w	r1, r7, #8
 8008d44:	4610      	mov	r0, r2
 8008d46:	4798      	blx	r3
 8008d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d4a:	e043      	b.n	8008dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa7d 	bl	800924e <USBD_CtlError>
            err++;
 8008d54:	7afb      	ldrb	r3, [r7, #11]
 8008d56:	3301      	adds	r3, #1
 8008d58:	72fb      	strb	r3, [r7, #11]
          break;
 8008d5a:	e03b      	b.n	8008dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00b      	beq.n	8008d80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	7c12      	ldrb	r2, [r2, #16]
 8008d74:	f107 0108 	add.w	r1, r7, #8
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d7e:	e029      	b.n	8008dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fa63 	bl	800924e <USBD_CtlError>
            err++;
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d8e:	e021      	b.n	8008dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d96:	699b      	ldr	r3, [r3, #24]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00b      	beq.n	8008db4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	7c12      	ldrb	r2, [r2, #16]
 8008da8:	f107 0108 	add.w	r1, r7, #8
 8008dac:	4610      	mov	r0, r2
 8008dae:	4798      	blx	r3
 8008db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008db2:	e00f      	b.n	8008dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa49 	bl	800924e <USBD_CtlError>
            err++;
 8008dbc:	7afb      	ldrb	r3, [r7, #11]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008dc2:	e007      	b.n	8008dd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fa41 	bl	800924e <USBD_CtlError>
          err++;
 8008dcc:	7afb      	ldrb	r3, [r7, #11]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008dd2:	bf00      	nop
      }
      break;
 8008dd4:	e037      	b.n	8008e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7c1b      	ldrb	r3, [r3, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d109      	bne.n	8008df2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008de6:	f107 0208 	add.w	r2, r7, #8
 8008dea:	4610      	mov	r0, r2
 8008dec:	4798      	blx	r3
 8008dee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008df0:	e029      	b.n	8008e46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fa2a 	bl	800924e <USBD_CtlError>
        err++;
 8008dfa:	7afb      	ldrb	r3, [r7, #11]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	72fb      	strb	r3, [r7, #11]
      break;
 8008e00:	e021      	b.n	8008e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	7c1b      	ldrb	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10d      	bne.n	8008e26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e12:	f107 0208 	add.w	r2, r7, #8
 8008e16:	4610      	mov	r0, r2
 8008e18:	4798      	blx	r3
 8008e1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	2207      	movs	r2, #7
 8008e22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e24:	e00f      	b.n	8008e46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fa10 	bl	800924e <USBD_CtlError>
        err++;
 8008e2e:	7afb      	ldrb	r3, [r7, #11]
 8008e30:	3301      	adds	r3, #1
 8008e32:	72fb      	strb	r3, [r7, #11]
      break;
 8008e34:	e007      	b.n	8008e46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fa08 	bl	800924e <USBD_CtlError>
      err++;
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	3301      	adds	r3, #1
 8008e42:	72fb      	strb	r3, [r7, #11]
      break;
 8008e44:	bf00      	nop
  }

  if (err != 0U)
 8008e46:	7afb      	ldrb	r3, [r7, #11]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d11e      	bne.n	8008e8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	88db      	ldrh	r3, [r3, #6]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d016      	beq.n	8008e82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008e54:	893b      	ldrh	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00e      	beq.n	8008e78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	88da      	ldrh	r2, [r3, #6]
 8008e5e:	893b      	ldrh	r3, [r7, #8]
 8008e60:	4293      	cmp	r3, r2
 8008e62:	bf28      	it	cs
 8008e64:	4613      	movcs	r3, r2
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e6a:	893b      	ldrh	r3, [r7, #8]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	68f9      	ldr	r1, [r7, #12]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa69 	bl	8009348 <USBD_CtlSendData>
 8008e76:	e009      	b.n	8008e8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f9e7 	bl	800924e <USBD_CtlError>
 8008e80:	e004      	b.n	8008e8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 faba 	bl	80093fc <USBD_CtlSendStatus>
 8008e88:	e000      	b.n	8008e8c <USBD_GetDescriptor+0x2cc>
    return;
 8008e8a:	bf00      	nop
  }
}
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop

08008e94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	889b      	ldrh	r3, [r3, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d131      	bne.n	8008f0a <USBD_SetAddress+0x76>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	88db      	ldrh	r3, [r3, #6]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d12d      	bne.n	8008f0a <USBD_SetAddress+0x76>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	885b      	ldrh	r3, [r3, #2]
 8008eb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008eb4:	d829      	bhi.n	8008f0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	885b      	ldrh	r3, [r3, #2]
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d104      	bne.n	8008ed8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f9bc 	bl	800924e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed6:	e01d      	b.n	8008f14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	7bfa      	ldrb	r2, [r7, #15]
 8008edc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 ff11 	bl	8009d0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa86 	bl	80093fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d004      	beq.n	8008f00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2202      	movs	r2, #2
 8008efa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efe:	e009      	b.n	8008f14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f08:	e004      	b.n	8008f14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f99e 	bl	800924e <USBD_CtlError>
  }
}
 8008f12:	bf00      	nop
 8008f14:	bf00      	nop
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	885b      	ldrh	r3, [r3, #2]
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	4b4e      	ldr	r3, [pc, #312]	@ (800906c <USBD_SetConfig+0x150>)
 8008f32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f34:	4b4d      	ldr	r3, [pc, #308]	@ (800906c <USBD_SetConfig+0x150>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d905      	bls.n	8008f48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f985 	bl	800924e <USBD_CtlError>
    return USBD_FAIL;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e08c      	b.n	8009062 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d002      	beq.n	8008f5a <USBD_SetConfig+0x3e>
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d029      	beq.n	8008fac <USBD_SetConfig+0x90>
 8008f58:	e075      	b.n	8009046 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f5a:	4b44      	ldr	r3, [pc, #272]	@ (800906c <USBD_SetConfig+0x150>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d020      	beq.n	8008fa4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008f62:	4b42      	ldr	r3, [pc, #264]	@ (800906c <USBD_SetConfig+0x150>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f6c:	4b3f      	ldr	r3, [pc, #252]	@ (800906c <USBD_SetConfig+0x150>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fe ffe3 	bl	8007f3e <USBD_SetClassConfig>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d008      	beq.n	8008f94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f962 	bl	800924e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f92:	e065      	b.n	8009060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fa31 	bl	80093fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008fa2:	e05d      	b.n	8009060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fa29 	bl	80093fc <USBD_CtlSendStatus>
      break;
 8008faa:	e059      	b.n	8009060 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008fac:	4b2f      	ldr	r3, [pc, #188]	@ (800906c <USBD_SetConfig+0x150>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d112      	bne.n	8008fda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800906c <USBD_SetConfig+0x150>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fc6:	4b29      	ldr	r3, [pc, #164]	@ (800906c <USBD_SetConfig+0x150>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7fe ffd2 	bl	8007f76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fa12 	bl	80093fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fd8:	e042      	b.n	8009060 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008fda:	4b24      	ldr	r3, [pc, #144]	@ (800906c <USBD_SetConfig+0x150>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d02a      	beq.n	800903e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7fe ffc0 	bl	8007f76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800906c <USBD_SetConfig+0x150>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009000:	4b1a      	ldr	r3, [pc, #104]	@ (800906c <USBD_SetConfig+0x150>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fe ff99 	bl	8007f3e <USBD_SetClassConfig>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00f      	beq.n	8009036 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f918 	bl	800924e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7fe ffa5 	bl	8007f76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009034:	e014      	b.n	8009060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f9e0 	bl	80093fc <USBD_CtlSendStatus>
      break;
 800903c:	e010      	b.n	8009060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f9dc 	bl	80093fc <USBD_CtlSendStatus>
      break;
 8009044:	e00c      	b.n	8009060 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f900 	bl	800924e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800904e:	4b07      	ldr	r3, [pc, #28]	@ (800906c <USBD_SetConfig+0x150>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7fe ff8e 	bl	8007f76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800905a:	2303      	movs	r3, #3
 800905c:	73fb      	strb	r3, [r7, #15]
      break;
 800905e:	bf00      	nop
  }

  return ret;
 8009060:	7bfb      	ldrb	r3, [r7, #15]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000518 	.word	0x20000518

08009070 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	88db      	ldrh	r3, [r3, #6]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d004      	beq.n	800908c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f8e2 	bl	800924e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800908a:	e023      	b.n	80090d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b02      	cmp	r3, #2
 8009096:	dc02      	bgt.n	800909e <USBD_GetConfig+0x2e>
 8009098:	2b00      	cmp	r3, #0
 800909a:	dc03      	bgt.n	80090a4 <USBD_GetConfig+0x34>
 800909c:	e015      	b.n	80090ca <USBD_GetConfig+0x5a>
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d00b      	beq.n	80090ba <USBD_GetConfig+0x4a>
 80090a2:	e012      	b.n	80090ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3308      	adds	r3, #8
 80090ae:	2201      	movs	r2, #1
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f948 	bl	8009348 <USBD_CtlSendData>
        break;
 80090b8:	e00c      	b.n	80090d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3304      	adds	r3, #4
 80090be:	2201      	movs	r2, #1
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f940 	bl	8009348 <USBD_CtlSendData>
        break;
 80090c8:	e004      	b.n	80090d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f8be 	bl	800924e <USBD_CtlError>
        break;
 80090d2:	bf00      	nop
}
 80090d4:	bf00      	nop
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d81e      	bhi.n	8009132 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	88db      	ldrh	r3, [r3, #6]
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d004      	beq.n	8009106 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f8a5 	bl	800924e <USBD_CtlError>
        break;
 8009104:	e01a      	b.n	800913c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009112:	2b00      	cmp	r3, #0
 8009114:	d005      	beq.n	8009122 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f043 0202 	orr.w	r2, r3, #2
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	330c      	adds	r3, #12
 8009126:	2202      	movs	r2, #2
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f90c 	bl	8009348 <USBD_CtlSendData>
      break;
 8009130:	e004      	b.n	800913c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f88a 	bl	800924e <USBD_CtlError>
      break;
 800913a:	bf00      	nop
  }
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	885b      	ldrh	r3, [r3, #2]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d107      	bne.n	8009166 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f94c 	bl	80093fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009164:	e013      	b.n	800918e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	885b      	ldrh	r3, [r3, #2]
 800916a:	2b02      	cmp	r3, #2
 800916c:	d10b      	bne.n	8009186 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	889b      	ldrh	r3, [r3, #4]
 8009172:	0a1b      	lsrs	r3, r3, #8
 8009174:	b29b      	uxth	r3, r3
 8009176:	b2da      	uxtb	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f93c 	bl	80093fc <USBD_CtlSendStatus>
}
 8009184:	e003      	b.n	800918e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f860 	bl	800924e <USBD_CtlError>
}
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	3b01      	subs	r3, #1
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d80b      	bhi.n	80091c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	885b      	ldrh	r3, [r3, #2]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d10c      	bne.n	80091d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f91c 	bl	80093fc <USBD_CtlSendStatus>
      }
      break;
 80091c4:	e004      	b.n	80091d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f840 	bl	800924e <USBD_CtlError>
      break;
 80091ce:	e000      	b.n	80091d2 <USBD_ClrFeature+0x3c>
      break;
 80091d0:	bf00      	nop
  }
}
 80091d2:	bf00      	nop
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	781a      	ldrb	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3301      	adds	r3, #1
 80091f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	781a      	ldrb	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3301      	adds	r3, #1
 8009202:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f7ff fa40 	bl	800868a <SWAPBYTE>
 800920a:	4603      	mov	r3, r0
 800920c:	461a      	mov	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3301      	adds	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7ff fa33 	bl	800868a <SWAPBYTE>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3301      	adds	r3, #1
 8009236:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f7ff fa26 	bl	800868a <SWAPBYTE>
 800923e:	4603      	mov	r3, r0
 8009240:	461a      	mov	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	80da      	strh	r2, [r3, #6]
}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009258:	2180      	movs	r1, #128	@ 0x80
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fcec 	bl	8009c38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009260:	2100      	movs	r1, #0
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fce8 	bl	8009c38 <USBD_LL_StallEP>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d042      	beq.n	800930c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800928a:	6938      	ldr	r0, [r7, #16]
 800928c:	f000 f842 	bl	8009314 <USBD_GetLen>
 8009290:	4603      	mov	r3, r0
 8009292:	3301      	adds	r3, #1
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800929a:	d808      	bhi.n	80092ae <USBD_GetString+0x3e>
 800929c:	6938      	ldr	r0, [r7, #16]
 800929e:	f000 f839 	bl	8009314 <USBD_GetLen>
 80092a2:	4603      	mov	r3, r0
 80092a4:	3301      	adds	r3, #1
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	e001      	b.n	80092b2 <USBD_GetString+0x42>
 80092ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	4413      	add	r3, r2
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	7812      	ldrb	r2, [r2, #0]
 80092c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	3301      	adds	r3, #1
 80092c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	4413      	add	r3, r2
 80092ce:	2203      	movs	r2, #3
 80092d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	3301      	adds	r3, #1
 80092d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80092d8:	e013      	b.n	8009302 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	4413      	add	r3, r2
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	7812      	ldrb	r2, [r2, #0]
 80092e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	3301      	adds	r3, #1
 80092ea:	613b      	str	r3, [r7, #16]
    idx++;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	3301      	adds	r3, #1
 80092f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	4413      	add	r3, r2
 80092f8:	2200      	movs	r2, #0
 80092fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
 80092fe:	3301      	adds	r3, #1
 8009300:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e7      	bne.n	80092da <USBD_GetString+0x6a>
 800930a:	e000      	b.n	800930e <USBD_GetString+0x9e>
    return;
 800930c:	bf00      	nop
  }
}
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009324:	e005      	b.n	8009332 <USBD_GetLen+0x1e>
  {
    len++;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	3301      	adds	r3, #1
 800932a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	3301      	adds	r3, #1
 8009330:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1f5      	bne.n	8009326 <USBD_GetLen+0x12>
  }

  return len;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2202      	movs	r2, #2
 8009358:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	2100      	movs	r1, #0
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fceb 	bl	8009d4a <USBD_LL_Transmit>

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	2100      	movs	r1, #0
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 fcda 	bl	8009d4a <USBD_LL_Transmit>

  return USBD_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2203      	movs	r2, #3
 80093b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	2100      	movs	r1, #0
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 fcde 	bl	8009d8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	60f8      	str	r0, [r7, #12]
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	2100      	movs	r1, #0
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 fccd 	bl	8009d8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2204      	movs	r2, #4
 8009408:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800940c:	2300      	movs	r3, #0
 800940e:	2200      	movs	r2, #0
 8009410:	2100      	movs	r1, #0
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fc99 	bl	8009d4a <USBD_LL_Transmit>

  return USBD_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2205      	movs	r2, #5
 800942e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009432:	2300      	movs	r3, #0
 8009434:	2200      	movs	r2, #0
 8009436:	2100      	movs	r1, #0
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fca7 	bl	8009d8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800944c:	2200      	movs	r2, #0
 800944e:	4912      	ldr	r1, [pc, #72]	@ (8009498 <MX_USB_DEVICE_Init+0x50>)
 8009450:	4812      	ldr	r0, [pc, #72]	@ (800949c <MX_USB_DEVICE_Init+0x54>)
 8009452:	f7fe fcf7 	bl	8007e44 <USBD_Init>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800945c:	f7f8 fce2 	bl	8001e24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009460:	490f      	ldr	r1, [pc, #60]	@ (80094a0 <MX_USB_DEVICE_Init+0x58>)
 8009462:	480e      	ldr	r0, [pc, #56]	@ (800949c <MX_USB_DEVICE_Init+0x54>)
 8009464:	f7fe fd1e 	bl	8007ea4 <USBD_RegisterClass>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800946e:	f7f8 fcd9 	bl	8001e24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009472:	490c      	ldr	r1, [pc, #48]	@ (80094a4 <MX_USB_DEVICE_Init+0x5c>)
 8009474:	4809      	ldr	r0, [pc, #36]	@ (800949c <MX_USB_DEVICE_Init+0x54>)
 8009476:	f7fe fc15 	bl	8007ca4 <USBD_CDC_RegisterInterface>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009480:	f7f8 fcd0 	bl	8001e24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009484:	4805      	ldr	r0, [pc, #20]	@ (800949c <MX_USB_DEVICE_Init+0x54>)
 8009486:	f7fe fd43 	bl	8007f10 <USBD_Start>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009490:	f7f8 fcc8 	bl	8001e24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009494:	bf00      	nop
 8009496:	bd80      	pop	{r7, pc}
 8009498:	200000ac 	.word	0x200000ac
 800949c:	2000051c 	.word	0x2000051c
 80094a0:	20000018 	.word	0x20000018
 80094a4:	20000098 	.word	0x20000098

080094a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094ac:	2200      	movs	r2, #0
 80094ae:	4905      	ldr	r1, [pc, #20]	@ (80094c4 <CDC_Init_FS+0x1c>)
 80094b0:	4805      	ldr	r0, [pc, #20]	@ (80094c8 <CDC_Init_FS+0x20>)
 80094b2:	f7fe fc11 	bl	8007cd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094b6:	4905      	ldr	r1, [pc, #20]	@ (80094cc <CDC_Init_FS+0x24>)
 80094b8:	4803      	ldr	r0, [pc, #12]	@ (80094c8 <CDC_Init_FS+0x20>)
 80094ba:	f7fe fc2f 	bl	8007d1c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80094be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20000ff8 	.word	0x20000ff8
 80094c8:	2000051c 	.word	0x2000051c
 80094cc:	200007f8 	.word	0x200007f8

080094d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80094d0:	b480      	push	{r7}
 80094d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80094d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	71fb      	strb	r3, [r7, #7]
 80094ec:	4613      	mov	r3, r2
 80094ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	2b23      	cmp	r3, #35	@ 0x23
 80094f4:	d84a      	bhi.n	800958c <CDC_Control_FS+0xac>
 80094f6:	a201      	add	r2, pc, #4	@ (adr r2, 80094fc <CDC_Control_FS+0x1c>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	0800958d 	.word	0x0800958d
 8009500:	0800958d 	.word	0x0800958d
 8009504:	0800958d 	.word	0x0800958d
 8009508:	0800958d 	.word	0x0800958d
 800950c:	0800958d 	.word	0x0800958d
 8009510:	0800958d 	.word	0x0800958d
 8009514:	0800958d 	.word	0x0800958d
 8009518:	0800958d 	.word	0x0800958d
 800951c:	0800958d 	.word	0x0800958d
 8009520:	0800958d 	.word	0x0800958d
 8009524:	0800958d 	.word	0x0800958d
 8009528:	0800958d 	.word	0x0800958d
 800952c:	0800958d 	.word	0x0800958d
 8009530:	0800958d 	.word	0x0800958d
 8009534:	0800958d 	.word	0x0800958d
 8009538:	0800958d 	.word	0x0800958d
 800953c:	0800958d 	.word	0x0800958d
 8009540:	0800958d 	.word	0x0800958d
 8009544:	0800958d 	.word	0x0800958d
 8009548:	0800958d 	.word	0x0800958d
 800954c:	0800958d 	.word	0x0800958d
 8009550:	0800958d 	.word	0x0800958d
 8009554:	0800958d 	.word	0x0800958d
 8009558:	0800958d 	.word	0x0800958d
 800955c:	0800958d 	.word	0x0800958d
 8009560:	0800958d 	.word	0x0800958d
 8009564:	0800958d 	.word	0x0800958d
 8009568:	0800958d 	.word	0x0800958d
 800956c:	0800958d 	.word	0x0800958d
 8009570:	0800958d 	.word	0x0800958d
 8009574:	0800958d 	.word	0x0800958d
 8009578:	0800958d 	.word	0x0800958d
 800957c:	0800958d 	.word	0x0800958d
 8009580:	0800958d 	.word	0x0800958d
 8009584:	0800958d 	.word	0x0800958d
 8009588:	0800958d 	.word	0x0800958d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800958c:	bf00      	nop
  }

  return (USBD_OK);
 800958e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009590:	4618      	mov	r0, r3
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4805      	ldr	r0, [pc, #20]	@ (80095c0 <CDC_Receive_FS+0x24>)
 80095aa:	f7fe fbb7 	bl	8007d1c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80095ae:	4804      	ldr	r0, [pc, #16]	@ (80095c0 <CDC_Receive_FS+0x24>)
 80095b0:	f7fe fc12 	bl	8007dd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80095b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	2000051c 	.word	0x2000051c

080095c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80095d4:	4b0d      	ldr	r3, [pc, #52]	@ (800960c <CDC_Transmit_FS+0x48>)
 80095d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e00b      	b.n	8009602 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80095ea:	887b      	ldrh	r3, [r7, #2]
 80095ec:	461a      	mov	r2, r3
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	4806      	ldr	r0, [pc, #24]	@ (800960c <CDC_Transmit_FS+0x48>)
 80095f2:	f7fe fb71 	bl	8007cd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80095f6:	4805      	ldr	r0, [pc, #20]	@ (800960c <CDC_Transmit_FS+0x48>)
 80095f8:	f7fe fbae 	bl	8007d58 <USBD_CDC_TransmitPacket>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	2000051c 	.word	0x2000051c

08009610 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	4613      	mov	r3, r2
 800961c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009626:	4618      	mov	r0, r3
 8009628:	371c      	adds	r7, #28
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
	...

08009634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	6039      	str	r1, [r7, #0]
 800963e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2212      	movs	r2, #18
 8009644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009646:	4b03      	ldr	r3, [pc, #12]	@ (8009654 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	200000c8 	.word	0x200000c8

08009658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	6039      	str	r1, [r7, #0]
 8009662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	2204      	movs	r2, #4
 8009668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800966a:	4b03      	ldr	r3, [pc, #12]	@ (8009678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800966c:	4618      	mov	r0, r3
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	200000dc 	.word	0x200000dc

0800967c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	6039      	str	r1, [r7, #0]
 8009686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d105      	bne.n	800969a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4907      	ldr	r1, [pc, #28]	@ (80096b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009692:	4808      	ldr	r0, [pc, #32]	@ (80096b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009694:	f7ff fdec 	bl	8009270 <USBD_GetString>
 8009698:	e004      	b.n	80096a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	4904      	ldr	r1, [pc, #16]	@ (80096b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800969e:	4805      	ldr	r0, [pc, #20]	@ (80096b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80096a0:	f7ff fde6 	bl	8009270 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096a4:	4b02      	ldr	r3, [pc, #8]	@ (80096b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	200017f8 	.word	0x200017f8
 80096b4:	0800ce78 	.word	0x0800ce78

080096b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	6039      	str	r1, [r7, #0]
 80096c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	4904      	ldr	r1, [pc, #16]	@ (80096d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80096c8:	4804      	ldr	r0, [pc, #16]	@ (80096dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80096ca:	f7ff fdd1 	bl	8009270 <USBD_GetString>
  return USBD_StrDesc;
 80096ce:	4b02      	ldr	r3, [pc, #8]	@ (80096d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	200017f8 	.word	0x200017f8
 80096dc:	0800ce90 	.word	0x0800ce90

080096e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	6039      	str	r1, [r7, #0]
 80096ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	221a      	movs	r2, #26
 80096f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096f2:	f000 f843 	bl	800977c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80096f6:	4b02      	ldr	r3, [pc, #8]	@ (8009700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	200000e0 	.word	0x200000e0

08009704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	6039      	str	r1, [r7, #0]
 800970e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d105      	bne.n	8009722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	4907      	ldr	r1, [pc, #28]	@ (8009738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800971a:	4808      	ldr	r0, [pc, #32]	@ (800973c <USBD_FS_ConfigStrDescriptor+0x38>)
 800971c:	f7ff fda8 	bl	8009270 <USBD_GetString>
 8009720:	e004      	b.n	800972c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	4904      	ldr	r1, [pc, #16]	@ (8009738 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009726:	4805      	ldr	r0, [pc, #20]	@ (800973c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009728:	f7ff fda2 	bl	8009270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800972c:	4b02      	ldr	r3, [pc, #8]	@ (8009738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	200017f8 	.word	0x200017f8
 800973c:	0800cea4 	.word	0x0800cea4

08009740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	6039      	str	r1, [r7, #0]
 800974a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800974c:	79fb      	ldrb	r3, [r7, #7]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d105      	bne.n	800975e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	4907      	ldr	r1, [pc, #28]	@ (8009774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009756:	4808      	ldr	r0, [pc, #32]	@ (8009778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009758:	f7ff fd8a 	bl	8009270 <USBD_GetString>
 800975c:	e004      	b.n	8009768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	4904      	ldr	r1, [pc, #16]	@ (8009774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009762:	4805      	ldr	r0, [pc, #20]	@ (8009778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009764:	f7ff fd84 	bl	8009270 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009768:	4b02      	ldr	r3, [pc, #8]	@ (8009774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	200017f8 	.word	0x200017f8
 8009778:	0800ceb0 	.word	0x0800ceb0

0800977c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009782:	4b0f      	ldr	r3, [pc, #60]	@ (80097c0 <Get_SerialNum+0x44>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009788:	4b0e      	ldr	r3, [pc, #56]	@ (80097c4 <Get_SerialNum+0x48>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800978e:	4b0e      	ldr	r3, [pc, #56]	@ (80097c8 <Get_SerialNum+0x4c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4413      	add	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80097a2:	2208      	movs	r2, #8
 80097a4:	4909      	ldr	r1, [pc, #36]	@ (80097cc <Get_SerialNum+0x50>)
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 f814 	bl	80097d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80097ac:	2204      	movs	r2, #4
 80097ae:	4908      	ldr	r1, [pc, #32]	@ (80097d0 <Get_SerialNum+0x54>)
 80097b0:	68b8      	ldr	r0, [r7, #8]
 80097b2:	f000 f80f 	bl	80097d4 <IntToUnicode>
  }
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	1fff7a10 	.word	0x1fff7a10
 80097c4:	1fff7a14 	.word	0x1fff7a14
 80097c8:	1fff7a18 	.word	0x1fff7a18
 80097cc:	200000e2 	.word	0x200000e2
 80097d0:	200000f2 	.word	0x200000f2

080097d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b087      	sub	sp, #28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	4613      	mov	r3, r2
 80097e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097e6:	2300      	movs	r3, #0
 80097e8:	75fb      	strb	r3, [r7, #23]
 80097ea:	e027      	b.n	800983c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	0f1b      	lsrs	r3, r3, #28
 80097f0:	2b09      	cmp	r3, #9
 80097f2:	d80b      	bhi.n	800980c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	0f1b      	lsrs	r3, r3, #28
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	4619      	mov	r1, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	440b      	add	r3, r1
 8009804:	3230      	adds	r2, #48	@ 0x30
 8009806:	b2d2      	uxtb	r2, r2
 8009808:	701a      	strb	r2, [r3, #0]
 800980a:	e00a      	b.n	8009822 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	0f1b      	lsrs	r3, r3, #28
 8009810:	b2da      	uxtb	r2, r3
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	4619      	mov	r1, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	440b      	add	r3, r1
 800981c:	3237      	adds	r2, #55	@ 0x37
 800981e:	b2d2      	uxtb	r2, r2
 8009820:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	3301      	adds	r3, #1
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	4413      	add	r3, r2
 8009832:	2200      	movs	r2, #0
 8009834:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	3301      	adds	r3, #1
 800983a:	75fb      	strb	r3, [r7, #23]
 800983c:	7dfa      	ldrb	r2, [r7, #23]
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	429a      	cmp	r2, r3
 8009842:	d3d3      	bcc.n	80097ec <IntToUnicode+0x18>
  }
}
 8009844:	bf00      	nop
 8009846:	bf00      	nop
 8009848:	371c      	adds	r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
	...

08009854 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08a      	sub	sp, #40	@ 0x28
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800985c:	f107 0314 	add.w	r3, r7, #20
 8009860:	2200      	movs	r2, #0
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	605a      	str	r2, [r3, #4]
 8009866:	609a      	str	r2, [r3, #8]
 8009868:	60da      	str	r2, [r3, #12]
 800986a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009874:	d13a      	bne.n	80098ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009876:	2300      	movs	r3, #0
 8009878:	613b      	str	r3, [r7, #16]
 800987a:	4b1e      	ldr	r3, [pc, #120]	@ (80098f4 <HAL_PCD_MspInit+0xa0>)
 800987c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987e:	4a1d      	ldr	r2, [pc, #116]	@ (80098f4 <HAL_PCD_MspInit+0xa0>)
 8009880:	f043 0301 	orr.w	r3, r3, #1
 8009884:	6313      	str	r3, [r2, #48]	@ 0x30
 8009886:	4b1b      	ldr	r3, [pc, #108]	@ (80098f4 <HAL_PCD_MspInit+0xa0>)
 8009888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	613b      	str	r3, [r7, #16]
 8009890:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009892:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009898:	2302      	movs	r3, #2
 800989a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800989c:	2300      	movs	r3, #0
 800989e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098a0:	2303      	movs	r3, #3
 80098a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098a4:	230a      	movs	r3, #10
 80098a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098a8:	f107 0314 	add.w	r3, r7, #20
 80098ac:	4619      	mov	r1, r3
 80098ae:	4812      	ldr	r0, [pc, #72]	@ (80098f8 <HAL_PCD_MspInit+0xa4>)
 80098b0:	f7f9 fa3e 	bl	8002d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80098b4:	4b0f      	ldr	r3, [pc, #60]	@ (80098f4 <HAL_PCD_MspInit+0xa0>)
 80098b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b8:	4a0e      	ldr	r2, [pc, #56]	@ (80098f4 <HAL_PCD_MspInit+0xa0>)
 80098ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098be:	6353      	str	r3, [r2, #52]	@ 0x34
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	4b0b      	ldr	r3, [pc, #44]	@ (80098f4 <HAL_PCD_MspInit+0xa0>)
 80098c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098c8:	4a0a      	ldr	r2, [pc, #40]	@ (80098f4 <HAL_PCD_MspInit+0xa0>)
 80098ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80098ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80098d0:	4b08      	ldr	r3, [pc, #32]	@ (80098f4 <HAL_PCD_MspInit+0xa0>)
 80098d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80098dc:	2200      	movs	r2, #0
 80098de:	2100      	movs	r1, #0
 80098e0:	2043      	movs	r0, #67	@ 0x43
 80098e2:	f7f8 fe5c 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098e6:	2043      	movs	r0, #67	@ 0x43
 80098e8:	f7f8 fe75 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098ec:	bf00      	nop
 80098ee:	3728      	adds	r7, #40	@ 0x28
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	40023800 	.word	0x40023800
 80098f8:	40020000 	.word	0x40020000

080098fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009910:	4619      	mov	r1, r3
 8009912:	4610      	mov	r0, r2
 8009914:	f7fe fb49 	bl	8007faa <USBD_LL_SetupStage>
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009932:	78fa      	ldrb	r2, [r7, #3]
 8009934:	6879      	ldr	r1, [r7, #4]
 8009936:	4613      	mov	r3, r2
 8009938:	00db      	lsls	r3, r3, #3
 800993a:	4413      	add	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	440b      	add	r3, r1
 8009940:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	78fb      	ldrb	r3, [r7, #3]
 8009948:	4619      	mov	r1, r3
 800994a:	f7fe fb83 	bl	8008054 <USBD_LL_DataOutStage>
}
 800994e:	bf00      	nop
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	4613      	mov	r3, r2
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	3320      	adds	r3, #32
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	78fb      	ldrb	r3, [r7, #3]
 800997c:	4619      	mov	r1, r3
 800997e:	f7fe fc1c 	bl	80081ba <USBD_LL_DataInStage>
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe fd56 	bl	800844a <USBD_LL_SOF>
}
 800999e:	bf00      	nop
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099ae:	2301      	movs	r3, #1
 80099b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	79db      	ldrb	r3, [r3, #7]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d102      	bne.n	80099c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]
 80099be:	e008      	b.n	80099d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	79db      	ldrb	r3, [r3, #7]
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d102      	bne.n	80099ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80099c8:	2301      	movs	r3, #1
 80099ca:	73fb      	strb	r3, [r7, #15]
 80099cc:	e001      	b.n	80099d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80099ce:	f7f8 fa29 	bl	8001e24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099d8:	7bfa      	ldrb	r2, [r7, #15]
 80099da:	4611      	mov	r1, r2
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fe fcf0 	bl	80083c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fe fc98 	bl	800831e <USBD_LL_Reset>
}
 80099ee:	bf00      	nop
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fceb 	bl	80083e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	6812      	ldr	r2, [r2, #0]
 8009a1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009a1e:	f043 0301 	orr.w	r3, r3, #1
 8009a22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	7adb      	ldrb	r3, [r3, #11]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a2c:	4b04      	ldr	r3, [pc, #16]	@ (8009a40 <HAL_PCD_SuspendCallback+0x48>)
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	4a03      	ldr	r2, [pc, #12]	@ (8009a40 <HAL_PCD_SuspendCallback+0x48>)
 8009a32:	f043 0306 	orr.w	r3, r3, #6
 8009a36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	e000ed00 	.word	0xe000ed00

08009a44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fe fce1 	bl	800841a <USBD_LL_Resume>
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a72:	78fa      	ldrb	r2, [r7, #3]
 8009a74:	4611      	mov	r1, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fd39 	bl	80084ee <USBD_LL_IsoOUTIncomplete>
}
 8009a7c:	bf00      	nop
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a96:	78fa      	ldrb	r2, [r7, #3]
 8009a98:	4611      	mov	r1, r2
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fcf5 	bl	800848a <USBD_LL_IsoINIncomplete>
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe fd4b 	bl	8008552 <USBD_LL_DevConnected>
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fe fd48 	bl	8008568 <USBD_LL_DevDisconnected>
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d13c      	bne.n	8009b6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009af0:	4a20      	ldr	r2, [pc, #128]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a1e      	ldr	r2, [pc, #120]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009afc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b00:	4b1c      	ldr	r3, [pc, #112]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009b06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b08:	4b1a      	ldr	r3, [pc, #104]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b0a:	2204      	movs	r2, #4
 8009b0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b0e:	4b19      	ldr	r3, [pc, #100]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b10:	2202      	movs	r2, #2
 8009b12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b14:	4b17      	ldr	r3, [pc, #92]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b1a:	4b16      	ldr	r3, [pc, #88]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b20:	4b14      	ldr	r3, [pc, #80]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b26:	4b13      	ldr	r3, [pc, #76]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b2c:	4b11      	ldr	r3, [pc, #68]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b32:	4b10      	ldr	r3, [pc, #64]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b38:	4b0e      	ldr	r3, [pc, #56]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b3e:	480d      	ldr	r0, [pc, #52]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b40:	f7f9 fade 	bl	8003100 <HAL_PCD_Init>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b4a:	f7f8 f96b 	bl	8001e24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b4e:	2180      	movs	r1, #128	@ 0x80
 8009b50:	4808      	ldr	r0, [pc, #32]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b52:	f7fa fd0a 	bl	800456a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b56:	2240      	movs	r2, #64	@ 0x40
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4806      	ldr	r0, [pc, #24]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b5c:	f7fa fcbe 	bl	80044dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b60:	2280      	movs	r2, #128	@ 0x80
 8009b62:	2101      	movs	r1, #1
 8009b64:	4803      	ldr	r0, [pc, #12]	@ (8009b74 <USBD_LL_Init+0x94>)
 8009b66:	f7fa fcb9 	bl	80044dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	200019f8 	.word	0x200019f8

08009b78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7f9 fbc5 	bl	800331e <HAL_PCD_Start>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 f942 	bl	8009e24 <USBD_Get_USB_Status>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	4608      	mov	r0, r1
 8009bb8:	4611      	mov	r1, r2
 8009bba:	461a      	mov	r2, r3
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	70fb      	strb	r3, [r7, #3]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	70bb      	strb	r3, [r7, #2]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009bd6:	78bb      	ldrb	r3, [r7, #2]
 8009bd8:	883a      	ldrh	r2, [r7, #0]
 8009bda:	78f9      	ldrb	r1, [r7, #3]
 8009bdc:	f7fa f899 	bl	8003d12 <HAL_PCD_EP_Open>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f91c 	bl	8009e24 <USBD_Get_USB_Status>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c14:	78fa      	ldrb	r2, [r7, #3]
 8009c16:	4611      	mov	r1, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fa f8e4 	bl	8003de6 <HAL_PCD_EP_Close>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 f8fd 	bl	8009e24 <USBD_Get_USB_Status>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c52:	78fa      	ldrb	r2, [r7, #3]
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fa f99c 	bl	8003f94 <HAL_PCD_EP_SetStall>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f8de 	bl	8009e24 <USBD_Get_USB_Status>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c90:	78fa      	ldrb	r2, [r7, #3]
 8009c92:	4611      	mov	r1, r2
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fa f9e0 	bl	800405a <HAL_PCD_EP_ClrStall>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 f8bf 	bl	8009e24 <USBD_Get_USB_Status>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009cc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	da0b      	bge.n	8009ce8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cd6:	68f9      	ldr	r1, [r7, #12]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	440b      	add	r3, r1
 8009ce2:	3316      	adds	r3, #22
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	e00b      	b.n	8009d00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ce8:	78fb      	ldrb	r3, [r7, #3]
 8009cea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cee:	68f9      	ldr	r1, [r7, #12]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	00db      	lsls	r3, r3, #3
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	440b      	add	r3, r1
 8009cfa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009cfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d26:	78fa      	ldrb	r2, [r7, #3]
 8009d28:	4611      	mov	r1, r2
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7f9 ffcd 	bl	8003cca <HAL_PCD_SetAddress>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f874 	bl	8009e24 <USBD_Get_USB_Status>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b086      	sub	sp, #24
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
 8009d56:	460b      	mov	r3, r1
 8009d58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009d68:	7af9      	ldrb	r1, [r7, #11]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	f7fa f8d7 	bl	8003f20 <HAL_PCD_EP_Transmit>
 8009d72:	4603      	mov	r3, r0
 8009d74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d76:	7dfb      	ldrb	r3, [r7, #23]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 f853 	bl	8009e24 <USBD_Get_USB_Status>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d82:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	603b      	str	r3, [r7, #0]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009daa:	7af9      	ldrb	r1, [r7, #11]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	f7fa f863 	bl	8003e7a <HAL_PCD_EP_Receive>
 8009db4:	4603      	mov	r3, r0
 8009db6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 f832 	bl	8009e24 <USBD_Get_USB_Status>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dc4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009de0:	78fa      	ldrb	r2, [r7, #3]
 8009de2:	4611      	mov	r1, r2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fa f883 	bl	8003ef0 <HAL_PCD_EP_GetRxCount>
 8009dea:	4603      	mov	r3, r0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009dfc:	4b03      	ldr	r3, [pc, #12]	@ (8009e0c <USBD_static_malloc+0x18>)
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20001edc 	.word	0x20001edc

08009e10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]

}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e32:	79fb      	ldrb	r3, [r7, #7]
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	d817      	bhi.n	8009e68 <USBD_Get_USB_Status+0x44>
 8009e38:	a201      	add	r2, pc, #4	@ (adr r2, 8009e40 <USBD_Get_USB_Status+0x1c>)
 8009e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3e:	bf00      	nop
 8009e40:	08009e51 	.word	0x08009e51
 8009e44:	08009e57 	.word	0x08009e57
 8009e48:	08009e5d 	.word	0x08009e5d
 8009e4c:	08009e63 	.word	0x08009e63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73fb      	strb	r3, [r7, #15]
    break;
 8009e54:	e00b      	b.n	8009e6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e56:	2303      	movs	r3, #3
 8009e58:	73fb      	strb	r3, [r7, #15]
    break;
 8009e5a:	e008      	b.n	8009e6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e60:	e005      	b.n	8009e6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e62:	2303      	movs	r3, #3
 8009e64:	73fb      	strb	r3, [r7, #15]
    break;
 8009e66:	e002      	b.n	8009e6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e6c:	bf00      	nop
  }
  return usb_status;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <__cvt>:
 8009e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	ec57 6b10 	vmov	r6, r7, d0
 8009e84:	2f00      	cmp	r7, #0
 8009e86:	460c      	mov	r4, r1
 8009e88:	4619      	mov	r1, r3
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	bfbb      	ittet	lt
 8009e8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009e92:	461f      	movlt	r7, r3
 8009e94:	2300      	movge	r3, #0
 8009e96:	232d      	movlt	r3, #45	@ 0x2d
 8009e98:	700b      	strb	r3, [r1, #0]
 8009e9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009ea0:	4691      	mov	r9, r2
 8009ea2:	f023 0820 	bic.w	r8, r3, #32
 8009ea6:	bfbc      	itt	lt
 8009ea8:	4632      	movlt	r2, r6
 8009eaa:	4616      	movlt	r6, r2
 8009eac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009eb0:	d005      	beq.n	8009ebe <__cvt+0x42>
 8009eb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009eb6:	d100      	bne.n	8009eba <__cvt+0x3e>
 8009eb8:	3401      	adds	r4, #1
 8009eba:	2102      	movs	r1, #2
 8009ebc:	e000      	b.n	8009ec0 <__cvt+0x44>
 8009ebe:	2103      	movs	r1, #3
 8009ec0:	ab03      	add	r3, sp, #12
 8009ec2:	9301      	str	r3, [sp, #4]
 8009ec4:	ab02      	add	r3, sp, #8
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	ec47 6b10 	vmov	d0, r6, r7
 8009ecc:	4653      	mov	r3, sl
 8009ece:	4622      	mov	r2, r4
 8009ed0:	f000 fe5a 	bl	800ab88 <_dtoa_r>
 8009ed4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ed8:	4605      	mov	r5, r0
 8009eda:	d119      	bne.n	8009f10 <__cvt+0x94>
 8009edc:	f019 0f01 	tst.w	r9, #1
 8009ee0:	d00e      	beq.n	8009f00 <__cvt+0x84>
 8009ee2:	eb00 0904 	add.w	r9, r0, r4
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4630      	mov	r0, r6
 8009eec:	4639      	mov	r1, r7
 8009eee:	f7f6 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef2:	b108      	cbz	r0, 8009ef8 <__cvt+0x7c>
 8009ef4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ef8:	2230      	movs	r2, #48	@ 0x30
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	454b      	cmp	r3, r9
 8009efe:	d31e      	bcc.n	8009f3e <__cvt+0xc2>
 8009f00:	9b03      	ldr	r3, [sp, #12]
 8009f02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f04:	1b5b      	subs	r3, r3, r5
 8009f06:	4628      	mov	r0, r5
 8009f08:	6013      	str	r3, [r2, #0]
 8009f0a:	b004      	add	sp, #16
 8009f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f14:	eb00 0904 	add.w	r9, r0, r4
 8009f18:	d1e5      	bne.n	8009ee6 <__cvt+0x6a>
 8009f1a:	7803      	ldrb	r3, [r0, #0]
 8009f1c:	2b30      	cmp	r3, #48	@ 0x30
 8009f1e:	d10a      	bne.n	8009f36 <__cvt+0xba>
 8009f20:	2200      	movs	r2, #0
 8009f22:	2300      	movs	r3, #0
 8009f24:	4630      	mov	r0, r6
 8009f26:	4639      	mov	r1, r7
 8009f28:	f7f6 fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f2c:	b918      	cbnz	r0, 8009f36 <__cvt+0xba>
 8009f2e:	f1c4 0401 	rsb	r4, r4, #1
 8009f32:	f8ca 4000 	str.w	r4, [sl]
 8009f36:	f8da 3000 	ldr.w	r3, [sl]
 8009f3a:	4499      	add	r9, r3
 8009f3c:	e7d3      	b.n	8009ee6 <__cvt+0x6a>
 8009f3e:	1c59      	adds	r1, r3, #1
 8009f40:	9103      	str	r1, [sp, #12]
 8009f42:	701a      	strb	r2, [r3, #0]
 8009f44:	e7d9      	b.n	8009efa <__cvt+0x7e>

08009f46 <__exponent>:
 8009f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f48:	2900      	cmp	r1, #0
 8009f4a:	bfba      	itte	lt
 8009f4c:	4249      	neglt	r1, r1
 8009f4e:	232d      	movlt	r3, #45	@ 0x2d
 8009f50:	232b      	movge	r3, #43	@ 0x2b
 8009f52:	2909      	cmp	r1, #9
 8009f54:	7002      	strb	r2, [r0, #0]
 8009f56:	7043      	strb	r3, [r0, #1]
 8009f58:	dd29      	ble.n	8009fae <__exponent+0x68>
 8009f5a:	f10d 0307 	add.w	r3, sp, #7
 8009f5e:	461d      	mov	r5, r3
 8009f60:	270a      	movs	r7, #10
 8009f62:	461a      	mov	r2, r3
 8009f64:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f68:	fb07 1416 	mls	r4, r7, r6, r1
 8009f6c:	3430      	adds	r4, #48	@ 0x30
 8009f6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f72:	460c      	mov	r4, r1
 8009f74:	2c63      	cmp	r4, #99	@ 0x63
 8009f76:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	dcf1      	bgt.n	8009f62 <__exponent+0x1c>
 8009f7e:	3130      	adds	r1, #48	@ 0x30
 8009f80:	1e94      	subs	r4, r2, #2
 8009f82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f86:	1c41      	adds	r1, r0, #1
 8009f88:	4623      	mov	r3, r4
 8009f8a:	42ab      	cmp	r3, r5
 8009f8c:	d30a      	bcc.n	8009fa4 <__exponent+0x5e>
 8009f8e:	f10d 0309 	add.w	r3, sp, #9
 8009f92:	1a9b      	subs	r3, r3, r2
 8009f94:	42ac      	cmp	r4, r5
 8009f96:	bf88      	it	hi
 8009f98:	2300      	movhi	r3, #0
 8009f9a:	3302      	adds	r3, #2
 8009f9c:	4403      	add	r3, r0
 8009f9e:	1a18      	subs	r0, r3, r0
 8009fa0:	b003      	add	sp, #12
 8009fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fa8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fac:	e7ed      	b.n	8009f8a <__exponent+0x44>
 8009fae:	2330      	movs	r3, #48	@ 0x30
 8009fb0:	3130      	adds	r1, #48	@ 0x30
 8009fb2:	7083      	strb	r3, [r0, #2]
 8009fb4:	70c1      	strb	r1, [r0, #3]
 8009fb6:	1d03      	adds	r3, r0, #4
 8009fb8:	e7f1      	b.n	8009f9e <__exponent+0x58>
	...

08009fbc <_printf_float>:
 8009fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc0:	b08d      	sub	sp, #52	@ 0x34
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fc8:	4616      	mov	r6, r2
 8009fca:	461f      	mov	r7, r3
 8009fcc:	4605      	mov	r5, r0
 8009fce:	f000 fcdb 	bl	800a988 <_localeconv_r>
 8009fd2:	6803      	ldr	r3, [r0, #0]
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7f6 f94a 	bl	8000270 <strlen>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe4:	9005      	str	r0, [sp, #20]
 8009fe6:	3307      	adds	r3, #7
 8009fe8:	f023 0307 	bic.w	r3, r3, #7
 8009fec:	f103 0208 	add.w	r2, r3, #8
 8009ff0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ff4:	f8d4 b000 	ldr.w	fp, [r4]
 8009ff8:	f8c8 2000 	str.w	r2, [r8]
 8009ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a000:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a004:	9307      	str	r3, [sp, #28]
 800a006:	f8cd 8018 	str.w	r8, [sp, #24]
 800a00a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a00e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a012:	4b9c      	ldr	r3, [pc, #624]	@ (800a284 <_printf_float+0x2c8>)
 800a014:	f04f 32ff 	mov.w	r2, #4294967295
 800a018:	f7f6 fd88 	bl	8000b2c <__aeabi_dcmpun>
 800a01c:	bb70      	cbnz	r0, 800a07c <_printf_float+0xc0>
 800a01e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a022:	4b98      	ldr	r3, [pc, #608]	@ (800a284 <_printf_float+0x2c8>)
 800a024:	f04f 32ff 	mov.w	r2, #4294967295
 800a028:	f7f6 fd62 	bl	8000af0 <__aeabi_dcmple>
 800a02c:	bb30      	cbnz	r0, 800a07c <_printf_float+0xc0>
 800a02e:	2200      	movs	r2, #0
 800a030:	2300      	movs	r3, #0
 800a032:	4640      	mov	r0, r8
 800a034:	4649      	mov	r1, r9
 800a036:	f7f6 fd51 	bl	8000adc <__aeabi_dcmplt>
 800a03a:	b110      	cbz	r0, 800a042 <_printf_float+0x86>
 800a03c:	232d      	movs	r3, #45	@ 0x2d
 800a03e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a042:	4a91      	ldr	r2, [pc, #580]	@ (800a288 <_printf_float+0x2cc>)
 800a044:	4b91      	ldr	r3, [pc, #580]	@ (800a28c <_printf_float+0x2d0>)
 800a046:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a04a:	bf94      	ite	ls
 800a04c:	4690      	movls	r8, r2
 800a04e:	4698      	movhi	r8, r3
 800a050:	2303      	movs	r3, #3
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	f02b 0304 	bic.w	r3, fp, #4
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	f04f 0900 	mov.w	r9, #0
 800a05e:	9700      	str	r7, [sp, #0]
 800a060:	4633      	mov	r3, r6
 800a062:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a064:	4621      	mov	r1, r4
 800a066:	4628      	mov	r0, r5
 800a068:	f000 f9d2 	bl	800a410 <_printf_common>
 800a06c:	3001      	adds	r0, #1
 800a06e:	f040 808d 	bne.w	800a18c <_printf_float+0x1d0>
 800a072:	f04f 30ff 	mov.w	r0, #4294967295
 800a076:	b00d      	add	sp, #52	@ 0x34
 800a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	4642      	mov	r2, r8
 800a07e:	464b      	mov	r3, r9
 800a080:	4640      	mov	r0, r8
 800a082:	4649      	mov	r1, r9
 800a084:	f7f6 fd52 	bl	8000b2c <__aeabi_dcmpun>
 800a088:	b140      	cbz	r0, 800a09c <_printf_float+0xe0>
 800a08a:	464b      	mov	r3, r9
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bfbc      	itt	lt
 800a090:	232d      	movlt	r3, #45	@ 0x2d
 800a092:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a096:	4a7e      	ldr	r2, [pc, #504]	@ (800a290 <_printf_float+0x2d4>)
 800a098:	4b7e      	ldr	r3, [pc, #504]	@ (800a294 <_printf_float+0x2d8>)
 800a09a:	e7d4      	b.n	800a046 <_printf_float+0x8a>
 800a09c:	6863      	ldr	r3, [r4, #4]
 800a09e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a0a2:	9206      	str	r2, [sp, #24]
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	d13b      	bne.n	800a120 <_printf_float+0x164>
 800a0a8:	2306      	movs	r3, #6
 800a0aa:	6063      	str	r3, [r4, #4]
 800a0ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6022      	str	r2, [r4, #0]
 800a0b4:	9303      	str	r3, [sp, #12]
 800a0b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a0bc:	ab09      	add	r3, sp, #36	@ 0x24
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	6861      	ldr	r1, [r4, #4]
 800a0c2:	ec49 8b10 	vmov	d0, r8, r9
 800a0c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f7ff fed6 	bl	8009e7c <__cvt>
 800a0d0:	9b06      	ldr	r3, [sp, #24]
 800a0d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0d4:	2b47      	cmp	r3, #71	@ 0x47
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	d129      	bne.n	800a12e <_printf_float+0x172>
 800a0da:	1cc8      	adds	r0, r1, #3
 800a0dc:	db02      	blt.n	800a0e4 <_printf_float+0x128>
 800a0de:	6863      	ldr	r3, [r4, #4]
 800a0e0:	4299      	cmp	r1, r3
 800a0e2:	dd41      	ble.n	800a168 <_printf_float+0x1ac>
 800a0e4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a0e8:	fa5f fa8a 	uxtb.w	sl, sl
 800a0ec:	3901      	subs	r1, #1
 800a0ee:	4652      	mov	r2, sl
 800a0f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0f6:	f7ff ff26 	bl	8009f46 <__exponent>
 800a0fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0fc:	1813      	adds	r3, r2, r0
 800a0fe:	2a01      	cmp	r2, #1
 800a100:	4681      	mov	r9, r0
 800a102:	6123      	str	r3, [r4, #16]
 800a104:	dc02      	bgt.n	800a10c <_printf_float+0x150>
 800a106:	6822      	ldr	r2, [r4, #0]
 800a108:	07d2      	lsls	r2, r2, #31
 800a10a:	d501      	bpl.n	800a110 <_printf_float+0x154>
 800a10c:	3301      	adds	r3, #1
 800a10e:	6123      	str	r3, [r4, #16]
 800a110:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0a2      	beq.n	800a05e <_printf_float+0xa2>
 800a118:	232d      	movs	r3, #45	@ 0x2d
 800a11a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a11e:	e79e      	b.n	800a05e <_printf_float+0xa2>
 800a120:	9a06      	ldr	r2, [sp, #24]
 800a122:	2a47      	cmp	r2, #71	@ 0x47
 800a124:	d1c2      	bne.n	800a0ac <_printf_float+0xf0>
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1c0      	bne.n	800a0ac <_printf_float+0xf0>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e7bd      	b.n	800a0aa <_printf_float+0xee>
 800a12e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a132:	d9db      	bls.n	800a0ec <_printf_float+0x130>
 800a134:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a138:	d118      	bne.n	800a16c <_printf_float+0x1b0>
 800a13a:	2900      	cmp	r1, #0
 800a13c:	6863      	ldr	r3, [r4, #4]
 800a13e:	dd0b      	ble.n	800a158 <_printf_float+0x19c>
 800a140:	6121      	str	r1, [r4, #16]
 800a142:	b913      	cbnz	r3, 800a14a <_printf_float+0x18e>
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	07d0      	lsls	r0, r2, #31
 800a148:	d502      	bpl.n	800a150 <_printf_float+0x194>
 800a14a:	3301      	adds	r3, #1
 800a14c:	440b      	add	r3, r1
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a152:	f04f 0900 	mov.w	r9, #0
 800a156:	e7db      	b.n	800a110 <_printf_float+0x154>
 800a158:	b913      	cbnz	r3, 800a160 <_printf_float+0x1a4>
 800a15a:	6822      	ldr	r2, [r4, #0]
 800a15c:	07d2      	lsls	r2, r2, #31
 800a15e:	d501      	bpl.n	800a164 <_printf_float+0x1a8>
 800a160:	3302      	adds	r3, #2
 800a162:	e7f4      	b.n	800a14e <_printf_float+0x192>
 800a164:	2301      	movs	r3, #1
 800a166:	e7f2      	b.n	800a14e <_printf_float+0x192>
 800a168:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a16e:	4299      	cmp	r1, r3
 800a170:	db05      	blt.n	800a17e <_printf_float+0x1c2>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	6121      	str	r1, [r4, #16]
 800a176:	07d8      	lsls	r0, r3, #31
 800a178:	d5ea      	bpl.n	800a150 <_printf_float+0x194>
 800a17a:	1c4b      	adds	r3, r1, #1
 800a17c:	e7e7      	b.n	800a14e <_printf_float+0x192>
 800a17e:	2900      	cmp	r1, #0
 800a180:	bfd4      	ite	le
 800a182:	f1c1 0202 	rsble	r2, r1, #2
 800a186:	2201      	movgt	r2, #1
 800a188:	4413      	add	r3, r2
 800a18a:	e7e0      	b.n	800a14e <_printf_float+0x192>
 800a18c:	6823      	ldr	r3, [r4, #0]
 800a18e:	055a      	lsls	r2, r3, #21
 800a190:	d407      	bmi.n	800a1a2 <_printf_float+0x1e6>
 800a192:	6923      	ldr	r3, [r4, #16]
 800a194:	4642      	mov	r2, r8
 800a196:	4631      	mov	r1, r6
 800a198:	4628      	mov	r0, r5
 800a19a:	47b8      	blx	r7
 800a19c:	3001      	adds	r0, #1
 800a19e:	d12b      	bne.n	800a1f8 <_printf_float+0x23c>
 800a1a0:	e767      	b.n	800a072 <_printf_float+0xb6>
 800a1a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1a6:	f240 80dd 	bls.w	800a364 <_printf_float+0x3a8>
 800a1aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f7f6 fc89 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d033      	beq.n	800a222 <_printf_float+0x266>
 800a1ba:	4a37      	ldr	r2, [pc, #220]	@ (800a298 <_printf_float+0x2dc>)
 800a1bc:	2301      	movs	r3, #1
 800a1be:	4631      	mov	r1, r6
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	47b8      	blx	r7
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	f43f af54 	beq.w	800a072 <_printf_float+0xb6>
 800a1ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1ce:	4543      	cmp	r3, r8
 800a1d0:	db02      	blt.n	800a1d8 <_printf_float+0x21c>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	07d8      	lsls	r0, r3, #31
 800a1d6:	d50f      	bpl.n	800a1f8 <_printf_float+0x23c>
 800a1d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4628      	mov	r0, r5
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	f43f af45 	beq.w	800a072 <_printf_float+0xb6>
 800a1e8:	f04f 0900 	mov.w	r9, #0
 800a1ec:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1f0:	f104 0a1a 	add.w	sl, r4, #26
 800a1f4:	45c8      	cmp	r8, r9
 800a1f6:	dc09      	bgt.n	800a20c <_printf_float+0x250>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	079b      	lsls	r3, r3, #30
 800a1fc:	f100 8103 	bmi.w	800a406 <_printf_float+0x44a>
 800a200:	68e0      	ldr	r0, [r4, #12]
 800a202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a204:	4298      	cmp	r0, r3
 800a206:	bfb8      	it	lt
 800a208:	4618      	movlt	r0, r3
 800a20a:	e734      	b.n	800a076 <_printf_float+0xba>
 800a20c:	2301      	movs	r3, #1
 800a20e:	4652      	mov	r2, sl
 800a210:	4631      	mov	r1, r6
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	f43f af2b 	beq.w	800a072 <_printf_float+0xb6>
 800a21c:	f109 0901 	add.w	r9, r9, #1
 800a220:	e7e8      	b.n	800a1f4 <_printf_float+0x238>
 800a222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a224:	2b00      	cmp	r3, #0
 800a226:	dc39      	bgt.n	800a29c <_printf_float+0x2e0>
 800a228:	4a1b      	ldr	r2, [pc, #108]	@ (800a298 <_printf_float+0x2dc>)
 800a22a:	2301      	movs	r3, #1
 800a22c:	4631      	mov	r1, r6
 800a22e:	4628      	mov	r0, r5
 800a230:	47b8      	blx	r7
 800a232:	3001      	adds	r0, #1
 800a234:	f43f af1d 	beq.w	800a072 <_printf_float+0xb6>
 800a238:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a23c:	ea59 0303 	orrs.w	r3, r9, r3
 800a240:	d102      	bne.n	800a248 <_printf_float+0x28c>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	07d9      	lsls	r1, r3, #31
 800a246:	d5d7      	bpl.n	800a1f8 <_printf_float+0x23c>
 800a248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a24c:	4631      	mov	r1, r6
 800a24e:	4628      	mov	r0, r5
 800a250:	47b8      	blx	r7
 800a252:	3001      	adds	r0, #1
 800a254:	f43f af0d 	beq.w	800a072 <_printf_float+0xb6>
 800a258:	f04f 0a00 	mov.w	sl, #0
 800a25c:	f104 0b1a 	add.w	fp, r4, #26
 800a260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a262:	425b      	negs	r3, r3
 800a264:	4553      	cmp	r3, sl
 800a266:	dc01      	bgt.n	800a26c <_printf_float+0x2b0>
 800a268:	464b      	mov	r3, r9
 800a26a:	e793      	b.n	800a194 <_printf_float+0x1d8>
 800a26c:	2301      	movs	r3, #1
 800a26e:	465a      	mov	r2, fp
 800a270:	4631      	mov	r1, r6
 800a272:	4628      	mov	r0, r5
 800a274:	47b8      	blx	r7
 800a276:	3001      	adds	r0, #1
 800a278:	f43f aefb 	beq.w	800a072 <_printf_float+0xb6>
 800a27c:	f10a 0a01 	add.w	sl, sl, #1
 800a280:	e7ee      	b.n	800a260 <_printf_float+0x2a4>
 800a282:	bf00      	nop
 800a284:	7fefffff 	.word	0x7fefffff
 800a288:	0800ced8 	.word	0x0800ced8
 800a28c:	0800cedc 	.word	0x0800cedc
 800a290:	0800cee0 	.word	0x0800cee0
 800a294:	0800cee4 	.word	0x0800cee4
 800a298:	0800cee8 	.word	0x0800cee8
 800a29c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a29e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2a2:	4553      	cmp	r3, sl
 800a2a4:	bfa8      	it	ge
 800a2a6:	4653      	movge	r3, sl
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	4699      	mov	r9, r3
 800a2ac:	dc36      	bgt.n	800a31c <_printf_float+0x360>
 800a2ae:	f04f 0b00 	mov.w	fp, #0
 800a2b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2b6:	f104 021a 	add.w	r2, r4, #26
 800a2ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2bc:	9306      	str	r3, [sp, #24]
 800a2be:	eba3 0309 	sub.w	r3, r3, r9
 800a2c2:	455b      	cmp	r3, fp
 800a2c4:	dc31      	bgt.n	800a32a <_printf_float+0x36e>
 800a2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c8:	459a      	cmp	sl, r3
 800a2ca:	dc3a      	bgt.n	800a342 <_printf_float+0x386>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	07da      	lsls	r2, r3, #31
 800a2d0:	d437      	bmi.n	800a342 <_printf_float+0x386>
 800a2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d4:	ebaa 0903 	sub.w	r9, sl, r3
 800a2d8:	9b06      	ldr	r3, [sp, #24]
 800a2da:	ebaa 0303 	sub.w	r3, sl, r3
 800a2de:	4599      	cmp	r9, r3
 800a2e0:	bfa8      	it	ge
 800a2e2:	4699      	movge	r9, r3
 800a2e4:	f1b9 0f00 	cmp.w	r9, #0
 800a2e8:	dc33      	bgt.n	800a352 <_printf_float+0x396>
 800a2ea:	f04f 0800 	mov.w	r8, #0
 800a2ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2f2:	f104 0b1a 	add.w	fp, r4, #26
 800a2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a2fc:	eba3 0309 	sub.w	r3, r3, r9
 800a300:	4543      	cmp	r3, r8
 800a302:	f77f af79 	ble.w	800a1f8 <_printf_float+0x23c>
 800a306:	2301      	movs	r3, #1
 800a308:	465a      	mov	r2, fp
 800a30a:	4631      	mov	r1, r6
 800a30c:	4628      	mov	r0, r5
 800a30e:	47b8      	blx	r7
 800a310:	3001      	adds	r0, #1
 800a312:	f43f aeae 	beq.w	800a072 <_printf_float+0xb6>
 800a316:	f108 0801 	add.w	r8, r8, #1
 800a31a:	e7ec      	b.n	800a2f6 <_printf_float+0x33a>
 800a31c:	4642      	mov	r2, r8
 800a31e:	4631      	mov	r1, r6
 800a320:	4628      	mov	r0, r5
 800a322:	47b8      	blx	r7
 800a324:	3001      	adds	r0, #1
 800a326:	d1c2      	bne.n	800a2ae <_printf_float+0x2f2>
 800a328:	e6a3      	b.n	800a072 <_printf_float+0xb6>
 800a32a:	2301      	movs	r3, #1
 800a32c:	4631      	mov	r1, r6
 800a32e:	4628      	mov	r0, r5
 800a330:	9206      	str	r2, [sp, #24]
 800a332:	47b8      	blx	r7
 800a334:	3001      	adds	r0, #1
 800a336:	f43f ae9c 	beq.w	800a072 <_printf_float+0xb6>
 800a33a:	9a06      	ldr	r2, [sp, #24]
 800a33c:	f10b 0b01 	add.w	fp, fp, #1
 800a340:	e7bb      	b.n	800a2ba <_printf_float+0x2fe>
 800a342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	47b8      	blx	r7
 800a34c:	3001      	adds	r0, #1
 800a34e:	d1c0      	bne.n	800a2d2 <_printf_float+0x316>
 800a350:	e68f      	b.n	800a072 <_printf_float+0xb6>
 800a352:	9a06      	ldr	r2, [sp, #24]
 800a354:	464b      	mov	r3, r9
 800a356:	4442      	add	r2, r8
 800a358:	4631      	mov	r1, r6
 800a35a:	4628      	mov	r0, r5
 800a35c:	47b8      	blx	r7
 800a35e:	3001      	adds	r0, #1
 800a360:	d1c3      	bne.n	800a2ea <_printf_float+0x32e>
 800a362:	e686      	b.n	800a072 <_printf_float+0xb6>
 800a364:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a368:	f1ba 0f01 	cmp.w	sl, #1
 800a36c:	dc01      	bgt.n	800a372 <_printf_float+0x3b6>
 800a36e:	07db      	lsls	r3, r3, #31
 800a370:	d536      	bpl.n	800a3e0 <_printf_float+0x424>
 800a372:	2301      	movs	r3, #1
 800a374:	4642      	mov	r2, r8
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	47b8      	blx	r7
 800a37c:	3001      	adds	r0, #1
 800a37e:	f43f ae78 	beq.w	800a072 <_printf_float+0xb6>
 800a382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	f43f ae70 	beq.w	800a072 <_printf_float+0xb6>
 800a392:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a396:	2200      	movs	r2, #0
 800a398:	2300      	movs	r3, #0
 800a39a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a39e:	f7f6 fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3a2:	b9c0      	cbnz	r0, 800a3d6 <_printf_float+0x41a>
 800a3a4:	4653      	mov	r3, sl
 800a3a6:	f108 0201 	add.w	r2, r8, #1
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b8      	blx	r7
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	d10c      	bne.n	800a3ce <_printf_float+0x412>
 800a3b4:	e65d      	b.n	800a072 <_printf_float+0xb6>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	465a      	mov	r2, fp
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	f43f ae56 	beq.w	800a072 <_printf_float+0xb6>
 800a3c6:	f108 0801 	add.w	r8, r8, #1
 800a3ca:	45d0      	cmp	r8, sl
 800a3cc:	dbf3      	blt.n	800a3b6 <_printf_float+0x3fa>
 800a3ce:	464b      	mov	r3, r9
 800a3d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3d4:	e6df      	b.n	800a196 <_printf_float+0x1da>
 800a3d6:	f04f 0800 	mov.w	r8, #0
 800a3da:	f104 0b1a 	add.w	fp, r4, #26
 800a3de:	e7f4      	b.n	800a3ca <_printf_float+0x40e>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4642      	mov	r2, r8
 800a3e4:	e7e1      	b.n	800a3aa <_printf_float+0x3ee>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	464a      	mov	r2, r9
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b8      	blx	r7
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	f43f ae3e 	beq.w	800a072 <_printf_float+0xb6>
 800a3f6:	f108 0801 	add.w	r8, r8, #1
 800a3fa:	68e3      	ldr	r3, [r4, #12]
 800a3fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3fe:	1a5b      	subs	r3, r3, r1
 800a400:	4543      	cmp	r3, r8
 800a402:	dcf0      	bgt.n	800a3e6 <_printf_float+0x42a>
 800a404:	e6fc      	b.n	800a200 <_printf_float+0x244>
 800a406:	f04f 0800 	mov.w	r8, #0
 800a40a:	f104 0919 	add.w	r9, r4, #25
 800a40e:	e7f4      	b.n	800a3fa <_printf_float+0x43e>

0800a410 <_printf_common>:
 800a410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a414:	4616      	mov	r6, r2
 800a416:	4698      	mov	r8, r3
 800a418:	688a      	ldr	r2, [r1, #8]
 800a41a:	690b      	ldr	r3, [r1, #16]
 800a41c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a420:	4293      	cmp	r3, r2
 800a422:	bfb8      	it	lt
 800a424:	4613      	movlt	r3, r2
 800a426:	6033      	str	r3, [r6, #0]
 800a428:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a42c:	4607      	mov	r7, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	b10a      	cbz	r2, 800a436 <_printf_common+0x26>
 800a432:	3301      	adds	r3, #1
 800a434:	6033      	str	r3, [r6, #0]
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	0699      	lsls	r1, r3, #26
 800a43a:	bf42      	ittt	mi
 800a43c:	6833      	ldrmi	r3, [r6, #0]
 800a43e:	3302      	addmi	r3, #2
 800a440:	6033      	strmi	r3, [r6, #0]
 800a442:	6825      	ldr	r5, [r4, #0]
 800a444:	f015 0506 	ands.w	r5, r5, #6
 800a448:	d106      	bne.n	800a458 <_printf_common+0x48>
 800a44a:	f104 0a19 	add.w	sl, r4, #25
 800a44e:	68e3      	ldr	r3, [r4, #12]
 800a450:	6832      	ldr	r2, [r6, #0]
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	42ab      	cmp	r3, r5
 800a456:	dc26      	bgt.n	800a4a6 <_printf_common+0x96>
 800a458:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a45c:	6822      	ldr	r2, [r4, #0]
 800a45e:	3b00      	subs	r3, #0
 800a460:	bf18      	it	ne
 800a462:	2301      	movne	r3, #1
 800a464:	0692      	lsls	r2, r2, #26
 800a466:	d42b      	bmi.n	800a4c0 <_printf_common+0xb0>
 800a468:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a46c:	4641      	mov	r1, r8
 800a46e:	4638      	mov	r0, r7
 800a470:	47c8      	blx	r9
 800a472:	3001      	adds	r0, #1
 800a474:	d01e      	beq.n	800a4b4 <_printf_common+0xa4>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	6922      	ldr	r2, [r4, #16]
 800a47a:	f003 0306 	and.w	r3, r3, #6
 800a47e:	2b04      	cmp	r3, #4
 800a480:	bf02      	ittt	eq
 800a482:	68e5      	ldreq	r5, [r4, #12]
 800a484:	6833      	ldreq	r3, [r6, #0]
 800a486:	1aed      	subeq	r5, r5, r3
 800a488:	68a3      	ldr	r3, [r4, #8]
 800a48a:	bf0c      	ite	eq
 800a48c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a490:	2500      	movne	r5, #0
 800a492:	4293      	cmp	r3, r2
 800a494:	bfc4      	itt	gt
 800a496:	1a9b      	subgt	r3, r3, r2
 800a498:	18ed      	addgt	r5, r5, r3
 800a49a:	2600      	movs	r6, #0
 800a49c:	341a      	adds	r4, #26
 800a49e:	42b5      	cmp	r5, r6
 800a4a0:	d11a      	bne.n	800a4d8 <_printf_common+0xc8>
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	e008      	b.n	800a4b8 <_printf_common+0xa8>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	4652      	mov	r2, sl
 800a4aa:	4641      	mov	r1, r8
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	47c8      	blx	r9
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d103      	bne.n	800a4bc <_printf_common+0xac>
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4bc:	3501      	adds	r5, #1
 800a4be:	e7c6      	b.n	800a44e <_printf_common+0x3e>
 800a4c0:	18e1      	adds	r1, r4, r3
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	2030      	movs	r0, #48	@ 0x30
 800a4c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4ca:	4422      	add	r2, r4
 800a4cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4d4:	3302      	adds	r3, #2
 800a4d6:	e7c7      	b.n	800a468 <_printf_common+0x58>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	4622      	mov	r2, r4
 800a4dc:	4641      	mov	r1, r8
 800a4de:	4638      	mov	r0, r7
 800a4e0:	47c8      	blx	r9
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	d0e6      	beq.n	800a4b4 <_printf_common+0xa4>
 800a4e6:	3601      	adds	r6, #1
 800a4e8:	e7d9      	b.n	800a49e <_printf_common+0x8e>
	...

0800a4ec <_printf_i>:
 800a4ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f0:	7e0f      	ldrb	r7, [r1, #24]
 800a4f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4f4:	2f78      	cmp	r7, #120	@ 0x78
 800a4f6:	4691      	mov	r9, r2
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	469a      	mov	sl, r3
 800a4fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a502:	d807      	bhi.n	800a514 <_printf_i+0x28>
 800a504:	2f62      	cmp	r7, #98	@ 0x62
 800a506:	d80a      	bhi.n	800a51e <_printf_i+0x32>
 800a508:	2f00      	cmp	r7, #0
 800a50a:	f000 80d2 	beq.w	800a6b2 <_printf_i+0x1c6>
 800a50e:	2f58      	cmp	r7, #88	@ 0x58
 800a510:	f000 80b9 	beq.w	800a686 <_printf_i+0x19a>
 800a514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a51c:	e03a      	b.n	800a594 <_printf_i+0xa8>
 800a51e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a522:	2b15      	cmp	r3, #21
 800a524:	d8f6      	bhi.n	800a514 <_printf_i+0x28>
 800a526:	a101      	add	r1, pc, #4	@ (adr r1, 800a52c <_printf_i+0x40>)
 800a528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a52c:	0800a585 	.word	0x0800a585
 800a530:	0800a599 	.word	0x0800a599
 800a534:	0800a515 	.word	0x0800a515
 800a538:	0800a515 	.word	0x0800a515
 800a53c:	0800a515 	.word	0x0800a515
 800a540:	0800a515 	.word	0x0800a515
 800a544:	0800a599 	.word	0x0800a599
 800a548:	0800a515 	.word	0x0800a515
 800a54c:	0800a515 	.word	0x0800a515
 800a550:	0800a515 	.word	0x0800a515
 800a554:	0800a515 	.word	0x0800a515
 800a558:	0800a699 	.word	0x0800a699
 800a55c:	0800a5c3 	.word	0x0800a5c3
 800a560:	0800a653 	.word	0x0800a653
 800a564:	0800a515 	.word	0x0800a515
 800a568:	0800a515 	.word	0x0800a515
 800a56c:	0800a6bb 	.word	0x0800a6bb
 800a570:	0800a515 	.word	0x0800a515
 800a574:	0800a5c3 	.word	0x0800a5c3
 800a578:	0800a515 	.word	0x0800a515
 800a57c:	0800a515 	.word	0x0800a515
 800a580:	0800a65b 	.word	0x0800a65b
 800a584:	6833      	ldr	r3, [r6, #0]
 800a586:	1d1a      	adds	r2, r3, #4
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6032      	str	r2, [r6, #0]
 800a58c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a594:	2301      	movs	r3, #1
 800a596:	e09d      	b.n	800a6d4 <_printf_i+0x1e8>
 800a598:	6833      	ldr	r3, [r6, #0]
 800a59a:	6820      	ldr	r0, [r4, #0]
 800a59c:	1d19      	adds	r1, r3, #4
 800a59e:	6031      	str	r1, [r6, #0]
 800a5a0:	0606      	lsls	r6, r0, #24
 800a5a2:	d501      	bpl.n	800a5a8 <_printf_i+0xbc>
 800a5a4:	681d      	ldr	r5, [r3, #0]
 800a5a6:	e003      	b.n	800a5b0 <_printf_i+0xc4>
 800a5a8:	0645      	lsls	r5, r0, #25
 800a5aa:	d5fb      	bpl.n	800a5a4 <_printf_i+0xb8>
 800a5ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5b0:	2d00      	cmp	r5, #0
 800a5b2:	da03      	bge.n	800a5bc <_printf_i+0xd0>
 800a5b4:	232d      	movs	r3, #45	@ 0x2d
 800a5b6:	426d      	negs	r5, r5
 800a5b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5bc:	4859      	ldr	r0, [pc, #356]	@ (800a724 <_printf_i+0x238>)
 800a5be:	230a      	movs	r3, #10
 800a5c0:	e011      	b.n	800a5e6 <_printf_i+0xfa>
 800a5c2:	6821      	ldr	r1, [r4, #0]
 800a5c4:	6833      	ldr	r3, [r6, #0]
 800a5c6:	0608      	lsls	r0, r1, #24
 800a5c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5cc:	d402      	bmi.n	800a5d4 <_printf_i+0xe8>
 800a5ce:	0649      	lsls	r1, r1, #25
 800a5d0:	bf48      	it	mi
 800a5d2:	b2ad      	uxthmi	r5, r5
 800a5d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5d6:	4853      	ldr	r0, [pc, #332]	@ (800a724 <_printf_i+0x238>)
 800a5d8:	6033      	str	r3, [r6, #0]
 800a5da:	bf14      	ite	ne
 800a5dc:	230a      	movne	r3, #10
 800a5de:	2308      	moveq	r3, #8
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5e6:	6866      	ldr	r6, [r4, #4]
 800a5e8:	60a6      	str	r6, [r4, #8]
 800a5ea:	2e00      	cmp	r6, #0
 800a5ec:	bfa2      	ittt	ge
 800a5ee:	6821      	ldrge	r1, [r4, #0]
 800a5f0:	f021 0104 	bicge.w	r1, r1, #4
 800a5f4:	6021      	strge	r1, [r4, #0]
 800a5f6:	b90d      	cbnz	r5, 800a5fc <_printf_i+0x110>
 800a5f8:	2e00      	cmp	r6, #0
 800a5fa:	d04b      	beq.n	800a694 <_printf_i+0x1a8>
 800a5fc:	4616      	mov	r6, r2
 800a5fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800a602:	fb03 5711 	mls	r7, r3, r1, r5
 800a606:	5dc7      	ldrb	r7, [r0, r7]
 800a608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a60c:	462f      	mov	r7, r5
 800a60e:	42bb      	cmp	r3, r7
 800a610:	460d      	mov	r5, r1
 800a612:	d9f4      	bls.n	800a5fe <_printf_i+0x112>
 800a614:	2b08      	cmp	r3, #8
 800a616:	d10b      	bne.n	800a630 <_printf_i+0x144>
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	07df      	lsls	r7, r3, #31
 800a61c:	d508      	bpl.n	800a630 <_printf_i+0x144>
 800a61e:	6923      	ldr	r3, [r4, #16]
 800a620:	6861      	ldr	r1, [r4, #4]
 800a622:	4299      	cmp	r1, r3
 800a624:	bfde      	ittt	le
 800a626:	2330      	movle	r3, #48	@ 0x30
 800a628:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a62c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a630:	1b92      	subs	r2, r2, r6
 800a632:	6122      	str	r2, [r4, #16]
 800a634:	f8cd a000 	str.w	sl, [sp]
 800a638:	464b      	mov	r3, r9
 800a63a:	aa03      	add	r2, sp, #12
 800a63c:	4621      	mov	r1, r4
 800a63e:	4640      	mov	r0, r8
 800a640:	f7ff fee6 	bl	800a410 <_printf_common>
 800a644:	3001      	adds	r0, #1
 800a646:	d14a      	bne.n	800a6de <_printf_i+0x1f2>
 800a648:	f04f 30ff 	mov.w	r0, #4294967295
 800a64c:	b004      	add	sp, #16
 800a64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	f043 0320 	orr.w	r3, r3, #32
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	4833      	ldr	r0, [pc, #204]	@ (800a728 <_printf_i+0x23c>)
 800a65c:	2778      	movs	r7, #120	@ 0x78
 800a65e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	6831      	ldr	r1, [r6, #0]
 800a666:	061f      	lsls	r7, r3, #24
 800a668:	f851 5b04 	ldr.w	r5, [r1], #4
 800a66c:	d402      	bmi.n	800a674 <_printf_i+0x188>
 800a66e:	065f      	lsls	r7, r3, #25
 800a670:	bf48      	it	mi
 800a672:	b2ad      	uxthmi	r5, r5
 800a674:	6031      	str	r1, [r6, #0]
 800a676:	07d9      	lsls	r1, r3, #31
 800a678:	bf44      	itt	mi
 800a67a:	f043 0320 	orrmi.w	r3, r3, #32
 800a67e:	6023      	strmi	r3, [r4, #0]
 800a680:	b11d      	cbz	r5, 800a68a <_printf_i+0x19e>
 800a682:	2310      	movs	r3, #16
 800a684:	e7ac      	b.n	800a5e0 <_printf_i+0xf4>
 800a686:	4827      	ldr	r0, [pc, #156]	@ (800a724 <_printf_i+0x238>)
 800a688:	e7e9      	b.n	800a65e <_printf_i+0x172>
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	f023 0320 	bic.w	r3, r3, #32
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	e7f6      	b.n	800a682 <_printf_i+0x196>
 800a694:	4616      	mov	r6, r2
 800a696:	e7bd      	b.n	800a614 <_printf_i+0x128>
 800a698:	6833      	ldr	r3, [r6, #0]
 800a69a:	6825      	ldr	r5, [r4, #0]
 800a69c:	6961      	ldr	r1, [r4, #20]
 800a69e:	1d18      	adds	r0, r3, #4
 800a6a0:	6030      	str	r0, [r6, #0]
 800a6a2:	062e      	lsls	r6, r5, #24
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	d501      	bpl.n	800a6ac <_printf_i+0x1c0>
 800a6a8:	6019      	str	r1, [r3, #0]
 800a6aa:	e002      	b.n	800a6b2 <_printf_i+0x1c6>
 800a6ac:	0668      	lsls	r0, r5, #25
 800a6ae:	d5fb      	bpl.n	800a6a8 <_printf_i+0x1bc>
 800a6b0:	8019      	strh	r1, [r3, #0]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	6123      	str	r3, [r4, #16]
 800a6b6:	4616      	mov	r6, r2
 800a6b8:	e7bc      	b.n	800a634 <_printf_i+0x148>
 800a6ba:	6833      	ldr	r3, [r6, #0]
 800a6bc:	1d1a      	adds	r2, r3, #4
 800a6be:	6032      	str	r2, [r6, #0]
 800a6c0:	681e      	ldr	r6, [r3, #0]
 800a6c2:	6862      	ldr	r2, [r4, #4]
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f7f5 fd82 	bl	80001d0 <memchr>
 800a6cc:	b108      	cbz	r0, 800a6d2 <_printf_i+0x1e6>
 800a6ce:	1b80      	subs	r0, r0, r6
 800a6d0:	6060      	str	r0, [r4, #4]
 800a6d2:	6863      	ldr	r3, [r4, #4]
 800a6d4:	6123      	str	r3, [r4, #16]
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6dc:	e7aa      	b.n	800a634 <_printf_i+0x148>
 800a6de:	6923      	ldr	r3, [r4, #16]
 800a6e0:	4632      	mov	r2, r6
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	4640      	mov	r0, r8
 800a6e6:	47d0      	blx	sl
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d0ad      	beq.n	800a648 <_printf_i+0x15c>
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	079b      	lsls	r3, r3, #30
 800a6f0:	d413      	bmi.n	800a71a <_printf_i+0x22e>
 800a6f2:	68e0      	ldr	r0, [r4, #12]
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	4298      	cmp	r0, r3
 800a6f8:	bfb8      	it	lt
 800a6fa:	4618      	movlt	r0, r3
 800a6fc:	e7a6      	b.n	800a64c <_printf_i+0x160>
 800a6fe:	2301      	movs	r3, #1
 800a700:	4632      	mov	r2, r6
 800a702:	4649      	mov	r1, r9
 800a704:	4640      	mov	r0, r8
 800a706:	47d0      	blx	sl
 800a708:	3001      	adds	r0, #1
 800a70a:	d09d      	beq.n	800a648 <_printf_i+0x15c>
 800a70c:	3501      	adds	r5, #1
 800a70e:	68e3      	ldr	r3, [r4, #12]
 800a710:	9903      	ldr	r1, [sp, #12]
 800a712:	1a5b      	subs	r3, r3, r1
 800a714:	42ab      	cmp	r3, r5
 800a716:	dcf2      	bgt.n	800a6fe <_printf_i+0x212>
 800a718:	e7eb      	b.n	800a6f2 <_printf_i+0x206>
 800a71a:	2500      	movs	r5, #0
 800a71c:	f104 0619 	add.w	r6, r4, #25
 800a720:	e7f5      	b.n	800a70e <_printf_i+0x222>
 800a722:	bf00      	nop
 800a724:	0800ceea 	.word	0x0800ceea
 800a728:	0800cefb 	.word	0x0800cefb

0800a72c <std>:
 800a72c:	2300      	movs	r3, #0
 800a72e:	b510      	push	{r4, lr}
 800a730:	4604      	mov	r4, r0
 800a732:	e9c0 3300 	strd	r3, r3, [r0]
 800a736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a73a:	6083      	str	r3, [r0, #8]
 800a73c:	8181      	strh	r1, [r0, #12]
 800a73e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a740:	81c2      	strh	r2, [r0, #14]
 800a742:	6183      	str	r3, [r0, #24]
 800a744:	4619      	mov	r1, r3
 800a746:	2208      	movs	r2, #8
 800a748:	305c      	adds	r0, #92	@ 0x5c
 800a74a:	f000 f914 	bl	800a976 <memset>
 800a74e:	4b0d      	ldr	r3, [pc, #52]	@ (800a784 <std+0x58>)
 800a750:	6263      	str	r3, [r4, #36]	@ 0x24
 800a752:	4b0d      	ldr	r3, [pc, #52]	@ (800a788 <std+0x5c>)
 800a754:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a756:	4b0d      	ldr	r3, [pc, #52]	@ (800a78c <std+0x60>)
 800a758:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a75a:	4b0d      	ldr	r3, [pc, #52]	@ (800a790 <std+0x64>)
 800a75c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a75e:	4b0d      	ldr	r3, [pc, #52]	@ (800a794 <std+0x68>)
 800a760:	6224      	str	r4, [r4, #32]
 800a762:	429c      	cmp	r4, r3
 800a764:	d006      	beq.n	800a774 <std+0x48>
 800a766:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a76a:	4294      	cmp	r4, r2
 800a76c:	d002      	beq.n	800a774 <std+0x48>
 800a76e:	33d0      	adds	r3, #208	@ 0xd0
 800a770:	429c      	cmp	r4, r3
 800a772:	d105      	bne.n	800a780 <std+0x54>
 800a774:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a77c:	f000 b978 	b.w	800aa70 <__retarget_lock_init_recursive>
 800a780:	bd10      	pop	{r4, pc}
 800a782:	bf00      	nop
 800a784:	0800a8f1 	.word	0x0800a8f1
 800a788:	0800a913 	.word	0x0800a913
 800a78c:	0800a94b 	.word	0x0800a94b
 800a790:	0800a96f 	.word	0x0800a96f
 800a794:	200020fc 	.word	0x200020fc

0800a798 <stdio_exit_handler>:
 800a798:	4a02      	ldr	r2, [pc, #8]	@ (800a7a4 <stdio_exit_handler+0xc>)
 800a79a:	4903      	ldr	r1, [pc, #12]	@ (800a7a8 <stdio_exit_handler+0x10>)
 800a79c:	4803      	ldr	r0, [pc, #12]	@ (800a7ac <stdio_exit_handler+0x14>)
 800a79e:	f000 b869 	b.w	800a874 <_fwalk_sglue>
 800a7a2:	bf00      	nop
 800a7a4:	200000fc 	.word	0x200000fc
 800a7a8:	0800c3cd 	.word	0x0800c3cd
 800a7ac:	2000010c 	.word	0x2000010c

0800a7b0 <cleanup_stdio>:
 800a7b0:	6841      	ldr	r1, [r0, #4]
 800a7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e4 <cleanup_stdio+0x34>)
 800a7b4:	4299      	cmp	r1, r3
 800a7b6:	b510      	push	{r4, lr}
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	d001      	beq.n	800a7c0 <cleanup_stdio+0x10>
 800a7bc:	f001 fe06 	bl	800c3cc <_fflush_r>
 800a7c0:	68a1      	ldr	r1, [r4, #8]
 800a7c2:	4b09      	ldr	r3, [pc, #36]	@ (800a7e8 <cleanup_stdio+0x38>)
 800a7c4:	4299      	cmp	r1, r3
 800a7c6:	d002      	beq.n	800a7ce <cleanup_stdio+0x1e>
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f001 fdff 	bl	800c3cc <_fflush_r>
 800a7ce:	68e1      	ldr	r1, [r4, #12]
 800a7d0:	4b06      	ldr	r3, [pc, #24]	@ (800a7ec <cleanup_stdio+0x3c>)
 800a7d2:	4299      	cmp	r1, r3
 800a7d4:	d004      	beq.n	800a7e0 <cleanup_stdio+0x30>
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7dc:	f001 bdf6 	b.w	800c3cc <_fflush_r>
 800a7e0:	bd10      	pop	{r4, pc}
 800a7e2:	bf00      	nop
 800a7e4:	200020fc 	.word	0x200020fc
 800a7e8:	20002164 	.word	0x20002164
 800a7ec:	200021cc 	.word	0x200021cc

0800a7f0 <global_stdio_init.part.0>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a820 <global_stdio_init.part.0+0x30>)
 800a7f4:	4c0b      	ldr	r4, [pc, #44]	@ (800a824 <global_stdio_init.part.0+0x34>)
 800a7f6:	4a0c      	ldr	r2, [pc, #48]	@ (800a828 <global_stdio_init.part.0+0x38>)
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2104      	movs	r1, #4
 800a800:	f7ff ff94 	bl	800a72c <std>
 800a804:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a808:	2201      	movs	r2, #1
 800a80a:	2109      	movs	r1, #9
 800a80c:	f7ff ff8e 	bl	800a72c <std>
 800a810:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a814:	2202      	movs	r2, #2
 800a816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a81a:	2112      	movs	r1, #18
 800a81c:	f7ff bf86 	b.w	800a72c <std>
 800a820:	20002234 	.word	0x20002234
 800a824:	200020fc 	.word	0x200020fc
 800a828:	0800a799 	.word	0x0800a799

0800a82c <__sfp_lock_acquire>:
 800a82c:	4801      	ldr	r0, [pc, #4]	@ (800a834 <__sfp_lock_acquire+0x8>)
 800a82e:	f000 b920 	b.w	800aa72 <__retarget_lock_acquire_recursive>
 800a832:	bf00      	nop
 800a834:	2000223d 	.word	0x2000223d

0800a838 <__sfp_lock_release>:
 800a838:	4801      	ldr	r0, [pc, #4]	@ (800a840 <__sfp_lock_release+0x8>)
 800a83a:	f000 b91b 	b.w	800aa74 <__retarget_lock_release_recursive>
 800a83e:	bf00      	nop
 800a840:	2000223d 	.word	0x2000223d

0800a844 <__sinit>:
 800a844:	b510      	push	{r4, lr}
 800a846:	4604      	mov	r4, r0
 800a848:	f7ff fff0 	bl	800a82c <__sfp_lock_acquire>
 800a84c:	6a23      	ldr	r3, [r4, #32]
 800a84e:	b11b      	cbz	r3, 800a858 <__sinit+0x14>
 800a850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a854:	f7ff bff0 	b.w	800a838 <__sfp_lock_release>
 800a858:	4b04      	ldr	r3, [pc, #16]	@ (800a86c <__sinit+0x28>)
 800a85a:	6223      	str	r3, [r4, #32]
 800a85c:	4b04      	ldr	r3, [pc, #16]	@ (800a870 <__sinit+0x2c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1f5      	bne.n	800a850 <__sinit+0xc>
 800a864:	f7ff ffc4 	bl	800a7f0 <global_stdio_init.part.0>
 800a868:	e7f2      	b.n	800a850 <__sinit+0xc>
 800a86a:	bf00      	nop
 800a86c:	0800a7b1 	.word	0x0800a7b1
 800a870:	20002234 	.word	0x20002234

0800a874 <_fwalk_sglue>:
 800a874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a878:	4607      	mov	r7, r0
 800a87a:	4688      	mov	r8, r1
 800a87c:	4614      	mov	r4, r2
 800a87e:	2600      	movs	r6, #0
 800a880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a884:	f1b9 0901 	subs.w	r9, r9, #1
 800a888:	d505      	bpl.n	800a896 <_fwalk_sglue+0x22>
 800a88a:	6824      	ldr	r4, [r4, #0]
 800a88c:	2c00      	cmp	r4, #0
 800a88e:	d1f7      	bne.n	800a880 <_fwalk_sglue+0xc>
 800a890:	4630      	mov	r0, r6
 800a892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a896:	89ab      	ldrh	r3, [r5, #12]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d907      	bls.n	800a8ac <_fwalk_sglue+0x38>
 800a89c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	d003      	beq.n	800a8ac <_fwalk_sglue+0x38>
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	47c0      	blx	r8
 800a8aa:	4306      	orrs	r6, r0
 800a8ac:	3568      	adds	r5, #104	@ 0x68
 800a8ae:	e7e9      	b.n	800a884 <_fwalk_sglue+0x10>

0800a8b0 <siprintf>:
 800a8b0:	b40e      	push	{r1, r2, r3}
 800a8b2:	b500      	push	{lr}
 800a8b4:	b09c      	sub	sp, #112	@ 0x70
 800a8b6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a8b8:	9002      	str	r0, [sp, #8]
 800a8ba:	9006      	str	r0, [sp, #24]
 800a8bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a8c0:	4809      	ldr	r0, [pc, #36]	@ (800a8e8 <siprintf+0x38>)
 800a8c2:	9107      	str	r1, [sp, #28]
 800a8c4:	9104      	str	r1, [sp, #16]
 800a8c6:	4909      	ldr	r1, [pc, #36]	@ (800a8ec <siprintf+0x3c>)
 800a8c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8cc:	9105      	str	r1, [sp, #20]
 800a8ce:	6800      	ldr	r0, [r0, #0]
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	a902      	add	r1, sp, #8
 800a8d4:	f001 fbfa 	bl	800c0cc <_svfiprintf_r>
 800a8d8:	9b02      	ldr	r3, [sp, #8]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	701a      	strb	r2, [r3, #0]
 800a8de:	b01c      	add	sp, #112	@ 0x70
 800a8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8e4:	b003      	add	sp, #12
 800a8e6:	4770      	bx	lr
 800a8e8:	20000108 	.word	0x20000108
 800a8ec:	ffff0208 	.word	0xffff0208

0800a8f0 <__sread>:
 800a8f0:	b510      	push	{r4, lr}
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f8:	f000 f86c 	bl	800a9d4 <_read_r>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	bfab      	itete	ge
 800a900:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a902:	89a3      	ldrhlt	r3, [r4, #12]
 800a904:	181b      	addge	r3, r3, r0
 800a906:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a90a:	bfac      	ite	ge
 800a90c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a90e:	81a3      	strhlt	r3, [r4, #12]
 800a910:	bd10      	pop	{r4, pc}

0800a912 <__swrite>:
 800a912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a916:	461f      	mov	r7, r3
 800a918:	898b      	ldrh	r3, [r1, #12]
 800a91a:	05db      	lsls	r3, r3, #23
 800a91c:	4605      	mov	r5, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	4616      	mov	r6, r2
 800a922:	d505      	bpl.n	800a930 <__swrite+0x1e>
 800a924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a928:	2302      	movs	r3, #2
 800a92a:	2200      	movs	r2, #0
 800a92c:	f000 f840 	bl	800a9b0 <_lseek_r>
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a936:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a93a:	81a3      	strh	r3, [r4, #12]
 800a93c:	4632      	mov	r2, r6
 800a93e:	463b      	mov	r3, r7
 800a940:	4628      	mov	r0, r5
 800a942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a946:	f000 b857 	b.w	800a9f8 <_write_r>

0800a94a <__sseek>:
 800a94a:	b510      	push	{r4, lr}
 800a94c:	460c      	mov	r4, r1
 800a94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a952:	f000 f82d 	bl	800a9b0 <_lseek_r>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	89a3      	ldrh	r3, [r4, #12]
 800a95a:	bf15      	itete	ne
 800a95c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a95e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a962:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a966:	81a3      	strheq	r3, [r4, #12]
 800a968:	bf18      	it	ne
 800a96a:	81a3      	strhne	r3, [r4, #12]
 800a96c:	bd10      	pop	{r4, pc}

0800a96e <__sclose>:
 800a96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a972:	f000 b80d 	b.w	800a990 <_close_r>

0800a976 <memset>:
 800a976:	4402      	add	r2, r0
 800a978:	4603      	mov	r3, r0
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d100      	bne.n	800a980 <memset+0xa>
 800a97e:	4770      	bx	lr
 800a980:	f803 1b01 	strb.w	r1, [r3], #1
 800a984:	e7f9      	b.n	800a97a <memset+0x4>
	...

0800a988 <_localeconv_r>:
 800a988:	4800      	ldr	r0, [pc, #0]	@ (800a98c <_localeconv_r+0x4>)
 800a98a:	4770      	bx	lr
 800a98c:	20000248 	.word	0x20000248

0800a990 <_close_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4d06      	ldr	r5, [pc, #24]	@ (800a9ac <_close_r+0x1c>)
 800a994:	2300      	movs	r3, #0
 800a996:	4604      	mov	r4, r0
 800a998:	4608      	mov	r0, r1
 800a99a:	602b      	str	r3, [r5, #0]
 800a99c:	f7f7 fbe8 	bl	8002170 <_close>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_close_r+0x1a>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_close_r+0x1a>
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	20002238 	.word	0x20002238

0800a9b0 <_lseek_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	4d07      	ldr	r5, [pc, #28]	@ (800a9d0 <_lseek_r+0x20>)
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	4608      	mov	r0, r1
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	602a      	str	r2, [r5, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f7f7 fbfd 	bl	80021be <_lseek>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	d102      	bne.n	800a9ce <_lseek_r+0x1e>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	b103      	cbz	r3, 800a9ce <_lseek_r+0x1e>
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
 800a9d0:	20002238 	.word	0x20002238

0800a9d4 <_read_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4d07      	ldr	r5, [pc, #28]	@ (800a9f4 <_read_r+0x20>)
 800a9d8:	4604      	mov	r4, r0
 800a9da:	4608      	mov	r0, r1
 800a9dc:	4611      	mov	r1, r2
 800a9de:	2200      	movs	r2, #0
 800a9e0:	602a      	str	r2, [r5, #0]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f7f7 fb8b 	bl	80020fe <_read>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	d102      	bne.n	800a9f2 <_read_r+0x1e>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	b103      	cbz	r3, 800a9f2 <_read_r+0x1e>
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	20002238 	.word	0x20002238

0800a9f8 <_write_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4d07      	ldr	r5, [pc, #28]	@ (800aa18 <_write_r+0x20>)
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	4608      	mov	r0, r1
 800aa00:	4611      	mov	r1, r2
 800aa02:	2200      	movs	r2, #0
 800aa04:	602a      	str	r2, [r5, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	f7f7 fb96 	bl	8002138 <_write>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_write_r+0x1e>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_write_r+0x1e>
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	20002238 	.word	0x20002238

0800aa1c <__errno>:
 800aa1c:	4b01      	ldr	r3, [pc, #4]	@ (800aa24 <__errno+0x8>)
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	20000108 	.word	0x20000108

0800aa28 <__libc_init_array>:
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	4d0d      	ldr	r5, [pc, #52]	@ (800aa60 <__libc_init_array+0x38>)
 800aa2c:	4c0d      	ldr	r4, [pc, #52]	@ (800aa64 <__libc_init_array+0x3c>)
 800aa2e:	1b64      	subs	r4, r4, r5
 800aa30:	10a4      	asrs	r4, r4, #2
 800aa32:	2600      	movs	r6, #0
 800aa34:	42a6      	cmp	r6, r4
 800aa36:	d109      	bne.n	800aa4c <__libc_init_array+0x24>
 800aa38:	4d0b      	ldr	r5, [pc, #44]	@ (800aa68 <__libc_init_array+0x40>)
 800aa3a:	4c0c      	ldr	r4, [pc, #48]	@ (800aa6c <__libc_init_array+0x44>)
 800aa3c:	f002 fa02 	bl	800ce44 <_init>
 800aa40:	1b64      	subs	r4, r4, r5
 800aa42:	10a4      	asrs	r4, r4, #2
 800aa44:	2600      	movs	r6, #0
 800aa46:	42a6      	cmp	r6, r4
 800aa48:	d105      	bne.n	800aa56 <__libc_init_array+0x2e>
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}
 800aa4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa50:	4798      	blx	r3
 800aa52:	3601      	adds	r6, #1
 800aa54:	e7ee      	b.n	800aa34 <__libc_init_array+0xc>
 800aa56:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa5a:	4798      	blx	r3
 800aa5c:	3601      	adds	r6, #1
 800aa5e:	e7f2      	b.n	800aa46 <__libc_init_array+0x1e>
 800aa60:	0800d288 	.word	0x0800d288
 800aa64:	0800d288 	.word	0x0800d288
 800aa68:	0800d288 	.word	0x0800d288
 800aa6c:	0800d28c 	.word	0x0800d28c

0800aa70 <__retarget_lock_init_recursive>:
 800aa70:	4770      	bx	lr

0800aa72 <__retarget_lock_acquire_recursive>:
 800aa72:	4770      	bx	lr

0800aa74 <__retarget_lock_release_recursive>:
 800aa74:	4770      	bx	lr

0800aa76 <quorem>:
 800aa76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7a:	6903      	ldr	r3, [r0, #16]
 800aa7c:	690c      	ldr	r4, [r1, #16]
 800aa7e:	42a3      	cmp	r3, r4
 800aa80:	4607      	mov	r7, r0
 800aa82:	db7e      	blt.n	800ab82 <quorem+0x10c>
 800aa84:	3c01      	subs	r4, #1
 800aa86:	f101 0814 	add.w	r8, r1, #20
 800aa8a:	00a3      	lsls	r3, r4, #2
 800aa8c:	f100 0514 	add.w	r5, r0, #20
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aaa8:	fbb2 f6f3 	udiv	r6, r2, r3
 800aaac:	d32e      	bcc.n	800ab0c <quorem+0x96>
 800aaae:	f04f 0a00 	mov.w	sl, #0
 800aab2:	46c4      	mov	ip, r8
 800aab4:	46ae      	mov	lr, r5
 800aab6:	46d3      	mov	fp, sl
 800aab8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aabc:	b298      	uxth	r0, r3
 800aabe:	fb06 a000 	mla	r0, r6, r0, sl
 800aac2:	0c02      	lsrs	r2, r0, #16
 800aac4:	0c1b      	lsrs	r3, r3, #16
 800aac6:	fb06 2303 	mla	r3, r6, r3, r2
 800aaca:	f8de 2000 	ldr.w	r2, [lr]
 800aace:	b280      	uxth	r0, r0
 800aad0:	b292      	uxth	r2, r2
 800aad2:	1a12      	subs	r2, r2, r0
 800aad4:	445a      	add	r2, fp
 800aad6:	f8de 0000 	ldr.w	r0, [lr]
 800aada:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aade:	b29b      	uxth	r3, r3
 800aae0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aae4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aae8:	b292      	uxth	r2, r2
 800aaea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aaee:	45e1      	cmp	r9, ip
 800aaf0:	f84e 2b04 	str.w	r2, [lr], #4
 800aaf4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aaf8:	d2de      	bcs.n	800aab8 <quorem+0x42>
 800aafa:	9b00      	ldr	r3, [sp, #0]
 800aafc:	58eb      	ldr	r3, [r5, r3]
 800aafe:	b92b      	cbnz	r3, 800ab0c <quorem+0x96>
 800ab00:	9b01      	ldr	r3, [sp, #4]
 800ab02:	3b04      	subs	r3, #4
 800ab04:	429d      	cmp	r5, r3
 800ab06:	461a      	mov	r2, r3
 800ab08:	d32f      	bcc.n	800ab6a <quorem+0xf4>
 800ab0a:	613c      	str	r4, [r7, #16]
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	f001 f979 	bl	800be04 <__mcmp>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	db25      	blt.n	800ab62 <quorem+0xec>
 800ab16:	4629      	mov	r1, r5
 800ab18:	2000      	movs	r0, #0
 800ab1a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab1e:	f8d1 c000 	ldr.w	ip, [r1]
 800ab22:	fa1f fe82 	uxth.w	lr, r2
 800ab26:	fa1f f38c 	uxth.w	r3, ip
 800ab2a:	eba3 030e 	sub.w	r3, r3, lr
 800ab2e:	4403      	add	r3, r0
 800ab30:	0c12      	lsrs	r2, r2, #16
 800ab32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ab36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab40:	45c1      	cmp	r9, r8
 800ab42:	f841 3b04 	str.w	r3, [r1], #4
 800ab46:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab4a:	d2e6      	bcs.n	800ab1a <quorem+0xa4>
 800ab4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab54:	b922      	cbnz	r2, 800ab60 <quorem+0xea>
 800ab56:	3b04      	subs	r3, #4
 800ab58:	429d      	cmp	r5, r3
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	d30b      	bcc.n	800ab76 <quorem+0x100>
 800ab5e:	613c      	str	r4, [r7, #16]
 800ab60:	3601      	adds	r6, #1
 800ab62:	4630      	mov	r0, r6
 800ab64:	b003      	add	sp, #12
 800ab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6a:	6812      	ldr	r2, [r2, #0]
 800ab6c:	3b04      	subs	r3, #4
 800ab6e:	2a00      	cmp	r2, #0
 800ab70:	d1cb      	bne.n	800ab0a <quorem+0x94>
 800ab72:	3c01      	subs	r4, #1
 800ab74:	e7c6      	b.n	800ab04 <quorem+0x8e>
 800ab76:	6812      	ldr	r2, [r2, #0]
 800ab78:	3b04      	subs	r3, #4
 800ab7a:	2a00      	cmp	r2, #0
 800ab7c:	d1ef      	bne.n	800ab5e <quorem+0xe8>
 800ab7e:	3c01      	subs	r4, #1
 800ab80:	e7ea      	b.n	800ab58 <quorem+0xe2>
 800ab82:	2000      	movs	r0, #0
 800ab84:	e7ee      	b.n	800ab64 <quorem+0xee>
	...

0800ab88 <_dtoa_r>:
 800ab88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	69c7      	ldr	r7, [r0, #28]
 800ab8e:	b099      	sub	sp, #100	@ 0x64
 800ab90:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ab94:	ec55 4b10 	vmov	r4, r5, d0
 800ab98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ab9a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab9c:	4683      	mov	fp, r0
 800ab9e:	920e      	str	r2, [sp, #56]	@ 0x38
 800aba0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aba2:	b97f      	cbnz	r7, 800abc4 <_dtoa_r+0x3c>
 800aba4:	2010      	movs	r0, #16
 800aba6:	f000 fdfd 	bl	800b7a4 <malloc>
 800abaa:	4602      	mov	r2, r0
 800abac:	f8cb 001c 	str.w	r0, [fp, #28]
 800abb0:	b920      	cbnz	r0, 800abbc <_dtoa_r+0x34>
 800abb2:	4ba7      	ldr	r3, [pc, #668]	@ (800ae50 <_dtoa_r+0x2c8>)
 800abb4:	21ef      	movs	r1, #239	@ 0xef
 800abb6:	48a7      	ldr	r0, [pc, #668]	@ (800ae54 <_dtoa_r+0x2cc>)
 800abb8:	f001 fc68 	bl	800c48c <__assert_func>
 800abbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800abc0:	6007      	str	r7, [r0, #0]
 800abc2:	60c7      	str	r7, [r0, #12]
 800abc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800abc8:	6819      	ldr	r1, [r3, #0]
 800abca:	b159      	cbz	r1, 800abe4 <_dtoa_r+0x5c>
 800abcc:	685a      	ldr	r2, [r3, #4]
 800abce:	604a      	str	r2, [r1, #4]
 800abd0:	2301      	movs	r3, #1
 800abd2:	4093      	lsls	r3, r2
 800abd4:	608b      	str	r3, [r1, #8]
 800abd6:	4658      	mov	r0, fp
 800abd8:	f000 feda 	bl	800b990 <_Bfree>
 800abdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	1e2b      	subs	r3, r5, #0
 800abe6:	bfb9      	ittee	lt
 800abe8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800abec:	9303      	strlt	r3, [sp, #12]
 800abee:	2300      	movge	r3, #0
 800abf0:	6033      	strge	r3, [r6, #0]
 800abf2:	9f03      	ldr	r7, [sp, #12]
 800abf4:	4b98      	ldr	r3, [pc, #608]	@ (800ae58 <_dtoa_r+0x2d0>)
 800abf6:	bfbc      	itt	lt
 800abf8:	2201      	movlt	r2, #1
 800abfa:	6032      	strlt	r2, [r6, #0]
 800abfc:	43bb      	bics	r3, r7
 800abfe:	d112      	bne.n	800ac26 <_dtoa_r+0x9e>
 800ac00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac0c:	4323      	orrs	r3, r4
 800ac0e:	f000 854d 	beq.w	800b6ac <_dtoa_r+0xb24>
 800ac12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ae6c <_dtoa_r+0x2e4>
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 854f 	beq.w	800b6bc <_dtoa_r+0xb34>
 800ac1e:	f10a 0303 	add.w	r3, sl, #3
 800ac22:	f000 bd49 	b.w	800b6b8 <_dtoa_r+0xb30>
 800ac26:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	ec51 0b17 	vmov	r0, r1, d7
 800ac30:	2300      	movs	r3, #0
 800ac32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ac36:	f7f5 ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac3a:	4680      	mov	r8, r0
 800ac3c:	b158      	cbz	r0, 800ac56 <_dtoa_r+0xce>
 800ac3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac40:	2301      	movs	r3, #1
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac46:	b113      	cbz	r3, 800ac4e <_dtoa_r+0xc6>
 800ac48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac4a:	4b84      	ldr	r3, [pc, #528]	@ (800ae5c <_dtoa_r+0x2d4>)
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ae70 <_dtoa_r+0x2e8>
 800ac52:	f000 bd33 	b.w	800b6bc <_dtoa_r+0xb34>
 800ac56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ac5a:	aa16      	add	r2, sp, #88	@ 0x58
 800ac5c:	a917      	add	r1, sp, #92	@ 0x5c
 800ac5e:	4658      	mov	r0, fp
 800ac60:	f001 f980 	bl	800bf64 <__d2b>
 800ac64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ac68:	4681      	mov	r9, r0
 800ac6a:	2e00      	cmp	r6, #0
 800ac6c:	d077      	beq.n	800ad5e <_dtoa_r+0x1d6>
 800ac6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ac74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ac80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ac84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ac88:	4619      	mov	r1, r3
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	4b74      	ldr	r3, [pc, #464]	@ (800ae60 <_dtoa_r+0x2d8>)
 800ac8e:	f7f5 fafb 	bl	8000288 <__aeabi_dsub>
 800ac92:	a369      	add	r3, pc, #420	@ (adr r3, 800ae38 <_dtoa_r+0x2b0>)
 800ac94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac98:	f7f5 fcae 	bl	80005f8 <__aeabi_dmul>
 800ac9c:	a368      	add	r3, pc, #416	@ (adr r3, 800ae40 <_dtoa_r+0x2b8>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 faf3 	bl	800028c <__adddf3>
 800aca6:	4604      	mov	r4, r0
 800aca8:	4630      	mov	r0, r6
 800acaa:	460d      	mov	r5, r1
 800acac:	f7f5 fc3a 	bl	8000524 <__aeabi_i2d>
 800acb0:	a365      	add	r3, pc, #404	@ (adr r3, 800ae48 <_dtoa_r+0x2c0>)
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f7f5 fc9f 	bl	80005f8 <__aeabi_dmul>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7f5 fae3 	bl	800028c <__adddf3>
 800acc6:	4604      	mov	r4, r0
 800acc8:	460d      	mov	r5, r1
 800acca:	f7f5 ff45 	bl	8000b58 <__aeabi_d2iz>
 800acce:	2200      	movs	r2, #0
 800acd0:	4607      	mov	r7, r0
 800acd2:	2300      	movs	r3, #0
 800acd4:	4620      	mov	r0, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	f7f5 ff00 	bl	8000adc <__aeabi_dcmplt>
 800acdc:	b140      	cbz	r0, 800acf0 <_dtoa_r+0x168>
 800acde:	4638      	mov	r0, r7
 800ace0:	f7f5 fc20 	bl	8000524 <__aeabi_i2d>
 800ace4:	4622      	mov	r2, r4
 800ace6:	462b      	mov	r3, r5
 800ace8:	f7f5 feee 	bl	8000ac8 <__aeabi_dcmpeq>
 800acec:	b900      	cbnz	r0, 800acf0 <_dtoa_r+0x168>
 800acee:	3f01      	subs	r7, #1
 800acf0:	2f16      	cmp	r7, #22
 800acf2:	d851      	bhi.n	800ad98 <_dtoa_r+0x210>
 800acf4:	4b5b      	ldr	r3, [pc, #364]	@ (800ae64 <_dtoa_r+0x2dc>)
 800acf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad02:	f7f5 feeb 	bl	8000adc <__aeabi_dcmplt>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d048      	beq.n	800ad9c <_dtoa_r+0x214>
 800ad0a:	3f01      	subs	r7, #1
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ad10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad12:	1b9b      	subs	r3, r3, r6
 800ad14:	1e5a      	subs	r2, r3, #1
 800ad16:	bf44      	itt	mi
 800ad18:	f1c3 0801 	rsbmi	r8, r3, #1
 800ad1c:	2300      	movmi	r3, #0
 800ad1e:	9208      	str	r2, [sp, #32]
 800ad20:	bf54      	ite	pl
 800ad22:	f04f 0800 	movpl.w	r8, #0
 800ad26:	9308      	strmi	r3, [sp, #32]
 800ad28:	2f00      	cmp	r7, #0
 800ad2a:	db39      	blt.n	800ada0 <_dtoa_r+0x218>
 800ad2c:	9b08      	ldr	r3, [sp, #32]
 800ad2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ad30:	443b      	add	r3, r7
 800ad32:	9308      	str	r3, [sp, #32]
 800ad34:	2300      	movs	r3, #0
 800ad36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad3a:	2b09      	cmp	r3, #9
 800ad3c:	d864      	bhi.n	800ae08 <_dtoa_r+0x280>
 800ad3e:	2b05      	cmp	r3, #5
 800ad40:	bfc4      	itt	gt
 800ad42:	3b04      	subgt	r3, #4
 800ad44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ad46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad48:	f1a3 0302 	sub.w	r3, r3, #2
 800ad4c:	bfcc      	ite	gt
 800ad4e:	2400      	movgt	r4, #0
 800ad50:	2401      	movle	r4, #1
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d863      	bhi.n	800ae1e <_dtoa_r+0x296>
 800ad56:	e8df f003 	tbb	[pc, r3]
 800ad5a:	372a      	.short	0x372a
 800ad5c:	5535      	.short	0x5535
 800ad5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ad62:	441e      	add	r6, r3
 800ad64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ad68:	2b20      	cmp	r3, #32
 800ad6a:	bfc1      	itttt	gt
 800ad6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ad70:	409f      	lslgt	r7, r3
 800ad72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ad76:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ad7a:	bfd6      	itet	le
 800ad7c:	f1c3 0320 	rsble	r3, r3, #32
 800ad80:	ea47 0003 	orrgt.w	r0, r7, r3
 800ad84:	fa04 f003 	lslle.w	r0, r4, r3
 800ad88:	f7f5 fbbc 	bl	8000504 <__aeabi_ui2d>
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ad92:	3e01      	subs	r6, #1
 800ad94:	9214      	str	r2, [sp, #80]	@ 0x50
 800ad96:	e777      	b.n	800ac88 <_dtoa_r+0x100>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e7b8      	b.n	800ad0e <_dtoa_r+0x186>
 800ad9c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ad9e:	e7b7      	b.n	800ad10 <_dtoa_r+0x188>
 800ada0:	427b      	negs	r3, r7
 800ada2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ada4:	2300      	movs	r3, #0
 800ada6:	eba8 0807 	sub.w	r8, r8, r7
 800adaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adac:	e7c4      	b.n	800ad38 <_dtoa_r+0x1b0>
 800adae:	2300      	movs	r3, #0
 800adb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	dc35      	bgt.n	800ae24 <_dtoa_r+0x29c>
 800adb8:	2301      	movs	r3, #1
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	9307      	str	r3, [sp, #28]
 800adbe:	461a      	mov	r2, r3
 800adc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800adc2:	e00b      	b.n	800addc <_dtoa_r+0x254>
 800adc4:	2301      	movs	r3, #1
 800adc6:	e7f3      	b.n	800adb0 <_dtoa_r+0x228>
 800adc8:	2300      	movs	r3, #0
 800adca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adce:	18fb      	adds	r3, r7, r3
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	3301      	adds	r3, #1
 800add4:	2b01      	cmp	r3, #1
 800add6:	9307      	str	r3, [sp, #28]
 800add8:	bfb8      	it	lt
 800adda:	2301      	movlt	r3, #1
 800addc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ade0:	2100      	movs	r1, #0
 800ade2:	2204      	movs	r2, #4
 800ade4:	f102 0514 	add.w	r5, r2, #20
 800ade8:	429d      	cmp	r5, r3
 800adea:	d91f      	bls.n	800ae2c <_dtoa_r+0x2a4>
 800adec:	6041      	str	r1, [r0, #4]
 800adee:	4658      	mov	r0, fp
 800adf0:	f000 fd8e 	bl	800b910 <_Balloc>
 800adf4:	4682      	mov	sl, r0
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d13c      	bne.n	800ae74 <_dtoa_r+0x2ec>
 800adfa:	4b1b      	ldr	r3, [pc, #108]	@ (800ae68 <_dtoa_r+0x2e0>)
 800adfc:	4602      	mov	r2, r0
 800adfe:	f240 11af 	movw	r1, #431	@ 0x1af
 800ae02:	e6d8      	b.n	800abb6 <_dtoa_r+0x2e>
 800ae04:	2301      	movs	r3, #1
 800ae06:	e7e0      	b.n	800adca <_dtoa_r+0x242>
 800ae08:	2401      	movs	r4, #1
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ae10:	f04f 33ff 	mov.w	r3, #4294967295
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	2312      	movs	r3, #18
 800ae1c:	e7d0      	b.n	800adc0 <_dtoa_r+0x238>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae22:	e7f5      	b.n	800ae10 <_dtoa_r+0x288>
 800ae24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	e7d7      	b.n	800addc <_dtoa_r+0x254>
 800ae2c:	3101      	adds	r1, #1
 800ae2e:	0052      	lsls	r2, r2, #1
 800ae30:	e7d8      	b.n	800ade4 <_dtoa_r+0x25c>
 800ae32:	bf00      	nop
 800ae34:	f3af 8000 	nop.w
 800ae38:	636f4361 	.word	0x636f4361
 800ae3c:	3fd287a7 	.word	0x3fd287a7
 800ae40:	8b60c8b3 	.word	0x8b60c8b3
 800ae44:	3fc68a28 	.word	0x3fc68a28
 800ae48:	509f79fb 	.word	0x509f79fb
 800ae4c:	3fd34413 	.word	0x3fd34413
 800ae50:	0800cf19 	.word	0x0800cf19
 800ae54:	0800cf30 	.word	0x0800cf30
 800ae58:	7ff00000 	.word	0x7ff00000
 800ae5c:	0800cee9 	.word	0x0800cee9
 800ae60:	3ff80000 	.word	0x3ff80000
 800ae64:	0800d028 	.word	0x0800d028
 800ae68:	0800cf88 	.word	0x0800cf88
 800ae6c:	0800cf15 	.word	0x0800cf15
 800ae70:	0800cee8 	.word	0x0800cee8
 800ae74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae78:	6018      	str	r0, [r3, #0]
 800ae7a:	9b07      	ldr	r3, [sp, #28]
 800ae7c:	2b0e      	cmp	r3, #14
 800ae7e:	f200 80a4 	bhi.w	800afca <_dtoa_r+0x442>
 800ae82:	2c00      	cmp	r4, #0
 800ae84:	f000 80a1 	beq.w	800afca <_dtoa_r+0x442>
 800ae88:	2f00      	cmp	r7, #0
 800ae8a:	dd33      	ble.n	800aef4 <_dtoa_r+0x36c>
 800ae8c:	4bad      	ldr	r3, [pc, #692]	@ (800b144 <_dtoa_r+0x5bc>)
 800ae8e:	f007 020f 	and.w	r2, r7, #15
 800ae92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae96:	ed93 7b00 	vldr	d7, [r3]
 800ae9a:	05f8      	lsls	r0, r7, #23
 800ae9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aea0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aea4:	d516      	bpl.n	800aed4 <_dtoa_r+0x34c>
 800aea6:	4ba8      	ldr	r3, [pc, #672]	@ (800b148 <_dtoa_r+0x5c0>)
 800aea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aeac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aeb0:	f7f5 fccc 	bl	800084c <__aeabi_ddiv>
 800aeb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeb8:	f004 040f 	and.w	r4, r4, #15
 800aebc:	2603      	movs	r6, #3
 800aebe:	4da2      	ldr	r5, [pc, #648]	@ (800b148 <_dtoa_r+0x5c0>)
 800aec0:	b954      	cbnz	r4, 800aed8 <_dtoa_r+0x350>
 800aec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeca:	f7f5 fcbf 	bl	800084c <__aeabi_ddiv>
 800aece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aed2:	e028      	b.n	800af26 <_dtoa_r+0x39e>
 800aed4:	2602      	movs	r6, #2
 800aed6:	e7f2      	b.n	800aebe <_dtoa_r+0x336>
 800aed8:	07e1      	lsls	r1, r4, #31
 800aeda:	d508      	bpl.n	800aeee <_dtoa_r+0x366>
 800aedc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aee4:	f7f5 fb88 	bl	80005f8 <__aeabi_dmul>
 800aee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeec:	3601      	adds	r6, #1
 800aeee:	1064      	asrs	r4, r4, #1
 800aef0:	3508      	adds	r5, #8
 800aef2:	e7e5      	b.n	800aec0 <_dtoa_r+0x338>
 800aef4:	f000 80d2 	beq.w	800b09c <_dtoa_r+0x514>
 800aef8:	427c      	negs	r4, r7
 800aefa:	4b92      	ldr	r3, [pc, #584]	@ (800b144 <_dtoa_r+0x5bc>)
 800aefc:	4d92      	ldr	r5, [pc, #584]	@ (800b148 <_dtoa_r+0x5c0>)
 800aefe:	f004 020f 	and.w	r2, r4, #15
 800af02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af0e:	f7f5 fb73 	bl	80005f8 <__aeabi_dmul>
 800af12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af16:	1124      	asrs	r4, r4, #4
 800af18:	2300      	movs	r3, #0
 800af1a:	2602      	movs	r6, #2
 800af1c:	2c00      	cmp	r4, #0
 800af1e:	f040 80b2 	bne.w	800b086 <_dtoa_r+0x4fe>
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1d3      	bne.n	800aece <_dtoa_r+0x346>
 800af26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 80b7 	beq.w	800b0a0 <_dtoa_r+0x518>
 800af32:	4b86      	ldr	r3, [pc, #536]	@ (800b14c <_dtoa_r+0x5c4>)
 800af34:	2200      	movs	r2, #0
 800af36:	4620      	mov	r0, r4
 800af38:	4629      	mov	r1, r5
 800af3a:	f7f5 fdcf 	bl	8000adc <__aeabi_dcmplt>
 800af3e:	2800      	cmp	r0, #0
 800af40:	f000 80ae 	beq.w	800b0a0 <_dtoa_r+0x518>
 800af44:	9b07      	ldr	r3, [sp, #28]
 800af46:	2b00      	cmp	r3, #0
 800af48:	f000 80aa 	beq.w	800b0a0 <_dtoa_r+0x518>
 800af4c:	9b00      	ldr	r3, [sp, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	dd37      	ble.n	800afc2 <_dtoa_r+0x43a>
 800af52:	1e7b      	subs	r3, r7, #1
 800af54:	9304      	str	r3, [sp, #16]
 800af56:	4620      	mov	r0, r4
 800af58:	4b7d      	ldr	r3, [pc, #500]	@ (800b150 <_dtoa_r+0x5c8>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	4629      	mov	r1, r5
 800af5e:	f7f5 fb4b 	bl	80005f8 <__aeabi_dmul>
 800af62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af66:	9c00      	ldr	r4, [sp, #0]
 800af68:	3601      	adds	r6, #1
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7f5 fada 	bl	8000524 <__aeabi_i2d>
 800af70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af74:	f7f5 fb40 	bl	80005f8 <__aeabi_dmul>
 800af78:	4b76      	ldr	r3, [pc, #472]	@ (800b154 <_dtoa_r+0x5cc>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	f7f5 f986 	bl	800028c <__adddf3>
 800af80:	4605      	mov	r5, r0
 800af82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800af86:	2c00      	cmp	r4, #0
 800af88:	f040 808d 	bne.w	800b0a6 <_dtoa_r+0x51e>
 800af8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af90:	4b71      	ldr	r3, [pc, #452]	@ (800b158 <_dtoa_r+0x5d0>)
 800af92:	2200      	movs	r2, #0
 800af94:	f7f5 f978 	bl	8000288 <__aeabi_dsub>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afa0:	462a      	mov	r2, r5
 800afa2:	4633      	mov	r3, r6
 800afa4:	f7f5 fdb8 	bl	8000b18 <__aeabi_dcmpgt>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	f040 828b 	bne.w	800b4c4 <_dtoa_r+0x93c>
 800afae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afb2:	462a      	mov	r2, r5
 800afb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800afb8:	f7f5 fd90 	bl	8000adc <__aeabi_dcmplt>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f040 8128 	bne.w	800b212 <_dtoa_r+0x68a>
 800afc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800afc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800afca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f2c0 815a 	blt.w	800b286 <_dtoa_r+0x6fe>
 800afd2:	2f0e      	cmp	r7, #14
 800afd4:	f300 8157 	bgt.w	800b286 <_dtoa_r+0x6fe>
 800afd8:	4b5a      	ldr	r3, [pc, #360]	@ (800b144 <_dtoa_r+0x5bc>)
 800afda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800afde:	ed93 7b00 	vldr	d7, [r3]
 800afe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	ed8d 7b00 	vstr	d7, [sp]
 800afea:	da03      	bge.n	800aff4 <_dtoa_r+0x46c>
 800afec:	9b07      	ldr	r3, [sp, #28]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f340 8101 	ble.w	800b1f6 <_dtoa_r+0x66e>
 800aff4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aff8:	4656      	mov	r6, sl
 800affa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800affe:	4620      	mov	r0, r4
 800b000:	4629      	mov	r1, r5
 800b002:	f7f5 fc23 	bl	800084c <__aeabi_ddiv>
 800b006:	f7f5 fda7 	bl	8000b58 <__aeabi_d2iz>
 800b00a:	4680      	mov	r8, r0
 800b00c:	f7f5 fa8a 	bl	8000524 <__aeabi_i2d>
 800b010:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b014:	f7f5 faf0 	bl	80005f8 <__aeabi_dmul>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4620      	mov	r0, r4
 800b01e:	4629      	mov	r1, r5
 800b020:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b024:	f7f5 f930 	bl	8000288 <__aeabi_dsub>
 800b028:	f806 4b01 	strb.w	r4, [r6], #1
 800b02c:	9d07      	ldr	r5, [sp, #28]
 800b02e:	eba6 040a 	sub.w	r4, r6, sl
 800b032:	42a5      	cmp	r5, r4
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	f040 8117 	bne.w	800b26a <_dtoa_r+0x6e2>
 800b03c:	f7f5 f926 	bl	800028c <__adddf3>
 800b040:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b044:	4604      	mov	r4, r0
 800b046:	460d      	mov	r5, r1
 800b048:	f7f5 fd66 	bl	8000b18 <__aeabi_dcmpgt>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	f040 80f9 	bne.w	800b244 <_dtoa_r+0x6bc>
 800b052:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b056:	4620      	mov	r0, r4
 800b058:	4629      	mov	r1, r5
 800b05a:	f7f5 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800b05e:	b118      	cbz	r0, 800b068 <_dtoa_r+0x4e0>
 800b060:	f018 0f01 	tst.w	r8, #1
 800b064:	f040 80ee 	bne.w	800b244 <_dtoa_r+0x6bc>
 800b068:	4649      	mov	r1, r9
 800b06a:	4658      	mov	r0, fp
 800b06c:	f000 fc90 	bl	800b990 <_Bfree>
 800b070:	2300      	movs	r3, #0
 800b072:	7033      	strb	r3, [r6, #0]
 800b074:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b076:	3701      	adds	r7, #1
 800b078:	601f      	str	r7, [r3, #0]
 800b07a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 831d 	beq.w	800b6bc <_dtoa_r+0xb34>
 800b082:	601e      	str	r6, [r3, #0]
 800b084:	e31a      	b.n	800b6bc <_dtoa_r+0xb34>
 800b086:	07e2      	lsls	r2, r4, #31
 800b088:	d505      	bpl.n	800b096 <_dtoa_r+0x50e>
 800b08a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b08e:	f7f5 fab3 	bl	80005f8 <__aeabi_dmul>
 800b092:	3601      	adds	r6, #1
 800b094:	2301      	movs	r3, #1
 800b096:	1064      	asrs	r4, r4, #1
 800b098:	3508      	adds	r5, #8
 800b09a:	e73f      	b.n	800af1c <_dtoa_r+0x394>
 800b09c:	2602      	movs	r6, #2
 800b09e:	e742      	b.n	800af26 <_dtoa_r+0x39e>
 800b0a0:	9c07      	ldr	r4, [sp, #28]
 800b0a2:	9704      	str	r7, [sp, #16]
 800b0a4:	e761      	b.n	800af6a <_dtoa_r+0x3e2>
 800b0a6:	4b27      	ldr	r3, [pc, #156]	@ (800b144 <_dtoa_r+0x5bc>)
 800b0a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0b2:	4454      	add	r4, sl
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	d053      	beq.n	800b160 <_dtoa_r+0x5d8>
 800b0b8:	4928      	ldr	r1, [pc, #160]	@ (800b15c <_dtoa_r+0x5d4>)
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	f7f5 fbc6 	bl	800084c <__aeabi_ddiv>
 800b0c0:	4633      	mov	r3, r6
 800b0c2:	462a      	mov	r2, r5
 800b0c4:	f7f5 f8e0 	bl	8000288 <__aeabi_dsub>
 800b0c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b0cc:	4656      	mov	r6, sl
 800b0ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0d2:	f7f5 fd41 	bl	8000b58 <__aeabi_d2iz>
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	f7f5 fa24 	bl	8000524 <__aeabi_i2d>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0e4:	f7f5 f8d0 	bl	8000288 <__aeabi_dsub>
 800b0e8:	3530      	adds	r5, #48	@ 0x30
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0f2:	f806 5b01 	strb.w	r5, [r6], #1
 800b0f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b0fa:	f7f5 fcef 	bl	8000adc <__aeabi_dcmplt>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d171      	bne.n	800b1e6 <_dtoa_r+0x65e>
 800b102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b106:	4911      	ldr	r1, [pc, #68]	@ (800b14c <_dtoa_r+0x5c4>)
 800b108:	2000      	movs	r0, #0
 800b10a:	f7f5 f8bd 	bl	8000288 <__aeabi_dsub>
 800b10e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b112:	f7f5 fce3 	bl	8000adc <__aeabi_dcmplt>
 800b116:	2800      	cmp	r0, #0
 800b118:	f040 8095 	bne.w	800b246 <_dtoa_r+0x6be>
 800b11c:	42a6      	cmp	r6, r4
 800b11e:	f43f af50 	beq.w	800afc2 <_dtoa_r+0x43a>
 800b122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b126:	4b0a      	ldr	r3, [pc, #40]	@ (800b150 <_dtoa_r+0x5c8>)
 800b128:	2200      	movs	r2, #0
 800b12a:	f7f5 fa65 	bl	80005f8 <__aeabi_dmul>
 800b12e:	4b08      	ldr	r3, [pc, #32]	@ (800b150 <_dtoa_r+0x5c8>)
 800b130:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b134:	2200      	movs	r2, #0
 800b136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b13a:	f7f5 fa5d 	bl	80005f8 <__aeabi_dmul>
 800b13e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b142:	e7c4      	b.n	800b0ce <_dtoa_r+0x546>
 800b144:	0800d028 	.word	0x0800d028
 800b148:	0800d000 	.word	0x0800d000
 800b14c:	3ff00000 	.word	0x3ff00000
 800b150:	40240000 	.word	0x40240000
 800b154:	401c0000 	.word	0x401c0000
 800b158:	40140000 	.word	0x40140000
 800b15c:	3fe00000 	.word	0x3fe00000
 800b160:	4631      	mov	r1, r6
 800b162:	4628      	mov	r0, r5
 800b164:	f7f5 fa48 	bl	80005f8 <__aeabi_dmul>
 800b168:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b16c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b16e:	4656      	mov	r6, sl
 800b170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b174:	f7f5 fcf0 	bl	8000b58 <__aeabi_d2iz>
 800b178:	4605      	mov	r5, r0
 800b17a:	f7f5 f9d3 	bl	8000524 <__aeabi_i2d>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b186:	f7f5 f87f 	bl	8000288 <__aeabi_dsub>
 800b18a:	3530      	adds	r5, #48	@ 0x30
 800b18c:	f806 5b01 	strb.w	r5, [r6], #1
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	42a6      	cmp	r6, r4
 800b196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b19a:	f04f 0200 	mov.w	r2, #0
 800b19e:	d124      	bne.n	800b1ea <_dtoa_r+0x662>
 800b1a0:	4bac      	ldr	r3, [pc, #688]	@ (800b454 <_dtoa_r+0x8cc>)
 800b1a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b1a6:	f7f5 f871 	bl	800028c <__adddf3>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1b2:	f7f5 fcb1 	bl	8000b18 <__aeabi_dcmpgt>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d145      	bne.n	800b246 <_dtoa_r+0x6be>
 800b1ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b1be:	49a5      	ldr	r1, [pc, #660]	@ (800b454 <_dtoa_r+0x8cc>)
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	f7f5 f861 	bl	8000288 <__aeabi_dsub>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ce:	f7f5 fc85 	bl	8000adc <__aeabi_dcmplt>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	f43f aef5 	beq.w	800afc2 <_dtoa_r+0x43a>
 800b1d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b1da:	1e73      	subs	r3, r6, #1
 800b1dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b1de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b1e2:	2b30      	cmp	r3, #48	@ 0x30
 800b1e4:	d0f8      	beq.n	800b1d8 <_dtoa_r+0x650>
 800b1e6:	9f04      	ldr	r7, [sp, #16]
 800b1e8:	e73e      	b.n	800b068 <_dtoa_r+0x4e0>
 800b1ea:	4b9b      	ldr	r3, [pc, #620]	@ (800b458 <_dtoa_r+0x8d0>)
 800b1ec:	f7f5 fa04 	bl	80005f8 <__aeabi_dmul>
 800b1f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1f4:	e7bc      	b.n	800b170 <_dtoa_r+0x5e8>
 800b1f6:	d10c      	bne.n	800b212 <_dtoa_r+0x68a>
 800b1f8:	4b98      	ldr	r3, [pc, #608]	@ (800b45c <_dtoa_r+0x8d4>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b200:	f7f5 f9fa 	bl	80005f8 <__aeabi_dmul>
 800b204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b208:	f7f5 fc7c 	bl	8000b04 <__aeabi_dcmpge>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	f000 8157 	beq.w	800b4c0 <_dtoa_r+0x938>
 800b212:	2400      	movs	r4, #0
 800b214:	4625      	mov	r5, r4
 800b216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b218:	43db      	mvns	r3, r3
 800b21a:	9304      	str	r3, [sp, #16]
 800b21c:	4656      	mov	r6, sl
 800b21e:	2700      	movs	r7, #0
 800b220:	4621      	mov	r1, r4
 800b222:	4658      	mov	r0, fp
 800b224:	f000 fbb4 	bl	800b990 <_Bfree>
 800b228:	2d00      	cmp	r5, #0
 800b22a:	d0dc      	beq.n	800b1e6 <_dtoa_r+0x65e>
 800b22c:	b12f      	cbz	r7, 800b23a <_dtoa_r+0x6b2>
 800b22e:	42af      	cmp	r7, r5
 800b230:	d003      	beq.n	800b23a <_dtoa_r+0x6b2>
 800b232:	4639      	mov	r1, r7
 800b234:	4658      	mov	r0, fp
 800b236:	f000 fbab 	bl	800b990 <_Bfree>
 800b23a:	4629      	mov	r1, r5
 800b23c:	4658      	mov	r0, fp
 800b23e:	f000 fba7 	bl	800b990 <_Bfree>
 800b242:	e7d0      	b.n	800b1e6 <_dtoa_r+0x65e>
 800b244:	9704      	str	r7, [sp, #16]
 800b246:	4633      	mov	r3, r6
 800b248:	461e      	mov	r6, r3
 800b24a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b24e:	2a39      	cmp	r2, #57	@ 0x39
 800b250:	d107      	bne.n	800b262 <_dtoa_r+0x6da>
 800b252:	459a      	cmp	sl, r3
 800b254:	d1f8      	bne.n	800b248 <_dtoa_r+0x6c0>
 800b256:	9a04      	ldr	r2, [sp, #16]
 800b258:	3201      	adds	r2, #1
 800b25a:	9204      	str	r2, [sp, #16]
 800b25c:	2230      	movs	r2, #48	@ 0x30
 800b25e:	f88a 2000 	strb.w	r2, [sl]
 800b262:	781a      	ldrb	r2, [r3, #0]
 800b264:	3201      	adds	r2, #1
 800b266:	701a      	strb	r2, [r3, #0]
 800b268:	e7bd      	b.n	800b1e6 <_dtoa_r+0x65e>
 800b26a:	4b7b      	ldr	r3, [pc, #492]	@ (800b458 <_dtoa_r+0x8d0>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	f7f5 f9c3 	bl	80005f8 <__aeabi_dmul>
 800b272:	2200      	movs	r2, #0
 800b274:	2300      	movs	r3, #0
 800b276:	4604      	mov	r4, r0
 800b278:	460d      	mov	r5, r1
 800b27a:	f7f5 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800b27e:	2800      	cmp	r0, #0
 800b280:	f43f aebb 	beq.w	800affa <_dtoa_r+0x472>
 800b284:	e6f0      	b.n	800b068 <_dtoa_r+0x4e0>
 800b286:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b288:	2a00      	cmp	r2, #0
 800b28a:	f000 80db 	beq.w	800b444 <_dtoa_r+0x8bc>
 800b28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b290:	2a01      	cmp	r2, #1
 800b292:	f300 80bf 	bgt.w	800b414 <_dtoa_r+0x88c>
 800b296:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b298:	2a00      	cmp	r2, #0
 800b29a:	f000 80b7 	beq.w	800b40c <_dtoa_r+0x884>
 800b29e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b2a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b2a4:	4646      	mov	r6, r8
 800b2a6:	9a08      	ldr	r2, [sp, #32]
 800b2a8:	2101      	movs	r1, #1
 800b2aa:	441a      	add	r2, r3
 800b2ac:	4658      	mov	r0, fp
 800b2ae:	4498      	add	r8, r3
 800b2b0:	9208      	str	r2, [sp, #32]
 800b2b2:	f000 fc21 	bl	800baf8 <__i2b>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	b15e      	cbz	r6, 800b2d2 <_dtoa_r+0x74a>
 800b2ba:	9b08      	ldr	r3, [sp, #32]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dd08      	ble.n	800b2d2 <_dtoa_r+0x74a>
 800b2c0:	42b3      	cmp	r3, r6
 800b2c2:	9a08      	ldr	r2, [sp, #32]
 800b2c4:	bfa8      	it	ge
 800b2c6:	4633      	movge	r3, r6
 800b2c8:	eba8 0803 	sub.w	r8, r8, r3
 800b2cc:	1af6      	subs	r6, r6, r3
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	9308      	str	r3, [sp, #32]
 800b2d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2d4:	b1f3      	cbz	r3, 800b314 <_dtoa_r+0x78c>
 800b2d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f000 80b7 	beq.w	800b44c <_dtoa_r+0x8c4>
 800b2de:	b18c      	cbz	r4, 800b304 <_dtoa_r+0x77c>
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	4658      	mov	r0, fp
 800b2e6:	f000 fcc7 	bl	800bc78 <__pow5mult>
 800b2ea:	464a      	mov	r2, r9
 800b2ec:	4601      	mov	r1, r0
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	4658      	mov	r0, fp
 800b2f2:	f000 fc17 	bl	800bb24 <__multiply>
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	9004      	str	r0, [sp, #16]
 800b2fa:	4658      	mov	r0, fp
 800b2fc:	f000 fb48 	bl	800b990 <_Bfree>
 800b300:	9b04      	ldr	r3, [sp, #16]
 800b302:	4699      	mov	r9, r3
 800b304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b306:	1b1a      	subs	r2, r3, r4
 800b308:	d004      	beq.n	800b314 <_dtoa_r+0x78c>
 800b30a:	4649      	mov	r1, r9
 800b30c:	4658      	mov	r0, fp
 800b30e:	f000 fcb3 	bl	800bc78 <__pow5mult>
 800b312:	4681      	mov	r9, r0
 800b314:	2101      	movs	r1, #1
 800b316:	4658      	mov	r0, fp
 800b318:	f000 fbee 	bl	800baf8 <__i2b>
 800b31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b31e:	4604      	mov	r4, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 81cf 	beq.w	800b6c4 <_dtoa_r+0xb3c>
 800b326:	461a      	mov	r2, r3
 800b328:	4601      	mov	r1, r0
 800b32a:	4658      	mov	r0, fp
 800b32c:	f000 fca4 	bl	800bc78 <__pow5mult>
 800b330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b332:	2b01      	cmp	r3, #1
 800b334:	4604      	mov	r4, r0
 800b336:	f300 8095 	bgt.w	800b464 <_dtoa_r+0x8dc>
 800b33a:	9b02      	ldr	r3, [sp, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f040 8087 	bne.w	800b450 <_dtoa_r+0x8c8>
 800b342:	9b03      	ldr	r3, [sp, #12]
 800b344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f040 8089 	bne.w	800b460 <_dtoa_r+0x8d8>
 800b34e:	9b03      	ldr	r3, [sp, #12]
 800b350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b354:	0d1b      	lsrs	r3, r3, #20
 800b356:	051b      	lsls	r3, r3, #20
 800b358:	b12b      	cbz	r3, 800b366 <_dtoa_r+0x7de>
 800b35a:	9b08      	ldr	r3, [sp, #32]
 800b35c:	3301      	adds	r3, #1
 800b35e:	9308      	str	r3, [sp, #32]
 800b360:	f108 0801 	add.w	r8, r8, #1
 800b364:	2301      	movs	r3, #1
 800b366:	930a      	str	r3, [sp, #40]	@ 0x28
 800b368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 81b0 	beq.w	800b6d0 <_dtoa_r+0xb48>
 800b370:	6923      	ldr	r3, [r4, #16]
 800b372:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b376:	6918      	ldr	r0, [r3, #16]
 800b378:	f000 fb72 	bl	800ba60 <__hi0bits>
 800b37c:	f1c0 0020 	rsb	r0, r0, #32
 800b380:	9b08      	ldr	r3, [sp, #32]
 800b382:	4418      	add	r0, r3
 800b384:	f010 001f 	ands.w	r0, r0, #31
 800b388:	d077      	beq.n	800b47a <_dtoa_r+0x8f2>
 800b38a:	f1c0 0320 	rsb	r3, r0, #32
 800b38e:	2b04      	cmp	r3, #4
 800b390:	dd6b      	ble.n	800b46a <_dtoa_r+0x8e2>
 800b392:	9b08      	ldr	r3, [sp, #32]
 800b394:	f1c0 001c 	rsb	r0, r0, #28
 800b398:	4403      	add	r3, r0
 800b39a:	4480      	add	r8, r0
 800b39c:	4406      	add	r6, r0
 800b39e:	9308      	str	r3, [sp, #32]
 800b3a0:	f1b8 0f00 	cmp.w	r8, #0
 800b3a4:	dd05      	ble.n	800b3b2 <_dtoa_r+0x82a>
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	4642      	mov	r2, r8
 800b3aa:	4658      	mov	r0, fp
 800b3ac:	f000 fcbe 	bl	800bd2c <__lshift>
 800b3b0:	4681      	mov	r9, r0
 800b3b2:	9b08      	ldr	r3, [sp, #32]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dd05      	ble.n	800b3c4 <_dtoa_r+0x83c>
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	4658      	mov	r0, fp
 800b3be:	f000 fcb5 	bl	800bd2c <__lshift>
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d059      	beq.n	800b47e <_dtoa_r+0x8f6>
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	4648      	mov	r0, r9
 800b3ce:	f000 fd19 	bl	800be04 <__mcmp>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	da53      	bge.n	800b47e <_dtoa_r+0x8f6>
 800b3d6:	1e7b      	subs	r3, r7, #1
 800b3d8:	9304      	str	r3, [sp, #16]
 800b3da:	4649      	mov	r1, r9
 800b3dc:	2300      	movs	r3, #0
 800b3de:	220a      	movs	r2, #10
 800b3e0:	4658      	mov	r0, fp
 800b3e2:	f000 faf7 	bl	800b9d4 <__multadd>
 800b3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3e8:	4681      	mov	r9, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 8172 	beq.w	800b6d4 <_dtoa_r+0xb4c>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	220a      	movs	r2, #10
 800b3f6:	4658      	mov	r0, fp
 800b3f8:	f000 faec 	bl	800b9d4 <__multadd>
 800b3fc:	9b00      	ldr	r3, [sp, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	4605      	mov	r5, r0
 800b402:	dc67      	bgt.n	800b4d4 <_dtoa_r+0x94c>
 800b404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b406:	2b02      	cmp	r3, #2
 800b408:	dc41      	bgt.n	800b48e <_dtoa_r+0x906>
 800b40a:	e063      	b.n	800b4d4 <_dtoa_r+0x94c>
 800b40c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b40e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b412:	e746      	b.n	800b2a2 <_dtoa_r+0x71a>
 800b414:	9b07      	ldr	r3, [sp, #28]
 800b416:	1e5c      	subs	r4, r3, #1
 800b418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b41a:	42a3      	cmp	r3, r4
 800b41c:	bfbf      	itttt	lt
 800b41e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b420:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b422:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b424:	1ae3      	sublt	r3, r4, r3
 800b426:	bfb4      	ite	lt
 800b428:	18d2      	addlt	r2, r2, r3
 800b42a:	1b1c      	subge	r4, r3, r4
 800b42c:	9b07      	ldr	r3, [sp, #28]
 800b42e:	bfbc      	itt	lt
 800b430:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b432:	2400      	movlt	r4, #0
 800b434:	2b00      	cmp	r3, #0
 800b436:	bfb5      	itete	lt
 800b438:	eba8 0603 	sublt.w	r6, r8, r3
 800b43c:	9b07      	ldrge	r3, [sp, #28]
 800b43e:	2300      	movlt	r3, #0
 800b440:	4646      	movge	r6, r8
 800b442:	e730      	b.n	800b2a6 <_dtoa_r+0x71e>
 800b444:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b446:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b448:	4646      	mov	r6, r8
 800b44a:	e735      	b.n	800b2b8 <_dtoa_r+0x730>
 800b44c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b44e:	e75c      	b.n	800b30a <_dtoa_r+0x782>
 800b450:	2300      	movs	r3, #0
 800b452:	e788      	b.n	800b366 <_dtoa_r+0x7de>
 800b454:	3fe00000 	.word	0x3fe00000
 800b458:	40240000 	.word	0x40240000
 800b45c:	40140000 	.word	0x40140000
 800b460:	9b02      	ldr	r3, [sp, #8]
 800b462:	e780      	b.n	800b366 <_dtoa_r+0x7de>
 800b464:	2300      	movs	r3, #0
 800b466:	930a      	str	r3, [sp, #40]	@ 0x28
 800b468:	e782      	b.n	800b370 <_dtoa_r+0x7e8>
 800b46a:	d099      	beq.n	800b3a0 <_dtoa_r+0x818>
 800b46c:	9a08      	ldr	r2, [sp, #32]
 800b46e:	331c      	adds	r3, #28
 800b470:	441a      	add	r2, r3
 800b472:	4498      	add	r8, r3
 800b474:	441e      	add	r6, r3
 800b476:	9208      	str	r2, [sp, #32]
 800b478:	e792      	b.n	800b3a0 <_dtoa_r+0x818>
 800b47a:	4603      	mov	r3, r0
 800b47c:	e7f6      	b.n	800b46c <_dtoa_r+0x8e4>
 800b47e:	9b07      	ldr	r3, [sp, #28]
 800b480:	9704      	str	r7, [sp, #16]
 800b482:	2b00      	cmp	r3, #0
 800b484:	dc20      	bgt.n	800b4c8 <_dtoa_r+0x940>
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	dd1e      	ble.n	800b4cc <_dtoa_r+0x944>
 800b48e:	9b00      	ldr	r3, [sp, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	f47f aec0 	bne.w	800b216 <_dtoa_r+0x68e>
 800b496:	4621      	mov	r1, r4
 800b498:	2205      	movs	r2, #5
 800b49a:	4658      	mov	r0, fp
 800b49c:	f000 fa9a 	bl	800b9d4 <__multadd>
 800b4a0:	4601      	mov	r1, r0
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4648      	mov	r0, r9
 800b4a6:	f000 fcad 	bl	800be04 <__mcmp>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	f77f aeb3 	ble.w	800b216 <_dtoa_r+0x68e>
 800b4b0:	4656      	mov	r6, sl
 800b4b2:	2331      	movs	r3, #49	@ 0x31
 800b4b4:	f806 3b01 	strb.w	r3, [r6], #1
 800b4b8:	9b04      	ldr	r3, [sp, #16]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	e6ae      	b.n	800b21e <_dtoa_r+0x696>
 800b4c0:	9c07      	ldr	r4, [sp, #28]
 800b4c2:	9704      	str	r7, [sp, #16]
 800b4c4:	4625      	mov	r5, r4
 800b4c6:	e7f3      	b.n	800b4b0 <_dtoa_r+0x928>
 800b4c8:	9b07      	ldr	r3, [sp, #28]
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 8104 	beq.w	800b6dc <_dtoa_r+0xb54>
 800b4d4:	2e00      	cmp	r6, #0
 800b4d6:	dd05      	ble.n	800b4e4 <_dtoa_r+0x95c>
 800b4d8:	4629      	mov	r1, r5
 800b4da:	4632      	mov	r2, r6
 800b4dc:	4658      	mov	r0, fp
 800b4de:	f000 fc25 	bl	800bd2c <__lshift>
 800b4e2:	4605      	mov	r5, r0
 800b4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d05a      	beq.n	800b5a0 <_dtoa_r+0xa18>
 800b4ea:	6869      	ldr	r1, [r5, #4]
 800b4ec:	4658      	mov	r0, fp
 800b4ee:	f000 fa0f 	bl	800b910 <_Balloc>
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	b928      	cbnz	r0, 800b502 <_dtoa_r+0x97a>
 800b4f6:	4b84      	ldr	r3, [pc, #528]	@ (800b708 <_dtoa_r+0xb80>)
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b4fe:	f7ff bb5a 	b.w	800abb6 <_dtoa_r+0x2e>
 800b502:	692a      	ldr	r2, [r5, #16]
 800b504:	3202      	adds	r2, #2
 800b506:	0092      	lsls	r2, r2, #2
 800b508:	f105 010c 	add.w	r1, r5, #12
 800b50c:	300c      	adds	r0, #12
 800b50e:	f000 ffaf 	bl	800c470 <memcpy>
 800b512:	2201      	movs	r2, #1
 800b514:	4631      	mov	r1, r6
 800b516:	4658      	mov	r0, fp
 800b518:	f000 fc08 	bl	800bd2c <__lshift>
 800b51c:	f10a 0301 	add.w	r3, sl, #1
 800b520:	9307      	str	r3, [sp, #28]
 800b522:	9b00      	ldr	r3, [sp, #0]
 800b524:	4453      	add	r3, sl
 800b526:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b528:	9b02      	ldr	r3, [sp, #8]
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	462f      	mov	r7, r5
 800b530:	930a      	str	r3, [sp, #40]	@ 0x28
 800b532:	4605      	mov	r5, r0
 800b534:	9b07      	ldr	r3, [sp, #28]
 800b536:	4621      	mov	r1, r4
 800b538:	3b01      	subs	r3, #1
 800b53a:	4648      	mov	r0, r9
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	f7ff fa9a 	bl	800aa76 <quorem>
 800b542:	4639      	mov	r1, r7
 800b544:	9002      	str	r0, [sp, #8]
 800b546:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b54a:	4648      	mov	r0, r9
 800b54c:	f000 fc5a 	bl	800be04 <__mcmp>
 800b550:	462a      	mov	r2, r5
 800b552:	9008      	str	r0, [sp, #32]
 800b554:	4621      	mov	r1, r4
 800b556:	4658      	mov	r0, fp
 800b558:	f000 fc70 	bl	800be3c <__mdiff>
 800b55c:	68c2      	ldr	r2, [r0, #12]
 800b55e:	4606      	mov	r6, r0
 800b560:	bb02      	cbnz	r2, 800b5a4 <_dtoa_r+0xa1c>
 800b562:	4601      	mov	r1, r0
 800b564:	4648      	mov	r0, r9
 800b566:	f000 fc4d 	bl	800be04 <__mcmp>
 800b56a:	4602      	mov	r2, r0
 800b56c:	4631      	mov	r1, r6
 800b56e:	4658      	mov	r0, fp
 800b570:	920e      	str	r2, [sp, #56]	@ 0x38
 800b572:	f000 fa0d 	bl	800b990 <_Bfree>
 800b576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b578:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b57a:	9e07      	ldr	r6, [sp, #28]
 800b57c:	ea43 0102 	orr.w	r1, r3, r2
 800b580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b582:	4319      	orrs	r1, r3
 800b584:	d110      	bne.n	800b5a8 <_dtoa_r+0xa20>
 800b586:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b58a:	d029      	beq.n	800b5e0 <_dtoa_r+0xa58>
 800b58c:	9b08      	ldr	r3, [sp, #32]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	dd02      	ble.n	800b598 <_dtoa_r+0xa10>
 800b592:	9b02      	ldr	r3, [sp, #8]
 800b594:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b598:	9b00      	ldr	r3, [sp, #0]
 800b59a:	f883 8000 	strb.w	r8, [r3]
 800b59e:	e63f      	b.n	800b220 <_dtoa_r+0x698>
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	e7bb      	b.n	800b51c <_dtoa_r+0x994>
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	e7e1      	b.n	800b56c <_dtoa_r+0x9e4>
 800b5a8:	9b08      	ldr	r3, [sp, #32]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	db04      	blt.n	800b5b8 <_dtoa_r+0xa30>
 800b5ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b5b0:	430b      	orrs	r3, r1
 800b5b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5b4:	430b      	orrs	r3, r1
 800b5b6:	d120      	bne.n	800b5fa <_dtoa_r+0xa72>
 800b5b8:	2a00      	cmp	r2, #0
 800b5ba:	dded      	ble.n	800b598 <_dtoa_r+0xa10>
 800b5bc:	4649      	mov	r1, r9
 800b5be:	2201      	movs	r2, #1
 800b5c0:	4658      	mov	r0, fp
 800b5c2:	f000 fbb3 	bl	800bd2c <__lshift>
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4681      	mov	r9, r0
 800b5ca:	f000 fc1b 	bl	800be04 <__mcmp>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	dc03      	bgt.n	800b5da <_dtoa_r+0xa52>
 800b5d2:	d1e1      	bne.n	800b598 <_dtoa_r+0xa10>
 800b5d4:	f018 0f01 	tst.w	r8, #1
 800b5d8:	d0de      	beq.n	800b598 <_dtoa_r+0xa10>
 800b5da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b5de:	d1d8      	bne.n	800b592 <_dtoa_r+0xa0a>
 800b5e0:	9a00      	ldr	r2, [sp, #0]
 800b5e2:	2339      	movs	r3, #57	@ 0x39
 800b5e4:	7013      	strb	r3, [r2, #0]
 800b5e6:	4633      	mov	r3, r6
 800b5e8:	461e      	mov	r6, r3
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b5f0:	2a39      	cmp	r2, #57	@ 0x39
 800b5f2:	d052      	beq.n	800b69a <_dtoa_r+0xb12>
 800b5f4:	3201      	adds	r2, #1
 800b5f6:	701a      	strb	r2, [r3, #0]
 800b5f8:	e612      	b.n	800b220 <_dtoa_r+0x698>
 800b5fa:	2a00      	cmp	r2, #0
 800b5fc:	dd07      	ble.n	800b60e <_dtoa_r+0xa86>
 800b5fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b602:	d0ed      	beq.n	800b5e0 <_dtoa_r+0xa58>
 800b604:	9a00      	ldr	r2, [sp, #0]
 800b606:	f108 0301 	add.w	r3, r8, #1
 800b60a:	7013      	strb	r3, [r2, #0]
 800b60c:	e608      	b.n	800b220 <_dtoa_r+0x698>
 800b60e:	9b07      	ldr	r3, [sp, #28]
 800b610:	9a07      	ldr	r2, [sp, #28]
 800b612:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b618:	4293      	cmp	r3, r2
 800b61a:	d028      	beq.n	800b66e <_dtoa_r+0xae6>
 800b61c:	4649      	mov	r1, r9
 800b61e:	2300      	movs	r3, #0
 800b620:	220a      	movs	r2, #10
 800b622:	4658      	mov	r0, fp
 800b624:	f000 f9d6 	bl	800b9d4 <__multadd>
 800b628:	42af      	cmp	r7, r5
 800b62a:	4681      	mov	r9, r0
 800b62c:	f04f 0300 	mov.w	r3, #0
 800b630:	f04f 020a 	mov.w	r2, #10
 800b634:	4639      	mov	r1, r7
 800b636:	4658      	mov	r0, fp
 800b638:	d107      	bne.n	800b64a <_dtoa_r+0xac2>
 800b63a:	f000 f9cb 	bl	800b9d4 <__multadd>
 800b63e:	4607      	mov	r7, r0
 800b640:	4605      	mov	r5, r0
 800b642:	9b07      	ldr	r3, [sp, #28]
 800b644:	3301      	adds	r3, #1
 800b646:	9307      	str	r3, [sp, #28]
 800b648:	e774      	b.n	800b534 <_dtoa_r+0x9ac>
 800b64a:	f000 f9c3 	bl	800b9d4 <__multadd>
 800b64e:	4629      	mov	r1, r5
 800b650:	4607      	mov	r7, r0
 800b652:	2300      	movs	r3, #0
 800b654:	220a      	movs	r2, #10
 800b656:	4658      	mov	r0, fp
 800b658:	f000 f9bc 	bl	800b9d4 <__multadd>
 800b65c:	4605      	mov	r5, r0
 800b65e:	e7f0      	b.n	800b642 <_dtoa_r+0xaba>
 800b660:	9b00      	ldr	r3, [sp, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	bfcc      	ite	gt
 800b666:	461e      	movgt	r6, r3
 800b668:	2601      	movle	r6, #1
 800b66a:	4456      	add	r6, sl
 800b66c:	2700      	movs	r7, #0
 800b66e:	4649      	mov	r1, r9
 800b670:	2201      	movs	r2, #1
 800b672:	4658      	mov	r0, fp
 800b674:	f000 fb5a 	bl	800bd2c <__lshift>
 800b678:	4621      	mov	r1, r4
 800b67a:	4681      	mov	r9, r0
 800b67c:	f000 fbc2 	bl	800be04 <__mcmp>
 800b680:	2800      	cmp	r0, #0
 800b682:	dcb0      	bgt.n	800b5e6 <_dtoa_r+0xa5e>
 800b684:	d102      	bne.n	800b68c <_dtoa_r+0xb04>
 800b686:	f018 0f01 	tst.w	r8, #1
 800b68a:	d1ac      	bne.n	800b5e6 <_dtoa_r+0xa5e>
 800b68c:	4633      	mov	r3, r6
 800b68e:	461e      	mov	r6, r3
 800b690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b694:	2a30      	cmp	r2, #48	@ 0x30
 800b696:	d0fa      	beq.n	800b68e <_dtoa_r+0xb06>
 800b698:	e5c2      	b.n	800b220 <_dtoa_r+0x698>
 800b69a:	459a      	cmp	sl, r3
 800b69c:	d1a4      	bne.n	800b5e8 <_dtoa_r+0xa60>
 800b69e:	9b04      	ldr	r3, [sp, #16]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	9304      	str	r3, [sp, #16]
 800b6a4:	2331      	movs	r3, #49	@ 0x31
 800b6a6:	f88a 3000 	strb.w	r3, [sl]
 800b6aa:	e5b9      	b.n	800b220 <_dtoa_r+0x698>
 800b6ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b70c <_dtoa_r+0xb84>
 800b6b2:	b11b      	cbz	r3, 800b6bc <_dtoa_r+0xb34>
 800b6b4:	f10a 0308 	add.w	r3, sl, #8
 800b6b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b6ba:	6013      	str	r3, [r2, #0]
 800b6bc:	4650      	mov	r0, sl
 800b6be:	b019      	add	sp, #100	@ 0x64
 800b6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	f77f ae37 	ble.w	800b33a <_dtoa_r+0x7b2>
 800b6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	e655      	b.n	800b380 <_dtoa_r+0x7f8>
 800b6d4:	9b00      	ldr	r3, [sp, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f77f aed6 	ble.w	800b488 <_dtoa_r+0x900>
 800b6dc:	4656      	mov	r6, sl
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4648      	mov	r0, r9
 800b6e2:	f7ff f9c8 	bl	800aa76 <quorem>
 800b6e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b6ea:	f806 8b01 	strb.w	r8, [r6], #1
 800b6ee:	9b00      	ldr	r3, [sp, #0]
 800b6f0:	eba6 020a 	sub.w	r2, r6, sl
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	ddb3      	ble.n	800b660 <_dtoa_r+0xad8>
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	220a      	movs	r2, #10
 800b6fe:	4658      	mov	r0, fp
 800b700:	f000 f968 	bl	800b9d4 <__multadd>
 800b704:	4681      	mov	r9, r0
 800b706:	e7ea      	b.n	800b6de <_dtoa_r+0xb56>
 800b708:	0800cf88 	.word	0x0800cf88
 800b70c:	0800cf0c 	.word	0x0800cf0c

0800b710 <_free_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4605      	mov	r5, r0
 800b714:	2900      	cmp	r1, #0
 800b716:	d041      	beq.n	800b79c <_free_r+0x8c>
 800b718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b71c:	1f0c      	subs	r4, r1, #4
 800b71e:	2b00      	cmp	r3, #0
 800b720:	bfb8      	it	lt
 800b722:	18e4      	addlt	r4, r4, r3
 800b724:	f000 f8e8 	bl	800b8f8 <__malloc_lock>
 800b728:	4a1d      	ldr	r2, [pc, #116]	@ (800b7a0 <_free_r+0x90>)
 800b72a:	6813      	ldr	r3, [r2, #0]
 800b72c:	b933      	cbnz	r3, 800b73c <_free_r+0x2c>
 800b72e:	6063      	str	r3, [r4, #4]
 800b730:	6014      	str	r4, [r2, #0]
 800b732:	4628      	mov	r0, r5
 800b734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b738:	f000 b8e4 	b.w	800b904 <__malloc_unlock>
 800b73c:	42a3      	cmp	r3, r4
 800b73e:	d908      	bls.n	800b752 <_free_r+0x42>
 800b740:	6820      	ldr	r0, [r4, #0]
 800b742:	1821      	adds	r1, r4, r0
 800b744:	428b      	cmp	r3, r1
 800b746:	bf01      	itttt	eq
 800b748:	6819      	ldreq	r1, [r3, #0]
 800b74a:	685b      	ldreq	r3, [r3, #4]
 800b74c:	1809      	addeq	r1, r1, r0
 800b74e:	6021      	streq	r1, [r4, #0]
 800b750:	e7ed      	b.n	800b72e <_free_r+0x1e>
 800b752:	461a      	mov	r2, r3
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	b10b      	cbz	r3, 800b75c <_free_r+0x4c>
 800b758:	42a3      	cmp	r3, r4
 800b75a:	d9fa      	bls.n	800b752 <_free_r+0x42>
 800b75c:	6811      	ldr	r1, [r2, #0]
 800b75e:	1850      	adds	r0, r2, r1
 800b760:	42a0      	cmp	r0, r4
 800b762:	d10b      	bne.n	800b77c <_free_r+0x6c>
 800b764:	6820      	ldr	r0, [r4, #0]
 800b766:	4401      	add	r1, r0
 800b768:	1850      	adds	r0, r2, r1
 800b76a:	4283      	cmp	r3, r0
 800b76c:	6011      	str	r1, [r2, #0]
 800b76e:	d1e0      	bne.n	800b732 <_free_r+0x22>
 800b770:	6818      	ldr	r0, [r3, #0]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	6053      	str	r3, [r2, #4]
 800b776:	4408      	add	r0, r1
 800b778:	6010      	str	r0, [r2, #0]
 800b77a:	e7da      	b.n	800b732 <_free_r+0x22>
 800b77c:	d902      	bls.n	800b784 <_free_r+0x74>
 800b77e:	230c      	movs	r3, #12
 800b780:	602b      	str	r3, [r5, #0]
 800b782:	e7d6      	b.n	800b732 <_free_r+0x22>
 800b784:	6820      	ldr	r0, [r4, #0]
 800b786:	1821      	adds	r1, r4, r0
 800b788:	428b      	cmp	r3, r1
 800b78a:	bf04      	itt	eq
 800b78c:	6819      	ldreq	r1, [r3, #0]
 800b78e:	685b      	ldreq	r3, [r3, #4]
 800b790:	6063      	str	r3, [r4, #4]
 800b792:	bf04      	itt	eq
 800b794:	1809      	addeq	r1, r1, r0
 800b796:	6021      	streq	r1, [r4, #0]
 800b798:	6054      	str	r4, [r2, #4]
 800b79a:	e7ca      	b.n	800b732 <_free_r+0x22>
 800b79c:	bd38      	pop	{r3, r4, r5, pc}
 800b79e:	bf00      	nop
 800b7a0:	20002244 	.word	0x20002244

0800b7a4 <malloc>:
 800b7a4:	4b02      	ldr	r3, [pc, #8]	@ (800b7b0 <malloc+0xc>)
 800b7a6:	4601      	mov	r1, r0
 800b7a8:	6818      	ldr	r0, [r3, #0]
 800b7aa:	f000 b825 	b.w	800b7f8 <_malloc_r>
 800b7ae:	bf00      	nop
 800b7b0:	20000108 	.word	0x20000108

0800b7b4 <sbrk_aligned>:
 800b7b4:	b570      	push	{r4, r5, r6, lr}
 800b7b6:	4e0f      	ldr	r6, [pc, #60]	@ (800b7f4 <sbrk_aligned+0x40>)
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	6831      	ldr	r1, [r6, #0]
 800b7bc:	4605      	mov	r5, r0
 800b7be:	b911      	cbnz	r1, 800b7c6 <sbrk_aligned+0x12>
 800b7c0:	f000 fe46 	bl	800c450 <_sbrk_r>
 800b7c4:	6030      	str	r0, [r6, #0]
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f000 fe41 	bl	800c450 <_sbrk_r>
 800b7ce:	1c43      	adds	r3, r0, #1
 800b7d0:	d103      	bne.n	800b7da <sbrk_aligned+0x26>
 800b7d2:	f04f 34ff 	mov.w	r4, #4294967295
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	bd70      	pop	{r4, r5, r6, pc}
 800b7da:	1cc4      	adds	r4, r0, #3
 800b7dc:	f024 0403 	bic.w	r4, r4, #3
 800b7e0:	42a0      	cmp	r0, r4
 800b7e2:	d0f8      	beq.n	800b7d6 <sbrk_aligned+0x22>
 800b7e4:	1a21      	subs	r1, r4, r0
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f000 fe32 	bl	800c450 <_sbrk_r>
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	d1f2      	bne.n	800b7d6 <sbrk_aligned+0x22>
 800b7f0:	e7ef      	b.n	800b7d2 <sbrk_aligned+0x1e>
 800b7f2:	bf00      	nop
 800b7f4:	20002240 	.word	0x20002240

0800b7f8 <_malloc_r>:
 800b7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	1ccd      	adds	r5, r1, #3
 800b7fe:	f025 0503 	bic.w	r5, r5, #3
 800b802:	3508      	adds	r5, #8
 800b804:	2d0c      	cmp	r5, #12
 800b806:	bf38      	it	cc
 800b808:	250c      	movcc	r5, #12
 800b80a:	2d00      	cmp	r5, #0
 800b80c:	4606      	mov	r6, r0
 800b80e:	db01      	blt.n	800b814 <_malloc_r+0x1c>
 800b810:	42a9      	cmp	r1, r5
 800b812:	d904      	bls.n	800b81e <_malloc_r+0x26>
 800b814:	230c      	movs	r3, #12
 800b816:	6033      	str	r3, [r6, #0]
 800b818:	2000      	movs	r0, #0
 800b81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b81e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8f4 <_malloc_r+0xfc>
 800b822:	f000 f869 	bl	800b8f8 <__malloc_lock>
 800b826:	f8d8 3000 	ldr.w	r3, [r8]
 800b82a:	461c      	mov	r4, r3
 800b82c:	bb44      	cbnz	r4, 800b880 <_malloc_r+0x88>
 800b82e:	4629      	mov	r1, r5
 800b830:	4630      	mov	r0, r6
 800b832:	f7ff ffbf 	bl	800b7b4 <sbrk_aligned>
 800b836:	1c43      	adds	r3, r0, #1
 800b838:	4604      	mov	r4, r0
 800b83a:	d158      	bne.n	800b8ee <_malloc_r+0xf6>
 800b83c:	f8d8 4000 	ldr.w	r4, [r8]
 800b840:	4627      	mov	r7, r4
 800b842:	2f00      	cmp	r7, #0
 800b844:	d143      	bne.n	800b8ce <_malloc_r+0xd6>
 800b846:	2c00      	cmp	r4, #0
 800b848:	d04b      	beq.n	800b8e2 <_malloc_r+0xea>
 800b84a:	6823      	ldr	r3, [r4, #0]
 800b84c:	4639      	mov	r1, r7
 800b84e:	4630      	mov	r0, r6
 800b850:	eb04 0903 	add.w	r9, r4, r3
 800b854:	f000 fdfc 	bl	800c450 <_sbrk_r>
 800b858:	4581      	cmp	r9, r0
 800b85a:	d142      	bne.n	800b8e2 <_malloc_r+0xea>
 800b85c:	6821      	ldr	r1, [r4, #0]
 800b85e:	1a6d      	subs	r5, r5, r1
 800b860:	4629      	mov	r1, r5
 800b862:	4630      	mov	r0, r6
 800b864:	f7ff ffa6 	bl	800b7b4 <sbrk_aligned>
 800b868:	3001      	adds	r0, #1
 800b86a:	d03a      	beq.n	800b8e2 <_malloc_r+0xea>
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	442b      	add	r3, r5
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	f8d8 3000 	ldr.w	r3, [r8]
 800b876:	685a      	ldr	r2, [r3, #4]
 800b878:	bb62      	cbnz	r2, 800b8d4 <_malloc_r+0xdc>
 800b87a:	f8c8 7000 	str.w	r7, [r8]
 800b87e:	e00f      	b.n	800b8a0 <_malloc_r+0xa8>
 800b880:	6822      	ldr	r2, [r4, #0]
 800b882:	1b52      	subs	r2, r2, r5
 800b884:	d420      	bmi.n	800b8c8 <_malloc_r+0xd0>
 800b886:	2a0b      	cmp	r2, #11
 800b888:	d917      	bls.n	800b8ba <_malloc_r+0xc2>
 800b88a:	1961      	adds	r1, r4, r5
 800b88c:	42a3      	cmp	r3, r4
 800b88e:	6025      	str	r5, [r4, #0]
 800b890:	bf18      	it	ne
 800b892:	6059      	strne	r1, [r3, #4]
 800b894:	6863      	ldr	r3, [r4, #4]
 800b896:	bf08      	it	eq
 800b898:	f8c8 1000 	streq.w	r1, [r8]
 800b89c:	5162      	str	r2, [r4, r5]
 800b89e:	604b      	str	r3, [r1, #4]
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f000 f82f 	bl	800b904 <__malloc_unlock>
 800b8a6:	f104 000b 	add.w	r0, r4, #11
 800b8aa:	1d23      	adds	r3, r4, #4
 800b8ac:	f020 0007 	bic.w	r0, r0, #7
 800b8b0:	1ac2      	subs	r2, r0, r3
 800b8b2:	bf1c      	itt	ne
 800b8b4:	1a1b      	subne	r3, r3, r0
 800b8b6:	50a3      	strne	r3, [r4, r2]
 800b8b8:	e7af      	b.n	800b81a <_malloc_r+0x22>
 800b8ba:	6862      	ldr	r2, [r4, #4]
 800b8bc:	42a3      	cmp	r3, r4
 800b8be:	bf0c      	ite	eq
 800b8c0:	f8c8 2000 	streq.w	r2, [r8]
 800b8c4:	605a      	strne	r2, [r3, #4]
 800b8c6:	e7eb      	b.n	800b8a0 <_malloc_r+0xa8>
 800b8c8:	4623      	mov	r3, r4
 800b8ca:	6864      	ldr	r4, [r4, #4]
 800b8cc:	e7ae      	b.n	800b82c <_malloc_r+0x34>
 800b8ce:	463c      	mov	r4, r7
 800b8d0:	687f      	ldr	r7, [r7, #4]
 800b8d2:	e7b6      	b.n	800b842 <_malloc_r+0x4a>
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	42a3      	cmp	r3, r4
 800b8da:	d1fb      	bne.n	800b8d4 <_malloc_r+0xdc>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	6053      	str	r3, [r2, #4]
 800b8e0:	e7de      	b.n	800b8a0 <_malloc_r+0xa8>
 800b8e2:	230c      	movs	r3, #12
 800b8e4:	6033      	str	r3, [r6, #0]
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f000 f80c 	bl	800b904 <__malloc_unlock>
 800b8ec:	e794      	b.n	800b818 <_malloc_r+0x20>
 800b8ee:	6005      	str	r5, [r0, #0]
 800b8f0:	e7d6      	b.n	800b8a0 <_malloc_r+0xa8>
 800b8f2:	bf00      	nop
 800b8f4:	20002244 	.word	0x20002244

0800b8f8 <__malloc_lock>:
 800b8f8:	4801      	ldr	r0, [pc, #4]	@ (800b900 <__malloc_lock+0x8>)
 800b8fa:	f7ff b8ba 	b.w	800aa72 <__retarget_lock_acquire_recursive>
 800b8fe:	bf00      	nop
 800b900:	2000223c 	.word	0x2000223c

0800b904 <__malloc_unlock>:
 800b904:	4801      	ldr	r0, [pc, #4]	@ (800b90c <__malloc_unlock+0x8>)
 800b906:	f7ff b8b5 	b.w	800aa74 <__retarget_lock_release_recursive>
 800b90a:	bf00      	nop
 800b90c:	2000223c 	.word	0x2000223c

0800b910 <_Balloc>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	69c6      	ldr	r6, [r0, #28]
 800b914:	4604      	mov	r4, r0
 800b916:	460d      	mov	r5, r1
 800b918:	b976      	cbnz	r6, 800b938 <_Balloc+0x28>
 800b91a:	2010      	movs	r0, #16
 800b91c:	f7ff ff42 	bl	800b7a4 <malloc>
 800b920:	4602      	mov	r2, r0
 800b922:	61e0      	str	r0, [r4, #28]
 800b924:	b920      	cbnz	r0, 800b930 <_Balloc+0x20>
 800b926:	4b18      	ldr	r3, [pc, #96]	@ (800b988 <_Balloc+0x78>)
 800b928:	4818      	ldr	r0, [pc, #96]	@ (800b98c <_Balloc+0x7c>)
 800b92a:	216b      	movs	r1, #107	@ 0x6b
 800b92c:	f000 fdae 	bl	800c48c <__assert_func>
 800b930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b934:	6006      	str	r6, [r0, #0]
 800b936:	60c6      	str	r6, [r0, #12]
 800b938:	69e6      	ldr	r6, [r4, #28]
 800b93a:	68f3      	ldr	r3, [r6, #12]
 800b93c:	b183      	cbz	r3, 800b960 <_Balloc+0x50>
 800b93e:	69e3      	ldr	r3, [r4, #28]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b946:	b9b8      	cbnz	r0, 800b978 <_Balloc+0x68>
 800b948:	2101      	movs	r1, #1
 800b94a:	fa01 f605 	lsl.w	r6, r1, r5
 800b94e:	1d72      	adds	r2, r6, #5
 800b950:	0092      	lsls	r2, r2, #2
 800b952:	4620      	mov	r0, r4
 800b954:	f000 fdb8 	bl	800c4c8 <_calloc_r>
 800b958:	b160      	cbz	r0, 800b974 <_Balloc+0x64>
 800b95a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b95e:	e00e      	b.n	800b97e <_Balloc+0x6e>
 800b960:	2221      	movs	r2, #33	@ 0x21
 800b962:	2104      	movs	r1, #4
 800b964:	4620      	mov	r0, r4
 800b966:	f000 fdaf 	bl	800c4c8 <_calloc_r>
 800b96a:	69e3      	ldr	r3, [r4, #28]
 800b96c:	60f0      	str	r0, [r6, #12]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e4      	bne.n	800b93e <_Balloc+0x2e>
 800b974:	2000      	movs	r0, #0
 800b976:	bd70      	pop	{r4, r5, r6, pc}
 800b978:	6802      	ldr	r2, [r0, #0]
 800b97a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b97e:	2300      	movs	r3, #0
 800b980:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b984:	e7f7      	b.n	800b976 <_Balloc+0x66>
 800b986:	bf00      	nop
 800b988:	0800cf19 	.word	0x0800cf19
 800b98c:	0800cf99 	.word	0x0800cf99

0800b990 <_Bfree>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	69c6      	ldr	r6, [r0, #28]
 800b994:	4605      	mov	r5, r0
 800b996:	460c      	mov	r4, r1
 800b998:	b976      	cbnz	r6, 800b9b8 <_Bfree+0x28>
 800b99a:	2010      	movs	r0, #16
 800b99c:	f7ff ff02 	bl	800b7a4 <malloc>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	61e8      	str	r0, [r5, #28]
 800b9a4:	b920      	cbnz	r0, 800b9b0 <_Bfree+0x20>
 800b9a6:	4b09      	ldr	r3, [pc, #36]	@ (800b9cc <_Bfree+0x3c>)
 800b9a8:	4809      	ldr	r0, [pc, #36]	@ (800b9d0 <_Bfree+0x40>)
 800b9aa:	218f      	movs	r1, #143	@ 0x8f
 800b9ac:	f000 fd6e 	bl	800c48c <__assert_func>
 800b9b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9b4:	6006      	str	r6, [r0, #0]
 800b9b6:	60c6      	str	r6, [r0, #12]
 800b9b8:	b13c      	cbz	r4, 800b9ca <_Bfree+0x3a>
 800b9ba:	69eb      	ldr	r3, [r5, #28]
 800b9bc:	6862      	ldr	r2, [r4, #4]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9c4:	6021      	str	r1, [r4, #0]
 800b9c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9ca:	bd70      	pop	{r4, r5, r6, pc}
 800b9cc:	0800cf19 	.word	0x0800cf19
 800b9d0:	0800cf99 	.word	0x0800cf99

0800b9d4 <__multadd>:
 800b9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d8:	690d      	ldr	r5, [r1, #16]
 800b9da:	4607      	mov	r7, r0
 800b9dc:	460c      	mov	r4, r1
 800b9de:	461e      	mov	r6, r3
 800b9e0:	f101 0c14 	add.w	ip, r1, #20
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	f8dc 3000 	ldr.w	r3, [ip]
 800b9ea:	b299      	uxth	r1, r3
 800b9ec:	fb02 6101 	mla	r1, r2, r1, r6
 800b9f0:	0c1e      	lsrs	r6, r3, #16
 800b9f2:	0c0b      	lsrs	r3, r1, #16
 800b9f4:	fb02 3306 	mla	r3, r2, r6, r3
 800b9f8:	b289      	uxth	r1, r1
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba00:	4285      	cmp	r5, r0
 800ba02:	f84c 1b04 	str.w	r1, [ip], #4
 800ba06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba0a:	dcec      	bgt.n	800b9e6 <__multadd+0x12>
 800ba0c:	b30e      	cbz	r6, 800ba52 <__multadd+0x7e>
 800ba0e:	68a3      	ldr	r3, [r4, #8]
 800ba10:	42ab      	cmp	r3, r5
 800ba12:	dc19      	bgt.n	800ba48 <__multadd+0x74>
 800ba14:	6861      	ldr	r1, [r4, #4]
 800ba16:	4638      	mov	r0, r7
 800ba18:	3101      	adds	r1, #1
 800ba1a:	f7ff ff79 	bl	800b910 <_Balloc>
 800ba1e:	4680      	mov	r8, r0
 800ba20:	b928      	cbnz	r0, 800ba2e <__multadd+0x5a>
 800ba22:	4602      	mov	r2, r0
 800ba24:	4b0c      	ldr	r3, [pc, #48]	@ (800ba58 <__multadd+0x84>)
 800ba26:	480d      	ldr	r0, [pc, #52]	@ (800ba5c <__multadd+0x88>)
 800ba28:	21ba      	movs	r1, #186	@ 0xba
 800ba2a:	f000 fd2f 	bl	800c48c <__assert_func>
 800ba2e:	6922      	ldr	r2, [r4, #16]
 800ba30:	3202      	adds	r2, #2
 800ba32:	f104 010c 	add.w	r1, r4, #12
 800ba36:	0092      	lsls	r2, r2, #2
 800ba38:	300c      	adds	r0, #12
 800ba3a:	f000 fd19 	bl	800c470 <memcpy>
 800ba3e:	4621      	mov	r1, r4
 800ba40:	4638      	mov	r0, r7
 800ba42:	f7ff ffa5 	bl	800b990 <_Bfree>
 800ba46:	4644      	mov	r4, r8
 800ba48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba4c:	3501      	adds	r5, #1
 800ba4e:	615e      	str	r6, [r3, #20]
 800ba50:	6125      	str	r5, [r4, #16]
 800ba52:	4620      	mov	r0, r4
 800ba54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba58:	0800cf88 	.word	0x0800cf88
 800ba5c:	0800cf99 	.word	0x0800cf99

0800ba60 <__hi0bits>:
 800ba60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba64:	4603      	mov	r3, r0
 800ba66:	bf36      	itet	cc
 800ba68:	0403      	lslcc	r3, r0, #16
 800ba6a:	2000      	movcs	r0, #0
 800ba6c:	2010      	movcc	r0, #16
 800ba6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba72:	bf3c      	itt	cc
 800ba74:	021b      	lslcc	r3, r3, #8
 800ba76:	3008      	addcc	r0, #8
 800ba78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba7c:	bf3c      	itt	cc
 800ba7e:	011b      	lslcc	r3, r3, #4
 800ba80:	3004      	addcc	r0, #4
 800ba82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba86:	bf3c      	itt	cc
 800ba88:	009b      	lslcc	r3, r3, #2
 800ba8a:	3002      	addcc	r0, #2
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	db05      	blt.n	800ba9c <__hi0bits+0x3c>
 800ba90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba94:	f100 0001 	add.w	r0, r0, #1
 800ba98:	bf08      	it	eq
 800ba9a:	2020      	moveq	r0, #32
 800ba9c:	4770      	bx	lr

0800ba9e <__lo0bits>:
 800ba9e:	6803      	ldr	r3, [r0, #0]
 800baa0:	4602      	mov	r2, r0
 800baa2:	f013 0007 	ands.w	r0, r3, #7
 800baa6:	d00b      	beq.n	800bac0 <__lo0bits+0x22>
 800baa8:	07d9      	lsls	r1, r3, #31
 800baaa:	d421      	bmi.n	800baf0 <__lo0bits+0x52>
 800baac:	0798      	lsls	r0, r3, #30
 800baae:	bf49      	itett	mi
 800bab0:	085b      	lsrmi	r3, r3, #1
 800bab2:	089b      	lsrpl	r3, r3, #2
 800bab4:	2001      	movmi	r0, #1
 800bab6:	6013      	strmi	r3, [r2, #0]
 800bab8:	bf5c      	itt	pl
 800baba:	6013      	strpl	r3, [r2, #0]
 800babc:	2002      	movpl	r0, #2
 800babe:	4770      	bx	lr
 800bac0:	b299      	uxth	r1, r3
 800bac2:	b909      	cbnz	r1, 800bac8 <__lo0bits+0x2a>
 800bac4:	0c1b      	lsrs	r3, r3, #16
 800bac6:	2010      	movs	r0, #16
 800bac8:	b2d9      	uxtb	r1, r3
 800baca:	b909      	cbnz	r1, 800bad0 <__lo0bits+0x32>
 800bacc:	3008      	adds	r0, #8
 800bace:	0a1b      	lsrs	r3, r3, #8
 800bad0:	0719      	lsls	r1, r3, #28
 800bad2:	bf04      	itt	eq
 800bad4:	091b      	lsreq	r3, r3, #4
 800bad6:	3004      	addeq	r0, #4
 800bad8:	0799      	lsls	r1, r3, #30
 800bada:	bf04      	itt	eq
 800badc:	089b      	lsreq	r3, r3, #2
 800bade:	3002      	addeq	r0, #2
 800bae0:	07d9      	lsls	r1, r3, #31
 800bae2:	d403      	bmi.n	800baec <__lo0bits+0x4e>
 800bae4:	085b      	lsrs	r3, r3, #1
 800bae6:	f100 0001 	add.w	r0, r0, #1
 800baea:	d003      	beq.n	800baf4 <__lo0bits+0x56>
 800baec:	6013      	str	r3, [r2, #0]
 800baee:	4770      	bx	lr
 800baf0:	2000      	movs	r0, #0
 800baf2:	4770      	bx	lr
 800baf4:	2020      	movs	r0, #32
 800baf6:	4770      	bx	lr

0800baf8 <__i2b>:
 800baf8:	b510      	push	{r4, lr}
 800bafa:	460c      	mov	r4, r1
 800bafc:	2101      	movs	r1, #1
 800bafe:	f7ff ff07 	bl	800b910 <_Balloc>
 800bb02:	4602      	mov	r2, r0
 800bb04:	b928      	cbnz	r0, 800bb12 <__i2b+0x1a>
 800bb06:	4b05      	ldr	r3, [pc, #20]	@ (800bb1c <__i2b+0x24>)
 800bb08:	4805      	ldr	r0, [pc, #20]	@ (800bb20 <__i2b+0x28>)
 800bb0a:	f240 1145 	movw	r1, #325	@ 0x145
 800bb0e:	f000 fcbd 	bl	800c48c <__assert_func>
 800bb12:	2301      	movs	r3, #1
 800bb14:	6144      	str	r4, [r0, #20]
 800bb16:	6103      	str	r3, [r0, #16]
 800bb18:	bd10      	pop	{r4, pc}
 800bb1a:	bf00      	nop
 800bb1c:	0800cf88 	.word	0x0800cf88
 800bb20:	0800cf99 	.word	0x0800cf99

0800bb24 <__multiply>:
 800bb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb28:	4614      	mov	r4, r2
 800bb2a:	690a      	ldr	r2, [r1, #16]
 800bb2c:	6923      	ldr	r3, [r4, #16]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	bfa8      	it	ge
 800bb32:	4623      	movge	r3, r4
 800bb34:	460f      	mov	r7, r1
 800bb36:	bfa4      	itt	ge
 800bb38:	460c      	movge	r4, r1
 800bb3a:	461f      	movge	r7, r3
 800bb3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bb40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bb44:	68a3      	ldr	r3, [r4, #8]
 800bb46:	6861      	ldr	r1, [r4, #4]
 800bb48:	eb0a 0609 	add.w	r6, sl, r9
 800bb4c:	42b3      	cmp	r3, r6
 800bb4e:	b085      	sub	sp, #20
 800bb50:	bfb8      	it	lt
 800bb52:	3101      	addlt	r1, #1
 800bb54:	f7ff fedc 	bl	800b910 <_Balloc>
 800bb58:	b930      	cbnz	r0, 800bb68 <__multiply+0x44>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	4b44      	ldr	r3, [pc, #272]	@ (800bc70 <__multiply+0x14c>)
 800bb5e:	4845      	ldr	r0, [pc, #276]	@ (800bc74 <__multiply+0x150>)
 800bb60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb64:	f000 fc92 	bl	800c48c <__assert_func>
 800bb68:	f100 0514 	add.w	r5, r0, #20
 800bb6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb70:	462b      	mov	r3, r5
 800bb72:	2200      	movs	r2, #0
 800bb74:	4543      	cmp	r3, r8
 800bb76:	d321      	bcc.n	800bbbc <__multiply+0x98>
 800bb78:	f107 0114 	add.w	r1, r7, #20
 800bb7c:	f104 0214 	add.w	r2, r4, #20
 800bb80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bb84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bb88:	9302      	str	r3, [sp, #8]
 800bb8a:	1b13      	subs	r3, r2, r4
 800bb8c:	3b15      	subs	r3, #21
 800bb8e:	f023 0303 	bic.w	r3, r3, #3
 800bb92:	3304      	adds	r3, #4
 800bb94:	f104 0715 	add.w	r7, r4, #21
 800bb98:	42ba      	cmp	r2, r7
 800bb9a:	bf38      	it	cc
 800bb9c:	2304      	movcc	r3, #4
 800bb9e:	9301      	str	r3, [sp, #4]
 800bba0:	9b02      	ldr	r3, [sp, #8]
 800bba2:	9103      	str	r1, [sp, #12]
 800bba4:	428b      	cmp	r3, r1
 800bba6:	d80c      	bhi.n	800bbc2 <__multiply+0x9e>
 800bba8:	2e00      	cmp	r6, #0
 800bbaa:	dd03      	ble.n	800bbb4 <__multiply+0x90>
 800bbac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d05b      	beq.n	800bc6c <__multiply+0x148>
 800bbb4:	6106      	str	r6, [r0, #16]
 800bbb6:	b005      	add	sp, #20
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	f843 2b04 	str.w	r2, [r3], #4
 800bbc0:	e7d8      	b.n	800bb74 <__multiply+0x50>
 800bbc2:	f8b1 a000 	ldrh.w	sl, [r1]
 800bbc6:	f1ba 0f00 	cmp.w	sl, #0
 800bbca:	d024      	beq.n	800bc16 <__multiply+0xf2>
 800bbcc:	f104 0e14 	add.w	lr, r4, #20
 800bbd0:	46a9      	mov	r9, r5
 800bbd2:	f04f 0c00 	mov.w	ip, #0
 800bbd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbda:	f8d9 3000 	ldr.w	r3, [r9]
 800bbde:	fa1f fb87 	uxth.w	fp, r7
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	fb0a 330b 	mla	r3, sl, fp, r3
 800bbe8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bbec:	f8d9 7000 	ldr.w	r7, [r9]
 800bbf0:	4463      	add	r3, ip
 800bbf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bbf6:	fb0a c70b 	mla	r7, sl, fp, ip
 800bbfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc04:	4572      	cmp	r2, lr
 800bc06:	f849 3b04 	str.w	r3, [r9], #4
 800bc0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc0e:	d8e2      	bhi.n	800bbd6 <__multiply+0xb2>
 800bc10:	9b01      	ldr	r3, [sp, #4]
 800bc12:	f845 c003 	str.w	ip, [r5, r3]
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bc1c:	3104      	adds	r1, #4
 800bc1e:	f1b9 0f00 	cmp.w	r9, #0
 800bc22:	d021      	beq.n	800bc68 <__multiply+0x144>
 800bc24:	682b      	ldr	r3, [r5, #0]
 800bc26:	f104 0c14 	add.w	ip, r4, #20
 800bc2a:	46ae      	mov	lr, r5
 800bc2c:	f04f 0a00 	mov.w	sl, #0
 800bc30:	f8bc b000 	ldrh.w	fp, [ip]
 800bc34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bc38:	fb09 770b 	mla	r7, r9, fp, r7
 800bc3c:	4457      	add	r7, sl
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc44:	f84e 3b04 	str.w	r3, [lr], #4
 800bc48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc50:	f8be 3000 	ldrh.w	r3, [lr]
 800bc54:	fb09 330a 	mla	r3, r9, sl, r3
 800bc58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bc5c:	4562      	cmp	r2, ip
 800bc5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc62:	d8e5      	bhi.n	800bc30 <__multiply+0x10c>
 800bc64:	9f01      	ldr	r7, [sp, #4]
 800bc66:	51eb      	str	r3, [r5, r7]
 800bc68:	3504      	adds	r5, #4
 800bc6a:	e799      	b.n	800bba0 <__multiply+0x7c>
 800bc6c:	3e01      	subs	r6, #1
 800bc6e:	e79b      	b.n	800bba8 <__multiply+0x84>
 800bc70:	0800cf88 	.word	0x0800cf88
 800bc74:	0800cf99 	.word	0x0800cf99

0800bc78 <__pow5mult>:
 800bc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc7c:	4615      	mov	r5, r2
 800bc7e:	f012 0203 	ands.w	r2, r2, #3
 800bc82:	4607      	mov	r7, r0
 800bc84:	460e      	mov	r6, r1
 800bc86:	d007      	beq.n	800bc98 <__pow5mult+0x20>
 800bc88:	4c25      	ldr	r4, [pc, #148]	@ (800bd20 <__pow5mult+0xa8>)
 800bc8a:	3a01      	subs	r2, #1
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc92:	f7ff fe9f 	bl	800b9d4 <__multadd>
 800bc96:	4606      	mov	r6, r0
 800bc98:	10ad      	asrs	r5, r5, #2
 800bc9a:	d03d      	beq.n	800bd18 <__pow5mult+0xa0>
 800bc9c:	69fc      	ldr	r4, [r7, #28]
 800bc9e:	b97c      	cbnz	r4, 800bcc0 <__pow5mult+0x48>
 800bca0:	2010      	movs	r0, #16
 800bca2:	f7ff fd7f 	bl	800b7a4 <malloc>
 800bca6:	4602      	mov	r2, r0
 800bca8:	61f8      	str	r0, [r7, #28]
 800bcaa:	b928      	cbnz	r0, 800bcb8 <__pow5mult+0x40>
 800bcac:	4b1d      	ldr	r3, [pc, #116]	@ (800bd24 <__pow5mult+0xac>)
 800bcae:	481e      	ldr	r0, [pc, #120]	@ (800bd28 <__pow5mult+0xb0>)
 800bcb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bcb4:	f000 fbea 	bl	800c48c <__assert_func>
 800bcb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcbc:	6004      	str	r4, [r0, #0]
 800bcbe:	60c4      	str	r4, [r0, #12]
 800bcc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bcc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcc8:	b94c      	cbnz	r4, 800bcde <__pow5mult+0x66>
 800bcca:	f240 2171 	movw	r1, #625	@ 0x271
 800bcce:	4638      	mov	r0, r7
 800bcd0:	f7ff ff12 	bl	800baf8 <__i2b>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcda:	4604      	mov	r4, r0
 800bcdc:	6003      	str	r3, [r0, #0]
 800bcde:	f04f 0900 	mov.w	r9, #0
 800bce2:	07eb      	lsls	r3, r5, #31
 800bce4:	d50a      	bpl.n	800bcfc <__pow5mult+0x84>
 800bce6:	4631      	mov	r1, r6
 800bce8:	4622      	mov	r2, r4
 800bcea:	4638      	mov	r0, r7
 800bcec:	f7ff ff1a 	bl	800bb24 <__multiply>
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	4680      	mov	r8, r0
 800bcf4:	4638      	mov	r0, r7
 800bcf6:	f7ff fe4b 	bl	800b990 <_Bfree>
 800bcfa:	4646      	mov	r6, r8
 800bcfc:	106d      	asrs	r5, r5, #1
 800bcfe:	d00b      	beq.n	800bd18 <__pow5mult+0xa0>
 800bd00:	6820      	ldr	r0, [r4, #0]
 800bd02:	b938      	cbnz	r0, 800bd14 <__pow5mult+0x9c>
 800bd04:	4622      	mov	r2, r4
 800bd06:	4621      	mov	r1, r4
 800bd08:	4638      	mov	r0, r7
 800bd0a:	f7ff ff0b 	bl	800bb24 <__multiply>
 800bd0e:	6020      	str	r0, [r4, #0]
 800bd10:	f8c0 9000 	str.w	r9, [r0]
 800bd14:	4604      	mov	r4, r0
 800bd16:	e7e4      	b.n	800bce2 <__pow5mult+0x6a>
 800bd18:	4630      	mov	r0, r6
 800bd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd1e:	bf00      	nop
 800bd20:	0800cff4 	.word	0x0800cff4
 800bd24:	0800cf19 	.word	0x0800cf19
 800bd28:	0800cf99 	.word	0x0800cf99

0800bd2c <__lshift>:
 800bd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd30:	460c      	mov	r4, r1
 800bd32:	6849      	ldr	r1, [r1, #4]
 800bd34:	6923      	ldr	r3, [r4, #16]
 800bd36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd3a:	68a3      	ldr	r3, [r4, #8]
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	4691      	mov	r9, r2
 800bd40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd44:	f108 0601 	add.w	r6, r8, #1
 800bd48:	42b3      	cmp	r3, r6
 800bd4a:	db0b      	blt.n	800bd64 <__lshift+0x38>
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	f7ff fddf 	bl	800b910 <_Balloc>
 800bd52:	4605      	mov	r5, r0
 800bd54:	b948      	cbnz	r0, 800bd6a <__lshift+0x3e>
 800bd56:	4602      	mov	r2, r0
 800bd58:	4b28      	ldr	r3, [pc, #160]	@ (800bdfc <__lshift+0xd0>)
 800bd5a:	4829      	ldr	r0, [pc, #164]	@ (800be00 <__lshift+0xd4>)
 800bd5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd60:	f000 fb94 	bl	800c48c <__assert_func>
 800bd64:	3101      	adds	r1, #1
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	e7ee      	b.n	800bd48 <__lshift+0x1c>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f100 0114 	add.w	r1, r0, #20
 800bd70:	f100 0210 	add.w	r2, r0, #16
 800bd74:	4618      	mov	r0, r3
 800bd76:	4553      	cmp	r3, sl
 800bd78:	db33      	blt.n	800bde2 <__lshift+0xb6>
 800bd7a:	6920      	ldr	r0, [r4, #16]
 800bd7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd80:	f104 0314 	add.w	r3, r4, #20
 800bd84:	f019 091f 	ands.w	r9, r9, #31
 800bd88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd90:	d02b      	beq.n	800bdea <__lshift+0xbe>
 800bd92:	f1c9 0e20 	rsb	lr, r9, #32
 800bd96:	468a      	mov	sl, r1
 800bd98:	2200      	movs	r2, #0
 800bd9a:	6818      	ldr	r0, [r3, #0]
 800bd9c:	fa00 f009 	lsl.w	r0, r0, r9
 800bda0:	4310      	orrs	r0, r2
 800bda2:	f84a 0b04 	str.w	r0, [sl], #4
 800bda6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdaa:	459c      	cmp	ip, r3
 800bdac:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdb0:	d8f3      	bhi.n	800bd9a <__lshift+0x6e>
 800bdb2:	ebac 0304 	sub.w	r3, ip, r4
 800bdb6:	3b15      	subs	r3, #21
 800bdb8:	f023 0303 	bic.w	r3, r3, #3
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	f104 0015 	add.w	r0, r4, #21
 800bdc2:	4584      	cmp	ip, r0
 800bdc4:	bf38      	it	cc
 800bdc6:	2304      	movcc	r3, #4
 800bdc8:	50ca      	str	r2, [r1, r3]
 800bdca:	b10a      	cbz	r2, 800bdd0 <__lshift+0xa4>
 800bdcc:	f108 0602 	add.w	r6, r8, #2
 800bdd0:	3e01      	subs	r6, #1
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	612e      	str	r6, [r5, #16]
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	f7ff fdda 	bl	800b990 <_Bfree>
 800bddc:	4628      	mov	r0, r5
 800bdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bde6:	3301      	adds	r3, #1
 800bde8:	e7c5      	b.n	800bd76 <__lshift+0x4a>
 800bdea:	3904      	subs	r1, #4
 800bdec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdf4:	459c      	cmp	ip, r3
 800bdf6:	d8f9      	bhi.n	800bdec <__lshift+0xc0>
 800bdf8:	e7ea      	b.n	800bdd0 <__lshift+0xa4>
 800bdfa:	bf00      	nop
 800bdfc:	0800cf88 	.word	0x0800cf88
 800be00:	0800cf99 	.word	0x0800cf99

0800be04 <__mcmp>:
 800be04:	690a      	ldr	r2, [r1, #16]
 800be06:	4603      	mov	r3, r0
 800be08:	6900      	ldr	r0, [r0, #16]
 800be0a:	1a80      	subs	r0, r0, r2
 800be0c:	b530      	push	{r4, r5, lr}
 800be0e:	d10e      	bne.n	800be2e <__mcmp+0x2a>
 800be10:	3314      	adds	r3, #20
 800be12:	3114      	adds	r1, #20
 800be14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be24:	4295      	cmp	r5, r2
 800be26:	d003      	beq.n	800be30 <__mcmp+0x2c>
 800be28:	d205      	bcs.n	800be36 <__mcmp+0x32>
 800be2a:	f04f 30ff 	mov.w	r0, #4294967295
 800be2e:	bd30      	pop	{r4, r5, pc}
 800be30:	42a3      	cmp	r3, r4
 800be32:	d3f3      	bcc.n	800be1c <__mcmp+0x18>
 800be34:	e7fb      	b.n	800be2e <__mcmp+0x2a>
 800be36:	2001      	movs	r0, #1
 800be38:	e7f9      	b.n	800be2e <__mcmp+0x2a>
	...

0800be3c <__mdiff>:
 800be3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be40:	4689      	mov	r9, r1
 800be42:	4606      	mov	r6, r0
 800be44:	4611      	mov	r1, r2
 800be46:	4648      	mov	r0, r9
 800be48:	4614      	mov	r4, r2
 800be4a:	f7ff ffdb 	bl	800be04 <__mcmp>
 800be4e:	1e05      	subs	r5, r0, #0
 800be50:	d112      	bne.n	800be78 <__mdiff+0x3c>
 800be52:	4629      	mov	r1, r5
 800be54:	4630      	mov	r0, r6
 800be56:	f7ff fd5b 	bl	800b910 <_Balloc>
 800be5a:	4602      	mov	r2, r0
 800be5c:	b928      	cbnz	r0, 800be6a <__mdiff+0x2e>
 800be5e:	4b3f      	ldr	r3, [pc, #252]	@ (800bf5c <__mdiff+0x120>)
 800be60:	f240 2137 	movw	r1, #567	@ 0x237
 800be64:	483e      	ldr	r0, [pc, #248]	@ (800bf60 <__mdiff+0x124>)
 800be66:	f000 fb11 	bl	800c48c <__assert_func>
 800be6a:	2301      	movs	r3, #1
 800be6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be70:	4610      	mov	r0, r2
 800be72:	b003      	add	sp, #12
 800be74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be78:	bfbc      	itt	lt
 800be7a:	464b      	movlt	r3, r9
 800be7c:	46a1      	movlt	r9, r4
 800be7e:	4630      	mov	r0, r6
 800be80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be84:	bfba      	itte	lt
 800be86:	461c      	movlt	r4, r3
 800be88:	2501      	movlt	r5, #1
 800be8a:	2500      	movge	r5, #0
 800be8c:	f7ff fd40 	bl	800b910 <_Balloc>
 800be90:	4602      	mov	r2, r0
 800be92:	b918      	cbnz	r0, 800be9c <__mdiff+0x60>
 800be94:	4b31      	ldr	r3, [pc, #196]	@ (800bf5c <__mdiff+0x120>)
 800be96:	f240 2145 	movw	r1, #581	@ 0x245
 800be9a:	e7e3      	b.n	800be64 <__mdiff+0x28>
 800be9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bea0:	6926      	ldr	r6, [r4, #16]
 800bea2:	60c5      	str	r5, [r0, #12]
 800bea4:	f109 0310 	add.w	r3, r9, #16
 800bea8:	f109 0514 	add.w	r5, r9, #20
 800beac:	f104 0e14 	add.w	lr, r4, #20
 800beb0:	f100 0b14 	add.w	fp, r0, #20
 800beb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800beb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bebc:	9301      	str	r3, [sp, #4]
 800bebe:	46d9      	mov	r9, fp
 800bec0:	f04f 0c00 	mov.w	ip, #0
 800bec4:	9b01      	ldr	r3, [sp, #4]
 800bec6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800beca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bece:	9301      	str	r3, [sp, #4]
 800bed0:	fa1f f38a 	uxth.w	r3, sl
 800bed4:	4619      	mov	r1, r3
 800bed6:	b283      	uxth	r3, r0
 800bed8:	1acb      	subs	r3, r1, r3
 800beda:	0c00      	lsrs	r0, r0, #16
 800bedc:	4463      	add	r3, ip
 800bede:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bee2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800beec:	4576      	cmp	r6, lr
 800beee:	f849 3b04 	str.w	r3, [r9], #4
 800bef2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bef6:	d8e5      	bhi.n	800bec4 <__mdiff+0x88>
 800bef8:	1b33      	subs	r3, r6, r4
 800befa:	3b15      	subs	r3, #21
 800befc:	f023 0303 	bic.w	r3, r3, #3
 800bf00:	3415      	adds	r4, #21
 800bf02:	3304      	adds	r3, #4
 800bf04:	42a6      	cmp	r6, r4
 800bf06:	bf38      	it	cc
 800bf08:	2304      	movcc	r3, #4
 800bf0a:	441d      	add	r5, r3
 800bf0c:	445b      	add	r3, fp
 800bf0e:	461e      	mov	r6, r3
 800bf10:	462c      	mov	r4, r5
 800bf12:	4544      	cmp	r4, r8
 800bf14:	d30e      	bcc.n	800bf34 <__mdiff+0xf8>
 800bf16:	f108 0103 	add.w	r1, r8, #3
 800bf1a:	1b49      	subs	r1, r1, r5
 800bf1c:	f021 0103 	bic.w	r1, r1, #3
 800bf20:	3d03      	subs	r5, #3
 800bf22:	45a8      	cmp	r8, r5
 800bf24:	bf38      	it	cc
 800bf26:	2100      	movcc	r1, #0
 800bf28:	440b      	add	r3, r1
 800bf2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf2e:	b191      	cbz	r1, 800bf56 <__mdiff+0x11a>
 800bf30:	6117      	str	r7, [r2, #16]
 800bf32:	e79d      	b.n	800be70 <__mdiff+0x34>
 800bf34:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf38:	46e6      	mov	lr, ip
 800bf3a:	0c08      	lsrs	r0, r1, #16
 800bf3c:	fa1c fc81 	uxtah	ip, ip, r1
 800bf40:	4471      	add	r1, lr
 800bf42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf46:	b289      	uxth	r1, r1
 800bf48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf4c:	f846 1b04 	str.w	r1, [r6], #4
 800bf50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf54:	e7dd      	b.n	800bf12 <__mdiff+0xd6>
 800bf56:	3f01      	subs	r7, #1
 800bf58:	e7e7      	b.n	800bf2a <__mdiff+0xee>
 800bf5a:	bf00      	nop
 800bf5c:	0800cf88 	.word	0x0800cf88
 800bf60:	0800cf99 	.word	0x0800cf99

0800bf64 <__d2b>:
 800bf64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf68:	460f      	mov	r7, r1
 800bf6a:	2101      	movs	r1, #1
 800bf6c:	ec59 8b10 	vmov	r8, r9, d0
 800bf70:	4616      	mov	r6, r2
 800bf72:	f7ff fccd 	bl	800b910 <_Balloc>
 800bf76:	4604      	mov	r4, r0
 800bf78:	b930      	cbnz	r0, 800bf88 <__d2b+0x24>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	4b23      	ldr	r3, [pc, #140]	@ (800c00c <__d2b+0xa8>)
 800bf7e:	4824      	ldr	r0, [pc, #144]	@ (800c010 <__d2b+0xac>)
 800bf80:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf84:	f000 fa82 	bl	800c48c <__assert_func>
 800bf88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf90:	b10d      	cbz	r5, 800bf96 <__d2b+0x32>
 800bf92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	f1b8 0300 	subs.w	r3, r8, #0
 800bf9c:	d023      	beq.n	800bfe6 <__d2b+0x82>
 800bf9e:	4668      	mov	r0, sp
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	f7ff fd7c 	bl	800ba9e <__lo0bits>
 800bfa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfaa:	b1d0      	cbz	r0, 800bfe2 <__d2b+0x7e>
 800bfac:	f1c0 0320 	rsb	r3, r0, #32
 800bfb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb4:	430b      	orrs	r3, r1
 800bfb6:	40c2      	lsrs	r2, r0
 800bfb8:	6163      	str	r3, [r4, #20]
 800bfba:	9201      	str	r2, [sp, #4]
 800bfbc:	9b01      	ldr	r3, [sp, #4]
 800bfbe:	61a3      	str	r3, [r4, #24]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	bf0c      	ite	eq
 800bfc4:	2201      	moveq	r2, #1
 800bfc6:	2202      	movne	r2, #2
 800bfc8:	6122      	str	r2, [r4, #16]
 800bfca:	b1a5      	cbz	r5, 800bff6 <__d2b+0x92>
 800bfcc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bfd0:	4405      	add	r5, r0
 800bfd2:	603d      	str	r5, [r7, #0]
 800bfd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bfd8:	6030      	str	r0, [r6, #0]
 800bfda:	4620      	mov	r0, r4
 800bfdc:	b003      	add	sp, #12
 800bfde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfe2:	6161      	str	r1, [r4, #20]
 800bfe4:	e7ea      	b.n	800bfbc <__d2b+0x58>
 800bfe6:	a801      	add	r0, sp, #4
 800bfe8:	f7ff fd59 	bl	800ba9e <__lo0bits>
 800bfec:	9b01      	ldr	r3, [sp, #4]
 800bfee:	6163      	str	r3, [r4, #20]
 800bff0:	3020      	adds	r0, #32
 800bff2:	2201      	movs	r2, #1
 800bff4:	e7e8      	b.n	800bfc8 <__d2b+0x64>
 800bff6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bffa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bffe:	6038      	str	r0, [r7, #0]
 800c000:	6918      	ldr	r0, [r3, #16]
 800c002:	f7ff fd2d 	bl	800ba60 <__hi0bits>
 800c006:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c00a:	e7e5      	b.n	800bfd8 <__d2b+0x74>
 800c00c:	0800cf88 	.word	0x0800cf88
 800c010:	0800cf99 	.word	0x0800cf99

0800c014 <__ssputs_r>:
 800c014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c018:	688e      	ldr	r6, [r1, #8]
 800c01a:	461f      	mov	r7, r3
 800c01c:	42be      	cmp	r6, r7
 800c01e:	680b      	ldr	r3, [r1, #0]
 800c020:	4682      	mov	sl, r0
 800c022:	460c      	mov	r4, r1
 800c024:	4690      	mov	r8, r2
 800c026:	d82d      	bhi.n	800c084 <__ssputs_r+0x70>
 800c028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c02c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c030:	d026      	beq.n	800c080 <__ssputs_r+0x6c>
 800c032:	6965      	ldr	r5, [r4, #20]
 800c034:	6909      	ldr	r1, [r1, #16]
 800c036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c03a:	eba3 0901 	sub.w	r9, r3, r1
 800c03e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c042:	1c7b      	adds	r3, r7, #1
 800c044:	444b      	add	r3, r9
 800c046:	106d      	asrs	r5, r5, #1
 800c048:	429d      	cmp	r5, r3
 800c04a:	bf38      	it	cc
 800c04c:	461d      	movcc	r5, r3
 800c04e:	0553      	lsls	r3, r2, #21
 800c050:	d527      	bpl.n	800c0a2 <__ssputs_r+0x8e>
 800c052:	4629      	mov	r1, r5
 800c054:	f7ff fbd0 	bl	800b7f8 <_malloc_r>
 800c058:	4606      	mov	r6, r0
 800c05a:	b360      	cbz	r0, 800c0b6 <__ssputs_r+0xa2>
 800c05c:	6921      	ldr	r1, [r4, #16]
 800c05e:	464a      	mov	r2, r9
 800c060:	f000 fa06 	bl	800c470 <memcpy>
 800c064:	89a3      	ldrh	r3, [r4, #12]
 800c066:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c06e:	81a3      	strh	r3, [r4, #12]
 800c070:	6126      	str	r6, [r4, #16]
 800c072:	6165      	str	r5, [r4, #20]
 800c074:	444e      	add	r6, r9
 800c076:	eba5 0509 	sub.w	r5, r5, r9
 800c07a:	6026      	str	r6, [r4, #0]
 800c07c:	60a5      	str	r5, [r4, #8]
 800c07e:	463e      	mov	r6, r7
 800c080:	42be      	cmp	r6, r7
 800c082:	d900      	bls.n	800c086 <__ssputs_r+0x72>
 800c084:	463e      	mov	r6, r7
 800c086:	6820      	ldr	r0, [r4, #0]
 800c088:	4632      	mov	r2, r6
 800c08a:	4641      	mov	r1, r8
 800c08c:	f000 f9c6 	bl	800c41c <memmove>
 800c090:	68a3      	ldr	r3, [r4, #8]
 800c092:	1b9b      	subs	r3, r3, r6
 800c094:	60a3      	str	r3, [r4, #8]
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	4433      	add	r3, r6
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	2000      	movs	r0, #0
 800c09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a2:	462a      	mov	r2, r5
 800c0a4:	f000 fa36 	bl	800c514 <_realloc_r>
 800c0a8:	4606      	mov	r6, r0
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d1e0      	bne.n	800c070 <__ssputs_r+0x5c>
 800c0ae:	6921      	ldr	r1, [r4, #16]
 800c0b0:	4650      	mov	r0, sl
 800c0b2:	f7ff fb2d 	bl	800b710 <_free_r>
 800c0b6:	230c      	movs	r3, #12
 800c0b8:	f8ca 3000 	str.w	r3, [sl]
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0c2:	81a3      	strh	r3, [r4, #12]
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c8:	e7e9      	b.n	800c09e <__ssputs_r+0x8a>
	...

0800c0cc <_svfiprintf_r>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4698      	mov	r8, r3
 800c0d2:	898b      	ldrh	r3, [r1, #12]
 800c0d4:	061b      	lsls	r3, r3, #24
 800c0d6:	b09d      	sub	sp, #116	@ 0x74
 800c0d8:	4607      	mov	r7, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	4614      	mov	r4, r2
 800c0de:	d510      	bpl.n	800c102 <_svfiprintf_r+0x36>
 800c0e0:	690b      	ldr	r3, [r1, #16]
 800c0e2:	b973      	cbnz	r3, 800c102 <_svfiprintf_r+0x36>
 800c0e4:	2140      	movs	r1, #64	@ 0x40
 800c0e6:	f7ff fb87 	bl	800b7f8 <_malloc_r>
 800c0ea:	6028      	str	r0, [r5, #0]
 800c0ec:	6128      	str	r0, [r5, #16]
 800c0ee:	b930      	cbnz	r0, 800c0fe <_svfiprintf_r+0x32>
 800c0f0:	230c      	movs	r3, #12
 800c0f2:	603b      	str	r3, [r7, #0]
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f8:	b01d      	add	sp, #116	@ 0x74
 800c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fe:	2340      	movs	r3, #64	@ 0x40
 800c100:	616b      	str	r3, [r5, #20]
 800c102:	2300      	movs	r3, #0
 800c104:	9309      	str	r3, [sp, #36]	@ 0x24
 800c106:	2320      	movs	r3, #32
 800c108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c10c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c110:	2330      	movs	r3, #48	@ 0x30
 800c112:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c2b0 <_svfiprintf_r+0x1e4>
 800c116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c11a:	f04f 0901 	mov.w	r9, #1
 800c11e:	4623      	mov	r3, r4
 800c120:	469a      	mov	sl, r3
 800c122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c126:	b10a      	cbz	r2, 800c12c <_svfiprintf_r+0x60>
 800c128:	2a25      	cmp	r2, #37	@ 0x25
 800c12a:	d1f9      	bne.n	800c120 <_svfiprintf_r+0x54>
 800c12c:	ebba 0b04 	subs.w	fp, sl, r4
 800c130:	d00b      	beq.n	800c14a <_svfiprintf_r+0x7e>
 800c132:	465b      	mov	r3, fp
 800c134:	4622      	mov	r2, r4
 800c136:	4629      	mov	r1, r5
 800c138:	4638      	mov	r0, r7
 800c13a:	f7ff ff6b 	bl	800c014 <__ssputs_r>
 800c13e:	3001      	adds	r0, #1
 800c140:	f000 80a7 	beq.w	800c292 <_svfiprintf_r+0x1c6>
 800c144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c146:	445a      	add	r2, fp
 800c148:	9209      	str	r2, [sp, #36]	@ 0x24
 800c14a:	f89a 3000 	ldrb.w	r3, [sl]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f000 809f 	beq.w	800c292 <_svfiprintf_r+0x1c6>
 800c154:	2300      	movs	r3, #0
 800c156:	f04f 32ff 	mov.w	r2, #4294967295
 800c15a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c15e:	f10a 0a01 	add.w	sl, sl, #1
 800c162:	9304      	str	r3, [sp, #16]
 800c164:	9307      	str	r3, [sp, #28]
 800c166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c16a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c16c:	4654      	mov	r4, sl
 800c16e:	2205      	movs	r2, #5
 800c170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c174:	484e      	ldr	r0, [pc, #312]	@ (800c2b0 <_svfiprintf_r+0x1e4>)
 800c176:	f7f4 f82b 	bl	80001d0 <memchr>
 800c17a:	9a04      	ldr	r2, [sp, #16]
 800c17c:	b9d8      	cbnz	r0, 800c1b6 <_svfiprintf_r+0xea>
 800c17e:	06d0      	lsls	r0, r2, #27
 800c180:	bf44      	itt	mi
 800c182:	2320      	movmi	r3, #32
 800c184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c188:	0711      	lsls	r1, r2, #28
 800c18a:	bf44      	itt	mi
 800c18c:	232b      	movmi	r3, #43	@ 0x2b
 800c18e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c192:	f89a 3000 	ldrb.w	r3, [sl]
 800c196:	2b2a      	cmp	r3, #42	@ 0x2a
 800c198:	d015      	beq.n	800c1c6 <_svfiprintf_r+0xfa>
 800c19a:	9a07      	ldr	r2, [sp, #28]
 800c19c:	4654      	mov	r4, sl
 800c19e:	2000      	movs	r0, #0
 800c1a0:	f04f 0c0a 	mov.w	ip, #10
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1aa:	3b30      	subs	r3, #48	@ 0x30
 800c1ac:	2b09      	cmp	r3, #9
 800c1ae:	d94b      	bls.n	800c248 <_svfiprintf_r+0x17c>
 800c1b0:	b1b0      	cbz	r0, 800c1e0 <_svfiprintf_r+0x114>
 800c1b2:	9207      	str	r2, [sp, #28]
 800c1b4:	e014      	b.n	800c1e0 <_svfiprintf_r+0x114>
 800c1b6:	eba0 0308 	sub.w	r3, r0, r8
 800c1ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	9304      	str	r3, [sp, #16]
 800c1c2:	46a2      	mov	sl, r4
 800c1c4:	e7d2      	b.n	800c16c <_svfiprintf_r+0xa0>
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	1d19      	adds	r1, r3, #4
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	9103      	str	r1, [sp, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	bfbb      	ittet	lt
 800c1d2:	425b      	neglt	r3, r3
 800c1d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d8:	9307      	strge	r3, [sp, #28]
 800c1da:	9307      	strlt	r3, [sp, #28]
 800c1dc:	bfb8      	it	lt
 800c1de:	9204      	strlt	r2, [sp, #16]
 800c1e0:	7823      	ldrb	r3, [r4, #0]
 800c1e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1e4:	d10a      	bne.n	800c1fc <_svfiprintf_r+0x130>
 800c1e6:	7863      	ldrb	r3, [r4, #1]
 800c1e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1ea:	d132      	bne.n	800c252 <_svfiprintf_r+0x186>
 800c1ec:	9b03      	ldr	r3, [sp, #12]
 800c1ee:	1d1a      	adds	r2, r3, #4
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	9203      	str	r2, [sp, #12]
 800c1f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1f8:	3402      	adds	r4, #2
 800c1fa:	9305      	str	r3, [sp, #20]
 800c1fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c2c0 <_svfiprintf_r+0x1f4>
 800c200:	7821      	ldrb	r1, [r4, #0]
 800c202:	2203      	movs	r2, #3
 800c204:	4650      	mov	r0, sl
 800c206:	f7f3 ffe3 	bl	80001d0 <memchr>
 800c20a:	b138      	cbz	r0, 800c21c <_svfiprintf_r+0x150>
 800c20c:	9b04      	ldr	r3, [sp, #16]
 800c20e:	eba0 000a 	sub.w	r0, r0, sl
 800c212:	2240      	movs	r2, #64	@ 0x40
 800c214:	4082      	lsls	r2, r0
 800c216:	4313      	orrs	r3, r2
 800c218:	3401      	adds	r4, #1
 800c21a:	9304      	str	r3, [sp, #16]
 800c21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c220:	4824      	ldr	r0, [pc, #144]	@ (800c2b4 <_svfiprintf_r+0x1e8>)
 800c222:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c226:	2206      	movs	r2, #6
 800c228:	f7f3 ffd2 	bl	80001d0 <memchr>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d036      	beq.n	800c29e <_svfiprintf_r+0x1d2>
 800c230:	4b21      	ldr	r3, [pc, #132]	@ (800c2b8 <_svfiprintf_r+0x1ec>)
 800c232:	bb1b      	cbnz	r3, 800c27c <_svfiprintf_r+0x1b0>
 800c234:	9b03      	ldr	r3, [sp, #12]
 800c236:	3307      	adds	r3, #7
 800c238:	f023 0307 	bic.w	r3, r3, #7
 800c23c:	3308      	adds	r3, #8
 800c23e:	9303      	str	r3, [sp, #12]
 800c240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c242:	4433      	add	r3, r6
 800c244:	9309      	str	r3, [sp, #36]	@ 0x24
 800c246:	e76a      	b.n	800c11e <_svfiprintf_r+0x52>
 800c248:	fb0c 3202 	mla	r2, ip, r2, r3
 800c24c:	460c      	mov	r4, r1
 800c24e:	2001      	movs	r0, #1
 800c250:	e7a8      	b.n	800c1a4 <_svfiprintf_r+0xd8>
 800c252:	2300      	movs	r3, #0
 800c254:	3401      	adds	r4, #1
 800c256:	9305      	str	r3, [sp, #20]
 800c258:	4619      	mov	r1, r3
 800c25a:	f04f 0c0a 	mov.w	ip, #10
 800c25e:	4620      	mov	r0, r4
 800c260:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c264:	3a30      	subs	r2, #48	@ 0x30
 800c266:	2a09      	cmp	r2, #9
 800c268:	d903      	bls.n	800c272 <_svfiprintf_r+0x1a6>
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0c6      	beq.n	800c1fc <_svfiprintf_r+0x130>
 800c26e:	9105      	str	r1, [sp, #20]
 800c270:	e7c4      	b.n	800c1fc <_svfiprintf_r+0x130>
 800c272:	fb0c 2101 	mla	r1, ip, r1, r2
 800c276:	4604      	mov	r4, r0
 800c278:	2301      	movs	r3, #1
 800c27a:	e7f0      	b.n	800c25e <_svfiprintf_r+0x192>
 800c27c:	ab03      	add	r3, sp, #12
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	462a      	mov	r2, r5
 800c282:	4b0e      	ldr	r3, [pc, #56]	@ (800c2bc <_svfiprintf_r+0x1f0>)
 800c284:	a904      	add	r1, sp, #16
 800c286:	4638      	mov	r0, r7
 800c288:	f7fd fe98 	bl	8009fbc <_printf_float>
 800c28c:	1c42      	adds	r2, r0, #1
 800c28e:	4606      	mov	r6, r0
 800c290:	d1d6      	bne.n	800c240 <_svfiprintf_r+0x174>
 800c292:	89ab      	ldrh	r3, [r5, #12]
 800c294:	065b      	lsls	r3, r3, #25
 800c296:	f53f af2d 	bmi.w	800c0f4 <_svfiprintf_r+0x28>
 800c29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c29c:	e72c      	b.n	800c0f8 <_svfiprintf_r+0x2c>
 800c29e:	ab03      	add	r3, sp, #12
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	462a      	mov	r2, r5
 800c2a4:	4b05      	ldr	r3, [pc, #20]	@ (800c2bc <_svfiprintf_r+0x1f0>)
 800c2a6:	a904      	add	r1, sp, #16
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7fe f91f 	bl	800a4ec <_printf_i>
 800c2ae:	e7ed      	b.n	800c28c <_svfiprintf_r+0x1c0>
 800c2b0:	0800d0f0 	.word	0x0800d0f0
 800c2b4:	0800d0fa 	.word	0x0800d0fa
 800c2b8:	08009fbd 	.word	0x08009fbd
 800c2bc:	0800c015 	.word	0x0800c015
 800c2c0:	0800d0f6 	.word	0x0800d0f6

0800c2c4 <__sflush_r>:
 800c2c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2cc:	0716      	lsls	r6, r2, #28
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	d454      	bmi.n	800c37e <__sflush_r+0xba>
 800c2d4:	684b      	ldr	r3, [r1, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	dc02      	bgt.n	800c2e0 <__sflush_r+0x1c>
 800c2da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	dd48      	ble.n	800c372 <__sflush_r+0xae>
 800c2e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c2e2:	2e00      	cmp	r6, #0
 800c2e4:	d045      	beq.n	800c372 <__sflush_r+0xae>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c2ec:	682f      	ldr	r7, [r5, #0]
 800c2ee:	6a21      	ldr	r1, [r4, #32]
 800c2f0:	602b      	str	r3, [r5, #0]
 800c2f2:	d030      	beq.n	800c356 <__sflush_r+0x92>
 800c2f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c2f6:	89a3      	ldrh	r3, [r4, #12]
 800c2f8:	0759      	lsls	r1, r3, #29
 800c2fa:	d505      	bpl.n	800c308 <__sflush_r+0x44>
 800c2fc:	6863      	ldr	r3, [r4, #4]
 800c2fe:	1ad2      	subs	r2, r2, r3
 800c300:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c302:	b10b      	cbz	r3, 800c308 <__sflush_r+0x44>
 800c304:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c306:	1ad2      	subs	r2, r2, r3
 800c308:	2300      	movs	r3, #0
 800c30a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c30c:	6a21      	ldr	r1, [r4, #32]
 800c30e:	4628      	mov	r0, r5
 800c310:	47b0      	blx	r6
 800c312:	1c43      	adds	r3, r0, #1
 800c314:	89a3      	ldrh	r3, [r4, #12]
 800c316:	d106      	bne.n	800c326 <__sflush_r+0x62>
 800c318:	6829      	ldr	r1, [r5, #0]
 800c31a:	291d      	cmp	r1, #29
 800c31c:	d82b      	bhi.n	800c376 <__sflush_r+0xb2>
 800c31e:	4a2a      	ldr	r2, [pc, #168]	@ (800c3c8 <__sflush_r+0x104>)
 800c320:	410a      	asrs	r2, r1
 800c322:	07d6      	lsls	r6, r2, #31
 800c324:	d427      	bmi.n	800c376 <__sflush_r+0xb2>
 800c326:	2200      	movs	r2, #0
 800c328:	6062      	str	r2, [r4, #4]
 800c32a:	04d9      	lsls	r1, r3, #19
 800c32c:	6922      	ldr	r2, [r4, #16]
 800c32e:	6022      	str	r2, [r4, #0]
 800c330:	d504      	bpl.n	800c33c <__sflush_r+0x78>
 800c332:	1c42      	adds	r2, r0, #1
 800c334:	d101      	bne.n	800c33a <__sflush_r+0x76>
 800c336:	682b      	ldr	r3, [r5, #0]
 800c338:	b903      	cbnz	r3, 800c33c <__sflush_r+0x78>
 800c33a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c33c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c33e:	602f      	str	r7, [r5, #0]
 800c340:	b1b9      	cbz	r1, 800c372 <__sflush_r+0xae>
 800c342:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c346:	4299      	cmp	r1, r3
 800c348:	d002      	beq.n	800c350 <__sflush_r+0x8c>
 800c34a:	4628      	mov	r0, r5
 800c34c:	f7ff f9e0 	bl	800b710 <_free_r>
 800c350:	2300      	movs	r3, #0
 800c352:	6363      	str	r3, [r4, #52]	@ 0x34
 800c354:	e00d      	b.n	800c372 <__sflush_r+0xae>
 800c356:	2301      	movs	r3, #1
 800c358:	4628      	mov	r0, r5
 800c35a:	47b0      	blx	r6
 800c35c:	4602      	mov	r2, r0
 800c35e:	1c50      	adds	r0, r2, #1
 800c360:	d1c9      	bne.n	800c2f6 <__sflush_r+0x32>
 800c362:	682b      	ldr	r3, [r5, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d0c6      	beq.n	800c2f6 <__sflush_r+0x32>
 800c368:	2b1d      	cmp	r3, #29
 800c36a:	d001      	beq.n	800c370 <__sflush_r+0xac>
 800c36c:	2b16      	cmp	r3, #22
 800c36e:	d11e      	bne.n	800c3ae <__sflush_r+0xea>
 800c370:	602f      	str	r7, [r5, #0]
 800c372:	2000      	movs	r0, #0
 800c374:	e022      	b.n	800c3bc <__sflush_r+0xf8>
 800c376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c37a:	b21b      	sxth	r3, r3
 800c37c:	e01b      	b.n	800c3b6 <__sflush_r+0xf2>
 800c37e:	690f      	ldr	r7, [r1, #16]
 800c380:	2f00      	cmp	r7, #0
 800c382:	d0f6      	beq.n	800c372 <__sflush_r+0xae>
 800c384:	0793      	lsls	r3, r2, #30
 800c386:	680e      	ldr	r6, [r1, #0]
 800c388:	bf08      	it	eq
 800c38a:	694b      	ldreq	r3, [r1, #20]
 800c38c:	600f      	str	r7, [r1, #0]
 800c38e:	bf18      	it	ne
 800c390:	2300      	movne	r3, #0
 800c392:	eba6 0807 	sub.w	r8, r6, r7
 800c396:	608b      	str	r3, [r1, #8]
 800c398:	f1b8 0f00 	cmp.w	r8, #0
 800c39c:	dde9      	ble.n	800c372 <__sflush_r+0xae>
 800c39e:	6a21      	ldr	r1, [r4, #32]
 800c3a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c3a2:	4643      	mov	r3, r8
 800c3a4:	463a      	mov	r2, r7
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	47b0      	blx	r6
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	dc08      	bgt.n	800c3c0 <__sflush_r+0xfc>
 800c3ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c0:	4407      	add	r7, r0
 800c3c2:	eba8 0800 	sub.w	r8, r8, r0
 800c3c6:	e7e7      	b.n	800c398 <__sflush_r+0xd4>
 800c3c8:	dfbffffe 	.word	0xdfbffffe

0800c3cc <_fflush_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	690b      	ldr	r3, [r1, #16]
 800c3d0:	4605      	mov	r5, r0
 800c3d2:	460c      	mov	r4, r1
 800c3d4:	b913      	cbnz	r3, 800c3dc <_fflush_r+0x10>
 800c3d6:	2500      	movs	r5, #0
 800c3d8:	4628      	mov	r0, r5
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	b118      	cbz	r0, 800c3e6 <_fflush_r+0x1a>
 800c3de:	6a03      	ldr	r3, [r0, #32]
 800c3e0:	b90b      	cbnz	r3, 800c3e6 <_fflush_r+0x1a>
 800c3e2:	f7fe fa2f 	bl	800a844 <__sinit>
 800c3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d0f3      	beq.n	800c3d6 <_fflush_r+0xa>
 800c3ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c3f0:	07d0      	lsls	r0, r2, #31
 800c3f2:	d404      	bmi.n	800c3fe <_fflush_r+0x32>
 800c3f4:	0599      	lsls	r1, r3, #22
 800c3f6:	d402      	bmi.n	800c3fe <_fflush_r+0x32>
 800c3f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3fa:	f7fe fb3a 	bl	800aa72 <__retarget_lock_acquire_recursive>
 800c3fe:	4628      	mov	r0, r5
 800c400:	4621      	mov	r1, r4
 800c402:	f7ff ff5f 	bl	800c2c4 <__sflush_r>
 800c406:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c408:	07da      	lsls	r2, r3, #31
 800c40a:	4605      	mov	r5, r0
 800c40c:	d4e4      	bmi.n	800c3d8 <_fflush_r+0xc>
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	059b      	lsls	r3, r3, #22
 800c412:	d4e1      	bmi.n	800c3d8 <_fflush_r+0xc>
 800c414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c416:	f7fe fb2d 	bl	800aa74 <__retarget_lock_release_recursive>
 800c41a:	e7dd      	b.n	800c3d8 <_fflush_r+0xc>

0800c41c <memmove>:
 800c41c:	4288      	cmp	r0, r1
 800c41e:	b510      	push	{r4, lr}
 800c420:	eb01 0402 	add.w	r4, r1, r2
 800c424:	d902      	bls.n	800c42c <memmove+0x10>
 800c426:	4284      	cmp	r4, r0
 800c428:	4623      	mov	r3, r4
 800c42a:	d807      	bhi.n	800c43c <memmove+0x20>
 800c42c:	1e43      	subs	r3, r0, #1
 800c42e:	42a1      	cmp	r1, r4
 800c430:	d008      	beq.n	800c444 <memmove+0x28>
 800c432:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c43a:	e7f8      	b.n	800c42e <memmove+0x12>
 800c43c:	4402      	add	r2, r0
 800c43e:	4601      	mov	r1, r0
 800c440:	428a      	cmp	r2, r1
 800c442:	d100      	bne.n	800c446 <memmove+0x2a>
 800c444:	bd10      	pop	{r4, pc}
 800c446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c44a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c44e:	e7f7      	b.n	800c440 <memmove+0x24>

0800c450 <_sbrk_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4d06      	ldr	r5, [pc, #24]	@ (800c46c <_sbrk_r+0x1c>)
 800c454:	2300      	movs	r3, #0
 800c456:	4604      	mov	r4, r0
 800c458:	4608      	mov	r0, r1
 800c45a:	602b      	str	r3, [r5, #0]
 800c45c:	f7f5 febc 	bl	80021d8 <_sbrk>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_sbrk_r+0x1a>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_sbrk_r+0x1a>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	20002238 	.word	0x20002238

0800c470 <memcpy>:
 800c470:	440a      	add	r2, r1
 800c472:	4291      	cmp	r1, r2
 800c474:	f100 33ff 	add.w	r3, r0, #4294967295
 800c478:	d100      	bne.n	800c47c <memcpy+0xc>
 800c47a:	4770      	bx	lr
 800c47c:	b510      	push	{r4, lr}
 800c47e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c482:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c486:	4291      	cmp	r1, r2
 800c488:	d1f9      	bne.n	800c47e <memcpy+0xe>
 800c48a:	bd10      	pop	{r4, pc}

0800c48c <__assert_func>:
 800c48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c48e:	4614      	mov	r4, r2
 800c490:	461a      	mov	r2, r3
 800c492:	4b09      	ldr	r3, [pc, #36]	@ (800c4b8 <__assert_func+0x2c>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4605      	mov	r5, r0
 800c498:	68d8      	ldr	r0, [r3, #12]
 800c49a:	b954      	cbnz	r4, 800c4b2 <__assert_func+0x26>
 800c49c:	4b07      	ldr	r3, [pc, #28]	@ (800c4bc <__assert_func+0x30>)
 800c49e:	461c      	mov	r4, r3
 800c4a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4a4:	9100      	str	r1, [sp, #0]
 800c4a6:	462b      	mov	r3, r5
 800c4a8:	4905      	ldr	r1, [pc, #20]	@ (800c4c0 <__assert_func+0x34>)
 800c4aa:	f000 f86f 	bl	800c58c <fiprintf>
 800c4ae:	f000 f87f 	bl	800c5b0 <abort>
 800c4b2:	4b04      	ldr	r3, [pc, #16]	@ (800c4c4 <__assert_func+0x38>)
 800c4b4:	e7f4      	b.n	800c4a0 <__assert_func+0x14>
 800c4b6:	bf00      	nop
 800c4b8:	20000108 	.word	0x20000108
 800c4bc:	0800d146 	.word	0x0800d146
 800c4c0:	0800d118 	.word	0x0800d118
 800c4c4:	0800d10b 	.word	0x0800d10b

0800c4c8 <_calloc_r>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	fba1 5402 	umull	r5, r4, r1, r2
 800c4ce:	b93c      	cbnz	r4, 800c4e0 <_calloc_r+0x18>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	f7ff f991 	bl	800b7f8 <_malloc_r>
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	b928      	cbnz	r0, 800c4e6 <_calloc_r+0x1e>
 800c4da:	2600      	movs	r6, #0
 800c4dc:	4630      	mov	r0, r6
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
 800c4e0:	220c      	movs	r2, #12
 800c4e2:	6002      	str	r2, [r0, #0]
 800c4e4:	e7f9      	b.n	800c4da <_calloc_r+0x12>
 800c4e6:	462a      	mov	r2, r5
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	f7fe fa44 	bl	800a976 <memset>
 800c4ee:	e7f5      	b.n	800c4dc <_calloc_r+0x14>

0800c4f0 <__ascii_mbtowc>:
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	b901      	cbnz	r1, 800c4f6 <__ascii_mbtowc+0x6>
 800c4f4:	a901      	add	r1, sp, #4
 800c4f6:	b142      	cbz	r2, 800c50a <__ascii_mbtowc+0x1a>
 800c4f8:	b14b      	cbz	r3, 800c50e <__ascii_mbtowc+0x1e>
 800c4fa:	7813      	ldrb	r3, [r2, #0]
 800c4fc:	600b      	str	r3, [r1, #0]
 800c4fe:	7812      	ldrb	r2, [r2, #0]
 800c500:	1e10      	subs	r0, r2, #0
 800c502:	bf18      	it	ne
 800c504:	2001      	movne	r0, #1
 800c506:	b002      	add	sp, #8
 800c508:	4770      	bx	lr
 800c50a:	4610      	mov	r0, r2
 800c50c:	e7fb      	b.n	800c506 <__ascii_mbtowc+0x16>
 800c50e:	f06f 0001 	mvn.w	r0, #1
 800c512:	e7f8      	b.n	800c506 <__ascii_mbtowc+0x16>

0800c514 <_realloc_r>:
 800c514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c518:	4680      	mov	r8, r0
 800c51a:	4615      	mov	r5, r2
 800c51c:	460c      	mov	r4, r1
 800c51e:	b921      	cbnz	r1, 800c52a <_realloc_r+0x16>
 800c520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c524:	4611      	mov	r1, r2
 800c526:	f7ff b967 	b.w	800b7f8 <_malloc_r>
 800c52a:	b92a      	cbnz	r2, 800c538 <_realloc_r+0x24>
 800c52c:	f7ff f8f0 	bl	800b710 <_free_r>
 800c530:	2400      	movs	r4, #0
 800c532:	4620      	mov	r0, r4
 800c534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c538:	f000 f841 	bl	800c5be <_malloc_usable_size_r>
 800c53c:	4285      	cmp	r5, r0
 800c53e:	4606      	mov	r6, r0
 800c540:	d802      	bhi.n	800c548 <_realloc_r+0x34>
 800c542:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c546:	d8f4      	bhi.n	800c532 <_realloc_r+0x1e>
 800c548:	4629      	mov	r1, r5
 800c54a:	4640      	mov	r0, r8
 800c54c:	f7ff f954 	bl	800b7f8 <_malloc_r>
 800c550:	4607      	mov	r7, r0
 800c552:	2800      	cmp	r0, #0
 800c554:	d0ec      	beq.n	800c530 <_realloc_r+0x1c>
 800c556:	42b5      	cmp	r5, r6
 800c558:	462a      	mov	r2, r5
 800c55a:	4621      	mov	r1, r4
 800c55c:	bf28      	it	cs
 800c55e:	4632      	movcs	r2, r6
 800c560:	f7ff ff86 	bl	800c470 <memcpy>
 800c564:	4621      	mov	r1, r4
 800c566:	4640      	mov	r0, r8
 800c568:	f7ff f8d2 	bl	800b710 <_free_r>
 800c56c:	463c      	mov	r4, r7
 800c56e:	e7e0      	b.n	800c532 <_realloc_r+0x1e>

0800c570 <__ascii_wctomb>:
 800c570:	4603      	mov	r3, r0
 800c572:	4608      	mov	r0, r1
 800c574:	b141      	cbz	r1, 800c588 <__ascii_wctomb+0x18>
 800c576:	2aff      	cmp	r2, #255	@ 0xff
 800c578:	d904      	bls.n	800c584 <__ascii_wctomb+0x14>
 800c57a:	228a      	movs	r2, #138	@ 0x8a
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	f04f 30ff 	mov.w	r0, #4294967295
 800c582:	4770      	bx	lr
 800c584:	700a      	strb	r2, [r1, #0]
 800c586:	2001      	movs	r0, #1
 800c588:	4770      	bx	lr
	...

0800c58c <fiprintf>:
 800c58c:	b40e      	push	{r1, r2, r3}
 800c58e:	b503      	push	{r0, r1, lr}
 800c590:	4601      	mov	r1, r0
 800c592:	ab03      	add	r3, sp, #12
 800c594:	4805      	ldr	r0, [pc, #20]	@ (800c5ac <fiprintf+0x20>)
 800c596:	f853 2b04 	ldr.w	r2, [r3], #4
 800c59a:	6800      	ldr	r0, [r0, #0]
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	f000 f83f 	bl	800c620 <_vfiprintf_r>
 800c5a2:	b002      	add	sp, #8
 800c5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5a8:	b003      	add	sp, #12
 800c5aa:	4770      	bx	lr
 800c5ac:	20000108 	.word	0x20000108

0800c5b0 <abort>:
 800c5b0:	b508      	push	{r3, lr}
 800c5b2:	2006      	movs	r0, #6
 800c5b4:	f000 fa08 	bl	800c9c8 <raise>
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	f7f5 fd95 	bl	80020e8 <_exit>

0800c5be <_malloc_usable_size_r>:
 800c5be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5c2:	1f18      	subs	r0, r3, #4
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	bfbc      	itt	lt
 800c5c8:	580b      	ldrlt	r3, [r1, r0]
 800c5ca:	18c0      	addlt	r0, r0, r3
 800c5cc:	4770      	bx	lr

0800c5ce <__sfputc_r>:
 800c5ce:	6893      	ldr	r3, [r2, #8]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	b410      	push	{r4}
 800c5d6:	6093      	str	r3, [r2, #8]
 800c5d8:	da08      	bge.n	800c5ec <__sfputc_r+0x1e>
 800c5da:	6994      	ldr	r4, [r2, #24]
 800c5dc:	42a3      	cmp	r3, r4
 800c5de:	db01      	blt.n	800c5e4 <__sfputc_r+0x16>
 800c5e0:	290a      	cmp	r1, #10
 800c5e2:	d103      	bne.n	800c5ec <__sfputc_r+0x1e>
 800c5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5e8:	f000 b932 	b.w	800c850 <__swbuf_r>
 800c5ec:	6813      	ldr	r3, [r2, #0]
 800c5ee:	1c58      	adds	r0, r3, #1
 800c5f0:	6010      	str	r0, [r2, #0]
 800c5f2:	7019      	strb	r1, [r3, #0]
 800c5f4:	4608      	mov	r0, r1
 800c5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <__sfputs_r>:
 800c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fe:	4606      	mov	r6, r0
 800c600:	460f      	mov	r7, r1
 800c602:	4614      	mov	r4, r2
 800c604:	18d5      	adds	r5, r2, r3
 800c606:	42ac      	cmp	r4, r5
 800c608:	d101      	bne.n	800c60e <__sfputs_r+0x12>
 800c60a:	2000      	movs	r0, #0
 800c60c:	e007      	b.n	800c61e <__sfputs_r+0x22>
 800c60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c612:	463a      	mov	r2, r7
 800c614:	4630      	mov	r0, r6
 800c616:	f7ff ffda 	bl	800c5ce <__sfputc_r>
 800c61a:	1c43      	adds	r3, r0, #1
 800c61c:	d1f3      	bne.n	800c606 <__sfputs_r+0xa>
 800c61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c620 <_vfiprintf_r>:
 800c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c624:	460d      	mov	r5, r1
 800c626:	b09d      	sub	sp, #116	@ 0x74
 800c628:	4614      	mov	r4, r2
 800c62a:	4698      	mov	r8, r3
 800c62c:	4606      	mov	r6, r0
 800c62e:	b118      	cbz	r0, 800c638 <_vfiprintf_r+0x18>
 800c630:	6a03      	ldr	r3, [r0, #32]
 800c632:	b90b      	cbnz	r3, 800c638 <_vfiprintf_r+0x18>
 800c634:	f7fe f906 	bl	800a844 <__sinit>
 800c638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c63a:	07d9      	lsls	r1, r3, #31
 800c63c:	d405      	bmi.n	800c64a <_vfiprintf_r+0x2a>
 800c63e:	89ab      	ldrh	r3, [r5, #12]
 800c640:	059a      	lsls	r2, r3, #22
 800c642:	d402      	bmi.n	800c64a <_vfiprintf_r+0x2a>
 800c644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c646:	f7fe fa14 	bl	800aa72 <__retarget_lock_acquire_recursive>
 800c64a:	89ab      	ldrh	r3, [r5, #12]
 800c64c:	071b      	lsls	r3, r3, #28
 800c64e:	d501      	bpl.n	800c654 <_vfiprintf_r+0x34>
 800c650:	692b      	ldr	r3, [r5, #16]
 800c652:	b99b      	cbnz	r3, 800c67c <_vfiprintf_r+0x5c>
 800c654:	4629      	mov	r1, r5
 800c656:	4630      	mov	r0, r6
 800c658:	f000 f938 	bl	800c8cc <__swsetup_r>
 800c65c:	b170      	cbz	r0, 800c67c <_vfiprintf_r+0x5c>
 800c65e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c660:	07dc      	lsls	r4, r3, #31
 800c662:	d504      	bpl.n	800c66e <_vfiprintf_r+0x4e>
 800c664:	f04f 30ff 	mov.w	r0, #4294967295
 800c668:	b01d      	add	sp, #116	@ 0x74
 800c66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66e:	89ab      	ldrh	r3, [r5, #12]
 800c670:	0598      	lsls	r0, r3, #22
 800c672:	d4f7      	bmi.n	800c664 <_vfiprintf_r+0x44>
 800c674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c676:	f7fe f9fd 	bl	800aa74 <__retarget_lock_release_recursive>
 800c67a:	e7f3      	b.n	800c664 <_vfiprintf_r+0x44>
 800c67c:	2300      	movs	r3, #0
 800c67e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c680:	2320      	movs	r3, #32
 800c682:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c686:	f8cd 800c 	str.w	r8, [sp, #12]
 800c68a:	2330      	movs	r3, #48	@ 0x30
 800c68c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c83c <_vfiprintf_r+0x21c>
 800c690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c694:	f04f 0901 	mov.w	r9, #1
 800c698:	4623      	mov	r3, r4
 800c69a:	469a      	mov	sl, r3
 800c69c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6a0:	b10a      	cbz	r2, 800c6a6 <_vfiprintf_r+0x86>
 800c6a2:	2a25      	cmp	r2, #37	@ 0x25
 800c6a4:	d1f9      	bne.n	800c69a <_vfiprintf_r+0x7a>
 800c6a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c6aa:	d00b      	beq.n	800c6c4 <_vfiprintf_r+0xa4>
 800c6ac:	465b      	mov	r3, fp
 800c6ae:	4622      	mov	r2, r4
 800c6b0:	4629      	mov	r1, r5
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	f7ff ffa2 	bl	800c5fc <__sfputs_r>
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	f000 80a7 	beq.w	800c80c <_vfiprintf_r+0x1ec>
 800c6be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6c0:	445a      	add	r2, fp
 800c6c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 809f 	beq.w	800c80c <_vfiprintf_r+0x1ec>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6d8:	f10a 0a01 	add.w	sl, sl, #1
 800c6dc:	9304      	str	r3, [sp, #16]
 800c6de:	9307      	str	r3, [sp, #28]
 800c6e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6e6:	4654      	mov	r4, sl
 800c6e8:	2205      	movs	r2, #5
 800c6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ee:	4853      	ldr	r0, [pc, #332]	@ (800c83c <_vfiprintf_r+0x21c>)
 800c6f0:	f7f3 fd6e 	bl	80001d0 <memchr>
 800c6f4:	9a04      	ldr	r2, [sp, #16]
 800c6f6:	b9d8      	cbnz	r0, 800c730 <_vfiprintf_r+0x110>
 800c6f8:	06d1      	lsls	r1, r2, #27
 800c6fa:	bf44      	itt	mi
 800c6fc:	2320      	movmi	r3, #32
 800c6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c702:	0713      	lsls	r3, r2, #28
 800c704:	bf44      	itt	mi
 800c706:	232b      	movmi	r3, #43	@ 0x2b
 800c708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c70c:	f89a 3000 	ldrb.w	r3, [sl]
 800c710:	2b2a      	cmp	r3, #42	@ 0x2a
 800c712:	d015      	beq.n	800c740 <_vfiprintf_r+0x120>
 800c714:	9a07      	ldr	r2, [sp, #28]
 800c716:	4654      	mov	r4, sl
 800c718:	2000      	movs	r0, #0
 800c71a:	f04f 0c0a 	mov.w	ip, #10
 800c71e:	4621      	mov	r1, r4
 800c720:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c724:	3b30      	subs	r3, #48	@ 0x30
 800c726:	2b09      	cmp	r3, #9
 800c728:	d94b      	bls.n	800c7c2 <_vfiprintf_r+0x1a2>
 800c72a:	b1b0      	cbz	r0, 800c75a <_vfiprintf_r+0x13a>
 800c72c:	9207      	str	r2, [sp, #28]
 800c72e:	e014      	b.n	800c75a <_vfiprintf_r+0x13a>
 800c730:	eba0 0308 	sub.w	r3, r0, r8
 800c734:	fa09 f303 	lsl.w	r3, r9, r3
 800c738:	4313      	orrs	r3, r2
 800c73a:	9304      	str	r3, [sp, #16]
 800c73c:	46a2      	mov	sl, r4
 800c73e:	e7d2      	b.n	800c6e6 <_vfiprintf_r+0xc6>
 800c740:	9b03      	ldr	r3, [sp, #12]
 800c742:	1d19      	adds	r1, r3, #4
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	9103      	str	r1, [sp, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	bfbb      	ittet	lt
 800c74c:	425b      	neglt	r3, r3
 800c74e:	f042 0202 	orrlt.w	r2, r2, #2
 800c752:	9307      	strge	r3, [sp, #28]
 800c754:	9307      	strlt	r3, [sp, #28]
 800c756:	bfb8      	it	lt
 800c758:	9204      	strlt	r2, [sp, #16]
 800c75a:	7823      	ldrb	r3, [r4, #0]
 800c75c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c75e:	d10a      	bne.n	800c776 <_vfiprintf_r+0x156>
 800c760:	7863      	ldrb	r3, [r4, #1]
 800c762:	2b2a      	cmp	r3, #42	@ 0x2a
 800c764:	d132      	bne.n	800c7cc <_vfiprintf_r+0x1ac>
 800c766:	9b03      	ldr	r3, [sp, #12]
 800c768:	1d1a      	adds	r2, r3, #4
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	9203      	str	r2, [sp, #12]
 800c76e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c772:	3402      	adds	r4, #2
 800c774:	9305      	str	r3, [sp, #20]
 800c776:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c84c <_vfiprintf_r+0x22c>
 800c77a:	7821      	ldrb	r1, [r4, #0]
 800c77c:	2203      	movs	r2, #3
 800c77e:	4650      	mov	r0, sl
 800c780:	f7f3 fd26 	bl	80001d0 <memchr>
 800c784:	b138      	cbz	r0, 800c796 <_vfiprintf_r+0x176>
 800c786:	9b04      	ldr	r3, [sp, #16]
 800c788:	eba0 000a 	sub.w	r0, r0, sl
 800c78c:	2240      	movs	r2, #64	@ 0x40
 800c78e:	4082      	lsls	r2, r0
 800c790:	4313      	orrs	r3, r2
 800c792:	3401      	adds	r4, #1
 800c794:	9304      	str	r3, [sp, #16]
 800c796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c79a:	4829      	ldr	r0, [pc, #164]	@ (800c840 <_vfiprintf_r+0x220>)
 800c79c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7a0:	2206      	movs	r2, #6
 800c7a2:	f7f3 fd15 	bl	80001d0 <memchr>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d03f      	beq.n	800c82a <_vfiprintf_r+0x20a>
 800c7aa:	4b26      	ldr	r3, [pc, #152]	@ (800c844 <_vfiprintf_r+0x224>)
 800c7ac:	bb1b      	cbnz	r3, 800c7f6 <_vfiprintf_r+0x1d6>
 800c7ae:	9b03      	ldr	r3, [sp, #12]
 800c7b0:	3307      	adds	r3, #7
 800c7b2:	f023 0307 	bic.w	r3, r3, #7
 800c7b6:	3308      	adds	r3, #8
 800c7b8:	9303      	str	r3, [sp, #12]
 800c7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7bc:	443b      	add	r3, r7
 800c7be:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7c0:	e76a      	b.n	800c698 <_vfiprintf_r+0x78>
 800c7c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	2001      	movs	r0, #1
 800c7ca:	e7a8      	b.n	800c71e <_vfiprintf_r+0xfe>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	3401      	adds	r4, #1
 800c7d0:	9305      	str	r3, [sp, #20]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	f04f 0c0a 	mov.w	ip, #10
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7de:	3a30      	subs	r2, #48	@ 0x30
 800c7e0:	2a09      	cmp	r2, #9
 800c7e2:	d903      	bls.n	800c7ec <_vfiprintf_r+0x1cc>
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d0c6      	beq.n	800c776 <_vfiprintf_r+0x156>
 800c7e8:	9105      	str	r1, [sp, #20]
 800c7ea:	e7c4      	b.n	800c776 <_vfiprintf_r+0x156>
 800c7ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e7f0      	b.n	800c7d8 <_vfiprintf_r+0x1b8>
 800c7f6:	ab03      	add	r3, sp, #12
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	4b12      	ldr	r3, [pc, #72]	@ (800c848 <_vfiprintf_r+0x228>)
 800c7fe:	a904      	add	r1, sp, #16
 800c800:	4630      	mov	r0, r6
 800c802:	f7fd fbdb 	bl	8009fbc <_printf_float>
 800c806:	4607      	mov	r7, r0
 800c808:	1c78      	adds	r0, r7, #1
 800c80a:	d1d6      	bne.n	800c7ba <_vfiprintf_r+0x19a>
 800c80c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c80e:	07d9      	lsls	r1, r3, #31
 800c810:	d405      	bmi.n	800c81e <_vfiprintf_r+0x1fe>
 800c812:	89ab      	ldrh	r3, [r5, #12]
 800c814:	059a      	lsls	r2, r3, #22
 800c816:	d402      	bmi.n	800c81e <_vfiprintf_r+0x1fe>
 800c818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c81a:	f7fe f92b 	bl	800aa74 <__retarget_lock_release_recursive>
 800c81e:	89ab      	ldrh	r3, [r5, #12]
 800c820:	065b      	lsls	r3, r3, #25
 800c822:	f53f af1f 	bmi.w	800c664 <_vfiprintf_r+0x44>
 800c826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c828:	e71e      	b.n	800c668 <_vfiprintf_r+0x48>
 800c82a:	ab03      	add	r3, sp, #12
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	462a      	mov	r2, r5
 800c830:	4b05      	ldr	r3, [pc, #20]	@ (800c848 <_vfiprintf_r+0x228>)
 800c832:	a904      	add	r1, sp, #16
 800c834:	4630      	mov	r0, r6
 800c836:	f7fd fe59 	bl	800a4ec <_printf_i>
 800c83a:	e7e4      	b.n	800c806 <_vfiprintf_r+0x1e6>
 800c83c:	0800d0f0 	.word	0x0800d0f0
 800c840:	0800d0fa 	.word	0x0800d0fa
 800c844:	08009fbd 	.word	0x08009fbd
 800c848:	0800c5fd 	.word	0x0800c5fd
 800c84c:	0800d0f6 	.word	0x0800d0f6

0800c850 <__swbuf_r>:
 800c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c852:	460e      	mov	r6, r1
 800c854:	4614      	mov	r4, r2
 800c856:	4605      	mov	r5, r0
 800c858:	b118      	cbz	r0, 800c862 <__swbuf_r+0x12>
 800c85a:	6a03      	ldr	r3, [r0, #32]
 800c85c:	b90b      	cbnz	r3, 800c862 <__swbuf_r+0x12>
 800c85e:	f7fd fff1 	bl	800a844 <__sinit>
 800c862:	69a3      	ldr	r3, [r4, #24]
 800c864:	60a3      	str	r3, [r4, #8]
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	071a      	lsls	r2, r3, #28
 800c86a:	d501      	bpl.n	800c870 <__swbuf_r+0x20>
 800c86c:	6923      	ldr	r3, [r4, #16]
 800c86e:	b943      	cbnz	r3, 800c882 <__swbuf_r+0x32>
 800c870:	4621      	mov	r1, r4
 800c872:	4628      	mov	r0, r5
 800c874:	f000 f82a 	bl	800c8cc <__swsetup_r>
 800c878:	b118      	cbz	r0, 800c882 <__swbuf_r+0x32>
 800c87a:	f04f 37ff 	mov.w	r7, #4294967295
 800c87e:	4638      	mov	r0, r7
 800c880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	6922      	ldr	r2, [r4, #16]
 800c886:	1a98      	subs	r0, r3, r2
 800c888:	6963      	ldr	r3, [r4, #20]
 800c88a:	b2f6      	uxtb	r6, r6
 800c88c:	4283      	cmp	r3, r0
 800c88e:	4637      	mov	r7, r6
 800c890:	dc05      	bgt.n	800c89e <__swbuf_r+0x4e>
 800c892:	4621      	mov	r1, r4
 800c894:	4628      	mov	r0, r5
 800c896:	f7ff fd99 	bl	800c3cc <_fflush_r>
 800c89a:	2800      	cmp	r0, #0
 800c89c:	d1ed      	bne.n	800c87a <__swbuf_r+0x2a>
 800c89e:	68a3      	ldr	r3, [r4, #8]
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	60a3      	str	r3, [r4, #8]
 800c8a4:	6823      	ldr	r3, [r4, #0]
 800c8a6:	1c5a      	adds	r2, r3, #1
 800c8a8:	6022      	str	r2, [r4, #0]
 800c8aa:	701e      	strb	r6, [r3, #0]
 800c8ac:	6962      	ldr	r2, [r4, #20]
 800c8ae:	1c43      	adds	r3, r0, #1
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d004      	beq.n	800c8be <__swbuf_r+0x6e>
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	07db      	lsls	r3, r3, #31
 800c8b8:	d5e1      	bpl.n	800c87e <__swbuf_r+0x2e>
 800c8ba:	2e0a      	cmp	r6, #10
 800c8bc:	d1df      	bne.n	800c87e <__swbuf_r+0x2e>
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	f7ff fd83 	bl	800c3cc <_fflush_r>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d0d9      	beq.n	800c87e <__swbuf_r+0x2e>
 800c8ca:	e7d6      	b.n	800c87a <__swbuf_r+0x2a>

0800c8cc <__swsetup_r>:
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	4b29      	ldr	r3, [pc, #164]	@ (800c974 <__swsetup_r+0xa8>)
 800c8d0:	4605      	mov	r5, r0
 800c8d2:	6818      	ldr	r0, [r3, #0]
 800c8d4:	460c      	mov	r4, r1
 800c8d6:	b118      	cbz	r0, 800c8e0 <__swsetup_r+0x14>
 800c8d8:	6a03      	ldr	r3, [r0, #32]
 800c8da:	b90b      	cbnz	r3, 800c8e0 <__swsetup_r+0x14>
 800c8dc:	f7fd ffb2 	bl	800a844 <__sinit>
 800c8e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8e4:	0719      	lsls	r1, r3, #28
 800c8e6:	d422      	bmi.n	800c92e <__swsetup_r+0x62>
 800c8e8:	06da      	lsls	r2, r3, #27
 800c8ea:	d407      	bmi.n	800c8fc <__swsetup_r+0x30>
 800c8ec:	2209      	movs	r2, #9
 800c8ee:	602a      	str	r2, [r5, #0]
 800c8f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8f4:	81a3      	strh	r3, [r4, #12]
 800c8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8fa:	e033      	b.n	800c964 <__swsetup_r+0x98>
 800c8fc:	0758      	lsls	r0, r3, #29
 800c8fe:	d512      	bpl.n	800c926 <__swsetup_r+0x5a>
 800c900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c902:	b141      	cbz	r1, 800c916 <__swsetup_r+0x4a>
 800c904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c908:	4299      	cmp	r1, r3
 800c90a:	d002      	beq.n	800c912 <__swsetup_r+0x46>
 800c90c:	4628      	mov	r0, r5
 800c90e:	f7fe feff 	bl	800b710 <_free_r>
 800c912:	2300      	movs	r3, #0
 800c914:	6363      	str	r3, [r4, #52]	@ 0x34
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c91c:	81a3      	strh	r3, [r4, #12]
 800c91e:	2300      	movs	r3, #0
 800c920:	6063      	str	r3, [r4, #4]
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	89a3      	ldrh	r3, [r4, #12]
 800c928:	f043 0308 	orr.w	r3, r3, #8
 800c92c:	81a3      	strh	r3, [r4, #12]
 800c92e:	6923      	ldr	r3, [r4, #16]
 800c930:	b94b      	cbnz	r3, 800c946 <__swsetup_r+0x7a>
 800c932:	89a3      	ldrh	r3, [r4, #12]
 800c934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c93c:	d003      	beq.n	800c946 <__swsetup_r+0x7a>
 800c93e:	4621      	mov	r1, r4
 800c940:	4628      	mov	r0, r5
 800c942:	f000 f883 	bl	800ca4c <__smakebuf_r>
 800c946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c94a:	f013 0201 	ands.w	r2, r3, #1
 800c94e:	d00a      	beq.n	800c966 <__swsetup_r+0x9a>
 800c950:	2200      	movs	r2, #0
 800c952:	60a2      	str	r2, [r4, #8]
 800c954:	6962      	ldr	r2, [r4, #20]
 800c956:	4252      	negs	r2, r2
 800c958:	61a2      	str	r2, [r4, #24]
 800c95a:	6922      	ldr	r2, [r4, #16]
 800c95c:	b942      	cbnz	r2, 800c970 <__swsetup_r+0xa4>
 800c95e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c962:	d1c5      	bne.n	800c8f0 <__swsetup_r+0x24>
 800c964:	bd38      	pop	{r3, r4, r5, pc}
 800c966:	0799      	lsls	r1, r3, #30
 800c968:	bf58      	it	pl
 800c96a:	6962      	ldrpl	r2, [r4, #20]
 800c96c:	60a2      	str	r2, [r4, #8]
 800c96e:	e7f4      	b.n	800c95a <__swsetup_r+0x8e>
 800c970:	2000      	movs	r0, #0
 800c972:	e7f7      	b.n	800c964 <__swsetup_r+0x98>
 800c974:	20000108 	.word	0x20000108

0800c978 <_raise_r>:
 800c978:	291f      	cmp	r1, #31
 800c97a:	b538      	push	{r3, r4, r5, lr}
 800c97c:	4605      	mov	r5, r0
 800c97e:	460c      	mov	r4, r1
 800c980:	d904      	bls.n	800c98c <_raise_r+0x14>
 800c982:	2316      	movs	r3, #22
 800c984:	6003      	str	r3, [r0, #0]
 800c986:	f04f 30ff 	mov.w	r0, #4294967295
 800c98a:	bd38      	pop	{r3, r4, r5, pc}
 800c98c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c98e:	b112      	cbz	r2, 800c996 <_raise_r+0x1e>
 800c990:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c994:	b94b      	cbnz	r3, 800c9aa <_raise_r+0x32>
 800c996:	4628      	mov	r0, r5
 800c998:	f000 f830 	bl	800c9fc <_getpid_r>
 800c99c:	4622      	mov	r2, r4
 800c99e:	4601      	mov	r1, r0
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9a6:	f000 b817 	b.w	800c9d8 <_kill_r>
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d00a      	beq.n	800c9c4 <_raise_r+0x4c>
 800c9ae:	1c59      	adds	r1, r3, #1
 800c9b0:	d103      	bne.n	800c9ba <_raise_r+0x42>
 800c9b2:	2316      	movs	r3, #22
 800c9b4:	6003      	str	r3, [r0, #0]
 800c9b6:	2001      	movs	r0, #1
 800c9b8:	e7e7      	b.n	800c98a <_raise_r+0x12>
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	4798      	blx	r3
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	e7e0      	b.n	800c98a <_raise_r+0x12>

0800c9c8 <raise>:
 800c9c8:	4b02      	ldr	r3, [pc, #8]	@ (800c9d4 <raise+0xc>)
 800c9ca:	4601      	mov	r1, r0
 800c9cc:	6818      	ldr	r0, [r3, #0]
 800c9ce:	f7ff bfd3 	b.w	800c978 <_raise_r>
 800c9d2:	bf00      	nop
 800c9d4:	20000108 	.word	0x20000108

0800c9d8 <_kill_r>:
 800c9d8:	b538      	push	{r3, r4, r5, lr}
 800c9da:	4d07      	ldr	r5, [pc, #28]	@ (800c9f8 <_kill_r+0x20>)
 800c9dc:	2300      	movs	r3, #0
 800c9de:	4604      	mov	r4, r0
 800c9e0:	4608      	mov	r0, r1
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	602b      	str	r3, [r5, #0]
 800c9e6:	f7f5 fb6f 	bl	80020c8 <_kill>
 800c9ea:	1c43      	adds	r3, r0, #1
 800c9ec:	d102      	bne.n	800c9f4 <_kill_r+0x1c>
 800c9ee:	682b      	ldr	r3, [r5, #0]
 800c9f0:	b103      	cbz	r3, 800c9f4 <_kill_r+0x1c>
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	bd38      	pop	{r3, r4, r5, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20002238 	.word	0x20002238

0800c9fc <_getpid_r>:
 800c9fc:	f7f5 bb5c 	b.w	80020b8 <_getpid>

0800ca00 <__swhatbuf_r>:
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	460c      	mov	r4, r1
 800ca04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca08:	2900      	cmp	r1, #0
 800ca0a:	b096      	sub	sp, #88	@ 0x58
 800ca0c:	4615      	mov	r5, r2
 800ca0e:	461e      	mov	r6, r3
 800ca10:	da0d      	bge.n	800ca2e <__swhatbuf_r+0x2e>
 800ca12:	89a3      	ldrh	r3, [r4, #12]
 800ca14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca18:	f04f 0100 	mov.w	r1, #0
 800ca1c:	bf14      	ite	ne
 800ca1e:	2340      	movne	r3, #64	@ 0x40
 800ca20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca24:	2000      	movs	r0, #0
 800ca26:	6031      	str	r1, [r6, #0]
 800ca28:	602b      	str	r3, [r5, #0]
 800ca2a:	b016      	add	sp, #88	@ 0x58
 800ca2c:	bd70      	pop	{r4, r5, r6, pc}
 800ca2e:	466a      	mov	r2, sp
 800ca30:	f000 f848 	bl	800cac4 <_fstat_r>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	dbec      	blt.n	800ca12 <__swhatbuf_r+0x12>
 800ca38:	9901      	ldr	r1, [sp, #4]
 800ca3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca42:	4259      	negs	r1, r3
 800ca44:	4159      	adcs	r1, r3
 800ca46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca4a:	e7eb      	b.n	800ca24 <__swhatbuf_r+0x24>

0800ca4c <__smakebuf_r>:
 800ca4c:	898b      	ldrh	r3, [r1, #12]
 800ca4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca50:	079d      	lsls	r5, r3, #30
 800ca52:	4606      	mov	r6, r0
 800ca54:	460c      	mov	r4, r1
 800ca56:	d507      	bpl.n	800ca68 <__smakebuf_r+0x1c>
 800ca58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca5c:	6023      	str	r3, [r4, #0]
 800ca5e:	6123      	str	r3, [r4, #16]
 800ca60:	2301      	movs	r3, #1
 800ca62:	6163      	str	r3, [r4, #20]
 800ca64:	b003      	add	sp, #12
 800ca66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca68:	ab01      	add	r3, sp, #4
 800ca6a:	466a      	mov	r2, sp
 800ca6c:	f7ff ffc8 	bl	800ca00 <__swhatbuf_r>
 800ca70:	9f00      	ldr	r7, [sp, #0]
 800ca72:	4605      	mov	r5, r0
 800ca74:	4639      	mov	r1, r7
 800ca76:	4630      	mov	r0, r6
 800ca78:	f7fe febe 	bl	800b7f8 <_malloc_r>
 800ca7c:	b948      	cbnz	r0, 800ca92 <__smakebuf_r+0x46>
 800ca7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca82:	059a      	lsls	r2, r3, #22
 800ca84:	d4ee      	bmi.n	800ca64 <__smakebuf_r+0x18>
 800ca86:	f023 0303 	bic.w	r3, r3, #3
 800ca8a:	f043 0302 	orr.w	r3, r3, #2
 800ca8e:	81a3      	strh	r3, [r4, #12]
 800ca90:	e7e2      	b.n	800ca58 <__smakebuf_r+0xc>
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	6020      	str	r0, [r4, #0]
 800ca96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca9a:	81a3      	strh	r3, [r4, #12]
 800ca9c:	9b01      	ldr	r3, [sp, #4]
 800ca9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800caa2:	b15b      	cbz	r3, 800cabc <__smakebuf_r+0x70>
 800caa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caa8:	4630      	mov	r0, r6
 800caaa:	f000 f81d 	bl	800cae8 <_isatty_r>
 800caae:	b128      	cbz	r0, 800cabc <__smakebuf_r+0x70>
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	f023 0303 	bic.w	r3, r3, #3
 800cab6:	f043 0301 	orr.w	r3, r3, #1
 800caba:	81a3      	strh	r3, [r4, #12]
 800cabc:	89a3      	ldrh	r3, [r4, #12]
 800cabe:	431d      	orrs	r5, r3
 800cac0:	81a5      	strh	r5, [r4, #12]
 800cac2:	e7cf      	b.n	800ca64 <__smakebuf_r+0x18>

0800cac4 <_fstat_r>:
 800cac4:	b538      	push	{r3, r4, r5, lr}
 800cac6:	4d07      	ldr	r5, [pc, #28]	@ (800cae4 <_fstat_r+0x20>)
 800cac8:	2300      	movs	r3, #0
 800caca:	4604      	mov	r4, r0
 800cacc:	4608      	mov	r0, r1
 800cace:	4611      	mov	r1, r2
 800cad0:	602b      	str	r3, [r5, #0]
 800cad2:	f7f5 fb59 	bl	8002188 <_fstat>
 800cad6:	1c43      	adds	r3, r0, #1
 800cad8:	d102      	bne.n	800cae0 <_fstat_r+0x1c>
 800cada:	682b      	ldr	r3, [r5, #0]
 800cadc:	b103      	cbz	r3, 800cae0 <_fstat_r+0x1c>
 800cade:	6023      	str	r3, [r4, #0]
 800cae0:	bd38      	pop	{r3, r4, r5, pc}
 800cae2:	bf00      	nop
 800cae4:	20002238 	.word	0x20002238

0800cae8 <_isatty_r>:
 800cae8:	b538      	push	{r3, r4, r5, lr}
 800caea:	4d06      	ldr	r5, [pc, #24]	@ (800cb04 <_isatty_r+0x1c>)
 800caec:	2300      	movs	r3, #0
 800caee:	4604      	mov	r4, r0
 800caf0:	4608      	mov	r0, r1
 800caf2:	602b      	str	r3, [r5, #0]
 800caf4:	f7f5 fb58 	bl	80021a8 <_isatty>
 800caf8:	1c43      	adds	r3, r0, #1
 800cafa:	d102      	bne.n	800cb02 <_isatty_r+0x1a>
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	b103      	cbz	r3, 800cb02 <_isatty_r+0x1a>
 800cb00:	6023      	str	r3, [r4, #0]
 800cb02:	bd38      	pop	{r3, r4, r5, pc}
 800cb04:	20002238 	.word	0x20002238

0800cb08 <atan2f>:
 800cb08:	f000 b828 	b.w	800cb5c <__ieee754_atan2f>

0800cb0c <sqrtf>:
 800cb0c:	b508      	push	{r3, lr}
 800cb0e:	ed2d 8b02 	vpush	{d8}
 800cb12:	eeb0 8a40 	vmov.f32	s16, s0
 800cb16:	f000 f81e 	bl	800cb56 <__ieee754_sqrtf>
 800cb1a:	eeb4 8a48 	vcmp.f32	s16, s16
 800cb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb22:	d60c      	bvs.n	800cb3e <sqrtf+0x32>
 800cb24:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cb44 <sqrtf+0x38>
 800cb28:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb30:	d505      	bpl.n	800cb3e <sqrtf+0x32>
 800cb32:	f7fd ff73 	bl	800aa1c <__errno>
 800cb36:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cb3a:	2321      	movs	r3, #33	@ 0x21
 800cb3c:	6003      	str	r3, [r0, #0]
 800cb3e:	ecbd 8b02 	vpop	{d8}
 800cb42:	bd08      	pop	{r3, pc}
 800cb44:	00000000 	.word	0x00000000

0800cb48 <fabsf>:
 800cb48:	ee10 3a10 	vmov	r3, s0
 800cb4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb50:	ee00 3a10 	vmov	s0, r3
 800cb54:	4770      	bx	lr

0800cb56 <__ieee754_sqrtf>:
 800cb56:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cb5a:	4770      	bx	lr

0800cb5c <__ieee754_atan2f>:
 800cb5c:	ee10 2a90 	vmov	r2, s1
 800cb60:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800cb64:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cb68:	b510      	push	{r4, lr}
 800cb6a:	eef0 7a40 	vmov.f32	s15, s0
 800cb6e:	d806      	bhi.n	800cb7e <__ieee754_atan2f+0x22>
 800cb70:	ee10 0a10 	vmov	r0, s0
 800cb74:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800cb78:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb7c:	d904      	bls.n	800cb88 <__ieee754_atan2f+0x2c>
 800cb7e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cb82:	eeb0 0a67 	vmov.f32	s0, s15
 800cb86:	bd10      	pop	{r4, pc}
 800cb88:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800cb8c:	d103      	bne.n	800cb96 <__ieee754_atan2f+0x3a>
 800cb8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb92:	f000 b883 	b.w	800cc9c <atanf>
 800cb96:	1794      	asrs	r4, r2, #30
 800cb98:	f004 0402 	and.w	r4, r4, #2
 800cb9c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800cba0:	b943      	cbnz	r3, 800cbb4 <__ieee754_atan2f+0x58>
 800cba2:	2c02      	cmp	r4, #2
 800cba4:	d05e      	beq.n	800cc64 <__ieee754_atan2f+0x108>
 800cba6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800cc78 <__ieee754_atan2f+0x11c>
 800cbaa:	2c03      	cmp	r4, #3
 800cbac:	bf08      	it	eq
 800cbae:	eef0 7a47 	vmoveq.f32	s15, s14
 800cbb2:	e7e6      	b.n	800cb82 <__ieee754_atan2f+0x26>
 800cbb4:	b941      	cbnz	r1, 800cbc8 <__ieee754_atan2f+0x6c>
 800cbb6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800cc7c <__ieee754_atan2f+0x120>
 800cbba:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800cc80 <__ieee754_atan2f+0x124>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	bfb8      	it	lt
 800cbc2:	eef0 7a47 	vmovlt.f32	s15, s14
 800cbc6:	e7dc      	b.n	800cb82 <__ieee754_atan2f+0x26>
 800cbc8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cbcc:	d110      	bne.n	800cbf0 <__ieee754_atan2f+0x94>
 800cbce:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cbd2:	f104 34ff 	add.w	r4, r4, #4294967295
 800cbd6:	d107      	bne.n	800cbe8 <__ieee754_atan2f+0x8c>
 800cbd8:	2c02      	cmp	r4, #2
 800cbda:	d846      	bhi.n	800cc6a <__ieee754_atan2f+0x10e>
 800cbdc:	4b29      	ldr	r3, [pc, #164]	@ (800cc84 <__ieee754_atan2f+0x128>)
 800cbde:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cbe2:	edd3 7a00 	vldr	s15, [r3]
 800cbe6:	e7cc      	b.n	800cb82 <__ieee754_atan2f+0x26>
 800cbe8:	2c02      	cmp	r4, #2
 800cbea:	d841      	bhi.n	800cc70 <__ieee754_atan2f+0x114>
 800cbec:	4b26      	ldr	r3, [pc, #152]	@ (800cc88 <__ieee754_atan2f+0x12c>)
 800cbee:	e7f6      	b.n	800cbde <__ieee754_atan2f+0x82>
 800cbf0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cbf4:	d0df      	beq.n	800cbb6 <__ieee754_atan2f+0x5a>
 800cbf6:	1a5b      	subs	r3, r3, r1
 800cbf8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800cbfc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800cc00:	da1a      	bge.n	800cc38 <__ieee754_atan2f+0xdc>
 800cc02:	2a00      	cmp	r2, #0
 800cc04:	da01      	bge.n	800cc0a <__ieee754_atan2f+0xae>
 800cc06:	313c      	adds	r1, #60	@ 0x3c
 800cc08:	db19      	blt.n	800cc3e <__ieee754_atan2f+0xe2>
 800cc0a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800cc0e:	f7ff ff9b 	bl	800cb48 <fabsf>
 800cc12:	f000 f843 	bl	800cc9c <atanf>
 800cc16:	eef0 7a40 	vmov.f32	s15, s0
 800cc1a:	2c01      	cmp	r4, #1
 800cc1c:	d012      	beq.n	800cc44 <__ieee754_atan2f+0xe8>
 800cc1e:	2c02      	cmp	r4, #2
 800cc20:	d017      	beq.n	800cc52 <__ieee754_atan2f+0xf6>
 800cc22:	2c00      	cmp	r4, #0
 800cc24:	d0ad      	beq.n	800cb82 <__ieee754_atan2f+0x26>
 800cc26:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800cc8c <__ieee754_atan2f+0x130>
 800cc2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc2e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800cc90 <__ieee754_atan2f+0x134>
 800cc32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc36:	e7a4      	b.n	800cb82 <__ieee754_atan2f+0x26>
 800cc38:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800cc7c <__ieee754_atan2f+0x120>
 800cc3c:	e7ed      	b.n	800cc1a <__ieee754_atan2f+0xbe>
 800cc3e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cc94 <__ieee754_atan2f+0x138>
 800cc42:	e7ea      	b.n	800cc1a <__ieee754_atan2f+0xbe>
 800cc44:	ee17 3a90 	vmov	r3, s15
 800cc48:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cc4c:	ee07 3a90 	vmov	s15, r3
 800cc50:	e797      	b.n	800cb82 <__ieee754_atan2f+0x26>
 800cc52:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800cc8c <__ieee754_atan2f+0x130>
 800cc56:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc5a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800cc90 <__ieee754_atan2f+0x134>
 800cc5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc62:	e78e      	b.n	800cb82 <__ieee754_atan2f+0x26>
 800cc64:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800cc90 <__ieee754_atan2f+0x134>
 800cc68:	e78b      	b.n	800cb82 <__ieee754_atan2f+0x26>
 800cc6a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800cc98 <__ieee754_atan2f+0x13c>
 800cc6e:	e788      	b.n	800cb82 <__ieee754_atan2f+0x26>
 800cc70:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cc94 <__ieee754_atan2f+0x138>
 800cc74:	e785      	b.n	800cb82 <__ieee754_atan2f+0x26>
 800cc76:	bf00      	nop
 800cc78:	c0490fdb 	.word	0xc0490fdb
 800cc7c:	3fc90fdb 	.word	0x3fc90fdb
 800cc80:	bfc90fdb 	.word	0xbfc90fdb
 800cc84:	0800d254 	.word	0x0800d254
 800cc88:	0800d248 	.word	0x0800d248
 800cc8c:	33bbbd2e 	.word	0x33bbbd2e
 800cc90:	40490fdb 	.word	0x40490fdb
 800cc94:	00000000 	.word	0x00000000
 800cc98:	3f490fdb 	.word	0x3f490fdb

0800cc9c <atanf>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	ee10 5a10 	vmov	r5, s0
 800cca2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800cca6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ccaa:	eef0 7a40 	vmov.f32	s15, s0
 800ccae:	d310      	bcc.n	800ccd2 <atanf+0x36>
 800ccb0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ccb4:	d904      	bls.n	800ccc0 <atanf+0x24>
 800ccb6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ccba:	eeb0 0a67 	vmov.f32	s0, s15
 800ccbe:	bd38      	pop	{r3, r4, r5, pc}
 800ccc0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800cdf8 <atanf+0x15c>
 800ccc4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800cdfc <atanf+0x160>
 800ccc8:	2d00      	cmp	r5, #0
 800ccca:	bfc8      	it	gt
 800cccc:	eef0 7a47 	vmovgt.f32	s15, s14
 800ccd0:	e7f3      	b.n	800ccba <atanf+0x1e>
 800ccd2:	4b4b      	ldr	r3, [pc, #300]	@ (800ce00 <atanf+0x164>)
 800ccd4:	429c      	cmp	r4, r3
 800ccd6:	d810      	bhi.n	800ccfa <atanf+0x5e>
 800ccd8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ccdc:	d20a      	bcs.n	800ccf4 <atanf+0x58>
 800ccde:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ce04 <atanf+0x168>
 800cce2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ccea:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ccee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf2:	dce2      	bgt.n	800ccba <atanf+0x1e>
 800ccf4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf8:	e013      	b.n	800cd22 <atanf+0x86>
 800ccfa:	f7ff ff25 	bl	800cb48 <fabsf>
 800ccfe:	4b42      	ldr	r3, [pc, #264]	@ (800ce08 <atanf+0x16c>)
 800cd00:	429c      	cmp	r4, r3
 800cd02:	d84f      	bhi.n	800cda4 <atanf+0x108>
 800cd04:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800cd08:	429c      	cmp	r4, r3
 800cd0a:	d841      	bhi.n	800cd90 <atanf+0xf4>
 800cd0c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cd10:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cd14:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cd18:	2300      	movs	r3, #0
 800cd1a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cd1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cd28:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ce0c <atanf+0x170>
 800cd2c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ce10 <atanf+0x174>
 800cd30:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ce14 <atanf+0x178>
 800cd34:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cd38:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cd3c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ce18 <atanf+0x17c>
 800cd40:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cd44:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ce1c <atanf+0x180>
 800cd48:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cd4c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ce20 <atanf+0x184>
 800cd50:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cd54:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ce24 <atanf+0x188>
 800cd58:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cd5c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ce28 <atanf+0x18c>
 800cd60:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cd64:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ce2c <atanf+0x190>
 800cd68:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cd6c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ce30 <atanf+0x194>
 800cd70:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cd74:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ce34 <atanf+0x198>
 800cd78:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cd7c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cd80:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cd84:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cd88:	d121      	bne.n	800cdce <atanf+0x132>
 800cd8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd8e:	e794      	b.n	800ccba <atanf+0x1e>
 800cd90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cd94:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cd98:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cda2:	e7be      	b.n	800cd22 <atanf+0x86>
 800cda4:	4b24      	ldr	r3, [pc, #144]	@ (800ce38 <atanf+0x19c>)
 800cda6:	429c      	cmp	r4, r3
 800cda8:	d80b      	bhi.n	800cdc2 <atanf+0x126>
 800cdaa:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800cdae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cdb2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cdb6:	2302      	movs	r3, #2
 800cdb8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cdbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdc0:	e7af      	b.n	800cd22 <atanf+0x86>
 800cdc2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cdc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cdca:	2303      	movs	r3, #3
 800cdcc:	e7a9      	b.n	800cd22 <atanf+0x86>
 800cdce:	4a1b      	ldr	r2, [pc, #108]	@ (800ce3c <atanf+0x1a0>)
 800cdd0:	491b      	ldr	r1, [pc, #108]	@ (800ce40 <atanf+0x1a4>)
 800cdd2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cdd6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cdda:	edd3 6a00 	vldr	s13, [r3]
 800cdde:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cde2:	2d00      	cmp	r5, #0
 800cde4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cde8:	edd2 7a00 	vldr	s15, [r2]
 800cdec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdf0:	bfb8      	it	lt
 800cdf2:	eef1 7a67 	vneglt.f32	s15, s15
 800cdf6:	e760      	b.n	800ccba <atanf+0x1e>
 800cdf8:	bfc90fdb 	.word	0xbfc90fdb
 800cdfc:	3fc90fdb 	.word	0x3fc90fdb
 800ce00:	3edfffff 	.word	0x3edfffff
 800ce04:	7149f2ca 	.word	0x7149f2ca
 800ce08:	3f97ffff 	.word	0x3f97ffff
 800ce0c:	3c8569d7 	.word	0x3c8569d7
 800ce10:	3d4bda59 	.word	0x3d4bda59
 800ce14:	bd6ef16b 	.word	0xbd6ef16b
 800ce18:	3d886b35 	.word	0x3d886b35
 800ce1c:	3dba2e6e 	.word	0x3dba2e6e
 800ce20:	3e124925 	.word	0x3e124925
 800ce24:	3eaaaaab 	.word	0x3eaaaaab
 800ce28:	bd15a221 	.word	0xbd15a221
 800ce2c:	bd9d8795 	.word	0xbd9d8795
 800ce30:	bde38e38 	.word	0xbde38e38
 800ce34:	be4ccccd 	.word	0xbe4ccccd
 800ce38:	401bffff 	.word	0x401bffff
 800ce3c:	0800d270 	.word	0x0800d270
 800ce40:	0800d260 	.word	0x0800d260

0800ce44 <_init>:
 800ce44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce46:	bf00      	nop
 800ce48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce4a:	bc08      	pop	{r3}
 800ce4c:	469e      	mov	lr, r3
 800ce4e:	4770      	bx	lr

0800ce50 <_fini>:
 800ce50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce52:	bf00      	nop
 800ce54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce56:	bc08      	pop	{r3}
 800ce58:	469e      	mov	lr, r3
 800ce5a:	4770      	bx	lr
