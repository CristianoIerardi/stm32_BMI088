
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  08010e20  08010e20  00011e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116d8  080116d8  00013300  2**0
                  CONTENTS
  4 .ARM          00000008  080116d8  080116d8  000126d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116e0  080116e0  00013300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116e0  080116e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080116e4  080116e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000300  20000000  080116e8  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013300  2**0
                  CONTENTS
 10 .bss          00002040  20000300  20000300  00013300  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002340  20002340  00013300  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013300  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184d3  00000000  00000000  00013330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f1f  00000000  00000000  0002b803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0002f728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108c  00000000  00000000  00030ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005b2e  00000000  00000000  00031d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c296  00000000  00000000  0003789a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6dbd  00000000  00000000  00053b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a8ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007290  00000000  00000000  0011a930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00121bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000300 	.word	0x20000300
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010e04 	.word	0x08010e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000304 	.word	0x20000304
 80001cc:	08010e04 	.word	0x08010e04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6a3a      	ldr	r2, [r7, #32]
 8000f5c:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f62:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2200      	movs	r2, #0
 8000f68:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6858      	ldr	r0, [r3, #4]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	899b      	ldrh	r3, [r3, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f003 fa88 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f002 fc21 	bl	80037cc <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6858      	ldr	r0, [r3, #4]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	899b      	ldrh	r3, [r3, #12]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4619      	mov	r1, r3
 8000f96:	f003 fa7d 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000f9a:	2032      	movs	r0, #50	@ 0x32
 8000f9c:	f002 fc16 	bl	80037cc <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000fa0:	22b6      	movs	r2, #182	@ 0xb6
 8000fa2:	217e      	movs	r1, #126	@ 0x7e
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f9e6 	bl	8001376 <BMI088_WriteAccRegister>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000fb4:	2032      	movs	r0, #50	@ 0x32
 8000fb6:	f002 fc09 	bl	80037cc <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8000fba:	f107 0316 	add.w	r3, r7, #22
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f95d 	bl	8001282 <BMI088_ReadAccRegister>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	4413      	add	r3, r2
 8000fd0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f002 fbfa 	bl	80037cc <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0x09); /* (no oversampling, ODR = 200 Hz, BW = ?? Hz /////////////////////////BW = 40 Hz) */
 8000fd8:	2209      	movs	r2, #9
 8000fda:	2140      	movs	r1, #64	@ 0x40
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 f9ca 	bl	8001376 <BMI088_WriteAccRegister>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	4413      	add	r3, r2
 8000fea:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fec:	200a      	movs	r0, #10
 8000fee:	f002 fbed 	bl	80037cc <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x01); /* +- 6g range */
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2141      	movs	r1, #65	@ 0x41
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f9bd 	bl	8001376 <BMI088_WriteAccRegister>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	4413      	add	r3, r2
 8001004:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f002 fbe0 	bl	80037cc <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 800100c:	220a      	movs	r2, #10
 800100e:	2153      	movs	r1, #83	@ 0x53
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 f9b0 	bl	8001376 <BMI088_WriteAccRegister>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	4413      	add	r3, r2
 800101e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f002 fbd3 	bl	80037cc <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8001026:	2204      	movs	r2, #4
 8001028:	2158      	movs	r1, #88	@ 0x58
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f9a3 	bl	8001376 <BMI088_WriteAccRegister>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	4413      	add	r3, r2
 8001038:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f002 fbc6 	bl	80037cc <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8001040:	2200      	movs	r2, #0
 8001042:	217c      	movs	r1, #124	@ 0x7c
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f996 	bl	8001376 <BMI088_WriteAccRegister>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	4413      	add	r3, r2
 8001052:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f002 fbb9 	bl	80037cc <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800105a:	2204      	movs	r2, #4
 800105c:	217d      	movs	r1, #125	@ 0x7d
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f989 	bl	8001376 <BMI088_WriteAccRegister>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	4413      	add	r3, r2
 800106c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800106e:	200a      	movs	r0, #10
 8001070:	f002 fbac 	bl	80037cc <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4a3a      	ldr	r2, [pc, #232]	@ (8001160 <BMI088_Init+0x228>)
 8001078:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2292      	movs	r2, #146	@ 0x92
 800107e:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	89db      	ldrh	r3, [r3, #14]
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	f003 fa02 	bl	8004494 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001090:	22b6      	movs	r2, #182	@ 0xb6
 8001092:	2114      	movs	r1, #20
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f9a8 	bl	80013ea <BMI088_WriteGyrRegister>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	4413      	add	r3, r2
 80010a2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 80010a4:	20fa      	movs	r0, #250	@ 0xfa
 80010a6:	f002 fb91 	bl	80037cc <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80010aa:	f107 0316 	add.w	r3, r7, #22
 80010ae:	461a      	mov	r2, r3
 80010b0:	2100      	movs	r1, #0
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f923 	bl	80012fe <BMI088_ReadGyrRegister>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	4413      	add	r3, r2
 80010c0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f002 fb82 	bl	80037cc <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80010c8:	2201      	movs	r2, #1
 80010ca:	210f      	movs	r1, #15
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 f98c 	bl	80013ea <BMI088_WriteGyrRegister>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	4413      	add	r3, r2
 80010da:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f002 fb75 	bl	80037cc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* ODR = 200 Hz, Filter bandwidth = 64 Hz */
 80010e2:	2206      	movs	r2, #6
 80010e4:	2110      	movs	r1, #16
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 f97f 	bl	80013ea <BMI088_WriteGyrRegister>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	4413      	add	r3, r2
 80010f4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f002 fb68 	bl	80037cc <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	2115      	movs	r1, #21
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 f972 	bl	80013ea <BMI088_WriteGyrRegister>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	7dfb      	ldrb	r3, [r7, #23]
 800110c:	4413      	add	r3, r2
 800110e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f002 fb5b 	bl	80037cc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001116:	2201      	movs	r2, #1
 8001118:	2116      	movs	r1, #22
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 f965 	bl	80013ea <BMI088_WriteGyrRegister>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	4413      	add	r3, r2
 8001128:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800112a:	200a      	movs	r0, #10
 800112c:	f002 fb4e 	bl	80037cc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001130:	2201      	movs	r2, #1
 8001132:	2118      	movs	r1, #24
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 f958 	bl	80013ea <BMI088_WriteGyrRegister>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	4413      	add	r3, r2
 8001142:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f002 fb41 	bl	80037cc <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <BMI088_Init+0x22c>)
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2282      	movs	r2, #130	@ 0x82
 8001154:	769a      	strb	r2, [r3, #26]

	return status;
 8001156:	7dfb      	ldrb	r3, [r7, #23]

}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	3a6b70a4 	.word	0x3a6b70a4
 8001164:	3a0ba058 	.word	0x3a0ba058

08001168 <Init_BMI088_Bias>:


void Init_BMI088_Bias(BMI088* imu, int cycles)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < cycles; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e044      	b.n	8001202 <Init_BMI088_Bias+0x9a>
    {
        imu->gyr_bias[0] += imu->gyr_rps[0];
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        imu->gyr_bias[1] += imu->gyr_rps[1];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800119a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        imu->gyr_bias[2] += imu->gyr_rps[2];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
        imu->acc_bias[0] += imu->acc_mps2[0];
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80011c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
        imu->acc_bias[1] += imu->acc_mps2[1];
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80011dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
        imu->acc_bias[2] += imu->acc_mps2[2];
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    for (int i = 0; i < cycles; i++)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3301      	adds	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	dbb6      	blt.n	8001178 <Init_BMI088_Bias+0x10>
    }
    for (int i = 0; i < 3; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	e02e      	b.n	800126e <Init_BMI088_Bias+0x106>
    {
    	imu->gyr_bias[i] = imu->gyr_bias[i] / cycles;
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3316      	adds	r3, #22
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3304      	adds	r3, #4
 800121c:	edd3 6a00 	vldr	s13, [r3]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3316      	adds	r3, #22
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3304      	adds	r3, #4
 800123a:	edc3 7a00 	vstr	s15, [r3]
    	imu->acc_bias[i] = imu->acc_bias[i] / cycles;
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3314      	adds	r3, #20
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	edd3 6a00 	vldr	s13, [r3]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3314      	adds	r3, #20
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3301      	adds	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b02      	cmp	r3, #2
 8001272:	ddcd      	ble.n	8001210 <Init_BMI088_Bias+0xa8>
    }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */


/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b088      	sub	sp, #32
 8001286:	af02      	add	r7, sp, #8
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	460b      	mov	r3, r1
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8001290:	7afb      	ldrb	r3, [r7, #11]
 8001292:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001296:	b2db      	uxtb	r3, r3
 8001298:	753b      	strb	r3, [r7, #20]
 800129a:	2300      	movs	r3, #0
 800129c:	757b      	strb	r3, [r7, #21]
 800129e:	2300      	movs	r3, #0
 80012a0:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6858      	ldr	r0, [r3, #4]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	899b      	ldrh	r3, [r3, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	f003 f8f1 	bl	8004494 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	f107 0210 	add.w	r2, r7, #16
 80012ba:	f107 0114 	add.w	r1, r7, #20
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2303      	movs	r3, #3
 80012c6:	f005 f9be 	bl	8006646 <HAL_SPI_TransmitReceive>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6858      	ldr	r0, [r3, #4]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	899b      	ldrh	r3, [r3, #12]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	f003 f8d6 	bl	8004494 <HAL_GPIO_WritePin>

	if (status == 1) {
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d102      	bne.n	80012f4 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 80012ee:	7cba      	ldrb	r2, [r7, #18]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80012f4:	7dfb      	ldrb	r3, [r7, #23]

}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80012fe:	b580      	push	{r7, lr}
 8001300:	b088      	sub	sp, #32
 8001302:	af02      	add	r7, sp, #8
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	460b      	mov	r3, r1
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001312:	b2db      	uxtb	r3, r3
 8001314:	753b      	strb	r3, [r7, #20]
 8001316:	2300      	movs	r3, #0
 8001318:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6898      	ldr	r0, [r3, #8]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	89db      	ldrh	r3, [r3, #14]
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	f003 f8b5 	bl	8004494 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	f107 0210 	add.w	r2, r7, #16
 8001332:	f107 0114 	add.w	r1, r7, #20
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2302      	movs	r3, #2
 800133e:	f005 f982 	bl	8006646 <HAL_SPI_TransmitReceive>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6898      	ldr	r0, [r3, #8]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	89db      	ldrh	r3, [r3, #14]
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	f003 f89a 	bl	8004494 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8001366:	7c7a      	ldrb	r2, [r7, #17]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800136c:	7dfb      	ldrb	r3, [r7, #23]

}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
 8001382:	4613      	mov	r3, r2
 8001384:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	733b      	strb	r3, [r7, #12]
 800138a:	78bb      	ldrb	r3, [r7, #2]
 800138c:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6858      	ldr	r0, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	899b      	ldrh	r3, [r3, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	f003 f87b 	bl	8004494 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	f107 010c 	add.w	r1, r7, #12
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	2202      	movs	r2, #2
 80013ac:	f005 f807 	bl	80063be <HAL_SPI_Transmit>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf0c      	ite	eq
 80013b6:	2301      	moveq	r3, #1
 80013b8:	2300      	movne	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80013be:	bf00      	nop
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f005 fcff 	bl	8006dc8 <HAL_SPI_GetState>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d1f7      	bne.n	80013c0 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6858      	ldr	r0, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	899b      	ldrh	r3, [r3, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	f003 f85a 	bl	8004494 <HAL_GPIO_WritePin>

	return status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]

}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	70fb      	strb	r3, [r7, #3]
 80013f6:	4613      	mov	r3, r2
 80013f8:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	733b      	strb	r3, [r7, #12]
 80013fe:	78bb      	ldrb	r3, [r7, #2]
 8001400:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6898      	ldr	r0, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	89db      	ldrh	r3, [r3, #14]
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	f003 f841 	bl	8004494 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	f107 010c 	add.w	r1, r7, #12
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	2202      	movs	r2, #2
 8001420:	f004 ffcd 	bl	80063be <HAL_SPI_Transmit>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001432:	bf00      	nop
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f005 fcc5 	bl	8006dc8 <HAL_SPI_GetState>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	d1f7      	bne.n	8001434 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6898      	ldr	r0, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	89db      	ldrh	r3, [r3, #14]
 800144c:	2201      	movs	r2, #1
 800144e:	4619      	mov	r1, r3
 8001450:	f003 f820 	bl	8004494 <HAL_GPIO_WritePin>

	return status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]

}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]

	if (imu->readingAcc)  // To not have double calls
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7c1b      	ldrb	r3, [r3, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <BMI088_ReadAccelerometerDMA+0x14>
		return 0;
 800146e:	2300      	movs	r3, #0
 8001470:	e023      	b.n	80014ba <BMI088_ReadAccelerometerDMA+0x5c>

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6858      	ldr	r0, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	899b      	ldrh	r3, [r3, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	f003 f809 	bl	8004494 <HAL_GPIO_WritePin>

	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f103 0112 	add.w	r1, r3, #18
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8001492:	2308      	movs	r3, #8
 8001494:	f005 fa80 	bl	8006998 <HAL_SPI_TransmitReceive_DMA>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d104      	bne.n	80014a8 <BMI088_ReadAccelerometerDMA+0x4a>

		imu->readingAcc = 1;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	741a      	strb	r2, [r3, #16]
		return 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e008      	b.n	80014ba <BMI088_ReadAccelerometerDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6858      	ldr	r0, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	899b      	ldrh	r3, [r3, #12]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4619      	mov	r1, r3
 80014b4:	f002 ffee 	bl	8004494 <HAL_GPIO_WritePin>
		return 0;
 80014b8:	2300      	movs	r3, #0

	}

}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6858      	ldr	r0, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	899b      	ldrh	r3, [r3, #12]
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	f002 ffdd 	bl	8004494 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001500:	b2db      	uxtb	r3, r3
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800151a:	b2db      	uxtb	r3, r3
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001526:	b2db      	uxtb	r3, r3
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX * 2;		// *2 was added by Cristiano.
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY * 2;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001554:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001564:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ * 2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001574:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]

	if (imu->readingGyr)  // To not have double calls
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7c5b      	ldrb	r3, [r3, #17]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <BMI088_ReadGyroscopeDMA+0x14>
		return 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e023      	b.n	80015f2 <BMI088_ReadGyroscopeDMA+0x5c>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6898      	ldr	r0, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	89db      	ldrh	r3, [r3, #14]
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	f002 ff6d 	bl	8004494 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f103 011a 	add.w	r1, r3, #26
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80015ca:	2307      	movs	r3, #7
 80015cc:	f005 f9e4 	bl	8006998 <HAL_SPI_TransmitReceive_DMA>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d104      	bne.n	80015e0 <BMI088_ReadGyroscopeDMA+0x4a>

		imu->readingGyr = 1;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	745a      	strb	r2, [r3, #17]
		return 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	e008      	b.n	80015f2 <BMI088_ReadGyroscopeDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6898      	ldr	r0, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	89db      	ldrh	r3, [r3, #14]
 80015e8:	2201      	movs	r2, #1
 80015ea:	4619      	mov	r1, r3
 80015ec:	f002 ff52 	bl	8004494 <HAL_GPIO_WritePin>
		return 0;
 80015f0:	2300      	movs	r3, #0

	}

}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6898      	ldr	r0, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	89db      	ldrh	r3, [r3, #14]
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	f002 ff41 	bl	8004494 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800161e:	b2db      	uxtb	r3, r3
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800162a:	b2db      	uxtb	r3, r3
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001638:	b2db      	uxtb	r3, r3
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001644:	b2db      	uxtb	r3, r3
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001652:	b2db      	uxtb	r3, r3
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800165e:	b2db      	uxtb	r3, r3
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800166c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001688:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80016a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	0000      	movs	r0, r0
 80016c4:	0000      	movs	r0, r0
	...

080016c8 <QuaternionToEuler>:
    NormalizeQuaternion(q_out);
}


// Conversion from quaternion to euler angles
void QuaternionToEuler(Quaternion q, float* ang) {
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	eeb0 6a40 	vmov.f32	s12, s0
 80016d2:	eef0 6a60 	vmov.f32	s13, s1
 80016d6:	eeb0 7a41 	vmov.f32	s14, s2
 80016da:	eef0 7a61 	vmov.f32	s15, s3
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	ed87 6a02 	vstr	s12, [r7, #8]
 80016e4:	edc7 6a03 	vstr	s13, [r7, #12]
 80016e8:	ed87 7a04 	vstr	s14, [r7, #16]
 80016ec:	edc7 7a05 	vstr	s15, [r7, #20]
    //EulerAngles angles;

    // Roll (X-axis rotation)
    float sinr_cosp = 2.0f * (q.w * q.x + q.y * q.z);
 80016f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80016f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8001700:	edd7 7a05 	vldr	s15, [r7, #20]
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001710:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float cosr_cosp = 1.0f - 2.0f * (q.x * q.x + q.y * q.y);
 8001714:	ed97 7a03 	vldr	s14, [r7, #12]
 8001718:	edd7 7a03 	vldr	s15, [r7, #12]
 800171c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001720:	edd7 6a04 	vldr	s13, [r7, #16]
 8001724:	edd7 7a04 	vldr	s15, [r7, #16]
 8001728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001730:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles.roll = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
    ang[0] = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
 8001740:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001742:	f7fe ff01 	bl	8000548 <__aeabi_f2d>
 8001746:	4604      	mov	r4, r0
 8001748:	460d      	mov	r5, r1
 800174a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	ec43 2b11 	vmov	d1, r2, r3
 8001758:	ec45 4b10 	vmov	d0, r4, r5
 800175c:	f00d f8a6 	bl	800e8ac <atan2>
 8001760:	ec51 0b10 	vmov	r0, r1, d0
 8001764:	a356      	add	r3, pc, #344	@ (adr r3, 80018c0 <QuaternionToEuler+0x1f8>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe ff45 	bl	80005f8 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa17 	bl	8000ba8 <__aeabi_d2f>
 800177a:	4602      	mov	r2, r0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	601a      	str	r2, [r3, #0]

    // Pitch (Y-axis rotation)
    float sinp = 2.0f * (q.w * q.y - q.z * q.x);
 8001780:	ed97 7a02 	vldr	s14, [r7, #8]
 8001784:	edd7 7a04 	vldr	s15, [r7, #16]
 8001788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800178c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001790:	edd7 7a03 	vldr	s15, [r7, #12]
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (fabs(sinp) >= 1)
 80017a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017a8:	eef0 7ae7 	vabs.f32	s15, s15
 80017ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	db13      	blt.n	80017e2 <QuaternionToEuler+0x11a>
        ang[1] = copysign(90.0f, sinp); // Evita errori numerici, blocco di gimbal lock
 80017ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017bc:	f7fe fec4 	bl	8000548 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	ec43 2b11 	vmov	d1, r2, r3
 80017c8:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 80018b8 <QuaternionToEuler+0x1f0>
 80017cc:	f00a ffed 	bl	800c7aa <copysign>
 80017d0:	ec51 0b10 	vmov	r0, r1, d0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1d1c      	adds	r4, r3, #4
 80017d8:	f7ff f9e6 	bl	8000ba8 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	6023      	str	r3, [r4, #0]
 80017e0:	e019      	b.n	8001816 <QuaternionToEuler+0x14e>
    else
        ang[1] = asin(sinp) * RAD_TO_DEG;
 80017e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017e4:	f7fe feb0 	bl	8000548 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	ec43 2b10 	vmov	d0, r2, r3
 80017f0:	f00d f828 	bl	800e844 <asin>
 80017f4:	ec51 0b10 	vmov	r0, r1, d0
 80017f8:	a331      	add	r3, pc, #196	@ (adr r3, 80018c0 <QuaternionToEuler+0x1f8>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe fefb 	bl	80005f8 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	1d1c      	adds	r4, r3, #4
 800180e:	f7ff f9cb 	bl	8000ba8 <__aeabi_d2f>
 8001812:	4603      	mov	r3, r0
 8001814:	6023      	str	r3, [r4, #0]

    // Yaw (Z-axis rotation)
    float siny_cosp = 2.0f * (q.w * q.z + q.x * q.y);
 8001816:	ed97 7a02 	vldr	s14, [r7, #8]
 800181a:	edd7 7a05 	vldr	s15, [r7, #20]
 800181e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001822:	edd7 6a03 	vldr	s13, [r7, #12]
 8001826:	edd7 7a04 	vldr	s15, [r7, #16]
 800182a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001832:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001836:	edc7 7a08 	vstr	s15, [r7, #32]
    float cosy_cosp = 1.0f - 2.0f * (q.y * q.y + q.z * q.z);
 800183a:	ed97 7a04 	vldr	s14, [r7, #16]
 800183e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001846:	edd7 6a05 	vldr	s13, [r7, #20]
 800184a:	edd7 7a05 	vldr	s15, [r7, #20]
 800184e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001856:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800185a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800185e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001862:	edc7 7a07 	vstr	s15, [r7, #28]
    ang[2] = atan2(siny_cosp, cosy_cosp) * RAD_TO_DEG;
 8001866:	6a38      	ldr	r0, [r7, #32]
 8001868:	f7fe fe6e 	bl	8000548 <__aeabi_f2d>
 800186c:	4604      	mov	r4, r0
 800186e:	460d      	mov	r5, r1
 8001870:	69f8      	ldr	r0, [r7, #28]
 8001872:	f7fe fe69 	bl	8000548 <__aeabi_f2d>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	ec43 2b11 	vmov	d1, r2, r3
 800187e:	ec45 4b10 	vmov	d0, r4, r5
 8001882:	f00d f813 	bl	800e8ac <atan2>
 8001886:	ec51 0b10 	vmov	r0, r1, d0
 800188a:	a30d      	add	r3, pc, #52	@ (adr r3, 80018c0 <QuaternionToEuler+0x1f8>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe feb2 	bl	80005f8 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 0408 	add.w	r4, r3, #8
 80018a2:	f7ff f981 	bl	8000ba8 <__aeabi_d2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	6023      	str	r3, [r4, #0]


    /*ang[0] = angles.roll;
    ang[1] = angles.pitch;
    ang[2] = angles.yaw;*/
}
 80018aa:	bf00      	nop
 80018ac:	3730      	adds	r7, #48	@ 0x30
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bdb0      	pop	{r4, r5, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40568000 	.word	0x40568000
 80018c0:	20000000 	.word	0x20000000
 80018c4:	404ca5dc 	.word	0x404ca5dc

080018c8 <SetQuaternionFromEuler>:


// Set angles to a specified quantity
void SetQuaternionFromEuler(Quaternion *q, float roll, float pitch, float yaw) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	@ 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80018d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80018d8:	ed87 1a00 	vstr	s2, [r7]
	roll = roll * DEG_TO_RAD;
 80018dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001a6c <SetQuaternionFromEuler+0x1a4>
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	edc7 7a02 	vstr	s15, [r7, #8]
	pitch = pitch * DEG_TO_RAD;
 80018ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001a6c <SetQuaternionFromEuler+0x1a4>
 80018f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f8:	edc7 7a01 	vstr	s15, [r7, #4]
	yaw = yaw* DEG_TO_RAD;
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001a6c <SetQuaternionFromEuler+0x1a4>
 8001904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001908:	edc7 7a00 	vstr	s15, [r7]
    float cr = cosf(roll * 0.5f);
 800190c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001910:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001918:	eeb0 0a67 	vmov.f32	s0, s15
 800191c:	f00d f8a2 	bl	800ea64 <cosf>
 8001920:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float sr = sinf(roll * 0.5f);
 8001924:	edd7 7a02 	vldr	s15, [r7, #8]
 8001928:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800192c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001930:	eeb0 0a67 	vmov.f32	s0, s15
 8001934:	f00d f8e2 	bl	800eafc <sinf>
 8001938:	ed87 0a08 	vstr	s0, [r7, #32]
    float cp = cosf(pitch * 0.5f);
 800193c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001940:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001948:	eeb0 0a67 	vmov.f32	s0, s15
 800194c:	f00d f88a 	bl	800ea64 <cosf>
 8001950:	ed87 0a07 	vstr	s0, [r7, #28]
    float sp = sinf(pitch * 0.5f);
 8001954:	edd7 7a01 	vldr	s15, [r7, #4]
 8001958:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800195c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001960:	eeb0 0a67 	vmov.f32	s0, s15
 8001964:	f00d f8ca 	bl	800eafc <sinf>
 8001968:	ed87 0a06 	vstr	s0, [r7, #24]
    float cy = cosf(yaw * 0.5f);
 800196c:	edd7 7a00 	vldr	s15, [r7]
 8001970:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	f00d f872 	bl	800ea64 <cosf>
 8001980:	ed87 0a05 	vstr	s0, [r7, #20]
    float sy = sinf(yaw * 0.5f);
 8001984:	edd7 7a00 	vldr	s15, [r7]
 8001988:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800198c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001990:	eeb0 0a67 	vmov.f32	s0, s15
 8001994:	f00d f8b2 	bl	800eafc <sinf>
 8001998:	ed87 0a04 	vstr	s0, [r7, #16]

    q->w = cr * cp * cy + sr * sp * sy;
 800199c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80019a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b0:	edd7 6a08 	vldr	s13, [r7, #32]
 80019b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	edc3 7a00 	vstr	s15, [r3]
    q->x = sr * cp * cy - cr * sp * sy;
 80019ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80019d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80019d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019da:	edd7 7a05 	vldr	s15, [r7, #20]
 80019de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80019e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y = cr * sp * cy + sr * cp * sy;
 8001a00:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001a04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a14:	edd7 6a08 	vldr	s13, [r7, #32]
 8001a18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z = cr * cp * sy - sr * sp * cy;
 8001a32:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001a36:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a46:	edd7 6a08 	vldr	s13, [r7, #32]
 8001a4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	@ 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	3c8efa39 	.word	0x3c8efa39

08001a70 <Filter_Init>:
/// ######################################################################################################
/// ##### FILTER SECTION #################################################################################
/// ######################################################################################################

void Filter_Init(LPF_FILTER *filt, float f_LP_gyr, float f_LP_acc, float f_HP_gyr, float f_HP_acc, float f_LP_angles, float dt)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	@ 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	61f8      	str	r0, [r7, #28]
 8001a78:	ed87 0a06 	vstr	s0, [r7, #24]
 8001a7c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001a80:	ed87 1a04 	vstr	s2, [r7, #16]
 8001a84:	edc7 1a03 	vstr	s3, [r7, #12]
 8001a88:	ed87 2a02 	vstr	s4, [r7, #8]
 8001a8c:	edc7 2a01 	vstr	s5, [r7, #4]
	LPF_Init(filt, f_LP_gyr, f_LP_acc, f_LP_angles, dt);
 8001a90:	edd7 1a01 	vldr	s3, [r7, #4]
 8001a94:	ed97 1a02 	vldr	s2, [r7, #8]
 8001a98:	edd7 0a05 	vldr	s1, [r7, #20]
 8001a9c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001aa0:	69f8      	ldr	r0, [r7, #28]
 8001aa2:	f000 f968 	bl	8001d76 <LPF_Init>
	HPF_Init(filt, f_HP_gyr, f_HP_acc, dt);
 8001aa6:	ed97 1a01 	vldr	s2, [r7, #4]
 8001aaa:	edd7 0a03 	vldr	s1, [r7, #12]
 8001aae:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ab2:	69f8      	ldr	r0, [r7, #28]
 8001ab4:	f000 fa65 	bl	8001f82 <HPF_Init>

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001abc:	e038      	b.n	8001b30 <Filter_Init+0xc0>
	{
		filt->filt_gyr_x[i] = 0.0f;					// filt_gyr_x[0] -> past filtered sample   //	filt_gyr_x[1] -> curr filtered sample
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3304      	adds	r3, #4
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_y[i] = 0.0f;					// filt_gyr_x[0] ==> y(n)
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	3306      	adds	r3, #6
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	3304      	adds	r3, #4
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_z[i] = 0.0f;					// filt_gyr_x[1] ==> y(n-1)
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	3304      	adds	r3, #4
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
		filt->filt_acc_x[i] = 0.0f;
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af8:	330a      	adds	r3, #10
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3304      	adds	r3, #4
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
		filt->filt_acc_y[i] = 0.0f;
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0a:	330c      	adds	r3, #12
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3304      	adds	r3, #4
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
		filt->filt_acc_z[i] = 0.0f;
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1c:	330e      	adds	r3, #14
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3304      	adds	r3, #4
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	ddc3      	ble.n	8001abe <Filter_Init+0x4e>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b3a:	e038      	b.n	8001bae <Filter_Init+0x13e>
	{
		filt->not_filt_gyr_x[i] = 0.0f;					// not_filt_gyr_x[0] -> past not filtered sample   //	not_filt_gyr_x[1] -> curr not filtered sample
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b40:	3310      	adds	r3, #16
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3304      	adds	r3, #4
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_y[i] = 0.0f;					// not_filt_gyr_x[0] ==> x(n)
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	3312      	adds	r3, #18
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3304      	adds	r3, #4
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_z[i] = 0.0f;					// not_filt_gyr_x[1] ==> x(n-1)
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b64:	3314      	adds	r3, #20
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_x[i] = 0.0f;
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b76:	3316      	adds	r3, #22
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_y[i] = 0.0f;
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b88:	3318      	adds	r3, #24
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_z[i] = 0.0f;
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9a:	331a      	adds	r3, #26
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001baa:	3301      	adds	r3, #1
 8001bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	ddc3      	ble.n	8001b3c <Filter_Init+0xcc>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb8:	e01d      	b.n	8001bf6 <Filter_Init+0x186>
	{
		filt->filt_ang_x[i] = 0.0f;
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	331c      	adds	r3, #28
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
		filt->filt_ang_y[i] = 0.0f;
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	331e      	adds	r3, #30
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
		filt->filt_ang_z[i] = 0.0f;
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	3320      	adds	r3, #32
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3304      	adds	r3, #4
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	ddde      	ble.n	8001bba <Filter_Init+0x14a>
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3730      	adds	r7, #48	@ 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <LPF_CalculateAlpha>:
/// ##### LOW PASS FILTER for GYRO&ACC SECTION ###########################################################
/// ######################################################################################################

/// Alpha calculation for LPF filter in general --> (GYR&ACC and ANGLES)
float LPF_CalculateAlpha(float f_cut, float dt)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c12:	edc7 0a00 	vstr	s1, [r7]
	float tau = 1.0f / (2.0f * M_PI * f_cut);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe fc96 	bl	8000548 <__aeabi_f2d>
 8001c1c:	a313      	add	r3, pc, #76	@ (adr r3, 8001c6c <LPF_CalculateAlpha+0x64>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fce9 	bl	80005f8 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	490e      	ldr	r1, [pc, #56]	@ (8001c68 <LPF_CalculateAlpha+0x60>)
 8001c30:	f7fe fe0c 	bl	800084c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ffb4 	bl	8000ba8 <__aeabi_d2f>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
	return dt / (tau + dt);
 8001c44:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c48:	edd7 7a00 	vldr	s15, [r7]
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	ed97 7a00 	vldr	s14, [r7]
 8001c54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c58:	eef0 7a66 	vmov.f32	s15, s13
}
 8001c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	3ff00000 	.word	0x3ff00000
 8001c6c:	54442d18 	.word	0x54442d18
 8001c70:	401921fb 	.word	0x401921fb

08001c74 <LPF_Update_Single>:

/// ------ LOW PF ILTER, 1° ORDER ------------------------------------------------------------------------------------
float LPF_Update_Single(LPF_FILTER *filt, float old_data, float data, float alpha)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c80:	edc7 0a01 	vstr	s1, [r7, #4]
 8001c84:	ed87 1a00 	vstr	s2, [r7]
	 return ( (alpha * data) + ((1-alpha) * old_data) );
 8001c88:	ed97 7a00 	vldr	s14, [r7]
 8001c8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c98:	edd7 7a00 	vldr	s15, [r7]
 8001c9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001cac:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LPF_SetAlpha>:

/// ------ LPF set over boundaries coefficients ----------------------------------------------------------------------
void LPF_SetAlpha(LPF_FILTER *filt, float alpha_gyr, float alpha_acc, float coeff_filt_angl)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cc6:	edc7 0a01 	vstr	s1, [r7, #4]
 8001cca:	ed87 1a00 	vstr	s2, [r7]
	// Alpha gyr COEFF
	if(alpha_gyr > 1.0f)
 8001cce:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	dd03      	ble.n	8001ce8 <LPF_SetAlpha+0x2e>
		alpha_gyr = 1.0f;
 8001ce0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	e009      	b.n	8001cfc <LPF_SetAlpha+0x42>
	else if(alpha_gyr < 0.0f)
 8001ce8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	d502      	bpl.n	8001cfc <LPF_SetAlpha+0x42>
		alpha_gyr = 0.0f;
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
	// Alpha_acc COEFF
	if(alpha_acc > 1.0f)
 8001cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	dd03      	ble.n	8001d16 <LPF_SetAlpha+0x5c>
		alpha_acc = 1.0f;
 8001d0e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	e009      	b.n	8001d2a <LPF_SetAlpha+0x70>
	else if(alpha_acc < 0.0f)
 8001d16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	d502      	bpl.n	8001d2a <LPF_SetAlpha+0x70>
		alpha_acc = 0.0f;
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
	// coeff_filt_angl COEFF
	if(coeff_filt_angl > 1.0f)
 8001d2a:	edd7 7a00 	vldr	s15, [r7]
 8001d2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	dd03      	ble.n	8001d44 <LPF_SetAlpha+0x8a>
		coeff_filt_angl = 1.0f;
 8001d3c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	e009      	b.n	8001d58 <LPF_SetAlpha+0x9e>
	else if(coeff_filt_angl < 0)
 8001d44:	edd7 7a00 	vldr	s15, [r7]
 8001d48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d502      	bpl.n	8001d58 <LPF_SetAlpha+0x9e>
		coeff_filt_angl = 0.0f;
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	603b      	str	r3, [r7, #0]

	filt->alpha_gyr = alpha_gyr;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	601a      	str	r2, [r3, #0]
	filt->alpha_acc = alpha_acc;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]
	filt->coeff_filt_ang = coeff_filt_angl;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	611a      	str	r2, [r3, #16]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LPF_Init>:

void LPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float f_cut_angles, float dt)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b08a      	sub	sp, #40	@ 0x28
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6178      	str	r0, [r7, #20]
 8001d7e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d82:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d86:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d8a:	edc7 1a01 	vstr	s3, [r7, #4]
	// aplha for LPF settings
	float alpha_gyr = LPF_CalculateAlpha(f_cut_gyr, dt);
 8001d8e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001d92:	ed97 0a04 	vldr	s0, [r7, #16]
 8001d96:	f7ff ff37 	bl	8001c08 <LPF_CalculateAlpha>
 8001d9a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float alpha_acc = LPF_CalculateAlpha(f_cut_acc, dt);
 8001d9e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001da2:	ed97 0a03 	vldr	s0, [r7, #12]
 8001da6:	f7ff ff2f 	bl	8001c08 <LPF_CalculateAlpha>
 8001daa:	ed87 0a08 	vstr	s0, [r7, #32]
	float coeff_filt_angl = LPF_CalculateAlpha(f_cut_angles, dt);
 8001dae:	edd7 0a01 	vldr	s1, [r7, #4]
 8001db2:	ed97 0a02 	vldr	s0, [r7, #8]
 8001db6:	f7ff ff27 	bl	8001c08 <LPF_CalculateAlpha>
 8001dba:	ed87 0a07 	vstr	s0, [r7, #28]
	LPF_SetAlpha(filt, alpha_gyr, alpha_acc, f_cut_angles);
 8001dbe:	ed97 1a02 	vldr	s2, [r7, #8]
 8001dc2:	edd7 0a08 	vldr	s1, [r7, #32]
 8001dc6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff75 	bl	8001cba <LPF_SetAlpha>

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	@ 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <LPF_GyrAcc_Update_All>:


LPF_FILTER LPF_GyrAcc_Update_All(LPF_FILTER *filt, float *gyr, float *acc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
	/* I compute the LPF filter */
	filt->filt_gyr_x[0] = LPF_Update_Single(filt, filt->filt_gyr_x[1], gyr[0], filt->alpha_gyr);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	edd3 6a00 	vldr	s13, [r3]
 8001df8:	eeb0 1a66 	vmov.f32	s2, s13
 8001dfc:	eef0 0a47 	vmov.f32	s1, s14
 8001e00:	eeb0 0a67 	vmov.f32	s0, s15
 8001e04:	68b8      	ldr	r0, [r7, #8]
 8001e06:	f7ff ff35 	bl	8001c74 <LPF_Update_Single>
 8001e0a:	eef0 7a40 	vmov.f32	s15, s0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	edc3 7a05 	vstr	s15, [r3, #20]
	filt->filt_gyr_y[0] = LPF_Update_Single(filt, filt->filt_gyr_y[1], gyr[1], filt->alpha_gyr);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	edd3 6a00 	vldr	s13, [r3]
 8001e28:	eeb0 1a66 	vmov.f32	s2, s13
 8001e2c:	eef0 0a47 	vmov.f32	s1, s14
 8001e30:	eeb0 0a67 	vmov.f32	s0, s15
 8001e34:	68b8      	ldr	r0, [r7, #8]
 8001e36:	f7ff ff1d 	bl	8001c74 <LPF_Update_Single>
 8001e3a:	eef0 7a40 	vmov.f32	s15, s0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	edc3 7a07 	vstr	s15, [r3, #28]
	filt->filt_gyr_z[0] = LPF_Update_Single(filt, filt->filt_gyr_z[1], gyr[2], filt->alpha_gyr);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	ed93 7a00 	vldr	s14, [r3]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	edd3 6a00 	vldr	s13, [r3]
 8001e58:	eeb0 1a66 	vmov.f32	s2, s13
 8001e5c:	eef0 0a47 	vmov.f32	s1, s14
 8001e60:	eeb0 0a67 	vmov.f32	s0, s15
 8001e64:	68b8      	ldr	r0, [r7, #8]
 8001e66:	f7ff ff05 	bl	8001c74 <LPF_Update_Single>
 8001e6a:	eef0 7a40 	vmov.f32	s15, s0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	filt->filt_acc_x[0] = LPF_Update_Single(filt, filt->filt_acc_x[1], acc[0], filt->alpha_acc);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	ed93 7a00 	vldr	s14, [r3]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e86:	eeb0 1a66 	vmov.f32	s2, s13
 8001e8a:	eef0 0a47 	vmov.f32	s1, s14
 8001e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e92:	68b8      	ldr	r0, [r7, #8]
 8001e94:	f7ff feee 	bl	8001c74 <LPF_Update_Single>
 8001e98:	eef0 7a40 	vmov.f32	s15, s0
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	filt->filt_acc_y[0] = LPF_Update_Single(filt, filt->filt_acc_y[1], acc[1], filt->alpha_acc);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	ed93 7a00 	vldr	s14, [r3]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001eb6:	eeb0 1a66 	vmov.f32	s2, s13
 8001eba:	eef0 0a47 	vmov.f32	s1, s14
 8001ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec2:	68b8      	ldr	r0, [r7, #8]
 8001ec4:	f7ff fed6 	bl	8001c74 <LPF_Update_Single>
 8001ec8:	eef0 7a40 	vmov.f32	s15, s0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	filt->filt_acc_z[0] = LPF_Update_Single(filt, filt->filt_acc_z[1], acc[2], filt->alpha_acc);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	3308      	adds	r3, #8
 8001edc:	ed93 7a00 	vldr	s14, [r3]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ee6:	eeb0 1a66 	vmov.f32	s2, s13
 8001eea:	eef0 0a47 	vmov.f32	s1, s14
 8001eee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f7ff febe 	bl	8001c74 <LPF_Update_Single>
 8001ef8:	eef0 7a40 	vmov.f32	s15, s0
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	/* the current sample will become the next old one */
	filt->filt_gyr_x[1] = filt->filt_gyr_x[0];
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	619a      	str	r2, [r3, #24]
	filt->filt_gyr_y[1] = filt->filt_gyr_y[0];
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	621a      	str	r2, [r3, #32]
	filt->filt_gyr_z[1] = filt->filt_gyr_z[0];
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	629a      	str	r2, [r3, #40]	@ 0x28
	filt->filt_acc_x[1] = filt->filt_acc_x[0];
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	631a      	str	r2, [r3, #48]	@ 0x30
	filt->filt_acc_y[1] = filt->filt_acc_y[0];
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	639a      	str	r2, [r3, #56]	@ 0x38
	filt->filt_acc_z[1] = filt->filt_acc_z[0];
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	641a      	str	r2, [r3, #64]	@ 0x40

	/* I update gyro and acc global variables */
	gyr[0] = filt->filt_gyr_x[0];
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
	gyr[1] = filt->filt_gyr_y[0];
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	69d2      	ldr	r2, [r2, #28]
 8001f42:	601a      	str	r2, [r3, #0]
	gyr[2] = filt->filt_gyr_z[0];
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3308      	adds	r3, #8
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f4c:	601a      	str	r2, [r3, #0]
	acc[0] = filt->filt_acc_x[0];
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	601a      	str	r2, [r3, #0]
	acc[1] = filt->filt_acc_y[0];
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f5e:	601a      	str	r2, [r3, #0]
	acc[2] = filt->filt_acc_z[0];
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	3308      	adds	r3, #8
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f68:	601a      	str	r2, [r3, #0]

	return *filt;
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	238c      	movs	r3, #140	@ 0x8c
 8001f74:	461a      	mov	r2, r3
 8001f76:	f00a fc0a 	bl	800c78e <memcpy>
}
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HPF_Init>:
/// ##### HIGH PASS FILTER SECTION #######################################################################
/// ######################################################################################################


void HPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float dt)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f8e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001f92:	ed87 1a00 	vstr	s2, [r7]
	// beta for HPF settings
	float beta_gyr = HPF_CalculateBeta(f_cut_gyr, dt);
 8001f96:	edd7 0a00 	vldr	s1, [r7]
 8001f9a:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f9e:	f000 f815 	bl	8001fcc <HPF_CalculateBeta>
 8001fa2:	ed87 0a05 	vstr	s0, [r7, #20]
	float beta_acc = HPF_CalculateBeta(f_cut_acc, dt);
 8001fa6:	edd7 0a00 	vldr	s1, [r7]
 8001faa:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fae:	f000 f80d 	bl	8001fcc <HPF_CalculateBeta>
 8001fb2:	ed87 0a04 	vstr	s0, [r7, #16]
	HPF_SetBeta(filt, beta_gyr, beta_acc);
 8001fb6:	edd7 0a04 	vldr	s1, [r7, #16]
 8001fba:	ed97 0a05 	vldr	s0, [r7, #20]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f826 	bl	8002010 <HPF_SetBeta>

}
 8001fc4:	bf00      	nop
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HPF_CalculateBeta>:


float HPF_CalculateBeta(float f_cut, float dt)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fd6:	edc7 0a00 	vstr	s1, [r7]
	return 1.0f - expf(-2.0f * (float)M_PI * f_cut * dt);
 8001fda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fde:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800200c <HPF_CalculateBeta+0x40>
 8001fe2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fe6:	edd7 7a00 	vldr	s15, [r7]
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	f00c fd01 	bl	800e9f8 <expf>
 8001ff6:	eef0 7a40 	vmov.f32	s15, s0
 8001ffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002002:	eeb0 0a67 	vmov.f32	s0, s15
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	c0c90fdb 	.word	0xc0c90fdb

08002010 <HPF_SetBeta>:


void HPF_SetBeta(LPF_FILTER *filt, float beta_gyr, float beta_acc)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	ed87 0a02 	vstr	s0, [r7, #8]
 800201c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(beta_gyr > 1.0f)
 8002020:	edd7 7a02 	vldr	s15, [r7, #8]
 8002024:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	dd03      	ble.n	800203a <HPF_SetBeta+0x2a>
	{
		beta_gyr = 1.0f;
 8002032:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	e009      	b.n	800204e <HPF_SetBeta+0x3e>
	}
	else if(beta_gyr < 0.0f)
 800203a:	edd7 7a02 	vldr	s15, [r7, #8]
 800203e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	d502      	bpl.n	800204e <HPF_SetBeta+0x3e>
	{
		beta_gyr = 0.0f;
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
	}

	if(beta_acc > 1.0f)
 800204e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	dd03      	ble.n	8002068 <HPF_SetBeta+0x58>
	{
		beta_acc = 1.0f;
 8002060:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	e009      	b.n	800207c <HPF_SetBeta+0x6c>
	}
	else if(beta_acc < 0.0f)
 8002068:	edd7 7a01 	vldr	s15, [r7, #4]
 800206c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002074:	d502      	bpl.n	800207c <HPF_SetBeta+0x6c>
	{
		beta_acc = 0.0f;
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
	}

	filt->beta_gyr = beta_gyr;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	609a      	str	r2, [r3, #8]
	filt->beta_acc = beta_acc;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sampleFreq) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b09e      	sub	sp, #120	@ 0x78
 8002098:	af00      	add	r7, sp, #0
 800209a:	ed87 0a07 	vstr	s0, [r7, #28]
 800209e:	edc7 0a06 	vstr	s1, [r7, #24]
 80020a2:	ed87 1a05 	vstr	s2, [r7, #20]
 80020a6:	edc7 1a04 	vstr	s3, [r7, #16]
 80020aa:	ed87 2a03 	vstr	s4, [r7, #12]
 80020ae:	edc7 2a02 	vstr	s5, [r7, #8]
 80020b2:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80020b6:	4bec      	ldr	r3, [pc, #944]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eeb1 7a67 	vneg.f32	s14, s15
 80020c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c8:	4be8      	ldr	r3, [pc, #928]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80020ca:	edd3 6a00 	vldr	s13, [r3]
 80020ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020da:	4be5      	ldr	r3, [pc, #916]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80020f8:	4bde      	ldr	r3, [pc, #888]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80020fa:	ed93 7a00 	vldr	s14, [r3]
 80020fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002106:	4bd9      	ldr	r3, [pc, #868]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002108:	edd3 6a00 	vldr	s13, [r3]
 800210c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002118:	4bd5      	ldr	r3, [pc, #852]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800212e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002132:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002136:	4bcf      	ldr	r3, [pc, #828]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002144:	4bc8      	ldr	r3, [pc, #800]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002146:	edd3 6a00 	vldr	s13, [r3]
 800214a:	edd7 7a05 	vldr	s15, [r7, #20]
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002156:	4bc6      	ldr	r3, [pc, #792]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002158:	edd3 6a00 	vldr	s13, [r3]
 800215c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800216c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002170:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002174:	4bbf      	ldr	r3, [pc, #764]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	edd7 7a05 	vldr	s15, [r7, #20]
 800217e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002182:	4bb9      	ldr	r3, [pc, #740]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	edd7 7a06 	vldr	s15, [r7, #24]
 800218c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002194:	4bb5      	ldr	r3, [pc, #724]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002196:	edd3 6a00 	vldr	s13, [r3]
 800219a:	edd7 7a07 	vldr	s15, [r7, #28]
 800219e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80021aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ae:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80021b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d10e      	bne.n	80021de <MadgwickAHRSupdateIMU+0x14a>
 80021c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021cc:	d107      	bne.n	80021de <MadgwickAHRSupdateIMU+0x14a>
 80021ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80021d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	f000 81e5 	beq.w	80025a8 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80021de:	edd7 7a04 	vldr	s15, [r7, #16]
 80021e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002202:	f000 fa7b 	bl	80026fc <invSqrt>
 8002206:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 800220a:	ed97 7a04 	vldr	s14, [r7, #16]
 800220e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002216:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 800221a:	ed97 7a03 	vldr	s14, [r7, #12]
 800221e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002226:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;
 800222a:	ed97 7a02 	vldr	s14, [r7, #8]
 800222e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800223a:	4b8e      	ldr	r3, [pc, #568]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002244:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 8002248:	4b87      	ldr	r3, [pc, #540]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002252:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 8002256:	4b85      	ldr	r3, [pc, #532]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002260:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 8002264:	4b82      	ldr	r3, [pc, #520]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800226e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 8002272:	4b80      	ldr	r3, [pc, #512]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800227c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002280:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 8002284:	4b78      	ldr	r3, [pc, #480]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 8002296:	4b75      	ldr	r3, [pc, #468]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80022a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 80022a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80022b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 80022ba:	4b6c      	ldr	r3, [pc, #432]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80022c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 80022cc:	4b69      	ldr	r3, [pc, #420]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	4b68      	ldr	r3, [pc, #416]	@ (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022dc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 80022e0:	4b61      	ldr	r3, [pc, #388]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	4b60      	ldr	r3, [pc, #384]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 80022f4:	4b5d      	ldr	r3, [pc, #372]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022f6:	ed93 7a00 	vldr	s14, [r3]
 80022fa:	4b5c      	ldr	r3, [pc, #368]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002304:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 8002308:	4b59      	ldr	r3, [pc, #356]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 800230a:	ed93 7a00 	vldr	s14, [r3]
 800230e:	4b58      	ldr	r3, [pc, #352]	@ (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002318:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800231c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002320:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002328:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800232c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002338:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800233c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002348:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800234c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002358:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800235c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002360:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002368:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800236c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002378:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800237c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002380:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002384:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002392:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8002396:	edd7 7a03 	vldr	s15, [r7, #12]
 800239a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80023a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023aa:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80023ae:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80023b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ba:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80023be:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80023c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ca:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80023ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80023d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80023de:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80023e2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ea:	4b20      	ldr	r3, [pc, #128]	@ (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80023f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002404:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002408:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800240c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002414:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002418:	edd7 7a03 	vldr	s15, [r7, #12]
 800241c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002424:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800242c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002430:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002440:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002450:	edd7 7a02 	vldr	s15, [r7, #8]
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002460:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002464:	e008      	b.n	8002478 <MadgwickAHRSupdateIMU+0x3e4>
 8002466:	bf00      	nop
 8002468:	2000031c 	.word	0x2000031c
 800246c:	20000320 	.word	0x20000320
 8002470:	20000324 	.word	0x20000324
 8002474:	20000004 	.word	0x20000004
 8002478:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800247c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002480:	4b99      	ldr	r3, [pc, #612]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248a:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800248e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002496:	ee37 7a67 	vsub.f32	s14, s14, s15
 800249a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800249e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80024a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024a6:	4b90      	ldr	r3, [pc, #576]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b4:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80024b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c4:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80024c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80024cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80024d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80024d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024dc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80024e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	eeb0 0a67 	vmov.f32	s0, s15
 80024f8:	f000 f900 	bl	80026fc <invSqrt>
 80024fc:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 8002500:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002504:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 8002510:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002514:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 8002520:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002524:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 8002530:	ed97 7a08 	vldr	s14, [r7, #32]
 8002534:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002540:	4b6a      	ldr	r3, [pc, #424]	@ (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800254a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002556:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		qDot2 -= beta * s1;
 800255a:	4b64      	ldr	r3, [pc, #400]	@ (80026ec <MadgwickAHRSupdateIMU+0x658>)
 800255c:	ed93 7a00 	vldr	s14, [r3]
 8002560:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800256c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002570:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		qDot3 -= beta * s2;
 8002574:	4b5d      	ldr	r3, [pc, #372]	@ (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot4 -= beta * s3;
 800258e:	4b57      	ldr	r3, [pc, #348]	@ (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002590:	ed93 7a00 	vldr	s14, [r3]
 8002594:	edd7 7a08 	vldr	s15, [r7, #32]
 8002598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80025a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a4:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80025a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80025b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025bc:	4b4c      	ldr	r3, [pc, #304]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	4b4a      	ldr	r3, [pc, #296]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80025c8:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80025cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	4b44      	ldr	r3, [pc, #272]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ea:	4b42      	ldr	r3, [pc, #264]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80025ec:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80025f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025fc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002604:	4b3c      	ldr	r3, [pc, #240]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260e:	4b3a      	ldr	r3, [pc, #232]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002610:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002614:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002618:	edd7 7a01 	vldr	s15, [r7, #4]
 800261c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002620:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002628:	4b2f      	ldr	r3, [pc, #188]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	4b2d      	ldr	r3, [pc, #180]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002634:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002638:	4b2d      	ldr	r3, [pc, #180]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 800263a:	ed93 7a00 	vldr	s14, [r3]
 800263e:	4b2c      	ldr	r3, [pc, #176]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 800264a:	edd3 6a00 	vldr	s13, [r3]
 800264e:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265c:	4b26      	ldr	r3, [pc, #152]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 800265e:	edd3 6a00 	vldr	s13, [r3]
 8002662:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002672:	edd3 6a00 	vldr	s13, [r3]
 8002676:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	eeb0 0a67 	vmov.f32	s0, s15
 8002688:	f000 f838 	bl	80026fc <invSqrt>
 800268c:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
	q0 *= recipNorm;
 8002690:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 8002692:	ed93 7a00 	vldr	s14, [r3]
 8002696:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80026a0:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80026a4:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80026a6:	ed93 7a00 	vldr	s14, [r3]
 80026aa:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80026ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80026b4:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 80026ba:	ed93 7a00 	vldr	s14, [r3]
 80026be:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 80026c8:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80026ce:	ed93 7a00 	vldr	s14, [r3]
 80026d2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80026d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026da:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80026dc:	edc3 7a00 	vstr	s15, [r3]
}
 80026e0:	bf00      	nop
 80026e2:	3778      	adds	r7, #120	@ 0x78
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000324 	.word	0x20000324
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000004 	.word	0x20000004
 80026f4:	2000031c 	.word	0x2000031c
 80026f8:	20000320 	.word	0x20000320

080026fc <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002706:	edd7 7a01 	vldr	s15, [r7, #4]
 800270a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800270e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002712:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	105a      	asrs	r2, r3, #1
 8002726:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <invSqrt+0x74>)
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002734:	ed97 7a04 	vldr	s14, [r7, #16]
 8002738:	edd7 7a05 	vldr	s15, [r7, #20]
 800273c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002740:	edd7 7a04 	vldr	s15, [r7, #16]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800274c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002750:	edd7 7a04 	vldr	s15, [r7, #16]
 8002754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002758:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	ee07 3a90 	vmov	s15, r3
}
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	5f3759df 	.word	0x5f3759df

08002774 <Toggle>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////// FUNCTIONS //////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Function that toggles the led of the board to show if the device is working
void Toggle(uint32_t waitingTime)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	// Toggle to show if the code is running
	if ((HAL_GetTick() - timerToggle) >= waitingTime)
 800277c:	f001 f81a 	bl	80037b4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <Toggle+0x40>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d808      	bhi.n	80027a0 <Toggle+0x2c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800278e:	2110      	movs	r1, #16
 8002790:	4809      	ldr	r0, [pc, #36]	@ (80027b8 <Toggle+0x44>)
 8002792:	f001 fe98 	bl	80044c6 <HAL_GPIO_TogglePin>
		timerToggle = HAL_GetTick();
 8002796:	f001 f80d 	bl	80037b4 <HAL_GetTick>
 800279a:	4603      	mov	r3, r0
 800279c:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <Toggle+0x40>)
 800279e:	6013      	str	r3, [r2, #0]
	}
	timerUSB = HAL_GetTick();
 80027a0:	f001 f808 	bl	80037b4 <HAL_GetTick>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <Toggle+0x48>)
 80027a8:	6013      	str	r3, [r2, #0]
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000604 	.word	0x20000604
 80027b8:	40020400 	.word	0x40020400
 80027bc:	20000600 	.word	0x20000600

080027c0 <Take_IMU_Measurements>:
  	}
}

/// Function to insert IMU measurements from memory to memory (data is adjusted)
void Take_IMU_Measurements(BMI088 *imu)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	measureTick = HAL_GetTick();		// Timestamp when data is taken from memory to memory (not from BMI088 to memory!)
 80027c8:	f000 fff4 	bl	80037b4 <HAL_GetTick>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <Take_IMU_Measurements+0x7c>)
 80027d0:	6013      	str	r3, [r2, #0]
	/* Here a sign and axis correction is applied.
	 * In the rest of the code I will use gyr and acc that are the shared variables
	 * elaborated by the algorithms while instead, in imu->___[__] there are pure values
	 * taken from the memory of the sensor BMI088
	 */
	gyr[0] = -imu->gyr_rps[1] + imu->gyr_bias[1];			// + 0.0051;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80027de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e2:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <Take_IMU_Measurements+0x80>)
 80027e4:	edc3 7a00 	vstr	s15, [r3]
	gyr[1] = imu->gyr_rps[0] - imu->gyr_bias[0];			// + 0.0025;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80027f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <Take_IMU_Measurements+0x80>)
 80027fa:	edc3 7a01 	vstr	s15, [r3, #4]
	gyr[2] = imu->gyr_rps[2] - imu->gyr_bias[2];			// + 0.0047;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800280a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800280e:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <Take_IMU_Measurements+0x80>)
 8002810:	edc3 7a02 	vstr	s15, [r3, #8]
	acc[0] = -imu->acc_mps2[1];
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800281a:	eef1 7a67 	vneg.f32	s15, s15
 800281e:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <Take_IMU_Measurements+0x84>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
	acc[1] = imu->acc_mps2[0];
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002828:	4a06      	ldr	r2, [pc, #24]	@ (8002844 <Take_IMU_Measurements+0x84>)
 800282a:	6053      	str	r3, [r2, #4]
	acc[2] = imu->acc_mps2[2];
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <Take_IMU_Measurements+0x84>)
 8002832:	6093      	str	r3, [r2, #8]
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	200005d4 	.word	0x200005d4
 8002840:	200005d8 	.word	0x200005d8
 8002844:	200005e4 	.word	0x200005e4

08002848 <HAL_GPIO_EXTI_Callback>:

/// DMA Reading
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d107      	bne.n	8002868 <HAL_GPIO_EXTI_Callback+0x20>
	{
		// we check if the interrupt pin is the accelerometer one
		if (!imu.readingAcc)
 8002858:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <HAL_GPIO_EXTI_Callback+0x3c>)
 800285a:	7c1b      	ldrb	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <HAL_GPIO_EXTI_Callback+0x34>
			BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 8002860:	4808      	ldr	r0, [pc, #32]	@ (8002884 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002862:	f7fe fdfc 	bl	800145e <BMI088_ReadAccelerometerDMA>
		// we check if the interrupt pin is the gyroscope one
		if (!imu.readingGyr)
			BMI088_ReadGyroscopeDMA(&imu);
	}

}
 8002866:	e009      	b.n	800287c <HAL_GPIO_EXTI_Callback+0x34>
	else if(GPIO_Pin == INT_GYR_Pin)
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d106      	bne.n	800287c <HAL_GPIO_EXTI_Callback+0x34>
		if (!imu.readingGyr)
 800286e:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002870:	7c5b      	ldrb	r3, [r3, #17]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <HAL_GPIO_EXTI_Callback+0x34>
			BMI088_ReadGyroscopeDMA(&imu);
 8002876:	4803      	ldr	r0, [pc, #12]	@ (8002884 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002878:	f7fe fe8d 	bl	8001596 <BMI088_ReadGyroscopeDMA>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200004d0 	.word	0x200004d0

08002888 <HAL_SPI_TxRxCpltCallback>:

/// DMA CALLBACK
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10d      	bne.n	80028b6 <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800289c:	7c1b      	ldrb	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 80028a2:	4808      	ldr	r0, [pc, #32]	@ (80028c4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80028a4:	f7fe fe0d 	bl	80014c2 <BMI088_ReadAccelerometerDMA_Complete>

		}

		if (imu.readingGyr)
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80028aa:	7c5b      	ldrb	r3, [r3, #17]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 80028b0:	4804      	ldr	r0, [pc, #16]	@ (80028c4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80028b2:	f7fe fea2 	bl	80015fa <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40013000 	.word	0x40013000
 80028c4:	200004d0 	.word	0x200004d0

080028c8 <HAL_TIM_PeriodElapsedCallback>:

/// Callback of the timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028cc:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 80028d0:	af18      	add	r7, sp, #96	@ 0x60
 80028d2:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80028d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028da:	6018      	str	r0, [r3, #0]
	// Calculate angles with quaternions
    if(htim->Instance == TIM2)
 80028dc:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80028e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ec:	f040 80af 	bne.w	8002a4e <HAL_TIM_PeriodElapsedCallback+0x186>
    {
    	timestamp_TIM2++;	// how many times TIM2 is called (not used yet)
 80028f0:	4bab      	ldr	r3, [pc, #684]	@ (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3301      	adds	r3, #1
 80028f6:	4aaa      	ldr	r2, [pc, #680]	@ (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80028f8:	6013      	str	r3, [r2, #0]
        // Code to execute at constant sample rate
        Take_IMU_Measurements(&imu);
 80028fa:	48aa      	ldr	r0, [pc, #680]	@ (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80028fc:	f7ff ff60 	bl	80027c0 <Take_IMU_Measurements>

        /// Filtering Gyro and Acc measurements
        filt = LPF_GyrAcc_Update_All(&filt, gyr, acc);
 8002900:	4ca9      	ldr	r4, [pc, #676]	@ (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002902:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002906:	4ba9      	ldr	r3, [pc, #676]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002908:	4aa9      	ldr	r2, [pc, #676]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800290a:	49a7      	ldr	r1, [pc, #668]	@ (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800290c:	f7ff fa64 	bl	8001dd8 <LPF_GyrAcc_Update_All>
 8002910:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8002914:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002918:	4620      	mov	r0, r4
 800291a:	4619      	mov	r1, r3
 800291c:	238c      	movs	r3, #140	@ 0x8c
 800291e:	461a      	mov	r2, r3
 8002920:	f009 ff35 	bl	800c78e <memcpy>

		/// Algorithm application to find angles
        MadgwickAHRSupdateIMU(gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], F_TIM2);
 8002924:	4ba2      	ldr	r3, [pc, #648]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	4ba1      	ldr	r3, [pc, #644]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800292c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002930:	4b9f      	ldr	r3, [pc, #636]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002932:	edd3 6a02 	vldr	s13, [r3, #8]
 8002936:	4b9d      	ldr	r3, [pc, #628]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002938:	ed93 6a00 	vldr	s12, [r3]
 800293c:	4b9b      	ldr	r3, [pc, #620]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800293e:	edd3 5a01 	vldr	s11, [r3, #4]
 8002942:	4b9a      	ldr	r3, [pc, #616]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002944:	ed93 5a02 	vldr	s10, [r3, #8]
 8002948:	4b9a      	ldr	r3, [pc, #616]	@ (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800294a:	edd3 4a00 	vldr	s9, [r3]
 800294e:	eeb0 3a64 	vmov.f32	s6, s9
 8002952:	eef0 2a45 	vmov.f32	s5, s10
 8002956:	eeb0 2a65 	vmov.f32	s4, s11
 800295a:	eef0 1a46 	vmov.f32	s3, s12
 800295e:	eeb0 1a66 	vmov.f32	s2, s13
 8002962:	eef0 0a47 	vmov.f32	s1, s14
 8002966:	eeb0 0a67 	vmov.f32	s0, s15
 800296a:	f7ff fb93 	bl	8002094 <MadgwickAHRSupdateIMU>
        q.w = q0; q.x = q1; q.y = q2; q.z = q3;
 800296e:	4b92      	ldr	r3, [pc, #584]	@ (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a92      	ldr	r2, [pc, #584]	@ (8002bbc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b92      	ldr	r3, [pc, #584]	@ (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a90      	ldr	r2, [pc, #576]	@ (8002bbc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800297c:	6053      	str	r3, [r2, #4]
 800297e:	4b91      	ldr	r3, [pc, #580]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a8e      	ldr	r2, [pc, #568]	@ (8002bbc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002984:	6093      	str	r3, [r2, #8]
 8002986:	4b90      	ldr	r3, [pc, #576]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a8c      	ldr	r2, [pc, #560]	@ (8002bbc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800298c:	60d3      	str	r3, [r2, #12]
        QuaternionToEuler(q, angles);
 800298e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bbc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002990:	ed93 6a00 	vldr	s12, [r3]
 8002994:	edd3 6a01 	vldr	s13, [r3, #4]
 8002998:	ed93 7a02 	vldr	s14, [r3, #8]
 800299c:	edd3 7a03 	vldr	s15, [r3, #12]
 80029a0:	488a      	ldr	r0, [pc, #552]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x304>)
 80029a2:	eeb0 0a46 	vmov.f32	s0, s12
 80029a6:	eef0 0a66 	vmov.f32	s1, s13
 80029aa:	eeb0 1a47 	vmov.f32	s2, s14
 80029ae:	eef0 1a67 	vmov.f32	s3, s15
 80029b2:	f7fe fe89 	bl	80016c8 <QuaternionToEuler>

        /* LPF Filtering angles */
        //filt = LPF_Angles_Update_All(&filt, angles);

        /* module of the acceleration vector (not used right now) */
        abs_acc = sqrt(pow(acc[0],2)+pow(acc[1],2) + pow(acc[2],2));
 80029b6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fdc4 	bl	8000548 <__aeabi_f2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8002b98 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 80029c8:	ec43 2b10 	vmov	d0, r2, r3
 80029cc:	f00b ff70 	bl	800e8b0 <pow>
 80029d0:	ec55 4b10 	vmov	r4, r5, d0
 80029d4:	4b75      	ldr	r3, [pc, #468]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fdb5 	bl	8000548 <__aeabi_f2d>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 8002b98 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 80029e6:	ec43 2b10 	vmov	d0, r2, r3
 80029ea:	f00b ff61 	bl	800e8b0 <pow>
 80029ee:	ec53 2b10 	vmov	r2, r3, d0
 80029f2:	4620      	mov	r0, r4
 80029f4:	4629      	mov	r1, r5
 80029f6:	f7fd fc49 	bl	800028c <__adddf3>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4614      	mov	r4, r2
 8002a00:	461d      	mov	r5, r3
 8002a02:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fd9e 	bl	8000548 <__aeabi_f2d>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	ed9f 1b61 	vldr	d1, [pc, #388]	@ 8002b98 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 8002a14:	ec43 2b10 	vmov	d0, r2, r3
 8002a18:	f00b ff4a 	bl	800e8b0 <pow>
 8002a1c:	ec53 2b10 	vmov	r2, r3, d0
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
 8002a24:	f7fd fc32 	bl	800028c <__adddf3>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	ec43 2b17 	vmov	d7, r2, r3
 8002a30:	eeb0 0a47 	vmov.f32	s0, s14
 8002a34:	eef0 0a67 	vmov.f32	s1, s15
 8002a38:	f00b ffaa 	bl	800e990 <sqrt>
 8002a3c:	ec53 2b10 	vmov	r2, r3, d0
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	f7fe f8b0 	bl	8000ba8 <__aeabi_d2f>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4a61      	ldr	r2, [pc, #388]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002a4c:	6013      	str	r3, [r2, #0]

    }

    // Send data with CDC_Transfer_FS
    if(htim->Instance == TIM3)
 8002a4e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8002a52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	f040 8095 	bne.w	8002b8c <HAL_TIM_PeriodElapsedCallback+0x2c4>
	{
    	timestamp_TIM3++;	// how many times TIM3 is called (not used yet)
 8002a62:	4b5d      	ldr	r3, [pc, #372]	@ (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002a6a:	6013      	str	r3, [r2, #0]

    	// Send every data using just one string and one TX
		char txBuff[256];
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8002bdc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002a7a:	4b54      	ldr	r3, [pc, #336]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd62 	bl	8000548 <__aeabi_f2d>
 8002a84:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002a88:	4b50      	ldr	r3, [pc, #320]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fd5b 	bl	8000548 <__aeabi_f2d>
 8002a92:	e9c7 0108 	strd	r0, r1, [r7, #32]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002a96:	4b4d      	ldr	r3, [pc, #308]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002a98:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd54 	bl	8000548 <__aeabi_f2d>
 8002aa0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8002bdc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002aac:	fb02 f103 	mul.w	r1, r2, r3
 8002ab0:	6339      	str	r1, [r7, #48]	@ 0x30
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd46 	bl	8000548 <__aeabi_f2d>
 8002abc:	e9c7 0104 	strd	r0, r1, [r7, #16]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd3f 	bl	8000548 <__aeabi_f2d>
 8002aca:	e9c7 0102 	strd	r0, r1, [r7, #8]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002ace:	4b38      	ldr	r3, [pc, #224]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fd38 	bl	8000548 <__aeabi_f2d>
 8002ad8:	e9c7 0100 	strd	r0, r1, [r7]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002adc:	4b33      	ldr	r3, [pc, #204]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fd31 	bl	8000548 <__aeabi_f2d>
 8002ae6:	4682      	mov	sl, r0
 8002ae8:	468b      	mov	fp, r1
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002aea:	4b30      	ldr	r3, [pc, #192]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fd2a 	bl	8000548 <__aeabi_f2d>
 8002af4:	4680      	mov	r8, r0
 8002af6:	4689      	mov	r9, r1
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr[0], gyr[1], gyr[2], acc[0], acc[1], acc[2], measureTick*1000, abs_acc); // I send the abs_acc instead the temperature just to plot it in the API graph
 8002af8:	4b2c      	ldr	r3, [pc, #176]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002afa:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd23 	bl	8000548 <__aeabi_f2d>
 8002b02:	4604      	mov	r4, r0
 8002b04:	460d      	mov	r5, r1
 8002b06:	4b35      	ldr	r3, [pc, #212]	@ (8002bdc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b0e:	fb03 f602 	mul.w	r6, r3, r2
 8002b12:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fd16 	bl	8000548 <__aeabi_f2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8002b24:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8002b28:	9614      	str	r6, [sp, #80]	@ 0x50
 8002b2a:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8002b2e:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8002b32:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 8002b36:	ed97 7b00 	vldr	d7, [r7]
 8002b3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002b3e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b42:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002b46:	ed97 7b04 	vldr	d7, [r7, #16]
 8002b4a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002b4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b50:	9106      	str	r1, [sp, #24]
 8002b52:	ed97 7b06 	vldr	d7, [r7, #24]
 8002b56:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002b5a:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002b62:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002b66:	ed8d 7b00 	vstr	d7, [sp]
 8002b6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b6c:	491c      	ldr	r1, [pc, #112]	@ (8002be0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002b6e:	f009 fd2b 	bl	800c5c8 <siprintf>
		CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff));
 8002b72:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fb7a 	bl	8000270 <strlen>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f008 fba8 	bl	800b2dc <CDC_Transmit_FS>
	}
}
 8002b8c:	bf00      	nop
 8002b8e:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 8002b92:	46bd      	mov	sp, r7
 8002b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b98:	00000000 	.word	0x00000000
 8002b9c:	40000000 	.word	0x40000000
 8002ba0:	200005d0 	.word	0x200005d0
 8002ba4:	200004d0 	.word	0x200004d0
 8002ba8:	20000538 	.word	0x20000538
 8002bac:	200005e4 	.word	0x200005e4
 8002bb0:	200005d8 	.word	0x200005d8
 8002bb4:	200005c8 	.word	0x200005c8
 8002bb8:	20000004 	.word	0x20000004
 8002bbc:	20000008 	.word	0x20000008
 8002bc0:	2000031c 	.word	0x2000031c
 8002bc4:	20000320 	.word	0x20000320
 8002bc8:	20000324 	.word	0x20000324
 8002bcc:	200005f0 	.word	0x200005f0
 8002bd0:	200005fc 	.word	0x200005fc
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	200005cc 	.word	0x200005cc
 8002bdc:	200005d4 	.word	0x200005d4
 8002be0:	08010e2c 	.word	0x08010e2c

08002be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bea:	f000 fd7d 	bl	80036e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bee:	f000 f88f 	bl	8002d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bf2:	f000 fa17 	bl	8003024 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bf6:	f000 f9ed 	bl	8002fd4 <MX_DMA_Init>
  MX_SPI1_Init();
 8002bfa:	f000 f8f3 	bl	8002de4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002bfe:	f000 f927 	bl	8002e50 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8002c02:	f008 faad 	bl	800b160 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002c06:	f000 f997 	bl	8002f38 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /*.... Priorities management .................................*/
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002c0a:	2005      	movs	r0, #5
 8002c0c:	f000 fed2 	bl	80039b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	2100      	movs	r1, #0
 8002c14:	2038      	movs	r0, #56	@ 0x38
 8002c16:	f000 fed8 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 1);
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	203b      	movs	r0, #59	@ 0x3b
 8002c20:	f000 fed3 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2101      	movs	r1, #1
 8002c28:	2008      	movs	r0, #8
 8002c2a:	f000 fece 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 8002c2e:	2201      	movs	r2, #1
 8002c30:	2101      	movs	r1, #1
 8002c32:	2009      	movs	r0, #9
 8002c34:	f000 fec9 	bl	80039ca <HAL_NVIC_SetPriority>
  /*............................................................*/

  HAL_Delay(1000);
 8002c38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c3c:	f000 fdc6 	bl	80037cc <HAL_Delay>

  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 8002c40:	2310      	movs	r3, #16
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <main+0xec>)
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2310      	movs	r3, #16
 8002c4a:	4a22      	ldr	r2, [pc, #136]	@ (8002cd4 <main+0xf0>)
 8002c4c:	4922      	ldr	r1, [pc, #136]	@ (8002cd8 <main+0xf4>)
 8002c4e:	4823      	ldr	r0, [pc, #140]	@ (8002cdc <main+0xf8>)
 8002c50:	f7fe f972 	bl	8000f38 <BMI088_Init>
  SetQuaternionFromEuler(&q, 0, 0, 0);				// Angles on the starting position: roll=0, pitch=0, yaw=0
 8002c54:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8002ce0 <main+0xfc>
 8002c58:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8002ce0 <main+0xfc>
 8002c5c:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002ce0 <main+0xfc>
 8002c60:	4820      	ldr	r0, [pc, #128]	@ (8002ce4 <main+0x100>)
 8002c62:	f7fe fe31 	bl	80018c8 <SetQuaternionFromEuler>
  Filter_Init(&filt, f_LP_gyr, f_LP_acc, f_HP_gyr, f_HP_acc, f_LP_angles, T_TIM2);
 8002c66:	4b20      	ldr	r3, [pc, #128]	@ (8002ce8 <main+0x104>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cec <main+0x108>)
 8002c6e:	ed93 7a00 	vldr	s14, [r3]
 8002c72:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf0 <main+0x10c>)
 8002c74:	edd3 6a00 	vldr	s13, [r3]
 8002c78:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <main+0x110>)
 8002c7a:	ed93 6a00 	vldr	s12, [r3]
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf8 <main+0x114>)
 8002c80:	edd3 5a00 	vldr	s11, [r3]
 8002c84:	4b1d      	ldr	r3, [pc, #116]	@ (8002cfc <main+0x118>)
 8002c86:	ed93 5a00 	vldr	s10, [r3]
 8002c8a:	eef0 2a45 	vmov.f32	s5, s10
 8002c8e:	eeb0 2a65 	vmov.f32	s4, s11
 8002c92:	eef0 1a46 	vmov.f32	s3, s12
 8002c96:	eeb0 1a66 	vmov.f32	s2, s13
 8002c9a:	eef0 0a47 	vmov.f32	s1, s14
 8002c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca2:	4817      	ldr	r0, [pc, #92]	@ (8002d00 <main+0x11c>)
 8002ca4:	f7fe fee4 	bl	8001a70 <Filter_Init>

  HAL_Delay(1000);
 8002ca8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cac:	f000 fd8e 	bl	80037cc <HAL_Delay>

  /* ----- START TIMERS ------------------------------------------------------- */
  HAL_TIM_Base_Start_IT(&htim2);   // Start timer: calculation of the algorithm
 8002cb0:	4814      	ldr	r0, [pc, #80]	@ (8002d04 <main+0x120>)
 8002cb2:	f004 fb15 	bl	80072e0 <HAL_TIM_Base_Start_IT>
  Init_BMI088_Bias(&imu, 1000000);
 8002cb6:	4914      	ldr	r1, [pc, #80]	@ (8002d08 <main+0x124>)
 8002cb8:	4808      	ldr	r0, [pc, #32]	@ (8002cdc <main+0xf8>)
 8002cba:	f7fe fa55 	bl	8001168 <Init_BMI088_Bias>
  HAL_TIM_Base_Start_IT(&htim3);   // Start timer: send data with CDC_Transmit_FS serial interface
 8002cbe:	4813      	ldr	r0, [pc, #76]	@ (8002d0c <main+0x128>)
 8002cc0:	f004 fb0e 	bl	80072e0 <HAL_TIM_Base_Start_IT>


  while (1)
  {
	  //Debug_SPI_DMA();
	  Toggle(SAMPLE_TIME_MS_TOGGLE);
 8002cc4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cc8:	f7ff fd54 	bl	8002774 <Toggle>
 8002ccc:	e7fa      	b.n	8002cc4 <main+0xe0>
 8002cce:	bf00      	nop
 8002cd0:	40020800 	.word	0x40020800
 8002cd4:	40020000 	.word	0x40020000
 8002cd8:	20000328 	.word	0x20000328
 8002cdc:	200004d0 	.word	0x200004d0
 8002ce0:	00000000 	.word	0x00000000
 8002ce4:	20000008 	.word	0x20000008
 8002ce8:	20000018 	.word	0x20000018
 8002cec:	2000001c 	.word	0x2000001c
 8002cf0:	20000024 	.word	0x20000024
 8002cf4:	20000028 	.word	0x20000028
 8002cf8:	20000020 	.word	0x20000020
 8002cfc:	200005c4 	.word	0x200005c4
 8002d00:	20000538 	.word	0x20000538
 8002d04:	20000440 	.word	0x20000440
 8002d08:	000f4240 	.word	0x000f4240
 8002d0c:	20000488 	.word	0x20000488

08002d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b094      	sub	sp, #80	@ 0x50
 8002d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d16:	f107 0320 	add.w	r3, r7, #32
 8002d1a:	2230      	movs	r2, #48	@ 0x30
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f009 fcb5 	bl	800c68e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	4b28      	ldr	r3, [pc, #160]	@ (8002ddc <SystemClock_Config+0xcc>)
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	4a27      	ldr	r2, [pc, #156]	@ (8002ddc <SystemClock_Config+0xcc>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d44:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <SystemClock_Config+0xcc>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d50:	2300      	movs	r3, #0
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	4b22      	ldr	r3, [pc, #136]	@ (8002de0 <SystemClock_Config+0xd0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a21      	ldr	r2, [pc, #132]	@ (8002de0 <SystemClock_Config+0xd0>)
 8002d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b1f      	ldr	r3, [pc, #124]	@ (8002de0 <SystemClock_Config+0xd0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d76:	2302      	movs	r3, #2
 8002d78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d80:	2308      	movs	r3, #8
 8002d82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002d84:	23a8      	movs	r3, #168	@ 0xa8
 8002d86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d8c:	2307      	movs	r3, #7
 8002d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d90:	f107 0320 	add.w	r3, r7, #32
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 fe1b 	bl	80059d0 <HAL_RCC_OscConfig>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002da0:	f000 f9e6 	bl	8003170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002da4:	230f      	movs	r3, #15
 8002da6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002da8:	2302      	movs	r3, #2
 8002daa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002db0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002db4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	2105      	movs	r1, #5
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 f87c 	bl	8005ec0 <HAL_RCC_ClockConfig>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002dce:	f000 f9cf 	bl	8003170 <Error_Handler>
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	3750      	adds	r7, #80	@ 0x50
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40007000 	.word	0x40007000

08002de4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002de8:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002dea:	4a18      	ldr	r2, [pc, #96]	@ (8002e4c <MX_SPI1_Init+0x68>)
 8002dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002df0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002df6:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e02:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e16:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e18:	2210      	movs	r2, #16
 8002e1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e30:	220a      	movs	r2, #10
 8002e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e36:	f003 fa39 	bl	80062ac <HAL_SPI_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e40:	f000 f996 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000328 	.word	0x20000328
 8002e4c:	40013000 	.word	0x40013000

08002e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e64:	463b      	mov	r3, r7
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002e6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8002e74:	4b2c      	ldr	r3, [pc, #176]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002e76:	2229      	movs	r2, #41	@ 0x29
 8002e78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002e80:	4b29      	ldr	r3, [pc, #164]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002e82:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002e86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e88:	4b27      	ldr	r3, [pc, #156]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8e:	4b26      	ldr	r3, [pc, #152]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e94:	4824      	ldr	r0, [pc, #144]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002e96:	f004 f9d3 	bl	8007240 <HAL_TIM_Base_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ea0:	f000 f966 	bl	8003170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ea8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	4619      	mov	r1, r3
 8002eb0:	481d      	ldr	r0, [pc, #116]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002eb2:	f004 fb75 	bl	80075a0 <HAL_TIM_ConfigClockSource>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ebc:	f000 f958 	bl	8003170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ec8:	463b      	mov	r3, r7
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4816      	ldr	r0, [pc, #88]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002ece:	f004 fd9d 	bl	8007a0c <HAL_TIMEx_MasterConfigSynchronization>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ed8:	f000 f94a 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* These following 2 lines calculate the Frequency and the Period of the Timer TIM2*/
	T_TIM2 = 1.0f / (f_CK / (float)((htim2.Init.Period +1 ) * htim2.Init.Prescaler + 1));
 8002edc:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002f2c <MX_TIM2_Init+0xdc>
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	4a10      	ldr	r2, [pc, #64]	@ (8002f28 <MX_TIM2_Init+0xd8>)
 8002ee8:	6852      	ldr	r2, [r2, #4]
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002efc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f04:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <MX_TIM2_Init+0xe0>)
 8002f06:	edc3 7a00 	vstr	s15, [r3]
	F_TIM2 = 1 / T_TIM2;
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <MX_TIM2_Init+0xe0>)
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f18:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <MX_TIM2_Init+0xe4>)
 8002f1a:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END TIM2_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000440 	.word	0x20000440
 8002f2c:	4ca037a0 	.word	0x4ca037a0
 8002f30:	200005c4 	.word	0x200005c4
 8002f34:	200005c8 	.word	0x200005c8

08002f38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3e:	f107 0308 	add.w	r3, r7, #8
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f54:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <MX_TIM3_Init+0x94>)
 8002f56:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd0 <MX_TIM3_Init+0x98>)
 8002f58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fcc <MX_TIM3_Init+0x94>)
 8002f5c:	2229      	movs	r2, #41	@ 0x29
 8002f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <MX_TIM3_Init+0x94>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002f66:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <MX_TIM3_Init+0x94>)
 8002f68:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002f6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6e:	4b17      	ldr	r3, [pc, #92]	@ (8002fcc <MX_TIM3_Init+0x94>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f74:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <MX_TIM3_Init+0x94>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f7a:	4814      	ldr	r0, [pc, #80]	@ (8002fcc <MX_TIM3_Init+0x94>)
 8002f7c:	f004 f960 	bl	8007240 <HAL_TIM_Base_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002f86:	f000 f8f3 	bl	8003170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f90:	f107 0308 	add.w	r3, r7, #8
 8002f94:	4619      	mov	r1, r3
 8002f96:	480d      	ldr	r0, [pc, #52]	@ (8002fcc <MX_TIM3_Init+0x94>)
 8002f98:	f004 fb02 	bl	80075a0 <HAL_TIM_ConfigClockSource>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002fa2:	f000 f8e5 	bl	8003170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fae:	463b      	mov	r3, r7
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4806      	ldr	r0, [pc, #24]	@ (8002fcc <MX_TIM3_Init+0x94>)
 8002fb4:	f004 fd2a 	bl	8007a0c <HAL_TIMEx_MasterConfigSynchronization>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002fbe:	f000 f8d7 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000488 	.word	0x20000488
 8002fd0:	40000400 	.word	0x40000400

08002fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <MX_DMA_Init+0x4c>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8003020 <MX_DMA_Init+0x4c>)
 8002fe4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fea:	4b0d      	ldr	r3, [pc, #52]	@ (8003020 <MX_DMA_Init+0x4c>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2038      	movs	r0, #56	@ 0x38
 8002ffc:	f000 fce5 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003000:	2038      	movs	r0, #56	@ 0x38
 8003002:	f000 fcfe 	bl	8003a02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 1);
 8003006:	2201      	movs	r2, #1
 8003008:	2100      	movs	r1, #0
 800300a:	203b      	movs	r0, #59	@ 0x3b
 800300c:	f000 fcdd 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003010:	203b      	movs	r0, #59	@ 0x3b
 8003012:	f000 fcf6 	bl	8003a02 <HAL_NVIC_EnableIRQ>

}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800

08003024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	@ 0x28
 8003028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	4b48      	ldr	r3, [pc, #288]	@ (8003160 <MX_GPIO_Init+0x13c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	4a47      	ldr	r2, [pc, #284]	@ (8003160 <MX_GPIO_Init+0x13c>)
 8003044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003048:	6313      	str	r3, [r2, #48]	@ 0x30
 800304a:	4b45      	ldr	r3, [pc, #276]	@ (8003160 <MX_GPIO_Init+0x13c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b41      	ldr	r3, [pc, #260]	@ (8003160 <MX_GPIO_Init+0x13c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	4a40      	ldr	r2, [pc, #256]	@ (8003160 <MX_GPIO_Init+0x13c>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	6313      	str	r3, [r2, #48]	@ 0x30
 8003066:	4b3e      	ldr	r3, [pc, #248]	@ (8003160 <MX_GPIO_Init+0x13c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	4b3a      	ldr	r3, [pc, #232]	@ (8003160 <MX_GPIO_Init+0x13c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	4a39      	ldr	r2, [pc, #228]	@ (8003160 <MX_GPIO_Init+0x13c>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6313      	str	r3, [r2, #48]	@ 0x30
 8003082:	4b37      	ldr	r3, [pc, #220]	@ (8003160 <MX_GPIO_Init+0x13c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	4b33      	ldr	r3, [pc, #204]	@ (8003160 <MX_GPIO_Init+0x13c>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	4a32      	ldr	r2, [pc, #200]	@ (8003160 <MX_GPIO_Init+0x13c>)
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	6313      	str	r3, [r2, #48]	@ 0x30
 800309e:	4b30      	ldr	r3, [pc, #192]	@ (8003160 <MX_GPIO_Init+0x13c>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 80030aa:	2200      	movs	r2, #0
 80030ac:	2110      	movs	r1, #16
 80030ae:	482d      	ldr	r0, [pc, #180]	@ (8003164 <MX_GPIO_Init+0x140>)
 80030b0:	f001 f9f0 	bl	8004494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 80030b4:	2200      	movs	r2, #0
 80030b6:	2110      	movs	r1, #16
 80030b8:	482b      	ldr	r0, [pc, #172]	@ (8003168 <MX_GPIO_Init+0x144>)
 80030ba:	f001 f9eb 	bl	8004494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80030be:	2200      	movs	r2, #0
 80030c0:	2110      	movs	r1, #16
 80030c2:	482a      	ldr	r0, [pc, #168]	@ (800316c <MX_GPIO_Init+0x148>)
 80030c4:	f001 f9e6 	bl	8004494 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 80030c8:	230c      	movs	r3, #12
 80030ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d6:	f107 0314 	add.w	r3, r7, #20
 80030da:	4619      	mov	r1, r3
 80030dc:	4822      	ldr	r0, [pc, #136]	@ (8003168 <MX_GPIO_Init+0x144>)
 80030de:	f001 f83d 	bl	800415c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 80030e2:	2310      	movs	r3, #16
 80030e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	4619      	mov	r1, r3
 80030f8:	481a      	ldr	r0, [pc, #104]	@ (8003164 <MX_GPIO_Init+0x140>)
 80030fa:	f001 f82f 	bl	800415c <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 80030fe:	2310      	movs	r3, #16
 8003100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003102:	2301      	movs	r3, #1
 8003104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	4814      	ldr	r0, [pc, #80]	@ (8003168 <MX_GPIO_Init+0x144>)
 8003116:	f001 f821 	bl	800415c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800311a:	2310      	movs	r3, #16
 800311c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800311e:	2301      	movs	r3, #1
 8003120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	4619      	mov	r1, r3
 8003130:	480e      	ldr	r0, [pc, #56]	@ (800316c <MX_GPIO_Init+0x148>)
 8003132:	f001 f813 	bl	800415c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	2101      	movs	r1, #1
 800313a:	2008      	movs	r0, #8
 800313c:	f000 fc45 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003140:	2008      	movs	r0, #8
 8003142:	f000 fc5e 	bl	8003a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 8003146:	2201      	movs	r2, #1
 8003148:	2101      	movs	r1, #1
 800314a:	2009      	movs	r0, #9
 800314c:	f000 fc3d 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003150:	2009      	movs	r0, #9
 8003152:	f000 fc56 	bl	8003a02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003156:	bf00      	nop
 8003158:	3728      	adds	r7, #40	@ 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	40020000 	.word	0x40020000
 8003168:	40020800 	.word	0x40020800
 800316c:	40020400 	.word	0x40020400

08003170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b0a0      	sub	sp, #128	@ 0x80
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	char txBuff[128];
	sprintf(txBuff, "SPI Error!");
 8003176:	463b      	mov	r3, r7
 8003178:	490b      	ldr	r1, [pc, #44]	@ (80031a8 <Error_Handler+0x38>)
 800317a:	4618      	mov	r0, r3
 800317c:	f009 fa24 	bl	800c5c8 <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 8003180:	bf00      	nop
 8003182:	463b      	mov	r3, r7
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f873 	bl	8000270 <strlen>
 800318a:	4603      	mov	r3, r0
 800318c:	b29a      	uxth	r2, r3
 800318e:	463b      	mov	r3, r7
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f008 f8a2 	bl	800b2dc <CDC_Transmit_FS>
 8003198:	4603      	mov	r3, r0
 800319a:	2b02      	cmp	r3, #2
 800319c:	d0f1      	beq.n	8003182 <Error_Handler+0x12>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800319e:	b672      	cpsid	i
}
 80031a0:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031a2:	bf00      	nop
 80031a4:	e7fd      	b.n	80031a2 <Error_Handler+0x32>
 80031a6:	bf00      	nop
 80031a8:	08010e74 	.word	0x08010e74

080031ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	4b10      	ldr	r3, [pc, #64]	@ (80031f8 <HAL_MspInit+0x4c>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	4a0f      	ldr	r2, [pc, #60]	@ (80031f8 <HAL_MspInit+0x4c>)
 80031bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031c2:	4b0d      	ldr	r3, [pc, #52]	@ (80031f8 <HAL_MspInit+0x4c>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <HAL_MspInit+0x4c>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	4a08      	ldr	r2, [pc, #32]	@ (80031f8 <HAL_MspInit+0x4c>)
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80031de:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_MspInit+0x4c>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800

080031fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	@ 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a4c      	ldr	r2, [pc, #304]	@ (800334c <HAL_SPI_MspInit+0x150>)
 800321a:	4293      	cmp	r3, r2
 800321c:	f040 8092 	bne.w	8003344 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	4b4a      	ldr	r3, [pc, #296]	@ (8003350 <HAL_SPI_MspInit+0x154>)
 8003226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003228:	4a49      	ldr	r2, [pc, #292]	@ (8003350 <HAL_SPI_MspInit+0x154>)
 800322a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800322e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003230:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_SPI_MspInit+0x154>)
 8003232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	4b43      	ldr	r3, [pc, #268]	@ (8003350 <HAL_SPI_MspInit+0x154>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	4a42      	ldr	r2, [pc, #264]	@ (8003350 <HAL_SPI_MspInit+0x154>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6313      	str	r3, [r2, #48]	@ 0x30
 800324c:	4b40      	ldr	r3, [pc, #256]	@ (8003350 <HAL_SPI_MspInit+0x154>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003258:	23e0      	movs	r3, #224	@ 0xe0
 800325a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003268:	2305      	movs	r3, #5
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	4619      	mov	r1, r3
 8003272:	4838      	ldr	r0, [pc, #224]	@ (8003354 <HAL_SPI_MspInit+0x158>)
 8003274:	f000 ff72 	bl	800415c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003278:	4b37      	ldr	r3, [pc, #220]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 800327a:	4a38      	ldr	r2, [pc, #224]	@ (800335c <HAL_SPI_MspInit+0x160>)
 800327c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800327e:	4b36      	ldr	r3, [pc, #216]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 8003280:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003284:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003286:	4b34      	ldr	r3, [pc, #208]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800328c:	4b32      	ldr	r3, [pc, #200]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003292:	4b31      	ldr	r3, [pc, #196]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 8003294:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003298:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800329a:	4b2f      	ldr	r3, [pc, #188]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80032a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 80032ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80032b2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032b4:	4b28      	ldr	r3, [pc, #160]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80032ba:	4827      	ldr	r0, [pc, #156]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 80032bc:	f000 fbbc 	bl	8003a38 <HAL_DMA_Init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80032c6:	f7ff ff53 	bl	8003170 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a22      	ldr	r2, [pc, #136]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 80032ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032d0:	4a21      	ldr	r2, [pc, #132]	@ (8003358 <HAL_SPI_MspInit+0x15c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80032d6:	4b22      	ldr	r3, [pc, #136]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 80032d8:	4a22      	ldr	r2, [pc, #136]	@ (8003364 <HAL_SPI_MspInit+0x168>)
 80032da:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80032dc:	4b20      	ldr	r3, [pc, #128]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 80032de:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80032e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 80032e6:	2240      	movs	r2, #64	@ 0x40
 80032e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 80032f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f8:	4b19      	ldr	r3, [pc, #100]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032fe:	4b18      	ldr	r3, [pc, #96]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003304:	4b16      	ldr	r3, [pc, #88]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800330a:	4b15      	ldr	r3, [pc, #84]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 800330c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003310:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003312:	4b13      	ldr	r3, [pc, #76]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 8003314:	2200      	movs	r2, #0
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003318:	4811      	ldr	r0, [pc, #68]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 800331a:	f000 fb8d 	bl	8003a38 <HAL_DMA_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8003324:	f7ff ff24 	bl	8003170 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a0d      	ldr	r2, [pc, #52]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 800332c:	649a      	str	r2, [r3, #72]	@ 0x48
 800332e:	4a0c      	ldr	r2, [pc, #48]	@ (8003360 <HAL_SPI_MspInit+0x164>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003334:	2200      	movs	r2, #0
 8003336:	2100      	movs	r1, #0
 8003338:	2023      	movs	r0, #35	@ 0x23
 800333a:	f000 fb46 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800333e:	2023      	movs	r0, #35	@ 0x23
 8003340:	f000 fb5f 	bl	8003a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003344:	bf00      	nop
 8003346:	3728      	adds	r7, #40	@ 0x28
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40013000 	.word	0x40013000
 8003350:	40023800 	.word	0x40023800
 8003354:	40020000 	.word	0x40020000
 8003358:	20000380 	.word	0x20000380
 800335c:	40026410 	.word	0x40026410
 8003360:	200003e0 	.word	0x200003e0
 8003364:	40026458 	.word	0x40026458

08003368 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003378:	d116      	bne.n	80033a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <HAL_TIM_Base_MspInit+0x80>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	4a19      	ldr	r2, [pc, #100]	@ (80033e8 <HAL_TIM_Base_MspInit+0x80>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6413      	str	r3, [r2, #64]	@ 0x40
 800338a:	4b17      	ldr	r3, [pc, #92]	@ (80033e8 <HAL_TIM_Base_MspInit+0x80>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003396:	2200      	movs	r2, #0
 8003398:	2100      	movs	r1, #0
 800339a:	201c      	movs	r0, #28
 800339c:	f000 fb15 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033a0:	201c      	movs	r0, #28
 80033a2:	f000 fb2e 	bl	8003a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80033a6:	e01a      	b.n	80033de <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0f      	ldr	r2, [pc, #60]	@ (80033ec <HAL_TIM_Base_MspInit+0x84>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d115      	bne.n	80033de <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <HAL_TIM_Base_MspInit+0x80>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a0b      	ldr	r2, [pc, #44]	@ (80033e8 <HAL_TIM_Base_MspInit+0x80>)
 80033bc:	f043 0302 	orr.w	r3, r3, #2
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <HAL_TIM_Base_MspInit+0x80>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2100      	movs	r1, #0
 80033d2:	201d      	movs	r0, #29
 80033d4:	f000 faf9 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033d8:	201d      	movs	r0, #29
 80033da:	f000 fb12 	bl	8003a02 <HAL_NVIC_EnableIRQ>
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40000400 	.word	0x40000400

080033f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033f4:	bf00      	nop
 80033f6:	e7fd      	b.n	80033f4 <NMI_Handler+0x4>

080033f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <HardFault_Handler+0x4>

08003400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <MemManage_Handler+0x4>

08003408 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <BusFault_Handler+0x4>

08003410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <UsageFault_Handler+0x4>

08003418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003426:	b480      	push	{r7}
 8003428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003446:	f000 f9a1 	bl	800378c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}

0800344e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8003452:	2004      	movs	r0, #4
 8003454:	f001 f852 	bl	80044fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}

0800345c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 8003460:	2008      	movs	r0, #8
 8003462:	f001 f84b 	bl	80044fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003470:	4802      	ldr	r0, [pc, #8]	@ (800347c <TIM2_IRQHandler+0x10>)
 8003472:	f003 ffa5 	bl	80073c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000440 	.word	0x20000440

08003480 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003484:	4802      	ldr	r0, [pc, #8]	@ (8003490 <TIM3_IRQHandler+0x10>)
 8003486:	f003 ff9b 	bl	80073c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000488 	.word	0x20000488

08003494 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003498:	4802      	ldr	r0, [pc, #8]	@ (80034a4 <SPI1_IRQHandler+0x10>)
 800349a:	f003 fb79 	bl	8006b90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000328 	.word	0x20000328

080034a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80034ac:	4802      	ldr	r0, [pc, #8]	@ (80034b8 <DMA2_Stream0_IRQHandler+0x10>)
 80034ae:	f000 fbeb 	bl	8003c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000380 	.word	0x20000380

080034bc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80034c0:	4802      	ldr	r0, [pc, #8]	@ (80034cc <DMA2_Stream3_IRQHandler+0x10>)
 80034c2:	f000 fbe1 	bl	8003c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200003e0 	.word	0x200003e0

080034d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80034d4:	4802      	ldr	r0, [pc, #8]	@ (80034e0 <OTG_FS_IRQHandler+0x10>)
 80034d6:	f001 f96d 	bl	80047b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20001af0 	.word	0x20001af0

080034e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return 1;
 80034e8:	2301      	movs	r3, #1
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <_kill>:

int _kill(int pid, int sig)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034fe:	f009 f919 	bl	800c734 <__errno>
 8003502:	4603      	mov	r3, r0
 8003504:	2216      	movs	r2, #22
 8003506:	601a      	str	r2, [r3, #0]
  return -1;
 8003508:	f04f 33ff 	mov.w	r3, #4294967295
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <_exit>:

void _exit (int status)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800351c:	f04f 31ff 	mov.w	r1, #4294967295
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ffe7 	bl	80034f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003526:	bf00      	nop
 8003528:	e7fd      	b.n	8003526 <_exit+0x12>

0800352a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e00a      	b.n	8003552 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800353c:	f3af 8000 	nop.w
 8003540:	4601      	mov	r1, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	60ba      	str	r2, [r7, #8]
 8003548:	b2ca      	uxtb	r2, r1
 800354a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3301      	adds	r3, #1
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	dbf0      	blt.n	800353c <_read+0x12>
  }

  return len;
 800355a:	687b      	ldr	r3, [r7, #4]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	e009      	b.n	800358a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	60ba      	str	r2, [r7, #8]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3301      	adds	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	dbf1      	blt.n	8003576 <_write+0x12>
  }
  return len;
 8003592:	687b      	ldr	r3, [r7, #4]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_close>:

int _close(int file)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035c4:	605a      	str	r2, [r3, #4]
  return 0;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <_isatty>:

int _isatty(int file)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035dc:	2301      	movs	r3, #1
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800360c:	4a14      	ldr	r2, [pc, #80]	@ (8003660 <_sbrk+0x5c>)
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <_sbrk+0x60>)
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003618:	4b13      	ldr	r3, [pc, #76]	@ (8003668 <_sbrk+0x64>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003620:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <_sbrk+0x64>)
 8003622:	4a12      	ldr	r2, [pc, #72]	@ (800366c <_sbrk+0x68>)
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003626:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <_sbrk+0x64>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	429a      	cmp	r2, r3
 8003632:	d207      	bcs.n	8003644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003634:	f009 f87e 	bl	800c734 <__errno>
 8003638:	4603      	mov	r3, r0
 800363a:	220c      	movs	r2, #12
 800363c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
 8003642:	e009      	b.n	8003658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003644:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800364a:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <_sbrk+0x64>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	4a05      	ldr	r2, [pc, #20]	@ (8003668 <_sbrk+0x64>)
 8003654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20020000 	.word	0x20020000
 8003664:	00000400 	.word	0x00000400
 8003668:	20000608 	.word	0x20000608
 800366c:	20002340 	.word	0x20002340

08003670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003674:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <SystemInit+0x20>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367a:	4a05      	ldr	r2, [pc, #20]	@ (8003690 <SystemInit+0x20>)
 800367c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003694:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003698:	f7ff ffea 	bl	8003670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800369c:	480c      	ldr	r0, [pc, #48]	@ (80036d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800369e:	490d      	ldr	r1, [pc, #52]	@ (80036d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036a0:	4a0d      	ldr	r2, [pc, #52]	@ (80036d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036a4:	e002      	b.n	80036ac <LoopCopyDataInit>

080036a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036aa:	3304      	adds	r3, #4

080036ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036b0:	d3f9      	bcc.n	80036a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036b2:	4a0a      	ldr	r2, [pc, #40]	@ (80036dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036b4:	4c0a      	ldr	r4, [pc, #40]	@ (80036e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b8:	e001      	b.n	80036be <LoopFillZerobss>

080036ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036bc:	3204      	adds	r2, #4

080036be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036c0:	d3fb      	bcc.n	80036ba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80036c2:	f009 f83d 	bl	800c740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036c6:	f7ff fa8d 	bl	8002be4 <main>
  bx  lr    
 80036ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036d4:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 80036d8:	080116e8 	.word	0x080116e8
  ldr r2, =_sbss
 80036dc:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 80036e0:	20002340 	.word	0x20002340

080036e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e4:	e7fe      	b.n	80036e4 <ADC_IRQHandler>
	...

080036e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003728 <HAL_Init+0x40>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003728 <HAL_Init+0x40>)
 80036f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <HAL_Init+0x40>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <HAL_Init+0x40>)
 80036fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003702:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003704:	4b08      	ldr	r3, [pc, #32]	@ (8003728 <HAL_Init+0x40>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a07      	ldr	r2, [pc, #28]	@ (8003728 <HAL_Init+0x40>)
 800370a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003710:	2003      	movs	r0, #3
 8003712:	f000 f94f 	bl	80039b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003716:	200f      	movs	r0, #15
 8003718:	f000 f808 	bl	800372c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800371c:	f7ff fd46 	bl	80031ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023c00 	.word	0x40023c00

0800372c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003734:	4b12      	ldr	r3, [pc, #72]	@ (8003780 <HAL_InitTick+0x54>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <HAL_InitTick+0x58>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4619      	mov	r1, r3
 800373e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003742:	fbb3 f3f1 	udiv	r3, r3, r1
 8003746:	fbb2 f3f3 	udiv	r3, r2, r3
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f967 	bl	8003a1e <HAL_SYSTICK_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e00e      	b.n	8003778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d80a      	bhi.n	8003776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003760:	2200      	movs	r2, #0
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	f000 f92f 	bl	80039ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800376c:	4a06      	ldr	r2, [pc, #24]	@ (8003788 <HAL_InitTick+0x5c>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	2000002c 	.word	0x2000002c
 8003784:	20000034 	.word	0x20000034
 8003788:	20000030 	.word	0x20000030

0800378c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003790:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <HAL_IncTick+0x20>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <HAL_IncTick+0x24>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4413      	add	r3, r2
 800379c:	4a04      	ldr	r2, [pc, #16]	@ (80037b0 <HAL_IncTick+0x24>)
 800379e:	6013      	str	r3, [r2, #0]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000034 	.word	0x20000034
 80037b0:	2000060c 	.word	0x2000060c

080037b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return uwTick;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <HAL_GetTick+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	2000060c 	.word	0x2000060c

080037cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7ff ffee 	bl	80037b4 <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d005      	beq.n	80037f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <HAL_Delay+0x44>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037f2:	bf00      	nop
 80037f4:	f7ff ffde 	bl	80037b4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	429a      	cmp	r2, r3
 8003802:	d8f7      	bhi.n	80037f4 <HAL_Delay+0x28>
  {
  }
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000034 	.word	0x20000034

08003814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003830:	4013      	ands	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800383c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003846:	4a04      	ldr	r2, [pc, #16]	@ (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	60d3      	str	r3, [r2, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003860:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <__NVIC_GetPriorityGrouping+0x18>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 0307 	and.w	r3, r3, #7
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db0b      	blt.n	80038a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	4907      	ldr	r1, [pc, #28]	@ (80038b0 <__NVIC_EnableIRQ+0x38>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2001      	movs	r0, #1
 800389a:	fa00 f202 	lsl.w	r2, r0, r2
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000e100 	.word	0xe000e100

080038b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db0a      	blt.n	80038de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	490c      	ldr	r1, [pc, #48]	@ (8003900 <__NVIC_SetPriority+0x4c>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	0112      	lsls	r2, r2, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440b      	add	r3, r1
 80038d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038dc:	e00a      	b.n	80038f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4908      	ldr	r1, [pc, #32]	@ (8003904 <__NVIC_SetPriority+0x50>)
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3b04      	subs	r3, #4
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	761a      	strb	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f1c3 0307 	rsb	r3, r3, #7
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf28      	it	cs
 8003926:	2304      	movcs	r3, #4
 8003928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3304      	adds	r3, #4
 800392e:	2b06      	cmp	r3, #6
 8003930:	d902      	bls.n	8003938 <NVIC_EncodePriority+0x30>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3b03      	subs	r3, #3
 8003936:	e000      	b.n	800393a <NVIC_EncodePriority+0x32>
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	401a      	ands	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003950:	f04f 31ff 	mov.w	r1, #4294967295
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43d9      	mvns	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003960:	4313      	orrs	r3, r2
         );
}
 8003962:	4618      	mov	r0, r3
 8003964:	3724      	adds	r7, #36	@ 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003980:	d301      	bcc.n	8003986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003982:	2301      	movs	r3, #1
 8003984:	e00f      	b.n	80039a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003986:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <SysTick_Config+0x40>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800398e:	210f      	movs	r1, #15
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	f7ff ff8e 	bl	80038b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <SysTick_Config+0x40>)
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800399e:	4b04      	ldr	r3, [pc, #16]	@ (80039b0 <SysTick_Config+0x40>)
 80039a0:	2207      	movs	r2, #7
 80039a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	e000e010 	.word	0xe000e010

080039b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff29 	bl	8003814 <__NVIC_SetPriorityGrouping>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	4603      	mov	r3, r0
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039dc:	f7ff ff3e 	bl	800385c <__NVIC_GetPriorityGrouping>
 80039e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	6978      	ldr	r0, [r7, #20]
 80039e8:	f7ff ff8e 	bl	8003908 <NVIC_EncodePriority>
 80039ec:	4602      	mov	r2, r0
 80039ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff5d 	bl	80038b4 <__NVIC_SetPriority>
}
 80039fa:	bf00      	nop
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff31 	bl	8003878 <__NVIC_EnableIRQ>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ffa2 	bl	8003970 <SysTick_Config>
 8003a2c:	4603      	mov	r3, r0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a44:	f7ff feb6 	bl	80037b4 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e099      	b.n	8003b88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a74:	e00f      	b.n	8003a96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a76:	f7ff fe9d 	bl	80037b4 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d908      	bls.n	8003a96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e078      	b.n	8003b88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e8      	bne.n	8003a76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4b38      	ldr	r3, [pc, #224]	@ (8003b90 <HAL_DMA_Init+0x158>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d107      	bne.n	8003b00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	4313      	orrs	r3, r2
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f023 0307 	bic.w	r3, r3, #7
 8003b16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d117      	bne.n	8003b5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00e      	beq.n	8003b5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fa91 	bl	8004064 <DMA_CheckFifoParam>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2240      	movs	r2, #64	@ 0x40
 8003b4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b56:	2301      	movs	r3, #1
 8003b58:	e016      	b.n	8003b88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fa48 	bl	8003ff8 <DMA_CalcBaseAndBitshift>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b70:	223f      	movs	r2, #63	@ 0x3f
 8003b72:	409a      	lsls	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	f010803f 	.word	0xf010803f

08003b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003baa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_DMA_Start_IT+0x26>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e040      	b.n	8003c3c <HAL_DMA_Start_IT+0xa8>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d12f      	bne.n	8003c2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f9da 	bl	8003f9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bec:	223f      	movs	r2, #63	@ 0x3f
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0216 	orr.w	r2, r2, #22
 8003c02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0208 	orr.w	r2, r2, #8
 8003c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e005      	b.n	8003c3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
 8003c38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d004      	beq.n	8003c62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2280      	movs	r2, #128	@ 0x80
 8003c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e00c      	b.n	8003c7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2205      	movs	r2, #5
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c94:	4b8e      	ldr	r3, [pc, #568]	@ (8003ed0 <HAL_DMA_IRQHandler+0x248>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a8e      	ldr	r2, [pc, #568]	@ (8003ed4 <HAL_DMA_IRQHandler+0x24c>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0a9b      	lsrs	r3, r3, #10
 8003ca0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01a      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0204 	bic.w	r2, r2, #4
 8003cda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cec:	f043 0201 	orr.w	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d16:	2201      	movs	r2, #1
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d22:	f043 0202 	orr.w	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2e:	2204      	movs	r2, #4
 8003d30:	409a      	lsls	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d012      	beq.n	8003d60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d58:	f043 0204 	orr.w	r2, r3, #4
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d64:	2210      	movs	r2, #16
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d043      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d03c      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d82:	2210      	movs	r2, #16
 8003d84:	409a      	lsls	r2, r3
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d018      	beq.n	8003dca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d108      	bne.n	8003db8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d024      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
 8003db6:	e01f      	b.n	8003df8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01b      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
 8003dc8:	e016      	b.n	8003df8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d107      	bne.n	8003de8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0208 	bic.w	r2, r2, #8
 8003de6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 808f 	beq.w	8003f28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8087 	beq.w	8003f28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1e:	2220      	movs	r2, #32
 8003e20:	409a      	lsls	r2, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	d136      	bne.n	8003ea0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0216 	bic.w	r2, r2, #22
 8003e40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <HAL_DMA_IRQHandler+0x1da>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0208 	bic.w	r2, r2, #8
 8003e70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e76:	223f      	movs	r2, #63	@ 0x3f
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d07e      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
        }
        return;
 8003e9e:	e079      	b.n	8003f94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01d      	beq.n	8003eea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10d      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d031      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
 8003ecc:	e02c      	b.n	8003f28 <HAL_DMA_IRQHandler+0x2a0>
 8003ece:	bf00      	nop
 8003ed0:	2000002c 	.word	0x2000002c
 8003ed4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d023      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
 8003ee8:	e01e      	b.n	8003f28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10f      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0210 	bic.w	r2, r2, #16
 8003f06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d032      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d022      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2205      	movs	r2, #5
 8003f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	3301      	adds	r3, #1
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d307      	bcc.n	8003f70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f2      	bne.n	8003f54 <HAL_DMA_IRQHandler+0x2cc>
 8003f6e:	e000      	b.n	8003f72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4798      	blx	r3
 8003f92:	e000      	b.n	8003f96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f94:	bf00      	nop
    }
  }
}
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b40      	cmp	r3, #64	@ 0x40
 8003fc8:	d108      	bne.n	8003fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fda:	e007      	b.n	8003fec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	3b10      	subs	r3, #16
 8004008:	4a14      	ldr	r2, [pc, #80]	@ (800405c <DMA_CalcBaseAndBitshift+0x64>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004012:	4a13      	ldr	r2, [pc, #76]	@ (8004060 <DMA_CalcBaseAndBitshift+0x68>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b03      	cmp	r3, #3
 8004024:	d909      	bls.n	800403a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	1d1a      	adds	r2, r3, #4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	659a      	str	r2, [r3, #88]	@ 0x58
 8004038:	e007      	b.n	800404a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	aaaaaaab 	.word	0xaaaaaaab
 8004060:	08010ed8 	.word	0x08010ed8

08004064 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11f      	bne.n	80040be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d856      	bhi.n	8004132 <DMA_CheckFifoParam+0xce>
 8004084:	a201      	add	r2, pc, #4	@ (adr r2, 800408c <DMA_CheckFifoParam+0x28>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080040af 	.word	0x080040af
 8004094:	0800409d 	.word	0x0800409d
 8004098:	08004133 	.word	0x08004133
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d046      	beq.n	8004136 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ac:	e043      	b.n	8004136 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040b6:	d140      	bne.n	800413a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040bc:	e03d      	b.n	800413a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c6:	d121      	bne.n	800410c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d837      	bhi.n	800413e <DMA_CheckFifoParam+0xda>
 80040ce:	a201      	add	r2, pc, #4	@ (adr r2, 80040d4 <DMA_CheckFifoParam+0x70>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	080040eb 	.word	0x080040eb
 80040dc:	080040e5 	.word	0x080040e5
 80040e0:	080040fd 	.word	0x080040fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      break;
 80040e8:	e030      	b.n	800414c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d025      	beq.n	8004142 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fa:	e022      	b.n	8004142 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004104:	d11f      	bne.n	8004146 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800410a:	e01c      	b.n	8004146 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d903      	bls.n	800411a <DMA_CheckFifoParam+0xb6>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d003      	beq.n	8004120 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004118:	e018      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
      break;
 800411e:	e015      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004124:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00e      	beq.n	800414a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e00b      	b.n	800414a <DMA_CheckFifoParam+0xe6>
      break;
 8004132:	bf00      	nop
 8004134:	e00a      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 8004136:	bf00      	nop
 8004138:	e008      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 800413a:	bf00      	nop
 800413c:	e006      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 800413e:	bf00      	nop
 8004140:	e004      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 8004142:	bf00      	nop
 8004144:	e002      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;   
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 800414a:	bf00      	nop
    }
  } 
  
  return status; 
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop

0800415c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	@ 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	e16b      	b.n	8004450 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004178:	2201      	movs	r2, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4013      	ands	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	429a      	cmp	r2, r3
 8004192:	f040 815a 	bne.w	800444a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d005      	beq.n	80041ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d130      	bne.n	8004210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	2203      	movs	r2, #3
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041e4:	2201      	movs	r2, #1
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 0201 	and.w	r2, r3, #1
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b03      	cmp	r3, #3
 800421a:	d017      	beq.n	800424c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d123      	bne.n	80042a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	08da      	lsrs	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3208      	adds	r2, #8
 8004260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	220f      	movs	r2, #15
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	08da      	lsrs	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3208      	adds	r2, #8
 800429a:	69b9      	ldr	r1, [r7, #24]
 800429c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0203 	and.w	r2, r3, #3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80b4 	beq.w	800444a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	4b60      	ldr	r3, [pc, #384]	@ (8004468 <HAL_GPIO_Init+0x30c>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	4a5f      	ldr	r2, [pc, #380]	@ (8004468 <HAL_GPIO_Init+0x30c>)
 80042ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004468 <HAL_GPIO_Init+0x30c>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042fe:	4a5b      	ldr	r2, [pc, #364]	@ (800446c <HAL_GPIO_Init+0x310>)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	089b      	lsrs	r3, r3, #2
 8004304:	3302      	adds	r3, #2
 8004306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	220f      	movs	r2, #15
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a52      	ldr	r2, [pc, #328]	@ (8004470 <HAL_GPIO_Init+0x314>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d02b      	beq.n	8004382 <HAL_GPIO_Init+0x226>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a51      	ldr	r2, [pc, #324]	@ (8004474 <HAL_GPIO_Init+0x318>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d025      	beq.n	800437e <HAL_GPIO_Init+0x222>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a50      	ldr	r2, [pc, #320]	@ (8004478 <HAL_GPIO_Init+0x31c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01f      	beq.n	800437a <HAL_GPIO_Init+0x21e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a4f      	ldr	r2, [pc, #316]	@ (800447c <HAL_GPIO_Init+0x320>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d019      	beq.n	8004376 <HAL_GPIO_Init+0x21a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a4e      	ldr	r2, [pc, #312]	@ (8004480 <HAL_GPIO_Init+0x324>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_GPIO_Init+0x216>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a4d      	ldr	r2, [pc, #308]	@ (8004484 <HAL_GPIO_Init+0x328>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00d      	beq.n	800436e <HAL_GPIO_Init+0x212>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a4c      	ldr	r2, [pc, #304]	@ (8004488 <HAL_GPIO_Init+0x32c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <HAL_GPIO_Init+0x20e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a4b      	ldr	r2, [pc, #300]	@ (800448c <HAL_GPIO_Init+0x330>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_GPIO_Init+0x20a>
 8004362:	2307      	movs	r3, #7
 8004364:	e00e      	b.n	8004384 <HAL_GPIO_Init+0x228>
 8004366:	2308      	movs	r3, #8
 8004368:	e00c      	b.n	8004384 <HAL_GPIO_Init+0x228>
 800436a:	2306      	movs	r3, #6
 800436c:	e00a      	b.n	8004384 <HAL_GPIO_Init+0x228>
 800436e:	2305      	movs	r3, #5
 8004370:	e008      	b.n	8004384 <HAL_GPIO_Init+0x228>
 8004372:	2304      	movs	r3, #4
 8004374:	e006      	b.n	8004384 <HAL_GPIO_Init+0x228>
 8004376:	2303      	movs	r3, #3
 8004378:	e004      	b.n	8004384 <HAL_GPIO_Init+0x228>
 800437a:	2302      	movs	r3, #2
 800437c:	e002      	b.n	8004384 <HAL_GPIO_Init+0x228>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_GPIO_Init+0x228>
 8004382:	2300      	movs	r3, #0
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	f002 0203 	and.w	r2, r2, #3
 800438a:	0092      	lsls	r2, r2, #2
 800438c:	4093      	lsls	r3, r2
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004394:	4935      	ldr	r1, [pc, #212]	@ (800446c <HAL_GPIO_Init+0x310>)
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	3302      	adds	r3, #2
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004490 <HAL_GPIO_Init+0x334>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043c6:	4a32      	ldr	r2, [pc, #200]	@ (8004490 <HAL_GPIO_Init+0x334>)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043cc:	4b30      	ldr	r3, [pc, #192]	@ (8004490 <HAL_GPIO_Init+0x334>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043f0:	4a27      	ldr	r2, [pc, #156]	@ (8004490 <HAL_GPIO_Init+0x334>)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043f6:	4b26      	ldr	r3, [pc, #152]	@ (8004490 <HAL_GPIO_Init+0x334>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800441a:	4a1d      	ldr	r2, [pc, #116]	@ (8004490 <HAL_GPIO_Init+0x334>)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004420:	4b1b      	ldr	r3, [pc, #108]	@ (8004490 <HAL_GPIO_Init+0x334>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004444:	4a12      	ldr	r2, [pc, #72]	@ (8004490 <HAL_GPIO_Init+0x334>)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3301      	adds	r3, #1
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	2b0f      	cmp	r3, #15
 8004454:	f67f ae90 	bls.w	8004178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004458:	bf00      	nop
 800445a:	bf00      	nop
 800445c:	3724      	adds	r7, #36	@ 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	40013800 	.word	0x40013800
 8004470:	40020000 	.word	0x40020000
 8004474:	40020400 	.word	0x40020400
 8004478:	40020800 	.word	0x40020800
 800447c:	40020c00 	.word	0x40020c00
 8004480:	40021000 	.word	0x40021000
 8004484:	40021400 	.word	0x40021400
 8004488:	40021800 	.word	0x40021800
 800448c:	40021c00 	.word	0x40021c00
 8004490:	40013c00 	.word	0x40013c00

08004494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
 80044a0:	4613      	mov	r3, r2
 80044a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044a4:	787b      	ldrb	r3, [r7, #1]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044aa:	887a      	ldrh	r2, [r7, #2]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044b0:	e003      	b.n	80044ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	041a      	lsls	r2, r3, #16
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	619a      	str	r2, [r3, #24]
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044d8:	887a      	ldrh	r2, [r7, #2]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4013      	ands	r3, r2
 80044de:	041a      	lsls	r2, r3, #16
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	43d9      	mvns	r1, r3
 80044e4:	887b      	ldrh	r3, [r7, #2]
 80044e6:	400b      	ands	r3, r1
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	619a      	str	r2, [r3, #24]
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004506:	4b08      	ldr	r3, [pc, #32]	@ (8004528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d006      	beq.n	8004520 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004512:	4a05      	ldr	r2, [pc, #20]	@ (8004528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe f994 	bl	8002848 <HAL_GPIO_EXTI_Callback>
  }
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40013c00 	.word	0x40013c00

0800452c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af02      	add	r7, sp, #8
 8004532:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e101      	b.n	8004742 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f007 f807 	bl	800b56c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2203      	movs	r2, #3
 8004562:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800456c:	d102      	bne.n	8004574 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f003 fbee 	bl	8007d5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	7c1a      	ldrb	r2, [r3, #16]
 8004586:	f88d 2000 	strb.w	r2, [sp]
 800458a:	3304      	adds	r3, #4
 800458c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800458e:	f003 facd 	bl	8007b2c <USB_CoreInit>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0ce      	b.n	8004742 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f003 fbe6 	bl	8007d7c <USB_SetCurrentMode>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0bf      	b.n	8004742 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	e04a      	b.n	800465e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045c8:	7bfa      	ldrb	r2, [r7, #15]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3315      	adds	r3, #21
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3314      	adds	r3, #20
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	b298      	uxth	r0, r3
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	332e      	adds	r3, #46	@ 0x2e
 8004604:	4602      	mov	r2, r0
 8004606:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004608:	7bfa      	ldrb	r2, [r7, #15]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	3318      	adds	r3, #24
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	331c      	adds	r3, #28
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	3320      	adds	r3, #32
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	3324      	adds	r3, #36	@ 0x24
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	3301      	adds	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	791b      	ldrb	r3, [r3, #4]
 8004662:	7bfa      	ldrb	r2, [r7, #15]
 8004664:	429a      	cmp	r2, r3
 8004666:	d3af      	bcc.n	80045c8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
 800466c:	e044      	b.n	80046f8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800466e:	7bfa      	ldrb	r2, [r7, #15]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004696:	7bfa      	ldrb	r2, [r7, #15]
 8004698:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046b0:	7bfa      	ldrb	r2, [r7, #15]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046dc:	7bfa      	ldrb	r2, [r7, #15]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	3301      	adds	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	791b      	ldrb	r3, [r3, #4]
 80046fc:	7bfa      	ldrb	r2, [r7, #15]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d3b5      	bcc.n	800466e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	7c1a      	ldrb	r2, [r3, #16]
 800470a:	f88d 2000 	strb.w	r2, [sp]
 800470e:	3304      	adds	r3, #4
 8004710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004712:	f003 fb7f 	bl	8007e14 <USB_DevInit>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e00c      	b.n	8004742 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f004 fbc9 	bl	8008ed2 <USB_DevDisconnect>

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_PCD_Start+0x1c>
 8004762:	2302      	movs	r3, #2
 8004764:	e022      	b.n	80047ac <HAL_PCD_Start+0x62>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800477e:	2b01      	cmp	r3, #1
 8004780:	d105      	bne.n	800478e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004786:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f003 fad0 	bl	8007d38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f004 fb77 	bl	8008e90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b08d      	sub	sp, #52	@ 0x34
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f004 fc35 	bl	800903a <USB_GetMode>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 848c 	bne.w	80050f0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f004 fb99 	bl	8008f14 <USB_ReadInterrupts>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8482 	beq.w	80050ee <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f004 fb86 	bl	8008f14 <USB_ReadInterrupts>
 8004808:	4603      	mov	r3, r0
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d107      	bne.n	8004822 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f002 0202 	and.w	r2, r2, #2
 8004820:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f004 fb74 	bl	8008f14 <USB_ReadInterrupts>
 800482c:	4603      	mov	r3, r0
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b10      	cmp	r3, #16
 8004834:	d161      	bne.n	80048fa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699a      	ldr	r2, [r3, #24]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0210 	bic.w	r2, r2, #16
 8004844:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f003 020f 	and.w	r2, r3, #15
 8004852:	4613      	mov	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4413      	add	r3, r2
 8004862:	3304      	adds	r3, #4
 8004864:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	0c5b      	lsrs	r3, r3, #17
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	2b02      	cmp	r3, #2
 8004870:	d124      	bne.n	80048bc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004878:	4013      	ands	r3, r2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d035      	beq.n	80048ea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800488c:	b29b      	uxth	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	6a38      	ldr	r0, [r7, #32]
 8004892:	f004 f9ab 	bl	8008bec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048a2:	441a      	add	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b4:	441a      	add	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	615a      	str	r2, [r3, #20]
 80048ba:	e016      	b.n	80048ea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	0c5b      	lsrs	r3, r3, #17
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d110      	bne.n	80048ea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048ce:	2208      	movs	r2, #8
 80048d0:	4619      	mov	r1, r3
 80048d2:	6a38      	ldr	r0, [r7, #32]
 80048d4:	f004 f98a 	bl	8008bec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048e4:	441a      	add	r2, r3
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699a      	ldr	r2, [r3, #24]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0210 	orr.w	r2, r2, #16
 80048f8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f004 fb08 	bl	8008f14 <USB_ReadInterrupts>
 8004904:	4603      	mov	r3, r0
 8004906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800490a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800490e:	f040 80a7 	bne.w	8004a60 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f004 fb0d 	bl	8008f3a <USB_ReadDevAllOutEpInterrupt>
 8004920:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004922:	e099      	b.n	8004a58 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 808e 	beq.w	8004a4c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f004 fb31 	bl	8008fa2 <USB_ReadDevOutEPInterrupt>
 8004940:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00c      	beq.n	8004966 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004958:	461a      	mov	r2, r3
 800495a:	2301      	movs	r3, #1
 800495c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800495e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fea3 	bl	80056ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00c      	beq.n	800498a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497c:	461a      	mov	r2, r3
 800497e:	2308      	movs	r3, #8
 8004980:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004982:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 ff79 	bl	800587c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a0:	461a      	mov	r2, r3
 80049a2:	2310      	movs	r3, #16
 80049a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d030      	beq.n	8004a12 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b8:	2b80      	cmp	r3, #128	@ 0x80
 80049ba:	d109      	bne.n	80049d0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049ce:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80049d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d2:	4613      	mov	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	3304      	adds	r3, #4
 80049e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	78db      	ldrb	r3, [r3, #3]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d108      	bne.n	8004a00 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f006 febc 	bl	800b778 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2302      	movs	r3, #2
 8004a10:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a44:	461a      	mov	r2, r3
 8004a46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a4a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	3301      	adds	r3, #1
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a54:	085b      	lsrs	r3, r3, #1
 8004a56:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f47f af62 	bne.w	8004924 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f004 fa55 	bl	8008f14 <USB_ReadInterrupts>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a74:	f040 80db 	bne.w	8004c2e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f004 fa76 	bl	8008f6e <USB_ReadDevAllInEpInterrupt>
 8004a82:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004a88:	e0cd      	b.n	8004c26 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80c2 	beq.w	8004c1a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f004 fa9c 	bl	8008fde <USB_ReadDevInEPInterrupt>
 8004aa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d057      	beq.n	8004b62 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	2201      	movs	r2, #1
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	43db      	mvns	r3, r3
 8004acc:	69f9      	ldr	r1, [r7, #28]
 8004ace:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	799b      	ldrb	r3, [r3, #6]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d132      	bne.n	8004b56 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af4:	4613      	mov	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	3320      	adds	r3, #32
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4403      	add	r3, r0
 8004b10:	331c      	adds	r3, #28
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4419      	add	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4403      	add	r3, r0
 8004b24:	3320      	adds	r3, #32
 8004b26:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d113      	bne.n	8004b56 <HAL_PCD_IRQHandler+0x3a2>
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b32:	4613      	mov	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	3324      	adds	r3, #36	@ 0x24
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d108      	bne.n	8004b56 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2101      	movs	r1, #1
 8004b52:	f004 faa3 	bl	800909c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f006 fd86 	bl	800b66e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b94:	461a      	mov	r2, r3
 8004b96:	2310      	movs	r3, #16
 8004b98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2340      	movs	r3, #64	@ 0x40
 8004bb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d023      	beq.n	8004c08 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004bc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bc2:	6a38      	ldr	r0, [r7, #32]
 8004bc4:	f003 fa8a 	bl	80080dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	3310      	adds	r3, #16
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3304      	adds	r3, #4
 8004bda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	78db      	ldrb	r3, [r3, #3]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d108      	bne.n	8004bf6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2200      	movs	r2, #0
 8004be8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f006 fdd3 	bl	800b79c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c02:	461a      	mov	r2, r3
 8004c04:	2302      	movs	r3, #2
 8004c06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fcbd 	bl	8005594 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f47f af2e 	bne.w	8004a8a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f004 f96e 	bl	8008f14 <USB_ReadInterrupts>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c42:	d122      	bne.n	8004c8a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d108      	bne.n	8004c74 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fea3 	bl	80059b8 <HAL_PCDEx_LPM_Callback>
 8004c72:	e002      	b.n	8004c7a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f006 fd71 	bl	800b75c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f004 f940 	bl	8008f14 <USB_ReadInterrupts>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c9e:	d112      	bne.n	8004cc6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d102      	bne.n	8004cb6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f006 fd2d 	bl	800b710 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004cc4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f004 f922 	bl	8008f14 <USB_ReadInterrupts>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cda:	f040 80b7 	bne.w	8004e4c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2110      	movs	r1, #16
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f003 f9ef 	bl	80080dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cfe:	2300      	movs	r3, #0
 8004d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d02:	e046      	b.n	8004d92 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d10:	461a      	mov	r2, r3
 8004d12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d16:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d44:	461a      	mov	r2, r3
 8004d46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d4a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d8a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8e:	3301      	adds	r3, #1
 8004d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	791b      	ldrb	r3, [r3, #4]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d3b2      	bcc.n	8004d04 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dac:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004db0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	7bdb      	ldrb	r3, [r3, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d016      	beq.n	8004de8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dca:	f043 030b 	orr.w	r3, r3, #11
 8004dce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004de0:	f043 030b 	orr.w	r3, r3, #11
 8004de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004de6:	e015      	b.n	8004e14 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004df6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004dfa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004dfe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e0e:	f043 030b 	orr.w	r3, r3, #11
 8004e12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e22:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004e26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e36:	461a      	mov	r2, r3
 8004e38:	f004 f930 	bl	800909c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f004 f85f 	bl	8008f14 <USB_ReadInterrupts>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e60:	d123      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f004 f8f5 	bl	8009056 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f003 f9ac 	bl	80081ce <USB_GetDevSpeed>
 8004e76:	4603      	mov	r3, r0
 8004e78:	461a      	mov	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681c      	ldr	r4, [r3, #0]
 8004e82:	f001 fa07 	bl	8006294 <HAL_RCC_GetHCLKFreq>
 8004e86:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f002 feb0 	bl	8007bf4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f006 fc12 	bl	800b6be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f004 f830 	bl	8008f14 <USB_ReadInterrupts>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f006 fbef 	bl	800b6a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f002 0208 	and.w	r2, r2, #8
 8004ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f004 f81b 	bl	8008f14 <USB_ReadInterrupts>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee4:	2b80      	cmp	r3, #128	@ 0x80
 8004ee6:	d123      	bne.n	8004f30 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef8:	e014      	b.n	8004f24 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004efe:	4613      	mov	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	4619      	mov	r1, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fb0a 	bl	8005532 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	3301      	adds	r3, #1
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	791b      	ldrb	r3, [r3, #4]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d3e4      	bcc.n	8004efa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f003 ffed 	bl	8008f14 <USB_ReadInterrupts>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f44:	d13c      	bne.n	8004fc0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f46:	2301      	movs	r3, #1
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f4a:	e02b      	b.n	8004fa4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	3318      	adds	r3, #24
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d115      	bne.n	8004f9e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004f72:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	da12      	bge.n	8004f9e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	3317      	adds	r3, #23
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	4619      	mov	r1, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 faca 	bl	8005532 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	791b      	ldrb	r3, [r3, #4]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d3cd      	bcc.n	8004f4c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f003 ffa5 	bl	8008f14 <USB_ReadInterrupts>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fd4:	d156      	bne.n	8005084 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fda:	e045      	b.n	8005068 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d12e      	bne.n	8005062 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005004:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005006:	2b00      	cmp	r3, #0
 8005008:	da2b      	bge.n	8005062 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005016:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800501a:	429a      	cmp	r2, r3
 800501c:	d121      	bne.n	8005062 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800505a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800505e:	6053      	str	r3, [r2, #4]
            break;
 8005060:	e008      	b.n	8005074 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	3301      	adds	r3, #1
 8005066:	627b      	str	r3, [r7, #36]	@ 0x24
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	791b      	ldrb	r3, [r3, #4]
 800506c:	461a      	mov	r2, r3
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	4293      	cmp	r3, r2
 8005072:	d3b3      	bcc.n	8004fdc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695a      	ldr	r2, [r3, #20]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f003 ff43 	bl	8008f14 <USB_ReadInterrupts>
 800508e:	4603      	mov	r3, r0
 8005090:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005098:	d10a      	bne.n	80050b0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f006 fb90 	bl	800b7c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80050ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f003 ff2d 	bl	8008f14 <USB_ReadInterrupts>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d115      	bne.n	80050f0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f006 fb80 	bl	800b7dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6859      	ldr	r1, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	e000      	b.n	80050f0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80050ee:	bf00      	nop
    }
  }
}
 80050f0:	3734      	adds	r7, #52	@ 0x34
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd90      	pop	{r4, r7, pc}

080050f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_PCD_SetAddress+0x1a>
 800510c:	2302      	movs	r3, #2
 800510e:	e012      	b.n	8005136 <HAL_PCD_SetAddress+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	4611      	mov	r1, r2
 8005126:	4618      	mov	r0, r3
 8005128:	f003 fe8c 	bl	8008e44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	4608      	mov	r0, r1
 8005148:	4611      	mov	r1, r2
 800514a:	461a      	mov	r2, r3
 800514c:	4603      	mov	r3, r0
 800514e:	70fb      	strb	r3, [r7, #3]
 8005150:	460b      	mov	r3, r1
 8005152:	803b      	strh	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800515c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005160:	2b00      	cmp	r3, #0
 8005162:	da0f      	bge.n	8005184 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	f003 020f 	and.w	r2, r3, #15
 800516a:	4613      	mov	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	3310      	adds	r3, #16
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4413      	add	r3, r2
 8005178:	3304      	adds	r3, #4
 800517a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	705a      	strb	r2, [r3, #1]
 8005182:	e00f      	b.n	80051a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	f003 020f 	and.w	r2, r3, #15
 800518a:	4613      	mov	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4413      	add	r3, r2
 800519a:	3304      	adds	r3, #4
 800519c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80051b0:	883b      	ldrh	r3, [r7, #0]
 80051b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	78ba      	ldrb	r2, [r7, #2]
 80051be:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051d2:	78bb      	ldrb	r3, [r7, #2]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d102      	bne.n	80051de <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_PCD_EP_Open+0xae>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e00e      	b.n	800520a <HAL_PCD_EP_Open+0xcc>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68f9      	ldr	r1, [r7, #12]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f003 f80c 	bl	8008218 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005208:	7afb      	ldrb	r3, [r7, #11]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800521e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005222:	2b00      	cmp	r3, #0
 8005224:	da0f      	bge.n	8005246 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	f003 020f 	and.w	r2, r3, #15
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	3310      	adds	r3, #16
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	3304      	adds	r3, #4
 800523c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	705a      	strb	r2, [r3, #1]
 8005244:	e00f      	b.n	8005266 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	f003 020f 	and.w	r2, r3, #15
 800524c:	4613      	mov	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	3304      	adds	r3, #4
 800525e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	b2da      	uxtb	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_PCD_EP_Close+0x6e>
 800527c:	2302      	movs	r3, #2
 800527e:	e00e      	b.n	800529e <HAL_PCD_EP_Close+0x8c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	4618      	mov	r0, r3
 8005290:	f003 f84a 	bl	8008328 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	460b      	mov	r3, r1
 80052b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052b6:	7afb      	ldrb	r3, [r7, #11]
 80052b8:	f003 020f 	and.w	r2, r3, #15
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	3304      	adds	r3, #4
 80052ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2200      	movs	r2, #0
 80052e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2200      	movs	r2, #0
 80052e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052e8:	7afb      	ldrb	r3, [r7, #11]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	799b      	ldrb	r3, [r3, #6]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d102      	bne.n	8005302 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	799b      	ldrb	r3, [r3, #6]
 800530a:	461a      	mov	r2, r3
 800530c:	6979      	ldr	r1, [r7, #20]
 800530e:	f003 f8e7 	bl	80084e0 <USB_EPStartXfer>

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	f003 020f 	and.w	r2, r3, #15
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	607a      	str	r2, [r7, #4]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	460b      	mov	r3, r1
 800535a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	f003 020f 	and.w	r2, r3, #15
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	3310      	adds	r3, #16
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	3304      	adds	r3, #4
 8005372:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2200      	movs	r2, #0
 8005384:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2201      	movs	r2, #1
 800538a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800538c:	7afb      	ldrb	r3, [r7, #11]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	b2da      	uxtb	r2, r3
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	799b      	ldrb	r3, [r3, #6]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d102      	bne.n	80053a6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	799b      	ldrb	r3, [r3, #6]
 80053ae:	461a      	mov	r2, r3
 80053b0:	6979      	ldr	r1, [r7, #20]
 80053b2:	f003 f895 	bl	80084e0 <USB_EPStartXfer>

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	7912      	ldrb	r2, [r2, #4]
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e04f      	b.n	800547e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	da0f      	bge.n	8005406 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	f003 020f 	and.w	r2, r3, #15
 80053ec:	4613      	mov	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	3310      	adds	r3, #16
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4413      	add	r3, r2
 80053fa:	3304      	adds	r3, #4
 80053fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	705a      	strb	r2, [r3, #1]
 8005404:	e00d      	b.n	8005422 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	4613      	mov	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	4413      	add	r3, r2
 8005418:	3304      	adds	r3, #4
 800541a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	b2da      	uxtb	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_PCD_EP_SetStall+0x82>
 800543e:	2302      	movs	r3, #2
 8005440:	e01d      	b.n	800547e <HAL_PCD_EP_SetStall+0xbe>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68f9      	ldr	r1, [r7, #12]
 8005450:	4618      	mov	r0, r3
 8005452:	f003 fc23 	bl	8008c9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	2b00      	cmp	r3, #0
 800545e:	d109      	bne.n	8005474 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	7999      	ldrb	r1, [r3, #6]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800546e:	461a      	mov	r2, r3
 8005470:	f003 fe14 	bl	800909c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	7912      	ldrb	r2, [r2, #4]
 800549c:	4293      	cmp	r3, r2
 800549e:	d901      	bls.n	80054a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e042      	b.n	800552a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	da0f      	bge.n	80054cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	f003 020f 	and.w	r2, r3, #15
 80054b2:	4613      	mov	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	3310      	adds	r3, #16
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	4413      	add	r3, r2
 80054c0:	3304      	adds	r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	705a      	strb	r2, [r3, #1]
 80054ca:	e00f      	b.n	80054ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 020f 	and.w	r2, r3, #15
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	4413      	add	r3, r2
 80054e2:	3304      	adds	r3, #4
 80054e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_PCD_EP_ClrStall+0x86>
 8005508:	2302      	movs	r3, #2
 800550a:	e00e      	b.n	800552a <HAL_PCD_EP_ClrStall+0xa4>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68f9      	ldr	r1, [r7, #12]
 800551a:	4618      	mov	r0, r3
 800551c:	f003 fc2c 	bl	8008d78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	460b      	mov	r3, r1
 800553c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800553e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da0c      	bge.n	8005560 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	f003 020f 	and.w	r2, r3, #15
 800554c:	4613      	mov	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	3310      	adds	r3, #16
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	4413      	add	r3, r2
 800555a:	3304      	adds	r3, #4
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e00c      	b.n	800557a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	f003 020f 	and.w	r2, r3, #15
 8005566:	4613      	mov	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	3304      	adds	r3, #4
 8005578:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	4618      	mov	r0, r3
 8005582:	f003 fa4b 	bl	8008a1c <USB_EPStopXfer>
 8005586:	4603      	mov	r3, r0
 8005588:	72fb      	strb	r3, [r7, #11]

  return ret;
 800558a:	7afb      	ldrb	r3, [r7, #11]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	@ 0x28
 8005598:	af02      	add	r7, sp, #8
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	4613      	mov	r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	3310      	adds	r3, #16
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	4413      	add	r3, r2
 80055b8:	3304      	adds	r3, #4
 80055ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d901      	bls.n	80055cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e06b      	b.n	80056a4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d902      	bls.n	80055e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	3303      	adds	r3, #3
 80055ec:	089b      	lsrs	r3, r3, #2
 80055ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055f0:	e02a      	b.n	8005648 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	429a      	cmp	r2, r3
 8005606:	d902      	bls.n	800560e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3303      	adds	r3, #3
 8005612:	089b      	lsrs	r3, r3, #2
 8005614:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68d9      	ldr	r1, [r3, #12]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	4603      	mov	r3, r0
 800562a:	6978      	ldr	r0, [r7, #20]
 800562c:	f003 faa0 	bl	8008b70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	441a      	add	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	441a      	add	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	429a      	cmp	r2, r3
 800565c:	d809      	bhi.n	8005672 <PCD_WriteEmptyTxFifo+0xde>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005666:	429a      	cmp	r2, r3
 8005668:	d203      	bcs.n	8005672 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1bf      	bne.n	80055f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	429a      	cmp	r2, r3
 800567c:	d811      	bhi.n	80056a2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	2201      	movs	r2, #1
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	43db      	mvns	r3, r3
 8005698:	6939      	ldr	r1, [r7, #16]
 800569a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800569e:	4013      	ands	r3, r2
 80056a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3720      	adds	r7, #32
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	333c      	adds	r3, #60	@ 0x3c
 80056c4:	3304      	adds	r3, #4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	799b      	ldrb	r3, [r3, #6]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d17b      	bne.n	80057da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d015      	beq.n	8005718 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4a61      	ldr	r2, [pc, #388]	@ (8005874 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	f240 80b9 	bls.w	8005868 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80b3 	beq.w	8005868 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800570e:	461a      	mov	r2, r3
 8005710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005714:	6093      	str	r3, [r2, #8]
 8005716:	e0a7      	b.n	8005868 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800572e:	461a      	mov	r2, r3
 8005730:	2320      	movs	r3, #32
 8005732:	6093      	str	r3, [r2, #8]
 8005734:	e098      	b.n	8005868 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800573c:	2b00      	cmp	r3, #0
 800573e:	f040 8093 	bne.w	8005868 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	4a4b      	ldr	r2, [pc, #300]	@ (8005874 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d90f      	bls.n	800576a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005760:	461a      	mov	r2, r3
 8005762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005766:	6093      	str	r3, [r2, #8]
 8005768:	e07e      	b.n	8005868 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	4413      	add	r3, r2
 800577c:	3304      	adds	r3, #4
 800577e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1a      	ldr	r2, [r3, #32]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	0159      	lsls	r1, r3, #5
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	440b      	add	r3, r1
 800578c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005796:	1ad2      	subs	r2, r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d114      	bne.n	80057cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057b4:	461a      	mov	r2, r3
 80057b6:	2101      	movs	r1, #1
 80057b8:	f003 fc70 	bl	800909c <USB_EP0_OutStart>
 80057bc:	e006      	b.n	80057cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	441a      	add	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f005 ff30 	bl	800b638 <HAL_PCD_DataOutStageCallback>
 80057d8:	e046      	b.n	8005868 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4a26      	ldr	r2, [pc, #152]	@ (8005878 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d124      	bne.n	800582c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f8:	461a      	mov	r2, r3
 80057fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057fe:	6093      	str	r3, [r2, #8]
 8005800:	e032      	b.n	8005868 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d008      	beq.n	800581e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005818:	461a      	mov	r2, r3
 800581a:	2320      	movs	r3, #32
 800581c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f005 ff07 	bl	800b638 <HAL_PCD_DataOutStageCallback>
 800582a:	e01d      	b.n	8005868 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d114      	bne.n	800585c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d108      	bne.n	800585c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005854:	461a      	mov	r2, r3
 8005856:	2100      	movs	r1, #0
 8005858:	f003 fc20 	bl	800909c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f005 fee8 	bl	800b638 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3720      	adds	r7, #32
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	4f54300a 	.word	0x4f54300a
 8005878:	4f54310a 	.word	0x4f54310a

0800587c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	333c      	adds	r3, #60	@ 0x3c
 8005894:	3304      	adds	r3, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4a15      	ldr	r2, [pc, #84]	@ (8005904 <PCD_EP_OutSetupPacket_int+0x88>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d90e      	bls.n	80058d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d009      	beq.n	80058d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c8:	461a      	mov	r2, r3
 80058ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f005 fe9f 	bl	800b614 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005904 <PCD_EP_OutSetupPacket_int+0x88>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d90c      	bls.n	80058f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	799b      	ldrb	r3, [r3, #6]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d108      	bne.n	80058f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058f0:	461a      	mov	r2, r3
 80058f2:	2101      	movs	r1, #1
 80058f4:	f003 fbd2 	bl	800909c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	4f54300a 	.word	0x4f54300a

08005908 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
 8005914:	4613      	mov	r3, r2
 8005916:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d107      	bne.n	8005936 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005926:	883b      	ldrh	r3, [r7, #0]
 8005928:	0419      	lsls	r1, r3, #16
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	430a      	orrs	r2, r1
 8005932:	629a      	str	r2, [r3, #40]	@ 0x28
 8005934:	e028      	b.n	8005988 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	0c1b      	lsrs	r3, r3, #16
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4413      	add	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]
 8005948:	e00d      	b.n	8005966 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	3340      	adds	r3, #64	@ 0x40
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	4413      	add	r3, r2
 800595e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	3301      	adds	r3, #1
 8005964:	73fb      	strb	r3, [r7, #15]
 8005966:	7bfa      	ldrb	r2, [r7, #15]
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	3b01      	subs	r3, #1
 800596c:	429a      	cmp	r2, r3
 800596e:	d3ec      	bcc.n	800594a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005970:	883b      	ldrh	r3, [r7, #0]
 8005972:	0418      	lsls	r0, r3, #16
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6819      	ldr	r1, [r3, #0]
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	3b01      	subs	r3, #1
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	4302      	orrs	r2, r0
 8005980:	3340      	adds	r3, #64	@ 0x40
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	887a      	ldrh	r2, [r7, #2]
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e267      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d075      	beq.n	8005ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059ee:	4b88      	ldr	r3, [pc, #544]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d00c      	beq.n	8005a14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059fa:	4b85      	ldr	r3, [pc, #532]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d112      	bne.n	8005a2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a06:	4b82      	ldr	r3, [pc, #520]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a12:	d10b      	bne.n	8005a2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a14:	4b7e      	ldr	r3, [pc, #504]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d05b      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x108>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d157      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e242      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a34:	d106      	bne.n	8005a44 <HAL_RCC_OscConfig+0x74>
 8005a36:	4b76      	ldr	r3, [pc, #472]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a75      	ldr	r2, [pc, #468]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	e01d      	b.n	8005a80 <HAL_RCC_OscConfig+0xb0>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a4c:	d10c      	bne.n	8005a68 <HAL_RCC_OscConfig+0x98>
 8005a4e:	4b70      	ldr	r3, [pc, #448]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a6f      	ldr	r2, [pc, #444]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a6c      	ldr	r2, [pc, #432]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	e00b      	b.n	8005a80 <HAL_RCC_OscConfig+0xb0>
 8005a68:	4b69      	ldr	r3, [pc, #420]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a68      	ldr	r2, [pc, #416]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	4b66      	ldr	r3, [pc, #408]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a65      	ldr	r2, [pc, #404]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d013      	beq.n	8005ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a88:	f7fd fe94 	bl	80037b4 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a90:	f7fd fe90 	bl	80037b4 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b64      	cmp	r3, #100	@ 0x64
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e207      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0f0      	beq.n	8005a90 <HAL_RCC_OscConfig+0xc0>
 8005aae:	e014      	b.n	8005ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab0:	f7fd fe80 	bl	80037b4 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab8:	f7fd fe7c 	bl	80037b4 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b64      	cmp	r3, #100	@ 0x64
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e1f3      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aca:	4b51      	ldr	r3, [pc, #324]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_OscConfig+0xe8>
 8005ad6:	e000      	b.n	8005ada <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d063      	beq.n	8005bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 030c 	and.w	r3, r3, #12
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af2:	4b47      	ldr	r3, [pc, #284]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d11c      	bne.n	8005b38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afe:	4b44      	ldr	r3, [pc, #272]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d116      	bne.n	8005b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0a:	4b41      	ldr	r3, [pc, #260]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <HAL_RCC_OscConfig+0x152>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e1c7      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b22:	4b3b      	ldr	r3, [pc, #236]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4937      	ldr	r1, [pc, #220]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b36:	e03a      	b.n	8005bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b40:	4b34      	ldr	r3, [pc, #208]	@ (8005c14 <HAL_RCC_OscConfig+0x244>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b46:	f7fd fe35 	bl	80037b4 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b4e:	f7fd fe31 	bl	80037b4 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e1a8      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b60:	4b2b      	ldr	r3, [pc, #172]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6c:	4b28      	ldr	r3, [pc, #160]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4925      	ldr	r1, [pc, #148]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]
 8005b80:	e015      	b.n	8005bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b82:	4b24      	ldr	r3, [pc, #144]	@ (8005c14 <HAL_RCC_OscConfig+0x244>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7fd fe14 	bl	80037b4 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b90:	f7fd fe10 	bl	80037b4 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e187      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d036      	beq.n	8005c28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bc2:	4b15      	ldr	r3, [pc, #84]	@ (8005c18 <HAL_RCC_OscConfig+0x248>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc8:	f7fd fdf4 	bl	80037b4 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd0:	f7fd fdf0 	bl	80037b4 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e167      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x200>
 8005bee:	e01b      	b.n	8005c28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf0:	4b09      	ldr	r3, [pc, #36]	@ (8005c18 <HAL_RCC_OscConfig+0x248>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf6:	f7fd fddd 	bl	80037b4 <HAL_GetTick>
 8005bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bfc:	e00e      	b.n	8005c1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bfe:	f7fd fdd9 	bl	80037b4 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d907      	bls.n	8005c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e150      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
 8005c10:	40023800 	.word	0x40023800
 8005c14:	42470000 	.word	0x42470000
 8005c18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c1c:	4b88      	ldr	r3, [pc, #544]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1ea      	bne.n	8005bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8097 	beq.w	8005d64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c3a:	4b81      	ldr	r3, [pc, #516]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10f      	bne.n	8005c66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c46:	2300      	movs	r3, #0
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	4b7d      	ldr	r3, [pc, #500]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4e:	4a7c      	ldr	r2, [pc, #496]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c56:	4b7a      	ldr	r3, [pc, #488]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c66:	4b77      	ldr	r3, [pc, #476]	@ (8005e44 <HAL_RCC_OscConfig+0x474>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d118      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c72:	4b74      	ldr	r3, [pc, #464]	@ (8005e44 <HAL_RCC_OscConfig+0x474>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a73      	ldr	r2, [pc, #460]	@ (8005e44 <HAL_RCC_OscConfig+0x474>)
 8005c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c7e:	f7fd fd99 	bl	80037b4 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c86:	f7fd fd95 	bl	80037b4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e10c      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c98:	4b6a      	ldr	r3, [pc, #424]	@ (8005e44 <HAL_RCC_OscConfig+0x474>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d106      	bne.n	8005cba <HAL_RCC_OscConfig+0x2ea>
 8005cac:	4b64      	ldr	r3, [pc, #400]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	4a63      	ldr	r2, [pc, #396]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb8:	e01c      	b.n	8005cf4 <HAL_RCC_OscConfig+0x324>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x30c>
 8005cc2:	4b5f      	ldr	r3, [pc, #380]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc6:	4a5e      	ldr	r2, [pc, #376]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	f043 0304 	orr.w	r3, r3, #4
 8005ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cce:	4b5c      	ldr	r3, [pc, #368]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCC_OscConfig+0x324>
 8005cdc:	4b58      	ldr	r3, [pc, #352]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce0:	4a57      	ldr	r2, [pc, #348]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce8:	4b55      	ldr	r3, [pc, #340]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cec:	4a54      	ldr	r2, [pc, #336]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005cee:	f023 0304 	bic.w	r3, r3, #4
 8005cf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d015      	beq.n	8005d28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7fd fd5a 	bl	80037b4 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d04:	f7fd fd56 	bl	80037b4 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e0cb      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1a:	4b49      	ldr	r3, [pc, #292]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0ee      	beq.n	8005d04 <HAL_RCC_OscConfig+0x334>
 8005d26:	e014      	b.n	8005d52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d28:	f7fd fd44 	bl	80037b4 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d2e:	e00a      	b.n	8005d46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d30:	f7fd fd40 	bl	80037b4 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e0b5      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d46:	4b3e      	ldr	r3, [pc, #248]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1ee      	bne.n	8005d30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d58:	4b39      	ldr	r3, [pc, #228]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5c:	4a38      	ldr	r2, [pc, #224]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80a1 	beq.w	8005eb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d6e:	4b34      	ldr	r3, [pc, #208]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d05c      	beq.n	8005e34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d141      	bne.n	8005e06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d82:	4b31      	ldr	r3, [pc, #196]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d88:	f7fd fd14 	bl	80037b4 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d90:	f7fd fd10 	bl	80037b4 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e087      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da2:	4b27      	ldr	r3, [pc, #156]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbc:	019b      	lsls	r3, r3, #6
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc4:	085b      	lsrs	r3, r3, #1
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	061b      	lsls	r3, r3, #24
 8005dd2:	491b      	ldr	r1, [pc, #108]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dde:	f7fd fce9 	bl	80037b4 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de6:	f7fd fce5 	bl	80037b4 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e05c      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df8:	4b11      	ldr	r3, [pc, #68]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCC_OscConfig+0x416>
 8005e04:	e054      	b.n	8005eb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e06:	4b10      	ldr	r3, [pc, #64]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0c:	f7fd fcd2 	bl	80037b4 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e14:	f7fd fcce 	bl	80037b4 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e045      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e26:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <HAL_RCC_OscConfig+0x470>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x444>
 8005e32:	e03d      	b.n	8005eb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d107      	bne.n	8005e4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e038      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
 8005e40:	40023800 	.word	0x40023800
 8005e44:	40007000 	.word	0x40007000
 8005e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ebc <HAL_RCC_OscConfig+0x4ec>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d028      	beq.n	8005eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d121      	bne.n	8005eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d11a      	bne.n	8005eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d111      	bne.n	8005eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	3b01      	subs	r3, #1
 8005e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d107      	bne.n	8005eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d001      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40023800 	.word	0x40023800

08005ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e0cc      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed4:	4b68      	ldr	r3, [pc, #416]	@ (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d90c      	bls.n	8005efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee2:	4b65      	ldr	r3, [pc, #404]	@ (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eea:	4b63      	ldr	r3, [pc, #396]	@ (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d001      	beq.n	8005efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0b8      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d020      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f14:	4b59      	ldr	r3, [pc, #356]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4a58      	ldr	r2, [pc, #352]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f2c:	4b53      	ldr	r3, [pc, #332]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4a52      	ldr	r2, [pc, #328]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f38:	4b50      	ldr	r3, [pc, #320]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	494d      	ldr	r1, [pc, #308]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d044      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d107      	bne.n	8005f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5e:	4b47      	ldr	r3, [pc, #284]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d119      	bne.n	8005f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e07f      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d003      	beq.n	8005f7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d107      	bne.n	8005f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e06f      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e067      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f9e:	4b37      	ldr	r3, [pc, #220]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f023 0203 	bic.w	r2, r3, #3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	4934      	ldr	r1, [pc, #208]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fb0:	f7fd fc00 	bl	80037b4 <HAL_GetTick>
 8005fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb6:	e00a      	b.n	8005fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb8:	f7fd fbfc 	bl	80037b4 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e04f      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fce:	4b2b      	ldr	r3, [pc, #172]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 020c 	and.w	r2, r3, #12
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d1eb      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe0:	4b25      	ldr	r3, [pc, #148]	@ (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d20c      	bcs.n	8006008 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fee:	4b22      	ldr	r3, [pc, #136]	@ (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff6:	4b20      	ldr	r3, [pc, #128]	@ (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d001      	beq.n	8006008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e032      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006014:	4b19      	ldr	r3, [pc, #100]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4916      	ldr	r1, [pc, #88]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	4313      	orrs	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006032:	4b12      	ldr	r3, [pc, #72]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	490e      	ldr	r1, [pc, #56]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	4313      	orrs	r3, r2
 8006044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006046:	f000 f821 	bl	800608c <HAL_RCC_GetSysClockFreq>
 800604a:	4602      	mov	r2, r0
 800604c:	4b0b      	ldr	r3, [pc, #44]	@ (800607c <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	091b      	lsrs	r3, r3, #4
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	490a      	ldr	r1, [pc, #40]	@ (8006080 <HAL_RCC_ClockConfig+0x1c0>)
 8006058:	5ccb      	ldrb	r3, [r1, r3]
 800605a:	fa22 f303 	lsr.w	r3, r2, r3
 800605e:	4a09      	ldr	r2, [pc, #36]	@ (8006084 <HAL_RCC_ClockConfig+0x1c4>)
 8006060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006062:	4b09      	ldr	r3, [pc, #36]	@ (8006088 <HAL_RCC_ClockConfig+0x1c8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd fb60 	bl	800372c <HAL_InitTick>

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40023c00 	.word	0x40023c00
 800607c:	40023800 	.word	0x40023800
 8006080:	08010ec8 	.word	0x08010ec8
 8006084:	2000002c 	.word	0x2000002c
 8006088:	20000030 	.word	0x20000030

0800608c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800608c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006090:	b094      	sub	sp, #80	@ 0x50
 8006092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060a4:	4b79      	ldr	r3, [pc, #484]	@ (800628c <HAL_RCC_GetSysClockFreq+0x200>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 030c 	and.w	r3, r3, #12
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d00d      	beq.n	80060cc <HAL_RCC_GetSysClockFreq+0x40>
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	f200 80e1 	bhi.w	8006278 <HAL_RCC_GetSysClockFreq+0x1ec>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_RCC_GetSysClockFreq+0x34>
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d003      	beq.n	80060c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80060be:	e0db      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060c0:	4b73      	ldr	r3, [pc, #460]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x204>)
 80060c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060c4:	e0db      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060c6:	4b72      	ldr	r3, [pc, #456]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x204>)
 80060c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060ca:	e0d8      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060cc:	4b6f      	ldr	r3, [pc, #444]	@ (800628c <HAL_RCC_GetSysClockFreq+0x200>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060d6:	4b6d      	ldr	r3, [pc, #436]	@ (800628c <HAL_RCC_GetSysClockFreq+0x200>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d063      	beq.n	80061aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060e2:	4b6a      	ldr	r3, [pc, #424]	@ (800628c <HAL_RCC_GetSysClockFreq+0x200>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	099b      	lsrs	r3, r3, #6
 80060e8:	2200      	movs	r2, #0
 80060ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80060ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060f6:	2300      	movs	r3, #0
 80060f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80060fe:	4622      	mov	r2, r4
 8006100:	462b      	mov	r3, r5
 8006102:	f04f 0000 	mov.w	r0, #0
 8006106:	f04f 0100 	mov.w	r1, #0
 800610a:	0159      	lsls	r1, r3, #5
 800610c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006110:	0150      	lsls	r0, r2, #5
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4621      	mov	r1, r4
 8006118:	1a51      	subs	r1, r2, r1
 800611a:	6139      	str	r1, [r7, #16]
 800611c:	4629      	mov	r1, r5
 800611e:	eb63 0301 	sbc.w	r3, r3, r1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	f04f 0300 	mov.w	r3, #0
 800612c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006130:	4659      	mov	r1, fp
 8006132:	018b      	lsls	r3, r1, #6
 8006134:	4651      	mov	r1, sl
 8006136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800613a:	4651      	mov	r1, sl
 800613c:	018a      	lsls	r2, r1, #6
 800613e:	4651      	mov	r1, sl
 8006140:	ebb2 0801 	subs.w	r8, r2, r1
 8006144:	4659      	mov	r1, fp
 8006146:	eb63 0901 	sbc.w	r9, r3, r1
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800615a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800615e:	4690      	mov	r8, r2
 8006160:	4699      	mov	r9, r3
 8006162:	4623      	mov	r3, r4
 8006164:	eb18 0303 	adds.w	r3, r8, r3
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	462b      	mov	r3, r5
 800616c:	eb49 0303 	adc.w	r3, r9, r3
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800617e:	4629      	mov	r1, r5
 8006180:	028b      	lsls	r3, r1, #10
 8006182:	4621      	mov	r1, r4
 8006184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006188:	4621      	mov	r1, r4
 800618a:	028a      	lsls	r2, r1, #10
 800618c:	4610      	mov	r0, r2
 800618e:	4619      	mov	r1, r3
 8006190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006192:	2200      	movs	r2, #0
 8006194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800619c:	f7fa fd54 	bl	8000c48 <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4613      	mov	r3, r2
 80061a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061a8:	e058      	b.n	800625c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061aa:	4b38      	ldr	r3, [pc, #224]	@ (800628c <HAL_RCC_GetSysClockFreq+0x200>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	099b      	lsrs	r3, r3, #6
 80061b0:	2200      	movs	r2, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	4611      	mov	r1, r2
 80061b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061ba:	623b      	str	r3, [r7, #32]
 80061bc:	2300      	movs	r3, #0
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	f04f 0000 	mov.w	r0, #0
 80061cc:	f04f 0100 	mov.w	r1, #0
 80061d0:	0159      	lsls	r1, r3, #5
 80061d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061d6:	0150      	lsls	r0, r2, #5
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4641      	mov	r1, r8
 80061de:	ebb2 0a01 	subs.w	sl, r2, r1
 80061e2:	4649      	mov	r1, r9
 80061e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061fc:	ebb2 040a 	subs.w	r4, r2, sl
 8006200:	eb63 050b 	sbc.w	r5, r3, fp
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	00eb      	lsls	r3, r5, #3
 800620e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006212:	00e2      	lsls	r2, r4, #3
 8006214:	4614      	mov	r4, r2
 8006216:	461d      	mov	r5, r3
 8006218:	4643      	mov	r3, r8
 800621a:	18e3      	adds	r3, r4, r3
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	464b      	mov	r3, r9
 8006220:	eb45 0303 	adc.w	r3, r5, r3
 8006224:	607b      	str	r3, [r7, #4]
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006232:	4629      	mov	r1, r5
 8006234:	028b      	lsls	r3, r1, #10
 8006236:	4621      	mov	r1, r4
 8006238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800623c:	4621      	mov	r1, r4
 800623e:	028a      	lsls	r2, r1, #10
 8006240:	4610      	mov	r0, r2
 8006242:	4619      	mov	r1, r3
 8006244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006246:	2200      	movs	r2, #0
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	61fa      	str	r2, [r7, #28]
 800624c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006250:	f7fa fcfa 	bl	8000c48 <__aeabi_uldivmod>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4613      	mov	r3, r2
 800625a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800625c:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <HAL_RCC_GetSysClockFreq+0x200>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	0c1b      	lsrs	r3, r3, #16
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	3301      	adds	r3, #1
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800626c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800626e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006276:	e002      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006278:	4b05      	ldr	r3, [pc, #20]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x204>)
 800627a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800627c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800627e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006280:	4618      	mov	r0, r3
 8006282:	3750      	adds	r7, #80	@ 0x50
 8006284:	46bd      	mov	sp, r7
 8006286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800628a:	bf00      	nop
 800628c:	40023800 	.word	0x40023800
 8006290:	00f42400 	.word	0x00f42400

08006294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006298:	4b03      	ldr	r3, [pc, #12]	@ (80062a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800629a:	681b      	ldr	r3, [r3, #0]
}
 800629c:	4618      	mov	r0, r3
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	2000002c 	.word	0x2000002c

080062ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e07b      	b.n	80063b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d108      	bne.n	80062d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ce:	d009      	beq.n	80062e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	61da      	str	r2, [r3, #28]
 80062d6:	e005      	b.n	80062e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fc ff7c 	bl	80031fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800631a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006368:	ea42 0103 	orr.w	r1, r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006370:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	0c1b      	lsrs	r3, r3, #16
 8006382:	f003 0104 	and.w	r1, r3, #4
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638a:	f003 0210 	and.w	r2, r3, #16
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b088      	sub	sp, #32
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063ce:	f7fd f9f1 	bl	80037b4 <HAL_GetTick>
 80063d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d001      	beq.n	80063e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
 80063e6:	e12a      	b.n	800663e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_SPI_Transmit+0x36>
 80063ee:	88fb      	ldrh	r3, [r7, #6]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e122      	b.n	800663e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_SPI_Transmit+0x48>
 8006402:	2302      	movs	r3, #2
 8006404:	e11b      	b.n	800663e <HAL_SPI_Transmit+0x280>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2203      	movs	r2, #3
 8006412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	88fa      	ldrh	r2, [r7, #6]
 8006426:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006454:	d10f      	bne.n	8006476 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006464:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006474:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006480:	2b40      	cmp	r3, #64	@ 0x40
 8006482:	d007      	beq.n	8006494 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800649c:	d152      	bne.n	8006544 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_SPI_Transmit+0xee>
 80064a6:	8b7b      	ldrh	r3, [r7, #26]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d145      	bne.n	8006538 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b0:	881a      	ldrh	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064bc:	1c9a      	adds	r2, r3, #2
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064d0:	e032      	b.n	8006538 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d112      	bne.n	8006506 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e4:	881a      	ldrh	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006504:	e018      	b.n	8006538 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006506:	f7fd f955 	bl	80037b4 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d803      	bhi.n	800651e <HAL_SPI_Transmit+0x160>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d102      	bne.n	8006524 <HAL_SPI_Transmit+0x166>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e082      	b.n	800663e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800653c:	b29b      	uxth	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1c7      	bne.n	80064d2 <HAL_SPI_Transmit+0x114>
 8006542:	e053      	b.n	80065ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_SPI_Transmit+0x194>
 800654c:	8b7b      	ldrh	r3, [r7, #26]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d147      	bne.n	80065e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	7812      	ldrb	r2, [r2, #0]
 800655e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006578:	e033      	b.n	80065e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b02      	cmp	r3, #2
 8006586:	d113      	bne.n	80065b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	330c      	adds	r3, #12
 8006592:	7812      	ldrb	r2, [r2, #0]
 8006594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80065ae:	e018      	b.n	80065e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b0:	f7fd f900 	bl	80037b4 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d803      	bhi.n	80065c8 <HAL_SPI_Transmit+0x20a>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d102      	bne.n	80065ce <HAL_SPI_Transmit+0x210>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d109      	bne.n	80065e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e02d      	b.n	800663e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1c6      	bne.n	800657a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fdd1 	bl	8007198 <SPI_EndRxTxTransaction>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800663c:	2300      	movs	r3, #0
  }
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b08a      	sub	sp, #40	@ 0x28
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006654:	2301      	movs	r3, #1
 8006656:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006658:	f7fd f8ac 	bl	80037b4 <HAL_GetTick>
 800665c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006664:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800666c:	887b      	ldrh	r3, [r7, #2]
 800666e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006670:	7ffb      	ldrb	r3, [r7, #31]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d00c      	beq.n	8006690 <HAL_SPI_TransmitReceive+0x4a>
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800667c:	d106      	bne.n	800668c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <HAL_SPI_TransmitReceive+0x46>
 8006686:	7ffb      	ldrb	r3, [r7, #31]
 8006688:	2b04      	cmp	r3, #4
 800668a:	d001      	beq.n	8006690 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800668c:	2302      	movs	r3, #2
 800668e:	e17f      	b.n	8006990 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <HAL_SPI_TransmitReceive+0x5c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <HAL_SPI_TransmitReceive+0x5c>
 800669c:	887b      	ldrh	r3, [r7, #2]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e174      	b.n	8006990 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x6e>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e16d      	b.n	8006990 <HAL_SPI_TransmitReceive+0x34a>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d003      	beq.n	80066d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2205      	movs	r2, #5
 80066cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	887a      	ldrh	r2, [r7, #2]
 80066e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	887a      	ldrh	r2, [r7, #2]
 80066e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	887a      	ldrh	r2, [r7, #2]
 80066f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	887a      	ldrh	r2, [r7, #2]
 80066f8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006710:	2b40      	cmp	r3, #64	@ 0x40
 8006712:	d007      	beq.n	8006724 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006722:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800672c:	d17e      	bne.n	800682c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_SPI_TransmitReceive+0xf6>
 8006736:	8afb      	ldrh	r3, [r7, #22]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d16c      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006740:	881a      	ldrh	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	1c9a      	adds	r2, r3, #2
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006760:	e059      	b.n	8006816 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b02      	cmp	r3, #2
 800676e:	d11b      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x162>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d016      	beq.n	80067a8 <HAL_SPI_TransmitReceive+0x162>
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	2b01      	cmp	r3, #1
 800677e:	d113      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006790:	1c9a      	adds	r2, r3, #2
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d119      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x1a4>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d014      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ca:	b292      	uxth	r2, r2
 80067cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d2:	1c9a      	adds	r2, r3, #2
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067dc:	b29b      	uxth	r3, r3
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067e6:	2301      	movs	r3, #1
 80067e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067ea:	f7fc ffe3 	bl	80037b4 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d80d      	bhi.n	8006816 <HAL_SPI_TransmitReceive+0x1d0>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d009      	beq.n	8006816 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e0bc      	b.n	8006990 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1a0      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x11c>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d19b      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x11c>
 800682a:	e082      	b.n	8006932 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <HAL_SPI_TransmitReceive+0x1f4>
 8006834:	8afb      	ldrh	r3, [r7, #22]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d171      	bne.n	800691e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	7812      	ldrb	r2, [r2, #0]
 8006846:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006860:	e05d      	b.n	800691e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b02      	cmp	r3, #2
 800686e:	d11c      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x264>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d017      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x264>
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	2b01      	cmp	r3, #1
 800687e:	d114      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	7812      	ldrb	r2, [r2, #0]
 800688c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d119      	bne.n	80068ec <HAL_SPI_TransmitReceive+0x2a6>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d014      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068e8:	2301      	movs	r3, #1
 80068ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068ec:	f7fc ff62 	bl	80037b4 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d803      	bhi.n	8006904 <HAL_SPI_TransmitReceive+0x2be>
 80068fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d102      	bne.n	800690a <HAL_SPI_TransmitReceive+0x2c4>
 8006904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e038      	b.n	8006990 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d19c      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x21c>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d197      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006932:	6a3a      	ldr	r2, [r7, #32]
 8006934:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fc2e 	bl	8007198 <SPI_EndRxTxTransaction>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e01d      	b.n	8006990 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800698e:	2300      	movs	r3, #0
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3728      	adds	r7, #40	@ 0x28
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069ac:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d00c      	beq.n	80069d4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069c0:	d106      	bne.n	80069d0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <HAL_SPI_TransmitReceive_DMA+0x38>
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d001      	beq.n	80069d4 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80069d0:	2302      	movs	r3, #2
 80069d2:	e0cf      	b.n	8006b74 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d005      	beq.n	80069e6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80069e0:	887b      	ldrh	r3, [r7, #2]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e0c4      	b.n	8006b74 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_SPI_TransmitReceive_DMA+0x60>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e0bd      	b.n	8006b74 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d003      	beq.n	8006a14 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2205      	movs	r2, #5
 8006a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	887a      	ldrh	r2, [r7, #2]
 8006a24:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	887a      	ldrh	r2, [r7, #2]
 8006a2a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	887a      	ldrh	r2, [r7, #2]
 8006a36:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	887a      	ldrh	r2, [r7, #2]
 8006a3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d108      	bne.n	8006a68 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a5a:	4a48      	ldr	r2, [pc, #288]	@ (8006b7c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006a5c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a62:	4a47      	ldr	r2, [pc, #284]	@ (8006b80 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006a64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006a66:	e007      	b.n	8006a78 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a6c:	4a45      	ldr	r2, [pc, #276]	@ (8006b84 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006a6e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a74:	4a44      	ldr	r2, [pc, #272]	@ (8006b88 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006a76:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a7c:	4a43      	ldr	r2, [pc, #268]	@ (8006b8c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006a7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a84:	2200      	movs	r2, #0
 8006a86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	4619      	mov	r1, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a98:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a9e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006aa0:	f7fd f878 	bl	8003b94 <HAL_DMA_Start_IT>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aae:	f043 0210 	orr.w	r2, r3, #16
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e058      	b.n	8006b74 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0201 	orr.w	r2, r2, #1
 8006ad0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ade:	2200      	movs	r2, #0
 8006ae0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aee:	2200      	movs	r2, #0
 8006af0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afa:	4619      	mov	r1, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b08:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006b0a:	f7fd f843 	bl	8003b94 <HAL_DMA_Start_IT>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b18:	f043 0210 	orr.w	r2, r3, #16
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e023      	b.n	8006b74 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b36:	2b40      	cmp	r3, #64	@ 0x40
 8006b38:	d007      	beq.n	8006b4a <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b48:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0220 	orr.w	r2, r2, #32
 8006b60:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0202 	orr.w	r2, r2, #2
 8006b70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	08006f1d 	.word	0x08006f1d
 8006b80:	08006de5 	.word	0x08006de5
 8006b84:	08006f39 	.word	0x08006f39
 8006b88:	08006e8d 	.word	0x08006e8d
 8006b8c:	08006f55 	.word	0x08006f55

08006b90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10e      	bne.n	8006bd0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d004      	beq.n	8006bd0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
    return;
 8006bce:	e0ce      	b.n	8006d6e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <HAL_SPI_IRQHandler+0x5e>
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	4798      	blx	r3
    return;
 8006bec:	e0bf      	b.n	8006d6e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <HAL_SPI_IRQHandler+0x7e>
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d105      	bne.n	8006c0e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80b0 	beq.w	8006d6e <HAL_SPI_IRQHandler+0x1de>
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80aa 	beq.w	8006d6e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d023      	beq.n	8006c6c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d011      	beq.n	8006c54 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c34:	f043 0204 	orr.w	r2, r3, #4
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	e00b      	b.n	8006c6c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c54:	2300      	movs	r3, #0
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	613b      	str	r3, [r7, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	693b      	ldr	r3, [r7, #16]
        return;
 8006c6a:	e080      	b.n	8006d6e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d014      	beq.n	8006ca0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7a:	f043 0201 	orr.w	r2, r3, #1
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00c      	beq.n	8006cc4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cae:	f043 0208 	orr.w	r2, r3, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	60bb      	str	r3, [r7, #8]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d04f      	beq.n	8006d6c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cda:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <HAL_SPI_IRQHandler+0x168>
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d034      	beq.n	8006d62 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0203 	bic.w	r2, r2, #3
 8006d06:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d011      	beq.n	8006d34 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d14:	4a17      	ldr	r2, [pc, #92]	@ (8006d74 <HAL_SPI_IRQHandler+0x1e4>)
 8006d16:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fc ff91 	bl	8003c44 <HAL_DMA_Abort_IT>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d016      	beq.n	8006d6a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d40:	4a0c      	ldr	r2, [pc, #48]	@ (8006d74 <HAL_SPI_IRQHandler+0x1e4>)
 8006d42:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fc ff7b 	bl	8003c44 <HAL_DMA_Abort_IT>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006d60:	e003      	b.n	8006d6a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f826 	bl	8006db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d68:	e000      	b.n	8006d6c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006d6a:	bf00      	nop
    return;
 8006d6c:	bf00      	nop
  }
}
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	08006f95 	.word	0x08006f95

08006d78 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006dd6:	b2db      	uxtb	r3, r3
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006df2:	f7fc fcdf 	bl	80037b4 <HAL_GetTick>
 8006df6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e06:	d03b      	beq.n	8006e80 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0220 	bic.w	r2, r2, #32
 8006e16:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10d      	bne.n	8006e3c <SPI_DMAReceiveCplt+0x58>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e28:	d108      	bne.n	8006e3c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0203 	bic.w	r2, r2, #3
 8006e38:	605a      	str	r2, [r3, #4]
 8006e3a:	e007      	b.n	8006e4c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0201 	bic.w	r2, r2, #1
 8006e4a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	2164      	movs	r1, #100	@ 0x64
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f93b 	bl	80070cc <SPI_EndRxTransaction>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7ff ff9b 	bl	8006db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006e7e:	e002      	b.n	8006e86 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff ff79 	bl	8006d78 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e98:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e9a:	f7fc fc8b 	bl	80037b4 <HAL_GetTick>
 8006e9e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eae:	d02f      	beq.n	8006f10 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0220 	bic.w	r2, r2, #32
 8006ebe:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	2164      	movs	r1, #100	@ 0x64
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f967 	bl	8007198 <SPI_EndRxTxTransaction>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ed4:	f043 0220 	orr.w	r2, r3, #32
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0203 	bic.w	r2, r2, #3
 8006eea:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff ff53 	bl	8006db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006f0e:	e002      	b.n	8006f16 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7fb fcb9 	bl	8002888 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff ff2e 	bl	8006d8c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f30:	bf00      	nop
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f7ff ff2a 	bl	8006da0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0203 	bic.w	r2, r2, #3
 8006f70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f76:	f043 0210 	orr.w	r2, r3, #16
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff ff14 	bl	8006db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f7ff ff00 	bl	8006db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006fb4:	bf00      	nop
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fcc:	f7fc fbf2 	bl	80037b4 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd4:	1a9b      	subs	r3, r3, r2
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	4413      	add	r3, r2
 8006fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fdc:	f7fc fbea 	bl	80037b4 <HAL_GetTick>
 8006fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fe2:	4b39      	ldr	r3, [pc, #228]	@ (80070c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	015b      	lsls	r3, r3, #5
 8006fe8:	0d1b      	lsrs	r3, r3, #20
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	fb02 f303 	mul.w	r3, r2, r3
 8006ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff2:	e054      	b.n	800709e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffa:	d050      	beq.n	800709e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ffc:	f7fc fbda 	bl	80037b4 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	429a      	cmp	r2, r3
 800700a:	d902      	bls.n	8007012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d13d      	bne.n	800708e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800702a:	d111      	bne.n	8007050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007034:	d004      	beq.n	8007040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800703e:	d107      	bne.n	8007050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800704e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007058:	d10f      	bne.n	800707a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e017      	b.n	80070be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	3b01      	subs	r3, #1
 800709c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4013      	ands	r3, r2
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	bf0c      	ite	eq
 80070ae:	2301      	moveq	r3, #1
 80070b0:	2300      	movne	r3, #0
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d19b      	bne.n	8006ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3720      	adds	r7, #32
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	2000002c 	.word	0x2000002c

080070cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e0:	d111      	bne.n	8007106 <SPI_EndRxTransaction+0x3a>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ea:	d004      	beq.n	80070f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f4:	d107      	bne.n	8007106 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007104:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800710e:	d12a      	bne.n	8007166 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007118:	d012      	beq.n	8007140 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2200      	movs	r2, #0
 8007122:	2180      	movs	r1, #128	@ 0x80
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f7ff ff49 	bl	8006fbc <SPI_WaitFlagStateUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d02d      	beq.n	800718c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007134:	f043 0220 	orr.w	r2, r3, #32
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e026      	b.n	800718e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	2101      	movs	r1, #1
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff ff36 	bl	8006fbc <SPI_WaitFlagStateUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01a      	beq.n	800718c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715a:	f043 0220 	orr.w	r2, r3, #32
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e013      	b.n	800718e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2200      	movs	r2, #0
 800716e:	2101      	movs	r1, #1
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f7ff ff23 	bl	8006fbc <SPI_WaitFlagStateUntilTimeout>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007180:	f043 0220 	orr.w	r2, r3, #32
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e000      	b.n	800718e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2201      	movs	r2, #1
 80071ac:	2102      	movs	r1, #2
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff ff04 	bl	8006fbc <SPI_WaitFlagStateUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071be:	f043 0220 	orr.w	r2, r3, #32
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e032      	b.n	8007230 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <SPI_EndRxTxTransaction+0xa0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1b      	ldr	r2, [pc, #108]	@ (800723c <SPI_EndRxTxTransaction+0xa4>)
 80071d0:	fba2 2303 	umull	r2, r3, r2, r3
 80071d4:	0d5b      	lsrs	r3, r3, #21
 80071d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071e8:	d112      	bne.n	8007210 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2200      	movs	r2, #0
 80071f2:	2180      	movs	r1, #128	@ 0x80
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f7ff fee1 	bl	8006fbc <SPI_WaitFlagStateUntilTimeout>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d016      	beq.n	800722e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007204:	f043 0220 	orr.w	r2, r3, #32
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e00f      	b.n	8007230 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	3b01      	subs	r3, #1
 800721a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007226:	2b80      	cmp	r3, #128	@ 0x80
 8007228:	d0f2      	beq.n	8007210 <SPI_EndRxTxTransaction+0x78>
 800722a:	e000      	b.n	800722e <SPI_EndRxTxTransaction+0x96>
        break;
 800722c:	bf00      	nop
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	2000002c 	.word	0x2000002c
 800723c:	165e9f81 	.word	0x165e9f81

08007240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e041      	b.n	80072d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fc f87e 	bl	8003368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3304      	adds	r3, #4
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f000 fa7e 	bl	8007780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d001      	beq.n	80072f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e04e      	b.n	8007396 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a23      	ldr	r2, [pc, #140]	@ (80073a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d022      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x80>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007322:	d01d      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x80>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1f      	ldr	r2, [pc, #124]	@ (80073a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d018      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x80>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a1e      	ldr	r2, [pc, #120]	@ (80073ac <HAL_TIM_Base_Start_IT+0xcc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d013      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x80>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1c      	ldr	r2, [pc, #112]	@ (80073b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00e      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x80>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1b      	ldr	r2, [pc, #108]	@ (80073b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d009      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x80>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a19      	ldr	r2, [pc, #100]	@ (80073b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d004      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x80>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a18      	ldr	r2, [pc, #96]	@ (80073bc <HAL_TIM_Base_Start_IT+0xdc>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d111      	bne.n	8007384 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b06      	cmp	r3, #6
 8007370:	d010      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f042 0201 	orr.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007382:	e007      	b.n	8007394 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0201 	orr.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40010000 	.word	0x40010000
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40000800 	.word	0x40000800
 80073b0:	40000c00 	.word	0x40000c00
 80073b4:	40010400 	.word	0x40010400
 80073b8:	40014000 	.word	0x40014000
 80073bc:	40001800 	.word	0x40001800

080073c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d020      	beq.n	8007424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01b      	beq.n	8007424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0202 	mvn.w	r2, #2
 80073f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f999 	bl	8007742 <HAL_TIM_IC_CaptureCallback>
 8007410:	e005      	b.n	800741e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f98b 	bl	800772e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f99c 	bl	8007756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d020      	beq.n	8007470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01b      	beq.n	8007470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0204 	mvn.w	r2, #4
 8007440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f973 	bl	8007742 <HAL_TIM_IC_CaptureCallback>
 800745c:	e005      	b.n	800746a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f965 	bl	800772e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f976 	bl	8007756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d020      	beq.n	80074bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01b      	beq.n	80074bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f06f 0208 	mvn.w	r2, #8
 800748c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2204      	movs	r2, #4
 8007492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f94d 	bl	8007742 <HAL_TIM_IC_CaptureCallback>
 80074a8:	e005      	b.n	80074b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f93f 	bl	800772e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f950 	bl	8007756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d020      	beq.n	8007508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f003 0310 	and.w	r3, r3, #16
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01b      	beq.n	8007508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f06f 0210 	mvn.w	r2, #16
 80074d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2208      	movs	r2, #8
 80074de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f927 	bl	8007742 <HAL_TIM_IC_CaptureCallback>
 80074f4:	e005      	b.n	8007502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f919 	bl	800772e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f92a 	bl	8007756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00c      	beq.n	800752c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f06f 0201 	mvn.w	r2, #1
 8007524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7fb f9ce 	bl	80028c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00c      	beq.n	8007550 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fae4 	bl	8007b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00c      	beq.n	8007574 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d007      	beq.n	8007574 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800756c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f8fb 	bl	800776a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f003 0320 	and.w	r3, r3, #32
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0220 	mvn.w	r2, #32
 8007590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fab6 	bl	8007b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_TIM_ConfigClockSource+0x1c>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e0b4      	b.n	8007726 <HAL_TIM_ConfigClockSource+0x186>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80075da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f4:	d03e      	beq.n	8007674 <HAL_TIM_ConfigClockSource+0xd4>
 80075f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075fa:	f200 8087 	bhi.w	800770c <HAL_TIM_ConfigClockSource+0x16c>
 80075fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007602:	f000 8086 	beq.w	8007712 <HAL_TIM_ConfigClockSource+0x172>
 8007606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800760a:	d87f      	bhi.n	800770c <HAL_TIM_ConfigClockSource+0x16c>
 800760c:	2b70      	cmp	r3, #112	@ 0x70
 800760e:	d01a      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0xa6>
 8007610:	2b70      	cmp	r3, #112	@ 0x70
 8007612:	d87b      	bhi.n	800770c <HAL_TIM_ConfigClockSource+0x16c>
 8007614:	2b60      	cmp	r3, #96	@ 0x60
 8007616:	d050      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x11a>
 8007618:	2b60      	cmp	r3, #96	@ 0x60
 800761a:	d877      	bhi.n	800770c <HAL_TIM_ConfigClockSource+0x16c>
 800761c:	2b50      	cmp	r3, #80	@ 0x50
 800761e:	d03c      	beq.n	800769a <HAL_TIM_ConfigClockSource+0xfa>
 8007620:	2b50      	cmp	r3, #80	@ 0x50
 8007622:	d873      	bhi.n	800770c <HAL_TIM_ConfigClockSource+0x16c>
 8007624:	2b40      	cmp	r3, #64	@ 0x40
 8007626:	d058      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x13a>
 8007628:	2b40      	cmp	r3, #64	@ 0x40
 800762a:	d86f      	bhi.n	800770c <HAL_TIM_ConfigClockSource+0x16c>
 800762c:	2b30      	cmp	r3, #48	@ 0x30
 800762e:	d064      	beq.n	80076fa <HAL_TIM_ConfigClockSource+0x15a>
 8007630:	2b30      	cmp	r3, #48	@ 0x30
 8007632:	d86b      	bhi.n	800770c <HAL_TIM_ConfigClockSource+0x16c>
 8007634:	2b20      	cmp	r3, #32
 8007636:	d060      	beq.n	80076fa <HAL_TIM_ConfigClockSource+0x15a>
 8007638:	2b20      	cmp	r3, #32
 800763a:	d867      	bhi.n	800770c <HAL_TIM_ConfigClockSource+0x16c>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d05c      	beq.n	80076fa <HAL_TIM_ConfigClockSource+0x15a>
 8007640:	2b10      	cmp	r3, #16
 8007642:	d05a      	beq.n	80076fa <HAL_TIM_ConfigClockSource+0x15a>
 8007644:	e062      	b.n	800770c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007656:	f000 f9b9 	bl	80079cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007668:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	609a      	str	r2, [r3, #8]
      break;
 8007672:	e04f      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007684:	f000 f9a2 	bl	80079cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007696:	609a      	str	r2, [r3, #8]
      break;
 8007698:	e03c      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a6:	461a      	mov	r2, r3
 80076a8:	f000 f916 	bl	80078d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2150      	movs	r1, #80	@ 0x50
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f96f 	bl	8007996 <TIM_ITRx_SetConfig>
      break;
 80076b8:	e02c      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076c6:	461a      	mov	r2, r3
 80076c8:	f000 f935 	bl	8007936 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2160      	movs	r1, #96	@ 0x60
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f95f 	bl	8007996 <TIM_ITRx_SetConfig>
      break;
 80076d8:	e01c      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e6:	461a      	mov	r2, r3
 80076e8:	f000 f8f6 	bl	80078d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2140      	movs	r1, #64	@ 0x40
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f94f 	bl	8007996 <TIM_ITRx_SetConfig>
      break;
 80076f8:	e00c      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	4610      	mov	r0, r2
 8007706:	f000 f946 	bl	8007996 <TIM_ITRx_SetConfig>
      break;
 800770a:	e003      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
      break;
 8007710:	e000      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a46      	ldr	r2, [pc, #280]	@ (80078ac <TIM_Base_SetConfig+0x12c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d013      	beq.n	80077c0 <TIM_Base_SetConfig+0x40>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779e:	d00f      	beq.n	80077c0 <TIM_Base_SetConfig+0x40>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a43      	ldr	r2, [pc, #268]	@ (80078b0 <TIM_Base_SetConfig+0x130>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00b      	beq.n	80077c0 <TIM_Base_SetConfig+0x40>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a42      	ldr	r2, [pc, #264]	@ (80078b4 <TIM_Base_SetConfig+0x134>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d007      	beq.n	80077c0 <TIM_Base_SetConfig+0x40>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a41      	ldr	r2, [pc, #260]	@ (80078b8 <TIM_Base_SetConfig+0x138>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_Base_SetConfig+0x40>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a40      	ldr	r2, [pc, #256]	@ (80078bc <TIM_Base_SetConfig+0x13c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d108      	bne.n	80077d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a35      	ldr	r2, [pc, #212]	@ (80078ac <TIM_Base_SetConfig+0x12c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d02b      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077e0:	d027      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a32      	ldr	r2, [pc, #200]	@ (80078b0 <TIM_Base_SetConfig+0x130>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d023      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a31      	ldr	r2, [pc, #196]	@ (80078b4 <TIM_Base_SetConfig+0x134>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d01f      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a30      	ldr	r2, [pc, #192]	@ (80078b8 <TIM_Base_SetConfig+0x138>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d01b      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a2f      	ldr	r2, [pc, #188]	@ (80078bc <TIM_Base_SetConfig+0x13c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d017      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a2e      	ldr	r2, [pc, #184]	@ (80078c0 <TIM_Base_SetConfig+0x140>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d013      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a2d      	ldr	r2, [pc, #180]	@ (80078c4 <TIM_Base_SetConfig+0x144>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00f      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a2c      	ldr	r2, [pc, #176]	@ (80078c8 <TIM_Base_SetConfig+0x148>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00b      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a2b      	ldr	r2, [pc, #172]	@ (80078cc <TIM_Base_SetConfig+0x14c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d007      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a2a      	ldr	r2, [pc, #168]	@ (80078d0 <TIM_Base_SetConfig+0x150>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d003      	beq.n	8007832 <TIM_Base_SetConfig+0xb2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a29      	ldr	r2, [pc, #164]	@ (80078d4 <TIM_Base_SetConfig+0x154>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d108      	bne.n	8007844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	4313      	orrs	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a10      	ldr	r2, [pc, #64]	@ (80078ac <TIM_Base_SetConfig+0x12c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d003      	beq.n	8007878 <TIM_Base_SetConfig+0xf8>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a12      	ldr	r2, [pc, #72]	@ (80078bc <TIM_Base_SetConfig+0x13c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d103      	bne.n	8007880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	691a      	ldr	r2, [r3, #16]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b01      	cmp	r3, #1
 8007890:	d105      	bne.n	800789e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f023 0201 	bic.w	r2, r3, #1
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	611a      	str	r2, [r3, #16]
  }
}
 800789e:	bf00      	nop
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	40010000 	.word	0x40010000
 80078b0:	40000400 	.word	0x40000400
 80078b4:	40000800 	.word	0x40000800
 80078b8:	40000c00 	.word	0x40000c00
 80078bc:	40010400 	.word	0x40010400
 80078c0:	40014000 	.word	0x40014000
 80078c4:	40014400 	.word	0x40014400
 80078c8:	40014800 	.word	0x40014800
 80078cc:	40001800 	.word	0x40001800
 80078d0:	40001c00 	.word	0x40001c00
 80078d4:	40002000 	.word	0x40002000

080078d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	f023 0201 	bic.w	r2, r3, #1
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f023 030a 	bic.w	r3, r3, #10
 8007914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4313      	orrs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	621a      	str	r2, [r3, #32]
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007936:	b480      	push	{r7}
 8007938:	b087      	sub	sp, #28
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	f023 0210 	bic.w	r2, r3, #16
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	031b      	lsls	r3, r3, #12
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007972:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	4313      	orrs	r3, r2
 800797c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	621a      	str	r2, [r3, #32]
}
 800798a:	bf00      	nop
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f043 0307 	orr.w	r3, r3, #7
 80079b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	609a      	str	r2, [r3, #8]
}
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	021a      	lsls	r2, r3, #8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	431a      	orrs	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	609a      	str	r2, [r3, #8]
}
 8007a00:	bf00      	nop
 8007a02:	371c      	adds	r7, #28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e05a      	b.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a21      	ldr	r2, [pc, #132]	@ (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d022      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a70:	d01d      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a1d      	ldr	r2, [pc, #116]	@ (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d018      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a1b      	ldr	r2, [pc, #108]	@ (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d013      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00e      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a18      	ldr	r2, [pc, #96]	@ (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d009      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a17      	ldr	r2, [pc, #92]	@ (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d004      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a15      	ldr	r2, [pc, #84]	@ (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d10c      	bne.n	8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	40010000 	.word	0x40010000
 8007aec:	40000400 	.word	0x40000400
 8007af0:	40000800 	.word	0x40000800
 8007af4:	40000c00 	.word	0x40000c00
 8007af8:	40010400 	.word	0x40010400
 8007afc:	40014000 	.word	0x40014000
 8007b00:	40001800 	.word	0x40001800

08007b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	f107 001c 	add.w	r0, r7, #28
 8007b3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d123      	bne.n	8007b8e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d105      	bne.n	8007b82 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fae8 	bl	8009158 <USB_CoreReset>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]
 8007b8c:	e01b      	b.n	8007bc6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 fadc 	bl	8009158 <USB_CoreReset>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ba4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d106      	bne.n	8007bba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8007bb8:	e005      	b.n	8007bc6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bc6:	7fbb      	ldrb	r3, [r7, #30]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d10b      	bne.n	8007be4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f043 0206 	orr.w	r2, r3, #6
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f043 0220 	orr.w	r2, r3, #32
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bf0:	b004      	add	sp, #16
 8007bf2:	4770      	bx	lr

08007bf4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d165      	bne.n	8007cd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4a41      	ldr	r2, [pc, #260]	@ (8007d10 <USB_SetTurnaroundTime+0x11c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d906      	bls.n	8007c1e <USB_SetTurnaroundTime+0x2a>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4a40      	ldr	r2, [pc, #256]	@ (8007d14 <USB_SetTurnaroundTime+0x120>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d202      	bcs.n	8007c1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c18:	230f      	movs	r3, #15
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	e062      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	4a3c      	ldr	r2, [pc, #240]	@ (8007d14 <USB_SetTurnaroundTime+0x120>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d306      	bcc.n	8007c34 <USB_SetTurnaroundTime+0x40>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4a3b      	ldr	r2, [pc, #236]	@ (8007d18 <USB_SetTurnaroundTime+0x124>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d202      	bcs.n	8007c34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c2e:	230e      	movs	r3, #14
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	e057      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	4a38      	ldr	r2, [pc, #224]	@ (8007d18 <USB_SetTurnaroundTime+0x124>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d306      	bcc.n	8007c4a <USB_SetTurnaroundTime+0x56>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4a37      	ldr	r2, [pc, #220]	@ (8007d1c <USB_SetTurnaroundTime+0x128>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d202      	bcs.n	8007c4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c44:	230d      	movs	r3, #13
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	e04c      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	4a33      	ldr	r2, [pc, #204]	@ (8007d1c <USB_SetTurnaroundTime+0x128>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d306      	bcc.n	8007c60 <USB_SetTurnaroundTime+0x6c>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4a32      	ldr	r2, [pc, #200]	@ (8007d20 <USB_SetTurnaroundTime+0x12c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d802      	bhi.n	8007c60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c5a:	230c      	movs	r3, #12
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	e041      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4a2f      	ldr	r2, [pc, #188]	@ (8007d20 <USB_SetTurnaroundTime+0x12c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d906      	bls.n	8007c76 <USB_SetTurnaroundTime+0x82>
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8007d24 <USB_SetTurnaroundTime+0x130>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d802      	bhi.n	8007c76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c70:	230b      	movs	r3, #11
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	e036      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	4a2a      	ldr	r2, [pc, #168]	@ (8007d24 <USB_SetTurnaroundTime+0x130>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d906      	bls.n	8007c8c <USB_SetTurnaroundTime+0x98>
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	4a29      	ldr	r2, [pc, #164]	@ (8007d28 <USB_SetTurnaroundTime+0x134>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d802      	bhi.n	8007c8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c86:	230a      	movs	r3, #10
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	e02b      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4a26      	ldr	r2, [pc, #152]	@ (8007d28 <USB_SetTurnaroundTime+0x134>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d906      	bls.n	8007ca2 <USB_SetTurnaroundTime+0xae>
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4a25      	ldr	r2, [pc, #148]	@ (8007d2c <USB_SetTurnaroundTime+0x138>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d202      	bcs.n	8007ca2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c9c:	2309      	movs	r3, #9
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	e020      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	4a21      	ldr	r2, [pc, #132]	@ (8007d2c <USB_SetTurnaroundTime+0x138>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d306      	bcc.n	8007cb8 <USB_SetTurnaroundTime+0xc4>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	4a20      	ldr	r2, [pc, #128]	@ (8007d30 <USB_SetTurnaroundTime+0x13c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d802      	bhi.n	8007cb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	e015      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4a1d      	ldr	r2, [pc, #116]	@ (8007d30 <USB_SetTurnaroundTime+0x13c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d906      	bls.n	8007cce <USB_SetTurnaroundTime+0xda>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8007d34 <USB_SetTurnaroundTime+0x140>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d202      	bcs.n	8007cce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007cc8:	2307      	movs	r3, #7
 8007cca:	617b      	str	r3, [r7, #20]
 8007ccc:	e00a      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cce:	2306      	movs	r3, #6
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	e007      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d102      	bne.n	8007ce0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007cda:	2309      	movs	r3, #9
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	e001      	b.n	8007ce4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007ce0:	2309      	movs	r3, #9
 8007ce2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	029b      	lsls	r3, r3, #10
 8007cf8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	00d8acbf 	.word	0x00d8acbf
 8007d14:	00e4e1c0 	.word	0x00e4e1c0
 8007d18:	00f42400 	.word	0x00f42400
 8007d1c:	01067380 	.word	0x01067380
 8007d20:	011a499f 	.word	0x011a499f
 8007d24:	01312cff 	.word	0x01312cff
 8007d28:	014ca43f 	.word	0x014ca43f
 8007d2c:	016e3600 	.word	0x016e3600
 8007d30:	01a6ab1f 	.word	0x01a6ab1f
 8007d34:	01e84800 	.word	0x01e84800

08007d38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f043 0201 	orr.w	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f023 0201 	bic.w	r2, r3, #1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d115      	bne.n	8007dca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007daa:	200a      	movs	r0, #10
 8007dac:	f7fb fd0e 	bl	80037cc <HAL_Delay>
      ms += 10U;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	330a      	adds	r3, #10
 8007db4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 f93f 	bl	800903a <USB_GetMode>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d01e      	beq.n	8007e00 <USB_SetCurrentMode+0x84>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2bc7      	cmp	r3, #199	@ 0xc7
 8007dc6:	d9f0      	bls.n	8007daa <USB_SetCurrentMode+0x2e>
 8007dc8:	e01a      	b.n	8007e00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d115      	bne.n	8007dfc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ddc:	200a      	movs	r0, #10
 8007dde:	f7fb fcf5 	bl	80037cc <HAL_Delay>
      ms += 10U;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	330a      	adds	r3, #10
 8007de6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f001 f926 	bl	800903a <USB_GetMode>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <USB_SetCurrentMode+0x84>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2bc7      	cmp	r3, #199	@ 0xc7
 8007df8:	d9f0      	bls.n	8007ddc <USB_SetCurrentMode+0x60>
 8007dfa:	e001      	b.n	8007e00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e005      	b.n	8007e0c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2bc8      	cmp	r3, #200	@ 0xc8
 8007e04:	d101      	bne.n	8007e0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e14:	b084      	sub	sp, #16
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b086      	sub	sp, #24
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e2e:	2300      	movs	r3, #0
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	e009      	b.n	8007e48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	3340      	adds	r3, #64	@ 0x40
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3301      	adds	r3, #1
 8007e46:	613b      	str	r3, [r7, #16]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	2b0e      	cmp	r3, #14
 8007e4c:	d9f2      	bls.n	8007e34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d11c      	bne.n	8007e90 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e64:	f043 0302 	orr.w	r3, r3, #2
 8007e68:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e86:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e8e:	e00b      	b.n	8007ea8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e94:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eb4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d10d      	bne.n	8007ed8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f968 	bl	800819c <USB_SetDevSpeed>
 8007ecc:	e008      	b.n	8007ee0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ece:	2101      	movs	r1, #1
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f963 	bl	800819c <USB_SetDevSpeed>
 8007ed6:	e003      	b.n	8007ee0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ed8:	2103      	movs	r1, #3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f95e 	bl	800819c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ee0:	2110      	movs	r1, #16
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f8fa 	bl	80080dc <USB_FlushTxFifo>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f924 	bl	8008140 <USB_FlushRxFifo>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f08:	461a      	mov	r2, r3
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f14:	461a      	mov	r2, r3
 8007f16:	2300      	movs	r3, #0
 8007f18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f20:	461a      	mov	r2, r3
 8007f22:	2300      	movs	r3, #0
 8007f24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f26:	2300      	movs	r3, #0
 8007f28:	613b      	str	r3, [r7, #16]
 8007f2a:	e043      	b.n	8007fb4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f42:	d118      	bne.n	8007f76 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10a      	bne.n	8007f60 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f56:	461a      	mov	r2, r3
 8007f58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e013      	b.n	8007f88 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	e008      	b.n	8007f88 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f82:	461a      	mov	r2, r3
 8007f84:	2300      	movs	r3, #0
 8007f86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f94:	461a      	mov	r2, r3
 8007f96:	2300      	movs	r3, #0
 8007f98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007fac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	613b      	str	r3, [r7, #16]
 8007fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007fb8:	461a      	mov	r2, r3
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d3b5      	bcc.n	8007f2c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	e043      	b.n	800804e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fdc:	d118      	bne.n	8008010 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	e013      	b.n	8008022 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008006:	461a      	mov	r2, r3
 8008008:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800800c:	6013      	str	r3, [r2, #0]
 800800e:	e008      	b.n	8008022 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801c:	461a      	mov	r2, r3
 800801e:	2300      	movs	r3, #0
 8008020:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800802e:	461a      	mov	r2, r3
 8008030:	2300      	movs	r3, #0
 8008032:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008040:	461a      	mov	r2, r3
 8008042:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008046:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	3301      	adds	r3, #1
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008052:	461a      	mov	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	4293      	cmp	r3, r2
 8008058:	d3b5      	bcc.n	8007fc6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800806c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800807a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800807c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008080:	2b00      	cmp	r3, #0
 8008082:	d105      	bne.n	8008090 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	f043 0210 	orr.w	r2, r3, #16
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	699a      	ldr	r2, [r3, #24]
 8008094:	4b10      	ldr	r3, [pc, #64]	@ (80080d8 <USB_DevInit+0x2c4>)
 8008096:	4313      	orrs	r3, r2
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800809c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d005      	beq.n	80080b0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f043 0208 	orr.w	r2, r3, #8
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d107      	bne.n	80080c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080c0:	f043 0304 	orr.w	r3, r3, #4
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080d4:	b004      	add	sp, #16
 80080d6:	4770      	bx	lr
 80080d8:	803c3800 	.word	0x803c3800

080080dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080f6:	d901      	bls.n	80080fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e01b      	b.n	8008134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	daf2      	bge.n	80080ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	019b      	lsls	r3, r3, #6
 800810c:	f043 0220 	orr.w	r2, r3, #32
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008120:	d901      	bls.n	8008126 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e006      	b.n	8008134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b20      	cmp	r3, #32
 8008130:	d0f0      	beq.n	8008114 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3301      	adds	r3, #1
 8008150:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008158:	d901      	bls.n	800815e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e018      	b.n	8008190 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	daf2      	bge.n	800814c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2210      	movs	r2, #16
 800816e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800817c:	d901      	bls.n	8008182 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e006      	b.n	8008190 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0310 	and.w	r3, r3, #16
 800818a:	2b10      	cmp	r3, #16
 800818c:	d0f0      	beq.n	8008170 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081bc:	4313      	orrs	r3, r2
 80081be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b087      	sub	sp, #28
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f003 0306 	and.w	r3, r3, #6
 80081e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d102      	bne.n	80081f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081ee:	2300      	movs	r3, #0
 80081f0:	75fb      	strb	r3, [r7, #23]
 80081f2:	e00a      	b.n	800820a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d002      	beq.n	8008200 <USB_GetDevSpeed+0x32>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b06      	cmp	r3, #6
 80081fe:	d102      	bne.n	8008206 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008200:	2302      	movs	r3, #2
 8008202:	75fb      	strb	r3, [r7, #23]
 8008204:	e001      	b.n	800820a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008206:	230f      	movs	r3, #15
 8008208:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
}
 800820c:	4618      	mov	r0, r3
 800820e:	371c      	adds	r7, #28
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d13a      	bne.n	80082aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800823a:	69da      	ldr	r2, [r3, #28]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	f003 030f 	and.w	r3, r3, #15
 8008244:	2101      	movs	r1, #1
 8008246:	fa01 f303 	lsl.w	r3, r1, r3
 800824a:	b29b      	uxth	r3, r3
 800824c:	68f9      	ldr	r1, [r7, #12]
 800824e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008252:	4313      	orrs	r3, r2
 8008254:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d155      	bne.n	8008318 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	791b      	ldrb	r3, [r3, #4]
 8008286:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008288:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	059b      	lsls	r3, r3, #22
 800828e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008290:	4313      	orrs	r3, r2
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	0151      	lsls	r1, r2, #5
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	440a      	add	r2, r1
 800829a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800829e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	e036      	b.n	8008318 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b0:	69da      	ldr	r2, [r3, #28]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	2101      	movs	r1, #1
 80082bc:	fa01 f303 	lsl.w	r3, r1, r3
 80082c0:	041b      	lsls	r3, r3, #16
 80082c2:	68f9      	ldr	r1, [r7, #12]
 80082c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082c8:	4313      	orrs	r3, r2
 80082ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d11a      	bne.n	8008318 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	791b      	ldrb	r3, [r3, #4]
 80082fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082fe:	430b      	orrs	r3, r1
 8008300:	4313      	orrs	r3, r2
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800830e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008316:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
	...

08008328 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d161      	bne.n	8008408 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008356:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800835a:	d11f      	bne.n	800839c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	0151      	lsls	r1, r2, #5
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	440a      	add	r2, r1
 8008372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008376:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800837a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008396:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800839a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f003 030f 	and.w	r3, r3, #15
 80083ac:	2101      	movs	r1, #1
 80083ae:	fa01 f303 	lsl.w	r3, r1, r3
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	43db      	mvns	r3, r3
 80083b6:	68f9      	ldr	r1, [r7, #12]
 80083b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083bc:	4013      	ands	r3, r2
 80083be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c6:	69da      	ldr	r2, [r3, #28]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	2101      	movs	r1, #1
 80083d2:	fa01 f303 	lsl.w	r3, r1, r3
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	43db      	mvns	r3, r3
 80083da:	68f9      	ldr	r1, [r7, #12]
 80083dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083e0:	4013      	ands	r3, r2
 80083e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	0159      	lsls	r1, r3, #5
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	440b      	add	r3, r1
 80083fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083fe:	4619      	mov	r1, r3
 8008400:	4b35      	ldr	r3, [pc, #212]	@ (80084d8 <USB_DeactivateEndpoint+0x1b0>)
 8008402:	4013      	ands	r3, r2
 8008404:	600b      	str	r3, [r1, #0]
 8008406:	e060      	b.n	80084ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800841a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800841e:	d11f      	bne.n	8008460 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	0151      	lsls	r1, r2, #5
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	440a      	add	r2, r1
 8008436:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800843a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800843e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	0151      	lsls	r1, r2, #5
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	440a      	add	r2, r1
 8008456:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800845a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800845e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	f003 030f 	and.w	r3, r3, #15
 8008470:	2101      	movs	r1, #1
 8008472:	fa01 f303 	lsl.w	r3, r1, r3
 8008476:	041b      	lsls	r3, r3, #16
 8008478:	43db      	mvns	r3, r3
 800847a:	68f9      	ldr	r1, [r7, #12]
 800847c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008480:	4013      	ands	r3, r2
 8008482:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	2101      	movs	r1, #1
 8008496:	fa01 f303 	lsl.w	r3, r1, r3
 800849a:	041b      	lsls	r3, r3, #16
 800849c:	43db      	mvns	r3, r3
 800849e:	68f9      	ldr	r1, [r7, #12]
 80084a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084a4:	4013      	ands	r3, r2
 80084a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	0159      	lsls	r1, r3, #5
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	440b      	add	r3, r1
 80084be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c2:	4619      	mov	r1, r3
 80084c4:	4b05      	ldr	r3, [pc, #20]	@ (80084dc <USB_DeactivateEndpoint+0x1b4>)
 80084c6:	4013      	ands	r3, r2
 80084c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	ec337800 	.word	0xec337800
 80084dc:	eff37800 	.word	0xeff37800

080084e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08a      	sub	sp, #40	@ 0x28
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	4613      	mov	r3, r2
 80084ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	785b      	ldrb	r3, [r3, #1]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	f040 817f 	bne.w	8008800 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d132      	bne.n	8008570 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	4413      	add	r3, r2
 8008512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	0151      	lsls	r1, r2, #5
 800851c:	69fa      	ldr	r2, [r7, #28]
 800851e:	440a      	add	r2, r1
 8008520:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008524:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008528:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800852c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	440a      	add	r2, r1
 8008544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008548:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800854c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	0151      	lsls	r1, r2, #5
 8008560:	69fa      	ldr	r2, [r7, #28]
 8008562:	440a      	add	r2, r1
 8008564:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008568:	0cdb      	lsrs	r3, r3, #19
 800856a:	04db      	lsls	r3, r3, #19
 800856c:	6113      	str	r3, [r2, #16]
 800856e:	e097      	b.n	80086a0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	0151      	lsls	r1, r2, #5
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	440a      	add	r2, r1
 8008586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800858a:	0cdb      	lsrs	r3, r3, #19
 800858c:	04db      	lsls	r3, r3, #19
 800858e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80085ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80085b2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d11a      	bne.n	80085f0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	691a      	ldr	r2, [r3, #16]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d903      	bls.n	80085ce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	689a      	ldr	r2, [r3, #8]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	0151      	lsls	r1, r2, #5
 80085e0:	69fa      	ldr	r2, [r7, #28]
 80085e2:	440a      	add	r2, r1
 80085e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085ec:	6113      	str	r3, [r2, #16]
 80085ee:	e044      	b.n	800867a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	4413      	add	r3, r2
 80085fa:	1e5a      	subs	r2, r3, #1
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	fbb2 f3f3 	udiv	r3, r2, r3
 8008604:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008612:	691a      	ldr	r2, [r3, #16]
 8008614:	8afb      	ldrh	r3, [r7, #22]
 8008616:	04d9      	lsls	r1, r3, #19
 8008618:	4ba4      	ldr	r3, [pc, #656]	@ (80088ac <USB_EPStartXfer+0x3cc>)
 800861a:	400b      	ands	r3, r1
 800861c:	69b9      	ldr	r1, [r7, #24]
 800861e:	0148      	lsls	r0, r1, #5
 8008620:	69f9      	ldr	r1, [r7, #28]
 8008622:	4401      	add	r1, r0
 8008624:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008628:	4313      	orrs	r3, r2
 800862a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	791b      	ldrb	r3, [r3, #4]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d122      	bne.n	800867a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	440a      	add	r2, r1
 800864a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800864e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008652:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	8afb      	ldrh	r3, [r7, #22]
 8008664:	075b      	lsls	r3, r3, #29
 8008666:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800866a:	69b9      	ldr	r1, [r7, #24]
 800866c:	0148      	lsls	r0, r1, #5
 800866e:	69f9      	ldr	r1, [r7, #28]
 8008670:	4401      	add	r1, r0
 8008672:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008676:	4313      	orrs	r3, r2
 8008678:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008690:	69b9      	ldr	r1, [r7, #24]
 8008692:	0148      	lsls	r0, r1, #5
 8008694:	69f9      	ldr	r1, [r7, #28]
 8008696:	4401      	add	r1, r0
 8008698:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800869c:	4313      	orrs	r3, r2
 800869e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d14b      	bne.n	800873e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d009      	beq.n	80086c2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ba:	461a      	mov	r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	791b      	ldrb	r3, [r3, #4]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d128      	bne.n	800871c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d110      	bne.n	80086fc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	0151      	lsls	r1, r2, #5
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	440a      	add	r2, r1
 80086f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	e00f      	b.n	800871c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	0151      	lsls	r1, r2, #5
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	440a      	add	r2, r1
 8008712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800871a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	0151      	lsls	r1, r2, #5
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	440a      	add	r2, r1
 8008732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008736:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	e166      	b.n	8008a0c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	4413      	add	r3, r2
 8008746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	0151      	lsls	r1, r2, #5
 8008750:	69fa      	ldr	r2, [r7, #28]
 8008752:	440a      	add	r2, r1
 8008754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008758:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800875c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	791b      	ldrb	r3, [r3, #4]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d015      	beq.n	8008792 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 814e 	beq.w	8008a0c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	f003 030f 	and.w	r3, r3, #15
 8008780:	2101      	movs	r1, #1
 8008782:	fa01 f303 	lsl.w	r3, r1, r3
 8008786:	69f9      	ldr	r1, [r7, #28]
 8008788:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800878c:	4313      	orrs	r3, r2
 800878e:	634b      	str	r3, [r1, #52]	@ 0x34
 8008790:	e13c      	b.n	8008a0c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d110      	bne.n	80087c4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	e00f      	b.n	80087e4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	69fa      	ldr	r2, [r7, #28]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	68d9      	ldr	r1, [r3, #12]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	781a      	ldrb	r2, [r3, #0]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	b298      	uxth	r0, r3
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	4603      	mov	r3, r0
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f9b9 	bl	8008b70 <USB_WritePacket>
 80087fe:	e105      	b.n	8008a0c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	440a      	add	r2, r1
 8008816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800881a:	0cdb      	lsrs	r3, r3, #19
 800881c:	04db      	lsls	r3, r3, #19
 800881e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	4413      	add	r3, r2
 8008828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	69ba      	ldr	r2, [r7, #24]
 8008830:	0151      	lsls	r1, r2, #5
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	440a      	add	r2, r1
 8008836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800883a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800883e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008842:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d132      	bne.n	80088b0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800886e:	691a      	ldr	r2, [r3, #16]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008878:	69b9      	ldr	r1, [r7, #24]
 800887a:	0148      	lsls	r0, r1, #5
 800887c:	69f9      	ldr	r1, [r7, #28]
 800887e:	4401      	add	r1, r0
 8008880:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008884:	4313      	orrs	r3, r2
 8008886:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	69fa      	ldr	r2, [r7, #28]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088a6:	6113      	str	r3, [r2, #16]
 80088a8:	e062      	b.n	8008970 <USB_EPStartXfer+0x490>
 80088aa:	bf00      	nop
 80088ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d123      	bne.n	8008900 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088ce:	69b9      	ldr	r1, [r7, #24]
 80088d0:	0148      	lsls	r0, r1, #5
 80088d2:	69f9      	ldr	r1, [r7, #28]
 80088d4:	4401      	add	r1, r0
 80088d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80088da:	4313      	orrs	r3, r2
 80088dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	0151      	lsls	r1, r2, #5
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	440a      	add	r2, r1
 80088f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088fc:	6113      	str	r3, [r2, #16]
 80088fe:	e037      	b.n	8008970 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	4413      	add	r3, r2
 800890a:	1e5a      	subs	r2, r3, #1
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	fbb2 f3f3 	udiv	r3, r2, r3
 8008914:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	8afa      	ldrh	r2, [r7, #22]
 800891c:	fb03 f202 	mul.w	r2, r3, r2
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008930:	691a      	ldr	r2, [r3, #16]
 8008932:	8afb      	ldrh	r3, [r7, #22]
 8008934:	04d9      	lsls	r1, r3, #19
 8008936:	4b38      	ldr	r3, [pc, #224]	@ (8008a18 <USB_EPStartXfer+0x538>)
 8008938:	400b      	ands	r3, r1
 800893a:	69b9      	ldr	r1, [r7, #24]
 800893c:	0148      	lsls	r0, r1, #5
 800893e:	69f9      	ldr	r1, [r7, #28]
 8008940:	4401      	add	r1, r0
 8008942:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008946:	4313      	orrs	r3, r2
 8008948:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008956:	691a      	ldr	r2, [r3, #16]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008960:	69b9      	ldr	r1, [r7, #24]
 8008962:	0148      	lsls	r0, r1, #5
 8008964:	69f9      	ldr	r1, [r7, #28]
 8008966:	4401      	add	r1, r0
 8008968:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800896c:	4313      	orrs	r3, r2
 800896e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d10d      	bne.n	8008992 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d009      	beq.n	8008992 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	68d9      	ldr	r1, [r3, #12]
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800898e:	460a      	mov	r2, r1
 8008990:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	791b      	ldrb	r3, [r3, #4]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d128      	bne.n	80089ec <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d110      	bne.n	80089cc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	0151      	lsls	r1, r2, #5
 80089bc:	69fa      	ldr	r2, [r7, #28]
 80089be:	440a      	add	r2, r1
 80089c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	e00f      	b.n	80089ec <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	0151      	lsls	r1, r2, #5
 80089de:	69fa      	ldr	r2, [r7, #28]
 80089e0:	440a      	add	r2, r1
 80089e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	015a      	lsls	r2, r3, #5
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	4413      	add	r3, r2
 80089f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	0151      	lsls	r1, r2, #5
 80089fe:	69fa      	ldr	r2, [r7, #28]
 8008a00:	440a      	add	r2, r1
 8008a02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a06:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008a0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3720      	adds	r7, #32
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	1ff80000 	.word	0x1ff80000

08008a1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	785b      	ldrb	r3, [r3, #1]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d14a      	bne.n	8008ad0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a52:	f040 8086 	bne.w	8008b62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	7812      	ldrb	r2, [r2, #0]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	7812      	ldrb	r2, [r2, #0]
 8008a8e:	0151      	lsls	r1, r2, #5
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	440a      	add	r2, r1
 8008a94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d902      	bls.n	8008ab4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ab2:	e056      	b.n	8008b62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008acc:	d0e7      	beq.n	8008a9e <USB_EPStopXfer+0x82>
 8008ace:	e048      	b.n	8008b62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ae8:	d13b      	bne.n	8008b62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	7812      	ldrb	r2, [r2, #0]
 8008afe:	0151      	lsls	r1, r2, #5
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	440a      	add	r2, r1
 8008b04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	7812      	ldrb	r2, [r2, #0]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3301      	adds	r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d902      	bls.n	8008b48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	75fb      	strb	r3, [r7, #23]
          break;
 8008b46:	e00c      	b.n	8008b62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b60:	d0e7      	beq.n	8008b32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b089      	sub	sp, #36	@ 0x24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	460b      	mov	r3, r1
 8008b80:	71fb      	strb	r3, [r7, #7]
 8008b82:	4613      	mov	r3, r2
 8008b84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d123      	bne.n	8008bde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b96:	88bb      	ldrh	r3, [r7, #4]
 8008b98:	3303      	adds	r3, #3
 8008b9a:	089b      	lsrs	r3, r3, #2
 8008b9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	e018      	b.n	8008bd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	031a      	lsls	r2, r3, #12
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	61bb      	str	r3, [r7, #24]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d3e2      	bcc.n	8008ba4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3724      	adds	r7, #36	@ 0x24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b08b      	sub	sp, #44	@ 0x2c
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	089b      	lsrs	r3, r3, #2
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c0a:	88fb      	ldrh	r3, [r7, #6]
 8008c0c:	f003 0303 	and.w	r3, r3, #3
 8008c10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c12:	2300      	movs	r3, #0
 8008c14:	623b      	str	r3, [r7, #32]
 8008c16:	e014      	b.n	8008c42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c22:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c26:	3301      	adds	r3, #1
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c32:	3301      	adds	r3, #1
 8008c34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c38:	3301      	adds	r3, #1
 8008c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	623b      	str	r3, [r7, #32]
 8008c42:	6a3a      	ldr	r2, [r7, #32]
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d3e6      	bcc.n	8008c18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008c4a:	8bfb      	ldrh	r3, [r7, #30]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d01e      	beq.n	8008c8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f107 0310 	add.w	r3, r7, #16
 8008c60:	6812      	ldr	r2, [r2, #0]
 8008c62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c74:	701a      	strb	r2, [r3, #0]
      i++;
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	3301      	adds	r3, #1
 8008c80:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008c82:	8bfb      	ldrh	r3, [r7, #30]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c88:	8bfb      	ldrh	r3, [r7, #30]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1ea      	bne.n	8008c64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	372c      	adds	r7, #44	@ 0x2c
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d12c      	bne.n	8008d12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	db12      	blt.n	8008cf0 <USB_EPSetStall+0x54>
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00f      	beq.n	8008cf0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	0151      	lsls	r1, r2, #5
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	440a      	add	r2, r1
 8008ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008cee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	0151      	lsls	r1, r2, #5
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	440a      	add	r2, r1
 8008d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	e02b      	b.n	8008d6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	db12      	blt.n	8008d4a <USB_EPSetStall+0xae>
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00f      	beq.n	8008d4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	0151      	lsls	r1, r2, #5
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	440a      	add	r2, r1
 8008d40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	0151      	lsls	r1, r2, #5
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	440a      	add	r2, r1
 8008d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	785b      	ldrb	r3, [r3, #1]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d128      	bne.n	8008de6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	0151      	lsls	r1, r2, #5
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	440a      	add	r2, r1
 8008daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008db2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	791b      	ldrb	r3, [r3, #4]
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d003      	beq.n	8008dc4 <USB_EPClearStall+0x4c>
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	791b      	ldrb	r3, [r3, #4]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d138      	bne.n	8008e36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	0151      	lsls	r1, r2, #5
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	440a      	add	r2, r1
 8008dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	e027      	b.n	8008e36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	791b      	ldrb	r3, [r3, #4]
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	d003      	beq.n	8008e16 <USB_EPClearStall+0x9e>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	791b      	ldrb	r3, [r3, #4]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d10f      	bne.n	8008e36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	0151      	lsls	r1, r2, #5
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	440a      	add	r2, r1
 8008e2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e62:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008e66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	011b      	lsls	r3, r3, #4
 8008e74:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008e78:	68f9      	ldr	r1, [r7, #12]
 8008e7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ebe:	f023 0302 	bic.w	r3, r3, #2
 8008ec2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b085      	sub	sp, #20
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008eec:	f023 0303 	bic.w	r3, r3, #3
 8008ef0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f00:	f043 0302 	orr.w	r3, r3, #2
 8008f04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b085      	sub	sp, #20
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f56:	69db      	ldr	r3, [r3, #28]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	0c1b      	lsrs	r3, r3, #16
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f8a:	69db      	ldr	r3, [r3, #28]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	4013      	ands	r3, r2
 8008f90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	b29b      	uxth	r3, r3
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b085      	sub	sp, #20
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	460b      	mov	r3, r1
 8008fac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	4013      	ands	r3, r2
 8008fce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b087      	sub	sp, #28
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009000:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009002:	78fb      	ldrb	r3, [r7, #3]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	fa22 f303 	lsr.w	r3, r2, r3
 800900e:	01db      	lsls	r3, r3, #7
 8009010:	b2db      	uxtb	r3, r3
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	4313      	orrs	r3, r2
 8009016:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009018:	78fb      	ldrb	r3, [r7, #3]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	4013      	ands	r3, r2
 800902a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800902c:	68bb      	ldr	r3, [r7, #8]
}
 800902e:	4618      	mov	r0, r3
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	f003 0301 	and.w	r3, r3, #1
}
 800904a:	4618      	mov	r0, r3
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009070:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009074:	f023 0307 	bic.w	r3, r3, #7
 8009078:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800908c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	460b      	mov	r3, r1
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	333c      	adds	r3, #60	@ 0x3c
 80090b2:	3304      	adds	r3, #4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	4a26      	ldr	r2, [pc, #152]	@ (8009154 <USB_EP0_OutStart+0xb8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d90a      	bls.n	80090d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090d0:	d101      	bne.n	80090d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	e037      	b.n	8009146 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090dc:	461a      	mov	r2, r3
 80090de:	2300      	movs	r3, #0
 80090e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009104:	f043 0318 	orr.w	r3, r3, #24
 8009108:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009118:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800911c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800911e:	7afb      	ldrb	r3, [r7, #11]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d10f      	bne.n	8009144 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800912a:	461a      	mov	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800913e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009142:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	371c      	adds	r7, #28
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	4f54300a 	.word	0x4f54300a

08009158 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3301      	adds	r3, #1
 8009168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009170:	d901      	bls.n	8009176 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e01b      	b.n	80091ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	daf2      	bge.n	8009164 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f043 0201 	orr.w	r2, r3, #1
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3301      	adds	r3, #1
 8009192:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800919a:	d901      	bls.n	80091a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e006      	b.n	80091ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d0f0      	beq.n	800918e <USB_CoreReset+0x36>

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
	...

080091bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80091c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80091cc:	f002 fc9e 	bl	800bb0c <USBD_static_malloc>
 80091d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d109      	bne.n	80091ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	32b0      	adds	r2, #176	@ 0xb0
 80091e2:	2100      	movs	r1, #0
 80091e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80091e8:	2302      	movs	r3, #2
 80091ea:	e0d4      	b.n	8009396 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80091ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80091f0:	2100      	movs	r1, #0
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f003 fa4b 	bl	800c68e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	32b0      	adds	r2, #176	@ 0xb0
 8009202:	68f9      	ldr	r1, [r7, #12]
 8009204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	32b0      	adds	r2, #176	@ 0xb0
 8009212:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	7c1b      	ldrb	r3, [r3, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d138      	bne.n	8009296 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009224:	4b5e      	ldr	r3, [pc, #376]	@ (80093a0 <USBD_CDC_Init+0x1e4>)
 8009226:	7819      	ldrb	r1, [r3, #0]
 8009228:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800922c:	2202      	movs	r2, #2
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f002 fb49 	bl	800b8c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009234:	4b5a      	ldr	r3, [pc, #360]	@ (80093a0 <USBD_CDC_Init+0x1e4>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	f003 020f 	and.w	r2, r3, #15
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	440b      	add	r3, r1
 8009248:	3324      	adds	r3, #36	@ 0x24
 800924a:	2201      	movs	r2, #1
 800924c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800924e:	4b55      	ldr	r3, [pc, #340]	@ (80093a4 <USBD_CDC_Init+0x1e8>)
 8009250:	7819      	ldrb	r1, [r3, #0]
 8009252:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009256:	2202      	movs	r2, #2
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f002 fb34 	bl	800b8c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800925e:	4b51      	ldr	r3, [pc, #324]	@ (80093a4 <USBD_CDC_Init+0x1e8>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	f003 020f 	and.w	r2, r3, #15
 8009266:	6879      	ldr	r1, [r7, #4]
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	440b      	add	r3, r1
 8009272:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009276:	2201      	movs	r2, #1
 8009278:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800927a:	4b4b      	ldr	r3, [pc, #300]	@ (80093a8 <USBD_CDC_Init+0x1ec>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	f003 020f 	and.w	r2, r3, #15
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	440b      	add	r3, r1
 800928e:	3326      	adds	r3, #38	@ 0x26
 8009290:	2210      	movs	r2, #16
 8009292:	801a      	strh	r2, [r3, #0]
 8009294:	e035      	b.n	8009302 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009296:	4b42      	ldr	r3, [pc, #264]	@ (80093a0 <USBD_CDC_Init+0x1e4>)
 8009298:	7819      	ldrb	r1, [r3, #0]
 800929a:	2340      	movs	r3, #64	@ 0x40
 800929c:	2202      	movs	r2, #2
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f002 fb11 	bl	800b8c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80092a4:	4b3e      	ldr	r3, [pc, #248]	@ (80093a0 <USBD_CDC_Init+0x1e4>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	f003 020f 	and.w	r2, r3, #15
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	440b      	add	r3, r1
 80092b8:	3324      	adds	r3, #36	@ 0x24
 80092ba:	2201      	movs	r2, #1
 80092bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092be:	4b39      	ldr	r3, [pc, #228]	@ (80093a4 <USBD_CDC_Init+0x1e8>)
 80092c0:	7819      	ldrb	r1, [r3, #0]
 80092c2:	2340      	movs	r3, #64	@ 0x40
 80092c4:	2202      	movs	r2, #2
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f002 fafd 	bl	800b8c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092cc:	4b35      	ldr	r3, [pc, #212]	@ (80093a4 <USBD_CDC_Init+0x1e8>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	f003 020f 	and.w	r2, r3, #15
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	440b      	add	r3, r1
 80092e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092e4:	2201      	movs	r2, #1
 80092e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80092e8:	4b2f      	ldr	r3, [pc, #188]	@ (80093a8 <USBD_CDC_Init+0x1ec>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	f003 020f 	and.w	r2, r3, #15
 80092f0:	6879      	ldr	r1, [r7, #4]
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	440b      	add	r3, r1
 80092fc:	3326      	adds	r3, #38	@ 0x26
 80092fe:	2210      	movs	r2, #16
 8009300:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009302:	4b29      	ldr	r3, [pc, #164]	@ (80093a8 <USBD_CDC_Init+0x1ec>)
 8009304:	7819      	ldrb	r1, [r3, #0]
 8009306:	2308      	movs	r3, #8
 8009308:	2203      	movs	r2, #3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f002 fadb 	bl	800b8c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009310:	4b25      	ldr	r3, [pc, #148]	@ (80093a8 <USBD_CDC_Init+0x1ec>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	f003 020f 	and.w	r2, r3, #15
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	440b      	add	r3, r1
 8009324:	3324      	adds	r3, #36	@ 0x24
 8009326:	2201      	movs	r2, #1
 8009328:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	33b0      	adds	r3, #176	@ 0xb0
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009360:	2302      	movs	r3, #2
 8009362:	e018      	b.n	8009396 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	7c1b      	ldrb	r3, [r3, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800936c:	4b0d      	ldr	r3, [pc, #52]	@ (80093a4 <USBD_CDC_Init+0x1e8>)
 800936e:	7819      	ldrb	r1, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009376:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f002 fb92 	bl	800baa4 <USBD_LL_PrepareReceive>
 8009380:	e008      	b.n	8009394 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009382:	4b08      	ldr	r3, [pc, #32]	@ (80093a4 <USBD_CDC_Init+0x1e8>)
 8009384:	7819      	ldrb	r1, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800938c:	2340      	movs	r3, #64	@ 0x40
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f002 fb88 	bl	800baa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	200000bf 	.word	0x200000bf
 80093a4:	200000c0 	.word	0x200000c0
 80093a8:	200000c1 	.word	0x200000c1

080093ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80093b8:	4b3a      	ldr	r3, [pc, #232]	@ (80094a4 <USBD_CDC_DeInit+0xf8>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f002 faa7 	bl	800b912 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80093c4:	4b37      	ldr	r3, [pc, #220]	@ (80094a4 <USBD_CDC_DeInit+0xf8>)
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	f003 020f 	and.w	r2, r3, #15
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	4613      	mov	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	440b      	add	r3, r1
 80093d8:	3324      	adds	r3, #36	@ 0x24
 80093da:	2200      	movs	r2, #0
 80093dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80093de:	4b32      	ldr	r3, [pc, #200]	@ (80094a8 <USBD_CDC_DeInit+0xfc>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f002 fa94 	bl	800b912 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80093ea:	4b2f      	ldr	r3, [pc, #188]	@ (80094a8 <USBD_CDC_DeInit+0xfc>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	f003 020f 	and.w	r2, r3, #15
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	4613      	mov	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	440b      	add	r3, r1
 80093fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009402:	2200      	movs	r2, #0
 8009404:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009406:	4b29      	ldr	r3, [pc, #164]	@ (80094ac <USBD_CDC_DeInit+0x100>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f002 fa80 	bl	800b912 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009412:	4b26      	ldr	r3, [pc, #152]	@ (80094ac <USBD_CDC_DeInit+0x100>)
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	f003 020f 	and.w	r2, r3, #15
 800941a:	6879      	ldr	r1, [r7, #4]
 800941c:	4613      	mov	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	440b      	add	r3, r1
 8009426:	3324      	adds	r3, #36	@ 0x24
 8009428:	2200      	movs	r2, #0
 800942a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800942c:	4b1f      	ldr	r3, [pc, #124]	@ (80094ac <USBD_CDC_DeInit+0x100>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	f003 020f 	and.w	r2, r3, #15
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	3326      	adds	r3, #38	@ 0x26
 8009442:	2200      	movs	r2, #0
 8009444:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	32b0      	adds	r2, #176	@ 0xb0
 8009450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d01f      	beq.n	8009498 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	33b0      	adds	r3, #176	@ 0xb0
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	32b0      	adds	r2, #176	@ 0xb0
 8009476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947a:	4618      	mov	r0, r3
 800947c:	f002 fb54 	bl	800bb28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	32b0      	adds	r2, #176	@ 0xb0
 800948a:	2100      	movs	r1, #0
 800948c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	200000bf 	.word	0x200000bf
 80094a8:	200000c0 	.word	0x200000c0
 80094ac:	200000c1 	.word	0x200000c1

080094b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	32b0      	adds	r2, #176	@ 0xb0
 80094c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80094dc:	2303      	movs	r3, #3
 80094de:	e0bf      	b.n	8009660 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d050      	beq.n	800958e <USBD_CDC_Setup+0xde>
 80094ec:	2b20      	cmp	r3, #32
 80094ee:	f040 80af 	bne.w	8009650 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	88db      	ldrh	r3, [r3, #6]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d03a      	beq.n	8009570 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	b25b      	sxtb	r3, r3
 8009500:	2b00      	cmp	r3, #0
 8009502:	da1b      	bge.n	800953c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	33b0      	adds	r3, #176	@ 0xb0
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800951a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	88d2      	ldrh	r2, [r2, #6]
 8009520:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	88db      	ldrh	r3, [r3, #6]
 8009526:	2b07      	cmp	r3, #7
 8009528:	bf28      	it	cs
 800952a:	2307      	movcs	r3, #7
 800952c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	89fa      	ldrh	r2, [r7, #14]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 fd93 	bl	800b060 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800953a:	e090      	b.n	800965e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	785a      	ldrb	r2, [r3, #1]
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	88db      	ldrh	r3, [r3, #6]
 800954a:	2b3f      	cmp	r3, #63	@ 0x3f
 800954c:	d803      	bhi.n	8009556 <USBD_CDC_Setup+0xa6>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	88db      	ldrh	r3, [r3, #6]
 8009552:	b2da      	uxtb	r2, r3
 8009554:	e000      	b.n	8009558 <USBD_CDC_Setup+0xa8>
 8009556:	2240      	movs	r2, #64	@ 0x40
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800955e:	6939      	ldr	r1, [r7, #16]
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009566:	461a      	mov	r2, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 fda5 	bl	800b0b8 <USBD_CtlPrepareRx>
      break;
 800956e:	e076      	b.n	800965e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	33b0      	adds	r3, #176	@ 0xb0
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	7850      	ldrb	r0, [r2, #1]
 8009586:	2200      	movs	r2, #0
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	4798      	blx	r3
      break;
 800958c:	e067      	b.n	800965e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	785b      	ldrb	r3, [r3, #1]
 8009592:	2b0b      	cmp	r3, #11
 8009594:	d851      	bhi.n	800963a <USBD_CDC_Setup+0x18a>
 8009596:	a201      	add	r2, pc, #4	@ (adr r2, 800959c <USBD_CDC_Setup+0xec>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	080095cd 	.word	0x080095cd
 80095a0:	08009649 	.word	0x08009649
 80095a4:	0800963b 	.word	0x0800963b
 80095a8:	0800963b 	.word	0x0800963b
 80095ac:	0800963b 	.word	0x0800963b
 80095b0:	0800963b 	.word	0x0800963b
 80095b4:	0800963b 	.word	0x0800963b
 80095b8:	0800963b 	.word	0x0800963b
 80095bc:	0800963b 	.word	0x0800963b
 80095c0:	0800963b 	.word	0x0800963b
 80095c4:	080095f7 	.word	0x080095f7
 80095c8:	08009621 	.word	0x08009621
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d107      	bne.n	80095e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80095d8:	f107 030a 	add.w	r3, r7, #10
 80095dc:	2202      	movs	r2, #2
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 fd3d 	bl	800b060 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095e6:	e032      	b.n	800964e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 fcbb 	bl	800af66 <USBD_CtlError>
            ret = USBD_FAIL;
 80095f0:	2303      	movs	r3, #3
 80095f2:	75fb      	strb	r3, [r7, #23]
          break;
 80095f4:	e02b      	b.n	800964e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d107      	bne.n	8009612 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009602:	f107 030d 	add.w	r3, r7, #13
 8009606:	2201      	movs	r2, #1
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 fd28 	bl	800b060 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009610:	e01d      	b.n	800964e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 fca6 	bl	800af66 <USBD_CtlError>
            ret = USBD_FAIL;
 800961a:	2303      	movs	r3, #3
 800961c:	75fb      	strb	r3, [r7, #23]
          break;
 800961e:	e016      	b.n	800964e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b03      	cmp	r3, #3
 800962a:	d00f      	beq.n	800964c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f001 fc99 	bl	800af66 <USBD_CtlError>
            ret = USBD_FAIL;
 8009634:	2303      	movs	r3, #3
 8009636:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009638:	e008      	b.n	800964c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 fc92 	bl	800af66 <USBD_CtlError>
          ret = USBD_FAIL;
 8009642:	2303      	movs	r3, #3
 8009644:	75fb      	strb	r3, [r7, #23]
          break;
 8009646:	e002      	b.n	800964e <USBD_CDC_Setup+0x19e>
          break;
 8009648:	bf00      	nop
 800964a:	e008      	b.n	800965e <USBD_CDC_Setup+0x1ae>
          break;
 800964c:	bf00      	nop
      }
      break;
 800964e:	e006      	b.n	800965e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 fc87 	bl	800af66 <USBD_CtlError>
      ret = USBD_FAIL;
 8009658:	2303      	movs	r3, #3
 800965a:	75fb      	strb	r3, [r7, #23]
      break;
 800965c:	bf00      	nop
  }

  return (uint8_t)ret;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800967a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	32b0      	adds	r2, #176	@ 0xb0
 8009686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800968e:	2303      	movs	r3, #3
 8009690:	e065      	b.n	800975e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	32b0      	adds	r2, #176	@ 0xb0
 800969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80096a2:	78fb      	ldrb	r3, [r7, #3]
 80096a4:	f003 020f 	and.w	r2, r3, #15
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	440b      	add	r3, r1
 80096b4:	3318      	adds	r3, #24
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d02f      	beq.n	800971c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80096bc:	78fb      	ldrb	r3, [r7, #3]
 80096be:	f003 020f 	and.w	r2, r3, #15
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	440b      	add	r3, r1
 80096ce:	3318      	adds	r3, #24
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	78fb      	ldrb	r3, [r7, #3]
 80096d4:	f003 010f 	and.w	r1, r3, #15
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	460b      	mov	r3, r1
 80096dc:	00db      	lsls	r3, r3, #3
 80096de:	440b      	add	r3, r1
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4403      	add	r3, r0
 80096e4:	331c      	adds	r3, #28
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80096ec:	fb01 f303 	mul.w	r3, r1, r3
 80096f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d112      	bne.n	800971c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80096f6:	78fb      	ldrb	r3, [r7, #3]
 80096f8:	f003 020f 	and.w	r2, r3, #15
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	440b      	add	r3, r1
 8009708:	3318      	adds	r3, #24
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800970e:	78f9      	ldrb	r1, [r7, #3]
 8009710:	2300      	movs	r3, #0
 8009712:	2200      	movs	r2, #0
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f002 f9a4 	bl	800ba62 <USBD_LL_Transmit>
 800971a:	e01f      	b.n	800975c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2200      	movs	r2, #0
 8009720:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	33b0      	adds	r3, #176	@ 0xb0
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d010      	beq.n	800975c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	33b0      	adds	r3, #176	@ 0xb0
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009758:	78fa      	ldrb	r2, [r7, #3]
 800975a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	460b      	mov	r3, r1
 8009770:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	32b0      	adds	r2, #176	@ 0xb0
 800977c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009780:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	32b0      	adds	r2, #176	@ 0xb0
 800978c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009794:	2303      	movs	r3, #3
 8009796:	e01a      	b.n	80097ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f002 f9a2 	bl	800bae6 <USBD_LL_GetRxDataSize>
 80097a2:	4602      	mov	r2, r0
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	33b0      	adds	r3, #176	@ 0xb0
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80097c8:	4611      	mov	r1, r2
 80097ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	32b0      	adds	r2, #176	@ 0xb0
 80097e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e024      	b.n	8009842 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	33b0      	adds	r3, #176	@ 0xb0
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d019      	beq.n	8009840 <USBD_CDC_EP0_RxReady+0x6a>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009812:	2bff      	cmp	r3, #255	@ 0xff
 8009814:	d014      	beq.n	8009840 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	33b0      	adds	r3, #176	@ 0xb0
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800982e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009836:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	22ff      	movs	r2, #255	@ 0xff
 800983c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009854:	2182      	movs	r1, #130	@ 0x82
 8009856:	4818      	ldr	r0, [pc, #96]	@ (80098b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009858:	f000 fd4f 	bl	800a2fa <USBD_GetEpDesc>
 800985c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800985e:	2101      	movs	r1, #1
 8009860:	4815      	ldr	r0, [pc, #84]	@ (80098b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009862:	f000 fd4a 	bl	800a2fa <USBD_GetEpDesc>
 8009866:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009868:	2181      	movs	r1, #129	@ 0x81
 800986a:	4813      	ldr	r0, [pc, #76]	@ (80098b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800986c:	f000 fd45 	bl	800a2fa <USBD_GetEpDesc>
 8009870:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2210      	movs	r2, #16
 800987c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d006      	beq.n	8009892 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2200      	movs	r2, #0
 8009888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800988c:	711a      	strb	r2, [r3, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d006      	beq.n	80098a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098a0:	711a      	strb	r2, [r3, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2243      	movs	r2, #67	@ 0x43
 80098aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098ac:	4b02      	ldr	r3, [pc, #8]	@ (80098b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	2000007c 	.word	0x2000007c

080098bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098c4:	2182      	movs	r1, #130	@ 0x82
 80098c6:	4818      	ldr	r0, [pc, #96]	@ (8009928 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098c8:	f000 fd17 	bl	800a2fa <USBD_GetEpDesc>
 80098cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098ce:	2101      	movs	r1, #1
 80098d0:	4815      	ldr	r0, [pc, #84]	@ (8009928 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098d2:	f000 fd12 	bl	800a2fa <USBD_GetEpDesc>
 80098d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098d8:	2181      	movs	r1, #129	@ 0x81
 80098da:	4813      	ldr	r0, [pc, #76]	@ (8009928 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098dc:	f000 fd0d 	bl	800a2fa <USBD_GetEpDesc>
 80098e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2210      	movs	r2, #16
 80098ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d006      	beq.n	8009902 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	2200      	movs	r2, #0
 80098f8:	711a      	strb	r2, [r3, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f042 0202 	orr.w	r2, r2, #2
 8009900:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d006      	beq.n	8009916 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	711a      	strb	r2, [r3, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f042 0202 	orr.w	r2, r2, #2
 8009914:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2243      	movs	r2, #67	@ 0x43
 800991a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800991c:	4b02      	ldr	r3, [pc, #8]	@ (8009928 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	2000007c 	.word	0x2000007c

0800992c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009934:	2182      	movs	r1, #130	@ 0x82
 8009936:	4818      	ldr	r0, [pc, #96]	@ (8009998 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009938:	f000 fcdf 	bl	800a2fa <USBD_GetEpDesc>
 800993c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800993e:	2101      	movs	r1, #1
 8009940:	4815      	ldr	r0, [pc, #84]	@ (8009998 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009942:	f000 fcda 	bl	800a2fa <USBD_GetEpDesc>
 8009946:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009948:	2181      	movs	r1, #129	@ 0x81
 800994a:	4813      	ldr	r0, [pc, #76]	@ (8009998 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800994c:	f000 fcd5 	bl	800a2fa <USBD_GetEpDesc>
 8009950:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2210      	movs	r2, #16
 800995c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d006      	beq.n	8009972 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	2200      	movs	r2, #0
 8009968:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800996c:	711a      	strb	r2, [r3, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d006      	beq.n	8009986 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009980:	711a      	strb	r2, [r3, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2243      	movs	r2, #67	@ 0x43
 800998a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800998c:	4b02      	ldr	r3, [pc, #8]	@ (8009998 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800998e:	4618      	mov	r0, r3
 8009990:	3718      	adds	r7, #24
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	2000007c 	.word	0x2000007c

0800999c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	220a      	movs	r2, #10
 80099a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80099aa:	4b03      	ldr	r3, [pc, #12]	@ (80099b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20000038 	.word	0x20000038

080099bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e009      	b.n	80099e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	33b0      	adds	r3, #176	@ 0xb0
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	32b0      	adds	r2, #176	@ 0xb0
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e008      	b.n	8009a28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	32b0      	adds	r2, #176	@ 0xb0
 8009a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e004      	b.n	8009a62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
	...

08009a70 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	32b0      	adds	r2, #176	@ 0xb0
 8009a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a86:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e025      	b.n	8009ae2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d11f      	bne.n	8009ae0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009aa8:	4b10      	ldr	r3, [pc, #64]	@ (8009aec <USBD_CDC_TransmitPacket+0x7c>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f003 020f 	and.w	r2, r3, #15
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4403      	add	r3, r0
 8009ac2:	3318      	adds	r3, #24
 8009ac4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009ac6:	4b09      	ldr	r3, [pc, #36]	@ (8009aec <USBD_CDC_TransmitPacket+0x7c>)
 8009ac8:	7819      	ldrb	r1, [r3, #0]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 ffc3 	bl	800ba62 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	200000bf 	.word	0x200000bf

08009af0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	32b0      	adds	r2, #176	@ 0xb0
 8009b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b06:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	32b0      	adds	r2, #176	@ 0xb0
 8009b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e018      	b.n	8009b50 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7c1b      	ldrb	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d10a      	bne.n	8009b3c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b26:	4b0c      	ldr	r3, [pc, #48]	@ (8009b58 <USBD_CDC_ReceivePacket+0x68>)
 8009b28:	7819      	ldrb	r1, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f001 ffb5 	bl	800baa4 <USBD_LL_PrepareReceive>
 8009b3a:	e008      	b.n	8009b4e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b3c:	4b06      	ldr	r3, [pc, #24]	@ (8009b58 <USBD_CDC_ReceivePacket+0x68>)
 8009b3e:	7819      	ldrb	r1, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b46:	2340      	movs	r3, #64	@ 0x40
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f001 ffab 	bl	800baa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	200000c0 	.word	0x200000c0

08009b5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	4613      	mov	r3, r2
 8009b68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e01f      	b.n	8009bb4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	79fa      	ldrb	r2, [r7, #7]
 8009ba6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f001 fe25 	bl	800b7f8 <USBD_LL_Init>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e025      	b.n	8009c20 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	32ae      	adds	r2, #174	@ 0xae
 8009be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00f      	beq.n	8009c10 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	32ae      	adds	r2, #174	@ 0xae
 8009bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c00:	f107 020e 	add.w	r2, r7, #14
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
 8009c08:	4602      	mov	r2, r0
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f001 fe2d 	bl	800b890 <USBD_LL_Start>
 8009c36:	4603      	mov	r3, r0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c48:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d009      	beq.n	8009c84 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	78fa      	ldrb	r2, [r7, #3]
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	460b      	mov	r3, r1
 8009c98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	78fa      	ldrb	r2, [r7, #3]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b084      	sub	sp, #16
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f001 f90c 	bl	800aef2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009ce8:	461a      	mov	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009cf6:	f003 031f 	and.w	r3, r3, #31
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d01a      	beq.n	8009d34 <USBD_LL_SetupStage+0x72>
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d822      	bhi.n	8009d48 <USBD_LL_SetupStage+0x86>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <USBD_LL_SetupStage+0x4a>
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d00a      	beq.n	8009d20 <USBD_LL_SetupStage+0x5e>
 8009d0a:	e01d      	b.n	8009d48 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fb63 	bl	800a3e0 <USBD_StdDevReq>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d1e:	e020      	b.n	8009d62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fbcb 	bl	800a4c4 <USBD_StdItfReq>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]
      break;
 8009d32:	e016      	b.n	8009d62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fc2d 	bl	800a59c <USBD_StdEPReq>
 8009d42:	4603      	mov	r3, r0
 8009d44:	73fb      	strb	r3, [r7, #15]
      break;
 8009d46:	e00c      	b.n	8009d62 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009d4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f001 fdfa 	bl	800b950 <USBD_LL_StallEP>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d60:	bf00      	nop
  }

  return ret;
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	460b      	mov	r3, r1
 8009d76:	607a      	str	r2, [r7, #4]
 8009d78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009d7e:	7afb      	ldrb	r3, [r7, #11]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d16e      	bne.n	8009e62 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009d8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	f040 8098 	bne.w	8009ec8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d913      	bls.n	8009dcc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	1ad2      	subs	r2, r2, r3
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	bf28      	it	cs
 8009dbe:	4613      	movcs	r3, r2
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6879      	ldr	r1, [r7, #4]
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f001 f994 	bl	800b0f2 <USBD_CtlContinueRx>
 8009dca:	e07d      	b.n	8009ec8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d014      	beq.n	8009e04 <USBD_LL_DataOutStage+0x98>
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d81d      	bhi.n	8009e1a <USBD_LL_DataOutStage+0xae>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <USBD_LL_DataOutStage+0x7c>
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d003      	beq.n	8009dee <USBD_LL_DataOutStage+0x82>
 8009de6:	e018      	b.n	8009e1a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	75bb      	strb	r3, [r7, #22]
            break;
 8009dec:	e018      	b.n	8009e20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	4619      	mov	r1, r3
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fa64 	bl	800a2c6 <USBD_CoreFindIF>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	75bb      	strb	r3, [r7, #22]
            break;
 8009e02:	e00d      	b.n	8009e20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f000 fa66 	bl	800a2e0 <USBD_CoreFindEP>
 8009e14:	4603      	mov	r3, r0
 8009e16:	75bb      	strb	r3, [r7, #22]
            break;
 8009e18:	e002      	b.n	8009e20 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	75bb      	strb	r3, [r7, #22]
            break;
 8009e1e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e20:	7dbb      	ldrb	r3, [r7, #22]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d119      	bne.n	8009e5a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d113      	bne.n	8009e5a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e32:	7dba      	ldrb	r2, [r7, #22]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	32ae      	adds	r2, #174	@ 0xae
 8009e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00b      	beq.n	8009e5a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009e42:	7dba      	ldrb	r2, [r7, #22]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009e4a:	7dba      	ldrb	r2, [r7, #22]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	32ae      	adds	r2, #174	@ 0xae
 8009e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f001 f95a 	bl	800b114 <USBD_CtlSendStatus>
 8009e60:	e032      	b.n	8009ec8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e62:	7afb      	ldrb	r3, [r7, #11]
 8009e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 fa37 	bl	800a2e0 <USBD_CoreFindEP>
 8009e72:	4603      	mov	r3, r0
 8009e74:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e76:	7dbb      	ldrb	r3, [r7, #22]
 8009e78:	2bff      	cmp	r3, #255	@ 0xff
 8009e7a:	d025      	beq.n	8009ec8 <USBD_LL_DataOutStage+0x15c>
 8009e7c:	7dbb      	ldrb	r3, [r7, #22]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d122      	bne.n	8009ec8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d117      	bne.n	8009ebe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e8e:	7dba      	ldrb	r2, [r7, #22]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	32ae      	adds	r2, #174	@ 0xae
 8009e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00f      	beq.n	8009ebe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009e9e:	7dba      	ldrb	r2, [r7, #22]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009ea6:	7dba      	ldrb	r2, [r7, #22]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	32ae      	adds	r2, #174	@ 0xae
 8009eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	7afa      	ldrb	r2, [r7, #11]
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	4798      	blx	r3
 8009eba:	4603      	mov	r3, r0
 8009ebc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
 8009ec6:	e000      	b.n	8009eca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b086      	sub	sp, #24
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	60f8      	str	r0, [r7, #12]
 8009eda:	460b      	mov	r3, r1
 8009edc:	607a      	str	r2, [r7, #4]
 8009ede:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ee0:	7afb      	ldrb	r3, [r7, #11]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d16f      	bne.n	8009fc6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3314      	adds	r3, #20
 8009eea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d15a      	bne.n	8009fac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	689a      	ldr	r2, [r3, #8]
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d914      	bls.n	8009f2c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	689a      	ldr	r2, [r3, #8]
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	1ad2      	subs	r2, r2, r3
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f001 f8bc 	bl	800b096 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f1e:	2300      	movs	r3, #0
 8009f20:	2200      	movs	r2, #0
 8009f22:	2100      	movs	r1, #0
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f001 fdbd 	bl	800baa4 <USBD_LL_PrepareReceive>
 8009f2a:	e03f      	b.n	8009fac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	68da      	ldr	r2, [r3, #12]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d11c      	bne.n	8009f72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d316      	bcc.n	8009f72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d20f      	bcs.n	8009f72 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f52:	2200      	movs	r2, #0
 8009f54:	2100      	movs	r1, #0
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f001 f89d 	bl	800b096 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f64:	2300      	movs	r3, #0
 8009f66:	2200      	movs	r2, #0
 8009f68:	2100      	movs	r1, #0
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f001 fd9a 	bl	800baa4 <USBD_LL_PrepareReceive>
 8009f70:	e01c      	b.n	8009fac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d10f      	bne.n	8009f9e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d009      	beq.n	8009f9e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f9e:	2180      	movs	r1, #128	@ 0x80
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f001 fcd5 	bl	800b950 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f001 f8c7 	bl	800b13a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d03a      	beq.n	800a02c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff fe42 	bl	8009c40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009fc4:	e032      	b.n	800a02c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009fc6:	7afb      	ldrb	r3, [r7, #11]
 8009fc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 f985 	bl	800a2e0 <USBD_CoreFindEP>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	2bff      	cmp	r3, #255	@ 0xff
 8009fde:	d025      	beq.n	800a02c <USBD_LL_DataInStage+0x15a>
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d122      	bne.n	800a02c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d11c      	bne.n	800a02c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009ff2:	7dfa      	ldrb	r2, [r7, #23]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	32ae      	adds	r2, #174	@ 0xae
 8009ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d014      	beq.n	800a02c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a002:	7dfa      	ldrb	r2, [r7, #23]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a00a:	7dfa      	ldrb	r2, [r7, #23]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	32ae      	adds	r2, #174	@ 0xae
 800a010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	7afa      	ldrb	r2, [r7, #11]
 800a018:	4611      	mov	r1, r2
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	4798      	blx	r3
 800a01e:	4603      	mov	r3, r0
 800a020:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a022:	7dbb      	ldrb	r3, [r7, #22]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a028:	7dbb      	ldrb	r3, [r7, #22]
 800a02a:	e000      	b.n	800a02e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d014      	beq.n	800a09c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00e      	beq.n	800a09c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6852      	ldr	r2, [r2, #4]
 800a08a:	b2d2      	uxtb	r2, r2
 800a08c:	4611      	mov	r1, r2
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	4798      	blx	r3
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a098:	2303      	movs	r3, #3
 800a09a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a09c:	2340      	movs	r3, #64	@ 0x40
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f001 fc0f 	bl	800b8c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2240      	movs	r2, #64	@ 0x40
 800a0b4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0b8:	2340      	movs	r3, #64	@ 0x40
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2180      	movs	r1, #128	@ 0x80
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f001 fc01 	bl	800b8c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2240      	movs	r2, #64	@ 0x40
 800a0ce:	621a      	str	r2, [r3, #32]

  return ret;
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	78fa      	ldrb	r2, [r7, #3]
 800a0ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	d006      	beq.n	800a11c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a114:	b2da      	uxtb	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2204      	movs	r2, #4
 800a120:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b04      	cmp	r3, #4
 800a144:	d106      	bne.n	800a154 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a14c:	b2da      	uxtb	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b03      	cmp	r3, #3
 800a174:	d110      	bne.n	800a198 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00b      	beq.n	800a198 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a186:	69db      	ldr	r3, [r3, #28]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d005      	beq.n	800a198 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a192:	69db      	ldr	r3, [r3, #28]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b082      	sub	sp, #8
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	32ae      	adds	r2, #174	@ 0xae
 800a1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	e01c      	b.n	800a1fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d115      	bne.n	800a1fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	32ae      	adds	r2, #174	@ 0xae
 800a1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	32ae      	adds	r2, #174	@ 0xae
 800a1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	78fa      	ldrb	r2, [r7, #3]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b082      	sub	sp, #8
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	460b      	mov	r3, r1
 800a210:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	32ae      	adds	r2, #174	@ 0xae
 800a21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a224:	2303      	movs	r3, #3
 800a226:	e01c      	b.n	800a262 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b03      	cmp	r3, #3
 800a232:	d115      	bne.n	800a260 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	32ae      	adds	r2, #174	@ 0xae
 800a23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00b      	beq.n	800a260 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	32ae      	adds	r2, #174	@ 0xae
 800a252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a258:	78fa      	ldrb	r2, [r7, #3]
 800a25a:	4611      	mov	r1, r2
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b083      	sub	sp, #12
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00e      	beq.n	800a2bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	6852      	ldr	r2, [r2, #4]
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	4798      	blx	r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b083      	sub	sp, #12
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b086      	sub	sp, #24
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	460b      	mov	r3, r1
 800a304:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a30e:	2300      	movs	r3, #0
 800a310:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	885b      	ldrh	r3, [r3, #2]
 800a316:	b29b      	uxth	r3, r3
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	7812      	ldrb	r2, [r2, #0]
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d91f      	bls.n	800a360 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a326:	e013      	b.n	800a350 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a328:	f107 030a 	add.w	r3, r7, #10
 800a32c:	4619      	mov	r1, r3
 800a32e:	6978      	ldr	r0, [r7, #20]
 800a330:	f000 f81b 	bl	800a36a <USBD_GetNextDesc>
 800a334:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	785b      	ldrb	r3, [r3, #1]
 800a33a:	2b05      	cmp	r3, #5
 800a33c:	d108      	bne.n	800a350 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	789b      	ldrb	r3, [r3, #2]
 800a346:	78fa      	ldrb	r2, [r7, #3]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d008      	beq.n	800a35e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	885b      	ldrh	r3, [r3, #2]
 800a354:	b29a      	uxth	r2, r3
 800a356:	897b      	ldrh	r3, [r7, #10]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d8e5      	bhi.n	800a328 <USBD_GetEpDesc+0x2e>
 800a35c:	e000      	b.n	800a360 <USBD_GetEpDesc+0x66>
          break;
 800a35e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a360:	693b      	ldr	r3, [r7, #16]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	7812      	ldrb	r2, [r2, #0]
 800a380:	4413      	add	r3, r2
 800a382:	b29a      	uxth	r2, r3
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	461a      	mov	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4413      	add	r3, r2
 800a392:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a394:	68fb      	ldr	r3, [r7, #12]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b087      	sub	sp, #28
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a3c0:	8a3b      	ldrh	r3, [r7, #16]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	b21a      	sxth	r2, r3
 800a3c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	b21b      	sxth	r3, r3
 800a3ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	371c      	adds	r7, #28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
	...

0800a3e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3f6:	2b40      	cmp	r3, #64	@ 0x40
 800a3f8:	d005      	beq.n	800a406 <USBD_StdDevReq+0x26>
 800a3fa:	2b40      	cmp	r3, #64	@ 0x40
 800a3fc:	d857      	bhi.n	800a4ae <USBD_StdDevReq+0xce>
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00f      	beq.n	800a422 <USBD_StdDevReq+0x42>
 800a402:	2b20      	cmp	r3, #32
 800a404:	d153      	bne.n	800a4ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	32ae      	adds	r2, #174	@ 0xae
 800a410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	4798      	blx	r3
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]
      break;
 800a420:	e04a      	b.n	800a4b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	2b09      	cmp	r3, #9
 800a428:	d83b      	bhi.n	800a4a2 <USBD_StdDevReq+0xc2>
 800a42a:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <USBD_StdDevReq+0x50>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a485 	.word	0x0800a485
 800a434:	0800a499 	.word	0x0800a499
 800a438:	0800a4a3 	.word	0x0800a4a3
 800a43c:	0800a48f 	.word	0x0800a48f
 800a440:	0800a4a3 	.word	0x0800a4a3
 800a444:	0800a463 	.word	0x0800a463
 800a448:	0800a459 	.word	0x0800a459
 800a44c:	0800a4a3 	.word	0x0800a4a3
 800a450:	0800a47b 	.word	0x0800a47b
 800a454:	0800a46d 	.word	0x0800a46d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa3c 	bl	800a8d8 <USBD_GetDescriptor>
          break;
 800a460:	e024      	b.n	800a4ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fba1 	bl	800abac <USBD_SetAddress>
          break;
 800a46a:	e01f      	b.n	800a4ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fbe0 	bl	800ac34 <USBD_SetConfig>
 800a474:	4603      	mov	r3, r0
 800a476:	73fb      	strb	r3, [r7, #15]
          break;
 800a478:	e018      	b.n	800a4ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a47a:	6839      	ldr	r1, [r7, #0]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fc83 	bl	800ad88 <USBD_GetConfig>
          break;
 800a482:	e013      	b.n	800a4ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a484:	6839      	ldr	r1, [r7, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fcb4 	bl	800adf4 <USBD_GetStatus>
          break;
 800a48c:	e00e      	b.n	800a4ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fce3 	bl	800ae5c <USBD_SetFeature>
          break;
 800a496:	e009      	b.n	800a4ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fd07 	bl	800aeae <USBD_ClrFeature>
          break;
 800a4a0:	e004      	b.n	800a4ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fd5e 	bl	800af66 <USBD_CtlError>
          break;
 800a4aa:	bf00      	nop
      }
      break;
 800a4ac:	e004      	b.n	800a4b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fd58 	bl	800af66 <USBD_CtlError>
      break;
 800a4b6:	bf00      	nop
  }

  return ret;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop

0800a4c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4da:	2b40      	cmp	r3, #64	@ 0x40
 800a4dc:	d005      	beq.n	800a4ea <USBD_StdItfReq+0x26>
 800a4de:	2b40      	cmp	r3, #64	@ 0x40
 800a4e0:	d852      	bhi.n	800a588 <USBD_StdItfReq+0xc4>
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <USBD_StdItfReq+0x26>
 800a4e6:	2b20      	cmp	r3, #32
 800a4e8:	d14e      	bne.n	800a588 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d840      	bhi.n	800a57a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	889b      	ldrh	r3, [r3, #4]
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d836      	bhi.n	800a570 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	889b      	ldrh	r3, [r3, #4]
 800a506:	b2db      	uxtb	r3, r3
 800a508:	4619      	mov	r1, r3
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7ff fedb 	bl	800a2c6 <USBD_CoreFindIF>
 800a510:	4603      	mov	r3, r0
 800a512:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	2bff      	cmp	r3, #255	@ 0xff
 800a518:	d01d      	beq.n	800a556 <USBD_StdItfReq+0x92>
 800a51a:	7bbb      	ldrb	r3, [r7, #14]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d11a      	bne.n	800a556 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a520:	7bba      	ldrb	r2, [r7, #14]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	32ae      	adds	r2, #174	@ 0xae
 800a526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00f      	beq.n	800a550 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a530:	7bba      	ldrb	r2, [r7, #14]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a538:	7bba      	ldrb	r2, [r7, #14]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	32ae      	adds	r2, #174	@ 0xae
 800a53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	4798      	blx	r3
 800a54a:	4603      	mov	r3, r0
 800a54c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a54e:	e004      	b.n	800a55a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a550:	2303      	movs	r3, #3
 800a552:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a554:	e001      	b.n	800a55a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a556:	2303      	movs	r3, #3
 800a558:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	88db      	ldrh	r3, [r3, #6]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d110      	bne.n	800a584 <USBD_StdItfReq+0xc0>
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10d      	bne.n	800a584 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fdd3 	bl	800b114 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a56e:	e009      	b.n	800a584 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fcf7 	bl	800af66 <USBD_CtlError>
          break;
 800a578:	e004      	b.n	800a584 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fcf2 	bl	800af66 <USBD_CtlError>
          break;
 800a582:	e000      	b.n	800a586 <USBD_StdItfReq+0xc2>
          break;
 800a584:	bf00      	nop
      }
      break;
 800a586:	e004      	b.n	800a592 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fceb 	bl	800af66 <USBD_CtlError>
      break;
 800a590:	bf00      	nop
  }

  return ret;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	889b      	ldrh	r3, [r3, #4]
 800a5ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5b8:	2b40      	cmp	r3, #64	@ 0x40
 800a5ba:	d007      	beq.n	800a5cc <USBD_StdEPReq+0x30>
 800a5bc:	2b40      	cmp	r3, #64	@ 0x40
 800a5be:	f200 817f 	bhi.w	800a8c0 <USBD_StdEPReq+0x324>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d02a      	beq.n	800a61c <USBD_StdEPReq+0x80>
 800a5c6:	2b20      	cmp	r3, #32
 800a5c8:	f040 817a 	bne.w	800a8c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff fe85 	bl	800a2e0 <USBD_CoreFindEP>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5da:	7b7b      	ldrb	r3, [r7, #13]
 800a5dc:	2bff      	cmp	r3, #255	@ 0xff
 800a5de:	f000 8174 	beq.w	800a8ca <USBD_StdEPReq+0x32e>
 800a5e2:	7b7b      	ldrb	r3, [r7, #13]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f040 8170 	bne.w	800a8ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a5ea:	7b7a      	ldrb	r2, [r7, #13]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a5f2:	7b7a      	ldrb	r2, [r7, #13]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	32ae      	adds	r2, #174	@ 0xae
 800a5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 8163 	beq.w	800a8ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a604:	7b7a      	ldrb	r2, [r7, #13]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	32ae      	adds	r2, #174	@ 0xae
 800a60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	4798      	blx	r3
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a61a:	e156      	b.n	800a8ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	785b      	ldrb	r3, [r3, #1]
 800a620:	2b03      	cmp	r3, #3
 800a622:	d008      	beq.n	800a636 <USBD_StdEPReq+0x9a>
 800a624:	2b03      	cmp	r3, #3
 800a626:	f300 8145 	bgt.w	800a8b4 <USBD_StdEPReq+0x318>
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 809b 	beq.w	800a766 <USBD_StdEPReq+0x1ca>
 800a630:	2b01      	cmp	r3, #1
 800a632:	d03c      	beq.n	800a6ae <USBD_StdEPReq+0x112>
 800a634:	e13e      	b.n	800a8b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d002      	beq.n	800a648 <USBD_StdEPReq+0xac>
 800a642:	2b03      	cmp	r3, #3
 800a644:	d016      	beq.n	800a674 <USBD_StdEPReq+0xd8>
 800a646:	e02c      	b.n	800a6a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a648:	7bbb      	ldrb	r3, [r7, #14]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00d      	beq.n	800a66a <USBD_StdEPReq+0xce>
 800a64e:	7bbb      	ldrb	r3, [r7, #14]
 800a650:	2b80      	cmp	r3, #128	@ 0x80
 800a652:	d00a      	beq.n	800a66a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a654:	7bbb      	ldrb	r3, [r7, #14]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f001 f979 	bl	800b950 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a65e:	2180      	movs	r1, #128	@ 0x80
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f001 f975 	bl	800b950 <USBD_LL_StallEP>
 800a666:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a668:	e020      	b.n	800a6ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fc7a 	bl	800af66 <USBD_CtlError>
              break;
 800a672:	e01b      	b.n	800a6ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	885b      	ldrh	r3, [r3, #2]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10e      	bne.n	800a69a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00b      	beq.n	800a69a <USBD_StdEPReq+0xfe>
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	2b80      	cmp	r3, #128	@ 0x80
 800a686:	d008      	beq.n	800a69a <USBD_StdEPReq+0xfe>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	88db      	ldrh	r3, [r3, #6]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d104      	bne.n	800a69a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a690:	7bbb      	ldrb	r3, [r7, #14]
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f001 f95b 	bl	800b950 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fd3a 	bl	800b114 <USBD_CtlSendStatus>

              break;
 800a6a0:	e004      	b.n	800a6ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fc5e 	bl	800af66 <USBD_CtlError>
              break;
 800a6aa:	bf00      	nop
          }
          break;
 800a6ac:	e107      	b.n	800a8be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d002      	beq.n	800a6c0 <USBD_StdEPReq+0x124>
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d016      	beq.n	800a6ec <USBD_StdEPReq+0x150>
 800a6be:	e04b      	b.n	800a758 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00d      	beq.n	800a6e2 <USBD_StdEPReq+0x146>
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
 800a6c8:	2b80      	cmp	r3, #128	@ 0x80
 800a6ca:	d00a      	beq.n	800a6e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f001 f93d 	bl	800b950 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6d6:	2180      	movs	r1, #128	@ 0x80
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f001 f939 	bl	800b950 <USBD_LL_StallEP>
 800a6de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6e0:	e040      	b.n	800a764 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fc3e 	bl	800af66 <USBD_CtlError>
              break;
 800a6ea:	e03b      	b.n	800a764 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	885b      	ldrh	r3, [r3, #2]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d136      	bne.n	800a762 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6f4:	7bbb      	ldrb	r3, [r7, #14]
 800a6f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d004      	beq.n	800a708 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f001 f943 	bl	800b98e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fd03 	bl	800b114 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7ff fde4 	bl	800a2e0 <USBD_CoreFindEP>
 800a718:	4603      	mov	r3, r0
 800a71a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a71c:	7b7b      	ldrb	r3, [r7, #13]
 800a71e:	2bff      	cmp	r3, #255	@ 0xff
 800a720:	d01f      	beq.n	800a762 <USBD_StdEPReq+0x1c6>
 800a722:	7b7b      	ldrb	r3, [r7, #13]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d11c      	bne.n	800a762 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a728:	7b7a      	ldrb	r2, [r7, #13]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a730:	7b7a      	ldrb	r2, [r7, #13]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	32ae      	adds	r2, #174	@ 0xae
 800a736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d010      	beq.n	800a762 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a740:	7b7a      	ldrb	r2, [r7, #13]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	32ae      	adds	r2, #174	@ 0xae
 800a746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3
 800a752:	4603      	mov	r3, r0
 800a754:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a756:	e004      	b.n	800a762 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fc03 	bl	800af66 <USBD_CtlError>
              break;
 800a760:	e000      	b.n	800a764 <USBD_StdEPReq+0x1c8>
              break;
 800a762:	bf00      	nop
          }
          break;
 800a764:	e0ab      	b.n	800a8be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d002      	beq.n	800a778 <USBD_StdEPReq+0x1dc>
 800a772:	2b03      	cmp	r3, #3
 800a774:	d032      	beq.n	800a7dc <USBD_StdEPReq+0x240>
 800a776:	e097      	b.n	800a8a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a778:	7bbb      	ldrb	r3, [r7, #14]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d007      	beq.n	800a78e <USBD_StdEPReq+0x1f2>
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	2b80      	cmp	r3, #128	@ 0x80
 800a782:	d004      	beq.n	800a78e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fbed 	bl	800af66 <USBD_CtlError>
                break;
 800a78c:	e091      	b.n	800a8b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a78e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a792:	2b00      	cmp	r3, #0
 800a794:	da0b      	bge.n	800a7ae <USBD_StdEPReq+0x212>
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	3310      	adds	r3, #16
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	e00b      	b.n	800a7c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fc43 	bl	800b060 <USBD_CtlSendData>
              break;
 800a7da:	e06a      	b.n	800a8b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a7dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	da11      	bge.n	800a808 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
 800a7e6:	f003 020f 	and.w	r2, r3, #15
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	440b      	add	r3, r1
 800a7f6:	3324      	adds	r3, #36	@ 0x24
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d117      	bne.n	800a82e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fbb0 	bl	800af66 <USBD_CtlError>
                  break;
 800a806:	e054      	b.n	800a8b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	f003 020f 	and.w	r2, r3, #15
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	4613      	mov	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	440b      	add	r3, r1
 800a81a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d104      	bne.n	800a82e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fb9d 	bl	800af66 <USBD_CtlError>
                  break;
 800a82c:	e041      	b.n	800a8b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a82e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a832:	2b00      	cmp	r3, #0
 800a834:	da0b      	bge.n	800a84e <USBD_StdEPReq+0x2b2>
 800a836:	7bbb      	ldrb	r3, [r7, #14]
 800a838:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a83c:	4613      	mov	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	3310      	adds	r3, #16
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	4413      	add	r3, r2
 800a84a:	3304      	adds	r3, #4
 800a84c:	e00b      	b.n	800a866 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	4413      	add	r3, r2
 800a864:	3304      	adds	r3, #4
 800a866:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a868:	7bbb      	ldrb	r3, [r7, #14]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d002      	beq.n	800a874 <USBD_StdEPReq+0x2d8>
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
 800a870:	2b80      	cmp	r3, #128	@ 0x80
 800a872:	d103      	bne.n	800a87c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	e00e      	b.n	800a89a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 f8a3 	bl	800b9cc <USBD_LL_IsStallEP>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2201      	movs	r2, #1
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	e002      	b.n	800a89a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	2200      	movs	r2, #0
 800a898:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	2202      	movs	r2, #2
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fbdd 	bl	800b060 <USBD_CtlSendData>
              break;
 800a8a6:	e004      	b.n	800a8b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fb5b 	bl	800af66 <USBD_CtlError>
              break;
 800a8b0:	bf00      	nop
          }
          break;
 800a8b2:	e004      	b.n	800a8be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fb55 	bl	800af66 <USBD_CtlError>
          break;
 800a8bc:	bf00      	nop
      }
      break;
 800a8be:	e005      	b.n	800a8cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fb4f 	bl	800af66 <USBD_CtlError>
      break;
 800a8c8:	e000      	b.n	800a8cc <USBD_StdEPReq+0x330>
      break;
 800a8ca:	bf00      	nop
  }

  return ret;
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
	...

0800a8d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	885b      	ldrh	r3, [r3, #2]
 800a8f2:	0a1b      	lsrs	r3, r3, #8
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	2b06      	cmp	r3, #6
 800a8fa:	f200 8128 	bhi.w	800ab4e <USBD_GetDescriptor+0x276>
 800a8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a904 <USBD_GetDescriptor+0x2c>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a921 	.word	0x0800a921
 800a908:	0800a939 	.word	0x0800a939
 800a90c:	0800a979 	.word	0x0800a979
 800a910:	0800ab4f 	.word	0x0800ab4f
 800a914:	0800ab4f 	.word	0x0800ab4f
 800a918:	0800aaef 	.word	0x0800aaef
 800a91c:	0800ab1b 	.word	0x0800ab1b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	7c12      	ldrb	r2, [r2, #16]
 800a92c:	f107 0108 	add.w	r1, r7, #8
 800a930:	4610      	mov	r0, r2
 800a932:	4798      	blx	r3
 800a934:	60f8      	str	r0, [r7, #12]
      break;
 800a936:	e112      	b.n	800ab5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	7c1b      	ldrb	r3, [r3, #16]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10d      	bne.n	800a95c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a948:	f107 0208 	add.w	r2, r7, #8
 800a94c:	4610      	mov	r0, r2
 800a94e:	4798      	blx	r3
 800a950:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3301      	adds	r3, #1
 800a956:	2202      	movs	r2, #2
 800a958:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a95a:	e100      	b.n	800ab5e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a964:	f107 0208 	add.w	r2, r7, #8
 800a968:	4610      	mov	r0, r2
 800a96a:	4798      	blx	r3
 800a96c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3301      	adds	r3, #1
 800a972:	2202      	movs	r2, #2
 800a974:	701a      	strb	r2, [r3, #0]
      break;
 800a976:	e0f2      	b.n	800ab5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	885b      	ldrh	r3, [r3, #2]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b05      	cmp	r3, #5
 800a980:	f200 80ac 	bhi.w	800aadc <USBD_GetDescriptor+0x204>
 800a984:	a201      	add	r2, pc, #4	@ (adr r2, 800a98c <USBD_GetDescriptor+0xb4>)
 800a986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98a:	bf00      	nop
 800a98c:	0800a9a5 	.word	0x0800a9a5
 800a990:	0800a9d9 	.word	0x0800a9d9
 800a994:	0800aa0d 	.word	0x0800aa0d
 800a998:	0800aa41 	.word	0x0800aa41
 800a99c:	0800aa75 	.word	0x0800aa75
 800a9a0:	0800aaa9 	.word	0x0800aaa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	7c12      	ldrb	r2, [r2, #16]
 800a9bc:	f107 0108 	add.w	r1, r7, #8
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	4798      	blx	r3
 800a9c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9c6:	e091      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 facb 	bl	800af66 <USBD_CtlError>
            err++;
 800a9d0:	7afb      	ldrb	r3, [r7, #11]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9d6:	e089      	b.n	800aaec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00b      	beq.n	800a9fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	7c12      	ldrb	r2, [r2, #16]
 800a9f0:	f107 0108 	add.w	r1, r7, #8
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	4798      	blx	r3
 800a9f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9fa:	e077      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fab1 	bl	800af66 <USBD_CtlError>
            err++;
 800aa04:	7afb      	ldrb	r3, [r7, #11]
 800aa06:	3301      	adds	r3, #1
 800aa08:	72fb      	strb	r3, [r7, #11]
          break;
 800aa0a:	e06f      	b.n	800aaec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	7c12      	ldrb	r2, [r2, #16]
 800aa24:	f107 0108 	add.w	r1, r7, #8
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4798      	blx	r3
 800aa2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa2e:	e05d      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fa97 	bl	800af66 <USBD_CtlError>
            err++;
 800aa38:	7afb      	ldrb	r3, [r7, #11]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa3e:	e055      	b.n	800aaec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00b      	beq.n	800aa64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	7c12      	ldrb	r2, [r2, #16]
 800aa58:	f107 0108 	add.w	r1, r7, #8
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4798      	blx	r3
 800aa60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa62:	e043      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fa7d 	bl	800af66 <USBD_CtlError>
            err++;
 800aa6c:	7afb      	ldrb	r3, [r7, #11]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	72fb      	strb	r3, [r7, #11]
          break;
 800aa72:	e03b      	b.n	800aaec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00b      	beq.n	800aa98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	7c12      	ldrb	r2, [r2, #16]
 800aa8c:	f107 0108 	add.w	r1, r7, #8
 800aa90:	4610      	mov	r0, r2
 800aa92:	4798      	blx	r3
 800aa94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa96:	e029      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fa63 	bl	800af66 <USBD_CtlError>
            err++;
 800aaa0:	7afb      	ldrb	r3, [r7, #11]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	72fb      	strb	r3, [r7, #11]
          break;
 800aaa6:	e021      	b.n	800aaec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00b      	beq.n	800aacc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	7c12      	ldrb	r2, [r2, #16]
 800aac0:	f107 0108 	add.w	r1, r7, #8
 800aac4:	4610      	mov	r0, r2
 800aac6:	4798      	blx	r3
 800aac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaca:	e00f      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fa49 	bl	800af66 <USBD_CtlError>
            err++;
 800aad4:	7afb      	ldrb	r3, [r7, #11]
 800aad6:	3301      	adds	r3, #1
 800aad8:	72fb      	strb	r3, [r7, #11]
          break;
 800aada:	e007      	b.n	800aaec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fa41 	bl	800af66 <USBD_CtlError>
          err++;
 800aae4:	7afb      	ldrb	r3, [r7, #11]
 800aae6:	3301      	adds	r3, #1
 800aae8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aaea:	bf00      	nop
      }
      break;
 800aaec:	e037      	b.n	800ab5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	7c1b      	ldrb	r3, [r3, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d109      	bne.n	800ab0a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aafc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aafe:	f107 0208 	add.w	r2, r7, #8
 800ab02:	4610      	mov	r0, r2
 800ab04:	4798      	blx	r3
 800ab06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab08:	e029      	b.n	800ab5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fa2a 	bl	800af66 <USBD_CtlError>
        err++;
 800ab12:	7afb      	ldrb	r3, [r7, #11]
 800ab14:	3301      	adds	r3, #1
 800ab16:	72fb      	strb	r3, [r7, #11]
      break;
 800ab18:	e021      	b.n	800ab5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	7c1b      	ldrb	r3, [r3, #16]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10d      	bne.n	800ab3e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab2a:	f107 0208 	add.w	r2, r7, #8
 800ab2e:	4610      	mov	r0, r2
 800ab30:	4798      	blx	r3
 800ab32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3301      	adds	r3, #1
 800ab38:	2207      	movs	r2, #7
 800ab3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab3c:	e00f      	b.n	800ab5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fa10 	bl	800af66 <USBD_CtlError>
        err++;
 800ab46:	7afb      	ldrb	r3, [r7, #11]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab4c:	e007      	b.n	800ab5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fa08 	bl	800af66 <USBD_CtlError>
      err++;
 800ab56:	7afb      	ldrb	r3, [r7, #11]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab5c:	bf00      	nop
  }

  if (err != 0U)
 800ab5e:	7afb      	ldrb	r3, [r7, #11]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d11e      	bne.n	800aba2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	88db      	ldrh	r3, [r3, #6]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d016      	beq.n	800ab9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ab6c:	893b      	ldrh	r3, [r7, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00e      	beq.n	800ab90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	88da      	ldrh	r2, [r3, #6]
 800ab76:	893b      	ldrh	r3, [r7, #8]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	bf28      	it	cs
 800ab7c:	4613      	movcs	r3, r2
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab82:	893b      	ldrh	r3, [r7, #8]
 800ab84:	461a      	mov	r2, r3
 800ab86:	68f9      	ldr	r1, [r7, #12]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fa69 	bl	800b060 <USBD_CtlSendData>
 800ab8e:	e009      	b.n	800aba4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f9e7 	bl	800af66 <USBD_CtlError>
 800ab98:	e004      	b.n	800aba4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 faba 	bl	800b114 <USBD_CtlSendStatus>
 800aba0:	e000      	b.n	800aba4 <USBD_GetDescriptor+0x2cc>
    return;
 800aba2:	bf00      	nop
  }
}
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop

0800abac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	889b      	ldrh	r3, [r3, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d131      	bne.n	800ac22 <USBD_SetAddress+0x76>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	88db      	ldrh	r3, [r3, #6]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d12d      	bne.n	800ac22 <USBD_SetAddress+0x76>
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	885b      	ldrh	r3, [r3, #2]
 800abca:	2b7f      	cmp	r3, #127	@ 0x7f
 800abcc:	d829      	bhi.n	800ac22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	885b      	ldrh	r3, [r3, #2]
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d104      	bne.n	800abf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f9bc 	bl	800af66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abee:	e01d      	b.n	800ac2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	7bfa      	ldrb	r2, [r7, #15]
 800abf4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 ff11 	bl	800ba24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fa86 	bl	800b114 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac08:	7bfb      	ldrb	r3, [r7, #15]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d004      	beq.n	800ac18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2202      	movs	r2, #2
 800ac12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac16:	e009      	b.n	800ac2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac20:	e004      	b.n	800ac2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f99e 	bl	800af66 <USBD_CtlError>
  }
}
 800ac2a:	bf00      	nop
 800ac2c:	bf00      	nop
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	885b      	ldrh	r3, [r3, #2]
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	4b4e      	ldr	r3, [pc, #312]	@ (800ad84 <USBD_SetConfig+0x150>)
 800ac4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac4c:	4b4d      	ldr	r3, [pc, #308]	@ (800ad84 <USBD_SetConfig+0x150>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d905      	bls.n	800ac60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f985 	bl	800af66 <USBD_CtlError>
    return USBD_FAIL;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e08c      	b.n	800ad7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d002      	beq.n	800ac72 <USBD_SetConfig+0x3e>
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	d029      	beq.n	800acc4 <USBD_SetConfig+0x90>
 800ac70:	e075      	b.n	800ad5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac72:	4b44      	ldr	r3, [pc, #272]	@ (800ad84 <USBD_SetConfig+0x150>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d020      	beq.n	800acbc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac7a:	4b42      	ldr	r3, [pc, #264]	@ (800ad84 <USBD_SetConfig+0x150>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac84:	4b3f      	ldr	r3, [pc, #252]	@ (800ad84 <USBD_SetConfig+0x150>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7fe ffe3 	bl	8009c56 <USBD_SetClassConfig>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d008      	beq.n	800acac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f962 	bl	800af66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2202      	movs	r2, #2
 800aca6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acaa:	e065      	b.n	800ad78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fa31 	bl	800b114 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2203      	movs	r2, #3
 800acb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800acba:	e05d      	b.n	800ad78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fa29 	bl	800b114 <USBD_CtlSendStatus>
      break;
 800acc2:	e059      	b.n	800ad78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800acc4:	4b2f      	ldr	r3, [pc, #188]	@ (800ad84 <USBD_SetConfig+0x150>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d112      	bne.n	800acf2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2202      	movs	r2, #2
 800acd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800acd4:	4b2b      	ldr	r3, [pc, #172]	@ (800ad84 <USBD_SetConfig+0x150>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800acde:	4b29      	ldr	r3, [pc, #164]	@ (800ad84 <USBD_SetConfig+0x150>)
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7fe ffd2 	bl	8009c8e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fa12 	bl	800b114 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acf0:	e042      	b.n	800ad78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800acf2:	4b24      	ldr	r3, [pc, #144]	@ (800ad84 <USBD_SetConfig+0x150>)
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d02a      	beq.n	800ad56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7fe ffc0 	bl	8009c8e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ad84 <USBD_SetConfig+0x150>)
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad18:	4b1a      	ldr	r3, [pc, #104]	@ (800ad84 <USBD_SetConfig+0x150>)
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7fe ff99 	bl	8009c56 <USBD_SetClassConfig>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00f      	beq.n	800ad4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f918 	bl	800af66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7fe ffa5 	bl	8009c8e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2202      	movs	r2, #2
 800ad48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ad4c:	e014      	b.n	800ad78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f9e0 	bl	800b114 <USBD_CtlSendStatus>
      break;
 800ad54:	e010      	b.n	800ad78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f9dc 	bl	800b114 <USBD_CtlSendStatus>
      break;
 800ad5c:	e00c      	b.n	800ad78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f900 	bl	800af66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad66:	4b07      	ldr	r3, [pc, #28]	@ (800ad84 <USBD_SetConfig+0x150>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7fe ff8e 	bl	8009c8e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad72:	2303      	movs	r3, #3
 800ad74:	73fb      	strb	r3, [r7, #15]
      break;
 800ad76:	bf00      	nop
  }

  return ret;
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20000610 	.word	0x20000610

0800ad88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	88db      	ldrh	r3, [r3, #6]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d004      	beq.n	800ada4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f8e2 	bl	800af66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ada2:	e023      	b.n	800adec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b02      	cmp	r3, #2
 800adae:	dc02      	bgt.n	800adb6 <USBD_GetConfig+0x2e>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	dc03      	bgt.n	800adbc <USBD_GetConfig+0x34>
 800adb4:	e015      	b.n	800ade2 <USBD_GetConfig+0x5a>
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d00b      	beq.n	800add2 <USBD_GetConfig+0x4a>
 800adba:	e012      	b.n	800ade2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3308      	adds	r3, #8
 800adc6:	2201      	movs	r2, #1
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f948 	bl	800b060 <USBD_CtlSendData>
        break;
 800add0:	e00c      	b.n	800adec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	3304      	adds	r3, #4
 800add6:	2201      	movs	r2, #1
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f940 	bl	800b060 <USBD_CtlSendData>
        break;
 800ade0:	e004      	b.n	800adec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f8be 	bl	800af66 <USBD_CtlError>
        break;
 800adea:	bf00      	nop
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	3b01      	subs	r3, #1
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d81e      	bhi.n	800ae4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	88db      	ldrh	r3, [r3, #6]
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d004      	beq.n	800ae1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 f8a5 	bl	800af66 <USBD_CtlError>
        break;
 800ae1c:	e01a      	b.n	800ae54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d005      	beq.n	800ae3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	f043 0202 	orr.w	r2, r3, #2
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	2202      	movs	r2, #2
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f90c 	bl	800b060 <USBD_CtlSendData>
      break;
 800ae48:	e004      	b.n	800ae54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f88a 	bl	800af66 <USBD_CtlError>
      break;
 800ae52:	bf00      	nop
  }
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	885b      	ldrh	r3, [r3, #2]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d107      	bne.n	800ae7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f94c 	bl	800b114 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae7c:	e013      	b.n	800aea6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	885b      	ldrh	r3, [r3, #2]
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d10b      	bne.n	800ae9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	889b      	ldrh	r3, [r3, #4]
 800ae8a:	0a1b      	lsrs	r3, r3, #8
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f93c 	bl	800b114 <USBD_CtlSendStatus>
}
 800ae9c:	e003      	b.n	800aea6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f860 	bl	800af66 <USBD_CtlError>
}
 800aea6:	bf00      	nop
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	3b01      	subs	r3, #1
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d80b      	bhi.n	800aede <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	885b      	ldrh	r3, [r3, #2]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d10c      	bne.n	800aee8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f91c 	bl	800b114 <USBD_CtlSendStatus>
      }
      break;
 800aedc:	e004      	b.n	800aee8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f840 	bl	800af66 <USBD_CtlError>
      break;
 800aee6:	e000      	b.n	800aeea <USBD_ClrFeature+0x3c>
      break;
 800aee8:	bf00      	nop
  }
}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	781a      	ldrb	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	3301      	adds	r3, #1
 800af0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	781a      	ldrb	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	3301      	adds	r3, #1
 800af1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f7ff fa40 	bl	800a3a2 <SWAPBYTE>
 800af22:	4603      	mov	r3, r0
 800af24:	461a      	mov	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3301      	adds	r3, #1
 800af2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	3301      	adds	r3, #1
 800af34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f7ff fa33 	bl	800a3a2 <SWAPBYTE>
 800af3c:	4603      	mov	r3, r0
 800af3e:	461a      	mov	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3301      	adds	r3, #1
 800af48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	3301      	adds	r3, #1
 800af4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7ff fa26 	bl	800a3a2 <SWAPBYTE>
 800af56:	4603      	mov	r3, r0
 800af58:	461a      	mov	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	80da      	strh	r2, [r3, #6]
}
 800af5e:	bf00      	nop
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b082      	sub	sp, #8
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af70:	2180      	movs	r1, #128	@ 0x80
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fcec 	bl	800b950 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af78:	2100      	movs	r1, #0
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fce8 	bl	800b950 <USBD_LL_StallEP>
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af94:	2300      	movs	r3, #0
 800af96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d042      	beq.n	800b024 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800afa2:	6938      	ldr	r0, [r7, #16]
 800afa4:	f000 f842 	bl	800b02c <USBD_GetLen>
 800afa8:	4603      	mov	r3, r0
 800afaa:	3301      	adds	r3, #1
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afb2:	d808      	bhi.n	800afc6 <USBD_GetString+0x3e>
 800afb4:	6938      	ldr	r0, [r7, #16]
 800afb6:	f000 f839 	bl	800b02c <USBD_GetLen>
 800afba:	4603      	mov	r3, r0
 800afbc:	3301      	adds	r3, #1
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	005b      	lsls	r3, r3, #1
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	e001      	b.n	800afca <USBD_GetString+0x42>
 800afc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800afce:	7dfb      	ldrb	r3, [r7, #23]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	4413      	add	r3, r2
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	7812      	ldrb	r2, [r2, #0]
 800afd8:	701a      	strb	r2, [r3, #0]
  idx++;
 800afda:	7dfb      	ldrb	r3, [r7, #23]
 800afdc:	3301      	adds	r3, #1
 800afde:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800afe0:	7dfb      	ldrb	r3, [r7, #23]
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	4413      	add	r3, r2
 800afe6:	2203      	movs	r2, #3
 800afe8:	701a      	strb	r2, [r3, #0]
  idx++;
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	3301      	adds	r3, #1
 800afee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aff0:	e013      	b.n	800b01a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800aff2:	7dfb      	ldrb	r3, [r7, #23]
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	4413      	add	r3, r2
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	7812      	ldrb	r2, [r2, #0]
 800affc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	3301      	adds	r3, #1
 800b002:	613b      	str	r3, [r7, #16]
    idx++;
 800b004:	7dfb      	ldrb	r3, [r7, #23]
 800b006:	3301      	adds	r3, #1
 800b008:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	4413      	add	r3, r2
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]
    idx++;
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	3301      	adds	r3, #1
 800b018:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e7      	bne.n	800aff2 <USBD_GetString+0x6a>
 800b022:	e000      	b.n	800b026 <USBD_GetString+0x9e>
    return;
 800b024:	bf00      	nop
  }
}
 800b026:	3718      	adds	r7, #24
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b034:	2300      	movs	r3, #0
 800b036:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b03c:	e005      	b.n	800b04a <USBD_GetLen+0x1e>
  {
    len++;
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
 800b040:	3301      	adds	r3, #1
 800b042:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	3301      	adds	r3, #1
 800b048:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1f5      	bne.n	800b03e <USBD_GetLen+0x12>
  }

  return len;
 800b052:	7bfb      	ldrb	r3, [r7, #15]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3714      	adds	r7, #20
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2202      	movs	r2, #2
 800b070:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	2100      	movs	r1, #0
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f000 fceb 	bl	800ba62 <USBD_LL_Transmit>

  return USBD_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	60f8      	str	r0, [r7, #12]
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f000 fcda 	bl	800ba62 <USBD_LL_Transmit>

  return USBD_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2203      	movs	r2, #3
 800b0c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f000 fcde 	bl	800baa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	60f8      	str	r0, [r7, #12]
 800b0fa:	60b9      	str	r1, [r7, #8]
 800b0fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	2100      	movs	r1, #0
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 fccd 	bl	800baa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2204      	movs	r2, #4
 800b120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b124:	2300      	movs	r3, #0
 800b126:	2200      	movs	r2, #0
 800b128:	2100      	movs	r1, #0
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fc99 	bl	800ba62 <USBD_LL_Transmit>

  return USBD_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b082      	sub	sp, #8
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2205      	movs	r2, #5
 800b146:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b14a:	2300      	movs	r3, #0
 800b14c:	2200      	movs	r2, #0
 800b14e:	2100      	movs	r1, #0
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fca7 	bl	800baa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b164:	2200      	movs	r2, #0
 800b166:	4912      	ldr	r1, [pc, #72]	@ (800b1b0 <MX_USB_DEVICE_Init+0x50>)
 800b168:	4812      	ldr	r0, [pc, #72]	@ (800b1b4 <MX_USB_DEVICE_Init+0x54>)
 800b16a:	f7fe fcf7 	bl	8009b5c <USBD_Init>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b174:	f7f7 fffc 	bl	8003170 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b178:	490f      	ldr	r1, [pc, #60]	@ (800b1b8 <MX_USB_DEVICE_Init+0x58>)
 800b17a:	480e      	ldr	r0, [pc, #56]	@ (800b1b4 <MX_USB_DEVICE_Init+0x54>)
 800b17c:	f7fe fd1e 	bl	8009bbc <USBD_RegisterClass>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b186:	f7f7 fff3 	bl	8003170 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b18a:	490c      	ldr	r1, [pc, #48]	@ (800b1bc <MX_USB_DEVICE_Init+0x5c>)
 800b18c:	4809      	ldr	r0, [pc, #36]	@ (800b1b4 <MX_USB_DEVICE_Init+0x54>)
 800b18e:	f7fe fc15 	bl	80099bc <USBD_CDC_RegisterInterface>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b198:	f7f7 ffea 	bl	8003170 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b19c:	4805      	ldr	r0, [pc, #20]	@ (800b1b4 <MX_USB_DEVICE_Init+0x54>)
 800b19e:	f7fe fd43 	bl	8009c28 <USBD_Start>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b1a8:	f7f7 ffe2 	bl	8003170 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b1ac:	bf00      	nop
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	200000d8 	.word	0x200000d8
 800b1b4:	20000614 	.word	0x20000614
 800b1b8:	20000044 	.word	0x20000044
 800b1bc:	200000c4 	.word	0x200000c4

0800b1c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	4905      	ldr	r1, [pc, #20]	@ (800b1dc <CDC_Init_FS+0x1c>)
 800b1c8:	4805      	ldr	r0, [pc, #20]	@ (800b1e0 <CDC_Init_FS+0x20>)
 800b1ca:	f7fe fc11 	bl	80099f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b1ce:	4905      	ldr	r1, [pc, #20]	@ (800b1e4 <CDC_Init_FS+0x24>)
 800b1d0:	4803      	ldr	r0, [pc, #12]	@ (800b1e0 <CDC_Init_FS+0x20>)
 800b1d2:	f7fe fc2f 	bl	8009a34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b1d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	200010f0 	.word	0x200010f0
 800b1e0:	20000614 	.word	0x20000614
 800b1e4:	200008f0 	.word	0x200008f0

0800b1e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b1ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	4603      	mov	r3, r0
 800b200:	6039      	str	r1, [r7, #0]
 800b202:	71fb      	strb	r3, [r7, #7]
 800b204:	4613      	mov	r3, r2
 800b206:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b208:	79fb      	ldrb	r3, [r7, #7]
 800b20a:	2b23      	cmp	r3, #35	@ 0x23
 800b20c:	d84a      	bhi.n	800b2a4 <CDC_Control_FS+0xac>
 800b20e:	a201      	add	r2, pc, #4	@ (adr r2, 800b214 <CDC_Control_FS+0x1c>)
 800b210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b214:	0800b2a5 	.word	0x0800b2a5
 800b218:	0800b2a5 	.word	0x0800b2a5
 800b21c:	0800b2a5 	.word	0x0800b2a5
 800b220:	0800b2a5 	.word	0x0800b2a5
 800b224:	0800b2a5 	.word	0x0800b2a5
 800b228:	0800b2a5 	.word	0x0800b2a5
 800b22c:	0800b2a5 	.word	0x0800b2a5
 800b230:	0800b2a5 	.word	0x0800b2a5
 800b234:	0800b2a5 	.word	0x0800b2a5
 800b238:	0800b2a5 	.word	0x0800b2a5
 800b23c:	0800b2a5 	.word	0x0800b2a5
 800b240:	0800b2a5 	.word	0x0800b2a5
 800b244:	0800b2a5 	.word	0x0800b2a5
 800b248:	0800b2a5 	.word	0x0800b2a5
 800b24c:	0800b2a5 	.word	0x0800b2a5
 800b250:	0800b2a5 	.word	0x0800b2a5
 800b254:	0800b2a5 	.word	0x0800b2a5
 800b258:	0800b2a5 	.word	0x0800b2a5
 800b25c:	0800b2a5 	.word	0x0800b2a5
 800b260:	0800b2a5 	.word	0x0800b2a5
 800b264:	0800b2a5 	.word	0x0800b2a5
 800b268:	0800b2a5 	.word	0x0800b2a5
 800b26c:	0800b2a5 	.word	0x0800b2a5
 800b270:	0800b2a5 	.word	0x0800b2a5
 800b274:	0800b2a5 	.word	0x0800b2a5
 800b278:	0800b2a5 	.word	0x0800b2a5
 800b27c:	0800b2a5 	.word	0x0800b2a5
 800b280:	0800b2a5 	.word	0x0800b2a5
 800b284:	0800b2a5 	.word	0x0800b2a5
 800b288:	0800b2a5 	.word	0x0800b2a5
 800b28c:	0800b2a5 	.word	0x0800b2a5
 800b290:	0800b2a5 	.word	0x0800b2a5
 800b294:	0800b2a5 	.word	0x0800b2a5
 800b298:	0800b2a5 	.word	0x0800b2a5
 800b29c:	0800b2a5 	.word	0x0800b2a5
 800b2a0:	0800b2a5 	.word	0x0800b2a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b2a4:	bf00      	nop
  }

  return (USBD_OK);
 800b2a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b2be:	6879      	ldr	r1, [r7, #4]
 800b2c0:	4805      	ldr	r0, [pc, #20]	@ (800b2d8 <CDC_Receive_FS+0x24>)
 800b2c2:	f7fe fbb7 	bl	8009a34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b2c6:	4804      	ldr	r0, [pc, #16]	@ (800b2d8 <CDC_Receive_FS+0x24>)
 800b2c8:	f7fe fc12 	bl	8009af0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b2cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20000614 	.word	0x20000614

0800b2dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b324 <CDC_Transmit_FS+0x48>)
 800b2ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e00b      	b.n	800b31a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b302:	887b      	ldrh	r3, [r7, #2]
 800b304:	461a      	mov	r2, r3
 800b306:	6879      	ldr	r1, [r7, #4]
 800b308:	4806      	ldr	r0, [pc, #24]	@ (800b324 <CDC_Transmit_FS+0x48>)
 800b30a:	f7fe fb71 	bl	80099f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b30e:	4805      	ldr	r0, [pc, #20]	@ (800b324 <CDC_Transmit_FS+0x48>)
 800b310:	f7fe fbae 	bl	8009a70 <USBD_CDC_TransmitPacket>
 800b314:	4603      	mov	r3, r0
 800b316:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b318:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000614 	.word	0x20000614

0800b328 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b328:	b480      	push	{r7}
 800b32a:	b087      	sub	sp, #28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	4613      	mov	r3, r2
 800b334:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b33a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	371c      	adds	r7, #28
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
	...

0800b34c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	6039      	str	r1, [r7, #0]
 800b356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2212      	movs	r2, #18
 800b35c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b35e:	4b03      	ldr	r3, [pc, #12]	@ (800b36c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b360:	4618      	mov	r0, r3
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	200000f4 	.word	0x200000f4

0800b370 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	6039      	str	r1, [r7, #0]
 800b37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	2204      	movs	r2, #4
 800b380:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b382:	4b03      	ldr	r3, [pc, #12]	@ (800b390 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b384:	4618      	mov	r0, r3
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	20000108 	.word	0x20000108

0800b394 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3a0:	79fb      	ldrb	r3, [r7, #7]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d105      	bne.n	800b3b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	4907      	ldr	r1, [pc, #28]	@ (800b3c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3aa:	4808      	ldr	r0, [pc, #32]	@ (800b3cc <USBD_FS_ProductStrDescriptor+0x38>)
 800b3ac:	f7ff fdec 	bl	800af88 <USBD_GetString>
 800b3b0:	e004      	b.n	800b3bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	4904      	ldr	r1, [pc, #16]	@ (800b3c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3b6:	4805      	ldr	r0, [pc, #20]	@ (800b3cc <USBD_FS_ProductStrDescriptor+0x38>)
 800b3b8:	f7ff fde6 	bl	800af88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3bc:	4b02      	ldr	r3, [pc, #8]	@ (800b3c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	200018f0 	.word	0x200018f0
 800b3cc:	08010e80 	.word	0x08010e80

0800b3d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	4904      	ldr	r1, [pc, #16]	@ (800b3f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3e0:	4804      	ldr	r0, [pc, #16]	@ (800b3f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3e2:	f7ff fdd1 	bl	800af88 <USBD_GetString>
  return USBD_StrDesc;
 800b3e6:	4b02      	ldr	r3, [pc, #8]	@ (800b3f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	200018f0 	.word	0x200018f0
 800b3f4:	08010e98 	.word	0x08010e98

0800b3f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	4603      	mov	r3, r0
 800b400:	6039      	str	r1, [r7, #0]
 800b402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	221a      	movs	r2, #26
 800b408:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b40a:	f000 f843 	bl	800b494 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b40e:	4b02      	ldr	r3, [pc, #8]	@ (800b418 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	2000010c 	.word	0x2000010c

0800b41c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	4603      	mov	r3, r0
 800b424:	6039      	str	r1, [r7, #0]
 800b426:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b428:	79fb      	ldrb	r3, [r7, #7]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d105      	bne.n	800b43a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	4907      	ldr	r1, [pc, #28]	@ (800b450 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b432:	4808      	ldr	r0, [pc, #32]	@ (800b454 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b434:	f7ff fda8 	bl	800af88 <USBD_GetString>
 800b438:	e004      	b.n	800b444 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	4904      	ldr	r1, [pc, #16]	@ (800b450 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b43e:	4805      	ldr	r0, [pc, #20]	@ (800b454 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b440:	f7ff fda2 	bl	800af88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b444:	4b02      	ldr	r3, [pc, #8]	@ (800b450 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	200018f0 	.word	0x200018f0
 800b454:	08010eac 	.word	0x08010eac

0800b458 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	4603      	mov	r3, r0
 800b460:	6039      	str	r1, [r7, #0]
 800b462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d105      	bne.n	800b476 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	4907      	ldr	r1, [pc, #28]	@ (800b48c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b46e:	4808      	ldr	r0, [pc, #32]	@ (800b490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b470:	f7ff fd8a 	bl	800af88 <USBD_GetString>
 800b474:	e004      	b.n	800b480 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	4904      	ldr	r1, [pc, #16]	@ (800b48c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b47a:	4805      	ldr	r0, [pc, #20]	@ (800b490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b47c:	f7ff fd84 	bl	800af88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b480:	4b02      	ldr	r3, [pc, #8]	@ (800b48c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	200018f0 	.word	0x200018f0
 800b490:	08010eb8 	.word	0x08010eb8

0800b494 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b49a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d8 <Get_SerialNum+0x44>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b4a0:	4b0e      	ldr	r3, [pc, #56]	@ (800b4dc <Get_SerialNum+0x48>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b4a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b4e0 <Get_SerialNum+0x4c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d009      	beq.n	800b4ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4ba:	2208      	movs	r2, #8
 800b4bc:	4909      	ldr	r1, [pc, #36]	@ (800b4e4 <Get_SerialNum+0x50>)
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f000 f814 	bl	800b4ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	4908      	ldr	r1, [pc, #32]	@ (800b4e8 <Get_SerialNum+0x54>)
 800b4c8:	68b8      	ldr	r0, [r7, #8]
 800b4ca:	f000 f80f 	bl	800b4ec <IntToUnicode>
  }
}
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	1fff7a10 	.word	0x1fff7a10
 800b4dc:	1fff7a14 	.word	0x1fff7a14
 800b4e0:	1fff7a18 	.word	0x1fff7a18
 800b4e4:	2000010e 	.word	0x2000010e
 800b4e8:	2000011e 	.word	0x2000011e

0800b4ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4fe:	2300      	movs	r3, #0
 800b500:	75fb      	strb	r3, [r7, #23]
 800b502:	e027      	b.n	800b554 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	0f1b      	lsrs	r3, r3, #28
 800b508:	2b09      	cmp	r3, #9
 800b50a:	d80b      	bhi.n	800b524 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	0f1b      	lsrs	r3, r3, #28
 800b510:	b2da      	uxtb	r2, r3
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	4619      	mov	r1, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	440b      	add	r3, r1
 800b51c:	3230      	adds	r2, #48	@ 0x30
 800b51e:	b2d2      	uxtb	r2, r2
 800b520:	701a      	strb	r2, [r3, #0]
 800b522:	e00a      	b.n	800b53a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	0f1b      	lsrs	r3, r3, #28
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	4619      	mov	r1, r3
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	440b      	add	r3, r1
 800b534:	3237      	adds	r2, #55	@ 0x37
 800b536:	b2d2      	uxtb	r2, r2
 800b538:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	3301      	adds	r3, #1
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	4413      	add	r3, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
 800b550:	3301      	adds	r3, #1
 800b552:	75fb      	strb	r3, [r7, #23]
 800b554:	7dfa      	ldrb	r2, [r7, #23]
 800b556:	79fb      	ldrb	r3, [r7, #7]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d3d3      	bcc.n	800b504 <IntToUnicode+0x18>
  }
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	371c      	adds	r7, #28
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
	...

0800b56c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b08a      	sub	sp, #40	@ 0x28
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b574:	f107 0314 	add.w	r3, r7, #20
 800b578:	2200      	movs	r2, #0
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	605a      	str	r2, [r3, #4]
 800b57e:	609a      	str	r2, [r3, #8]
 800b580:	60da      	str	r2, [r3, #12]
 800b582:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b58c:	d13a      	bne.n	800b604 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b58e:	2300      	movs	r3, #0
 800b590:	613b      	str	r3, [r7, #16]
 800b592:	4b1e      	ldr	r3, [pc, #120]	@ (800b60c <HAL_PCD_MspInit+0xa0>)
 800b594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b596:	4a1d      	ldr	r2, [pc, #116]	@ (800b60c <HAL_PCD_MspInit+0xa0>)
 800b598:	f043 0301 	orr.w	r3, r3, #1
 800b59c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b59e:	4b1b      	ldr	r3, [pc, #108]	@ (800b60c <HAL_PCD_MspInit+0xa0>)
 800b5a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	613b      	str	r3, [r7, #16]
 800b5a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b5aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b5ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b5bc:	230a      	movs	r3, #10
 800b5be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5c0:	f107 0314 	add.w	r3, r7, #20
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4812      	ldr	r0, [pc, #72]	@ (800b610 <HAL_PCD_MspInit+0xa4>)
 800b5c8:	f7f8 fdc8 	bl	800415c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b5cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b60c <HAL_PCD_MspInit+0xa0>)
 800b5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5d0:	4a0e      	ldr	r2, [pc, #56]	@ (800b60c <HAL_PCD_MspInit+0xa0>)
 800b5d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5d6:	6353      	str	r3, [r2, #52]	@ 0x34
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60fb      	str	r3, [r7, #12]
 800b5dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b60c <HAL_PCD_MspInit+0xa0>)
 800b5de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5e0:	4a0a      	ldr	r2, [pc, #40]	@ (800b60c <HAL_PCD_MspInit+0xa0>)
 800b5e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b5e6:	6453      	str	r3, [r2, #68]	@ 0x44
 800b5e8:	4b08      	ldr	r3, [pc, #32]	@ (800b60c <HAL_PCD_MspInit+0xa0>)
 800b5ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5f0:	60fb      	str	r3, [r7, #12]
 800b5f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	2043      	movs	r0, #67	@ 0x43
 800b5fa:	f7f8 f9e6 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b5fe:	2043      	movs	r0, #67	@ 0x43
 800b600:	f7f8 f9ff 	bl	8003a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b604:	bf00      	nop
 800b606:	3728      	adds	r7, #40	@ 0x28
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	40023800 	.word	0x40023800
 800b610:	40020000 	.word	0x40020000

0800b614 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f7fe fb49 	bl	8009cc2 <USBD_LL_SetupStage>
}
 800b630:	bf00      	nop
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	460b      	mov	r3, r1
 800b642:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b64a:	78fa      	ldrb	r2, [r7, #3]
 800b64c:	6879      	ldr	r1, [r7, #4]
 800b64e:	4613      	mov	r3, r2
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	4413      	add	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	440b      	add	r3, r1
 800b658:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	78fb      	ldrb	r3, [r7, #3]
 800b660:	4619      	mov	r1, r3
 800b662:	f7fe fb83 	bl	8009d6c <USBD_LL_DataOutStage>
}
 800b666:	bf00      	nop
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b680:	78fa      	ldrb	r2, [r7, #3]
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	4613      	mov	r3, r2
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	4413      	add	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	440b      	add	r3, r1
 800b68e:	3320      	adds	r3, #32
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	78fb      	ldrb	r3, [r7, #3]
 800b694:	4619      	mov	r1, r3
 800b696:	f7fe fc1c 	bl	8009ed2 <USBD_LL_DataInStage>
}
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b082      	sub	sp, #8
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe fd56 	bl	800a162 <USBD_LL_SOF>
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	79db      	ldrb	r3, [r3, #7]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d102      	bne.n	800b6d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	73fb      	strb	r3, [r7, #15]
 800b6d6:	e008      	b.n	800b6ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	79db      	ldrb	r3, [r3, #7]
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d102      	bne.n	800b6e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	73fb      	strb	r3, [r7, #15]
 800b6e4:	e001      	b.n	800b6ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b6e6:	f7f7 fd43 	bl	8003170 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b6f0:	7bfa      	ldrb	r2, [r7, #15]
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fe fcf0 	bl	800a0da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe fc98 	bl	800a036 <USBD_LL_Reset>
}
 800b706:	bf00      	nop
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
	...

0800b710 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fe fceb 	bl	800a0fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	6812      	ldr	r2, [r2, #0]
 800b732:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b736:	f043 0301 	orr.w	r3, r3, #1
 800b73a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	7adb      	ldrb	r3, [r3, #11]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d005      	beq.n	800b750 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b744:	4b04      	ldr	r3, [pc, #16]	@ (800b758 <HAL_PCD_SuspendCallback+0x48>)
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	4a03      	ldr	r2, [pc, #12]	@ (800b758 <HAL_PCD_SuspendCallback+0x48>)
 800b74a:	f043 0306 	orr.w	r3, r3, #6
 800b74e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b750:	bf00      	nop
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	e000ed00 	.word	0xe000ed00

0800b75c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fce1 	bl	800a132 <USBD_LL_Resume>
}
 800b770:	bf00      	nop
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b78a:	78fa      	ldrb	r2, [r7, #3]
 800b78c:	4611      	mov	r1, r2
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fe fd39 	bl	800a206 <USBD_LL_IsoOUTIncomplete>
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7ae:	78fa      	ldrb	r2, [r7, #3]
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe fcf5 	bl	800a1a2 <USBD_LL_IsoINIncomplete>
}
 800b7b8:	bf00      	nop
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fe fd4b 	bl	800a26a <USBD_LL_DevConnected>
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe fd48 	bl	800a280 <USBD_LL_DevDisconnected>
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d13c      	bne.n	800b882 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b808:	4a20      	ldr	r2, [pc, #128]	@ (800b88c <USBD_LL_Init+0x94>)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a1e      	ldr	r2, [pc, #120]	@ (800b88c <USBD_LL_Init+0x94>)
 800b814:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b818:	4b1c      	ldr	r3, [pc, #112]	@ (800b88c <USBD_LL_Init+0x94>)
 800b81a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b81e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b820:	4b1a      	ldr	r3, [pc, #104]	@ (800b88c <USBD_LL_Init+0x94>)
 800b822:	2204      	movs	r2, #4
 800b824:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b826:	4b19      	ldr	r3, [pc, #100]	@ (800b88c <USBD_LL_Init+0x94>)
 800b828:	2202      	movs	r2, #2
 800b82a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b82c:	4b17      	ldr	r3, [pc, #92]	@ (800b88c <USBD_LL_Init+0x94>)
 800b82e:	2200      	movs	r2, #0
 800b830:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b832:	4b16      	ldr	r3, [pc, #88]	@ (800b88c <USBD_LL_Init+0x94>)
 800b834:	2202      	movs	r2, #2
 800b836:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b838:	4b14      	ldr	r3, [pc, #80]	@ (800b88c <USBD_LL_Init+0x94>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b83e:	4b13      	ldr	r3, [pc, #76]	@ (800b88c <USBD_LL_Init+0x94>)
 800b840:	2200      	movs	r2, #0
 800b842:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b844:	4b11      	ldr	r3, [pc, #68]	@ (800b88c <USBD_LL_Init+0x94>)
 800b846:	2200      	movs	r2, #0
 800b848:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b84a:	4b10      	ldr	r3, [pc, #64]	@ (800b88c <USBD_LL_Init+0x94>)
 800b84c:	2200      	movs	r2, #0
 800b84e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b850:	4b0e      	ldr	r3, [pc, #56]	@ (800b88c <USBD_LL_Init+0x94>)
 800b852:	2200      	movs	r2, #0
 800b854:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b856:	480d      	ldr	r0, [pc, #52]	@ (800b88c <USBD_LL_Init+0x94>)
 800b858:	f7f8 fe68 	bl	800452c <HAL_PCD_Init>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b862:	f7f7 fc85 	bl	8003170 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b866:	2180      	movs	r1, #128	@ 0x80
 800b868:	4808      	ldr	r0, [pc, #32]	@ (800b88c <USBD_LL_Init+0x94>)
 800b86a:	f7fa f894 	bl	8005996 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b86e:	2240      	movs	r2, #64	@ 0x40
 800b870:	2100      	movs	r1, #0
 800b872:	4806      	ldr	r0, [pc, #24]	@ (800b88c <USBD_LL_Init+0x94>)
 800b874:	f7fa f848 	bl	8005908 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b878:	2280      	movs	r2, #128	@ 0x80
 800b87a:	2101      	movs	r1, #1
 800b87c:	4803      	ldr	r0, [pc, #12]	@ (800b88c <USBD_LL_Init+0x94>)
 800b87e:	f7fa f843 	bl	8005908 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20001af0 	.word	0x20001af0

0800b890 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7f8 ff4f 	bl	800474a <HAL_PCD_Start>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8b0:	7bfb      	ldrb	r3, [r7, #15]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 f942 	bl	800bb3c <USBD_Get_USB_Status>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	70fb      	strb	r3, [r7, #3]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	70bb      	strb	r3, [r7, #2]
 800b8dc:	4613      	mov	r3, r2
 800b8de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b8ee:	78bb      	ldrb	r3, [r7, #2]
 800b8f0:	883a      	ldrh	r2, [r7, #0]
 800b8f2:	78f9      	ldrb	r1, [r7, #3]
 800b8f4:	f7f9 fc23 	bl	800513e <HAL_PCD_EP_Open>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 f91c 	bl	800bb3c <USBD_Get_USB_Status>
 800b904:	4603      	mov	r3, r0
 800b906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b908:	7bbb      	ldrb	r3, [r7, #14]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	460b      	mov	r3, r1
 800b91c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b92c:	78fa      	ldrb	r2, [r7, #3]
 800b92e:	4611      	mov	r1, r2
 800b930:	4618      	mov	r0, r3
 800b932:	f7f9 fc6e 	bl	8005212 <HAL_PCD_EP_Close>
 800b936:	4603      	mov	r3, r0
 800b938:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f000 f8fd 	bl	800bb3c <USBD_Get_USB_Status>
 800b942:	4603      	mov	r3, r0
 800b944:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b946:	7bbb      	ldrb	r3, [r7, #14]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3710      	adds	r7, #16
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	460b      	mov	r3, r1
 800b95a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b96a:	78fa      	ldrb	r2, [r7, #3]
 800b96c:	4611      	mov	r1, r2
 800b96e:	4618      	mov	r0, r3
 800b970:	f7f9 fd26 	bl	80053c0 <HAL_PCD_EP_SetStall>
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b978:	7bfb      	ldrb	r3, [r7, #15]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 f8de 	bl	800bb3c <USBD_Get_USB_Status>
 800b980:	4603      	mov	r3, r0
 800b982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b984:	7bbb      	ldrb	r3, [r7, #14]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	460b      	mov	r3, r1
 800b998:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9a8:	78fa      	ldrb	r2, [r7, #3]
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7f9 fd6a 	bl	8005486 <HAL_PCD_EP_ClrStall>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 f8bf 	bl	800bb3c <USBD_Get_USB_Status>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b9e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	da0b      	bge.n	800ba00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9ee:	68f9      	ldr	r1, [r7, #12]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	440b      	add	r3, r1
 800b9fa:	3316      	adds	r3, #22
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	e00b      	b.n	800ba18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba00:	78fb      	ldrb	r3, [r7, #3]
 800ba02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba06:	68f9      	ldr	r1, [r7, #12]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	00db      	lsls	r3, r3, #3
 800ba0c:	4413      	add	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	440b      	add	r3, r1
 800ba12:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ba16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba3e:	78fa      	ldrb	r2, [r7, #3]
 800ba40:	4611      	mov	r1, r2
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7f9 fb57 	bl	80050f6 <HAL_PCD_SetAddress>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 f874 	bl	800bb3c <USBD_Get_USB_Status>
 800ba54:	4603      	mov	r3, r0
 800ba56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b086      	sub	sp, #24
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	60f8      	str	r0, [r7, #12]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	603b      	str	r3, [r7, #0]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ba80:	7af9      	ldrb	r1, [r7, #11]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	f7f9 fc61 	bl	800534c <HAL_PCD_EP_Transmit>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 f853 	bl	800bb3c <USBD_Get_USB_Status>
 800ba96:	4603      	mov	r3, r0
 800ba98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3718      	adds	r7, #24
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	607a      	str	r2, [r7, #4]
 800baae:	603b      	str	r3, [r7, #0]
 800bab0:	460b      	mov	r3, r1
 800bab2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab8:	2300      	movs	r3, #0
 800baba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bac2:	7af9      	ldrb	r1, [r7, #11]
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	f7f9 fbed 	bl	80052a6 <HAL_PCD_EP_Receive>
 800bacc:	4603      	mov	r3, r0
 800bace:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f000 f832 	bl	800bb3c <USBD_Get_USB_Status>
 800bad8:	4603      	mov	r3, r0
 800bada:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800badc:	7dbb      	ldrb	r3, [r7, #22]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b082      	sub	sp, #8
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
 800baee:	460b      	mov	r3, r1
 800baf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800baf8:	78fa      	ldrb	r2, [r7, #3]
 800bafa:	4611      	mov	r1, r2
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7f9 fc0d 	bl	800531c <HAL_PCD_EP_GetRxCount>
 800bb02:	4603      	mov	r3, r0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb14:	4b03      	ldr	r3, [pc, #12]	@ (800bb24 <USBD_static_malloc+0x18>)
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	20001fd4 	.word	0x20001fd4

0800bb28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]

}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb4a:	79fb      	ldrb	r3, [r7, #7]
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	d817      	bhi.n	800bb80 <USBD_Get_USB_Status+0x44>
 800bb50:	a201      	add	r2, pc, #4	@ (adr r2, 800bb58 <USBD_Get_USB_Status+0x1c>)
 800bb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb56:	bf00      	nop
 800bb58:	0800bb69 	.word	0x0800bb69
 800bb5c:	0800bb6f 	.word	0x0800bb6f
 800bb60:	0800bb75 	.word	0x0800bb75
 800bb64:	0800bb7b 	.word	0x0800bb7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb6c:	e00b      	b.n	800bb86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	73fb      	strb	r3, [r7, #15]
    break;
 800bb72:	e008      	b.n	800bb86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb74:	2301      	movs	r3, #1
 800bb76:	73fb      	strb	r3, [r7, #15]
    break;
 800bb78:	e005      	b.n	800bb86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb7e:	e002      	b.n	800bb86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb80:	2303      	movs	r3, #3
 800bb82:	73fb      	strb	r3, [r7, #15]
    break;
 800bb84:	bf00      	nop
  }
  return usb_status;
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <__cvt>:
 800bb94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb98:	ec57 6b10 	vmov	r6, r7, d0
 800bb9c:	2f00      	cmp	r7, #0
 800bb9e:	460c      	mov	r4, r1
 800bba0:	4619      	mov	r1, r3
 800bba2:	463b      	mov	r3, r7
 800bba4:	bfbb      	ittet	lt
 800bba6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bbaa:	461f      	movlt	r7, r3
 800bbac:	2300      	movge	r3, #0
 800bbae:	232d      	movlt	r3, #45	@ 0x2d
 800bbb0:	700b      	strb	r3, [r1, #0]
 800bbb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bbb8:	4691      	mov	r9, r2
 800bbba:	f023 0820 	bic.w	r8, r3, #32
 800bbbe:	bfbc      	itt	lt
 800bbc0:	4632      	movlt	r2, r6
 800bbc2:	4616      	movlt	r6, r2
 800bbc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bbc8:	d005      	beq.n	800bbd6 <__cvt+0x42>
 800bbca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bbce:	d100      	bne.n	800bbd2 <__cvt+0x3e>
 800bbd0:	3401      	adds	r4, #1
 800bbd2:	2102      	movs	r1, #2
 800bbd4:	e000      	b.n	800bbd8 <__cvt+0x44>
 800bbd6:	2103      	movs	r1, #3
 800bbd8:	ab03      	add	r3, sp, #12
 800bbda:	9301      	str	r3, [sp, #4]
 800bbdc:	ab02      	add	r3, sp, #8
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	ec47 6b10 	vmov	d0, r6, r7
 800bbe4:	4653      	mov	r3, sl
 800bbe6:	4622      	mov	r2, r4
 800bbe8:	f000 fe7a 	bl	800c8e0 <_dtoa_r>
 800bbec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	d119      	bne.n	800bc28 <__cvt+0x94>
 800bbf4:	f019 0f01 	tst.w	r9, #1
 800bbf8:	d00e      	beq.n	800bc18 <__cvt+0x84>
 800bbfa:	eb00 0904 	add.w	r9, r0, r4
 800bbfe:	2200      	movs	r2, #0
 800bc00:	2300      	movs	r3, #0
 800bc02:	4630      	mov	r0, r6
 800bc04:	4639      	mov	r1, r7
 800bc06:	f7f4 ff5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc0a:	b108      	cbz	r0, 800bc10 <__cvt+0x7c>
 800bc0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc10:	2230      	movs	r2, #48	@ 0x30
 800bc12:	9b03      	ldr	r3, [sp, #12]
 800bc14:	454b      	cmp	r3, r9
 800bc16:	d31e      	bcc.n	800bc56 <__cvt+0xc2>
 800bc18:	9b03      	ldr	r3, [sp, #12]
 800bc1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc1c:	1b5b      	subs	r3, r3, r5
 800bc1e:	4628      	mov	r0, r5
 800bc20:	6013      	str	r3, [r2, #0]
 800bc22:	b004      	add	sp, #16
 800bc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc2c:	eb00 0904 	add.w	r9, r0, r4
 800bc30:	d1e5      	bne.n	800bbfe <__cvt+0x6a>
 800bc32:	7803      	ldrb	r3, [r0, #0]
 800bc34:	2b30      	cmp	r3, #48	@ 0x30
 800bc36:	d10a      	bne.n	800bc4e <__cvt+0xba>
 800bc38:	2200      	movs	r2, #0
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	4639      	mov	r1, r7
 800bc40:	f7f4 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc44:	b918      	cbnz	r0, 800bc4e <__cvt+0xba>
 800bc46:	f1c4 0401 	rsb	r4, r4, #1
 800bc4a:	f8ca 4000 	str.w	r4, [sl]
 800bc4e:	f8da 3000 	ldr.w	r3, [sl]
 800bc52:	4499      	add	r9, r3
 800bc54:	e7d3      	b.n	800bbfe <__cvt+0x6a>
 800bc56:	1c59      	adds	r1, r3, #1
 800bc58:	9103      	str	r1, [sp, #12]
 800bc5a:	701a      	strb	r2, [r3, #0]
 800bc5c:	e7d9      	b.n	800bc12 <__cvt+0x7e>

0800bc5e <__exponent>:
 800bc5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc60:	2900      	cmp	r1, #0
 800bc62:	bfba      	itte	lt
 800bc64:	4249      	neglt	r1, r1
 800bc66:	232d      	movlt	r3, #45	@ 0x2d
 800bc68:	232b      	movge	r3, #43	@ 0x2b
 800bc6a:	2909      	cmp	r1, #9
 800bc6c:	7002      	strb	r2, [r0, #0]
 800bc6e:	7043      	strb	r3, [r0, #1]
 800bc70:	dd29      	ble.n	800bcc6 <__exponent+0x68>
 800bc72:	f10d 0307 	add.w	r3, sp, #7
 800bc76:	461d      	mov	r5, r3
 800bc78:	270a      	movs	r7, #10
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	fbb1 f6f7 	udiv	r6, r1, r7
 800bc80:	fb07 1416 	mls	r4, r7, r6, r1
 800bc84:	3430      	adds	r4, #48	@ 0x30
 800bc86:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	2c63      	cmp	r4, #99	@ 0x63
 800bc8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc92:	4631      	mov	r1, r6
 800bc94:	dcf1      	bgt.n	800bc7a <__exponent+0x1c>
 800bc96:	3130      	adds	r1, #48	@ 0x30
 800bc98:	1e94      	subs	r4, r2, #2
 800bc9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc9e:	1c41      	adds	r1, r0, #1
 800bca0:	4623      	mov	r3, r4
 800bca2:	42ab      	cmp	r3, r5
 800bca4:	d30a      	bcc.n	800bcbc <__exponent+0x5e>
 800bca6:	f10d 0309 	add.w	r3, sp, #9
 800bcaa:	1a9b      	subs	r3, r3, r2
 800bcac:	42ac      	cmp	r4, r5
 800bcae:	bf88      	it	hi
 800bcb0:	2300      	movhi	r3, #0
 800bcb2:	3302      	adds	r3, #2
 800bcb4:	4403      	add	r3, r0
 800bcb6:	1a18      	subs	r0, r3, r0
 800bcb8:	b003      	add	sp, #12
 800bcba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bcc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bcc4:	e7ed      	b.n	800bca2 <__exponent+0x44>
 800bcc6:	2330      	movs	r3, #48	@ 0x30
 800bcc8:	3130      	adds	r1, #48	@ 0x30
 800bcca:	7083      	strb	r3, [r0, #2]
 800bccc:	70c1      	strb	r1, [r0, #3]
 800bcce:	1d03      	adds	r3, r0, #4
 800bcd0:	e7f1      	b.n	800bcb6 <__exponent+0x58>
	...

0800bcd4 <_printf_float>:
 800bcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd8:	b08d      	sub	sp, #52	@ 0x34
 800bcda:	460c      	mov	r4, r1
 800bcdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bce0:	4616      	mov	r6, r2
 800bce2:	461f      	mov	r7, r3
 800bce4:	4605      	mov	r5, r0
 800bce6:	f000 fcdb 	bl	800c6a0 <_localeconv_r>
 800bcea:	6803      	ldr	r3, [r0, #0]
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7f4 fabe 	bl	8000270 <strlen>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcf8:	f8d8 3000 	ldr.w	r3, [r8]
 800bcfc:	9005      	str	r0, [sp, #20]
 800bcfe:	3307      	adds	r3, #7
 800bd00:	f023 0307 	bic.w	r3, r3, #7
 800bd04:	f103 0208 	add.w	r2, r3, #8
 800bd08:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bd0c:	f8d4 b000 	ldr.w	fp, [r4]
 800bd10:	f8c8 2000 	str.w	r2, [r8]
 800bd14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bd1c:	9307      	str	r3, [sp, #28]
 800bd1e:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bd26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd2a:	4b9c      	ldr	r3, [pc, #624]	@ (800bf9c <_printf_float+0x2c8>)
 800bd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd30:	f7f4 fefc 	bl	8000b2c <__aeabi_dcmpun>
 800bd34:	bb70      	cbnz	r0, 800bd94 <_printf_float+0xc0>
 800bd36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd3a:	4b98      	ldr	r3, [pc, #608]	@ (800bf9c <_printf_float+0x2c8>)
 800bd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd40:	f7f4 fed6 	bl	8000af0 <__aeabi_dcmple>
 800bd44:	bb30      	cbnz	r0, 800bd94 <_printf_float+0xc0>
 800bd46:	2200      	movs	r2, #0
 800bd48:	2300      	movs	r3, #0
 800bd4a:	4640      	mov	r0, r8
 800bd4c:	4649      	mov	r1, r9
 800bd4e:	f7f4 fec5 	bl	8000adc <__aeabi_dcmplt>
 800bd52:	b110      	cbz	r0, 800bd5a <_printf_float+0x86>
 800bd54:	232d      	movs	r3, #45	@ 0x2d
 800bd56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd5a:	4a91      	ldr	r2, [pc, #580]	@ (800bfa0 <_printf_float+0x2cc>)
 800bd5c:	4b91      	ldr	r3, [pc, #580]	@ (800bfa4 <_printf_float+0x2d0>)
 800bd5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bd62:	bf94      	ite	ls
 800bd64:	4690      	movls	r8, r2
 800bd66:	4698      	movhi	r8, r3
 800bd68:	2303      	movs	r3, #3
 800bd6a:	6123      	str	r3, [r4, #16]
 800bd6c:	f02b 0304 	bic.w	r3, fp, #4
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	f04f 0900 	mov.w	r9, #0
 800bd76:	9700      	str	r7, [sp, #0]
 800bd78:	4633      	mov	r3, r6
 800bd7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	4628      	mov	r0, r5
 800bd80:	f000 f9d2 	bl	800c128 <_printf_common>
 800bd84:	3001      	adds	r0, #1
 800bd86:	f040 808d 	bne.w	800bea4 <_printf_float+0x1d0>
 800bd8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8e:	b00d      	add	sp, #52	@ 0x34
 800bd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd94:	4642      	mov	r2, r8
 800bd96:	464b      	mov	r3, r9
 800bd98:	4640      	mov	r0, r8
 800bd9a:	4649      	mov	r1, r9
 800bd9c:	f7f4 fec6 	bl	8000b2c <__aeabi_dcmpun>
 800bda0:	b140      	cbz	r0, 800bdb4 <_printf_float+0xe0>
 800bda2:	464b      	mov	r3, r9
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	bfbc      	itt	lt
 800bda8:	232d      	movlt	r3, #45	@ 0x2d
 800bdaa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bdae:	4a7e      	ldr	r2, [pc, #504]	@ (800bfa8 <_printf_float+0x2d4>)
 800bdb0:	4b7e      	ldr	r3, [pc, #504]	@ (800bfac <_printf_float+0x2d8>)
 800bdb2:	e7d4      	b.n	800bd5e <_printf_float+0x8a>
 800bdb4:	6863      	ldr	r3, [r4, #4]
 800bdb6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bdba:	9206      	str	r2, [sp, #24]
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	d13b      	bne.n	800be38 <_printf_float+0x164>
 800bdc0:	2306      	movs	r3, #6
 800bdc2:	6063      	str	r3, [r4, #4]
 800bdc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bdc8:	2300      	movs	r3, #0
 800bdca:	6022      	str	r2, [r4, #0]
 800bdcc:	9303      	str	r3, [sp, #12]
 800bdce:	ab0a      	add	r3, sp, #40	@ 0x28
 800bdd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bdd4:	ab09      	add	r3, sp, #36	@ 0x24
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	6861      	ldr	r1, [r4, #4]
 800bdda:	ec49 8b10 	vmov	d0, r8, r9
 800bdde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bde2:	4628      	mov	r0, r5
 800bde4:	f7ff fed6 	bl	800bb94 <__cvt>
 800bde8:	9b06      	ldr	r3, [sp, #24]
 800bdea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bdec:	2b47      	cmp	r3, #71	@ 0x47
 800bdee:	4680      	mov	r8, r0
 800bdf0:	d129      	bne.n	800be46 <_printf_float+0x172>
 800bdf2:	1cc8      	adds	r0, r1, #3
 800bdf4:	db02      	blt.n	800bdfc <_printf_float+0x128>
 800bdf6:	6863      	ldr	r3, [r4, #4]
 800bdf8:	4299      	cmp	r1, r3
 800bdfa:	dd41      	ble.n	800be80 <_printf_float+0x1ac>
 800bdfc:	f1aa 0a02 	sub.w	sl, sl, #2
 800be00:	fa5f fa8a 	uxtb.w	sl, sl
 800be04:	3901      	subs	r1, #1
 800be06:	4652      	mov	r2, sl
 800be08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800be0c:	9109      	str	r1, [sp, #36]	@ 0x24
 800be0e:	f7ff ff26 	bl	800bc5e <__exponent>
 800be12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be14:	1813      	adds	r3, r2, r0
 800be16:	2a01      	cmp	r2, #1
 800be18:	4681      	mov	r9, r0
 800be1a:	6123      	str	r3, [r4, #16]
 800be1c:	dc02      	bgt.n	800be24 <_printf_float+0x150>
 800be1e:	6822      	ldr	r2, [r4, #0]
 800be20:	07d2      	lsls	r2, r2, #31
 800be22:	d501      	bpl.n	800be28 <_printf_float+0x154>
 800be24:	3301      	adds	r3, #1
 800be26:	6123      	str	r3, [r4, #16]
 800be28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d0a2      	beq.n	800bd76 <_printf_float+0xa2>
 800be30:	232d      	movs	r3, #45	@ 0x2d
 800be32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be36:	e79e      	b.n	800bd76 <_printf_float+0xa2>
 800be38:	9a06      	ldr	r2, [sp, #24]
 800be3a:	2a47      	cmp	r2, #71	@ 0x47
 800be3c:	d1c2      	bne.n	800bdc4 <_printf_float+0xf0>
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1c0      	bne.n	800bdc4 <_printf_float+0xf0>
 800be42:	2301      	movs	r3, #1
 800be44:	e7bd      	b.n	800bdc2 <_printf_float+0xee>
 800be46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be4a:	d9db      	bls.n	800be04 <_printf_float+0x130>
 800be4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800be50:	d118      	bne.n	800be84 <_printf_float+0x1b0>
 800be52:	2900      	cmp	r1, #0
 800be54:	6863      	ldr	r3, [r4, #4]
 800be56:	dd0b      	ble.n	800be70 <_printf_float+0x19c>
 800be58:	6121      	str	r1, [r4, #16]
 800be5a:	b913      	cbnz	r3, 800be62 <_printf_float+0x18e>
 800be5c:	6822      	ldr	r2, [r4, #0]
 800be5e:	07d0      	lsls	r0, r2, #31
 800be60:	d502      	bpl.n	800be68 <_printf_float+0x194>
 800be62:	3301      	adds	r3, #1
 800be64:	440b      	add	r3, r1
 800be66:	6123      	str	r3, [r4, #16]
 800be68:	65a1      	str	r1, [r4, #88]	@ 0x58
 800be6a:	f04f 0900 	mov.w	r9, #0
 800be6e:	e7db      	b.n	800be28 <_printf_float+0x154>
 800be70:	b913      	cbnz	r3, 800be78 <_printf_float+0x1a4>
 800be72:	6822      	ldr	r2, [r4, #0]
 800be74:	07d2      	lsls	r2, r2, #31
 800be76:	d501      	bpl.n	800be7c <_printf_float+0x1a8>
 800be78:	3302      	adds	r3, #2
 800be7a:	e7f4      	b.n	800be66 <_printf_float+0x192>
 800be7c:	2301      	movs	r3, #1
 800be7e:	e7f2      	b.n	800be66 <_printf_float+0x192>
 800be80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800be84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be86:	4299      	cmp	r1, r3
 800be88:	db05      	blt.n	800be96 <_printf_float+0x1c2>
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	6121      	str	r1, [r4, #16]
 800be8e:	07d8      	lsls	r0, r3, #31
 800be90:	d5ea      	bpl.n	800be68 <_printf_float+0x194>
 800be92:	1c4b      	adds	r3, r1, #1
 800be94:	e7e7      	b.n	800be66 <_printf_float+0x192>
 800be96:	2900      	cmp	r1, #0
 800be98:	bfd4      	ite	le
 800be9a:	f1c1 0202 	rsble	r2, r1, #2
 800be9e:	2201      	movgt	r2, #1
 800bea0:	4413      	add	r3, r2
 800bea2:	e7e0      	b.n	800be66 <_printf_float+0x192>
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	055a      	lsls	r2, r3, #21
 800bea8:	d407      	bmi.n	800beba <_printf_float+0x1e6>
 800beaa:	6923      	ldr	r3, [r4, #16]
 800beac:	4642      	mov	r2, r8
 800beae:	4631      	mov	r1, r6
 800beb0:	4628      	mov	r0, r5
 800beb2:	47b8      	blx	r7
 800beb4:	3001      	adds	r0, #1
 800beb6:	d12b      	bne.n	800bf10 <_printf_float+0x23c>
 800beb8:	e767      	b.n	800bd8a <_printf_float+0xb6>
 800beba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bebe:	f240 80dd 	bls.w	800c07c <_printf_float+0x3a8>
 800bec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bec6:	2200      	movs	r2, #0
 800bec8:	2300      	movs	r3, #0
 800beca:	f7f4 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d033      	beq.n	800bf3a <_printf_float+0x266>
 800bed2:	4a37      	ldr	r2, [pc, #220]	@ (800bfb0 <_printf_float+0x2dc>)
 800bed4:	2301      	movs	r3, #1
 800bed6:	4631      	mov	r1, r6
 800bed8:	4628      	mov	r0, r5
 800beda:	47b8      	blx	r7
 800bedc:	3001      	adds	r0, #1
 800bede:	f43f af54 	beq.w	800bd8a <_printf_float+0xb6>
 800bee2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bee6:	4543      	cmp	r3, r8
 800bee8:	db02      	blt.n	800bef0 <_printf_float+0x21c>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	07d8      	lsls	r0, r3, #31
 800beee:	d50f      	bpl.n	800bf10 <_printf_float+0x23c>
 800bef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bef4:	4631      	mov	r1, r6
 800bef6:	4628      	mov	r0, r5
 800bef8:	47b8      	blx	r7
 800befa:	3001      	adds	r0, #1
 800befc:	f43f af45 	beq.w	800bd8a <_printf_float+0xb6>
 800bf00:	f04f 0900 	mov.w	r9, #0
 800bf04:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf08:	f104 0a1a 	add.w	sl, r4, #26
 800bf0c:	45c8      	cmp	r8, r9
 800bf0e:	dc09      	bgt.n	800bf24 <_printf_float+0x250>
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	079b      	lsls	r3, r3, #30
 800bf14:	f100 8103 	bmi.w	800c11e <_printf_float+0x44a>
 800bf18:	68e0      	ldr	r0, [r4, #12]
 800bf1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf1c:	4298      	cmp	r0, r3
 800bf1e:	bfb8      	it	lt
 800bf20:	4618      	movlt	r0, r3
 800bf22:	e734      	b.n	800bd8e <_printf_float+0xba>
 800bf24:	2301      	movs	r3, #1
 800bf26:	4652      	mov	r2, sl
 800bf28:	4631      	mov	r1, r6
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	47b8      	blx	r7
 800bf2e:	3001      	adds	r0, #1
 800bf30:	f43f af2b 	beq.w	800bd8a <_printf_float+0xb6>
 800bf34:	f109 0901 	add.w	r9, r9, #1
 800bf38:	e7e8      	b.n	800bf0c <_printf_float+0x238>
 800bf3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dc39      	bgt.n	800bfb4 <_printf_float+0x2e0>
 800bf40:	4a1b      	ldr	r2, [pc, #108]	@ (800bfb0 <_printf_float+0x2dc>)
 800bf42:	2301      	movs	r3, #1
 800bf44:	4631      	mov	r1, r6
 800bf46:	4628      	mov	r0, r5
 800bf48:	47b8      	blx	r7
 800bf4a:	3001      	adds	r0, #1
 800bf4c:	f43f af1d 	beq.w	800bd8a <_printf_float+0xb6>
 800bf50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bf54:	ea59 0303 	orrs.w	r3, r9, r3
 800bf58:	d102      	bne.n	800bf60 <_printf_float+0x28c>
 800bf5a:	6823      	ldr	r3, [r4, #0]
 800bf5c:	07d9      	lsls	r1, r3, #31
 800bf5e:	d5d7      	bpl.n	800bf10 <_printf_float+0x23c>
 800bf60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf64:	4631      	mov	r1, r6
 800bf66:	4628      	mov	r0, r5
 800bf68:	47b8      	blx	r7
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	f43f af0d 	beq.w	800bd8a <_printf_float+0xb6>
 800bf70:	f04f 0a00 	mov.w	sl, #0
 800bf74:	f104 0b1a 	add.w	fp, r4, #26
 800bf78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf7a:	425b      	negs	r3, r3
 800bf7c:	4553      	cmp	r3, sl
 800bf7e:	dc01      	bgt.n	800bf84 <_printf_float+0x2b0>
 800bf80:	464b      	mov	r3, r9
 800bf82:	e793      	b.n	800beac <_printf_float+0x1d8>
 800bf84:	2301      	movs	r3, #1
 800bf86:	465a      	mov	r2, fp
 800bf88:	4631      	mov	r1, r6
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	47b8      	blx	r7
 800bf8e:	3001      	adds	r0, #1
 800bf90:	f43f aefb 	beq.w	800bd8a <_printf_float+0xb6>
 800bf94:	f10a 0a01 	add.w	sl, sl, #1
 800bf98:	e7ee      	b.n	800bf78 <_printf_float+0x2a4>
 800bf9a:	bf00      	nop
 800bf9c:	7fefffff 	.word	0x7fefffff
 800bfa0:	08010ee0 	.word	0x08010ee0
 800bfa4:	08010ee4 	.word	0x08010ee4
 800bfa8:	08010ee8 	.word	0x08010ee8
 800bfac:	08010eec 	.word	0x08010eec
 800bfb0:	08010ef0 	.word	0x08010ef0
 800bfb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bfb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bfba:	4553      	cmp	r3, sl
 800bfbc:	bfa8      	it	ge
 800bfbe:	4653      	movge	r3, sl
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	4699      	mov	r9, r3
 800bfc4:	dc36      	bgt.n	800c034 <_printf_float+0x360>
 800bfc6:	f04f 0b00 	mov.w	fp, #0
 800bfca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfce:	f104 021a 	add.w	r2, r4, #26
 800bfd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bfd4:	9306      	str	r3, [sp, #24]
 800bfd6:	eba3 0309 	sub.w	r3, r3, r9
 800bfda:	455b      	cmp	r3, fp
 800bfdc:	dc31      	bgt.n	800c042 <_printf_float+0x36e>
 800bfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe0:	459a      	cmp	sl, r3
 800bfe2:	dc3a      	bgt.n	800c05a <_printf_float+0x386>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	07da      	lsls	r2, r3, #31
 800bfe8:	d437      	bmi.n	800c05a <_printf_float+0x386>
 800bfea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfec:	ebaa 0903 	sub.w	r9, sl, r3
 800bff0:	9b06      	ldr	r3, [sp, #24]
 800bff2:	ebaa 0303 	sub.w	r3, sl, r3
 800bff6:	4599      	cmp	r9, r3
 800bff8:	bfa8      	it	ge
 800bffa:	4699      	movge	r9, r3
 800bffc:	f1b9 0f00 	cmp.w	r9, #0
 800c000:	dc33      	bgt.n	800c06a <_printf_float+0x396>
 800c002:	f04f 0800 	mov.w	r8, #0
 800c006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c00a:	f104 0b1a 	add.w	fp, r4, #26
 800c00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c010:	ebaa 0303 	sub.w	r3, sl, r3
 800c014:	eba3 0309 	sub.w	r3, r3, r9
 800c018:	4543      	cmp	r3, r8
 800c01a:	f77f af79 	ble.w	800bf10 <_printf_float+0x23c>
 800c01e:	2301      	movs	r3, #1
 800c020:	465a      	mov	r2, fp
 800c022:	4631      	mov	r1, r6
 800c024:	4628      	mov	r0, r5
 800c026:	47b8      	blx	r7
 800c028:	3001      	adds	r0, #1
 800c02a:	f43f aeae 	beq.w	800bd8a <_printf_float+0xb6>
 800c02e:	f108 0801 	add.w	r8, r8, #1
 800c032:	e7ec      	b.n	800c00e <_printf_float+0x33a>
 800c034:	4642      	mov	r2, r8
 800c036:	4631      	mov	r1, r6
 800c038:	4628      	mov	r0, r5
 800c03a:	47b8      	blx	r7
 800c03c:	3001      	adds	r0, #1
 800c03e:	d1c2      	bne.n	800bfc6 <_printf_float+0x2f2>
 800c040:	e6a3      	b.n	800bd8a <_printf_float+0xb6>
 800c042:	2301      	movs	r3, #1
 800c044:	4631      	mov	r1, r6
 800c046:	4628      	mov	r0, r5
 800c048:	9206      	str	r2, [sp, #24]
 800c04a:	47b8      	blx	r7
 800c04c:	3001      	adds	r0, #1
 800c04e:	f43f ae9c 	beq.w	800bd8a <_printf_float+0xb6>
 800c052:	9a06      	ldr	r2, [sp, #24]
 800c054:	f10b 0b01 	add.w	fp, fp, #1
 800c058:	e7bb      	b.n	800bfd2 <_printf_float+0x2fe>
 800c05a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c05e:	4631      	mov	r1, r6
 800c060:	4628      	mov	r0, r5
 800c062:	47b8      	blx	r7
 800c064:	3001      	adds	r0, #1
 800c066:	d1c0      	bne.n	800bfea <_printf_float+0x316>
 800c068:	e68f      	b.n	800bd8a <_printf_float+0xb6>
 800c06a:	9a06      	ldr	r2, [sp, #24]
 800c06c:	464b      	mov	r3, r9
 800c06e:	4442      	add	r2, r8
 800c070:	4631      	mov	r1, r6
 800c072:	4628      	mov	r0, r5
 800c074:	47b8      	blx	r7
 800c076:	3001      	adds	r0, #1
 800c078:	d1c3      	bne.n	800c002 <_printf_float+0x32e>
 800c07a:	e686      	b.n	800bd8a <_printf_float+0xb6>
 800c07c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c080:	f1ba 0f01 	cmp.w	sl, #1
 800c084:	dc01      	bgt.n	800c08a <_printf_float+0x3b6>
 800c086:	07db      	lsls	r3, r3, #31
 800c088:	d536      	bpl.n	800c0f8 <_printf_float+0x424>
 800c08a:	2301      	movs	r3, #1
 800c08c:	4642      	mov	r2, r8
 800c08e:	4631      	mov	r1, r6
 800c090:	4628      	mov	r0, r5
 800c092:	47b8      	blx	r7
 800c094:	3001      	adds	r0, #1
 800c096:	f43f ae78 	beq.w	800bd8a <_printf_float+0xb6>
 800c09a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c09e:	4631      	mov	r1, r6
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	47b8      	blx	r7
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	f43f ae70 	beq.w	800bd8a <_printf_float+0xb6>
 800c0aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0b6:	f7f4 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0ba:	b9c0      	cbnz	r0, 800c0ee <_printf_float+0x41a>
 800c0bc:	4653      	mov	r3, sl
 800c0be:	f108 0201 	add.w	r2, r8, #1
 800c0c2:	4631      	mov	r1, r6
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	47b8      	blx	r7
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d10c      	bne.n	800c0e6 <_printf_float+0x412>
 800c0cc:	e65d      	b.n	800bd8a <_printf_float+0xb6>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	465a      	mov	r2, fp
 800c0d2:	4631      	mov	r1, r6
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	47b8      	blx	r7
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f43f ae56 	beq.w	800bd8a <_printf_float+0xb6>
 800c0de:	f108 0801 	add.w	r8, r8, #1
 800c0e2:	45d0      	cmp	r8, sl
 800c0e4:	dbf3      	blt.n	800c0ce <_printf_float+0x3fa>
 800c0e6:	464b      	mov	r3, r9
 800c0e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c0ec:	e6df      	b.n	800beae <_printf_float+0x1da>
 800c0ee:	f04f 0800 	mov.w	r8, #0
 800c0f2:	f104 0b1a 	add.w	fp, r4, #26
 800c0f6:	e7f4      	b.n	800c0e2 <_printf_float+0x40e>
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	4642      	mov	r2, r8
 800c0fc:	e7e1      	b.n	800c0c2 <_printf_float+0x3ee>
 800c0fe:	2301      	movs	r3, #1
 800c100:	464a      	mov	r2, r9
 800c102:	4631      	mov	r1, r6
 800c104:	4628      	mov	r0, r5
 800c106:	47b8      	blx	r7
 800c108:	3001      	adds	r0, #1
 800c10a:	f43f ae3e 	beq.w	800bd8a <_printf_float+0xb6>
 800c10e:	f108 0801 	add.w	r8, r8, #1
 800c112:	68e3      	ldr	r3, [r4, #12]
 800c114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c116:	1a5b      	subs	r3, r3, r1
 800c118:	4543      	cmp	r3, r8
 800c11a:	dcf0      	bgt.n	800c0fe <_printf_float+0x42a>
 800c11c:	e6fc      	b.n	800bf18 <_printf_float+0x244>
 800c11e:	f04f 0800 	mov.w	r8, #0
 800c122:	f104 0919 	add.w	r9, r4, #25
 800c126:	e7f4      	b.n	800c112 <_printf_float+0x43e>

0800c128 <_printf_common>:
 800c128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c12c:	4616      	mov	r6, r2
 800c12e:	4698      	mov	r8, r3
 800c130:	688a      	ldr	r2, [r1, #8]
 800c132:	690b      	ldr	r3, [r1, #16]
 800c134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c138:	4293      	cmp	r3, r2
 800c13a:	bfb8      	it	lt
 800c13c:	4613      	movlt	r3, r2
 800c13e:	6033      	str	r3, [r6, #0]
 800c140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c144:	4607      	mov	r7, r0
 800c146:	460c      	mov	r4, r1
 800c148:	b10a      	cbz	r2, 800c14e <_printf_common+0x26>
 800c14a:	3301      	adds	r3, #1
 800c14c:	6033      	str	r3, [r6, #0]
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	0699      	lsls	r1, r3, #26
 800c152:	bf42      	ittt	mi
 800c154:	6833      	ldrmi	r3, [r6, #0]
 800c156:	3302      	addmi	r3, #2
 800c158:	6033      	strmi	r3, [r6, #0]
 800c15a:	6825      	ldr	r5, [r4, #0]
 800c15c:	f015 0506 	ands.w	r5, r5, #6
 800c160:	d106      	bne.n	800c170 <_printf_common+0x48>
 800c162:	f104 0a19 	add.w	sl, r4, #25
 800c166:	68e3      	ldr	r3, [r4, #12]
 800c168:	6832      	ldr	r2, [r6, #0]
 800c16a:	1a9b      	subs	r3, r3, r2
 800c16c:	42ab      	cmp	r3, r5
 800c16e:	dc26      	bgt.n	800c1be <_printf_common+0x96>
 800c170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c174:	6822      	ldr	r2, [r4, #0]
 800c176:	3b00      	subs	r3, #0
 800c178:	bf18      	it	ne
 800c17a:	2301      	movne	r3, #1
 800c17c:	0692      	lsls	r2, r2, #26
 800c17e:	d42b      	bmi.n	800c1d8 <_printf_common+0xb0>
 800c180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c184:	4641      	mov	r1, r8
 800c186:	4638      	mov	r0, r7
 800c188:	47c8      	blx	r9
 800c18a:	3001      	adds	r0, #1
 800c18c:	d01e      	beq.n	800c1cc <_printf_common+0xa4>
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	6922      	ldr	r2, [r4, #16]
 800c192:	f003 0306 	and.w	r3, r3, #6
 800c196:	2b04      	cmp	r3, #4
 800c198:	bf02      	ittt	eq
 800c19a:	68e5      	ldreq	r5, [r4, #12]
 800c19c:	6833      	ldreq	r3, [r6, #0]
 800c19e:	1aed      	subeq	r5, r5, r3
 800c1a0:	68a3      	ldr	r3, [r4, #8]
 800c1a2:	bf0c      	ite	eq
 800c1a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1a8:	2500      	movne	r5, #0
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	bfc4      	itt	gt
 800c1ae:	1a9b      	subgt	r3, r3, r2
 800c1b0:	18ed      	addgt	r5, r5, r3
 800c1b2:	2600      	movs	r6, #0
 800c1b4:	341a      	adds	r4, #26
 800c1b6:	42b5      	cmp	r5, r6
 800c1b8:	d11a      	bne.n	800c1f0 <_printf_common+0xc8>
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	e008      	b.n	800c1d0 <_printf_common+0xa8>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	4652      	mov	r2, sl
 800c1c2:	4641      	mov	r1, r8
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	47c8      	blx	r9
 800c1c8:	3001      	adds	r0, #1
 800c1ca:	d103      	bne.n	800c1d4 <_printf_common+0xac>
 800c1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d4:	3501      	adds	r5, #1
 800c1d6:	e7c6      	b.n	800c166 <_printf_common+0x3e>
 800c1d8:	18e1      	adds	r1, r4, r3
 800c1da:	1c5a      	adds	r2, r3, #1
 800c1dc:	2030      	movs	r0, #48	@ 0x30
 800c1de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c1e2:	4422      	add	r2, r4
 800c1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c1e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c1ec:	3302      	adds	r3, #2
 800c1ee:	e7c7      	b.n	800c180 <_printf_common+0x58>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	4622      	mov	r2, r4
 800c1f4:	4641      	mov	r1, r8
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	47c8      	blx	r9
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	d0e6      	beq.n	800c1cc <_printf_common+0xa4>
 800c1fe:	3601      	adds	r6, #1
 800c200:	e7d9      	b.n	800c1b6 <_printf_common+0x8e>
	...

0800c204 <_printf_i>:
 800c204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c208:	7e0f      	ldrb	r7, [r1, #24]
 800c20a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c20c:	2f78      	cmp	r7, #120	@ 0x78
 800c20e:	4691      	mov	r9, r2
 800c210:	4680      	mov	r8, r0
 800c212:	460c      	mov	r4, r1
 800c214:	469a      	mov	sl, r3
 800c216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c21a:	d807      	bhi.n	800c22c <_printf_i+0x28>
 800c21c:	2f62      	cmp	r7, #98	@ 0x62
 800c21e:	d80a      	bhi.n	800c236 <_printf_i+0x32>
 800c220:	2f00      	cmp	r7, #0
 800c222:	f000 80d2 	beq.w	800c3ca <_printf_i+0x1c6>
 800c226:	2f58      	cmp	r7, #88	@ 0x58
 800c228:	f000 80b9 	beq.w	800c39e <_printf_i+0x19a>
 800c22c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c234:	e03a      	b.n	800c2ac <_printf_i+0xa8>
 800c236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c23a:	2b15      	cmp	r3, #21
 800c23c:	d8f6      	bhi.n	800c22c <_printf_i+0x28>
 800c23e:	a101      	add	r1, pc, #4	@ (adr r1, 800c244 <_printf_i+0x40>)
 800c240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c244:	0800c29d 	.word	0x0800c29d
 800c248:	0800c2b1 	.word	0x0800c2b1
 800c24c:	0800c22d 	.word	0x0800c22d
 800c250:	0800c22d 	.word	0x0800c22d
 800c254:	0800c22d 	.word	0x0800c22d
 800c258:	0800c22d 	.word	0x0800c22d
 800c25c:	0800c2b1 	.word	0x0800c2b1
 800c260:	0800c22d 	.word	0x0800c22d
 800c264:	0800c22d 	.word	0x0800c22d
 800c268:	0800c22d 	.word	0x0800c22d
 800c26c:	0800c22d 	.word	0x0800c22d
 800c270:	0800c3b1 	.word	0x0800c3b1
 800c274:	0800c2db 	.word	0x0800c2db
 800c278:	0800c36b 	.word	0x0800c36b
 800c27c:	0800c22d 	.word	0x0800c22d
 800c280:	0800c22d 	.word	0x0800c22d
 800c284:	0800c3d3 	.word	0x0800c3d3
 800c288:	0800c22d 	.word	0x0800c22d
 800c28c:	0800c2db 	.word	0x0800c2db
 800c290:	0800c22d 	.word	0x0800c22d
 800c294:	0800c22d 	.word	0x0800c22d
 800c298:	0800c373 	.word	0x0800c373
 800c29c:	6833      	ldr	r3, [r6, #0]
 800c29e:	1d1a      	adds	r2, r3, #4
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6032      	str	r2, [r6, #0]
 800c2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e09d      	b.n	800c3ec <_printf_i+0x1e8>
 800c2b0:	6833      	ldr	r3, [r6, #0]
 800c2b2:	6820      	ldr	r0, [r4, #0]
 800c2b4:	1d19      	adds	r1, r3, #4
 800c2b6:	6031      	str	r1, [r6, #0]
 800c2b8:	0606      	lsls	r6, r0, #24
 800c2ba:	d501      	bpl.n	800c2c0 <_printf_i+0xbc>
 800c2bc:	681d      	ldr	r5, [r3, #0]
 800c2be:	e003      	b.n	800c2c8 <_printf_i+0xc4>
 800c2c0:	0645      	lsls	r5, r0, #25
 800c2c2:	d5fb      	bpl.n	800c2bc <_printf_i+0xb8>
 800c2c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c2c8:	2d00      	cmp	r5, #0
 800c2ca:	da03      	bge.n	800c2d4 <_printf_i+0xd0>
 800c2cc:	232d      	movs	r3, #45	@ 0x2d
 800c2ce:	426d      	negs	r5, r5
 800c2d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2d4:	4859      	ldr	r0, [pc, #356]	@ (800c43c <_printf_i+0x238>)
 800c2d6:	230a      	movs	r3, #10
 800c2d8:	e011      	b.n	800c2fe <_printf_i+0xfa>
 800c2da:	6821      	ldr	r1, [r4, #0]
 800c2dc:	6833      	ldr	r3, [r6, #0]
 800c2de:	0608      	lsls	r0, r1, #24
 800c2e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c2e4:	d402      	bmi.n	800c2ec <_printf_i+0xe8>
 800c2e6:	0649      	lsls	r1, r1, #25
 800c2e8:	bf48      	it	mi
 800c2ea:	b2ad      	uxthmi	r5, r5
 800c2ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800c2ee:	4853      	ldr	r0, [pc, #332]	@ (800c43c <_printf_i+0x238>)
 800c2f0:	6033      	str	r3, [r6, #0]
 800c2f2:	bf14      	ite	ne
 800c2f4:	230a      	movne	r3, #10
 800c2f6:	2308      	moveq	r3, #8
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c2fe:	6866      	ldr	r6, [r4, #4]
 800c300:	60a6      	str	r6, [r4, #8]
 800c302:	2e00      	cmp	r6, #0
 800c304:	bfa2      	ittt	ge
 800c306:	6821      	ldrge	r1, [r4, #0]
 800c308:	f021 0104 	bicge.w	r1, r1, #4
 800c30c:	6021      	strge	r1, [r4, #0]
 800c30e:	b90d      	cbnz	r5, 800c314 <_printf_i+0x110>
 800c310:	2e00      	cmp	r6, #0
 800c312:	d04b      	beq.n	800c3ac <_printf_i+0x1a8>
 800c314:	4616      	mov	r6, r2
 800c316:	fbb5 f1f3 	udiv	r1, r5, r3
 800c31a:	fb03 5711 	mls	r7, r3, r1, r5
 800c31e:	5dc7      	ldrb	r7, [r0, r7]
 800c320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c324:	462f      	mov	r7, r5
 800c326:	42bb      	cmp	r3, r7
 800c328:	460d      	mov	r5, r1
 800c32a:	d9f4      	bls.n	800c316 <_printf_i+0x112>
 800c32c:	2b08      	cmp	r3, #8
 800c32e:	d10b      	bne.n	800c348 <_printf_i+0x144>
 800c330:	6823      	ldr	r3, [r4, #0]
 800c332:	07df      	lsls	r7, r3, #31
 800c334:	d508      	bpl.n	800c348 <_printf_i+0x144>
 800c336:	6923      	ldr	r3, [r4, #16]
 800c338:	6861      	ldr	r1, [r4, #4]
 800c33a:	4299      	cmp	r1, r3
 800c33c:	bfde      	ittt	le
 800c33e:	2330      	movle	r3, #48	@ 0x30
 800c340:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c344:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c348:	1b92      	subs	r2, r2, r6
 800c34a:	6122      	str	r2, [r4, #16]
 800c34c:	f8cd a000 	str.w	sl, [sp]
 800c350:	464b      	mov	r3, r9
 800c352:	aa03      	add	r2, sp, #12
 800c354:	4621      	mov	r1, r4
 800c356:	4640      	mov	r0, r8
 800c358:	f7ff fee6 	bl	800c128 <_printf_common>
 800c35c:	3001      	adds	r0, #1
 800c35e:	d14a      	bne.n	800c3f6 <_printf_i+0x1f2>
 800c360:	f04f 30ff 	mov.w	r0, #4294967295
 800c364:	b004      	add	sp, #16
 800c366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	f043 0320 	orr.w	r3, r3, #32
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	4833      	ldr	r0, [pc, #204]	@ (800c440 <_printf_i+0x23c>)
 800c374:	2778      	movs	r7, #120	@ 0x78
 800c376:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	6831      	ldr	r1, [r6, #0]
 800c37e:	061f      	lsls	r7, r3, #24
 800c380:	f851 5b04 	ldr.w	r5, [r1], #4
 800c384:	d402      	bmi.n	800c38c <_printf_i+0x188>
 800c386:	065f      	lsls	r7, r3, #25
 800c388:	bf48      	it	mi
 800c38a:	b2ad      	uxthmi	r5, r5
 800c38c:	6031      	str	r1, [r6, #0]
 800c38e:	07d9      	lsls	r1, r3, #31
 800c390:	bf44      	itt	mi
 800c392:	f043 0320 	orrmi.w	r3, r3, #32
 800c396:	6023      	strmi	r3, [r4, #0]
 800c398:	b11d      	cbz	r5, 800c3a2 <_printf_i+0x19e>
 800c39a:	2310      	movs	r3, #16
 800c39c:	e7ac      	b.n	800c2f8 <_printf_i+0xf4>
 800c39e:	4827      	ldr	r0, [pc, #156]	@ (800c43c <_printf_i+0x238>)
 800c3a0:	e7e9      	b.n	800c376 <_printf_i+0x172>
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	f023 0320 	bic.w	r3, r3, #32
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	e7f6      	b.n	800c39a <_printf_i+0x196>
 800c3ac:	4616      	mov	r6, r2
 800c3ae:	e7bd      	b.n	800c32c <_printf_i+0x128>
 800c3b0:	6833      	ldr	r3, [r6, #0]
 800c3b2:	6825      	ldr	r5, [r4, #0]
 800c3b4:	6961      	ldr	r1, [r4, #20]
 800c3b6:	1d18      	adds	r0, r3, #4
 800c3b8:	6030      	str	r0, [r6, #0]
 800c3ba:	062e      	lsls	r6, r5, #24
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	d501      	bpl.n	800c3c4 <_printf_i+0x1c0>
 800c3c0:	6019      	str	r1, [r3, #0]
 800c3c2:	e002      	b.n	800c3ca <_printf_i+0x1c6>
 800c3c4:	0668      	lsls	r0, r5, #25
 800c3c6:	d5fb      	bpl.n	800c3c0 <_printf_i+0x1bc>
 800c3c8:	8019      	strh	r1, [r3, #0]
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	6123      	str	r3, [r4, #16]
 800c3ce:	4616      	mov	r6, r2
 800c3d0:	e7bc      	b.n	800c34c <_printf_i+0x148>
 800c3d2:	6833      	ldr	r3, [r6, #0]
 800c3d4:	1d1a      	adds	r2, r3, #4
 800c3d6:	6032      	str	r2, [r6, #0]
 800c3d8:	681e      	ldr	r6, [r3, #0]
 800c3da:	6862      	ldr	r2, [r4, #4]
 800c3dc:	2100      	movs	r1, #0
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f7f3 fef6 	bl	80001d0 <memchr>
 800c3e4:	b108      	cbz	r0, 800c3ea <_printf_i+0x1e6>
 800c3e6:	1b80      	subs	r0, r0, r6
 800c3e8:	6060      	str	r0, [r4, #4]
 800c3ea:	6863      	ldr	r3, [r4, #4]
 800c3ec:	6123      	str	r3, [r4, #16]
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3f4:	e7aa      	b.n	800c34c <_printf_i+0x148>
 800c3f6:	6923      	ldr	r3, [r4, #16]
 800c3f8:	4632      	mov	r2, r6
 800c3fa:	4649      	mov	r1, r9
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	47d0      	blx	sl
 800c400:	3001      	adds	r0, #1
 800c402:	d0ad      	beq.n	800c360 <_printf_i+0x15c>
 800c404:	6823      	ldr	r3, [r4, #0]
 800c406:	079b      	lsls	r3, r3, #30
 800c408:	d413      	bmi.n	800c432 <_printf_i+0x22e>
 800c40a:	68e0      	ldr	r0, [r4, #12]
 800c40c:	9b03      	ldr	r3, [sp, #12]
 800c40e:	4298      	cmp	r0, r3
 800c410:	bfb8      	it	lt
 800c412:	4618      	movlt	r0, r3
 800c414:	e7a6      	b.n	800c364 <_printf_i+0x160>
 800c416:	2301      	movs	r3, #1
 800c418:	4632      	mov	r2, r6
 800c41a:	4649      	mov	r1, r9
 800c41c:	4640      	mov	r0, r8
 800c41e:	47d0      	blx	sl
 800c420:	3001      	adds	r0, #1
 800c422:	d09d      	beq.n	800c360 <_printf_i+0x15c>
 800c424:	3501      	adds	r5, #1
 800c426:	68e3      	ldr	r3, [r4, #12]
 800c428:	9903      	ldr	r1, [sp, #12]
 800c42a:	1a5b      	subs	r3, r3, r1
 800c42c:	42ab      	cmp	r3, r5
 800c42e:	dcf2      	bgt.n	800c416 <_printf_i+0x212>
 800c430:	e7eb      	b.n	800c40a <_printf_i+0x206>
 800c432:	2500      	movs	r5, #0
 800c434:	f104 0619 	add.w	r6, r4, #25
 800c438:	e7f5      	b.n	800c426 <_printf_i+0x222>
 800c43a:	bf00      	nop
 800c43c:	08010ef2 	.word	0x08010ef2
 800c440:	08010f03 	.word	0x08010f03

0800c444 <std>:
 800c444:	2300      	movs	r3, #0
 800c446:	b510      	push	{r4, lr}
 800c448:	4604      	mov	r4, r0
 800c44a:	e9c0 3300 	strd	r3, r3, [r0]
 800c44e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c452:	6083      	str	r3, [r0, #8]
 800c454:	8181      	strh	r1, [r0, #12]
 800c456:	6643      	str	r3, [r0, #100]	@ 0x64
 800c458:	81c2      	strh	r2, [r0, #14]
 800c45a:	6183      	str	r3, [r0, #24]
 800c45c:	4619      	mov	r1, r3
 800c45e:	2208      	movs	r2, #8
 800c460:	305c      	adds	r0, #92	@ 0x5c
 800c462:	f000 f914 	bl	800c68e <memset>
 800c466:	4b0d      	ldr	r3, [pc, #52]	@ (800c49c <std+0x58>)
 800c468:	6263      	str	r3, [r4, #36]	@ 0x24
 800c46a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a0 <std+0x5c>)
 800c46c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c46e:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a4 <std+0x60>)
 800c470:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c472:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a8 <std+0x64>)
 800c474:	6323      	str	r3, [r4, #48]	@ 0x30
 800c476:	4b0d      	ldr	r3, [pc, #52]	@ (800c4ac <std+0x68>)
 800c478:	6224      	str	r4, [r4, #32]
 800c47a:	429c      	cmp	r4, r3
 800c47c:	d006      	beq.n	800c48c <std+0x48>
 800c47e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c482:	4294      	cmp	r4, r2
 800c484:	d002      	beq.n	800c48c <std+0x48>
 800c486:	33d0      	adds	r3, #208	@ 0xd0
 800c488:	429c      	cmp	r4, r3
 800c48a:	d105      	bne.n	800c498 <std+0x54>
 800c48c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c494:	f000 b978 	b.w	800c788 <__retarget_lock_init_recursive>
 800c498:	bd10      	pop	{r4, pc}
 800c49a:	bf00      	nop
 800c49c:	0800c609 	.word	0x0800c609
 800c4a0:	0800c62b 	.word	0x0800c62b
 800c4a4:	0800c663 	.word	0x0800c663
 800c4a8:	0800c687 	.word	0x0800c687
 800c4ac:	200021f4 	.word	0x200021f4

0800c4b0 <stdio_exit_handler>:
 800c4b0:	4a02      	ldr	r2, [pc, #8]	@ (800c4bc <stdio_exit_handler+0xc>)
 800c4b2:	4903      	ldr	r1, [pc, #12]	@ (800c4c0 <stdio_exit_handler+0x10>)
 800c4b4:	4803      	ldr	r0, [pc, #12]	@ (800c4c4 <stdio_exit_handler+0x14>)
 800c4b6:	f000 b869 	b.w	800c58c <_fwalk_sglue>
 800c4ba:	bf00      	nop
 800c4bc:	20000128 	.word	0x20000128
 800c4c0:	0800e125 	.word	0x0800e125
 800c4c4:	20000138 	.word	0x20000138

0800c4c8 <cleanup_stdio>:
 800c4c8:	6841      	ldr	r1, [r0, #4]
 800c4ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c4fc <cleanup_stdio+0x34>)
 800c4cc:	4299      	cmp	r1, r3
 800c4ce:	b510      	push	{r4, lr}
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	d001      	beq.n	800c4d8 <cleanup_stdio+0x10>
 800c4d4:	f001 fe26 	bl	800e124 <_fflush_r>
 800c4d8:	68a1      	ldr	r1, [r4, #8]
 800c4da:	4b09      	ldr	r3, [pc, #36]	@ (800c500 <cleanup_stdio+0x38>)
 800c4dc:	4299      	cmp	r1, r3
 800c4de:	d002      	beq.n	800c4e6 <cleanup_stdio+0x1e>
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f001 fe1f 	bl	800e124 <_fflush_r>
 800c4e6:	68e1      	ldr	r1, [r4, #12]
 800c4e8:	4b06      	ldr	r3, [pc, #24]	@ (800c504 <cleanup_stdio+0x3c>)
 800c4ea:	4299      	cmp	r1, r3
 800c4ec:	d004      	beq.n	800c4f8 <cleanup_stdio+0x30>
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f4:	f001 be16 	b.w	800e124 <_fflush_r>
 800c4f8:	bd10      	pop	{r4, pc}
 800c4fa:	bf00      	nop
 800c4fc:	200021f4 	.word	0x200021f4
 800c500:	2000225c 	.word	0x2000225c
 800c504:	200022c4 	.word	0x200022c4

0800c508 <global_stdio_init.part.0>:
 800c508:	b510      	push	{r4, lr}
 800c50a:	4b0b      	ldr	r3, [pc, #44]	@ (800c538 <global_stdio_init.part.0+0x30>)
 800c50c:	4c0b      	ldr	r4, [pc, #44]	@ (800c53c <global_stdio_init.part.0+0x34>)
 800c50e:	4a0c      	ldr	r2, [pc, #48]	@ (800c540 <global_stdio_init.part.0+0x38>)
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	4620      	mov	r0, r4
 800c514:	2200      	movs	r2, #0
 800c516:	2104      	movs	r1, #4
 800c518:	f7ff ff94 	bl	800c444 <std>
 800c51c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c520:	2201      	movs	r2, #1
 800c522:	2109      	movs	r1, #9
 800c524:	f7ff ff8e 	bl	800c444 <std>
 800c528:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c52c:	2202      	movs	r2, #2
 800c52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c532:	2112      	movs	r1, #18
 800c534:	f7ff bf86 	b.w	800c444 <std>
 800c538:	2000232c 	.word	0x2000232c
 800c53c:	200021f4 	.word	0x200021f4
 800c540:	0800c4b1 	.word	0x0800c4b1

0800c544 <__sfp_lock_acquire>:
 800c544:	4801      	ldr	r0, [pc, #4]	@ (800c54c <__sfp_lock_acquire+0x8>)
 800c546:	f000 b920 	b.w	800c78a <__retarget_lock_acquire_recursive>
 800c54a:	bf00      	nop
 800c54c:	20002335 	.word	0x20002335

0800c550 <__sfp_lock_release>:
 800c550:	4801      	ldr	r0, [pc, #4]	@ (800c558 <__sfp_lock_release+0x8>)
 800c552:	f000 b91b 	b.w	800c78c <__retarget_lock_release_recursive>
 800c556:	bf00      	nop
 800c558:	20002335 	.word	0x20002335

0800c55c <__sinit>:
 800c55c:	b510      	push	{r4, lr}
 800c55e:	4604      	mov	r4, r0
 800c560:	f7ff fff0 	bl	800c544 <__sfp_lock_acquire>
 800c564:	6a23      	ldr	r3, [r4, #32]
 800c566:	b11b      	cbz	r3, 800c570 <__sinit+0x14>
 800c568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c56c:	f7ff bff0 	b.w	800c550 <__sfp_lock_release>
 800c570:	4b04      	ldr	r3, [pc, #16]	@ (800c584 <__sinit+0x28>)
 800c572:	6223      	str	r3, [r4, #32]
 800c574:	4b04      	ldr	r3, [pc, #16]	@ (800c588 <__sinit+0x2c>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1f5      	bne.n	800c568 <__sinit+0xc>
 800c57c:	f7ff ffc4 	bl	800c508 <global_stdio_init.part.0>
 800c580:	e7f2      	b.n	800c568 <__sinit+0xc>
 800c582:	bf00      	nop
 800c584:	0800c4c9 	.word	0x0800c4c9
 800c588:	2000232c 	.word	0x2000232c

0800c58c <_fwalk_sglue>:
 800c58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c590:	4607      	mov	r7, r0
 800c592:	4688      	mov	r8, r1
 800c594:	4614      	mov	r4, r2
 800c596:	2600      	movs	r6, #0
 800c598:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c59c:	f1b9 0901 	subs.w	r9, r9, #1
 800c5a0:	d505      	bpl.n	800c5ae <_fwalk_sglue+0x22>
 800c5a2:	6824      	ldr	r4, [r4, #0]
 800c5a4:	2c00      	cmp	r4, #0
 800c5a6:	d1f7      	bne.n	800c598 <_fwalk_sglue+0xc>
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d907      	bls.n	800c5c4 <_fwalk_sglue+0x38>
 800c5b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	d003      	beq.n	800c5c4 <_fwalk_sglue+0x38>
 800c5bc:	4629      	mov	r1, r5
 800c5be:	4638      	mov	r0, r7
 800c5c0:	47c0      	blx	r8
 800c5c2:	4306      	orrs	r6, r0
 800c5c4:	3568      	adds	r5, #104	@ 0x68
 800c5c6:	e7e9      	b.n	800c59c <_fwalk_sglue+0x10>

0800c5c8 <siprintf>:
 800c5c8:	b40e      	push	{r1, r2, r3}
 800c5ca:	b500      	push	{lr}
 800c5cc:	b09c      	sub	sp, #112	@ 0x70
 800c5ce:	ab1d      	add	r3, sp, #116	@ 0x74
 800c5d0:	9002      	str	r0, [sp, #8]
 800c5d2:	9006      	str	r0, [sp, #24]
 800c5d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c5d8:	4809      	ldr	r0, [pc, #36]	@ (800c600 <siprintf+0x38>)
 800c5da:	9107      	str	r1, [sp, #28]
 800c5dc:	9104      	str	r1, [sp, #16]
 800c5de:	4909      	ldr	r1, [pc, #36]	@ (800c604 <siprintf+0x3c>)
 800c5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e4:	9105      	str	r1, [sp, #20]
 800c5e6:	6800      	ldr	r0, [r0, #0]
 800c5e8:	9301      	str	r3, [sp, #4]
 800c5ea:	a902      	add	r1, sp, #8
 800c5ec:	f001 fc1a 	bl	800de24 <_svfiprintf_r>
 800c5f0:	9b02      	ldr	r3, [sp, #8]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	b01c      	add	sp, #112	@ 0x70
 800c5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5fc:	b003      	add	sp, #12
 800c5fe:	4770      	bx	lr
 800c600:	20000134 	.word	0x20000134
 800c604:	ffff0208 	.word	0xffff0208

0800c608 <__sread>:
 800c608:	b510      	push	{r4, lr}
 800c60a:	460c      	mov	r4, r1
 800c60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c610:	f000 f86c 	bl	800c6ec <_read_r>
 800c614:	2800      	cmp	r0, #0
 800c616:	bfab      	itete	ge
 800c618:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c61a:	89a3      	ldrhlt	r3, [r4, #12]
 800c61c:	181b      	addge	r3, r3, r0
 800c61e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c622:	bfac      	ite	ge
 800c624:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c626:	81a3      	strhlt	r3, [r4, #12]
 800c628:	bd10      	pop	{r4, pc}

0800c62a <__swrite>:
 800c62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c62e:	461f      	mov	r7, r3
 800c630:	898b      	ldrh	r3, [r1, #12]
 800c632:	05db      	lsls	r3, r3, #23
 800c634:	4605      	mov	r5, r0
 800c636:	460c      	mov	r4, r1
 800c638:	4616      	mov	r6, r2
 800c63a:	d505      	bpl.n	800c648 <__swrite+0x1e>
 800c63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c640:	2302      	movs	r3, #2
 800c642:	2200      	movs	r2, #0
 800c644:	f000 f840 	bl	800c6c8 <_lseek_r>
 800c648:	89a3      	ldrh	r3, [r4, #12]
 800c64a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c64e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c652:	81a3      	strh	r3, [r4, #12]
 800c654:	4632      	mov	r2, r6
 800c656:	463b      	mov	r3, r7
 800c658:	4628      	mov	r0, r5
 800c65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c65e:	f000 b857 	b.w	800c710 <_write_r>

0800c662 <__sseek>:
 800c662:	b510      	push	{r4, lr}
 800c664:	460c      	mov	r4, r1
 800c666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c66a:	f000 f82d 	bl	800c6c8 <_lseek_r>
 800c66e:	1c43      	adds	r3, r0, #1
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	bf15      	itete	ne
 800c674:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c676:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c67a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c67e:	81a3      	strheq	r3, [r4, #12]
 800c680:	bf18      	it	ne
 800c682:	81a3      	strhne	r3, [r4, #12]
 800c684:	bd10      	pop	{r4, pc}

0800c686 <__sclose>:
 800c686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c68a:	f000 b80d 	b.w	800c6a8 <_close_r>

0800c68e <memset>:
 800c68e:	4402      	add	r2, r0
 800c690:	4603      	mov	r3, r0
 800c692:	4293      	cmp	r3, r2
 800c694:	d100      	bne.n	800c698 <memset+0xa>
 800c696:	4770      	bx	lr
 800c698:	f803 1b01 	strb.w	r1, [r3], #1
 800c69c:	e7f9      	b.n	800c692 <memset+0x4>
	...

0800c6a0 <_localeconv_r>:
 800c6a0:	4800      	ldr	r0, [pc, #0]	@ (800c6a4 <_localeconv_r+0x4>)
 800c6a2:	4770      	bx	lr
 800c6a4:	20000274 	.word	0x20000274

0800c6a8 <_close_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	4d06      	ldr	r5, [pc, #24]	@ (800c6c4 <_close_r+0x1c>)
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	602b      	str	r3, [r5, #0]
 800c6b4:	f7f6 ff72 	bl	800359c <_close>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_close_r+0x1a>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_close_r+0x1a>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	20002330 	.word	0x20002330

0800c6c8 <_lseek_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	4d07      	ldr	r5, [pc, #28]	@ (800c6e8 <_lseek_r+0x20>)
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	4608      	mov	r0, r1
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	602a      	str	r2, [r5, #0]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	f7f6 ff87 	bl	80035ea <_lseek>
 800c6dc:	1c43      	adds	r3, r0, #1
 800c6de:	d102      	bne.n	800c6e6 <_lseek_r+0x1e>
 800c6e0:	682b      	ldr	r3, [r5, #0]
 800c6e2:	b103      	cbz	r3, 800c6e6 <_lseek_r+0x1e>
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	bd38      	pop	{r3, r4, r5, pc}
 800c6e8:	20002330 	.word	0x20002330

0800c6ec <_read_r>:
 800c6ec:	b538      	push	{r3, r4, r5, lr}
 800c6ee:	4d07      	ldr	r5, [pc, #28]	@ (800c70c <_read_r+0x20>)
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	4608      	mov	r0, r1
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	602a      	str	r2, [r5, #0]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	f7f6 ff15 	bl	800352a <_read>
 800c700:	1c43      	adds	r3, r0, #1
 800c702:	d102      	bne.n	800c70a <_read_r+0x1e>
 800c704:	682b      	ldr	r3, [r5, #0]
 800c706:	b103      	cbz	r3, 800c70a <_read_r+0x1e>
 800c708:	6023      	str	r3, [r4, #0]
 800c70a:	bd38      	pop	{r3, r4, r5, pc}
 800c70c:	20002330 	.word	0x20002330

0800c710 <_write_r>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	4d07      	ldr	r5, [pc, #28]	@ (800c730 <_write_r+0x20>)
 800c714:	4604      	mov	r4, r0
 800c716:	4608      	mov	r0, r1
 800c718:	4611      	mov	r1, r2
 800c71a:	2200      	movs	r2, #0
 800c71c:	602a      	str	r2, [r5, #0]
 800c71e:	461a      	mov	r2, r3
 800c720:	f7f6 ff20 	bl	8003564 <_write>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	d102      	bne.n	800c72e <_write_r+0x1e>
 800c728:	682b      	ldr	r3, [r5, #0]
 800c72a:	b103      	cbz	r3, 800c72e <_write_r+0x1e>
 800c72c:	6023      	str	r3, [r4, #0]
 800c72e:	bd38      	pop	{r3, r4, r5, pc}
 800c730:	20002330 	.word	0x20002330

0800c734 <__errno>:
 800c734:	4b01      	ldr	r3, [pc, #4]	@ (800c73c <__errno+0x8>)
 800c736:	6818      	ldr	r0, [r3, #0]
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	20000134 	.word	0x20000134

0800c740 <__libc_init_array>:
 800c740:	b570      	push	{r4, r5, r6, lr}
 800c742:	4d0d      	ldr	r5, [pc, #52]	@ (800c778 <__libc_init_array+0x38>)
 800c744:	4c0d      	ldr	r4, [pc, #52]	@ (800c77c <__libc_init_array+0x3c>)
 800c746:	1b64      	subs	r4, r4, r5
 800c748:	10a4      	asrs	r4, r4, #2
 800c74a:	2600      	movs	r6, #0
 800c74c:	42a6      	cmp	r6, r4
 800c74e:	d109      	bne.n	800c764 <__libc_init_array+0x24>
 800c750:	4d0b      	ldr	r5, [pc, #44]	@ (800c780 <__libc_init_array+0x40>)
 800c752:	4c0c      	ldr	r4, [pc, #48]	@ (800c784 <__libc_init_array+0x44>)
 800c754:	f004 fb56 	bl	8010e04 <_init>
 800c758:	1b64      	subs	r4, r4, r5
 800c75a:	10a4      	asrs	r4, r4, #2
 800c75c:	2600      	movs	r6, #0
 800c75e:	42a6      	cmp	r6, r4
 800c760:	d105      	bne.n	800c76e <__libc_init_array+0x2e>
 800c762:	bd70      	pop	{r4, r5, r6, pc}
 800c764:	f855 3b04 	ldr.w	r3, [r5], #4
 800c768:	4798      	blx	r3
 800c76a:	3601      	adds	r6, #1
 800c76c:	e7ee      	b.n	800c74c <__libc_init_array+0xc>
 800c76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c772:	4798      	blx	r3
 800c774:	3601      	adds	r6, #1
 800c776:	e7f2      	b.n	800c75e <__libc_init_array+0x1e>
 800c778:	080116e0 	.word	0x080116e0
 800c77c:	080116e0 	.word	0x080116e0
 800c780:	080116e0 	.word	0x080116e0
 800c784:	080116e4 	.word	0x080116e4

0800c788 <__retarget_lock_init_recursive>:
 800c788:	4770      	bx	lr

0800c78a <__retarget_lock_acquire_recursive>:
 800c78a:	4770      	bx	lr

0800c78c <__retarget_lock_release_recursive>:
 800c78c:	4770      	bx	lr

0800c78e <memcpy>:
 800c78e:	440a      	add	r2, r1
 800c790:	4291      	cmp	r1, r2
 800c792:	f100 33ff 	add.w	r3, r0, #4294967295
 800c796:	d100      	bne.n	800c79a <memcpy+0xc>
 800c798:	4770      	bx	lr
 800c79a:	b510      	push	{r4, lr}
 800c79c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7a4:	4291      	cmp	r1, r2
 800c7a6:	d1f9      	bne.n	800c79c <memcpy+0xe>
 800c7a8:	bd10      	pop	{r4, pc}

0800c7aa <copysign>:
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	ec51 0b10 	vmov	r0, r1, d0
 800c7b0:	ed8d 1b00 	vstr	d1, [sp]
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800c7ba:	9901      	ldr	r1, [sp, #4]
 800c7bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c7c0:	ea40 0301 	orr.w	r3, r0, r1
 800c7c4:	ec43 2b10 	vmov	d0, r2, r3
 800c7c8:	b002      	add	sp, #8
 800c7ca:	4770      	bx	lr

0800c7cc <quorem>:
 800c7cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	6903      	ldr	r3, [r0, #16]
 800c7d2:	690c      	ldr	r4, [r1, #16]
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	4607      	mov	r7, r0
 800c7d8:	db7e      	blt.n	800c8d8 <quorem+0x10c>
 800c7da:	3c01      	subs	r4, #1
 800c7dc:	f101 0814 	add.w	r8, r1, #20
 800c7e0:	00a3      	lsls	r3, r4, #2
 800c7e2:	f100 0514 	add.w	r5, r0, #20
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c7f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c7fe:	fbb2 f6f3 	udiv	r6, r2, r3
 800c802:	d32e      	bcc.n	800c862 <quorem+0x96>
 800c804:	f04f 0a00 	mov.w	sl, #0
 800c808:	46c4      	mov	ip, r8
 800c80a:	46ae      	mov	lr, r5
 800c80c:	46d3      	mov	fp, sl
 800c80e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c812:	b298      	uxth	r0, r3
 800c814:	fb06 a000 	mla	r0, r6, r0, sl
 800c818:	0c02      	lsrs	r2, r0, #16
 800c81a:	0c1b      	lsrs	r3, r3, #16
 800c81c:	fb06 2303 	mla	r3, r6, r3, r2
 800c820:	f8de 2000 	ldr.w	r2, [lr]
 800c824:	b280      	uxth	r0, r0
 800c826:	b292      	uxth	r2, r2
 800c828:	1a12      	subs	r2, r2, r0
 800c82a:	445a      	add	r2, fp
 800c82c:	f8de 0000 	ldr.w	r0, [lr]
 800c830:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c834:	b29b      	uxth	r3, r3
 800c836:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c83a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c83e:	b292      	uxth	r2, r2
 800c840:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c844:	45e1      	cmp	r9, ip
 800c846:	f84e 2b04 	str.w	r2, [lr], #4
 800c84a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c84e:	d2de      	bcs.n	800c80e <quorem+0x42>
 800c850:	9b00      	ldr	r3, [sp, #0]
 800c852:	58eb      	ldr	r3, [r5, r3]
 800c854:	b92b      	cbnz	r3, 800c862 <quorem+0x96>
 800c856:	9b01      	ldr	r3, [sp, #4]
 800c858:	3b04      	subs	r3, #4
 800c85a:	429d      	cmp	r5, r3
 800c85c:	461a      	mov	r2, r3
 800c85e:	d32f      	bcc.n	800c8c0 <quorem+0xf4>
 800c860:	613c      	str	r4, [r7, #16]
 800c862:	4638      	mov	r0, r7
 800c864:	f001 f97a 	bl	800db5c <__mcmp>
 800c868:	2800      	cmp	r0, #0
 800c86a:	db25      	blt.n	800c8b8 <quorem+0xec>
 800c86c:	4629      	mov	r1, r5
 800c86e:	2000      	movs	r0, #0
 800c870:	f858 2b04 	ldr.w	r2, [r8], #4
 800c874:	f8d1 c000 	ldr.w	ip, [r1]
 800c878:	fa1f fe82 	uxth.w	lr, r2
 800c87c:	fa1f f38c 	uxth.w	r3, ip
 800c880:	eba3 030e 	sub.w	r3, r3, lr
 800c884:	4403      	add	r3, r0
 800c886:	0c12      	lsrs	r2, r2, #16
 800c888:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c88c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c890:	b29b      	uxth	r3, r3
 800c892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c896:	45c1      	cmp	r9, r8
 800c898:	f841 3b04 	str.w	r3, [r1], #4
 800c89c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c8a0:	d2e6      	bcs.n	800c870 <quorem+0xa4>
 800c8a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8aa:	b922      	cbnz	r2, 800c8b6 <quorem+0xea>
 800c8ac:	3b04      	subs	r3, #4
 800c8ae:	429d      	cmp	r5, r3
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	d30b      	bcc.n	800c8cc <quorem+0x100>
 800c8b4:	613c      	str	r4, [r7, #16]
 800c8b6:	3601      	adds	r6, #1
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	b003      	add	sp, #12
 800c8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c0:	6812      	ldr	r2, [r2, #0]
 800c8c2:	3b04      	subs	r3, #4
 800c8c4:	2a00      	cmp	r2, #0
 800c8c6:	d1cb      	bne.n	800c860 <quorem+0x94>
 800c8c8:	3c01      	subs	r4, #1
 800c8ca:	e7c6      	b.n	800c85a <quorem+0x8e>
 800c8cc:	6812      	ldr	r2, [r2, #0]
 800c8ce:	3b04      	subs	r3, #4
 800c8d0:	2a00      	cmp	r2, #0
 800c8d2:	d1ef      	bne.n	800c8b4 <quorem+0xe8>
 800c8d4:	3c01      	subs	r4, #1
 800c8d6:	e7ea      	b.n	800c8ae <quorem+0xe2>
 800c8d8:	2000      	movs	r0, #0
 800c8da:	e7ee      	b.n	800c8ba <quorem+0xee>
 800c8dc:	0000      	movs	r0, r0
	...

0800c8e0 <_dtoa_r>:
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	69c7      	ldr	r7, [r0, #28]
 800c8e6:	b099      	sub	sp, #100	@ 0x64
 800c8e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c8ec:	ec55 4b10 	vmov	r4, r5, d0
 800c8f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c8f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c8f4:	4683      	mov	fp, r0
 800c8f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c8f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8fa:	b97f      	cbnz	r7, 800c91c <_dtoa_r+0x3c>
 800c8fc:	2010      	movs	r0, #16
 800c8fe:	f000 fdfd 	bl	800d4fc <malloc>
 800c902:	4602      	mov	r2, r0
 800c904:	f8cb 001c 	str.w	r0, [fp, #28]
 800c908:	b920      	cbnz	r0, 800c914 <_dtoa_r+0x34>
 800c90a:	4ba7      	ldr	r3, [pc, #668]	@ (800cba8 <_dtoa_r+0x2c8>)
 800c90c:	21ef      	movs	r1, #239	@ 0xef
 800c90e:	48a7      	ldr	r0, [pc, #668]	@ (800cbac <_dtoa_r+0x2cc>)
 800c910:	f001 fc5a 	bl	800e1c8 <__assert_func>
 800c914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c918:	6007      	str	r7, [r0, #0]
 800c91a:	60c7      	str	r7, [r0, #12]
 800c91c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c920:	6819      	ldr	r1, [r3, #0]
 800c922:	b159      	cbz	r1, 800c93c <_dtoa_r+0x5c>
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	604a      	str	r2, [r1, #4]
 800c928:	2301      	movs	r3, #1
 800c92a:	4093      	lsls	r3, r2
 800c92c:	608b      	str	r3, [r1, #8]
 800c92e:	4658      	mov	r0, fp
 800c930:	f000 feda 	bl	800d6e8 <_Bfree>
 800c934:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c938:	2200      	movs	r2, #0
 800c93a:	601a      	str	r2, [r3, #0]
 800c93c:	1e2b      	subs	r3, r5, #0
 800c93e:	bfb9      	ittee	lt
 800c940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c944:	9303      	strlt	r3, [sp, #12]
 800c946:	2300      	movge	r3, #0
 800c948:	6033      	strge	r3, [r6, #0]
 800c94a:	9f03      	ldr	r7, [sp, #12]
 800c94c:	4b98      	ldr	r3, [pc, #608]	@ (800cbb0 <_dtoa_r+0x2d0>)
 800c94e:	bfbc      	itt	lt
 800c950:	2201      	movlt	r2, #1
 800c952:	6032      	strlt	r2, [r6, #0]
 800c954:	43bb      	bics	r3, r7
 800c956:	d112      	bne.n	800c97e <_dtoa_r+0x9e>
 800c958:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c95a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c964:	4323      	orrs	r3, r4
 800c966:	f000 854d 	beq.w	800d404 <_dtoa_r+0xb24>
 800c96a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c96c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cbc4 <_dtoa_r+0x2e4>
 800c970:	2b00      	cmp	r3, #0
 800c972:	f000 854f 	beq.w	800d414 <_dtoa_r+0xb34>
 800c976:	f10a 0303 	add.w	r3, sl, #3
 800c97a:	f000 bd49 	b.w	800d410 <_dtoa_r+0xb30>
 800c97e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c982:	2200      	movs	r2, #0
 800c984:	ec51 0b17 	vmov	r0, r1, d7
 800c988:	2300      	movs	r3, #0
 800c98a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c98e:	f7f4 f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c992:	4680      	mov	r8, r0
 800c994:	b158      	cbz	r0, 800c9ae <_dtoa_r+0xce>
 800c996:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c998:	2301      	movs	r3, #1
 800c99a:	6013      	str	r3, [r2, #0]
 800c99c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c99e:	b113      	cbz	r3, 800c9a6 <_dtoa_r+0xc6>
 800c9a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c9a2:	4b84      	ldr	r3, [pc, #528]	@ (800cbb4 <_dtoa_r+0x2d4>)
 800c9a4:	6013      	str	r3, [r2, #0]
 800c9a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cbc8 <_dtoa_r+0x2e8>
 800c9aa:	f000 bd33 	b.w	800d414 <_dtoa_r+0xb34>
 800c9ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c9b2:	aa16      	add	r2, sp, #88	@ 0x58
 800c9b4:	a917      	add	r1, sp, #92	@ 0x5c
 800c9b6:	4658      	mov	r0, fp
 800c9b8:	f001 f980 	bl	800dcbc <__d2b>
 800c9bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c9c0:	4681      	mov	r9, r0
 800c9c2:	2e00      	cmp	r6, #0
 800c9c4:	d077      	beq.n	800cab6 <_dtoa_r+0x1d6>
 800c9c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c9c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c9cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c9d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c9dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	4b74      	ldr	r3, [pc, #464]	@ (800cbb8 <_dtoa_r+0x2d8>)
 800c9e6:	f7f3 fc4f 	bl	8000288 <__aeabi_dsub>
 800c9ea:	a369      	add	r3, pc, #420	@ (adr r3, 800cb90 <_dtoa_r+0x2b0>)
 800c9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f0:	f7f3 fe02 	bl	80005f8 <__aeabi_dmul>
 800c9f4:	a368      	add	r3, pc, #416	@ (adr r3, 800cb98 <_dtoa_r+0x2b8>)
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	f7f3 fc47 	bl	800028c <__adddf3>
 800c9fe:	4604      	mov	r4, r0
 800ca00:	4630      	mov	r0, r6
 800ca02:	460d      	mov	r5, r1
 800ca04:	f7f3 fd8e 	bl	8000524 <__aeabi_i2d>
 800ca08:	a365      	add	r3, pc, #404	@ (adr r3, 800cba0 <_dtoa_r+0x2c0>)
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	f7f3 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	4620      	mov	r0, r4
 800ca18:	4629      	mov	r1, r5
 800ca1a:	f7f3 fc37 	bl	800028c <__adddf3>
 800ca1e:	4604      	mov	r4, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	f7f4 f899 	bl	8000b58 <__aeabi_d2iz>
 800ca26:	2200      	movs	r2, #0
 800ca28:	4607      	mov	r7, r0
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	4629      	mov	r1, r5
 800ca30:	f7f4 f854 	bl	8000adc <__aeabi_dcmplt>
 800ca34:	b140      	cbz	r0, 800ca48 <_dtoa_r+0x168>
 800ca36:	4638      	mov	r0, r7
 800ca38:	f7f3 fd74 	bl	8000524 <__aeabi_i2d>
 800ca3c:	4622      	mov	r2, r4
 800ca3e:	462b      	mov	r3, r5
 800ca40:	f7f4 f842 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca44:	b900      	cbnz	r0, 800ca48 <_dtoa_r+0x168>
 800ca46:	3f01      	subs	r7, #1
 800ca48:	2f16      	cmp	r7, #22
 800ca4a:	d851      	bhi.n	800caf0 <_dtoa_r+0x210>
 800ca4c:	4b5b      	ldr	r3, [pc, #364]	@ (800cbbc <_dtoa_r+0x2dc>)
 800ca4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca5a:	f7f4 f83f 	bl	8000adc <__aeabi_dcmplt>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d048      	beq.n	800caf4 <_dtoa_r+0x214>
 800ca62:	3f01      	subs	r7, #1
 800ca64:	2300      	movs	r3, #0
 800ca66:	9312      	str	r3, [sp, #72]	@ 0x48
 800ca68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ca6a:	1b9b      	subs	r3, r3, r6
 800ca6c:	1e5a      	subs	r2, r3, #1
 800ca6e:	bf44      	itt	mi
 800ca70:	f1c3 0801 	rsbmi	r8, r3, #1
 800ca74:	2300      	movmi	r3, #0
 800ca76:	9208      	str	r2, [sp, #32]
 800ca78:	bf54      	ite	pl
 800ca7a:	f04f 0800 	movpl.w	r8, #0
 800ca7e:	9308      	strmi	r3, [sp, #32]
 800ca80:	2f00      	cmp	r7, #0
 800ca82:	db39      	blt.n	800caf8 <_dtoa_r+0x218>
 800ca84:	9b08      	ldr	r3, [sp, #32]
 800ca86:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ca88:	443b      	add	r3, r7
 800ca8a:	9308      	str	r3, [sp, #32]
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca92:	2b09      	cmp	r3, #9
 800ca94:	d864      	bhi.n	800cb60 <_dtoa_r+0x280>
 800ca96:	2b05      	cmp	r3, #5
 800ca98:	bfc4      	itt	gt
 800ca9a:	3b04      	subgt	r3, #4
 800ca9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ca9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caa0:	f1a3 0302 	sub.w	r3, r3, #2
 800caa4:	bfcc      	ite	gt
 800caa6:	2400      	movgt	r4, #0
 800caa8:	2401      	movle	r4, #1
 800caaa:	2b03      	cmp	r3, #3
 800caac:	d863      	bhi.n	800cb76 <_dtoa_r+0x296>
 800caae:	e8df f003 	tbb	[pc, r3]
 800cab2:	372a      	.short	0x372a
 800cab4:	5535      	.short	0x5535
 800cab6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800caba:	441e      	add	r6, r3
 800cabc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cac0:	2b20      	cmp	r3, #32
 800cac2:	bfc1      	itttt	gt
 800cac4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cac8:	409f      	lslgt	r7, r3
 800caca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cace:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cad2:	bfd6      	itet	le
 800cad4:	f1c3 0320 	rsble	r3, r3, #32
 800cad8:	ea47 0003 	orrgt.w	r0, r7, r3
 800cadc:	fa04 f003 	lslle.w	r0, r4, r3
 800cae0:	f7f3 fd10 	bl	8000504 <__aeabi_ui2d>
 800cae4:	2201      	movs	r2, #1
 800cae6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800caea:	3e01      	subs	r6, #1
 800caec:	9214      	str	r2, [sp, #80]	@ 0x50
 800caee:	e777      	b.n	800c9e0 <_dtoa_r+0x100>
 800caf0:	2301      	movs	r3, #1
 800caf2:	e7b8      	b.n	800ca66 <_dtoa_r+0x186>
 800caf4:	9012      	str	r0, [sp, #72]	@ 0x48
 800caf6:	e7b7      	b.n	800ca68 <_dtoa_r+0x188>
 800caf8:	427b      	negs	r3, r7
 800cafa:	930a      	str	r3, [sp, #40]	@ 0x28
 800cafc:	2300      	movs	r3, #0
 800cafe:	eba8 0807 	sub.w	r8, r8, r7
 800cb02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb04:	e7c4      	b.n	800ca90 <_dtoa_r+0x1b0>
 800cb06:	2300      	movs	r3, #0
 800cb08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	dc35      	bgt.n	800cb7c <_dtoa_r+0x29c>
 800cb10:	2301      	movs	r3, #1
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	9307      	str	r3, [sp, #28]
 800cb16:	461a      	mov	r2, r3
 800cb18:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb1a:	e00b      	b.n	800cb34 <_dtoa_r+0x254>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e7f3      	b.n	800cb08 <_dtoa_r+0x228>
 800cb20:	2300      	movs	r3, #0
 800cb22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb26:	18fb      	adds	r3, r7, r3
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	9307      	str	r3, [sp, #28]
 800cb30:	bfb8      	it	lt
 800cb32:	2301      	movlt	r3, #1
 800cb34:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cb38:	2100      	movs	r1, #0
 800cb3a:	2204      	movs	r2, #4
 800cb3c:	f102 0514 	add.w	r5, r2, #20
 800cb40:	429d      	cmp	r5, r3
 800cb42:	d91f      	bls.n	800cb84 <_dtoa_r+0x2a4>
 800cb44:	6041      	str	r1, [r0, #4]
 800cb46:	4658      	mov	r0, fp
 800cb48:	f000 fd8e 	bl	800d668 <_Balloc>
 800cb4c:	4682      	mov	sl, r0
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d13c      	bne.n	800cbcc <_dtoa_r+0x2ec>
 800cb52:	4b1b      	ldr	r3, [pc, #108]	@ (800cbc0 <_dtoa_r+0x2e0>)
 800cb54:	4602      	mov	r2, r0
 800cb56:	f240 11af 	movw	r1, #431	@ 0x1af
 800cb5a:	e6d8      	b.n	800c90e <_dtoa_r+0x2e>
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e7e0      	b.n	800cb22 <_dtoa_r+0x242>
 800cb60:	2401      	movs	r4, #1
 800cb62:	2300      	movs	r3, #0
 800cb64:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cb68:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	9307      	str	r3, [sp, #28]
 800cb70:	2200      	movs	r2, #0
 800cb72:	2312      	movs	r3, #18
 800cb74:	e7d0      	b.n	800cb18 <_dtoa_r+0x238>
 800cb76:	2301      	movs	r3, #1
 800cb78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb7a:	e7f5      	b.n	800cb68 <_dtoa_r+0x288>
 800cb7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	9307      	str	r3, [sp, #28]
 800cb82:	e7d7      	b.n	800cb34 <_dtoa_r+0x254>
 800cb84:	3101      	adds	r1, #1
 800cb86:	0052      	lsls	r2, r2, #1
 800cb88:	e7d8      	b.n	800cb3c <_dtoa_r+0x25c>
 800cb8a:	bf00      	nop
 800cb8c:	f3af 8000 	nop.w
 800cb90:	636f4361 	.word	0x636f4361
 800cb94:	3fd287a7 	.word	0x3fd287a7
 800cb98:	8b60c8b3 	.word	0x8b60c8b3
 800cb9c:	3fc68a28 	.word	0x3fc68a28
 800cba0:	509f79fb 	.word	0x509f79fb
 800cba4:	3fd34413 	.word	0x3fd34413
 800cba8:	08010f21 	.word	0x08010f21
 800cbac:	08010f38 	.word	0x08010f38
 800cbb0:	7ff00000 	.word	0x7ff00000
 800cbb4:	08010ef1 	.word	0x08010ef1
 800cbb8:	3ff80000 	.word	0x3ff80000
 800cbbc:	08011030 	.word	0x08011030
 800cbc0:	08010f90 	.word	0x08010f90
 800cbc4:	08010f1d 	.word	0x08010f1d
 800cbc8:	08010ef0 	.word	0x08010ef0
 800cbcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cbd0:	6018      	str	r0, [r3, #0]
 800cbd2:	9b07      	ldr	r3, [sp, #28]
 800cbd4:	2b0e      	cmp	r3, #14
 800cbd6:	f200 80a4 	bhi.w	800cd22 <_dtoa_r+0x442>
 800cbda:	2c00      	cmp	r4, #0
 800cbdc:	f000 80a1 	beq.w	800cd22 <_dtoa_r+0x442>
 800cbe0:	2f00      	cmp	r7, #0
 800cbe2:	dd33      	ble.n	800cc4c <_dtoa_r+0x36c>
 800cbe4:	4bad      	ldr	r3, [pc, #692]	@ (800ce9c <_dtoa_r+0x5bc>)
 800cbe6:	f007 020f 	and.w	r2, r7, #15
 800cbea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbee:	ed93 7b00 	vldr	d7, [r3]
 800cbf2:	05f8      	lsls	r0, r7, #23
 800cbf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cbf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cbfc:	d516      	bpl.n	800cc2c <_dtoa_r+0x34c>
 800cbfe:	4ba8      	ldr	r3, [pc, #672]	@ (800cea0 <_dtoa_r+0x5c0>)
 800cc00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc08:	f7f3 fe20 	bl	800084c <__aeabi_ddiv>
 800cc0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc10:	f004 040f 	and.w	r4, r4, #15
 800cc14:	2603      	movs	r6, #3
 800cc16:	4da2      	ldr	r5, [pc, #648]	@ (800cea0 <_dtoa_r+0x5c0>)
 800cc18:	b954      	cbnz	r4, 800cc30 <_dtoa_r+0x350>
 800cc1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc22:	f7f3 fe13 	bl	800084c <__aeabi_ddiv>
 800cc26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc2a:	e028      	b.n	800cc7e <_dtoa_r+0x39e>
 800cc2c:	2602      	movs	r6, #2
 800cc2e:	e7f2      	b.n	800cc16 <_dtoa_r+0x336>
 800cc30:	07e1      	lsls	r1, r4, #31
 800cc32:	d508      	bpl.n	800cc46 <_dtoa_r+0x366>
 800cc34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc3c:	f7f3 fcdc 	bl	80005f8 <__aeabi_dmul>
 800cc40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc44:	3601      	adds	r6, #1
 800cc46:	1064      	asrs	r4, r4, #1
 800cc48:	3508      	adds	r5, #8
 800cc4a:	e7e5      	b.n	800cc18 <_dtoa_r+0x338>
 800cc4c:	f000 80d2 	beq.w	800cdf4 <_dtoa_r+0x514>
 800cc50:	427c      	negs	r4, r7
 800cc52:	4b92      	ldr	r3, [pc, #584]	@ (800ce9c <_dtoa_r+0x5bc>)
 800cc54:	4d92      	ldr	r5, [pc, #584]	@ (800cea0 <_dtoa_r+0x5c0>)
 800cc56:	f004 020f 	and.w	r2, r4, #15
 800cc5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc66:	f7f3 fcc7 	bl	80005f8 <__aeabi_dmul>
 800cc6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc6e:	1124      	asrs	r4, r4, #4
 800cc70:	2300      	movs	r3, #0
 800cc72:	2602      	movs	r6, #2
 800cc74:	2c00      	cmp	r4, #0
 800cc76:	f040 80b2 	bne.w	800cdde <_dtoa_r+0x4fe>
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1d3      	bne.n	800cc26 <_dtoa_r+0x346>
 800cc7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f000 80b7 	beq.w	800cdf8 <_dtoa_r+0x518>
 800cc8a:	4b86      	ldr	r3, [pc, #536]	@ (800cea4 <_dtoa_r+0x5c4>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	4620      	mov	r0, r4
 800cc90:	4629      	mov	r1, r5
 800cc92:	f7f3 ff23 	bl	8000adc <__aeabi_dcmplt>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f000 80ae 	beq.w	800cdf8 <_dtoa_r+0x518>
 800cc9c:	9b07      	ldr	r3, [sp, #28]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f000 80aa 	beq.w	800cdf8 <_dtoa_r+0x518>
 800cca4:	9b00      	ldr	r3, [sp, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	dd37      	ble.n	800cd1a <_dtoa_r+0x43a>
 800ccaa:	1e7b      	subs	r3, r7, #1
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	4620      	mov	r0, r4
 800ccb0:	4b7d      	ldr	r3, [pc, #500]	@ (800cea8 <_dtoa_r+0x5c8>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	f7f3 fc9f 	bl	80005f8 <__aeabi_dmul>
 800ccba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccbe:	9c00      	ldr	r4, [sp, #0]
 800ccc0:	3601      	adds	r6, #1
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f7f3 fc2e 	bl	8000524 <__aeabi_i2d>
 800ccc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cccc:	f7f3 fc94 	bl	80005f8 <__aeabi_dmul>
 800ccd0:	4b76      	ldr	r3, [pc, #472]	@ (800ceac <_dtoa_r+0x5cc>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f7f3 fada 	bl	800028c <__adddf3>
 800ccd8:	4605      	mov	r5, r0
 800ccda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ccde:	2c00      	cmp	r4, #0
 800cce0:	f040 808d 	bne.w	800cdfe <_dtoa_r+0x51e>
 800cce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cce8:	4b71      	ldr	r3, [pc, #452]	@ (800ceb0 <_dtoa_r+0x5d0>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	f7f3 facc 	bl	8000288 <__aeabi_dsub>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccf8:	462a      	mov	r2, r5
 800ccfa:	4633      	mov	r3, r6
 800ccfc:	f7f3 ff0c 	bl	8000b18 <__aeabi_dcmpgt>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	f040 828b 	bne.w	800d21c <_dtoa_r+0x93c>
 800cd06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd0a:	462a      	mov	r2, r5
 800cd0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cd10:	f7f3 fee4 	bl	8000adc <__aeabi_dcmplt>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	f040 8128 	bne.w	800cf6a <_dtoa_r+0x68a>
 800cd1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cd1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f2c0 815a 	blt.w	800cfde <_dtoa_r+0x6fe>
 800cd2a:	2f0e      	cmp	r7, #14
 800cd2c:	f300 8157 	bgt.w	800cfde <_dtoa_r+0x6fe>
 800cd30:	4b5a      	ldr	r3, [pc, #360]	@ (800ce9c <_dtoa_r+0x5bc>)
 800cd32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cd36:	ed93 7b00 	vldr	d7, [r3]
 800cd3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	ed8d 7b00 	vstr	d7, [sp]
 800cd42:	da03      	bge.n	800cd4c <_dtoa_r+0x46c>
 800cd44:	9b07      	ldr	r3, [sp, #28]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f340 8101 	ble.w	800cf4e <_dtoa_r+0x66e>
 800cd4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cd50:	4656      	mov	r6, sl
 800cd52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd56:	4620      	mov	r0, r4
 800cd58:	4629      	mov	r1, r5
 800cd5a:	f7f3 fd77 	bl	800084c <__aeabi_ddiv>
 800cd5e:	f7f3 fefb 	bl	8000b58 <__aeabi_d2iz>
 800cd62:	4680      	mov	r8, r0
 800cd64:	f7f3 fbde 	bl	8000524 <__aeabi_i2d>
 800cd68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd6c:	f7f3 fc44 	bl	80005f8 <__aeabi_dmul>
 800cd70:	4602      	mov	r2, r0
 800cd72:	460b      	mov	r3, r1
 800cd74:	4620      	mov	r0, r4
 800cd76:	4629      	mov	r1, r5
 800cd78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cd7c:	f7f3 fa84 	bl	8000288 <__aeabi_dsub>
 800cd80:	f806 4b01 	strb.w	r4, [r6], #1
 800cd84:	9d07      	ldr	r5, [sp, #28]
 800cd86:	eba6 040a 	sub.w	r4, r6, sl
 800cd8a:	42a5      	cmp	r5, r4
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	460b      	mov	r3, r1
 800cd90:	f040 8117 	bne.w	800cfc2 <_dtoa_r+0x6e2>
 800cd94:	f7f3 fa7a 	bl	800028c <__adddf3>
 800cd98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	460d      	mov	r5, r1
 800cda0:	f7f3 feba 	bl	8000b18 <__aeabi_dcmpgt>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	f040 80f9 	bne.w	800cf9c <_dtoa_r+0x6bc>
 800cdaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdae:	4620      	mov	r0, r4
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	f7f3 fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdb6:	b118      	cbz	r0, 800cdc0 <_dtoa_r+0x4e0>
 800cdb8:	f018 0f01 	tst.w	r8, #1
 800cdbc:	f040 80ee 	bne.w	800cf9c <_dtoa_r+0x6bc>
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	4658      	mov	r0, fp
 800cdc4:	f000 fc90 	bl	800d6e8 <_Bfree>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	7033      	strb	r3, [r6, #0]
 800cdcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cdce:	3701      	adds	r7, #1
 800cdd0:	601f      	str	r7, [r3, #0]
 800cdd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 831d 	beq.w	800d414 <_dtoa_r+0xb34>
 800cdda:	601e      	str	r6, [r3, #0]
 800cddc:	e31a      	b.n	800d414 <_dtoa_r+0xb34>
 800cdde:	07e2      	lsls	r2, r4, #31
 800cde0:	d505      	bpl.n	800cdee <_dtoa_r+0x50e>
 800cde2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cde6:	f7f3 fc07 	bl	80005f8 <__aeabi_dmul>
 800cdea:	3601      	adds	r6, #1
 800cdec:	2301      	movs	r3, #1
 800cdee:	1064      	asrs	r4, r4, #1
 800cdf0:	3508      	adds	r5, #8
 800cdf2:	e73f      	b.n	800cc74 <_dtoa_r+0x394>
 800cdf4:	2602      	movs	r6, #2
 800cdf6:	e742      	b.n	800cc7e <_dtoa_r+0x39e>
 800cdf8:	9c07      	ldr	r4, [sp, #28]
 800cdfa:	9704      	str	r7, [sp, #16]
 800cdfc:	e761      	b.n	800ccc2 <_dtoa_r+0x3e2>
 800cdfe:	4b27      	ldr	r3, [pc, #156]	@ (800ce9c <_dtoa_r+0x5bc>)
 800ce00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce0a:	4454      	add	r4, sl
 800ce0c:	2900      	cmp	r1, #0
 800ce0e:	d053      	beq.n	800ceb8 <_dtoa_r+0x5d8>
 800ce10:	4928      	ldr	r1, [pc, #160]	@ (800ceb4 <_dtoa_r+0x5d4>)
 800ce12:	2000      	movs	r0, #0
 800ce14:	f7f3 fd1a 	bl	800084c <__aeabi_ddiv>
 800ce18:	4633      	mov	r3, r6
 800ce1a:	462a      	mov	r2, r5
 800ce1c:	f7f3 fa34 	bl	8000288 <__aeabi_dsub>
 800ce20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce24:	4656      	mov	r6, sl
 800ce26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce2a:	f7f3 fe95 	bl	8000b58 <__aeabi_d2iz>
 800ce2e:	4605      	mov	r5, r0
 800ce30:	f7f3 fb78 	bl	8000524 <__aeabi_i2d>
 800ce34:	4602      	mov	r2, r0
 800ce36:	460b      	mov	r3, r1
 800ce38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce3c:	f7f3 fa24 	bl	8000288 <__aeabi_dsub>
 800ce40:	3530      	adds	r5, #48	@ 0x30
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce4a:	f806 5b01 	strb.w	r5, [r6], #1
 800ce4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ce52:	f7f3 fe43 	bl	8000adc <__aeabi_dcmplt>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d171      	bne.n	800cf3e <_dtoa_r+0x65e>
 800ce5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce5e:	4911      	ldr	r1, [pc, #68]	@ (800cea4 <_dtoa_r+0x5c4>)
 800ce60:	2000      	movs	r0, #0
 800ce62:	f7f3 fa11 	bl	8000288 <__aeabi_dsub>
 800ce66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ce6a:	f7f3 fe37 	bl	8000adc <__aeabi_dcmplt>
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	f040 8095 	bne.w	800cf9e <_dtoa_r+0x6be>
 800ce74:	42a6      	cmp	r6, r4
 800ce76:	f43f af50 	beq.w	800cd1a <_dtoa_r+0x43a>
 800ce7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ce7e:	4b0a      	ldr	r3, [pc, #40]	@ (800cea8 <_dtoa_r+0x5c8>)
 800ce80:	2200      	movs	r2, #0
 800ce82:	f7f3 fbb9 	bl	80005f8 <__aeabi_dmul>
 800ce86:	4b08      	ldr	r3, [pc, #32]	@ (800cea8 <_dtoa_r+0x5c8>)
 800ce88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce92:	f7f3 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ce96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce9a:	e7c4      	b.n	800ce26 <_dtoa_r+0x546>
 800ce9c:	08011030 	.word	0x08011030
 800cea0:	08011008 	.word	0x08011008
 800cea4:	3ff00000 	.word	0x3ff00000
 800cea8:	40240000 	.word	0x40240000
 800ceac:	401c0000 	.word	0x401c0000
 800ceb0:	40140000 	.word	0x40140000
 800ceb4:	3fe00000 	.word	0x3fe00000
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4628      	mov	r0, r5
 800cebc:	f7f3 fb9c 	bl	80005f8 <__aeabi_dmul>
 800cec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cec4:	9415      	str	r4, [sp, #84]	@ 0x54
 800cec6:	4656      	mov	r6, sl
 800cec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cecc:	f7f3 fe44 	bl	8000b58 <__aeabi_d2iz>
 800ced0:	4605      	mov	r5, r0
 800ced2:	f7f3 fb27 	bl	8000524 <__aeabi_i2d>
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cede:	f7f3 f9d3 	bl	8000288 <__aeabi_dsub>
 800cee2:	3530      	adds	r5, #48	@ 0x30
 800cee4:	f806 5b01 	strb.w	r5, [r6], #1
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	42a6      	cmp	r6, r4
 800ceee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cef2:	f04f 0200 	mov.w	r2, #0
 800cef6:	d124      	bne.n	800cf42 <_dtoa_r+0x662>
 800cef8:	4bac      	ldr	r3, [pc, #688]	@ (800d1ac <_dtoa_r+0x8cc>)
 800cefa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cefe:	f7f3 f9c5 	bl	800028c <__adddf3>
 800cf02:	4602      	mov	r2, r0
 800cf04:	460b      	mov	r3, r1
 800cf06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf0a:	f7f3 fe05 	bl	8000b18 <__aeabi_dcmpgt>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d145      	bne.n	800cf9e <_dtoa_r+0x6be>
 800cf12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf16:	49a5      	ldr	r1, [pc, #660]	@ (800d1ac <_dtoa_r+0x8cc>)
 800cf18:	2000      	movs	r0, #0
 800cf1a:	f7f3 f9b5 	bl	8000288 <__aeabi_dsub>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf26:	f7f3 fdd9 	bl	8000adc <__aeabi_dcmplt>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	f43f aef5 	beq.w	800cd1a <_dtoa_r+0x43a>
 800cf30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cf32:	1e73      	subs	r3, r6, #1
 800cf34:	9315      	str	r3, [sp, #84]	@ 0x54
 800cf36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf3a:	2b30      	cmp	r3, #48	@ 0x30
 800cf3c:	d0f8      	beq.n	800cf30 <_dtoa_r+0x650>
 800cf3e:	9f04      	ldr	r7, [sp, #16]
 800cf40:	e73e      	b.n	800cdc0 <_dtoa_r+0x4e0>
 800cf42:	4b9b      	ldr	r3, [pc, #620]	@ (800d1b0 <_dtoa_r+0x8d0>)
 800cf44:	f7f3 fb58 	bl	80005f8 <__aeabi_dmul>
 800cf48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf4c:	e7bc      	b.n	800cec8 <_dtoa_r+0x5e8>
 800cf4e:	d10c      	bne.n	800cf6a <_dtoa_r+0x68a>
 800cf50:	4b98      	ldr	r3, [pc, #608]	@ (800d1b4 <_dtoa_r+0x8d4>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf58:	f7f3 fb4e 	bl	80005f8 <__aeabi_dmul>
 800cf5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf60:	f7f3 fdd0 	bl	8000b04 <__aeabi_dcmpge>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	f000 8157 	beq.w	800d218 <_dtoa_r+0x938>
 800cf6a:	2400      	movs	r4, #0
 800cf6c:	4625      	mov	r5, r4
 800cf6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf70:	43db      	mvns	r3, r3
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	4656      	mov	r6, sl
 800cf76:	2700      	movs	r7, #0
 800cf78:	4621      	mov	r1, r4
 800cf7a:	4658      	mov	r0, fp
 800cf7c:	f000 fbb4 	bl	800d6e8 <_Bfree>
 800cf80:	2d00      	cmp	r5, #0
 800cf82:	d0dc      	beq.n	800cf3e <_dtoa_r+0x65e>
 800cf84:	b12f      	cbz	r7, 800cf92 <_dtoa_r+0x6b2>
 800cf86:	42af      	cmp	r7, r5
 800cf88:	d003      	beq.n	800cf92 <_dtoa_r+0x6b2>
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	4658      	mov	r0, fp
 800cf8e:	f000 fbab 	bl	800d6e8 <_Bfree>
 800cf92:	4629      	mov	r1, r5
 800cf94:	4658      	mov	r0, fp
 800cf96:	f000 fba7 	bl	800d6e8 <_Bfree>
 800cf9a:	e7d0      	b.n	800cf3e <_dtoa_r+0x65e>
 800cf9c:	9704      	str	r7, [sp, #16]
 800cf9e:	4633      	mov	r3, r6
 800cfa0:	461e      	mov	r6, r3
 800cfa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfa6:	2a39      	cmp	r2, #57	@ 0x39
 800cfa8:	d107      	bne.n	800cfba <_dtoa_r+0x6da>
 800cfaa:	459a      	cmp	sl, r3
 800cfac:	d1f8      	bne.n	800cfa0 <_dtoa_r+0x6c0>
 800cfae:	9a04      	ldr	r2, [sp, #16]
 800cfb0:	3201      	adds	r2, #1
 800cfb2:	9204      	str	r2, [sp, #16]
 800cfb4:	2230      	movs	r2, #48	@ 0x30
 800cfb6:	f88a 2000 	strb.w	r2, [sl]
 800cfba:	781a      	ldrb	r2, [r3, #0]
 800cfbc:	3201      	adds	r2, #1
 800cfbe:	701a      	strb	r2, [r3, #0]
 800cfc0:	e7bd      	b.n	800cf3e <_dtoa_r+0x65e>
 800cfc2:	4b7b      	ldr	r3, [pc, #492]	@ (800d1b0 <_dtoa_r+0x8d0>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f7f3 fb17 	bl	80005f8 <__aeabi_dmul>
 800cfca:	2200      	movs	r2, #0
 800cfcc:	2300      	movs	r3, #0
 800cfce:	4604      	mov	r4, r0
 800cfd0:	460d      	mov	r5, r1
 800cfd2:	f7f3 fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	f43f aebb 	beq.w	800cd52 <_dtoa_r+0x472>
 800cfdc:	e6f0      	b.n	800cdc0 <_dtoa_r+0x4e0>
 800cfde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cfe0:	2a00      	cmp	r2, #0
 800cfe2:	f000 80db 	beq.w	800d19c <_dtoa_r+0x8bc>
 800cfe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfe8:	2a01      	cmp	r2, #1
 800cfea:	f300 80bf 	bgt.w	800d16c <_dtoa_r+0x88c>
 800cfee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cff0:	2a00      	cmp	r2, #0
 800cff2:	f000 80b7 	beq.w	800d164 <_dtoa_r+0x884>
 800cff6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cffa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cffc:	4646      	mov	r6, r8
 800cffe:	9a08      	ldr	r2, [sp, #32]
 800d000:	2101      	movs	r1, #1
 800d002:	441a      	add	r2, r3
 800d004:	4658      	mov	r0, fp
 800d006:	4498      	add	r8, r3
 800d008:	9208      	str	r2, [sp, #32]
 800d00a:	f000 fc21 	bl	800d850 <__i2b>
 800d00e:	4605      	mov	r5, r0
 800d010:	b15e      	cbz	r6, 800d02a <_dtoa_r+0x74a>
 800d012:	9b08      	ldr	r3, [sp, #32]
 800d014:	2b00      	cmp	r3, #0
 800d016:	dd08      	ble.n	800d02a <_dtoa_r+0x74a>
 800d018:	42b3      	cmp	r3, r6
 800d01a:	9a08      	ldr	r2, [sp, #32]
 800d01c:	bfa8      	it	ge
 800d01e:	4633      	movge	r3, r6
 800d020:	eba8 0803 	sub.w	r8, r8, r3
 800d024:	1af6      	subs	r6, r6, r3
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	9308      	str	r3, [sp, #32]
 800d02a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d02c:	b1f3      	cbz	r3, 800d06c <_dtoa_r+0x78c>
 800d02e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d030:	2b00      	cmp	r3, #0
 800d032:	f000 80b7 	beq.w	800d1a4 <_dtoa_r+0x8c4>
 800d036:	b18c      	cbz	r4, 800d05c <_dtoa_r+0x77c>
 800d038:	4629      	mov	r1, r5
 800d03a:	4622      	mov	r2, r4
 800d03c:	4658      	mov	r0, fp
 800d03e:	f000 fcc7 	bl	800d9d0 <__pow5mult>
 800d042:	464a      	mov	r2, r9
 800d044:	4601      	mov	r1, r0
 800d046:	4605      	mov	r5, r0
 800d048:	4658      	mov	r0, fp
 800d04a:	f000 fc17 	bl	800d87c <__multiply>
 800d04e:	4649      	mov	r1, r9
 800d050:	9004      	str	r0, [sp, #16]
 800d052:	4658      	mov	r0, fp
 800d054:	f000 fb48 	bl	800d6e8 <_Bfree>
 800d058:	9b04      	ldr	r3, [sp, #16]
 800d05a:	4699      	mov	r9, r3
 800d05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d05e:	1b1a      	subs	r2, r3, r4
 800d060:	d004      	beq.n	800d06c <_dtoa_r+0x78c>
 800d062:	4649      	mov	r1, r9
 800d064:	4658      	mov	r0, fp
 800d066:	f000 fcb3 	bl	800d9d0 <__pow5mult>
 800d06a:	4681      	mov	r9, r0
 800d06c:	2101      	movs	r1, #1
 800d06e:	4658      	mov	r0, fp
 800d070:	f000 fbee 	bl	800d850 <__i2b>
 800d074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d076:	4604      	mov	r4, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 81cf 	beq.w	800d41c <_dtoa_r+0xb3c>
 800d07e:	461a      	mov	r2, r3
 800d080:	4601      	mov	r1, r0
 800d082:	4658      	mov	r0, fp
 800d084:	f000 fca4 	bl	800d9d0 <__pow5mult>
 800d088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	4604      	mov	r4, r0
 800d08e:	f300 8095 	bgt.w	800d1bc <_dtoa_r+0x8dc>
 800d092:	9b02      	ldr	r3, [sp, #8]
 800d094:	2b00      	cmp	r3, #0
 800d096:	f040 8087 	bne.w	800d1a8 <_dtoa_r+0x8c8>
 800d09a:	9b03      	ldr	r3, [sp, #12]
 800d09c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f040 8089 	bne.w	800d1b8 <_dtoa_r+0x8d8>
 800d0a6:	9b03      	ldr	r3, [sp, #12]
 800d0a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d0ac:	0d1b      	lsrs	r3, r3, #20
 800d0ae:	051b      	lsls	r3, r3, #20
 800d0b0:	b12b      	cbz	r3, 800d0be <_dtoa_r+0x7de>
 800d0b2:	9b08      	ldr	r3, [sp, #32]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	9308      	str	r3, [sp, #32]
 800d0b8:	f108 0801 	add.w	r8, r8, #1
 800d0bc:	2301      	movs	r3, #1
 800d0be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 81b0 	beq.w	800d428 <_dtoa_r+0xb48>
 800d0c8:	6923      	ldr	r3, [r4, #16]
 800d0ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d0ce:	6918      	ldr	r0, [r3, #16]
 800d0d0:	f000 fb72 	bl	800d7b8 <__hi0bits>
 800d0d4:	f1c0 0020 	rsb	r0, r0, #32
 800d0d8:	9b08      	ldr	r3, [sp, #32]
 800d0da:	4418      	add	r0, r3
 800d0dc:	f010 001f 	ands.w	r0, r0, #31
 800d0e0:	d077      	beq.n	800d1d2 <_dtoa_r+0x8f2>
 800d0e2:	f1c0 0320 	rsb	r3, r0, #32
 800d0e6:	2b04      	cmp	r3, #4
 800d0e8:	dd6b      	ble.n	800d1c2 <_dtoa_r+0x8e2>
 800d0ea:	9b08      	ldr	r3, [sp, #32]
 800d0ec:	f1c0 001c 	rsb	r0, r0, #28
 800d0f0:	4403      	add	r3, r0
 800d0f2:	4480      	add	r8, r0
 800d0f4:	4406      	add	r6, r0
 800d0f6:	9308      	str	r3, [sp, #32]
 800d0f8:	f1b8 0f00 	cmp.w	r8, #0
 800d0fc:	dd05      	ble.n	800d10a <_dtoa_r+0x82a>
 800d0fe:	4649      	mov	r1, r9
 800d100:	4642      	mov	r2, r8
 800d102:	4658      	mov	r0, fp
 800d104:	f000 fcbe 	bl	800da84 <__lshift>
 800d108:	4681      	mov	r9, r0
 800d10a:	9b08      	ldr	r3, [sp, #32]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	dd05      	ble.n	800d11c <_dtoa_r+0x83c>
 800d110:	4621      	mov	r1, r4
 800d112:	461a      	mov	r2, r3
 800d114:	4658      	mov	r0, fp
 800d116:	f000 fcb5 	bl	800da84 <__lshift>
 800d11a:	4604      	mov	r4, r0
 800d11c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d059      	beq.n	800d1d6 <_dtoa_r+0x8f6>
 800d122:	4621      	mov	r1, r4
 800d124:	4648      	mov	r0, r9
 800d126:	f000 fd19 	bl	800db5c <__mcmp>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	da53      	bge.n	800d1d6 <_dtoa_r+0x8f6>
 800d12e:	1e7b      	subs	r3, r7, #1
 800d130:	9304      	str	r3, [sp, #16]
 800d132:	4649      	mov	r1, r9
 800d134:	2300      	movs	r3, #0
 800d136:	220a      	movs	r2, #10
 800d138:	4658      	mov	r0, fp
 800d13a:	f000 faf7 	bl	800d72c <__multadd>
 800d13e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d140:	4681      	mov	r9, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	f000 8172 	beq.w	800d42c <_dtoa_r+0xb4c>
 800d148:	2300      	movs	r3, #0
 800d14a:	4629      	mov	r1, r5
 800d14c:	220a      	movs	r2, #10
 800d14e:	4658      	mov	r0, fp
 800d150:	f000 faec 	bl	800d72c <__multadd>
 800d154:	9b00      	ldr	r3, [sp, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	4605      	mov	r5, r0
 800d15a:	dc67      	bgt.n	800d22c <_dtoa_r+0x94c>
 800d15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d15e:	2b02      	cmp	r3, #2
 800d160:	dc41      	bgt.n	800d1e6 <_dtoa_r+0x906>
 800d162:	e063      	b.n	800d22c <_dtoa_r+0x94c>
 800d164:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d166:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d16a:	e746      	b.n	800cffa <_dtoa_r+0x71a>
 800d16c:	9b07      	ldr	r3, [sp, #28]
 800d16e:	1e5c      	subs	r4, r3, #1
 800d170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d172:	42a3      	cmp	r3, r4
 800d174:	bfbf      	itttt	lt
 800d176:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d178:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d17a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d17c:	1ae3      	sublt	r3, r4, r3
 800d17e:	bfb4      	ite	lt
 800d180:	18d2      	addlt	r2, r2, r3
 800d182:	1b1c      	subge	r4, r3, r4
 800d184:	9b07      	ldr	r3, [sp, #28]
 800d186:	bfbc      	itt	lt
 800d188:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d18a:	2400      	movlt	r4, #0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	bfb5      	itete	lt
 800d190:	eba8 0603 	sublt.w	r6, r8, r3
 800d194:	9b07      	ldrge	r3, [sp, #28]
 800d196:	2300      	movlt	r3, #0
 800d198:	4646      	movge	r6, r8
 800d19a:	e730      	b.n	800cffe <_dtoa_r+0x71e>
 800d19c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d19e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d1a0:	4646      	mov	r6, r8
 800d1a2:	e735      	b.n	800d010 <_dtoa_r+0x730>
 800d1a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d1a6:	e75c      	b.n	800d062 <_dtoa_r+0x782>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e788      	b.n	800d0be <_dtoa_r+0x7de>
 800d1ac:	3fe00000 	.word	0x3fe00000
 800d1b0:	40240000 	.word	0x40240000
 800d1b4:	40140000 	.word	0x40140000
 800d1b8:	9b02      	ldr	r3, [sp, #8]
 800d1ba:	e780      	b.n	800d0be <_dtoa_r+0x7de>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1c0:	e782      	b.n	800d0c8 <_dtoa_r+0x7e8>
 800d1c2:	d099      	beq.n	800d0f8 <_dtoa_r+0x818>
 800d1c4:	9a08      	ldr	r2, [sp, #32]
 800d1c6:	331c      	adds	r3, #28
 800d1c8:	441a      	add	r2, r3
 800d1ca:	4498      	add	r8, r3
 800d1cc:	441e      	add	r6, r3
 800d1ce:	9208      	str	r2, [sp, #32]
 800d1d0:	e792      	b.n	800d0f8 <_dtoa_r+0x818>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	e7f6      	b.n	800d1c4 <_dtoa_r+0x8e4>
 800d1d6:	9b07      	ldr	r3, [sp, #28]
 800d1d8:	9704      	str	r7, [sp, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	dc20      	bgt.n	800d220 <_dtoa_r+0x940>
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1e2:	2b02      	cmp	r3, #2
 800d1e4:	dd1e      	ble.n	800d224 <_dtoa_r+0x944>
 800d1e6:	9b00      	ldr	r3, [sp, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f47f aec0 	bne.w	800cf6e <_dtoa_r+0x68e>
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	2205      	movs	r2, #5
 800d1f2:	4658      	mov	r0, fp
 800d1f4:	f000 fa9a 	bl	800d72c <__multadd>
 800d1f8:	4601      	mov	r1, r0
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	4648      	mov	r0, r9
 800d1fe:	f000 fcad 	bl	800db5c <__mcmp>
 800d202:	2800      	cmp	r0, #0
 800d204:	f77f aeb3 	ble.w	800cf6e <_dtoa_r+0x68e>
 800d208:	4656      	mov	r6, sl
 800d20a:	2331      	movs	r3, #49	@ 0x31
 800d20c:	f806 3b01 	strb.w	r3, [r6], #1
 800d210:	9b04      	ldr	r3, [sp, #16]
 800d212:	3301      	adds	r3, #1
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	e6ae      	b.n	800cf76 <_dtoa_r+0x696>
 800d218:	9c07      	ldr	r4, [sp, #28]
 800d21a:	9704      	str	r7, [sp, #16]
 800d21c:	4625      	mov	r5, r4
 800d21e:	e7f3      	b.n	800d208 <_dtoa_r+0x928>
 800d220:	9b07      	ldr	r3, [sp, #28]
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d226:	2b00      	cmp	r3, #0
 800d228:	f000 8104 	beq.w	800d434 <_dtoa_r+0xb54>
 800d22c:	2e00      	cmp	r6, #0
 800d22e:	dd05      	ble.n	800d23c <_dtoa_r+0x95c>
 800d230:	4629      	mov	r1, r5
 800d232:	4632      	mov	r2, r6
 800d234:	4658      	mov	r0, fp
 800d236:	f000 fc25 	bl	800da84 <__lshift>
 800d23a:	4605      	mov	r5, r0
 800d23c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d05a      	beq.n	800d2f8 <_dtoa_r+0xa18>
 800d242:	6869      	ldr	r1, [r5, #4]
 800d244:	4658      	mov	r0, fp
 800d246:	f000 fa0f 	bl	800d668 <_Balloc>
 800d24a:	4606      	mov	r6, r0
 800d24c:	b928      	cbnz	r0, 800d25a <_dtoa_r+0x97a>
 800d24e:	4b84      	ldr	r3, [pc, #528]	@ (800d460 <_dtoa_r+0xb80>)
 800d250:	4602      	mov	r2, r0
 800d252:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d256:	f7ff bb5a 	b.w	800c90e <_dtoa_r+0x2e>
 800d25a:	692a      	ldr	r2, [r5, #16]
 800d25c:	3202      	adds	r2, #2
 800d25e:	0092      	lsls	r2, r2, #2
 800d260:	f105 010c 	add.w	r1, r5, #12
 800d264:	300c      	adds	r0, #12
 800d266:	f7ff fa92 	bl	800c78e <memcpy>
 800d26a:	2201      	movs	r2, #1
 800d26c:	4631      	mov	r1, r6
 800d26e:	4658      	mov	r0, fp
 800d270:	f000 fc08 	bl	800da84 <__lshift>
 800d274:	f10a 0301 	add.w	r3, sl, #1
 800d278:	9307      	str	r3, [sp, #28]
 800d27a:	9b00      	ldr	r3, [sp, #0]
 800d27c:	4453      	add	r3, sl
 800d27e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d280:	9b02      	ldr	r3, [sp, #8]
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	462f      	mov	r7, r5
 800d288:	930a      	str	r3, [sp, #40]	@ 0x28
 800d28a:	4605      	mov	r5, r0
 800d28c:	9b07      	ldr	r3, [sp, #28]
 800d28e:	4621      	mov	r1, r4
 800d290:	3b01      	subs	r3, #1
 800d292:	4648      	mov	r0, r9
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	f7ff fa99 	bl	800c7cc <quorem>
 800d29a:	4639      	mov	r1, r7
 800d29c:	9002      	str	r0, [sp, #8]
 800d29e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d2a2:	4648      	mov	r0, r9
 800d2a4:	f000 fc5a 	bl	800db5c <__mcmp>
 800d2a8:	462a      	mov	r2, r5
 800d2aa:	9008      	str	r0, [sp, #32]
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	4658      	mov	r0, fp
 800d2b0:	f000 fc70 	bl	800db94 <__mdiff>
 800d2b4:	68c2      	ldr	r2, [r0, #12]
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	bb02      	cbnz	r2, 800d2fc <_dtoa_r+0xa1c>
 800d2ba:	4601      	mov	r1, r0
 800d2bc:	4648      	mov	r0, r9
 800d2be:	f000 fc4d 	bl	800db5c <__mcmp>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	4631      	mov	r1, r6
 800d2c6:	4658      	mov	r0, fp
 800d2c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2ca:	f000 fa0d 	bl	800d6e8 <_Bfree>
 800d2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2d2:	9e07      	ldr	r6, [sp, #28]
 800d2d4:	ea43 0102 	orr.w	r1, r3, r2
 800d2d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2da:	4319      	orrs	r1, r3
 800d2dc:	d110      	bne.n	800d300 <_dtoa_r+0xa20>
 800d2de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d2e2:	d029      	beq.n	800d338 <_dtoa_r+0xa58>
 800d2e4:	9b08      	ldr	r3, [sp, #32]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	dd02      	ble.n	800d2f0 <_dtoa_r+0xa10>
 800d2ea:	9b02      	ldr	r3, [sp, #8]
 800d2ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d2f0:	9b00      	ldr	r3, [sp, #0]
 800d2f2:	f883 8000 	strb.w	r8, [r3]
 800d2f6:	e63f      	b.n	800cf78 <_dtoa_r+0x698>
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	e7bb      	b.n	800d274 <_dtoa_r+0x994>
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	e7e1      	b.n	800d2c4 <_dtoa_r+0x9e4>
 800d300:	9b08      	ldr	r3, [sp, #32]
 800d302:	2b00      	cmp	r3, #0
 800d304:	db04      	blt.n	800d310 <_dtoa_r+0xa30>
 800d306:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d308:	430b      	orrs	r3, r1
 800d30a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d30c:	430b      	orrs	r3, r1
 800d30e:	d120      	bne.n	800d352 <_dtoa_r+0xa72>
 800d310:	2a00      	cmp	r2, #0
 800d312:	dded      	ble.n	800d2f0 <_dtoa_r+0xa10>
 800d314:	4649      	mov	r1, r9
 800d316:	2201      	movs	r2, #1
 800d318:	4658      	mov	r0, fp
 800d31a:	f000 fbb3 	bl	800da84 <__lshift>
 800d31e:	4621      	mov	r1, r4
 800d320:	4681      	mov	r9, r0
 800d322:	f000 fc1b 	bl	800db5c <__mcmp>
 800d326:	2800      	cmp	r0, #0
 800d328:	dc03      	bgt.n	800d332 <_dtoa_r+0xa52>
 800d32a:	d1e1      	bne.n	800d2f0 <_dtoa_r+0xa10>
 800d32c:	f018 0f01 	tst.w	r8, #1
 800d330:	d0de      	beq.n	800d2f0 <_dtoa_r+0xa10>
 800d332:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d336:	d1d8      	bne.n	800d2ea <_dtoa_r+0xa0a>
 800d338:	9a00      	ldr	r2, [sp, #0]
 800d33a:	2339      	movs	r3, #57	@ 0x39
 800d33c:	7013      	strb	r3, [r2, #0]
 800d33e:	4633      	mov	r3, r6
 800d340:	461e      	mov	r6, r3
 800d342:	3b01      	subs	r3, #1
 800d344:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d348:	2a39      	cmp	r2, #57	@ 0x39
 800d34a:	d052      	beq.n	800d3f2 <_dtoa_r+0xb12>
 800d34c:	3201      	adds	r2, #1
 800d34e:	701a      	strb	r2, [r3, #0]
 800d350:	e612      	b.n	800cf78 <_dtoa_r+0x698>
 800d352:	2a00      	cmp	r2, #0
 800d354:	dd07      	ble.n	800d366 <_dtoa_r+0xa86>
 800d356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d35a:	d0ed      	beq.n	800d338 <_dtoa_r+0xa58>
 800d35c:	9a00      	ldr	r2, [sp, #0]
 800d35e:	f108 0301 	add.w	r3, r8, #1
 800d362:	7013      	strb	r3, [r2, #0]
 800d364:	e608      	b.n	800cf78 <_dtoa_r+0x698>
 800d366:	9b07      	ldr	r3, [sp, #28]
 800d368:	9a07      	ldr	r2, [sp, #28]
 800d36a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d370:	4293      	cmp	r3, r2
 800d372:	d028      	beq.n	800d3c6 <_dtoa_r+0xae6>
 800d374:	4649      	mov	r1, r9
 800d376:	2300      	movs	r3, #0
 800d378:	220a      	movs	r2, #10
 800d37a:	4658      	mov	r0, fp
 800d37c:	f000 f9d6 	bl	800d72c <__multadd>
 800d380:	42af      	cmp	r7, r5
 800d382:	4681      	mov	r9, r0
 800d384:	f04f 0300 	mov.w	r3, #0
 800d388:	f04f 020a 	mov.w	r2, #10
 800d38c:	4639      	mov	r1, r7
 800d38e:	4658      	mov	r0, fp
 800d390:	d107      	bne.n	800d3a2 <_dtoa_r+0xac2>
 800d392:	f000 f9cb 	bl	800d72c <__multadd>
 800d396:	4607      	mov	r7, r0
 800d398:	4605      	mov	r5, r0
 800d39a:	9b07      	ldr	r3, [sp, #28]
 800d39c:	3301      	adds	r3, #1
 800d39e:	9307      	str	r3, [sp, #28]
 800d3a0:	e774      	b.n	800d28c <_dtoa_r+0x9ac>
 800d3a2:	f000 f9c3 	bl	800d72c <__multadd>
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	220a      	movs	r2, #10
 800d3ae:	4658      	mov	r0, fp
 800d3b0:	f000 f9bc 	bl	800d72c <__multadd>
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	e7f0      	b.n	800d39a <_dtoa_r+0xaba>
 800d3b8:	9b00      	ldr	r3, [sp, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	bfcc      	ite	gt
 800d3be:	461e      	movgt	r6, r3
 800d3c0:	2601      	movle	r6, #1
 800d3c2:	4456      	add	r6, sl
 800d3c4:	2700      	movs	r7, #0
 800d3c6:	4649      	mov	r1, r9
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	4658      	mov	r0, fp
 800d3cc:	f000 fb5a 	bl	800da84 <__lshift>
 800d3d0:	4621      	mov	r1, r4
 800d3d2:	4681      	mov	r9, r0
 800d3d4:	f000 fbc2 	bl	800db5c <__mcmp>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	dcb0      	bgt.n	800d33e <_dtoa_r+0xa5e>
 800d3dc:	d102      	bne.n	800d3e4 <_dtoa_r+0xb04>
 800d3de:	f018 0f01 	tst.w	r8, #1
 800d3e2:	d1ac      	bne.n	800d33e <_dtoa_r+0xa5e>
 800d3e4:	4633      	mov	r3, r6
 800d3e6:	461e      	mov	r6, r3
 800d3e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3ec:	2a30      	cmp	r2, #48	@ 0x30
 800d3ee:	d0fa      	beq.n	800d3e6 <_dtoa_r+0xb06>
 800d3f0:	e5c2      	b.n	800cf78 <_dtoa_r+0x698>
 800d3f2:	459a      	cmp	sl, r3
 800d3f4:	d1a4      	bne.n	800d340 <_dtoa_r+0xa60>
 800d3f6:	9b04      	ldr	r3, [sp, #16]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	9304      	str	r3, [sp, #16]
 800d3fc:	2331      	movs	r3, #49	@ 0x31
 800d3fe:	f88a 3000 	strb.w	r3, [sl]
 800d402:	e5b9      	b.n	800cf78 <_dtoa_r+0x698>
 800d404:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d406:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d464 <_dtoa_r+0xb84>
 800d40a:	b11b      	cbz	r3, 800d414 <_dtoa_r+0xb34>
 800d40c:	f10a 0308 	add.w	r3, sl, #8
 800d410:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d412:	6013      	str	r3, [r2, #0]
 800d414:	4650      	mov	r0, sl
 800d416:	b019      	add	sp, #100	@ 0x64
 800d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d41e:	2b01      	cmp	r3, #1
 800d420:	f77f ae37 	ble.w	800d092 <_dtoa_r+0x7b2>
 800d424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d426:	930a      	str	r3, [sp, #40]	@ 0x28
 800d428:	2001      	movs	r0, #1
 800d42a:	e655      	b.n	800d0d8 <_dtoa_r+0x7f8>
 800d42c:	9b00      	ldr	r3, [sp, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f77f aed6 	ble.w	800d1e0 <_dtoa_r+0x900>
 800d434:	4656      	mov	r6, sl
 800d436:	4621      	mov	r1, r4
 800d438:	4648      	mov	r0, r9
 800d43a:	f7ff f9c7 	bl	800c7cc <quorem>
 800d43e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d442:	f806 8b01 	strb.w	r8, [r6], #1
 800d446:	9b00      	ldr	r3, [sp, #0]
 800d448:	eba6 020a 	sub.w	r2, r6, sl
 800d44c:	4293      	cmp	r3, r2
 800d44e:	ddb3      	ble.n	800d3b8 <_dtoa_r+0xad8>
 800d450:	4649      	mov	r1, r9
 800d452:	2300      	movs	r3, #0
 800d454:	220a      	movs	r2, #10
 800d456:	4658      	mov	r0, fp
 800d458:	f000 f968 	bl	800d72c <__multadd>
 800d45c:	4681      	mov	r9, r0
 800d45e:	e7ea      	b.n	800d436 <_dtoa_r+0xb56>
 800d460:	08010f90 	.word	0x08010f90
 800d464:	08010f14 	.word	0x08010f14

0800d468 <_free_r>:
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	4605      	mov	r5, r0
 800d46c:	2900      	cmp	r1, #0
 800d46e:	d041      	beq.n	800d4f4 <_free_r+0x8c>
 800d470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d474:	1f0c      	subs	r4, r1, #4
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfb8      	it	lt
 800d47a:	18e4      	addlt	r4, r4, r3
 800d47c:	f000 f8e8 	bl	800d650 <__malloc_lock>
 800d480:	4a1d      	ldr	r2, [pc, #116]	@ (800d4f8 <_free_r+0x90>)
 800d482:	6813      	ldr	r3, [r2, #0]
 800d484:	b933      	cbnz	r3, 800d494 <_free_r+0x2c>
 800d486:	6063      	str	r3, [r4, #4]
 800d488:	6014      	str	r4, [r2, #0]
 800d48a:	4628      	mov	r0, r5
 800d48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d490:	f000 b8e4 	b.w	800d65c <__malloc_unlock>
 800d494:	42a3      	cmp	r3, r4
 800d496:	d908      	bls.n	800d4aa <_free_r+0x42>
 800d498:	6820      	ldr	r0, [r4, #0]
 800d49a:	1821      	adds	r1, r4, r0
 800d49c:	428b      	cmp	r3, r1
 800d49e:	bf01      	itttt	eq
 800d4a0:	6819      	ldreq	r1, [r3, #0]
 800d4a2:	685b      	ldreq	r3, [r3, #4]
 800d4a4:	1809      	addeq	r1, r1, r0
 800d4a6:	6021      	streq	r1, [r4, #0]
 800d4a8:	e7ed      	b.n	800d486 <_free_r+0x1e>
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	b10b      	cbz	r3, 800d4b4 <_free_r+0x4c>
 800d4b0:	42a3      	cmp	r3, r4
 800d4b2:	d9fa      	bls.n	800d4aa <_free_r+0x42>
 800d4b4:	6811      	ldr	r1, [r2, #0]
 800d4b6:	1850      	adds	r0, r2, r1
 800d4b8:	42a0      	cmp	r0, r4
 800d4ba:	d10b      	bne.n	800d4d4 <_free_r+0x6c>
 800d4bc:	6820      	ldr	r0, [r4, #0]
 800d4be:	4401      	add	r1, r0
 800d4c0:	1850      	adds	r0, r2, r1
 800d4c2:	4283      	cmp	r3, r0
 800d4c4:	6011      	str	r1, [r2, #0]
 800d4c6:	d1e0      	bne.n	800d48a <_free_r+0x22>
 800d4c8:	6818      	ldr	r0, [r3, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	6053      	str	r3, [r2, #4]
 800d4ce:	4408      	add	r0, r1
 800d4d0:	6010      	str	r0, [r2, #0]
 800d4d2:	e7da      	b.n	800d48a <_free_r+0x22>
 800d4d4:	d902      	bls.n	800d4dc <_free_r+0x74>
 800d4d6:	230c      	movs	r3, #12
 800d4d8:	602b      	str	r3, [r5, #0]
 800d4da:	e7d6      	b.n	800d48a <_free_r+0x22>
 800d4dc:	6820      	ldr	r0, [r4, #0]
 800d4de:	1821      	adds	r1, r4, r0
 800d4e0:	428b      	cmp	r3, r1
 800d4e2:	bf04      	itt	eq
 800d4e4:	6819      	ldreq	r1, [r3, #0]
 800d4e6:	685b      	ldreq	r3, [r3, #4]
 800d4e8:	6063      	str	r3, [r4, #4]
 800d4ea:	bf04      	itt	eq
 800d4ec:	1809      	addeq	r1, r1, r0
 800d4ee:	6021      	streq	r1, [r4, #0]
 800d4f0:	6054      	str	r4, [r2, #4]
 800d4f2:	e7ca      	b.n	800d48a <_free_r+0x22>
 800d4f4:	bd38      	pop	{r3, r4, r5, pc}
 800d4f6:	bf00      	nop
 800d4f8:	2000233c 	.word	0x2000233c

0800d4fc <malloc>:
 800d4fc:	4b02      	ldr	r3, [pc, #8]	@ (800d508 <malloc+0xc>)
 800d4fe:	4601      	mov	r1, r0
 800d500:	6818      	ldr	r0, [r3, #0]
 800d502:	f000 b825 	b.w	800d550 <_malloc_r>
 800d506:	bf00      	nop
 800d508:	20000134 	.word	0x20000134

0800d50c <sbrk_aligned>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	4e0f      	ldr	r6, [pc, #60]	@ (800d54c <sbrk_aligned+0x40>)
 800d510:	460c      	mov	r4, r1
 800d512:	6831      	ldr	r1, [r6, #0]
 800d514:	4605      	mov	r5, r0
 800d516:	b911      	cbnz	r1, 800d51e <sbrk_aligned+0x12>
 800d518:	f000 fe46 	bl	800e1a8 <_sbrk_r>
 800d51c:	6030      	str	r0, [r6, #0]
 800d51e:	4621      	mov	r1, r4
 800d520:	4628      	mov	r0, r5
 800d522:	f000 fe41 	bl	800e1a8 <_sbrk_r>
 800d526:	1c43      	adds	r3, r0, #1
 800d528:	d103      	bne.n	800d532 <sbrk_aligned+0x26>
 800d52a:	f04f 34ff 	mov.w	r4, #4294967295
 800d52e:	4620      	mov	r0, r4
 800d530:	bd70      	pop	{r4, r5, r6, pc}
 800d532:	1cc4      	adds	r4, r0, #3
 800d534:	f024 0403 	bic.w	r4, r4, #3
 800d538:	42a0      	cmp	r0, r4
 800d53a:	d0f8      	beq.n	800d52e <sbrk_aligned+0x22>
 800d53c:	1a21      	subs	r1, r4, r0
 800d53e:	4628      	mov	r0, r5
 800d540:	f000 fe32 	bl	800e1a8 <_sbrk_r>
 800d544:	3001      	adds	r0, #1
 800d546:	d1f2      	bne.n	800d52e <sbrk_aligned+0x22>
 800d548:	e7ef      	b.n	800d52a <sbrk_aligned+0x1e>
 800d54a:	bf00      	nop
 800d54c:	20002338 	.word	0x20002338

0800d550 <_malloc_r>:
 800d550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d554:	1ccd      	adds	r5, r1, #3
 800d556:	f025 0503 	bic.w	r5, r5, #3
 800d55a:	3508      	adds	r5, #8
 800d55c:	2d0c      	cmp	r5, #12
 800d55e:	bf38      	it	cc
 800d560:	250c      	movcc	r5, #12
 800d562:	2d00      	cmp	r5, #0
 800d564:	4606      	mov	r6, r0
 800d566:	db01      	blt.n	800d56c <_malloc_r+0x1c>
 800d568:	42a9      	cmp	r1, r5
 800d56a:	d904      	bls.n	800d576 <_malloc_r+0x26>
 800d56c:	230c      	movs	r3, #12
 800d56e:	6033      	str	r3, [r6, #0]
 800d570:	2000      	movs	r0, #0
 800d572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d64c <_malloc_r+0xfc>
 800d57a:	f000 f869 	bl	800d650 <__malloc_lock>
 800d57e:	f8d8 3000 	ldr.w	r3, [r8]
 800d582:	461c      	mov	r4, r3
 800d584:	bb44      	cbnz	r4, 800d5d8 <_malloc_r+0x88>
 800d586:	4629      	mov	r1, r5
 800d588:	4630      	mov	r0, r6
 800d58a:	f7ff ffbf 	bl	800d50c <sbrk_aligned>
 800d58e:	1c43      	adds	r3, r0, #1
 800d590:	4604      	mov	r4, r0
 800d592:	d158      	bne.n	800d646 <_malloc_r+0xf6>
 800d594:	f8d8 4000 	ldr.w	r4, [r8]
 800d598:	4627      	mov	r7, r4
 800d59a:	2f00      	cmp	r7, #0
 800d59c:	d143      	bne.n	800d626 <_malloc_r+0xd6>
 800d59e:	2c00      	cmp	r4, #0
 800d5a0:	d04b      	beq.n	800d63a <_malloc_r+0xea>
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	4639      	mov	r1, r7
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	eb04 0903 	add.w	r9, r4, r3
 800d5ac:	f000 fdfc 	bl	800e1a8 <_sbrk_r>
 800d5b0:	4581      	cmp	r9, r0
 800d5b2:	d142      	bne.n	800d63a <_malloc_r+0xea>
 800d5b4:	6821      	ldr	r1, [r4, #0]
 800d5b6:	1a6d      	subs	r5, r5, r1
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	f7ff ffa6 	bl	800d50c <sbrk_aligned>
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	d03a      	beq.n	800d63a <_malloc_r+0xea>
 800d5c4:	6823      	ldr	r3, [r4, #0]
 800d5c6:	442b      	add	r3, r5
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d5ce:	685a      	ldr	r2, [r3, #4]
 800d5d0:	bb62      	cbnz	r2, 800d62c <_malloc_r+0xdc>
 800d5d2:	f8c8 7000 	str.w	r7, [r8]
 800d5d6:	e00f      	b.n	800d5f8 <_malloc_r+0xa8>
 800d5d8:	6822      	ldr	r2, [r4, #0]
 800d5da:	1b52      	subs	r2, r2, r5
 800d5dc:	d420      	bmi.n	800d620 <_malloc_r+0xd0>
 800d5de:	2a0b      	cmp	r2, #11
 800d5e0:	d917      	bls.n	800d612 <_malloc_r+0xc2>
 800d5e2:	1961      	adds	r1, r4, r5
 800d5e4:	42a3      	cmp	r3, r4
 800d5e6:	6025      	str	r5, [r4, #0]
 800d5e8:	bf18      	it	ne
 800d5ea:	6059      	strne	r1, [r3, #4]
 800d5ec:	6863      	ldr	r3, [r4, #4]
 800d5ee:	bf08      	it	eq
 800d5f0:	f8c8 1000 	streq.w	r1, [r8]
 800d5f4:	5162      	str	r2, [r4, r5]
 800d5f6:	604b      	str	r3, [r1, #4]
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	f000 f82f 	bl	800d65c <__malloc_unlock>
 800d5fe:	f104 000b 	add.w	r0, r4, #11
 800d602:	1d23      	adds	r3, r4, #4
 800d604:	f020 0007 	bic.w	r0, r0, #7
 800d608:	1ac2      	subs	r2, r0, r3
 800d60a:	bf1c      	itt	ne
 800d60c:	1a1b      	subne	r3, r3, r0
 800d60e:	50a3      	strne	r3, [r4, r2]
 800d610:	e7af      	b.n	800d572 <_malloc_r+0x22>
 800d612:	6862      	ldr	r2, [r4, #4]
 800d614:	42a3      	cmp	r3, r4
 800d616:	bf0c      	ite	eq
 800d618:	f8c8 2000 	streq.w	r2, [r8]
 800d61c:	605a      	strne	r2, [r3, #4]
 800d61e:	e7eb      	b.n	800d5f8 <_malloc_r+0xa8>
 800d620:	4623      	mov	r3, r4
 800d622:	6864      	ldr	r4, [r4, #4]
 800d624:	e7ae      	b.n	800d584 <_malloc_r+0x34>
 800d626:	463c      	mov	r4, r7
 800d628:	687f      	ldr	r7, [r7, #4]
 800d62a:	e7b6      	b.n	800d59a <_malloc_r+0x4a>
 800d62c:	461a      	mov	r2, r3
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	42a3      	cmp	r3, r4
 800d632:	d1fb      	bne.n	800d62c <_malloc_r+0xdc>
 800d634:	2300      	movs	r3, #0
 800d636:	6053      	str	r3, [r2, #4]
 800d638:	e7de      	b.n	800d5f8 <_malloc_r+0xa8>
 800d63a:	230c      	movs	r3, #12
 800d63c:	6033      	str	r3, [r6, #0]
 800d63e:	4630      	mov	r0, r6
 800d640:	f000 f80c 	bl	800d65c <__malloc_unlock>
 800d644:	e794      	b.n	800d570 <_malloc_r+0x20>
 800d646:	6005      	str	r5, [r0, #0]
 800d648:	e7d6      	b.n	800d5f8 <_malloc_r+0xa8>
 800d64a:	bf00      	nop
 800d64c:	2000233c 	.word	0x2000233c

0800d650 <__malloc_lock>:
 800d650:	4801      	ldr	r0, [pc, #4]	@ (800d658 <__malloc_lock+0x8>)
 800d652:	f7ff b89a 	b.w	800c78a <__retarget_lock_acquire_recursive>
 800d656:	bf00      	nop
 800d658:	20002334 	.word	0x20002334

0800d65c <__malloc_unlock>:
 800d65c:	4801      	ldr	r0, [pc, #4]	@ (800d664 <__malloc_unlock+0x8>)
 800d65e:	f7ff b895 	b.w	800c78c <__retarget_lock_release_recursive>
 800d662:	bf00      	nop
 800d664:	20002334 	.word	0x20002334

0800d668 <_Balloc>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	69c6      	ldr	r6, [r0, #28]
 800d66c:	4604      	mov	r4, r0
 800d66e:	460d      	mov	r5, r1
 800d670:	b976      	cbnz	r6, 800d690 <_Balloc+0x28>
 800d672:	2010      	movs	r0, #16
 800d674:	f7ff ff42 	bl	800d4fc <malloc>
 800d678:	4602      	mov	r2, r0
 800d67a:	61e0      	str	r0, [r4, #28]
 800d67c:	b920      	cbnz	r0, 800d688 <_Balloc+0x20>
 800d67e:	4b18      	ldr	r3, [pc, #96]	@ (800d6e0 <_Balloc+0x78>)
 800d680:	4818      	ldr	r0, [pc, #96]	@ (800d6e4 <_Balloc+0x7c>)
 800d682:	216b      	movs	r1, #107	@ 0x6b
 800d684:	f000 fda0 	bl	800e1c8 <__assert_func>
 800d688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d68c:	6006      	str	r6, [r0, #0]
 800d68e:	60c6      	str	r6, [r0, #12]
 800d690:	69e6      	ldr	r6, [r4, #28]
 800d692:	68f3      	ldr	r3, [r6, #12]
 800d694:	b183      	cbz	r3, 800d6b8 <_Balloc+0x50>
 800d696:	69e3      	ldr	r3, [r4, #28]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d69e:	b9b8      	cbnz	r0, 800d6d0 <_Balloc+0x68>
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d6a6:	1d72      	adds	r2, r6, #5
 800d6a8:	0092      	lsls	r2, r2, #2
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f000 fdaa 	bl	800e204 <_calloc_r>
 800d6b0:	b160      	cbz	r0, 800d6cc <_Balloc+0x64>
 800d6b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6b6:	e00e      	b.n	800d6d6 <_Balloc+0x6e>
 800d6b8:	2221      	movs	r2, #33	@ 0x21
 800d6ba:	2104      	movs	r1, #4
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 fda1 	bl	800e204 <_calloc_r>
 800d6c2:	69e3      	ldr	r3, [r4, #28]
 800d6c4:	60f0      	str	r0, [r6, #12]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1e4      	bne.n	800d696 <_Balloc+0x2e>
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	bd70      	pop	{r4, r5, r6, pc}
 800d6d0:	6802      	ldr	r2, [r0, #0]
 800d6d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6dc:	e7f7      	b.n	800d6ce <_Balloc+0x66>
 800d6de:	bf00      	nop
 800d6e0:	08010f21 	.word	0x08010f21
 800d6e4:	08010fa1 	.word	0x08010fa1

0800d6e8 <_Bfree>:
 800d6e8:	b570      	push	{r4, r5, r6, lr}
 800d6ea:	69c6      	ldr	r6, [r0, #28]
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	b976      	cbnz	r6, 800d710 <_Bfree+0x28>
 800d6f2:	2010      	movs	r0, #16
 800d6f4:	f7ff ff02 	bl	800d4fc <malloc>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	61e8      	str	r0, [r5, #28]
 800d6fc:	b920      	cbnz	r0, 800d708 <_Bfree+0x20>
 800d6fe:	4b09      	ldr	r3, [pc, #36]	@ (800d724 <_Bfree+0x3c>)
 800d700:	4809      	ldr	r0, [pc, #36]	@ (800d728 <_Bfree+0x40>)
 800d702:	218f      	movs	r1, #143	@ 0x8f
 800d704:	f000 fd60 	bl	800e1c8 <__assert_func>
 800d708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d70c:	6006      	str	r6, [r0, #0]
 800d70e:	60c6      	str	r6, [r0, #12]
 800d710:	b13c      	cbz	r4, 800d722 <_Bfree+0x3a>
 800d712:	69eb      	ldr	r3, [r5, #28]
 800d714:	6862      	ldr	r2, [r4, #4]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d71c:	6021      	str	r1, [r4, #0]
 800d71e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	08010f21 	.word	0x08010f21
 800d728:	08010fa1 	.word	0x08010fa1

0800d72c <__multadd>:
 800d72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d730:	690d      	ldr	r5, [r1, #16]
 800d732:	4607      	mov	r7, r0
 800d734:	460c      	mov	r4, r1
 800d736:	461e      	mov	r6, r3
 800d738:	f101 0c14 	add.w	ip, r1, #20
 800d73c:	2000      	movs	r0, #0
 800d73e:	f8dc 3000 	ldr.w	r3, [ip]
 800d742:	b299      	uxth	r1, r3
 800d744:	fb02 6101 	mla	r1, r2, r1, r6
 800d748:	0c1e      	lsrs	r6, r3, #16
 800d74a:	0c0b      	lsrs	r3, r1, #16
 800d74c:	fb02 3306 	mla	r3, r2, r6, r3
 800d750:	b289      	uxth	r1, r1
 800d752:	3001      	adds	r0, #1
 800d754:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d758:	4285      	cmp	r5, r0
 800d75a:	f84c 1b04 	str.w	r1, [ip], #4
 800d75e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d762:	dcec      	bgt.n	800d73e <__multadd+0x12>
 800d764:	b30e      	cbz	r6, 800d7aa <__multadd+0x7e>
 800d766:	68a3      	ldr	r3, [r4, #8]
 800d768:	42ab      	cmp	r3, r5
 800d76a:	dc19      	bgt.n	800d7a0 <__multadd+0x74>
 800d76c:	6861      	ldr	r1, [r4, #4]
 800d76e:	4638      	mov	r0, r7
 800d770:	3101      	adds	r1, #1
 800d772:	f7ff ff79 	bl	800d668 <_Balloc>
 800d776:	4680      	mov	r8, r0
 800d778:	b928      	cbnz	r0, 800d786 <__multadd+0x5a>
 800d77a:	4602      	mov	r2, r0
 800d77c:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b0 <__multadd+0x84>)
 800d77e:	480d      	ldr	r0, [pc, #52]	@ (800d7b4 <__multadd+0x88>)
 800d780:	21ba      	movs	r1, #186	@ 0xba
 800d782:	f000 fd21 	bl	800e1c8 <__assert_func>
 800d786:	6922      	ldr	r2, [r4, #16]
 800d788:	3202      	adds	r2, #2
 800d78a:	f104 010c 	add.w	r1, r4, #12
 800d78e:	0092      	lsls	r2, r2, #2
 800d790:	300c      	adds	r0, #12
 800d792:	f7fe fffc 	bl	800c78e <memcpy>
 800d796:	4621      	mov	r1, r4
 800d798:	4638      	mov	r0, r7
 800d79a:	f7ff ffa5 	bl	800d6e8 <_Bfree>
 800d79e:	4644      	mov	r4, r8
 800d7a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7a4:	3501      	adds	r5, #1
 800d7a6:	615e      	str	r6, [r3, #20]
 800d7a8:	6125      	str	r5, [r4, #16]
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b0:	08010f90 	.word	0x08010f90
 800d7b4:	08010fa1 	.word	0x08010fa1

0800d7b8 <__hi0bits>:
 800d7b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d7bc:	4603      	mov	r3, r0
 800d7be:	bf36      	itet	cc
 800d7c0:	0403      	lslcc	r3, r0, #16
 800d7c2:	2000      	movcs	r0, #0
 800d7c4:	2010      	movcc	r0, #16
 800d7c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d7ca:	bf3c      	itt	cc
 800d7cc:	021b      	lslcc	r3, r3, #8
 800d7ce:	3008      	addcc	r0, #8
 800d7d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7d4:	bf3c      	itt	cc
 800d7d6:	011b      	lslcc	r3, r3, #4
 800d7d8:	3004      	addcc	r0, #4
 800d7da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7de:	bf3c      	itt	cc
 800d7e0:	009b      	lslcc	r3, r3, #2
 800d7e2:	3002      	addcc	r0, #2
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	db05      	blt.n	800d7f4 <__hi0bits+0x3c>
 800d7e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d7ec:	f100 0001 	add.w	r0, r0, #1
 800d7f0:	bf08      	it	eq
 800d7f2:	2020      	moveq	r0, #32
 800d7f4:	4770      	bx	lr

0800d7f6 <__lo0bits>:
 800d7f6:	6803      	ldr	r3, [r0, #0]
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	f013 0007 	ands.w	r0, r3, #7
 800d7fe:	d00b      	beq.n	800d818 <__lo0bits+0x22>
 800d800:	07d9      	lsls	r1, r3, #31
 800d802:	d421      	bmi.n	800d848 <__lo0bits+0x52>
 800d804:	0798      	lsls	r0, r3, #30
 800d806:	bf49      	itett	mi
 800d808:	085b      	lsrmi	r3, r3, #1
 800d80a:	089b      	lsrpl	r3, r3, #2
 800d80c:	2001      	movmi	r0, #1
 800d80e:	6013      	strmi	r3, [r2, #0]
 800d810:	bf5c      	itt	pl
 800d812:	6013      	strpl	r3, [r2, #0]
 800d814:	2002      	movpl	r0, #2
 800d816:	4770      	bx	lr
 800d818:	b299      	uxth	r1, r3
 800d81a:	b909      	cbnz	r1, 800d820 <__lo0bits+0x2a>
 800d81c:	0c1b      	lsrs	r3, r3, #16
 800d81e:	2010      	movs	r0, #16
 800d820:	b2d9      	uxtb	r1, r3
 800d822:	b909      	cbnz	r1, 800d828 <__lo0bits+0x32>
 800d824:	3008      	adds	r0, #8
 800d826:	0a1b      	lsrs	r3, r3, #8
 800d828:	0719      	lsls	r1, r3, #28
 800d82a:	bf04      	itt	eq
 800d82c:	091b      	lsreq	r3, r3, #4
 800d82e:	3004      	addeq	r0, #4
 800d830:	0799      	lsls	r1, r3, #30
 800d832:	bf04      	itt	eq
 800d834:	089b      	lsreq	r3, r3, #2
 800d836:	3002      	addeq	r0, #2
 800d838:	07d9      	lsls	r1, r3, #31
 800d83a:	d403      	bmi.n	800d844 <__lo0bits+0x4e>
 800d83c:	085b      	lsrs	r3, r3, #1
 800d83e:	f100 0001 	add.w	r0, r0, #1
 800d842:	d003      	beq.n	800d84c <__lo0bits+0x56>
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	4770      	bx	lr
 800d848:	2000      	movs	r0, #0
 800d84a:	4770      	bx	lr
 800d84c:	2020      	movs	r0, #32
 800d84e:	4770      	bx	lr

0800d850 <__i2b>:
 800d850:	b510      	push	{r4, lr}
 800d852:	460c      	mov	r4, r1
 800d854:	2101      	movs	r1, #1
 800d856:	f7ff ff07 	bl	800d668 <_Balloc>
 800d85a:	4602      	mov	r2, r0
 800d85c:	b928      	cbnz	r0, 800d86a <__i2b+0x1a>
 800d85e:	4b05      	ldr	r3, [pc, #20]	@ (800d874 <__i2b+0x24>)
 800d860:	4805      	ldr	r0, [pc, #20]	@ (800d878 <__i2b+0x28>)
 800d862:	f240 1145 	movw	r1, #325	@ 0x145
 800d866:	f000 fcaf 	bl	800e1c8 <__assert_func>
 800d86a:	2301      	movs	r3, #1
 800d86c:	6144      	str	r4, [r0, #20]
 800d86e:	6103      	str	r3, [r0, #16]
 800d870:	bd10      	pop	{r4, pc}
 800d872:	bf00      	nop
 800d874:	08010f90 	.word	0x08010f90
 800d878:	08010fa1 	.word	0x08010fa1

0800d87c <__multiply>:
 800d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d880:	4614      	mov	r4, r2
 800d882:	690a      	ldr	r2, [r1, #16]
 800d884:	6923      	ldr	r3, [r4, #16]
 800d886:	429a      	cmp	r2, r3
 800d888:	bfa8      	it	ge
 800d88a:	4623      	movge	r3, r4
 800d88c:	460f      	mov	r7, r1
 800d88e:	bfa4      	itt	ge
 800d890:	460c      	movge	r4, r1
 800d892:	461f      	movge	r7, r3
 800d894:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d898:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d89c:	68a3      	ldr	r3, [r4, #8]
 800d89e:	6861      	ldr	r1, [r4, #4]
 800d8a0:	eb0a 0609 	add.w	r6, sl, r9
 800d8a4:	42b3      	cmp	r3, r6
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	bfb8      	it	lt
 800d8aa:	3101      	addlt	r1, #1
 800d8ac:	f7ff fedc 	bl	800d668 <_Balloc>
 800d8b0:	b930      	cbnz	r0, 800d8c0 <__multiply+0x44>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	4b44      	ldr	r3, [pc, #272]	@ (800d9c8 <__multiply+0x14c>)
 800d8b6:	4845      	ldr	r0, [pc, #276]	@ (800d9cc <__multiply+0x150>)
 800d8b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d8bc:	f000 fc84 	bl	800e1c8 <__assert_func>
 800d8c0:	f100 0514 	add.w	r5, r0, #20
 800d8c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8c8:	462b      	mov	r3, r5
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	4543      	cmp	r3, r8
 800d8ce:	d321      	bcc.n	800d914 <__multiply+0x98>
 800d8d0:	f107 0114 	add.w	r1, r7, #20
 800d8d4:	f104 0214 	add.w	r2, r4, #20
 800d8d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d8dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d8e0:	9302      	str	r3, [sp, #8]
 800d8e2:	1b13      	subs	r3, r2, r4
 800d8e4:	3b15      	subs	r3, #21
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	f104 0715 	add.w	r7, r4, #21
 800d8f0:	42ba      	cmp	r2, r7
 800d8f2:	bf38      	it	cc
 800d8f4:	2304      	movcc	r3, #4
 800d8f6:	9301      	str	r3, [sp, #4]
 800d8f8:	9b02      	ldr	r3, [sp, #8]
 800d8fa:	9103      	str	r1, [sp, #12]
 800d8fc:	428b      	cmp	r3, r1
 800d8fe:	d80c      	bhi.n	800d91a <__multiply+0x9e>
 800d900:	2e00      	cmp	r6, #0
 800d902:	dd03      	ble.n	800d90c <__multiply+0x90>
 800d904:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d05b      	beq.n	800d9c4 <__multiply+0x148>
 800d90c:	6106      	str	r6, [r0, #16]
 800d90e:	b005      	add	sp, #20
 800d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d914:	f843 2b04 	str.w	r2, [r3], #4
 800d918:	e7d8      	b.n	800d8cc <__multiply+0x50>
 800d91a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d91e:	f1ba 0f00 	cmp.w	sl, #0
 800d922:	d024      	beq.n	800d96e <__multiply+0xf2>
 800d924:	f104 0e14 	add.w	lr, r4, #20
 800d928:	46a9      	mov	r9, r5
 800d92a:	f04f 0c00 	mov.w	ip, #0
 800d92e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d932:	f8d9 3000 	ldr.w	r3, [r9]
 800d936:	fa1f fb87 	uxth.w	fp, r7
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d940:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d944:	f8d9 7000 	ldr.w	r7, [r9]
 800d948:	4463      	add	r3, ip
 800d94a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d94e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d952:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d956:	b29b      	uxth	r3, r3
 800d958:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d95c:	4572      	cmp	r2, lr
 800d95e:	f849 3b04 	str.w	r3, [r9], #4
 800d962:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d966:	d8e2      	bhi.n	800d92e <__multiply+0xb2>
 800d968:	9b01      	ldr	r3, [sp, #4]
 800d96a:	f845 c003 	str.w	ip, [r5, r3]
 800d96e:	9b03      	ldr	r3, [sp, #12]
 800d970:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d974:	3104      	adds	r1, #4
 800d976:	f1b9 0f00 	cmp.w	r9, #0
 800d97a:	d021      	beq.n	800d9c0 <__multiply+0x144>
 800d97c:	682b      	ldr	r3, [r5, #0]
 800d97e:	f104 0c14 	add.w	ip, r4, #20
 800d982:	46ae      	mov	lr, r5
 800d984:	f04f 0a00 	mov.w	sl, #0
 800d988:	f8bc b000 	ldrh.w	fp, [ip]
 800d98c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d990:	fb09 770b 	mla	r7, r9, fp, r7
 800d994:	4457      	add	r7, sl
 800d996:	b29b      	uxth	r3, r3
 800d998:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d99c:	f84e 3b04 	str.w	r3, [lr], #4
 800d9a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9a8:	f8be 3000 	ldrh.w	r3, [lr]
 800d9ac:	fb09 330a 	mla	r3, r9, sl, r3
 800d9b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d9b4:	4562      	cmp	r2, ip
 800d9b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9ba:	d8e5      	bhi.n	800d988 <__multiply+0x10c>
 800d9bc:	9f01      	ldr	r7, [sp, #4]
 800d9be:	51eb      	str	r3, [r5, r7]
 800d9c0:	3504      	adds	r5, #4
 800d9c2:	e799      	b.n	800d8f8 <__multiply+0x7c>
 800d9c4:	3e01      	subs	r6, #1
 800d9c6:	e79b      	b.n	800d900 <__multiply+0x84>
 800d9c8:	08010f90 	.word	0x08010f90
 800d9cc:	08010fa1 	.word	0x08010fa1

0800d9d0 <__pow5mult>:
 800d9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9d4:	4615      	mov	r5, r2
 800d9d6:	f012 0203 	ands.w	r2, r2, #3
 800d9da:	4607      	mov	r7, r0
 800d9dc:	460e      	mov	r6, r1
 800d9de:	d007      	beq.n	800d9f0 <__pow5mult+0x20>
 800d9e0:	4c25      	ldr	r4, [pc, #148]	@ (800da78 <__pow5mult+0xa8>)
 800d9e2:	3a01      	subs	r2, #1
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9ea:	f7ff fe9f 	bl	800d72c <__multadd>
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	10ad      	asrs	r5, r5, #2
 800d9f2:	d03d      	beq.n	800da70 <__pow5mult+0xa0>
 800d9f4:	69fc      	ldr	r4, [r7, #28]
 800d9f6:	b97c      	cbnz	r4, 800da18 <__pow5mult+0x48>
 800d9f8:	2010      	movs	r0, #16
 800d9fa:	f7ff fd7f 	bl	800d4fc <malloc>
 800d9fe:	4602      	mov	r2, r0
 800da00:	61f8      	str	r0, [r7, #28]
 800da02:	b928      	cbnz	r0, 800da10 <__pow5mult+0x40>
 800da04:	4b1d      	ldr	r3, [pc, #116]	@ (800da7c <__pow5mult+0xac>)
 800da06:	481e      	ldr	r0, [pc, #120]	@ (800da80 <__pow5mult+0xb0>)
 800da08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da0c:	f000 fbdc 	bl	800e1c8 <__assert_func>
 800da10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da14:	6004      	str	r4, [r0, #0]
 800da16:	60c4      	str	r4, [r0, #12]
 800da18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da20:	b94c      	cbnz	r4, 800da36 <__pow5mult+0x66>
 800da22:	f240 2171 	movw	r1, #625	@ 0x271
 800da26:	4638      	mov	r0, r7
 800da28:	f7ff ff12 	bl	800d850 <__i2b>
 800da2c:	2300      	movs	r3, #0
 800da2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800da32:	4604      	mov	r4, r0
 800da34:	6003      	str	r3, [r0, #0]
 800da36:	f04f 0900 	mov.w	r9, #0
 800da3a:	07eb      	lsls	r3, r5, #31
 800da3c:	d50a      	bpl.n	800da54 <__pow5mult+0x84>
 800da3e:	4631      	mov	r1, r6
 800da40:	4622      	mov	r2, r4
 800da42:	4638      	mov	r0, r7
 800da44:	f7ff ff1a 	bl	800d87c <__multiply>
 800da48:	4631      	mov	r1, r6
 800da4a:	4680      	mov	r8, r0
 800da4c:	4638      	mov	r0, r7
 800da4e:	f7ff fe4b 	bl	800d6e8 <_Bfree>
 800da52:	4646      	mov	r6, r8
 800da54:	106d      	asrs	r5, r5, #1
 800da56:	d00b      	beq.n	800da70 <__pow5mult+0xa0>
 800da58:	6820      	ldr	r0, [r4, #0]
 800da5a:	b938      	cbnz	r0, 800da6c <__pow5mult+0x9c>
 800da5c:	4622      	mov	r2, r4
 800da5e:	4621      	mov	r1, r4
 800da60:	4638      	mov	r0, r7
 800da62:	f7ff ff0b 	bl	800d87c <__multiply>
 800da66:	6020      	str	r0, [r4, #0]
 800da68:	f8c0 9000 	str.w	r9, [r0]
 800da6c:	4604      	mov	r4, r0
 800da6e:	e7e4      	b.n	800da3a <__pow5mult+0x6a>
 800da70:	4630      	mov	r0, r6
 800da72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da76:	bf00      	nop
 800da78:	08010ffc 	.word	0x08010ffc
 800da7c:	08010f21 	.word	0x08010f21
 800da80:	08010fa1 	.word	0x08010fa1

0800da84 <__lshift>:
 800da84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da88:	460c      	mov	r4, r1
 800da8a:	6849      	ldr	r1, [r1, #4]
 800da8c:	6923      	ldr	r3, [r4, #16]
 800da8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da92:	68a3      	ldr	r3, [r4, #8]
 800da94:	4607      	mov	r7, r0
 800da96:	4691      	mov	r9, r2
 800da98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da9c:	f108 0601 	add.w	r6, r8, #1
 800daa0:	42b3      	cmp	r3, r6
 800daa2:	db0b      	blt.n	800dabc <__lshift+0x38>
 800daa4:	4638      	mov	r0, r7
 800daa6:	f7ff fddf 	bl	800d668 <_Balloc>
 800daaa:	4605      	mov	r5, r0
 800daac:	b948      	cbnz	r0, 800dac2 <__lshift+0x3e>
 800daae:	4602      	mov	r2, r0
 800dab0:	4b28      	ldr	r3, [pc, #160]	@ (800db54 <__lshift+0xd0>)
 800dab2:	4829      	ldr	r0, [pc, #164]	@ (800db58 <__lshift+0xd4>)
 800dab4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dab8:	f000 fb86 	bl	800e1c8 <__assert_func>
 800dabc:	3101      	adds	r1, #1
 800dabe:	005b      	lsls	r3, r3, #1
 800dac0:	e7ee      	b.n	800daa0 <__lshift+0x1c>
 800dac2:	2300      	movs	r3, #0
 800dac4:	f100 0114 	add.w	r1, r0, #20
 800dac8:	f100 0210 	add.w	r2, r0, #16
 800dacc:	4618      	mov	r0, r3
 800dace:	4553      	cmp	r3, sl
 800dad0:	db33      	blt.n	800db3a <__lshift+0xb6>
 800dad2:	6920      	ldr	r0, [r4, #16]
 800dad4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dad8:	f104 0314 	add.w	r3, r4, #20
 800dadc:	f019 091f 	ands.w	r9, r9, #31
 800dae0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dae4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dae8:	d02b      	beq.n	800db42 <__lshift+0xbe>
 800daea:	f1c9 0e20 	rsb	lr, r9, #32
 800daee:	468a      	mov	sl, r1
 800daf0:	2200      	movs	r2, #0
 800daf2:	6818      	ldr	r0, [r3, #0]
 800daf4:	fa00 f009 	lsl.w	r0, r0, r9
 800daf8:	4310      	orrs	r0, r2
 800dafa:	f84a 0b04 	str.w	r0, [sl], #4
 800dafe:	f853 2b04 	ldr.w	r2, [r3], #4
 800db02:	459c      	cmp	ip, r3
 800db04:	fa22 f20e 	lsr.w	r2, r2, lr
 800db08:	d8f3      	bhi.n	800daf2 <__lshift+0x6e>
 800db0a:	ebac 0304 	sub.w	r3, ip, r4
 800db0e:	3b15      	subs	r3, #21
 800db10:	f023 0303 	bic.w	r3, r3, #3
 800db14:	3304      	adds	r3, #4
 800db16:	f104 0015 	add.w	r0, r4, #21
 800db1a:	4584      	cmp	ip, r0
 800db1c:	bf38      	it	cc
 800db1e:	2304      	movcc	r3, #4
 800db20:	50ca      	str	r2, [r1, r3]
 800db22:	b10a      	cbz	r2, 800db28 <__lshift+0xa4>
 800db24:	f108 0602 	add.w	r6, r8, #2
 800db28:	3e01      	subs	r6, #1
 800db2a:	4638      	mov	r0, r7
 800db2c:	612e      	str	r6, [r5, #16]
 800db2e:	4621      	mov	r1, r4
 800db30:	f7ff fdda 	bl	800d6e8 <_Bfree>
 800db34:	4628      	mov	r0, r5
 800db36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800db3e:	3301      	adds	r3, #1
 800db40:	e7c5      	b.n	800dace <__lshift+0x4a>
 800db42:	3904      	subs	r1, #4
 800db44:	f853 2b04 	ldr.w	r2, [r3], #4
 800db48:	f841 2f04 	str.w	r2, [r1, #4]!
 800db4c:	459c      	cmp	ip, r3
 800db4e:	d8f9      	bhi.n	800db44 <__lshift+0xc0>
 800db50:	e7ea      	b.n	800db28 <__lshift+0xa4>
 800db52:	bf00      	nop
 800db54:	08010f90 	.word	0x08010f90
 800db58:	08010fa1 	.word	0x08010fa1

0800db5c <__mcmp>:
 800db5c:	690a      	ldr	r2, [r1, #16]
 800db5e:	4603      	mov	r3, r0
 800db60:	6900      	ldr	r0, [r0, #16]
 800db62:	1a80      	subs	r0, r0, r2
 800db64:	b530      	push	{r4, r5, lr}
 800db66:	d10e      	bne.n	800db86 <__mcmp+0x2a>
 800db68:	3314      	adds	r3, #20
 800db6a:	3114      	adds	r1, #20
 800db6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db7c:	4295      	cmp	r5, r2
 800db7e:	d003      	beq.n	800db88 <__mcmp+0x2c>
 800db80:	d205      	bcs.n	800db8e <__mcmp+0x32>
 800db82:	f04f 30ff 	mov.w	r0, #4294967295
 800db86:	bd30      	pop	{r4, r5, pc}
 800db88:	42a3      	cmp	r3, r4
 800db8a:	d3f3      	bcc.n	800db74 <__mcmp+0x18>
 800db8c:	e7fb      	b.n	800db86 <__mcmp+0x2a>
 800db8e:	2001      	movs	r0, #1
 800db90:	e7f9      	b.n	800db86 <__mcmp+0x2a>
	...

0800db94 <__mdiff>:
 800db94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db98:	4689      	mov	r9, r1
 800db9a:	4606      	mov	r6, r0
 800db9c:	4611      	mov	r1, r2
 800db9e:	4648      	mov	r0, r9
 800dba0:	4614      	mov	r4, r2
 800dba2:	f7ff ffdb 	bl	800db5c <__mcmp>
 800dba6:	1e05      	subs	r5, r0, #0
 800dba8:	d112      	bne.n	800dbd0 <__mdiff+0x3c>
 800dbaa:	4629      	mov	r1, r5
 800dbac:	4630      	mov	r0, r6
 800dbae:	f7ff fd5b 	bl	800d668 <_Balloc>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	b928      	cbnz	r0, 800dbc2 <__mdiff+0x2e>
 800dbb6:	4b3f      	ldr	r3, [pc, #252]	@ (800dcb4 <__mdiff+0x120>)
 800dbb8:	f240 2137 	movw	r1, #567	@ 0x237
 800dbbc:	483e      	ldr	r0, [pc, #248]	@ (800dcb8 <__mdiff+0x124>)
 800dbbe:	f000 fb03 	bl	800e1c8 <__assert_func>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbc8:	4610      	mov	r0, r2
 800dbca:	b003      	add	sp, #12
 800dbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd0:	bfbc      	itt	lt
 800dbd2:	464b      	movlt	r3, r9
 800dbd4:	46a1      	movlt	r9, r4
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dbdc:	bfba      	itte	lt
 800dbde:	461c      	movlt	r4, r3
 800dbe0:	2501      	movlt	r5, #1
 800dbe2:	2500      	movge	r5, #0
 800dbe4:	f7ff fd40 	bl	800d668 <_Balloc>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	b918      	cbnz	r0, 800dbf4 <__mdiff+0x60>
 800dbec:	4b31      	ldr	r3, [pc, #196]	@ (800dcb4 <__mdiff+0x120>)
 800dbee:	f240 2145 	movw	r1, #581	@ 0x245
 800dbf2:	e7e3      	b.n	800dbbc <__mdiff+0x28>
 800dbf4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dbf8:	6926      	ldr	r6, [r4, #16]
 800dbfa:	60c5      	str	r5, [r0, #12]
 800dbfc:	f109 0310 	add.w	r3, r9, #16
 800dc00:	f109 0514 	add.w	r5, r9, #20
 800dc04:	f104 0e14 	add.w	lr, r4, #20
 800dc08:	f100 0b14 	add.w	fp, r0, #20
 800dc0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc14:	9301      	str	r3, [sp, #4]
 800dc16:	46d9      	mov	r9, fp
 800dc18:	f04f 0c00 	mov.w	ip, #0
 800dc1c:	9b01      	ldr	r3, [sp, #4]
 800dc1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc22:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc26:	9301      	str	r3, [sp, #4]
 800dc28:	fa1f f38a 	uxth.w	r3, sl
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	b283      	uxth	r3, r0
 800dc30:	1acb      	subs	r3, r1, r3
 800dc32:	0c00      	lsrs	r0, r0, #16
 800dc34:	4463      	add	r3, ip
 800dc36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc44:	4576      	cmp	r6, lr
 800dc46:	f849 3b04 	str.w	r3, [r9], #4
 800dc4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc4e:	d8e5      	bhi.n	800dc1c <__mdiff+0x88>
 800dc50:	1b33      	subs	r3, r6, r4
 800dc52:	3b15      	subs	r3, #21
 800dc54:	f023 0303 	bic.w	r3, r3, #3
 800dc58:	3415      	adds	r4, #21
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	42a6      	cmp	r6, r4
 800dc5e:	bf38      	it	cc
 800dc60:	2304      	movcc	r3, #4
 800dc62:	441d      	add	r5, r3
 800dc64:	445b      	add	r3, fp
 800dc66:	461e      	mov	r6, r3
 800dc68:	462c      	mov	r4, r5
 800dc6a:	4544      	cmp	r4, r8
 800dc6c:	d30e      	bcc.n	800dc8c <__mdiff+0xf8>
 800dc6e:	f108 0103 	add.w	r1, r8, #3
 800dc72:	1b49      	subs	r1, r1, r5
 800dc74:	f021 0103 	bic.w	r1, r1, #3
 800dc78:	3d03      	subs	r5, #3
 800dc7a:	45a8      	cmp	r8, r5
 800dc7c:	bf38      	it	cc
 800dc7e:	2100      	movcc	r1, #0
 800dc80:	440b      	add	r3, r1
 800dc82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc86:	b191      	cbz	r1, 800dcae <__mdiff+0x11a>
 800dc88:	6117      	str	r7, [r2, #16]
 800dc8a:	e79d      	b.n	800dbc8 <__mdiff+0x34>
 800dc8c:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc90:	46e6      	mov	lr, ip
 800dc92:	0c08      	lsrs	r0, r1, #16
 800dc94:	fa1c fc81 	uxtah	ip, ip, r1
 800dc98:	4471      	add	r1, lr
 800dc9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc9e:	b289      	uxth	r1, r1
 800dca0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dca4:	f846 1b04 	str.w	r1, [r6], #4
 800dca8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcac:	e7dd      	b.n	800dc6a <__mdiff+0xd6>
 800dcae:	3f01      	subs	r7, #1
 800dcb0:	e7e7      	b.n	800dc82 <__mdiff+0xee>
 800dcb2:	bf00      	nop
 800dcb4:	08010f90 	.word	0x08010f90
 800dcb8:	08010fa1 	.word	0x08010fa1

0800dcbc <__d2b>:
 800dcbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dcc0:	460f      	mov	r7, r1
 800dcc2:	2101      	movs	r1, #1
 800dcc4:	ec59 8b10 	vmov	r8, r9, d0
 800dcc8:	4616      	mov	r6, r2
 800dcca:	f7ff fccd 	bl	800d668 <_Balloc>
 800dcce:	4604      	mov	r4, r0
 800dcd0:	b930      	cbnz	r0, 800dce0 <__d2b+0x24>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	4b23      	ldr	r3, [pc, #140]	@ (800dd64 <__d2b+0xa8>)
 800dcd6:	4824      	ldr	r0, [pc, #144]	@ (800dd68 <__d2b+0xac>)
 800dcd8:	f240 310f 	movw	r1, #783	@ 0x30f
 800dcdc:	f000 fa74 	bl	800e1c8 <__assert_func>
 800dce0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dce4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dce8:	b10d      	cbz	r5, 800dcee <__d2b+0x32>
 800dcea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dcee:	9301      	str	r3, [sp, #4]
 800dcf0:	f1b8 0300 	subs.w	r3, r8, #0
 800dcf4:	d023      	beq.n	800dd3e <__d2b+0x82>
 800dcf6:	4668      	mov	r0, sp
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	f7ff fd7c 	bl	800d7f6 <__lo0bits>
 800dcfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd02:	b1d0      	cbz	r0, 800dd3a <__d2b+0x7e>
 800dd04:	f1c0 0320 	rsb	r3, r0, #32
 800dd08:	fa02 f303 	lsl.w	r3, r2, r3
 800dd0c:	430b      	orrs	r3, r1
 800dd0e:	40c2      	lsrs	r2, r0
 800dd10:	6163      	str	r3, [r4, #20]
 800dd12:	9201      	str	r2, [sp, #4]
 800dd14:	9b01      	ldr	r3, [sp, #4]
 800dd16:	61a3      	str	r3, [r4, #24]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	bf0c      	ite	eq
 800dd1c:	2201      	moveq	r2, #1
 800dd1e:	2202      	movne	r2, #2
 800dd20:	6122      	str	r2, [r4, #16]
 800dd22:	b1a5      	cbz	r5, 800dd4e <__d2b+0x92>
 800dd24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dd28:	4405      	add	r5, r0
 800dd2a:	603d      	str	r5, [r7, #0]
 800dd2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dd30:	6030      	str	r0, [r6, #0]
 800dd32:	4620      	mov	r0, r4
 800dd34:	b003      	add	sp, #12
 800dd36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd3a:	6161      	str	r1, [r4, #20]
 800dd3c:	e7ea      	b.n	800dd14 <__d2b+0x58>
 800dd3e:	a801      	add	r0, sp, #4
 800dd40:	f7ff fd59 	bl	800d7f6 <__lo0bits>
 800dd44:	9b01      	ldr	r3, [sp, #4]
 800dd46:	6163      	str	r3, [r4, #20]
 800dd48:	3020      	adds	r0, #32
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	e7e8      	b.n	800dd20 <__d2b+0x64>
 800dd4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dd56:	6038      	str	r0, [r7, #0]
 800dd58:	6918      	ldr	r0, [r3, #16]
 800dd5a:	f7ff fd2d 	bl	800d7b8 <__hi0bits>
 800dd5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd62:	e7e5      	b.n	800dd30 <__d2b+0x74>
 800dd64:	08010f90 	.word	0x08010f90
 800dd68:	08010fa1 	.word	0x08010fa1

0800dd6c <__ssputs_r>:
 800dd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd70:	688e      	ldr	r6, [r1, #8]
 800dd72:	461f      	mov	r7, r3
 800dd74:	42be      	cmp	r6, r7
 800dd76:	680b      	ldr	r3, [r1, #0]
 800dd78:	4682      	mov	sl, r0
 800dd7a:	460c      	mov	r4, r1
 800dd7c:	4690      	mov	r8, r2
 800dd7e:	d82d      	bhi.n	800dddc <__ssputs_r+0x70>
 800dd80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dd88:	d026      	beq.n	800ddd8 <__ssputs_r+0x6c>
 800dd8a:	6965      	ldr	r5, [r4, #20]
 800dd8c:	6909      	ldr	r1, [r1, #16]
 800dd8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd92:	eba3 0901 	sub.w	r9, r3, r1
 800dd96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd9a:	1c7b      	adds	r3, r7, #1
 800dd9c:	444b      	add	r3, r9
 800dd9e:	106d      	asrs	r5, r5, #1
 800dda0:	429d      	cmp	r5, r3
 800dda2:	bf38      	it	cc
 800dda4:	461d      	movcc	r5, r3
 800dda6:	0553      	lsls	r3, r2, #21
 800dda8:	d527      	bpl.n	800ddfa <__ssputs_r+0x8e>
 800ddaa:	4629      	mov	r1, r5
 800ddac:	f7ff fbd0 	bl	800d550 <_malloc_r>
 800ddb0:	4606      	mov	r6, r0
 800ddb2:	b360      	cbz	r0, 800de0e <__ssputs_r+0xa2>
 800ddb4:	6921      	ldr	r1, [r4, #16]
 800ddb6:	464a      	mov	r2, r9
 800ddb8:	f7fe fce9 	bl	800c78e <memcpy>
 800ddbc:	89a3      	ldrh	r3, [r4, #12]
 800ddbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ddc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddc6:	81a3      	strh	r3, [r4, #12]
 800ddc8:	6126      	str	r6, [r4, #16]
 800ddca:	6165      	str	r5, [r4, #20]
 800ddcc:	444e      	add	r6, r9
 800ddce:	eba5 0509 	sub.w	r5, r5, r9
 800ddd2:	6026      	str	r6, [r4, #0]
 800ddd4:	60a5      	str	r5, [r4, #8]
 800ddd6:	463e      	mov	r6, r7
 800ddd8:	42be      	cmp	r6, r7
 800ddda:	d900      	bls.n	800ddde <__ssputs_r+0x72>
 800dddc:	463e      	mov	r6, r7
 800ddde:	6820      	ldr	r0, [r4, #0]
 800dde0:	4632      	mov	r2, r6
 800dde2:	4641      	mov	r1, r8
 800dde4:	f000 f9c6 	bl	800e174 <memmove>
 800dde8:	68a3      	ldr	r3, [r4, #8]
 800ddea:	1b9b      	subs	r3, r3, r6
 800ddec:	60a3      	str	r3, [r4, #8]
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	4433      	add	r3, r6
 800ddf2:	6023      	str	r3, [r4, #0]
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddfa:	462a      	mov	r2, r5
 800ddfc:	f000 fa28 	bl	800e250 <_realloc_r>
 800de00:	4606      	mov	r6, r0
 800de02:	2800      	cmp	r0, #0
 800de04:	d1e0      	bne.n	800ddc8 <__ssputs_r+0x5c>
 800de06:	6921      	ldr	r1, [r4, #16]
 800de08:	4650      	mov	r0, sl
 800de0a:	f7ff fb2d 	bl	800d468 <_free_r>
 800de0e:	230c      	movs	r3, #12
 800de10:	f8ca 3000 	str.w	r3, [sl]
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de1a:	81a3      	strh	r3, [r4, #12]
 800de1c:	f04f 30ff 	mov.w	r0, #4294967295
 800de20:	e7e9      	b.n	800ddf6 <__ssputs_r+0x8a>
	...

0800de24 <_svfiprintf_r>:
 800de24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de28:	4698      	mov	r8, r3
 800de2a:	898b      	ldrh	r3, [r1, #12]
 800de2c:	061b      	lsls	r3, r3, #24
 800de2e:	b09d      	sub	sp, #116	@ 0x74
 800de30:	4607      	mov	r7, r0
 800de32:	460d      	mov	r5, r1
 800de34:	4614      	mov	r4, r2
 800de36:	d510      	bpl.n	800de5a <_svfiprintf_r+0x36>
 800de38:	690b      	ldr	r3, [r1, #16]
 800de3a:	b973      	cbnz	r3, 800de5a <_svfiprintf_r+0x36>
 800de3c:	2140      	movs	r1, #64	@ 0x40
 800de3e:	f7ff fb87 	bl	800d550 <_malloc_r>
 800de42:	6028      	str	r0, [r5, #0]
 800de44:	6128      	str	r0, [r5, #16]
 800de46:	b930      	cbnz	r0, 800de56 <_svfiprintf_r+0x32>
 800de48:	230c      	movs	r3, #12
 800de4a:	603b      	str	r3, [r7, #0]
 800de4c:	f04f 30ff 	mov.w	r0, #4294967295
 800de50:	b01d      	add	sp, #116	@ 0x74
 800de52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de56:	2340      	movs	r3, #64	@ 0x40
 800de58:	616b      	str	r3, [r5, #20]
 800de5a:	2300      	movs	r3, #0
 800de5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de5e:	2320      	movs	r3, #32
 800de60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de64:	f8cd 800c 	str.w	r8, [sp, #12]
 800de68:	2330      	movs	r3, #48	@ 0x30
 800de6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e008 <_svfiprintf_r+0x1e4>
 800de6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de72:	f04f 0901 	mov.w	r9, #1
 800de76:	4623      	mov	r3, r4
 800de78:	469a      	mov	sl, r3
 800de7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de7e:	b10a      	cbz	r2, 800de84 <_svfiprintf_r+0x60>
 800de80:	2a25      	cmp	r2, #37	@ 0x25
 800de82:	d1f9      	bne.n	800de78 <_svfiprintf_r+0x54>
 800de84:	ebba 0b04 	subs.w	fp, sl, r4
 800de88:	d00b      	beq.n	800dea2 <_svfiprintf_r+0x7e>
 800de8a:	465b      	mov	r3, fp
 800de8c:	4622      	mov	r2, r4
 800de8e:	4629      	mov	r1, r5
 800de90:	4638      	mov	r0, r7
 800de92:	f7ff ff6b 	bl	800dd6c <__ssputs_r>
 800de96:	3001      	adds	r0, #1
 800de98:	f000 80a7 	beq.w	800dfea <_svfiprintf_r+0x1c6>
 800de9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de9e:	445a      	add	r2, fp
 800dea0:	9209      	str	r2, [sp, #36]	@ 0x24
 800dea2:	f89a 3000 	ldrb.w	r3, [sl]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f000 809f 	beq.w	800dfea <_svfiprintf_r+0x1c6>
 800deac:	2300      	movs	r3, #0
 800deae:	f04f 32ff 	mov.w	r2, #4294967295
 800deb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deb6:	f10a 0a01 	add.w	sl, sl, #1
 800deba:	9304      	str	r3, [sp, #16]
 800debc:	9307      	str	r3, [sp, #28]
 800debe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dec2:	931a      	str	r3, [sp, #104]	@ 0x68
 800dec4:	4654      	mov	r4, sl
 800dec6:	2205      	movs	r2, #5
 800dec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800decc:	484e      	ldr	r0, [pc, #312]	@ (800e008 <_svfiprintf_r+0x1e4>)
 800dece:	f7f2 f97f 	bl	80001d0 <memchr>
 800ded2:	9a04      	ldr	r2, [sp, #16]
 800ded4:	b9d8      	cbnz	r0, 800df0e <_svfiprintf_r+0xea>
 800ded6:	06d0      	lsls	r0, r2, #27
 800ded8:	bf44      	itt	mi
 800deda:	2320      	movmi	r3, #32
 800dedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dee0:	0711      	lsls	r1, r2, #28
 800dee2:	bf44      	itt	mi
 800dee4:	232b      	movmi	r3, #43	@ 0x2b
 800dee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800deea:	f89a 3000 	ldrb.w	r3, [sl]
 800deee:	2b2a      	cmp	r3, #42	@ 0x2a
 800def0:	d015      	beq.n	800df1e <_svfiprintf_r+0xfa>
 800def2:	9a07      	ldr	r2, [sp, #28]
 800def4:	4654      	mov	r4, sl
 800def6:	2000      	movs	r0, #0
 800def8:	f04f 0c0a 	mov.w	ip, #10
 800defc:	4621      	mov	r1, r4
 800defe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df02:	3b30      	subs	r3, #48	@ 0x30
 800df04:	2b09      	cmp	r3, #9
 800df06:	d94b      	bls.n	800dfa0 <_svfiprintf_r+0x17c>
 800df08:	b1b0      	cbz	r0, 800df38 <_svfiprintf_r+0x114>
 800df0a:	9207      	str	r2, [sp, #28]
 800df0c:	e014      	b.n	800df38 <_svfiprintf_r+0x114>
 800df0e:	eba0 0308 	sub.w	r3, r0, r8
 800df12:	fa09 f303 	lsl.w	r3, r9, r3
 800df16:	4313      	orrs	r3, r2
 800df18:	9304      	str	r3, [sp, #16]
 800df1a:	46a2      	mov	sl, r4
 800df1c:	e7d2      	b.n	800dec4 <_svfiprintf_r+0xa0>
 800df1e:	9b03      	ldr	r3, [sp, #12]
 800df20:	1d19      	adds	r1, r3, #4
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	9103      	str	r1, [sp, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	bfbb      	ittet	lt
 800df2a:	425b      	neglt	r3, r3
 800df2c:	f042 0202 	orrlt.w	r2, r2, #2
 800df30:	9307      	strge	r3, [sp, #28]
 800df32:	9307      	strlt	r3, [sp, #28]
 800df34:	bfb8      	it	lt
 800df36:	9204      	strlt	r2, [sp, #16]
 800df38:	7823      	ldrb	r3, [r4, #0]
 800df3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800df3c:	d10a      	bne.n	800df54 <_svfiprintf_r+0x130>
 800df3e:	7863      	ldrb	r3, [r4, #1]
 800df40:	2b2a      	cmp	r3, #42	@ 0x2a
 800df42:	d132      	bne.n	800dfaa <_svfiprintf_r+0x186>
 800df44:	9b03      	ldr	r3, [sp, #12]
 800df46:	1d1a      	adds	r2, r3, #4
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	9203      	str	r2, [sp, #12]
 800df4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df50:	3402      	adds	r4, #2
 800df52:	9305      	str	r3, [sp, #20]
 800df54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e018 <_svfiprintf_r+0x1f4>
 800df58:	7821      	ldrb	r1, [r4, #0]
 800df5a:	2203      	movs	r2, #3
 800df5c:	4650      	mov	r0, sl
 800df5e:	f7f2 f937 	bl	80001d0 <memchr>
 800df62:	b138      	cbz	r0, 800df74 <_svfiprintf_r+0x150>
 800df64:	9b04      	ldr	r3, [sp, #16]
 800df66:	eba0 000a 	sub.w	r0, r0, sl
 800df6a:	2240      	movs	r2, #64	@ 0x40
 800df6c:	4082      	lsls	r2, r0
 800df6e:	4313      	orrs	r3, r2
 800df70:	3401      	adds	r4, #1
 800df72:	9304      	str	r3, [sp, #16]
 800df74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df78:	4824      	ldr	r0, [pc, #144]	@ (800e00c <_svfiprintf_r+0x1e8>)
 800df7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df7e:	2206      	movs	r2, #6
 800df80:	f7f2 f926 	bl	80001d0 <memchr>
 800df84:	2800      	cmp	r0, #0
 800df86:	d036      	beq.n	800dff6 <_svfiprintf_r+0x1d2>
 800df88:	4b21      	ldr	r3, [pc, #132]	@ (800e010 <_svfiprintf_r+0x1ec>)
 800df8a:	bb1b      	cbnz	r3, 800dfd4 <_svfiprintf_r+0x1b0>
 800df8c:	9b03      	ldr	r3, [sp, #12]
 800df8e:	3307      	adds	r3, #7
 800df90:	f023 0307 	bic.w	r3, r3, #7
 800df94:	3308      	adds	r3, #8
 800df96:	9303      	str	r3, [sp, #12]
 800df98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df9a:	4433      	add	r3, r6
 800df9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df9e:	e76a      	b.n	800de76 <_svfiprintf_r+0x52>
 800dfa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfa4:	460c      	mov	r4, r1
 800dfa6:	2001      	movs	r0, #1
 800dfa8:	e7a8      	b.n	800defc <_svfiprintf_r+0xd8>
 800dfaa:	2300      	movs	r3, #0
 800dfac:	3401      	adds	r4, #1
 800dfae:	9305      	str	r3, [sp, #20]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	f04f 0c0a 	mov.w	ip, #10
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfbc:	3a30      	subs	r2, #48	@ 0x30
 800dfbe:	2a09      	cmp	r2, #9
 800dfc0:	d903      	bls.n	800dfca <_svfiprintf_r+0x1a6>
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d0c6      	beq.n	800df54 <_svfiprintf_r+0x130>
 800dfc6:	9105      	str	r1, [sp, #20]
 800dfc8:	e7c4      	b.n	800df54 <_svfiprintf_r+0x130>
 800dfca:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfce:	4604      	mov	r4, r0
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e7f0      	b.n	800dfb6 <_svfiprintf_r+0x192>
 800dfd4:	ab03      	add	r3, sp, #12
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	462a      	mov	r2, r5
 800dfda:	4b0e      	ldr	r3, [pc, #56]	@ (800e014 <_svfiprintf_r+0x1f0>)
 800dfdc:	a904      	add	r1, sp, #16
 800dfde:	4638      	mov	r0, r7
 800dfe0:	f7fd fe78 	bl	800bcd4 <_printf_float>
 800dfe4:	1c42      	adds	r2, r0, #1
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	d1d6      	bne.n	800df98 <_svfiprintf_r+0x174>
 800dfea:	89ab      	ldrh	r3, [r5, #12]
 800dfec:	065b      	lsls	r3, r3, #25
 800dfee:	f53f af2d 	bmi.w	800de4c <_svfiprintf_r+0x28>
 800dff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dff4:	e72c      	b.n	800de50 <_svfiprintf_r+0x2c>
 800dff6:	ab03      	add	r3, sp, #12
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	462a      	mov	r2, r5
 800dffc:	4b05      	ldr	r3, [pc, #20]	@ (800e014 <_svfiprintf_r+0x1f0>)
 800dffe:	a904      	add	r1, sp, #16
 800e000:	4638      	mov	r0, r7
 800e002:	f7fe f8ff 	bl	800c204 <_printf_i>
 800e006:	e7ed      	b.n	800dfe4 <_svfiprintf_r+0x1c0>
 800e008:	080110f8 	.word	0x080110f8
 800e00c:	08011102 	.word	0x08011102
 800e010:	0800bcd5 	.word	0x0800bcd5
 800e014:	0800dd6d 	.word	0x0800dd6d
 800e018:	080110fe 	.word	0x080110fe

0800e01c <__sflush_r>:
 800e01c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e024:	0716      	lsls	r6, r2, #28
 800e026:	4605      	mov	r5, r0
 800e028:	460c      	mov	r4, r1
 800e02a:	d454      	bmi.n	800e0d6 <__sflush_r+0xba>
 800e02c:	684b      	ldr	r3, [r1, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	dc02      	bgt.n	800e038 <__sflush_r+0x1c>
 800e032:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e034:	2b00      	cmp	r3, #0
 800e036:	dd48      	ble.n	800e0ca <__sflush_r+0xae>
 800e038:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e03a:	2e00      	cmp	r6, #0
 800e03c:	d045      	beq.n	800e0ca <__sflush_r+0xae>
 800e03e:	2300      	movs	r3, #0
 800e040:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e044:	682f      	ldr	r7, [r5, #0]
 800e046:	6a21      	ldr	r1, [r4, #32]
 800e048:	602b      	str	r3, [r5, #0]
 800e04a:	d030      	beq.n	800e0ae <__sflush_r+0x92>
 800e04c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e04e:	89a3      	ldrh	r3, [r4, #12]
 800e050:	0759      	lsls	r1, r3, #29
 800e052:	d505      	bpl.n	800e060 <__sflush_r+0x44>
 800e054:	6863      	ldr	r3, [r4, #4]
 800e056:	1ad2      	subs	r2, r2, r3
 800e058:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e05a:	b10b      	cbz	r3, 800e060 <__sflush_r+0x44>
 800e05c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e05e:	1ad2      	subs	r2, r2, r3
 800e060:	2300      	movs	r3, #0
 800e062:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e064:	6a21      	ldr	r1, [r4, #32]
 800e066:	4628      	mov	r0, r5
 800e068:	47b0      	blx	r6
 800e06a:	1c43      	adds	r3, r0, #1
 800e06c:	89a3      	ldrh	r3, [r4, #12]
 800e06e:	d106      	bne.n	800e07e <__sflush_r+0x62>
 800e070:	6829      	ldr	r1, [r5, #0]
 800e072:	291d      	cmp	r1, #29
 800e074:	d82b      	bhi.n	800e0ce <__sflush_r+0xb2>
 800e076:	4a2a      	ldr	r2, [pc, #168]	@ (800e120 <__sflush_r+0x104>)
 800e078:	410a      	asrs	r2, r1
 800e07a:	07d6      	lsls	r6, r2, #31
 800e07c:	d427      	bmi.n	800e0ce <__sflush_r+0xb2>
 800e07e:	2200      	movs	r2, #0
 800e080:	6062      	str	r2, [r4, #4]
 800e082:	04d9      	lsls	r1, r3, #19
 800e084:	6922      	ldr	r2, [r4, #16]
 800e086:	6022      	str	r2, [r4, #0]
 800e088:	d504      	bpl.n	800e094 <__sflush_r+0x78>
 800e08a:	1c42      	adds	r2, r0, #1
 800e08c:	d101      	bne.n	800e092 <__sflush_r+0x76>
 800e08e:	682b      	ldr	r3, [r5, #0]
 800e090:	b903      	cbnz	r3, 800e094 <__sflush_r+0x78>
 800e092:	6560      	str	r0, [r4, #84]	@ 0x54
 800e094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e096:	602f      	str	r7, [r5, #0]
 800e098:	b1b9      	cbz	r1, 800e0ca <__sflush_r+0xae>
 800e09a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e09e:	4299      	cmp	r1, r3
 800e0a0:	d002      	beq.n	800e0a8 <__sflush_r+0x8c>
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f7ff f9e0 	bl	800d468 <_free_r>
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0ac:	e00d      	b.n	800e0ca <__sflush_r+0xae>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	47b0      	blx	r6
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	1c50      	adds	r0, r2, #1
 800e0b8:	d1c9      	bne.n	800e04e <__sflush_r+0x32>
 800e0ba:	682b      	ldr	r3, [r5, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d0c6      	beq.n	800e04e <__sflush_r+0x32>
 800e0c0:	2b1d      	cmp	r3, #29
 800e0c2:	d001      	beq.n	800e0c8 <__sflush_r+0xac>
 800e0c4:	2b16      	cmp	r3, #22
 800e0c6:	d11e      	bne.n	800e106 <__sflush_r+0xea>
 800e0c8:	602f      	str	r7, [r5, #0]
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	e022      	b.n	800e114 <__sflush_r+0xf8>
 800e0ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0d2:	b21b      	sxth	r3, r3
 800e0d4:	e01b      	b.n	800e10e <__sflush_r+0xf2>
 800e0d6:	690f      	ldr	r7, [r1, #16]
 800e0d8:	2f00      	cmp	r7, #0
 800e0da:	d0f6      	beq.n	800e0ca <__sflush_r+0xae>
 800e0dc:	0793      	lsls	r3, r2, #30
 800e0de:	680e      	ldr	r6, [r1, #0]
 800e0e0:	bf08      	it	eq
 800e0e2:	694b      	ldreq	r3, [r1, #20]
 800e0e4:	600f      	str	r7, [r1, #0]
 800e0e6:	bf18      	it	ne
 800e0e8:	2300      	movne	r3, #0
 800e0ea:	eba6 0807 	sub.w	r8, r6, r7
 800e0ee:	608b      	str	r3, [r1, #8]
 800e0f0:	f1b8 0f00 	cmp.w	r8, #0
 800e0f4:	dde9      	ble.n	800e0ca <__sflush_r+0xae>
 800e0f6:	6a21      	ldr	r1, [r4, #32]
 800e0f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e0fa:	4643      	mov	r3, r8
 800e0fc:	463a      	mov	r2, r7
 800e0fe:	4628      	mov	r0, r5
 800e100:	47b0      	blx	r6
 800e102:	2800      	cmp	r0, #0
 800e104:	dc08      	bgt.n	800e118 <__sflush_r+0xfc>
 800e106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e10a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e10e:	81a3      	strh	r3, [r4, #12]
 800e110:	f04f 30ff 	mov.w	r0, #4294967295
 800e114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e118:	4407      	add	r7, r0
 800e11a:	eba8 0800 	sub.w	r8, r8, r0
 800e11e:	e7e7      	b.n	800e0f0 <__sflush_r+0xd4>
 800e120:	dfbffffe 	.word	0xdfbffffe

0800e124 <_fflush_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	690b      	ldr	r3, [r1, #16]
 800e128:	4605      	mov	r5, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	b913      	cbnz	r3, 800e134 <_fflush_r+0x10>
 800e12e:	2500      	movs	r5, #0
 800e130:	4628      	mov	r0, r5
 800e132:	bd38      	pop	{r3, r4, r5, pc}
 800e134:	b118      	cbz	r0, 800e13e <_fflush_r+0x1a>
 800e136:	6a03      	ldr	r3, [r0, #32]
 800e138:	b90b      	cbnz	r3, 800e13e <_fflush_r+0x1a>
 800e13a:	f7fe fa0f 	bl	800c55c <__sinit>
 800e13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d0f3      	beq.n	800e12e <_fflush_r+0xa>
 800e146:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e148:	07d0      	lsls	r0, r2, #31
 800e14a:	d404      	bmi.n	800e156 <_fflush_r+0x32>
 800e14c:	0599      	lsls	r1, r3, #22
 800e14e:	d402      	bmi.n	800e156 <_fflush_r+0x32>
 800e150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e152:	f7fe fb1a 	bl	800c78a <__retarget_lock_acquire_recursive>
 800e156:	4628      	mov	r0, r5
 800e158:	4621      	mov	r1, r4
 800e15a:	f7ff ff5f 	bl	800e01c <__sflush_r>
 800e15e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e160:	07da      	lsls	r2, r3, #31
 800e162:	4605      	mov	r5, r0
 800e164:	d4e4      	bmi.n	800e130 <_fflush_r+0xc>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	059b      	lsls	r3, r3, #22
 800e16a:	d4e1      	bmi.n	800e130 <_fflush_r+0xc>
 800e16c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e16e:	f7fe fb0d 	bl	800c78c <__retarget_lock_release_recursive>
 800e172:	e7dd      	b.n	800e130 <_fflush_r+0xc>

0800e174 <memmove>:
 800e174:	4288      	cmp	r0, r1
 800e176:	b510      	push	{r4, lr}
 800e178:	eb01 0402 	add.w	r4, r1, r2
 800e17c:	d902      	bls.n	800e184 <memmove+0x10>
 800e17e:	4284      	cmp	r4, r0
 800e180:	4623      	mov	r3, r4
 800e182:	d807      	bhi.n	800e194 <memmove+0x20>
 800e184:	1e43      	subs	r3, r0, #1
 800e186:	42a1      	cmp	r1, r4
 800e188:	d008      	beq.n	800e19c <memmove+0x28>
 800e18a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e18e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e192:	e7f8      	b.n	800e186 <memmove+0x12>
 800e194:	4402      	add	r2, r0
 800e196:	4601      	mov	r1, r0
 800e198:	428a      	cmp	r2, r1
 800e19a:	d100      	bne.n	800e19e <memmove+0x2a>
 800e19c:	bd10      	pop	{r4, pc}
 800e19e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1a6:	e7f7      	b.n	800e198 <memmove+0x24>

0800e1a8 <_sbrk_r>:
 800e1a8:	b538      	push	{r3, r4, r5, lr}
 800e1aa:	4d06      	ldr	r5, [pc, #24]	@ (800e1c4 <_sbrk_r+0x1c>)
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	4608      	mov	r0, r1
 800e1b2:	602b      	str	r3, [r5, #0]
 800e1b4:	f7f5 fa26 	bl	8003604 <_sbrk>
 800e1b8:	1c43      	adds	r3, r0, #1
 800e1ba:	d102      	bne.n	800e1c2 <_sbrk_r+0x1a>
 800e1bc:	682b      	ldr	r3, [r5, #0]
 800e1be:	b103      	cbz	r3, 800e1c2 <_sbrk_r+0x1a>
 800e1c0:	6023      	str	r3, [r4, #0]
 800e1c2:	bd38      	pop	{r3, r4, r5, pc}
 800e1c4:	20002330 	.word	0x20002330

0800e1c8 <__assert_func>:
 800e1c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1ca:	4614      	mov	r4, r2
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	4b09      	ldr	r3, [pc, #36]	@ (800e1f4 <__assert_func+0x2c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	68d8      	ldr	r0, [r3, #12]
 800e1d6:	b954      	cbnz	r4, 800e1ee <__assert_func+0x26>
 800e1d8:	4b07      	ldr	r3, [pc, #28]	@ (800e1f8 <__assert_func+0x30>)
 800e1da:	461c      	mov	r4, r3
 800e1dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1e0:	9100      	str	r1, [sp, #0]
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	4905      	ldr	r1, [pc, #20]	@ (800e1fc <__assert_func+0x34>)
 800e1e6:	f000 f86f 	bl	800e2c8 <fiprintf>
 800e1ea:	f000 f87f 	bl	800e2ec <abort>
 800e1ee:	4b04      	ldr	r3, [pc, #16]	@ (800e200 <__assert_func+0x38>)
 800e1f0:	e7f4      	b.n	800e1dc <__assert_func+0x14>
 800e1f2:	bf00      	nop
 800e1f4:	20000134 	.word	0x20000134
 800e1f8:	0801114e 	.word	0x0801114e
 800e1fc:	08011120 	.word	0x08011120
 800e200:	08011113 	.word	0x08011113

0800e204 <_calloc_r>:
 800e204:	b570      	push	{r4, r5, r6, lr}
 800e206:	fba1 5402 	umull	r5, r4, r1, r2
 800e20a:	b93c      	cbnz	r4, 800e21c <_calloc_r+0x18>
 800e20c:	4629      	mov	r1, r5
 800e20e:	f7ff f99f 	bl	800d550 <_malloc_r>
 800e212:	4606      	mov	r6, r0
 800e214:	b928      	cbnz	r0, 800e222 <_calloc_r+0x1e>
 800e216:	2600      	movs	r6, #0
 800e218:	4630      	mov	r0, r6
 800e21a:	bd70      	pop	{r4, r5, r6, pc}
 800e21c:	220c      	movs	r2, #12
 800e21e:	6002      	str	r2, [r0, #0]
 800e220:	e7f9      	b.n	800e216 <_calloc_r+0x12>
 800e222:	462a      	mov	r2, r5
 800e224:	4621      	mov	r1, r4
 800e226:	f7fe fa32 	bl	800c68e <memset>
 800e22a:	e7f5      	b.n	800e218 <_calloc_r+0x14>

0800e22c <__ascii_mbtowc>:
 800e22c:	b082      	sub	sp, #8
 800e22e:	b901      	cbnz	r1, 800e232 <__ascii_mbtowc+0x6>
 800e230:	a901      	add	r1, sp, #4
 800e232:	b142      	cbz	r2, 800e246 <__ascii_mbtowc+0x1a>
 800e234:	b14b      	cbz	r3, 800e24a <__ascii_mbtowc+0x1e>
 800e236:	7813      	ldrb	r3, [r2, #0]
 800e238:	600b      	str	r3, [r1, #0]
 800e23a:	7812      	ldrb	r2, [r2, #0]
 800e23c:	1e10      	subs	r0, r2, #0
 800e23e:	bf18      	it	ne
 800e240:	2001      	movne	r0, #1
 800e242:	b002      	add	sp, #8
 800e244:	4770      	bx	lr
 800e246:	4610      	mov	r0, r2
 800e248:	e7fb      	b.n	800e242 <__ascii_mbtowc+0x16>
 800e24a:	f06f 0001 	mvn.w	r0, #1
 800e24e:	e7f8      	b.n	800e242 <__ascii_mbtowc+0x16>

0800e250 <_realloc_r>:
 800e250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e254:	4680      	mov	r8, r0
 800e256:	4615      	mov	r5, r2
 800e258:	460c      	mov	r4, r1
 800e25a:	b921      	cbnz	r1, 800e266 <_realloc_r+0x16>
 800e25c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e260:	4611      	mov	r1, r2
 800e262:	f7ff b975 	b.w	800d550 <_malloc_r>
 800e266:	b92a      	cbnz	r2, 800e274 <_realloc_r+0x24>
 800e268:	f7ff f8fe 	bl	800d468 <_free_r>
 800e26c:	2400      	movs	r4, #0
 800e26e:	4620      	mov	r0, r4
 800e270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e274:	f000 f841 	bl	800e2fa <_malloc_usable_size_r>
 800e278:	4285      	cmp	r5, r0
 800e27a:	4606      	mov	r6, r0
 800e27c:	d802      	bhi.n	800e284 <_realloc_r+0x34>
 800e27e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e282:	d8f4      	bhi.n	800e26e <_realloc_r+0x1e>
 800e284:	4629      	mov	r1, r5
 800e286:	4640      	mov	r0, r8
 800e288:	f7ff f962 	bl	800d550 <_malloc_r>
 800e28c:	4607      	mov	r7, r0
 800e28e:	2800      	cmp	r0, #0
 800e290:	d0ec      	beq.n	800e26c <_realloc_r+0x1c>
 800e292:	42b5      	cmp	r5, r6
 800e294:	462a      	mov	r2, r5
 800e296:	4621      	mov	r1, r4
 800e298:	bf28      	it	cs
 800e29a:	4632      	movcs	r2, r6
 800e29c:	f7fe fa77 	bl	800c78e <memcpy>
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	f7ff f8e0 	bl	800d468 <_free_r>
 800e2a8:	463c      	mov	r4, r7
 800e2aa:	e7e0      	b.n	800e26e <_realloc_r+0x1e>

0800e2ac <__ascii_wctomb>:
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	4608      	mov	r0, r1
 800e2b0:	b141      	cbz	r1, 800e2c4 <__ascii_wctomb+0x18>
 800e2b2:	2aff      	cmp	r2, #255	@ 0xff
 800e2b4:	d904      	bls.n	800e2c0 <__ascii_wctomb+0x14>
 800e2b6:	228a      	movs	r2, #138	@ 0x8a
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e2be:	4770      	bx	lr
 800e2c0:	700a      	strb	r2, [r1, #0]
 800e2c2:	2001      	movs	r0, #1
 800e2c4:	4770      	bx	lr
	...

0800e2c8 <fiprintf>:
 800e2c8:	b40e      	push	{r1, r2, r3}
 800e2ca:	b503      	push	{r0, r1, lr}
 800e2cc:	4601      	mov	r1, r0
 800e2ce:	ab03      	add	r3, sp, #12
 800e2d0:	4805      	ldr	r0, [pc, #20]	@ (800e2e8 <fiprintf+0x20>)
 800e2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2d6:	6800      	ldr	r0, [r0, #0]
 800e2d8:	9301      	str	r3, [sp, #4]
 800e2da:	f000 f83f 	bl	800e35c <_vfiprintf_r>
 800e2de:	b002      	add	sp, #8
 800e2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2e4:	b003      	add	sp, #12
 800e2e6:	4770      	bx	lr
 800e2e8:	20000134 	.word	0x20000134

0800e2ec <abort>:
 800e2ec:	b508      	push	{r3, lr}
 800e2ee:	2006      	movs	r0, #6
 800e2f0:	f000 fa08 	bl	800e704 <raise>
 800e2f4:	2001      	movs	r0, #1
 800e2f6:	f7f5 f90d 	bl	8003514 <_exit>

0800e2fa <_malloc_usable_size_r>:
 800e2fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2fe:	1f18      	subs	r0, r3, #4
 800e300:	2b00      	cmp	r3, #0
 800e302:	bfbc      	itt	lt
 800e304:	580b      	ldrlt	r3, [r1, r0]
 800e306:	18c0      	addlt	r0, r0, r3
 800e308:	4770      	bx	lr

0800e30a <__sfputc_r>:
 800e30a:	6893      	ldr	r3, [r2, #8]
 800e30c:	3b01      	subs	r3, #1
 800e30e:	2b00      	cmp	r3, #0
 800e310:	b410      	push	{r4}
 800e312:	6093      	str	r3, [r2, #8]
 800e314:	da08      	bge.n	800e328 <__sfputc_r+0x1e>
 800e316:	6994      	ldr	r4, [r2, #24]
 800e318:	42a3      	cmp	r3, r4
 800e31a:	db01      	blt.n	800e320 <__sfputc_r+0x16>
 800e31c:	290a      	cmp	r1, #10
 800e31e:	d103      	bne.n	800e328 <__sfputc_r+0x1e>
 800e320:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e324:	f000 b932 	b.w	800e58c <__swbuf_r>
 800e328:	6813      	ldr	r3, [r2, #0]
 800e32a:	1c58      	adds	r0, r3, #1
 800e32c:	6010      	str	r0, [r2, #0]
 800e32e:	7019      	strb	r1, [r3, #0]
 800e330:	4608      	mov	r0, r1
 800e332:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <__sfputs_r>:
 800e338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33a:	4606      	mov	r6, r0
 800e33c:	460f      	mov	r7, r1
 800e33e:	4614      	mov	r4, r2
 800e340:	18d5      	adds	r5, r2, r3
 800e342:	42ac      	cmp	r4, r5
 800e344:	d101      	bne.n	800e34a <__sfputs_r+0x12>
 800e346:	2000      	movs	r0, #0
 800e348:	e007      	b.n	800e35a <__sfputs_r+0x22>
 800e34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e34e:	463a      	mov	r2, r7
 800e350:	4630      	mov	r0, r6
 800e352:	f7ff ffda 	bl	800e30a <__sfputc_r>
 800e356:	1c43      	adds	r3, r0, #1
 800e358:	d1f3      	bne.n	800e342 <__sfputs_r+0xa>
 800e35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e35c <_vfiprintf_r>:
 800e35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e360:	460d      	mov	r5, r1
 800e362:	b09d      	sub	sp, #116	@ 0x74
 800e364:	4614      	mov	r4, r2
 800e366:	4698      	mov	r8, r3
 800e368:	4606      	mov	r6, r0
 800e36a:	b118      	cbz	r0, 800e374 <_vfiprintf_r+0x18>
 800e36c:	6a03      	ldr	r3, [r0, #32]
 800e36e:	b90b      	cbnz	r3, 800e374 <_vfiprintf_r+0x18>
 800e370:	f7fe f8f4 	bl	800c55c <__sinit>
 800e374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e376:	07d9      	lsls	r1, r3, #31
 800e378:	d405      	bmi.n	800e386 <_vfiprintf_r+0x2a>
 800e37a:	89ab      	ldrh	r3, [r5, #12]
 800e37c:	059a      	lsls	r2, r3, #22
 800e37e:	d402      	bmi.n	800e386 <_vfiprintf_r+0x2a>
 800e380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e382:	f7fe fa02 	bl	800c78a <__retarget_lock_acquire_recursive>
 800e386:	89ab      	ldrh	r3, [r5, #12]
 800e388:	071b      	lsls	r3, r3, #28
 800e38a:	d501      	bpl.n	800e390 <_vfiprintf_r+0x34>
 800e38c:	692b      	ldr	r3, [r5, #16]
 800e38e:	b99b      	cbnz	r3, 800e3b8 <_vfiprintf_r+0x5c>
 800e390:	4629      	mov	r1, r5
 800e392:	4630      	mov	r0, r6
 800e394:	f000 f938 	bl	800e608 <__swsetup_r>
 800e398:	b170      	cbz	r0, 800e3b8 <_vfiprintf_r+0x5c>
 800e39a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e39c:	07dc      	lsls	r4, r3, #31
 800e39e:	d504      	bpl.n	800e3aa <_vfiprintf_r+0x4e>
 800e3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a4:	b01d      	add	sp, #116	@ 0x74
 800e3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3aa:	89ab      	ldrh	r3, [r5, #12]
 800e3ac:	0598      	lsls	r0, r3, #22
 800e3ae:	d4f7      	bmi.n	800e3a0 <_vfiprintf_r+0x44>
 800e3b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3b2:	f7fe f9eb 	bl	800c78c <__retarget_lock_release_recursive>
 800e3b6:	e7f3      	b.n	800e3a0 <_vfiprintf_r+0x44>
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3bc:	2320      	movs	r3, #32
 800e3be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3c6:	2330      	movs	r3, #48	@ 0x30
 800e3c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e578 <_vfiprintf_r+0x21c>
 800e3cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3d0:	f04f 0901 	mov.w	r9, #1
 800e3d4:	4623      	mov	r3, r4
 800e3d6:	469a      	mov	sl, r3
 800e3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3dc:	b10a      	cbz	r2, 800e3e2 <_vfiprintf_r+0x86>
 800e3de:	2a25      	cmp	r2, #37	@ 0x25
 800e3e0:	d1f9      	bne.n	800e3d6 <_vfiprintf_r+0x7a>
 800e3e2:	ebba 0b04 	subs.w	fp, sl, r4
 800e3e6:	d00b      	beq.n	800e400 <_vfiprintf_r+0xa4>
 800e3e8:	465b      	mov	r3, fp
 800e3ea:	4622      	mov	r2, r4
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	f7ff ffa2 	bl	800e338 <__sfputs_r>
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	f000 80a7 	beq.w	800e548 <_vfiprintf_r+0x1ec>
 800e3fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3fc:	445a      	add	r2, fp
 800e3fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800e400:	f89a 3000 	ldrb.w	r3, [sl]
 800e404:	2b00      	cmp	r3, #0
 800e406:	f000 809f 	beq.w	800e548 <_vfiprintf_r+0x1ec>
 800e40a:	2300      	movs	r3, #0
 800e40c:	f04f 32ff 	mov.w	r2, #4294967295
 800e410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e414:	f10a 0a01 	add.w	sl, sl, #1
 800e418:	9304      	str	r3, [sp, #16]
 800e41a:	9307      	str	r3, [sp, #28]
 800e41c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e420:	931a      	str	r3, [sp, #104]	@ 0x68
 800e422:	4654      	mov	r4, sl
 800e424:	2205      	movs	r2, #5
 800e426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e42a:	4853      	ldr	r0, [pc, #332]	@ (800e578 <_vfiprintf_r+0x21c>)
 800e42c:	f7f1 fed0 	bl	80001d0 <memchr>
 800e430:	9a04      	ldr	r2, [sp, #16]
 800e432:	b9d8      	cbnz	r0, 800e46c <_vfiprintf_r+0x110>
 800e434:	06d1      	lsls	r1, r2, #27
 800e436:	bf44      	itt	mi
 800e438:	2320      	movmi	r3, #32
 800e43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e43e:	0713      	lsls	r3, r2, #28
 800e440:	bf44      	itt	mi
 800e442:	232b      	movmi	r3, #43	@ 0x2b
 800e444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e448:	f89a 3000 	ldrb.w	r3, [sl]
 800e44c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e44e:	d015      	beq.n	800e47c <_vfiprintf_r+0x120>
 800e450:	9a07      	ldr	r2, [sp, #28]
 800e452:	4654      	mov	r4, sl
 800e454:	2000      	movs	r0, #0
 800e456:	f04f 0c0a 	mov.w	ip, #10
 800e45a:	4621      	mov	r1, r4
 800e45c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e460:	3b30      	subs	r3, #48	@ 0x30
 800e462:	2b09      	cmp	r3, #9
 800e464:	d94b      	bls.n	800e4fe <_vfiprintf_r+0x1a2>
 800e466:	b1b0      	cbz	r0, 800e496 <_vfiprintf_r+0x13a>
 800e468:	9207      	str	r2, [sp, #28]
 800e46a:	e014      	b.n	800e496 <_vfiprintf_r+0x13a>
 800e46c:	eba0 0308 	sub.w	r3, r0, r8
 800e470:	fa09 f303 	lsl.w	r3, r9, r3
 800e474:	4313      	orrs	r3, r2
 800e476:	9304      	str	r3, [sp, #16]
 800e478:	46a2      	mov	sl, r4
 800e47a:	e7d2      	b.n	800e422 <_vfiprintf_r+0xc6>
 800e47c:	9b03      	ldr	r3, [sp, #12]
 800e47e:	1d19      	adds	r1, r3, #4
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	9103      	str	r1, [sp, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	bfbb      	ittet	lt
 800e488:	425b      	neglt	r3, r3
 800e48a:	f042 0202 	orrlt.w	r2, r2, #2
 800e48e:	9307      	strge	r3, [sp, #28]
 800e490:	9307      	strlt	r3, [sp, #28]
 800e492:	bfb8      	it	lt
 800e494:	9204      	strlt	r2, [sp, #16]
 800e496:	7823      	ldrb	r3, [r4, #0]
 800e498:	2b2e      	cmp	r3, #46	@ 0x2e
 800e49a:	d10a      	bne.n	800e4b2 <_vfiprintf_r+0x156>
 800e49c:	7863      	ldrb	r3, [r4, #1]
 800e49e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4a0:	d132      	bne.n	800e508 <_vfiprintf_r+0x1ac>
 800e4a2:	9b03      	ldr	r3, [sp, #12]
 800e4a4:	1d1a      	adds	r2, r3, #4
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	9203      	str	r2, [sp, #12]
 800e4aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4ae:	3402      	adds	r4, #2
 800e4b0:	9305      	str	r3, [sp, #20]
 800e4b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e588 <_vfiprintf_r+0x22c>
 800e4b6:	7821      	ldrb	r1, [r4, #0]
 800e4b8:	2203      	movs	r2, #3
 800e4ba:	4650      	mov	r0, sl
 800e4bc:	f7f1 fe88 	bl	80001d0 <memchr>
 800e4c0:	b138      	cbz	r0, 800e4d2 <_vfiprintf_r+0x176>
 800e4c2:	9b04      	ldr	r3, [sp, #16]
 800e4c4:	eba0 000a 	sub.w	r0, r0, sl
 800e4c8:	2240      	movs	r2, #64	@ 0x40
 800e4ca:	4082      	lsls	r2, r0
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	3401      	adds	r4, #1
 800e4d0:	9304      	str	r3, [sp, #16]
 800e4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d6:	4829      	ldr	r0, [pc, #164]	@ (800e57c <_vfiprintf_r+0x220>)
 800e4d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4dc:	2206      	movs	r2, #6
 800e4de:	f7f1 fe77 	bl	80001d0 <memchr>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d03f      	beq.n	800e566 <_vfiprintf_r+0x20a>
 800e4e6:	4b26      	ldr	r3, [pc, #152]	@ (800e580 <_vfiprintf_r+0x224>)
 800e4e8:	bb1b      	cbnz	r3, 800e532 <_vfiprintf_r+0x1d6>
 800e4ea:	9b03      	ldr	r3, [sp, #12]
 800e4ec:	3307      	adds	r3, #7
 800e4ee:	f023 0307 	bic.w	r3, r3, #7
 800e4f2:	3308      	adds	r3, #8
 800e4f4:	9303      	str	r3, [sp, #12]
 800e4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4f8:	443b      	add	r3, r7
 800e4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4fc:	e76a      	b.n	800e3d4 <_vfiprintf_r+0x78>
 800e4fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800e502:	460c      	mov	r4, r1
 800e504:	2001      	movs	r0, #1
 800e506:	e7a8      	b.n	800e45a <_vfiprintf_r+0xfe>
 800e508:	2300      	movs	r3, #0
 800e50a:	3401      	adds	r4, #1
 800e50c:	9305      	str	r3, [sp, #20]
 800e50e:	4619      	mov	r1, r3
 800e510:	f04f 0c0a 	mov.w	ip, #10
 800e514:	4620      	mov	r0, r4
 800e516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e51a:	3a30      	subs	r2, #48	@ 0x30
 800e51c:	2a09      	cmp	r2, #9
 800e51e:	d903      	bls.n	800e528 <_vfiprintf_r+0x1cc>
 800e520:	2b00      	cmp	r3, #0
 800e522:	d0c6      	beq.n	800e4b2 <_vfiprintf_r+0x156>
 800e524:	9105      	str	r1, [sp, #20]
 800e526:	e7c4      	b.n	800e4b2 <_vfiprintf_r+0x156>
 800e528:	fb0c 2101 	mla	r1, ip, r1, r2
 800e52c:	4604      	mov	r4, r0
 800e52e:	2301      	movs	r3, #1
 800e530:	e7f0      	b.n	800e514 <_vfiprintf_r+0x1b8>
 800e532:	ab03      	add	r3, sp, #12
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	462a      	mov	r2, r5
 800e538:	4b12      	ldr	r3, [pc, #72]	@ (800e584 <_vfiprintf_r+0x228>)
 800e53a:	a904      	add	r1, sp, #16
 800e53c:	4630      	mov	r0, r6
 800e53e:	f7fd fbc9 	bl	800bcd4 <_printf_float>
 800e542:	4607      	mov	r7, r0
 800e544:	1c78      	adds	r0, r7, #1
 800e546:	d1d6      	bne.n	800e4f6 <_vfiprintf_r+0x19a>
 800e548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e54a:	07d9      	lsls	r1, r3, #31
 800e54c:	d405      	bmi.n	800e55a <_vfiprintf_r+0x1fe>
 800e54e:	89ab      	ldrh	r3, [r5, #12]
 800e550:	059a      	lsls	r2, r3, #22
 800e552:	d402      	bmi.n	800e55a <_vfiprintf_r+0x1fe>
 800e554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e556:	f7fe f919 	bl	800c78c <__retarget_lock_release_recursive>
 800e55a:	89ab      	ldrh	r3, [r5, #12]
 800e55c:	065b      	lsls	r3, r3, #25
 800e55e:	f53f af1f 	bmi.w	800e3a0 <_vfiprintf_r+0x44>
 800e562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e564:	e71e      	b.n	800e3a4 <_vfiprintf_r+0x48>
 800e566:	ab03      	add	r3, sp, #12
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	462a      	mov	r2, r5
 800e56c:	4b05      	ldr	r3, [pc, #20]	@ (800e584 <_vfiprintf_r+0x228>)
 800e56e:	a904      	add	r1, sp, #16
 800e570:	4630      	mov	r0, r6
 800e572:	f7fd fe47 	bl	800c204 <_printf_i>
 800e576:	e7e4      	b.n	800e542 <_vfiprintf_r+0x1e6>
 800e578:	080110f8 	.word	0x080110f8
 800e57c:	08011102 	.word	0x08011102
 800e580:	0800bcd5 	.word	0x0800bcd5
 800e584:	0800e339 	.word	0x0800e339
 800e588:	080110fe 	.word	0x080110fe

0800e58c <__swbuf_r>:
 800e58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58e:	460e      	mov	r6, r1
 800e590:	4614      	mov	r4, r2
 800e592:	4605      	mov	r5, r0
 800e594:	b118      	cbz	r0, 800e59e <__swbuf_r+0x12>
 800e596:	6a03      	ldr	r3, [r0, #32]
 800e598:	b90b      	cbnz	r3, 800e59e <__swbuf_r+0x12>
 800e59a:	f7fd ffdf 	bl	800c55c <__sinit>
 800e59e:	69a3      	ldr	r3, [r4, #24]
 800e5a0:	60a3      	str	r3, [r4, #8]
 800e5a2:	89a3      	ldrh	r3, [r4, #12]
 800e5a4:	071a      	lsls	r2, r3, #28
 800e5a6:	d501      	bpl.n	800e5ac <__swbuf_r+0x20>
 800e5a8:	6923      	ldr	r3, [r4, #16]
 800e5aa:	b943      	cbnz	r3, 800e5be <__swbuf_r+0x32>
 800e5ac:	4621      	mov	r1, r4
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	f000 f82a 	bl	800e608 <__swsetup_r>
 800e5b4:	b118      	cbz	r0, 800e5be <__swbuf_r+0x32>
 800e5b6:	f04f 37ff 	mov.w	r7, #4294967295
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	6922      	ldr	r2, [r4, #16]
 800e5c2:	1a98      	subs	r0, r3, r2
 800e5c4:	6963      	ldr	r3, [r4, #20]
 800e5c6:	b2f6      	uxtb	r6, r6
 800e5c8:	4283      	cmp	r3, r0
 800e5ca:	4637      	mov	r7, r6
 800e5cc:	dc05      	bgt.n	800e5da <__swbuf_r+0x4e>
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	f7ff fda7 	bl	800e124 <_fflush_r>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	d1ed      	bne.n	800e5b6 <__swbuf_r+0x2a>
 800e5da:	68a3      	ldr	r3, [r4, #8]
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	60a3      	str	r3, [r4, #8]
 800e5e0:	6823      	ldr	r3, [r4, #0]
 800e5e2:	1c5a      	adds	r2, r3, #1
 800e5e4:	6022      	str	r2, [r4, #0]
 800e5e6:	701e      	strb	r6, [r3, #0]
 800e5e8:	6962      	ldr	r2, [r4, #20]
 800e5ea:	1c43      	adds	r3, r0, #1
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d004      	beq.n	800e5fa <__swbuf_r+0x6e>
 800e5f0:	89a3      	ldrh	r3, [r4, #12]
 800e5f2:	07db      	lsls	r3, r3, #31
 800e5f4:	d5e1      	bpl.n	800e5ba <__swbuf_r+0x2e>
 800e5f6:	2e0a      	cmp	r6, #10
 800e5f8:	d1df      	bne.n	800e5ba <__swbuf_r+0x2e>
 800e5fa:	4621      	mov	r1, r4
 800e5fc:	4628      	mov	r0, r5
 800e5fe:	f7ff fd91 	bl	800e124 <_fflush_r>
 800e602:	2800      	cmp	r0, #0
 800e604:	d0d9      	beq.n	800e5ba <__swbuf_r+0x2e>
 800e606:	e7d6      	b.n	800e5b6 <__swbuf_r+0x2a>

0800e608 <__swsetup_r>:
 800e608:	b538      	push	{r3, r4, r5, lr}
 800e60a:	4b29      	ldr	r3, [pc, #164]	@ (800e6b0 <__swsetup_r+0xa8>)
 800e60c:	4605      	mov	r5, r0
 800e60e:	6818      	ldr	r0, [r3, #0]
 800e610:	460c      	mov	r4, r1
 800e612:	b118      	cbz	r0, 800e61c <__swsetup_r+0x14>
 800e614:	6a03      	ldr	r3, [r0, #32]
 800e616:	b90b      	cbnz	r3, 800e61c <__swsetup_r+0x14>
 800e618:	f7fd ffa0 	bl	800c55c <__sinit>
 800e61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e620:	0719      	lsls	r1, r3, #28
 800e622:	d422      	bmi.n	800e66a <__swsetup_r+0x62>
 800e624:	06da      	lsls	r2, r3, #27
 800e626:	d407      	bmi.n	800e638 <__swsetup_r+0x30>
 800e628:	2209      	movs	r2, #9
 800e62a:	602a      	str	r2, [r5, #0]
 800e62c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e630:	81a3      	strh	r3, [r4, #12]
 800e632:	f04f 30ff 	mov.w	r0, #4294967295
 800e636:	e033      	b.n	800e6a0 <__swsetup_r+0x98>
 800e638:	0758      	lsls	r0, r3, #29
 800e63a:	d512      	bpl.n	800e662 <__swsetup_r+0x5a>
 800e63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e63e:	b141      	cbz	r1, 800e652 <__swsetup_r+0x4a>
 800e640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e644:	4299      	cmp	r1, r3
 800e646:	d002      	beq.n	800e64e <__swsetup_r+0x46>
 800e648:	4628      	mov	r0, r5
 800e64a:	f7fe ff0d 	bl	800d468 <_free_r>
 800e64e:	2300      	movs	r3, #0
 800e650:	6363      	str	r3, [r4, #52]	@ 0x34
 800e652:	89a3      	ldrh	r3, [r4, #12]
 800e654:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e658:	81a3      	strh	r3, [r4, #12]
 800e65a:	2300      	movs	r3, #0
 800e65c:	6063      	str	r3, [r4, #4]
 800e65e:	6923      	ldr	r3, [r4, #16]
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	89a3      	ldrh	r3, [r4, #12]
 800e664:	f043 0308 	orr.w	r3, r3, #8
 800e668:	81a3      	strh	r3, [r4, #12]
 800e66a:	6923      	ldr	r3, [r4, #16]
 800e66c:	b94b      	cbnz	r3, 800e682 <__swsetup_r+0x7a>
 800e66e:	89a3      	ldrh	r3, [r4, #12]
 800e670:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e678:	d003      	beq.n	800e682 <__swsetup_r+0x7a>
 800e67a:	4621      	mov	r1, r4
 800e67c:	4628      	mov	r0, r5
 800e67e:	f000 f883 	bl	800e788 <__smakebuf_r>
 800e682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e686:	f013 0201 	ands.w	r2, r3, #1
 800e68a:	d00a      	beq.n	800e6a2 <__swsetup_r+0x9a>
 800e68c:	2200      	movs	r2, #0
 800e68e:	60a2      	str	r2, [r4, #8]
 800e690:	6962      	ldr	r2, [r4, #20]
 800e692:	4252      	negs	r2, r2
 800e694:	61a2      	str	r2, [r4, #24]
 800e696:	6922      	ldr	r2, [r4, #16]
 800e698:	b942      	cbnz	r2, 800e6ac <__swsetup_r+0xa4>
 800e69a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e69e:	d1c5      	bne.n	800e62c <__swsetup_r+0x24>
 800e6a0:	bd38      	pop	{r3, r4, r5, pc}
 800e6a2:	0799      	lsls	r1, r3, #30
 800e6a4:	bf58      	it	pl
 800e6a6:	6962      	ldrpl	r2, [r4, #20]
 800e6a8:	60a2      	str	r2, [r4, #8]
 800e6aa:	e7f4      	b.n	800e696 <__swsetup_r+0x8e>
 800e6ac:	2000      	movs	r0, #0
 800e6ae:	e7f7      	b.n	800e6a0 <__swsetup_r+0x98>
 800e6b0:	20000134 	.word	0x20000134

0800e6b4 <_raise_r>:
 800e6b4:	291f      	cmp	r1, #31
 800e6b6:	b538      	push	{r3, r4, r5, lr}
 800e6b8:	4605      	mov	r5, r0
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	d904      	bls.n	800e6c8 <_raise_r+0x14>
 800e6be:	2316      	movs	r3, #22
 800e6c0:	6003      	str	r3, [r0, #0]
 800e6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c6:	bd38      	pop	{r3, r4, r5, pc}
 800e6c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6ca:	b112      	cbz	r2, 800e6d2 <_raise_r+0x1e>
 800e6cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6d0:	b94b      	cbnz	r3, 800e6e6 <_raise_r+0x32>
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	f000 f830 	bl	800e738 <_getpid_r>
 800e6d8:	4622      	mov	r2, r4
 800e6da:	4601      	mov	r1, r0
 800e6dc:	4628      	mov	r0, r5
 800e6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e2:	f000 b817 	b.w	800e714 <_kill_r>
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d00a      	beq.n	800e700 <_raise_r+0x4c>
 800e6ea:	1c59      	adds	r1, r3, #1
 800e6ec:	d103      	bne.n	800e6f6 <_raise_r+0x42>
 800e6ee:	2316      	movs	r3, #22
 800e6f0:	6003      	str	r3, [r0, #0]
 800e6f2:	2001      	movs	r0, #1
 800e6f4:	e7e7      	b.n	800e6c6 <_raise_r+0x12>
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	4798      	blx	r3
 800e700:	2000      	movs	r0, #0
 800e702:	e7e0      	b.n	800e6c6 <_raise_r+0x12>

0800e704 <raise>:
 800e704:	4b02      	ldr	r3, [pc, #8]	@ (800e710 <raise+0xc>)
 800e706:	4601      	mov	r1, r0
 800e708:	6818      	ldr	r0, [r3, #0]
 800e70a:	f7ff bfd3 	b.w	800e6b4 <_raise_r>
 800e70e:	bf00      	nop
 800e710:	20000134 	.word	0x20000134

0800e714 <_kill_r>:
 800e714:	b538      	push	{r3, r4, r5, lr}
 800e716:	4d07      	ldr	r5, [pc, #28]	@ (800e734 <_kill_r+0x20>)
 800e718:	2300      	movs	r3, #0
 800e71a:	4604      	mov	r4, r0
 800e71c:	4608      	mov	r0, r1
 800e71e:	4611      	mov	r1, r2
 800e720:	602b      	str	r3, [r5, #0]
 800e722:	f7f4 fee7 	bl	80034f4 <_kill>
 800e726:	1c43      	adds	r3, r0, #1
 800e728:	d102      	bne.n	800e730 <_kill_r+0x1c>
 800e72a:	682b      	ldr	r3, [r5, #0]
 800e72c:	b103      	cbz	r3, 800e730 <_kill_r+0x1c>
 800e72e:	6023      	str	r3, [r4, #0]
 800e730:	bd38      	pop	{r3, r4, r5, pc}
 800e732:	bf00      	nop
 800e734:	20002330 	.word	0x20002330

0800e738 <_getpid_r>:
 800e738:	f7f4 bed4 	b.w	80034e4 <_getpid>

0800e73c <__swhatbuf_r>:
 800e73c:	b570      	push	{r4, r5, r6, lr}
 800e73e:	460c      	mov	r4, r1
 800e740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e744:	2900      	cmp	r1, #0
 800e746:	b096      	sub	sp, #88	@ 0x58
 800e748:	4615      	mov	r5, r2
 800e74a:	461e      	mov	r6, r3
 800e74c:	da0d      	bge.n	800e76a <__swhatbuf_r+0x2e>
 800e74e:	89a3      	ldrh	r3, [r4, #12]
 800e750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e754:	f04f 0100 	mov.w	r1, #0
 800e758:	bf14      	ite	ne
 800e75a:	2340      	movne	r3, #64	@ 0x40
 800e75c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e760:	2000      	movs	r0, #0
 800e762:	6031      	str	r1, [r6, #0]
 800e764:	602b      	str	r3, [r5, #0]
 800e766:	b016      	add	sp, #88	@ 0x58
 800e768:	bd70      	pop	{r4, r5, r6, pc}
 800e76a:	466a      	mov	r2, sp
 800e76c:	f000 f848 	bl	800e800 <_fstat_r>
 800e770:	2800      	cmp	r0, #0
 800e772:	dbec      	blt.n	800e74e <__swhatbuf_r+0x12>
 800e774:	9901      	ldr	r1, [sp, #4]
 800e776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e77a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e77e:	4259      	negs	r1, r3
 800e780:	4159      	adcs	r1, r3
 800e782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e786:	e7eb      	b.n	800e760 <__swhatbuf_r+0x24>

0800e788 <__smakebuf_r>:
 800e788:	898b      	ldrh	r3, [r1, #12]
 800e78a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e78c:	079d      	lsls	r5, r3, #30
 800e78e:	4606      	mov	r6, r0
 800e790:	460c      	mov	r4, r1
 800e792:	d507      	bpl.n	800e7a4 <__smakebuf_r+0x1c>
 800e794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	6123      	str	r3, [r4, #16]
 800e79c:	2301      	movs	r3, #1
 800e79e:	6163      	str	r3, [r4, #20]
 800e7a0:	b003      	add	sp, #12
 800e7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7a4:	ab01      	add	r3, sp, #4
 800e7a6:	466a      	mov	r2, sp
 800e7a8:	f7ff ffc8 	bl	800e73c <__swhatbuf_r>
 800e7ac:	9f00      	ldr	r7, [sp, #0]
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	4639      	mov	r1, r7
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f7fe fecc 	bl	800d550 <_malloc_r>
 800e7b8:	b948      	cbnz	r0, 800e7ce <__smakebuf_r+0x46>
 800e7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7be:	059a      	lsls	r2, r3, #22
 800e7c0:	d4ee      	bmi.n	800e7a0 <__smakebuf_r+0x18>
 800e7c2:	f023 0303 	bic.w	r3, r3, #3
 800e7c6:	f043 0302 	orr.w	r3, r3, #2
 800e7ca:	81a3      	strh	r3, [r4, #12]
 800e7cc:	e7e2      	b.n	800e794 <__smakebuf_r+0xc>
 800e7ce:	89a3      	ldrh	r3, [r4, #12]
 800e7d0:	6020      	str	r0, [r4, #0]
 800e7d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7d6:	81a3      	strh	r3, [r4, #12]
 800e7d8:	9b01      	ldr	r3, [sp, #4]
 800e7da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e7de:	b15b      	cbz	r3, 800e7f8 <__smakebuf_r+0x70>
 800e7e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f000 f81d 	bl	800e824 <_isatty_r>
 800e7ea:	b128      	cbz	r0, 800e7f8 <__smakebuf_r+0x70>
 800e7ec:	89a3      	ldrh	r3, [r4, #12]
 800e7ee:	f023 0303 	bic.w	r3, r3, #3
 800e7f2:	f043 0301 	orr.w	r3, r3, #1
 800e7f6:	81a3      	strh	r3, [r4, #12]
 800e7f8:	89a3      	ldrh	r3, [r4, #12]
 800e7fa:	431d      	orrs	r5, r3
 800e7fc:	81a5      	strh	r5, [r4, #12]
 800e7fe:	e7cf      	b.n	800e7a0 <__smakebuf_r+0x18>

0800e800 <_fstat_r>:
 800e800:	b538      	push	{r3, r4, r5, lr}
 800e802:	4d07      	ldr	r5, [pc, #28]	@ (800e820 <_fstat_r+0x20>)
 800e804:	2300      	movs	r3, #0
 800e806:	4604      	mov	r4, r0
 800e808:	4608      	mov	r0, r1
 800e80a:	4611      	mov	r1, r2
 800e80c:	602b      	str	r3, [r5, #0]
 800e80e:	f7f4 fed1 	bl	80035b4 <_fstat>
 800e812:	1c43      	adds	r3, r0, #1
 800e814:	d102      	bne.n	800e81c <_fstat_r+0x1c>
 800e816:	682b      	ldr	r3, [r5, #0]
 800e818:	b103      	cbz	r3, 800e81c <_fstat_r+0x1c>
 800e81a:	6023      	str	r3, [r4, #0]
 800e81c:	bd38      	pop	{r3, r4, r5, pc}
 800e81e:	bf00      	nop
 800e820:	20002330 	.word	0x20002330

0800e824 <_isatty_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	4d06      	ldr	r5, [pc, #24]	@ (800e840 <_isatty_r+0x1c>)
 800e828:	2300      	movs	r3, #0
 800e82a:	4604      	mov	r4, r0
 800e82c:	4608      	mov	r0, r1
 800e82e:	602b      	str	r3, [r5, #0]
 800e830:	f7f4 fed0 	bl	80035d4 <_isatty>
 800e834:	1c43      	adds	r3, r0, #1
 800e836:	d102      	bne.n	800e83e <_isatty_r+0x1a>
 800e838:	682b      	ldr	r3, [r5, #0]
 800e83a:	b103      	cbz	r3, 800e83e <_isatty_r+0x1a>
 800e83c:	6023      	str	r3, [r4, #0]
 800e83e:	bd38      	pop	{r3, r4, r5, pc}
 800e840:	20002330 	.word	0x20002330

0800e844 <asin>:
 800e844:	b538      	push	{r3, r4, r5, lr}
 800e846:	ed2d 8b02 	vpush	{d8}
 800e84a:	ec55 4b10 	vmov	r4, r5, d0
 800e84e:	f000 fa93 	bl	800ed78 <__ieee754_asin>
 800e852:	4622      	mov	r2, r4
 800e854:	462b      	mov	r3, r5
 800e856:	4620      	mov	r0, r4
 800e858:	4629      	mov	r1, r5
 800e85a:	eeb0 8a40 	vmov.f32	s16, s0
 800e85e:	eef0 8a60 	vmov.f32	s17, s1
 800e862:	f7f2 f963 	bl	8000b2c <__aeabi_dcmpun>
 800e866:	b9a8      	cbnz	r0, 800e894 <asin+0x50>
 800e868:	ec45 4b10 	vmov	d0, r4, r5
 800e86c:	f000 f8bc 	bl	800e9e8 <fabs>
 800e870:	4b0c      	ldr	r3, [pc, #48]	@ (800e8a4 <asin+0x60>)
 800e872:	ec51 0b10 	vmov	r0, r1, d0
 800e876:	2200      	movs	r2, #0
 800e878:	f7f2 f94e 	bl	8000b18 <__aeabi_dcmpgt>
 800e87c:	b150      	cbz	r0, 800e894 <asin+0x50>
 800e87e:	f7fd ff59 	bl	800c734 <__errno>
 800e882:	ecbd 8b02 	vpop	{d8}
 800e886:	2321      	movs	r3, #33	@ 0x21
 800e888:	6003      	str	r3, [r0, #0]
 800e88a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e88e:	4806      	ldr	r0, [pc, #24]	@ (800e8a8 <asin+0x64>)
 800e890:	f000 b986 	b.w	800eba0 <nan>
 800e894:	eeb0 0a48 	vmov.f32	s0, s16
 800e898:	eef0 0a68 	vmov.f32	s1, s17
 800e89c:	ecbd 8b02 	vpop	{d8}
 800e8a0:	bd38      	pop	{r3, r4, r5, pc}
 800e8a2:	bf00      	nop
 800e8a4:	3ff00000 	.word	0x3ff00000
 800e8a8:	0801114e 	.word	0x0801114e

0800e8ac <atan2>:
 800e8ac:	f000 bc68 	b.w	800f180 <__ieee754_atan2>

0800e8b0 <pow>:
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b2:	ed2d 8b02 	vpush	{d8}
 800e8b6:	eeb0 8a40 	vmov.f32	s16, s0
 800e8ba:	eef0 8a60 	vmov.f32	s17, s1
 800e8be:	ec55 4b11 	vmov	r4, r5, d1
 800e8c2:	f000 fd25 	bl	800f310 <__ieee754_pow>
 800e8c6:	4622      	mov	r2, r4
 800e8c8:	462b      	mov	r3, r5
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	ec57 6b10 	vmov	r6, r7, d0
 800e8d2:	f7f2 f92b 	bl	8000b2c <__aeabi_dcmpun>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d13b      	bne.n	800e952 <pow+0xa2>
 800e8da:	ec51 0b18 	vmov	r0, r1, d8
 800e8de:	2200      	movs	r2, #0
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	f7f2 f8f1 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8e6:	b1b8      	cbz	r0, 800e918 <pow+0x68>
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	f7f2 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d146      	bne.n	800e986 <pow+0xd6>
 800e8f8:	ec45 4b10 	vmov	d0, r4, r5
 800e8fc:	f000 f944 	bl	800eb88 <finite>
 800e900:	b338      	cbz	r0, 800e952 <pow+0xa2>
 800e902:	2200      	movs	r2, #0
 800e904:	2300      	movs	r3, #0
 800e906:	4620      	mov	r0, r4
 800e908:	4629      	mov	r1, r5
 800e90a:	f7f2 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800e90e:	b300      	cbz	r0, 800e952 <pow+0xa2>
 800e910:	f7fd ff10 	bl	800c734 <__errno>
 800e914:	2322      	movs	r3, #34	@ 0x22
 800e916:	e01b      	b.n	800e950 <pow+0xa0>
 800e918:	ec47 6b10 	vmov	d0, r6, r7
 800e91c:	f000 f934 	bl	800eb88 <finite>
 800e920:	b9e0      	cbnz	r0, 800e95c <pow+0xac>
 800e922:	eeb0 0a48 	vmov.f32	s0, s16
 800e926:	eef0 0a68 	vmov.f32	s1, s17
 800e92a:	f000 f92d 	bl	800eb88 <finite>
 800e92e:	b1a8      	cbz	r0, 800e95c <pow+0xac>
 800e930:	ec45 4b10 	vmov	d0, r4, r5
 800e934:	f000 f928 	bl	800eb88 <finite>
 800e938:	b180      	cbz	r0, 800e95c <pow+0xac>
 800e93a:	4632      	mov	r2, r6
 800e93c:	463b      	mov	r3, r7
 800e93e:	4630      	mov	r0, r6
 800e940:	4639      	mov	r1, r7
 800e942:	f7f2 f8f3 	bl	8000b2c <__aeabi_dcmpun>
 800e946:	2800      	cmp	r0, #0
 800e948:	d0e2      	beq.n	800e910 <pow+0x60>
 800e94a:	f7fd fef3 	bl	800c734 <__errno>
 800e94e:	2321      	movs	r3, #33	@ 0x21
 800e950:	6003      	str	r3, [r0, #0]
 800e952:	ecbd 8b02 	vpop	{d8}
 800e956:	ec47 6b10 	vmov	d0, r6, r7
 800e95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e95c:	2200      	movs	r2, #0
 800e95e:	2300      	movs	r3, #0
 800e960:	4630      	mov	r0, r6
 800e962:	4639      	mov	r1, r7
 800e964:	f7f2 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e968:	2800      	cmp	r0, #0
 800e96a:	d0f2      	beq.n	800e952 <pow+0xa2>
 800e96c:	eeb0 0a48 	vmov.f32	s0, s16
 800e970:	eef0 0a68 	vmov.f32	s1, s17
 800e974:	f000 f908 	bl	800eb88 <finite>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d0ea      	beq.n	800e952 <pow+0xa2>
 800e97c:	ec45 4b10 	vmov	d0, r4, r5
 800e980:	f000 f902 	bl	800eb88 <finite>
 800e984:	e7c3      	b.n	800e90e <pow+0x5e>
 800e986:	4f01      	ldr	r7, [pc, #4]	@ (800e98c <pow+0xdc>)
 800e988:	2600      	movs	r6, #0
 800e98a:	e7e2      	b.n	800e952 <pow+0xa2>
 800e98c:	3ff00000 	.word	0x3ff00000

0800e990 <sqrt>:
 800e990:	b538      	push	{r3, r4, r5, lr}
 800e992:	ed2d 8b02 	vpush	{d8}
 800e996:	ec55 4b10 	vmov	r4, r5, d0
 800e99a:	f000 f913 	bl	800ebc4 <__ieee754_sqrt>
 800e99e:	4622      	mov	r2, r4
 800e9a0:	462b      	mov	r3, r5
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	4629      	mov	r1, r5
 800e9a6:	eeb0 8a40 	vmov.f32	s16, s0
 800e9aa:	eef0 8a60 	vmov.f32	s17, s1
 800e9ae:	f7f2 f8bd 	bl	8000b2c <__aeabi_dcmpun>
 800e9b2:	b990      	cbnz	r0, 800e9da <sqrt+0x4a>
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	f7f2 f88e 	bl	8000adc <__aeabi_dcmplt>
 800e9c0:	b158      	cbz	r0, 800e9da <sqrt+0x4a>
 800e9c2:	f7fd feb7 	bl	800c734 <__errno>
 800e9c6:	2321      	movs	r3, #33	@ 0x21
 800e9c8:	6003      	str	r3, [r0, #0]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	4610      	mov	r0, r2
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	f7f1 ff3b 	bl	800084c <__aeabi_ddiv>
 800e9d6:	ec41 0b18 	vmov	d8, r0, r1
 800e9da:	eeb0 0a48 	vmov.f32	s0, s16
 800e9de:	eef0 0a68 	vmov.f32	s1, s17
 800e9e2:	ecbd 8b02 	vpop	{d8}
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}

0800e9e8 <fabs>:
 800e9e8:	ec51 0b10 	vmov	r0, r1, d0
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e9f2:	ec43 2b10 	vmov	d0, r2, r3
 800e9f6:	4770      	bx	lr

0800e9f8 <expf>:
 800e9f8:	b508      	push	{r3, lr}
 800e9fa:	ed2d 8b02 	vpush	{d8}
 800e9fe:	eef0 8a40 	vmov.f32	s17, s0
 800ea02:	f001 fc01 	bl	8010208 <__ieee754_expf>
 800ea06:	eeb0 8a40 	vmov.f32	s16, s0
 800ea0a:	eeb0 0a68 	vmov.f32	s0, s17
 800ea0e:	f000 f8cf 	bl	800ebb0 <finitef>
 800ea12:	b160      	cbz	r0, 800ea2e <expf+0x36>
 800ea14:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800ea54 <expf+0x5c>
 800ea18:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ea1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea20:	dd0a      	ble.n	800ea38 <expf+0x40>
 800ea22:	f7fd fe87 	bl	800c734 <__errno>
 800ea26:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800ea58 <expf+0x60>
 800ea2a:	2322      	movs	r3, #34	@ 0x22
 800ea2c:	6003      	str	r3, [r0, #0]
 800ea2e:	eeb0 0a48 	vmov.f32	s0, s16
 800ea32:	ecbd 8b02 	vpop	{d8}
 800ea36:	bd08      	pop	{r3, pc}
 800ea38:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ea5c <expf+0x64>
 800ea3c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ea40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea44:	d5f3      	bpl.n	800ea2e <expf+0x36>
 800ea46:	f7fd fe75 	bl	800c734 <__errno>
 800ea4a:	2322      	movs	r3, #34	@ 0x22
 800ea4c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800ea60 <expf+0x68>
 800ea50:	6003      	str	r3, [r0, #0]
 800ea52:	e7ec      	b.n	800ea2e <expf+0x36>
 800ea54:	42b17217 	.word	0x42b17217
 800ea58:	7f800000 	.word	0x7f800000
 800ea5c:	c2cff1b5 	.word	0xc2cff1b5
 800ea60:	00000000 	.word	0x00000000

0800ea64 <cosf>:
 800ea64:	ee10 3a10 	vmov	r3, s0
 800ea68:	b507      	push	{r0, r1, r2, lr}
 800ea6a:	4a1e      	ldr	r2, [pc, #120]	@ (800eae4 <cosf+0x80>)
 800ea6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d806      	bhi.n	800ea82 <cosf+0x1e>
 800ea74:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800eae8 <cosf+0x84>
 800ea78:	b003      	add	sp, #12
 800ea7a:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea7e:	f001 bb23 	b.w	80100c8 <__kernel_cosf>
 800ea82:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ea86:	d304      	bcc.n	800ea92 <cosf+0x2e>
 800ea88:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ea8c:	b003      	add	sp, #12
 800ea8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea92:	4668      	mov	r0, sp
 800ea94:	f001 fc86 	bl	80103a4 <__ieee754_rem_pio2f>
 800ea98:	f000 0003 	and.w	r0, r0, #3
 800ea9c:	2801      	cmp	r0, #1
 800ea9e:	d009      	beq.n	800eab4 <cosf+0x50>
 800eaa0:	2802      	cmp	r0, #2
 800eaa2:	d010      	beq.n	800eac6 <cosf+0x62>
 800eaa4:	b9b0      	cbnz	r0, 800ead4 <cosf+0x70>
 800eaa6:	eddd 0a01 	vldr	s1, [sp, #4]
 800eaaa:	ed9d 0a00 	vldr	s0, [sp]
 800eaae:	f001 fb0b 	bl	80100c8 <__kernel_cosf>
 800eab2:	e7eb      	b.n	800ea8c <cosf+0x28>
 800eab4:	eddd 0a01 	vldr	s1, [sp, #4]
 800eab8:	ed9d 0a00 	vldr	s0, [sp]
 800eabc:	f001 fb5c 	bl	8010178 <__kernel_sinf>
 800eac0:	eeb1 0a40 	vneg.f32	s0, s0
 800eac4:	e7e2      	b.n	800ea8c <cosf+0x28>
 800eac6:	eddd 0a01 	vldr	s1, [sp, #4]
 800eaca:	ed9d 0a00 	vldr	s0, [sp]
 800eace:	f001 fafb 	bl	80100c8 <__kernel_cosf>
 800ead2:	e7f5      	b.n	800eac0 <cosf+0x5c>
 800ead4:	eddd 0a01 	vldr	s1, [sp, #4]
 800ead8:	ed9d 0a00 	vldr	s0, [sp]
 800eadc:	2001      	movs	r0, #1
 800eade:	f001 fb4b 	bl	8010178 <__kernel_sinf>
 800eae2:	e7d3      	b.n	800ea8c <cosf+0x28>
 800eae4:	3f490fd8 	.word	0x3f490fd8
 800eae8:	00000000 	.word	0x00000000

0800eaec <fabsf>:
 800eaec:	ee10 3a10 	vmov	r3, s0
 800eaf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eaf4:	ee00 3a10 	vmov	s0, r3
 800eaf8:	4770      	bx	lr
	...

0800eafc <sinf>:
 800eafc:	ee10 3a10 	vmov	r3, s0
 800eb00:	b507      	push	{r0, r1, r2, lr}
 800eb02:	4a1f      	ldr	r2, [pc, #124]	@ (800eb80 <sinf+0x84>)
 800eb04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d807      	bhi.n	800eb1c <sinf+0x20>
 800eb0c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800eb84 <sinf+0x88>
 800eb10:	2000      	movs	r0, #0
 800eb12:	b003      	add	sp, #12
 800eb14:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb18:	f001 bb2e 	b.w	8010178 <__kernel_sinf>
 800eb1c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eb20:	d304      	bcc.n	800eb2c <sinf+0x30>
 800eb22:	ee30 0a40 	vsub.f32	s0, s0, s0
 800eb26:	b003      	add	sp, #12
 800eb28:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb2c:	4668      	mov	r0, sp
 800eb2e:	f001 fc39 	bl	80103a4 <__ieee754_rem_pio2f>
 800eb32:	f000 0003 	and.w	r0, r0, #3
 800eb36:	2801      	cmp	r0, #1
 800eb38:	d00a      	beq.n	800eb50 <sinf+0x54>
 800eb3a:	2802      	cmp	r0, #2
 800eb3c:	d00f      	beq.n	800eb5e <sinf+0x62>
 800eb3e:	b9c0      	cbnz	r0, 800eb72 <sinf+0x76>
 800eb40:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb44:	ed9d 0a00 	vldr	s0, [sp]
 800eb48:	2001      	movs	r0, #1
 800eb4a:	f001 fb15 	bl	8010178 <__kernel_sinf>
 800eb4e:	e7ea      	b.n	800eb26 <sinf+0x2a>
 800eb50:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb54:	ed9d 0a00 	vldr	s0, [sp]
 800eb58:	f001 fab6 	bl	80100c8 <__kernel_cosf>
 800eb5c:	e7e3      	b.n	800eb26 <sinf+0x2a>
 800eb5e:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb62:	ed9d 0a00 	vldr	s0, [sp]
 800eb66:	2001      	movs	r0, #1
 800eb68:	f001 fb06 	bl	8010178 <__kernel_sinf>
 800eb6c:	eeb1 0a40 	vneg.f32	s0, s0
 800eb70:	e7d9      	b.n	800eb26 <sinf+0x2a>
 800eb72:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb76:	ed9d 0a00 	vldr	s0, [sp]
 800eb7a:	f001 faa5 	bl	80100c8 <__kernel_cosf>
 800eb7e:	e7f5      	b.n	800eb6c <sinf+0x70>
 800eb80:	3f490fd8 	.word	0x3f490fd8
 800eb84:	00000000 	.word	0x00000000

0800eb88 <finite>:
 800eb88:	b082      	sub	sp, #8
 800eb8a:	ed8d 0b00 	vstr	d0, [sp]
 800eb8e:	9801      	ldr	r0, [sp, #4]
 800eb90:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800eb94:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800eb98:	0fc0      	lsrs	r0, r0, #31
 800eb9a:	b002      	add	sp, #8
 800eb9c:	4770      	bx	lr
	...

0800eba0 <nan>:
 800eba0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eba8 <nan+0x8>
 800eba4:	4770      	bx	lr
 800eba6:	bf00      	nop
 800eba8:	00000000 	.word	0x00000000
 800ebac:	7ff80000 	.word	0x7ff80000

0800ebb0 <finitef>:
 800ebb0:	ee10 3a10 	vmov	r3, s0
 800ebb4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ebb8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ebbc:	bfac      	ite	ge
 800ebbe:	2000      	movge	r0, #0
 800ebc0:	2001      	movlt	r0, #1
 800ebc2:	4770      	bx	lr

0800ebc4 <__ieee754_sqrt>:
 800ebc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc8:	4a68      	ldr	r2, [pc, #416]	@ (800ed6c <__ieee754_sqrt+0x1a8>)
 800ebca:	ec55 4b10 	vmov	r4, r5, d0
 800ebce:	43aa      	bics	r2, r5
 800ebd0:	462b      	mov	r3, r5
 800ebd2:	4621      	mov	r1, r4
 800ebd4:	d110      	bne.n	800ebf8 <__ieee754_sqrt+0x34>
 800ebd6:	4622      	mov	r2, r4
 800ebd8:	4620      	mov	r0, r4
 800ebda:	4629      	mov	r1, r5
 800ebdc:	f7f1 fd0c 	bl	80005f8 <__aeabi_dmul>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	4629      	mov	r1, r5
 800ebe8:	f7f1 fb50 	bl	800028c <__adddf3>
 800ebec:	4604      	mov	r4, r0
 800ebee:	460d      	mov	r5, r1
 800ebf0:	ec45 4b10 	vmov	d0, r4, r5
 800ebf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf8:	2d00      	cmp	r5, #0
 800ebfa:	dc0e      	bgt.n	800ec1a <__ieee754_sqrt+0x56>
 800ebfc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ec00:	4322      	orrs	r2, r4
 800ec02:	d0f5      	beq.n	800ebf0 <__ieee754_sqrt+0x2c>
 800ec04:	b19d      	cbz	r5, 800ec2e <__ieee754_sqrt+0x6a>
 800ec06:	4622      	mov	r2, r4
 800ec08:	4620      	mov	r0, r4
 800ec0a:	4629      	mov	r1, r5
 800ec0c:	f7f1 fb3c 	bl	8000288 <__aeabi_dsub>
 800ec10:	4602      	mov	r2, r0
 800ec12:	460b      	mov	r3, r1
 800ec14:	f7f1 fe1a 	bl	800084c <__aeabi_ddiv>
 800ec18:	e7e8      	b.n	800ebec <__ieee754_sqrt+0x28>
 800ec1a:	152a      	asrs	r2, r5, #20
 800ec1c:	d115      	bne.n	800ec4a <__ieee754_sqrt+0x86>
 800ec1e:	2000      	movs	r0, #0
 800ec20:	e009      	b.n	800ec36 <__ieee754_sqrt+0x72>
 800ec22:	0acb      	lsrs	r3, r1, #11
 800ec24:	3a15      	subs	r2, #21
 800ec26:	0549      	lsls	r1, r1, #21
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d0fa      	beq.n	800ec22 <__ieee754_sqrt+0x5e>
 800ec2c:	e7f7      	b.n	800ec1e <__ieee754_sqrt+0x5a>
 800ec2e:	462a      	mov	r2, r5
 800ec30:	e7fa      	b.n	800ec28 <__ieee754_sqrt+0x64>
 800ec32:	005b      	lsls	r3, r3, #1
 800ec34:	3001      	adds	r0, #1
 800ec36:	02dc      	lsls	r4, r3, #11
 800ec38:	d5fb      	bpl.n	800ec32 <__ieee754_sqrt+0x6e>
 800ec3a:	1e44      	subs	r4, r0, #1
 800ec3c:	1b12      	subs	r2, r2, r4
 800ec3e:	f1c0 0420 	rsb	r4, r0, #32
 800ec42:	fa21 f404 	lsr.w	r4, r1, r4
 800ec46:	4323      	orrs	r3, r4
 800ec48:	4081      	lsls	r1, r0
 800ec4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec4e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ec52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec56:	07d2      	lsls	r2, r2, #31
 800ec58:	bf5c      	itt	pl
 800ec5a:	005b      	lslpl	r3, r3, #1
 800ec5c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ec60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec64:	bf58      	it	pl
 800ec66:	0049      	lslpl	r1, r1, #1
 800ec68:	2600      	movs	r6, #0
 800ec6a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ec6e:	106d      	asrs	r5, r5, #1
 800ec70:	0049      	lsls	r1, r1, #1
 800ec72:	2016      	movs	r0, #22
 800ec74:	4632      	mov	r2, r6
 800ec76:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ec7a:	1917      	adds	r7, r2, r4
 800ec7c:	429f      	cmp	r7, r3
 800ec7e:	bfde      	ittt	le
 800ec80:	193a      	addle	r2, r7, r4
 800ec82:	1bdb      	suble	r3, r3, r7
 800ec84:	1936      	addle	r6, r6, r4
 800ec86:	0fcf      	lsrs	r7, r1, #31
 800ec88:	3801      	subs	r0, #1
 800ec8a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ec8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ec92:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ec96:	d1f0      	bne.n	800ec7a <__ieee754_sqrt+0xb6>
 800ec98:	4604      	mov	r4, r0
 800ec9a:	2720      	movs	r7, #32
 800ec9c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800eca0:	429a      	cmp	r2, r3
 800eca2:	eb00 0e0c 	add.w	lr, r0, ip
 800eca6:	db02      	blt.n	800ecae <__ieee754_sqrt+0xea>
 800eca8:	d113      	bne.n	800ecd2 <__ieee754_sqrt+0x10e>
 800ecaa:	458e      	cmp	lr, r1
 800ecac:	d811      	bhi.n	800ecd2 <__ieee754_sqrt+0x10e>
 800ecae:	f1be 0f00 	cmp.w	lr, #0
 800ecb2:	eb0e 000c 	add.w	r0, lr, ip
 800ecb6:	da42      	bge.n	800ed3e <__ieee754_sqrt+0x17a>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	db40      	blt.n	800ed3e <__ieee754_sqrt+0x17a>
 800ecbc:	f102 0801 	add.w	r8, r2, #1
 800ecc0:	1a9b      	subs	r3, r3, r2
 800ecc2:	458e      	cmp	lr, r1
 800ecc4:	bf88      	it	hi
 800ecc6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ecca:	eba1 010e 	sub.w	r1, r1, lr
 800ecce:	4464      	add	r4, ip
 800ecd0:	4642      	mov	r2, r8
 800ecd2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ecd6:	3f01      	subs	r7, #1
 800ecd8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ecdc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ece0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ece4:	d1dc      	bne.n	800eca0 <__ieee754_sqrt+0xdc>
 800ece6:	4319      	orrs	r1, r3
 800ece8:	d01b      	beq.n	800ed22 <__ieee754_sqrt+0x15e>
 800ecea:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ed70 <__ieee754_sqrt+0x1ac>
 800ecee:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ed74 <__ieee754_sqrt+0x1b0>
 800ecf2:	e9da 0100 	ldrd	r0, r1, [sl]
 800ecf6:	e9db 2300 	ldrd	r2, r3, [fp]
 800ecfa:	f7f1 fac5 	bl	8000288 <__aeabi_dsub>
 800ecfe:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed02:	4602      	mov	r2, r0
 800ed04:	460b      	mov	r3, r1
 800ed06:	4640      	mov	r0, r8
 800ed08:	4649      	mov	r1, r9
 800ed0a:	f7f1 fef1 	bl	8000af0 <__aeabi_dcmple>
 800ed0e:	b140      	cbz	r0, 800ed22 <__ieee754_sqrt+0x15e>
 800ed10:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ed14:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed18:	e9db 2300 	ldrd	r2, r3, [fp]
 800ed1c:	d111      	bne.n	800ed42 <__ieee754_sqrt+0x17e>
 800ed1e:	3601      	adds	r6, #1
 800ed20:	463c      	mov	r4, r7
 800ed22:	1072      	asrs	r2, r6, #1
 800ed24:	0863      	lsrs	r3, r4, #1
 800ed26:	07f1      	lsls	r1, r6, #31
 800ed28:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ed2c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ed30:	bf48      	it	mi
 800ed32:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ed36:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	e756      	b.n	800ebec <__ieee754_sqrt+0x28>
 800ed3e:	4690      	mov	r8, r2
 800ed40:	e7be      	b.n	800ecc0 <__ieee754_sqrt+0xfc>
 800ed42:	f7f1 faa3 	bl	800028c <__adddf3>
 800ed46:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4640      	mov	r0, r8
 800ed50:	4649      	mov	r1, r9
 800ed52:	f7f1 fec3 	bl	8000adc <__aeabi_dcmplt>
 800ed56:	b120      	cbz	r0, 800ed62 <__ieee754_sqrt+0x19e>
 800ed58:	1ca0      	adds	r0, r4, #2
 800ed5a:	bf08      	it	eq
 800ed5c:	3601      	addeq	r6, #1
 800ed5e:	3402      	adds	r4, #2
 800ed60:	e7df      	b.n	800ed22 <__ieee754_sqrt+0x15e>
 800ed62:	1c63      	adds	r3, r4, #1
 800ed64:	f023 0401 	bic.w	r4, r3, #1
 800ed68:	e7db      	b.n	800ed22 <__ieee754_sqrt+0x15e>
 800ed6a:	bf00      	nop
 800ed6c:	7ff00000 	.word	0x7ff00000
 800ed70:	200002f8 	.word	0x200002f8
 800ed74:	200002f0 	.word	0x200002f0

0800ed78 <__ieee754_asin>:
 800ed78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed7c:	ec55 4b10 	vmov	r4, r5, d0
 800ed80:	4bc7      	ldr	r3, [pc, #796]	@ (800f0a0 <__ieee754_asin+0x328>)
 800ed82:	b087      	sub	sp, #28
 800ed84:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ed88:	429e      	cmp	r6, r3
 800ed8a:	9501      	str	r5, [sp, #4]
 800ed8c:	d92d      	bls.n	800edea <__ieee754_asin+0x72>
 800ed8e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800ed92:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800ed96:	4326      	orrs	r6, r4
 800ed98:	d116      	bne.n	800edc8 <__ieee754_asin+0x50>
 800ed9a:	a3a7      	add	r3, pc, #668	@ (adr r3, 800f038 <__ieee754_asin+0x2c0>)
 800ed9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda0:	4620      	mov	r0, r4
 800eda2:	4629      	mov	r1, r5
 800eda4:	f7f1 fc28 	bl	80005f8 <__aeabi_dmul>
 800eda8:	a3a5      	add	r3, pc, #660	@ (adr r3, 800f040 <__ieee754_asin+0x2c8>)
 800edaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edae:	4606      	mov	r6, r0
 800edb0:	460f      	mov	r7, r1
 800edb2:	4620      	mov	r0, r4
 800edb4:	4629      	mov	r1, r5
 800edb6:	f7f1 fc1f 	bl	80005f8 <__aeabi_dmul>
 800edba:	4602      	mov	r2, r0
 800edbc:	460b      	mov	r3, r1
 800edbe:	4630      	mov	r0, r6
 800edc0:	4639      	mov	r1, r7
 800edc2:	f7f1 fa63 	bl	800028c <__adddf3>
 800edc6:	e009      	b.n	800eddc <__ieee754_asin+0x64>
 800edc8:	4622      	mov	r2, r4
 800edca:	462b      	mov	r3, r5
 800edcc:	4620      	mov	r0, r4
 800edce:	4629      	mov	r1, r5
 800edd0:	f7f1 fa5a 	bl	8000288 <__aeabi_dsub>
 800edd4:	4602      	mov	r2, r0
 800edd6:	460b      	mov	r3, r1
 800edd8:	f7f1 fd38 	bl	800084c <__aeabi_ddiv>
 800eddc:	4604      	mov	r4, r0
 800edde:	460d      	mov	r5, r1
 800ede0:	ec45 4b10 	vmov	d0, r4, r5
 800ede4:	b007      	add	sp, #28
 800ede6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edea:	4bae      	ldr	r3, [pc, #696]	@ (800f0a4 <__ieee754_asin+0x32c>)
 800edec:	429e      	cmp	r6, r3
 800edee:	d810      	bhi.n	800ee12 <__ieee754_asin+0x9a>
 800edf0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800edf4:	f080 80ad 	bcs.w	800ef52 <__ieee754_asin+0x1da>
 800edf8:	a393      	add	r3, pc, #588	@ (adr r3, 800f048 <__ieee754_asin+0x2d0>)
 800edfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfe:	4620      	mov	r0, r4
 800ee00:	4629      	mov	r1, r5
 800ee02:	f7f1 fa43 	bl	800028c <__adddf3>
 800ee06:	4ba8      	ldr	r3, [pc, #672]	@ (800f0a8 <__ieee754_asin+0x330>)
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f7f1 fe85 	bl	8000b18 <__aeabi_dcmpgt>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d1e6      	bne.n	800ede0 <__ieee754_asin+0x68>
 800ee12:	ec45 4b10 	vmov	d0, r4, r5
 800ee16:	f7ff fde7 	bl	800e9e8 <fabs>
 800ee1a:	49a3      	ldr	r1, [pc, #652]	@ (800f0a8 <__ieee754_asin+0x330>)
 800ee1c:	ec53 2b10 	vmov	r2, r3, d0
 800ee20:	2000      	movs	r0, #0
 800ee22:	f7f1 fa31 	bl	8000288 <__aeabi_dsub>
 800ee26:	4ba1      	ldr	r3, [pc, #644]	@ (800f0ac <__ieee754_asin+0x334>)
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f7f1 fbe5 	bl	80005f8 <__aeabi_dmul>
 800ee2e:	a388      	add	r3, pc, #544	@ (adr r3, 800f050 <__ieee754_asin+0x2d8>)
 800ee30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee34:	4604      	mov	r4, r0
 800ee36:	460d      	mov	r5, r1
 800ee38:	f7f1 fbde 	bl	80005f8 <__aeabi_dmul>
 800ee3c:	a386      	add	r3, pc, #536	@ (adr r3, 800f058 <__ieee754_asin+0x2e0>)
 800ee3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee42:	f7f1 fa23 	bl	800028c <__adddf3>
 800ee46:	4622      	mov	r2, r4
 800ee48:	462b      	mov	r3, r5
 800ee4a:	f7f1 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ee4e:	a384      	add	r3, pc, #528	@ (adr r3, 800f060 <__ieee754_asin+0x2e8>)
 800ee50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee54:	f7f1 fa18 	bl	8000288 <__aeabi_dsub>
 800ee58:	4622      	mov	r2, r4
 800ee5a:	462b      	mov	r3, r5
 800ee5c:	f7f1 fbcc 	bl	80005f8 <__aeabi_dmul>
 800ee60:	a381      	add	r3, pc, #516	@ (adr r3, 800f068 <__ieee754_asin+0x2f0>)
 800ee62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee66:	f7f1 fa11 	bl	800028c <__adddf3>
 800ee6a:	4622      	mov	r2, r4
 800ee6c:	462b      	mov	r3, r5
 800ee6e:	f7f1 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ee72:	a37f      	add	r3, pc, #508	@ (adr r3, 800f070 <__ieee754_asin+0x2f8>)
 800ee74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee78:	f7f1 fa06 	bl	8000288 <__aeabi_dsub>
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	462b      	mov	r3, r5
 800ee80:	f7f1 fbba 	bl	80005f8 <__aeabi_dmul>
 800ee84:	a37c      	add	r3, pc, #496	@ (adr r3, 800f078 <__ieee754_asin+0x300>)
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	f7f1 f9ff 	bl	800028c <__adddf3>
 800ee8e:	4622      	mov	r2, r4
 800ee90:	462b      	mov	r3, r5
 800ee92:	f7f1 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ee96:	a37a      	add	r3, pc, #488	@ (adr r3, 800f080 <__ieee754_asin+0x308>)
 800ee98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eea0:	4620      	mov	r0, r4
 800eea2:	4629      	mov	r1, r5
 800eea4:	f7f1 fba8 	bl	80005f8 <__aeabi_dmul>
 800eea8:	a377      	add	r3, pc, #476	@ (adr r3, 800f088 <__ieee754_asin+0x310>)
 800eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeae:	f7f1 f9eb 	bl	8000288 <__aeabi_dsub>
 800eeb2:	4622      	mov	r2, r4
 800eeb4:	462b      	mov	r3, r5
 800eeb6:	f7f1 fb9f 	bl	80005f8 <__aeabi_dmul>
 800eeba:	a375      	add	r3, pc, #468	@ (adr r3, 800f090 <__ieee754_asin+0x318>)
 800eebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec0:	f7f1 f9e4 	bl	800028c <__adddf3>
 800eec4:	4622      	mov	r2, r4
 800eec6:	462b      	mov	r3, r5
 800eec8:	f7f1 fb96 	bl	80005f8 <__aeabi_dmul>
 800eecc:	a372      	add	r3, pc, #456	@ (adr r3, 800f098 <__ieee754_asin+0x320>)
 800eece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed2:	f7f1 f9d9 	bl	8000288 <__aeabi_dsub>
 800eed6:	4622      	mov	r2, r4
 800eed8:	462b      	mov	r3, r5
 800eeda:	f7f1 fb8d 	bl	80005f8 <__aeabi_dmul>
 800eede:	4b72      	ldr	r3, [pc, #456]	@ (800f0a8 <__ieee754_asin+0x330>)
 800eee0:	2200      	movs	r2, #0
 800eee2:	f7f1 f9d3 	bl	800028c <__adddf3>
 800eee6:	ec45 4b10 	vmov	d0, r4, r5
 800eeea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eeee:	f7ff fe69 	bl	800ebc4 <__ieee754_sqrt>
 800eef2:	4b6f      	ldr	r3, [pc, #444]	@ (800f0b0 <__ieee754_asin+0x338>)
 800eef4:	429e      	cmp	r6, r3
 800eef6:	ec5b ab10 	vmov	sl, fp, d0
 800eefa:	f240 80db 	bls.w	800f0b4 <__ieee754_asin+0x33c>
 800eefe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef06:	f7f1 fca1 	bl	800084c <__aeabi_ddiv>
 800ef0a:	4652      	mov	r2, sl
 800ef0c:	465b      	mov	r3, fp
 800ef0e:	f7f1 fb73 	bl	80005f8 <__aeabi_dmul>
 800ef12:	4652      	mov	r2, sl
 800ef14:	465b      	mov	r3, fp
 800ef16:	f7f1 f9b9 	bl	800028c <__adddf3>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	f7f1 f9b5 	bl	800028c <__adddf3>
 800ef22:	a347      	add	r3, pc, #284	@ (adr r3, 800f040 <__ieee754_asin+0x2c8>)
 800ef24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef28:	f7f1 f9ae 	bl	8000288 <__aeabi_dsub>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	460b      	mov	r3, r1
 800ef30:	a141      	add	r1, pc, #260	@ (adr r1, 800f038 <__ieee754_asin+0x2c0>)
 800ef32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef36:	f7f1 f9a7 	bl	8000288 <__aeabi_dsub>
 800ef3a:	9b01      	ldr	r3, [sp, #4]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	bfdc      	itt	le
 800ef40:	4602      	movle	r2, r0
 800ef42:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800ef46:	4604      	mov	r4, r0
 800ef48:	460d      	mov	r5, r1
 800ef4a:	bfdc      	itt	le
 800ef4c:	4614      	movle	r4, r2
 800ef4e:	461d      	movle	r5, r3
 800ef50:	e746      	b.n	800ede0 <__ieee754_asin+0x68>
 800ef52:	4622      	mov	r2, r4
 800ef54:	462b      	mov	r3, r5
 800ef56:	4620      	mov	r0, r4
 800ef58:	4629      	mov	r1, r5
 800ef5a:	f7f1 fb4d 	bl	80005f8 <__aeabi_dmul>
 800ef5e:	a33c      	add	r3, pc, #240	@ (adr r3, 800f050 <__ieee754_asin+0x2d8>)
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	4606      	mov	r6, r0
 800ef66:	460f      	mov	r7, r1
 800ef68:	f7f1 fb46 	bl	80005f8 <__aeabi_dmul>
 800ef6c:	a33a      	add	r3, pc, #232	@ (adr r3, 800f058 <__ieee754_asin+0x2e0>)
 800ef6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef72:	f7f1 f98b 	bl	800028c <__adddf3>
 800ef76:	4632      	mov	r2, r6
 800ef78:	463b      	mov	r3, r7
 800ef7a:	f7f1 fb3d 	bl	80005f8 <__aeabi_dmul>
 800ef7e:	a338      	add	r3, pc, #224	@ (adr r3, 800f060 <__ieee754_asin+0x2e8>)
 800ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef84:	f7f1 f980 	bl	8000288 <__aeabi_dsub>
 800ef88:	4632      	mov	r2, r6
 800ef8a:	463b      	mov	r3, r7
 800ef8c:	f7f1 fb34 	bl	80005f8 <__aeabi_dmul>
 800ef90:	a335      	add	r3, pc, #212	@ (adr r3, 800f068 <__ieee754_asin+0x2f0>)
 800ef92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef96:	f7f1 f979 	bl	800028c <__adddf3>
 800ef9a:	4632      	mov	r2, r6
 800ef9c:	463b      	mov	r3, r7
 800ef9e:	f7f1 fb2b 	bl	80005f8 <__aeabi_dmul>
 800efa2:	a333      	add	r3, pc, #204	@ (adr r3, 800f070 <__ieee754_asin+0x2f8>)
 800efa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa8:	f7f1 f96e 	bl	8000288 <__aeabi_dsub>
 800efac:	4632      	mov	r2, r6
 800efae:	463b      	mov	r3, r7
 800efb0:	f7f1 fb22 	bl	80005f8 <__aeabi_dmul>
 800efb4:	a330      	add	r3, pc, #192	@ (adr r3, 800f078 <__ieee754_asin+0x300>)
 800efb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efba:	f7f1 f967 	bl	800028c <__adddf3>
 800efbe:	4632      	mov	r2, r6
 800efc0:	463b      	mov	r3, r7
 800efc2:	f7f1 fb19 	bl	80005f8 <__aeabi_dmul>
 800efc6:	a32e      	add	r3, pc, #184	@ (adr r3, 800f080 <__ieee754_asin+0x308>)
 800efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efcc:	4680      	mov	r8, r0
 800efce:	4689      	mov	r9, r1
 800efd0:	4630      	mov	r0, r6
 800efd2:	4639      	mov	r1, r7
 800efd4:	f7f1 fb10 	bl	80005f8 <__aeabi_dmul>
 800efd8:	a32b      	add	r3, pc, #172	@ (adr r3, 800f088 <__ieee754_asin+0x310>)
 800efda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efde:	f7f1 f953 	bl	8000288 <__aeabi_dsub>
 800efe2:	4632      	mov	r2, r6
 800efe4:	463b      	mov	r3, r7
 800efe6:	f7f1 fb07 	bl	80005f8 <__aeabi_dmul>
 800efea:	a329      	add	r3, pc, #164	@ (adr r3, 800f090 <__ieee754_asin+0x318>)
 800efec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff0:	f7f1 f94c 	bl	800028c <__adddf3>
 800eff4:	4632      	mov	r2, r6
 800eff6:	463b      	mov	r3, r7
 800eff8:	f7f1 fafe 	bl	80005f8 <__aeabi_dmul>
 800effc:	a326      	add	r3, pc, #152	@ (adr r3, 800f098 <__ieee754_asin+0x320>)
 800effe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f002:	f7f1 f941 	bl	8000288 <__aeabi_dsub>
 800f006:	4632      	mov	r2, r6
 800f008:	463b      	mov	r3, r7
 800f00a:	f7f1 faf5 	bl	80005f8 <__aeabi_dmul>
 800f00e:	4b26      	ldr	r3, [pc, #152]	@ (800f0a8 <__ieee754_asin+0x330>)
 800f010:	2200      	movs	r2, #0
 800f012:	f7f1 f93b 	bl	800028c <__adddf3>
 800f016:	4602      	mov	r2, r0
 800f018:	460b      	mov	r3, r1
 800f01a:	4640      	mov	r0, r8
 800f01c:	4649      	mov	r1, r9
 800f01e:	f7f1 fc15 	bl	800084c <__aeabi_ddiv>
 800f022:	4622      	mov	r2, r4
 800f024:	462b      	mov	r3, r5
 800f026:	f7f1 fae7 	bl	80005f8 <__aeabi_dmul>
 800f02a:	4602      	mov	r2, r0
 800f02c:	460b      	mov	r3, r1
 800f02e:	4620      	mov	r0, r4
 800f030:	4629      	mov	r1, r5
 800f032:	e6c6      	b.n	800edc2 <__ieee754_asin+0x4a>
 800f034:	f3af 8000 	nop.w
 800f038:	54442d18 	.word	0x54442d18
 800f03c:	3ff921fb 	.word	0x3ff921fb
 800f040:	33145c07 	.word	0x33145c07
 800f044:	3c91a626 	.word	0x3c91a626
 800f048:	8800759c 	.word	0x8800759c
 800f04c:	7e37e43c 	.word	0x7e37e43c
 800f050:	0dfdf709 	.word	0x0dfdf709
 800f054:	3f023de1 	.word	0x3f023de1
 800f058:	7501b288 	.word	0x7501b288
 800f05c:	3f49efe0 	.word	0x3f49efe0
 800f060:	b5688f3b 	.word	0xb5688f3b
 800f064:	3fa48228 	.word	0x3fa48228
 800f068:	0e884455 	.word	0x0e884455
 800f06c:	3fc9c155 	.word	0x3fc9c155
 800f070:	03eb6f7d 	.word	0x03eb6f7d
 800f074:	3fd4d612 	.word	0x3fd4d612
 800f078:	55555555 	.word	0x55555555
 800f07c:	3fc55555 	.word	0x3fc55555
 800f080:	b12e9282 	.word	0xb12e9282
 800f084:	3fb3b8c5 	.word	0x3fb3b8c5
 800f088:	1b8d0159 	.word	0x1b8d0159
 800f08c:	3fe6066c 	.word	0x3fe6066c
 800f090:	9c598ac8 	.word	0x9c598ac8
 800f094:	40002ae5 	.word	0x40002ae5
 800f098:	1c8a2d4b 	.word	0x1c8a2d4b
 800f09c:	40033a27 	.word	0x40033a27
 800f0a0:	3fefffff 	.word	0x3fefffff
 800f0a4:	3fdfffff 	.word	0x3fdfffff
 800f0a8:	3ff00000 	.word	0x3ff00000
 800f0ac:	3fe00000 	.word	0x3fe00000
 800f0b0:	3fef3332 	.word	0x3fef3332
 800f0b4:	4652      	mov	r2, sl
 800f0b6:	465b      	mov	r3, fp
 800f0b8:	4650      	mov	r0, sl
 800f0ba:	4659      	mov	r1, fp
 800f0bc:	f7f1 f8e6 	bl	800028c <__adddf3>
 800f0c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0c4:	4606      	mov	r6, r0
 800f0c6:	460f      	mov	r7, r1
 800f0c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0cc:	f7f1 fbbe 	bl	800084c <__aeabi_ddiv>
 800f0d0:	4602      	mov	r2, r0
 800f0d2:	460b      	mov	r3, r1
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	4639      	mov	r1, r7
 800f0d8:	f7f1 fa8e 	bl	80005f8 <__aeabi_dmul>
 800f0dc:	f04f 0800 	mov.w	r8, #0
 800f0e0:	4606      	mov	r6, r0
 800f0e2:	460f      	mov	r7, r1
 800f0e4:	4642      	mov	r2, r8
 800f0e6:	465b      	mov	r3, fp
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	4659      	mov	r1, fp
 800f0ec:	f7f1 fa84 	bl	80005f8 <__aeabi_dmul>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	4629      	mov	r1, r5
 800f0f8:	f7f1 f8c6 	bl	8000288 <__aeabi_dsub>
 800f0fc:	4642      	mov	r2, r8
 800f0fe:	4604      	mov	r4, r0
 800f100:	460d      	mov	r5, r1
 800f102:	465b      	mov	r3, fp
 800f104:	4650      	mov	r0, sl
 800f106:	4659      	mov	r1, fp
 800f108:	f7f1 f8c0 	bl	800028c <__adddf3>
 800f10c:	4602      	mov	r2, r0
 800f10e:	460b      	mov	r3, r1
 800f110:	4620      	mov	r0, r4
 800f112:	4629      	mov	r1, r5
 800f114:	f7f1 fb9a 	bl	800084c <__aeabi_ddiv>
 800f118:	4602      	mov	r2, r0
 800f11a:	460b      	mov	r3, r1
 800f11c:	f7f1 f8b6 	bl	800028c <__adddf3>
 800f120:	4602      	mov	r2, r0
 800f122:	460b      	mov	r3, r1
 800f124:	a112      	add	r1, pc, #72	@ (adr r1, 800f170 <__ieee754_asin+0x3f8>)
 800f126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f12a:	f7f1 f8ad 	bl	8000288 <__aeabi_dsub>
 800f12e:	4602      	mov	r2, r0
 800f130:	460b      	mov	r3, r1
 800f132:	4630      	mov	r0, r6
 800f134:	4639      	mov	r1, r7
 800f136:	f7f1 f8a7 	bl	8000288 <__aeabi_dsub>
 800f13a:	4642      	mov	r2, r8
 800f13c:	4604      	mov	r4, r0
 800f13e:	460d      	mov	r5, r1
 800f140:	465b      	mov	r3, fp
 800f142:	4640      	mov	r0, r8
 800f144:	4659      	mov	r1, fp
 800f146:	f7f1 f8a1 	bl	800028c <__adddf3>
 800f14a:	4602      	mov	r2, r0
 800f14c:	460b      	mov	r3, r1
 800f14e:	a10a      	add	r1, pc, #40	@ (adr r1, 800f178 <__ieee754_asin+0x400>)
 800f150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f154:	f7f1 f898 	bl	8000288 <__aeabi_dsub>
 800f158:	4602      	mov	r2, r0
 800f15a:	460b      	mov	r3, r1
 800f15c:	4620      	mov	r0, r4
 800f15e:	4629      	mov	r1, r5
 800f160:	f7f1 f892 	bl	8000288 <__aeabi_dsub>
 800f164:	4602      	mov	r2, r0
 800f166:	460b      	mov	r3, r1
 800f168:	a103      	add	r1, pc, #12	@ (adr r1, 800f178 <__ieee754_asin+0x400>)
 800f16a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f16e:	e6e2      	b.n	800ef36 <__ieee754_asin+0x1be>
 800f170:	33145c07 	.word	0x33145c07
 800f174:	3c91a626 	.word	0x3c91a626
 800f178:	54442d18 	.word	0x54442d18
 800f17c:	3fe921fb 	.word	0x3fe921fb

0800f180 <__ieee754_atan2>:
 800f180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f184:	ec57 6b11 	vmov	r6, r7, d1
 800f188:	4273      	negs	r3, r6
 800f18a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f308 <__ieee754_atan2+0x188>
 800f18e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800f192:	4333      	orrs	r3, r6
 800f194:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f198:	4543      	cmp	r3, r8
 800f19a:	ec51 0b10 	vmov	r0, r1, d0
 800f19e:	4635      	mov	r5, r6
 800f1a0:	d809      	bhi.n	800f1b6 <__ieee754_atan2+0x36>
 800f1a2:	4244      	negs	r4, r0
 800f1a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f1a8:	4304      	orrs	r4, r0
 800f1aa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f1ae:	4544      	cmp	r4, r8
 800f1b0:	468e      	mov	lr, r1
 800f1b2:	4681      	mov	r9, r0
 800f1b4:	d907      	bls.n	800f1c6 <__ieee754_atan2+0x46>
 800f1b6:	4632      	mov	r2, r6
 800f1b8:	463b      	mov	r3, r7
 800f1ba:	f7f1 f867 	bl	800028c <__adddf3>
 800f1be:	ec41 0b10 	vmov	d0, r0, r1
 800f1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1c6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800f1ca:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800f1ce:	4334      	orrs	r4, r6
 800f1d0:	d103      	bne.n	800f1da <__ieee754_atan2+0x5a>
 800f1d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d6:	f000 bddf 	b.w	800fd98 <atan>
 800f1da:	17bc      	asrs	r4, r7, #30
 800f1dc:	f004 0402 	and.w	r4, r4, #2
 800f1e0:	ea53 0909 	orrs.w	r9, r3, r9
 800f1e4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f1e8:	d107      	bne.n	800f1fa <__ieee754_atan2+0x7a>
 800f1ea:	2c02      	cmp	r4, #2
 800f1ec:	d05f      	beq.n	800f2ae <__ieee754_atan2+0x12e>
 800f1ee:	2c03      	cmp	r4, #3
 800f1f0:	d1e5      	bne.n	800f1be <__ieee754_atan2+0x3e>
 800f1f2:	a141      	add	r1, pc, #260	@ (adr r1, 800f2f8 <__ieee754_atan2+0x178>)
 800f1f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1f8:	e7e1      	b.n	800f1be <__ieee754_atan2+0x3e>
 800f1fa:	4315      	orrs	r5, r2
 800f1fc:	d106      	bne.n	800f20c <__ieee754_atan2+0x8c>
 800f1fe:	f1be 0f00 	cmp.w	lr, #0
 800f202:	da5f      	bge.n	800f2c4 <__ieee754_atan2+0x144>
 800f204:	a13e      	add	r1, pc, #248	@ (adr r1, 800f300 <__ieee754_atan2+0x180>)
 800f206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f20a:	e7d8      	b.n	800f1be <__ieee754_atan2+0x3e>
 800f20c:	4542      	cmp	r2, r8
 800f20e:	d10f      	bne.n	800f230 <__ieee754_atan2+0xb0>
 800f210:	4293      	cmp	r3, r2
 800f212:	f104 34ff 	add.w	r4, r4, #4294967295
 800f216:	d107      	bne.n	800f228 <__ieee754_atan2+0xa8>
 800f218:	2c02      	cmp	r4, #2
 800f21a:	d84c      	bhi.n	800f2b6 <__ieee754_atan2+0x136>
 800f21c:	4b34      	ldr	r3, [pc, #208]	@ (800f2f0 <__ieee754_atan2+0x170>)
 800f21e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f222:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f226:	e7ca      	b.n	800f1be <__ieee754_atan2+0x3e>
 800f228:	2c02      	cmp	r4, #2
 800f22a:	d848      	bhi.n	800f2be <__ieee754_atan2+0x13e>
 800f22c:	4b31      	ldr	r3, [pc, #196]	@ (800f2f4 <__ieee754_atan2+0x174>)
 800f22e:	e7f6      	b.n	800f21e <__ieee754_atan2+0x9e>
 800f230:	4543      	cmp	r3, r8
 800f232:	d0e4      	beq.n	800f1fe <__ieee754_atan2+0x7e>
 800f234:	1a9b      	subs	r3, r3, r2
 800f236:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f23a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f23e:	da1e      	bge.n	800f27e <__ieee754_atan2+0xfe>
 800f240:	2f00      	cmp	r7, #0
 800f242:	da01      	bge.n	800f248 <__ieee754_atan2+0xc8>
 800f244:	323c      	adds	r2, #60	@ 0x3c
 800f246:	db1e      	blt.n	800f286 <__ieee754_atan2+0x106>
 800f248:	4632      	mov	r2, r6
 800f24a:	463b      	mov	r3, r7
 800f24c:	f7f1 fafe 	bl	800084c <__aeabi_ddiv>
 800f250:	ec41 0b10 	vmov	d0, r0, r1
 800f254:	f7ff fbc8 	bl	800e9e8 <fabs>
 800f258:	f000 fd9e 	bl	800fd98 <atan>
 800f25c:	ec51 0b10 	vmov	r0, r1, d0
 800f260:	2c01      	cmp	r4, #1
 800f262:	d013      	beq.n	800f28c <__ieee754_atan2+0x10c>
 800f264:	2c02      	cmp	r4, #2
 800f266:	d015      	beq.n	800f294 <__ieee754_atan2+0x114>
 800f268:	2c00      	cmp	r4, #0
 800f26a:	d0a8      	beq.n	800f1be <__ieee754_atan2+0x3e>
 800f26c:	a318      	add	r3, pc, #96	@ (adr r3, 800f2d0 <__ieee754_atan2+0x150>)
 800f26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f272:	f7f1 f809 	bl	8000288 <__aeabi_dsub>
 800f276:	a318      	add	r3, pc, #96	@ (adr r3, 800f2d8 <__ieee754_atan2+0x158>)
 800f278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27c:	e014      	b.n	800f2a8 <__ieee754_atan2+0x128>
 800f27e:	a118      	add	r1, pc, #96	@ (adr r1, 800f2e0 <__ieee754_atan2+0x160>)
 800f280:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f284:	e7ec      	b.n	800f260 <__ieee754_atan2+0xe0>
 800f286:	2000      	movs	r0, #0
 800f288:	2100      	movs	r1, #0
 800f28a:	e7e9      	b.n	800f260 <__ieee754_atan2+0xe0>
 800f28c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f290:	4619      	mov	r1, r3
 800f292:	e794      	b.n	800f1be <__ieee754_atan2+0x3e>
 800f294:	a30e      	add	r3, pc, #56	@ (adr r3, 800f2d0 <__ieee754_atan2+0x150>)
 800f296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29a:	f7f0 fff5 	bl	8000288 <__aeabi_dsub>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	a10d      	add	r1, pc, #52	@ (adr r1, 800f2d8 <__ieee754_atan2+0x158>)
 800f2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2a8:	f7f0 ffee 	bl	8000288 <__aeabi_dsub>
 800f2ac:	e787      	b.n	800f1be <__ieee754_atan2+0x3e>
 800f2ae:	a10a      	add	r1, pc, #40	@ (adr r1, 800f2d8 <__ieee754_atan2+0x158>)
 800f2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2b4:	e783      	b.n	800f1be <__ieee754_atan2+0x3e>
 800f2b6:	a10c      	add	r1, pc, #48	@ (adr r1, 800f2e8 <__ieee754_atan2+0x168>)
 800f2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2bc:	e77f      	b.n	800f1be <__ieee754_atan2+0x3e>
 800f2be:	2000      	movs	r0, #0
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	e77c      	b.n	800f1be <__ieee754_atan2+0x3e>
 800f2c4:	a106      	add	r1, pc, #24	@ (adr r1, 800f2e0 <__ieee754_atan2+0x160>)
 800f2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2ca:	e778      	b.n	800f1be <__ieee754_atan2+0x3e>
 800f2cc:	f3af 8000 	nop.w
 800f2d0:	33145c07 	.word	0x33145c07
 800f2d4:	3ca1a626 	.word	0x3ca1a626
 800f2d8:	54442d18 	.word	0x54442d18
 800f2dc:	400921fb 	.word	0x400921fb
 800f2e0:	54442d18 	.word	0x54442d18
 800f2e4:	3ff921fb 	.word	0x3ff921fb
 800f2e8:	54442d18 	.word	0x54442d18
 800f2ec:	3fe921fb 	.word	0x3fe921fb
 800f2f0:	08011268 	.word	0x08011268
 800f2f4:	08011250 	.word	0x08011250
 800f2f8:	54442d18 	.word	0x54442d18
 800f2fc:	c00921fb 	.word	0xc00921fb
 800f300:	54442d18 	.word	0x54442d18
 800f304:	bff921fb 	.word	0xbff921fb
 800f308:	7ff00000 	.word	0x7ff00000
 800f30c:	00000000 	.word	0x00000000

0800f310 <__ieee754_pow>:
 800f310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f314:	b091      	sub	sp, #68	@ 0x44
 800f316:	ed8d 1b00 	vstr	d1, [sp]
 800f31a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f31e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f322:	ea5a 0001 	orrs.w	r0, sl, r1
 800f326:	ec57 6b10 	vmov	r6, r7, d0
 800f32a:	d113      	bne.n	800f354 <__ieee754_pow+0x44>
 800f32c:	19b3      	adds	r3, r6, r6
 800f32e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f332:	4152      	adcs	r2, r2
 800f334:	4298      	cmp	r0, r3
 800f336:	4b98      	ldr	r3, [pc, #608]	@ (800f598 <__ieee754_pow+0x288>)
 800f338:	4193      	sbcs	r3, r2
 800f33a:	f080 84ea 	bcs.w	800fd12 <__ieee754_pow+0xa02>
 800f33e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f342:	4630      	mov	r0, r6
 800f344:	4639      	mov	r1, r7
 800f346:	f7f0 ffa1 	bl	800028c <__adddf3>
 800f34a:	ec41 0b10 	vmov	d0, r0, r1
 800f34e:	b011      	add	sp, #68	@ 0x44
 800f350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f354:	4a91      	ldr	r2, [pc, #580]	@ (800f59c <__ieee754_pow+0x28c>)
 800f356:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f35a:	4590      	cmp	r8, r2
 800f35c:	463d      	mov	r5, r7
 800f35e:	4633      	mov	r3, r6
 800f360:	d806      	bhi.n	800f370 <__ieee754_pow+0x60>
 800f362:	d101      	bne.n	800f368 <__ieee754_pow+0x58>
 800f364:	2e00      	cmp	r6, #0
 800f366:	d1ea      	bne.n	800f33e <__ieee754_pow+0x2e>
 800f368:	4592      	cmp	sl, r2
 800f36a:	d801      	bhi.n	800f370 <__ieee754_pow+0x60>
 800f36c:	d10e      	bne.n	800f38c <__ieee754_pow+0x7c>
 800f36e:	b169      	cbz	r1, 800f38c <__ieee754_pow+0x7c>
 800f370:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f374:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f378:	431d      	orrs	r5, r3
 800f37a:	d1e0      	bne.n	800f33e <__ieee754_pow+0x2e>
 800f37c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f380:	18db      	adds	r3, r3, r3
 800f382:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f386:	4152      	adcs	r2, r2
 800f388:	429d      	cmp	r5, r3
 800f38a:	e7d4      	b.n	800f336 <__ieee754_pow+0x26>
 800f38c:	2d00      	cmp	r5, #0
 800f38e:	46c3      	mov	fp, r8
 800f390:	da3a      	bge.n	800f408 <__ieee754_pow+0xf8>
 800f392:	4a83      	ldr	r2, [pc, #524]	@ (800f5a0 <__ieee754_pow+0x290>)
 800f394:	4592      	cmp	sl, r2
 800f396:	d84d      	bhi.n	800f434 <__ieee754_pow+0x124>
 800f398:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f39c:	4592      	cmp	sl, r2
 800f39e:	f240 84c7 	bls.w	800fd30 <__ieee754_pow+0xa20>
 800f3a2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f3a6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f3aa:	2a14      	cmp	r2, #20
 800f3ac:	dd0f      	ble.n	800f3ce <__ieee754_pow+0xbe>
 800f3ae:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f3b2:	fa21 f402 	lsr.w	r4, r1, r2
 800f3b6:	fa04 f202 	lsl.w	r2, r4, r2
 800f3ba:	428a      	cmp	r2, r1
 800f3bc:	f040 84b8 	bne.w	800fd30 <__ieee754_pow+0xa20>
 800f3c0:	f004 0401 	and.w	r4, r4, #1
 800f3c4:	f1c4 0402 	rsb	r4, r4, #2
 800f3c8:	2900      	cmp	r1, #0
 800f3ca:	d158      	bne.n	800f47e <__ieee754_pow+0x16e>
 800f3cc:	e00e      	b.n	800f3ec <__ieee754_pow+0xdc>
 800f3ce:	2900      	cmp	r1, #0
 800f3d0:	d154      	bne.n	800f47c <__ieee754_pow+0x16c>
 800f3d2:	f1c2 0214 	rsb	r2, r2, #20
 800f3d6:	fa4a f402 	asr.w	r4, sl, r2
 800f3da:	fa04 f202 	lsl.w	r2, r4, r2
 800f3de:	4552      	cmp	r2, sl
 800f3e0:	f040 84a3 	bne.w	800fd2a <__ieee754_pow+0xa1a>
 800f3e4:	f004 0401 	and.w	r4, r4, #1
 800f3e8:	f1c4 0402 	rsb	r4, r4, #2
 800f3ec:	4a6d      	ldr	r2, [pc, #436]	@ (800f5a4 <__ieee754_pow+0x294>)
 800f3ee:	4592      	cmp	sl, r2
 800f3f0:	d12e      	bne.n	800f450 <__ieee754_pow+0x140>
 800f3f2:	f1b9 0f00 	cmp.w	r9, #0
 800f3f6:	f280 8494 	bge.w	800fd22 <__ieee754_pow+0xa12>
 800f3fa:	496a      	ldr	r1, [pc, #424]	@ (800f5a4 <__ieee754_pow+0x294>)
 800f3fc:	4632      	mov	r2, r6
 800f3fe:	463b      	mov	r3, r7
 800f400:	2000      	movs	r0, #0
 800f402:	f7f1 fa23 	bl	800084c <__aeabi_ddiv>
 800f406:	e7a0      	b.n	800f34a <__ieee754_pow+0x3a>
 800f408:	2400      	movs	r4, #0
 800f40a:	bbc1      	cbnz	r1, 800f47e <__ieee754_pow+0x16e>
 800f40c:	4a63      	ldr	r2, [pc, #396]	@ (800f59c <__ieee754_pow+0x28c>)
 800f40e:	4592      	cmp	sl, r2
 800f410:	d1ec      	bne.n	800f3ec <__ieee754_pow+0xdc>
 800f412:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f416:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f41a:	431a      	orrs	r2, r3
 800f41c:	f000 8479 	beq.w	800fd12 <__ieee754_pow+0xa02>
 800f420:	4b61      	ldr	r3, [pc, #388]	@ (800f5a8 <__ieee754_pow+0x298>)
 800f422:	4598      	cmp	r8, r3
 800f424:	d908      	bls.n	800f438 <__ieee754_pow+0x128>
 800f426:	f1b9 0f00 	cmp.w	r9, #0
 800f42a:	f2c0 8476 	blt.w	800fd1a <__ieee754_pow+0xa0a>
 800f42e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f432:	e78a      	b.n	800f34a <__ieee754_pow+0x3a>
 800f434:	2402      	movs	r4, #2
 800f436:	e7e8      	b.n	800f40a <__ieee754_pow+0xfa>
 800f438:	f1b9 0f00 	cmp.w	r9, #0
 800f43c:	f04f 0000 	mov.w	r0, #0
 800f440:	f04f 0100 	mov.w	r1, #0
 800f444:	da81      	bge.n	800f34a <__ieee754_pow+0x3a>
 800f446:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f44a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f44e:	e77c      	b.n	800f34a <__ieee754_pow+0x3a>
 800f450:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f454:	d106      	bne.n	800f464 <__ieee754_pow+0x154>
 800f456:	4632      	mov	r2, r6
 800f458:	463b      	mov	r3, r7
 800f45a:	4630      	mov	r0, r6
 800f45c:	4639      	mov	r1, r7
 800f45e:	f7f1 f8cb 	bl	80005f8 <__aeabi_dmul>
 800f462:	e772      	b.n	800f34a <__ieee754_pow+0x3a>
 800f464:	4a51      	ldr	r2, [pc, #324]	@ (800f5ac <__ieee754_pow+0x29c>)
 800f466:	4591      	cmp	r9, r2
 800f468:	d109      	bne.n	800f47e <__ieee754_pow+0x16e>
 800f46a:	2d00      	cmp	r5, #0
 800f46c:	db07      	blt.n	800f47e <__ieee754_pow+0x16e>
 800f46e:	ec47 6b10 	vmov	d0, r6, r7
 800f472:	b011      	add	sp, #68	@ 0x44
 800f474:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f478:	f7ff bba4 	b.w	800ebc4 <__ieee754_sqrt>
 800f47c:	2400      	movs	r4, #0
 800f47e:	ec47 6b10 	vmov	d0, r6, r7
 800f482:	9302      	str	r3, [sp, #8]
 800f484:	f7ff fab0 	bl	800e9e8 <fabs>
 800f488:	9b02      	ldr	r3, [sp, #8]
 800f48a:	ec51 0b10 	vmov	r0, r1, d0
 800f48e:	bb53      	cbnz	r3, 800f4e6 <__ieee754_pow+0x1d6>
 800f490:	4b44      	ldr	r3, [pc, #272]	@ (800f5a4 <__ieee754_pow+0x294>)
 800f492:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f496:	429a      	cmp	r2, r3
 800f498:	d002      	beq.n	800f4a0 <__ieee754_pow+0x190>
 800f49a:	f1b8 0f00 	cmp.w	r8, #0
 800f49e:	d122      	bne.n	800f4e6 <__ieee754_pow+0x1d6>
 800f4a0:	f1b9 0f00 	cmp.w	r9, #0
 800f4a4:	da05      	bge.n	800f4b2 <__ieee754_pow+0x1a2>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	493d      	ldr	r1, [pc, #244]	@ (800f5a4 <__ieee754_pow+0x294>)
 800f4ae:	f7f1 f9cd 	bl	800084c <__aeabi_ddiv>
 800f4b2:	2d00      	cmp	r5, #0
 800f4b4:	f6bf af49 	bge.w	800f34a <__ieee754_pow+0x3a>
 800f4b8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f4bc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f4c0:	ea58 0804 	orrs.w	r8, r8, r4
 800f4c4:	d108      	bne.n	800f4d8 <__ieee754_pow+0x1c8>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	4610      	mov	r0, r2
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	f7f0 fedb 	bl	8000288 <__aeabi_dsub>
 800f4d2:	4602      	mov	r2, r0
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	e794      	b.n	800f402 <__ieee754_pow+0xf2>
 800f4d8:	2c01      	cmp	r4, #1
 800f4da:	f47f af36 	bne.w	800f34a <__ieee754_pow+0x3a>
 800f4de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	e731      	b.n	800f34a <__ieee754_pow+0x3a>
 800f4e6:	0feb      	lsrs	r3, r5, #31
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	ea53 0204 	orrs.w	r2, r3, r4
 800f4ee:	d102      	bne.n	800f4f6 <__ieee754_pow+0x1e6>
 800f4f0:	4632      	mov	r2, r6
 800f4f2:	463b      	mov	r3, r7
 800f4f4:	e7e9      	b.n	800f4ca <__ieee754_pow+0x1ba>
 800f4f6:	3c01      	subs	r4, #1
 800f4f8:	431c      	orrs	r4, r3
 800f4fa:	d016      	beq.n	800f52a <__ieee754_pow+0x21a>
 800f4fc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f588 <__ieee754_pow+0x278>
 800f500:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f504:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f508:	f240 8112 	bls.w	800f730 <__ieee754_pow+0x420>
 800f50c:	4b28      	ldr	r3, [pc, #160]	@ (800f5b0 <__ieee754_pow+0x2a0>)
 800f50e:	459a      	cmp	sl, r3
 800f510:	4b25      	ldr	r3, [pc, #148]	@ (800f5a8 <__ieee754_pow+0x298>)
 800f512:	d916      	bls.n	800f542 <__ieee754_pow+0x232>
 800f514:	4598      	cmp	r8, r3
 800f516:	d80b      	bhi.n	800f530 <__ieee754_pow+0x220>
 800f518:	f1b9 0f00 	cmp.w	r9, #0
 800f51c:	da0b      	bge.n	800f536 <__ieee754_pow+0x226>
 800f51e:	2000      	movs	r0, #0
 800f520:	b011      	add	sp, #68	@ 0x44
 800f522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f526:	f001 b923 	b.w	8010770 <__math_oflow>
 800f52a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f590 <__ieee754_pow+0x280>
 800f52e:	e7e7      	b.n	800f500 <__ieee754_pow+0x1f0>
 800f530:	f1b9 0f00 	cmp.w	r9, #0
 800f534:	dcf3      	bgt.n	800f51e <__ieee754_pow+0x20e>
 800f536:	2000      	movs	r0, #0
 800f538:	b011      	add	sp, #68	@ 0x44
 800f53a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53e:	f001 b90f 	b.w	8010760 <__math_uflow>
 800f542:	4598      	cmp	r8, r3
 800f544:	d20c      	bcs.n	800f560 <__ieee754_pow+0x250>
 800f546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f54a:	2200      	movs	r2, #0
 800f54c:	2300      	movs	r3, #0
 800f54e:	f7f1 fac5 	bl	8000adc <__aeabi_dcmplt>
 800f552:	3800      	subs	r0, #0
 800f554:	bf18      	it	ne
 800f556:	2001      	movne	r0, #1
 800f558:	f1b9 0f00 	cmp.w	r9, #0
 800f55c:	daec      	bge.n	800f538 <__ieee754_pow+0x228>
 800f55e:	e7df      	b.n	800f520 <__ieee754_pow+0x210>
 800f560:	4b10      	ldr	r3, [pc, #64]	@ (800f5a4 <__ieee754_pow+0x294>)
 800f562:	4598      	cmp	r8, r3
 800f564:	f04f 0200 	mov.w	r2, #0
 800f568:	d924      	bls.n	800f5b4 <__ieee754_pow+0x2a4>
 800f56a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f56e:	2300      	movs	r3, #0
 800f570:	f7f1 fab4 	bl	8000adc <__aeabi_dcmplt>
 800f574:	3800      	subs	r0, #0
 800f576:	bf18      	it	ne
 800f578:	2001      	movne	r0, #1
 800f57a:	f1b9 0f00 	cmp.w	r9, #0
 800f57e:	dccf      	bgt.n	800f520 <__ieee754_pow+0x210>
 800f580:	e7da      	b.n	800f538 <__ieee754_pow+0x228>
 800f582:	bf00      	nop
 800f584:	f3af 8000 	nop.w
 800f588:	00000000 	.word	0x00000000
 800f58c:	3ff00000 	.word	0x3ff00000
 800f590:	00000000 	.word	0x00000000
 800f594:	bff00000 	.word	0xbff00000
 800f598:	fff00000 	.word	0xfff00000
 800f59c:	7ff00000 	.word	0x7ff00000
 800f5a0:	433fffff 	.word	0x433fffff
 800f5a4:	3ff00000 	.word	0x3ff00000
 800f5a8:	3fefffff 	.word	0x3fefffff
 800f5ac:	3fe00000 	.word	0x3fe00000
 800f5b0:	43f00000 	.word	0x43f00000
 800f5b4:	4b5a      	ldr	r3, [pc, #360]	@ (800f720 <__ieee754_pow+0x410>)
 800f5b6:	f7f0 fe67 	bl	8000288 <__aeabi_dsub>
 800f5ba:	a351      	add	r3, pc, #324	@ (adr r3, 800f700 <__ieee754_pow+0x3f0>)
 800f5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	460d      	mov	r5, r1
 800f5c4:	f7f1 f818 	bl	80005f8 <__aeabi_dmul>
 800f5c8:	a34f      	add	r3, pc, #316	@ (adr r3, 800f708 <__ieee754_pow+0x3f8>)
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	460f      	mov	r7, r1
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	4629      	mov	r1, r5
 800f5d6:	f7f1 f80f 	bl	80005f8 <__aeabi_dmul>
 800f5da:	4b52      	ldr	r3, [pc, #328]	@ (800f724 <__ieee754_pow+0x414>)
 800f5dc:	4682      	mov	sl, r0
 800f5de:	468b      	mov	fp, r1
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	f7f1 f807 	bl	80005f8 <__aeabi_dmul>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	a148      	add	r1, pc, #288	@ (adr r1, 800f710 <__ieee754_pow+0x400>)
 800f5f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5f4:	f7f0 fe48 	bl	8000288 <__aeabi_dsub>
 800f5f8:	4622      	mov	r2, r4
 800f5fa:	462b      	mov	r3, r5
 800f5fc:	f7f0 fffc 	bl	80005f8 <__aeabi_dmul>
 800f600:	4602      	mov	r2, r0
 800f602:	460b      	mov	r3, r1
 800f604:	2000      	movs	r0, #0
 800f606:	4948      	ldr	r1, [pc, #288]	@ (800f728 <__ieee754_pow+0x418>)
 800f608:	f7f0 fe3e 	bl	8000288 <__aeabi_dsub>
 800f60c:	4622      	mov	r2, r4
 800f60e:	4680      	mov	r8, r0
 800f610:	4689      	mov	r9, r1
 800f612:	462b      	mov	r3, r5
 800f614:	4620      	mov	r0, r4
 800f616:	4629      	mov	r1, r5
 800f618:	f7f0 ffee 	bl	80005f8 <__aeabi_dmul>
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	4640      	mov	r0, r8
 800f622:	4649      	mov	r1, r9
 800f624:	f7f0 ffe8 	bl	80005f8 <__aeabi_dmul>
 800f628:	a33b      	add	r3, pc, #236	@ (adr r3, 800f718 <__ieee754_pow+0x408>)
 800f62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62e:	f7f0 ffe3 	bl	80005f8 <__aeabi_dmul>
 800f632:	4602      	mov	r2, r0
 800f634:	460b      	mov	r3, r1
 800f636:	4650      	mov	r0, sl
 800f638:	4659      	mov	r1, fp
 800f63a:	f7f0 fe25 	bl	8000288 <__aeabi_dsub>
 800f63e:	4602      	mov	r2, r0
 800f640:	460b      	mov	r3, r1
 800f642:	4680      	mov	r8, r0
 800f644:	4689      	mov	r9, r1
 800f646:	4630      	mov	r0, r6
 800f648:	4639      	mov	r1, r7
 800f64a:	f7f0 fe1f 	bl	800028c <__adddf3>
 800f64e:	2400      	movs	r4, #0
 800f650:	4632      	mov	r2, r6
 800f652:	463b      	mov	r3, r7
 800f654:	4620      	mov	r0, r4
 800f656:	460d      	mov	r5, r1
 800f658:	f7f0 fe16 	bl	8000288 <__aeabi_dsub>
 800f65c:	4602      	mov	r2, r0
 800f65e:	460b      	mov	r3, r1
 800f660:	4640      	mov	r0, r8
 800f662:	4649      	mov	r1, r9
 800f664:	f7f0 fe10 	bl	8000288 <__aeabi_dsub>
 800f668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f66c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f670:	2300      	movs	r3, #0
 800f672:	9304      	str	r3, [sp, #16]
 800f674:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f678:	4606      	mov	r6, r0
 800f67a:	460f      	mov	r7, r1
 800f67c:	4652      	mov	r2, sl
 800f67e:	465b      	mov	r3, fp
 800f680:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f684:	f7f0 fe00 	bl	8000288 <__aeabi_dsub>
 800f688:	4622      	mov	r2, r4
 800f68a:	462b      	mov	r3, r5
 800f68c:	f7f0 ffb4 	bl	80005f8 <__aeabi_dmul>
 800f690:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f694:	4680      	mov	r8, r0
 800f696:	4689      	mov	r9, r1
 800f698:	4630      	mov	r0, r6
 800f69a:	4639      	mov	r1, r7
 800f69c:	f7f0 ffac 	bl	80005f8 <__aeabi_dmul>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	4640      	mov	r0, r8
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	f7f0 fdf0 	bl	800028c <__adddf3>
 800f6ac:	4652      	mov	r2, sl
 800f6ae:	465b      	mov	r3, fp
 800f6b0:	4606      	mov	r6, r0
 800f6b2:	460f      	mov	r7, r1
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	4629      	mov	r1, r5
 800f6b8:	f7f0 ff9e 	bl	80005f8 <__aeabi_dmul>
 800f6bc:	460b      	mov	r3, r1
 800f6be:	4602      	mov	r2, r0
 800f6c0:	4680      	mov	r8, r0
 800f6c2:	4689      	mov	r9, r1
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	f7f0 fde0 	bl	800028c <__adddf3>
 800f6cc:	4b17      	ldr	r3, [pc, #92]	@ (800f72c <__ieee754_pow+0x41c>)
 800f6ce:	4299      	cmp	r1, r3
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	460d      	mov	r5, r1
 800f6d4:	468a      	mov	sl, r1
 800f6d6:	468b      	mov	fp, r1
 800f6d8:	f340 82ef 	ble.w	800fcba <__ieee754_pow+0x9aa>
 800f6dc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f6e0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f6e4:	4303      	orrs	r3, r0
 800f6e6:	f000 81e8 	beq.w	800faba <__ieee754_pow+0x7aa>
 800f6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	f7f1 f9f3 	bl	8000adc <__aeabi_dcmplt>
 800f6f6:	3800      	subs	r0, #0
 800f6f8:	bf18      	it	ne
 800f6fa:	2001      	movne	r0, #1
 800f6fc:	e710      	b.n	800f520 <__ieee754_pow+0x210>
 800f6fe:	bf00      	nop
 800f700:	60000000 	.word	0x60000000
 800f704:	3ff71547 	.word	0x3ff71547
 800f708:	f85ddf44 	.word	0xf85ddf44
 800f70c:	3e54ae0b 	.word	0x3e54ae0b
 800f710:	55555555 	.word	0x55555555
 800f714:	3fd55555 	.word	0x3fd55555
 800f718:	652b82fe 	.word	0x652b82fe
 800f71c:	3ff71547 	.word	0x3ff71547
 800f720:	3ff00000 	.word	0x3ff00000
 800f724:	3fd00000 	.word	0x3fd00000
 800f728:	3fe00000 	.word	0x3fe00000
 800f72c:	408fffff 	.word	0x408fffff
 800f730:	4bd5      	ldr	r3, [pc, #852]	@ (800fa88 <__ieee754_pow+0x778>)
 800f732:	402b      	ands	r3, r5
 800f734:	2200      	movs	r2, #0
 800f736:	b92b      	cbnz	r3, 800f744 <__ieee754_pow+0x434>
 800f738:	4bd4      	ldr	r3, [pc, #848]	@ (800fa8c <__ieee754_pow+0x77c>)
 800f73a:	f7f0 ff5d 	bl	80005f8 <__aeabi_dmul>
 800f73e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f742:	468b      	mov	fp, r1
 800f744:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f748:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f74c:	4413      	add	r3, r2
 800f74e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f750:	4bcf      	ldr	r3, [pc, #828]	@ (800fa90 <__ieee754_pow+0x780>)
 800f752:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f756:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f75a:	459b      	cmp	fp, r3
 800f75c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f760:	dd08      	ble.n	800f774 <__ieee754_pow+0x464>
 800f762:	4bcc      	ldr	r3, [pc, #816]	@ (800fa94 <__ieee754_pow+0x784>)
 800f764:	459b      	cmp	fp, r3
 800f766:	f340 81a5 	ble.w	800fab4 <__ieee754_pow+0x7a4>
 800f76a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f76c:	3301      	adds	r3, #1
 800f76e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f770:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f774:	f04f 0a00 	mov.w	sl, #0
 800f778:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f77c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f77e:	4bc6      	ldr	r3, [pc, #792]	@ (800fa98 <__ieee754_pow+0x788>)
 800f780:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f784:	ed93 7b00 	vldr	d7, [r3]
 800f788:	4629      	mov	r1, r5
 800f78a:	ec53 2b17 	vmov	r2, r3, d7
 800f78e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f792:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f796:	f7f0 fd77 	bl	8000288 <__aeabi_dsub>
 800f79a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f79e:	4606      	mov	r6, r0
 800f7a0:	460f      	mov	r7, r1
 800f7a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7a6:	f7f0 fd71 	bl	800028c <__adddf3>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	2000      	movs	r0, #0
 800f7b0:	49ba      	ldr	r1, [pc, #744]	@ (800fa9c <__ieee754_pow+0x78c>)
 800f7b2:	f7f1 f84b 	bl	800084c <__aeabi_ddiv>
 800f7b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	460b      	mov	r3, r1
 800f7be:	4630      	mov	r0, r6
 800f7c0:	4639      	mov	r1, r7
 800f7c2:	f7f0 ff19 	bl	80005f8 <__aeabi_dmul>
 800f7c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7ca:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f7ce:	106d      	asrs	r5, r5, #1
 800f7d0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f7d4:	f04f 0b00 	mov.w	fp, #0
 800f7d8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f7dc:	4661      	mov	r1, ip
 800f7de:	2200      	movs	r2, #0
 800f7e0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f7e4:	4658      	mov	r0, fp
 800f7e6:	46e1      	mov	r9, ip
 800f7e8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f7ec:	4614      	mov	r4, r2
 800f7ee:	461d      	mov	r5, r3
 800f7f0:	f7f0 ff02 	bl	80005f8 <__aeabi_dmul>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	f7f0 fd44 	bl	8000288 <__aeabi_dsub>
 800f800:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f804:	4606      	mov	r6, r0
 800f806:	460f      	mov	r7, r1
 800f808:	4620      	mov	r0, r4
 800f80a:	4629      	mov	r1, r5
 800f80c:	f7f0 fd3c 	bl	8000288 <__aeabi_dsub>
 800f810:	4602      	mov	r2, r0
 800f812:	460b      	mov	r3, r1
 800f814:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f818:	f7f0 fd36 	bl	8000288 <__aeabi_dsub>
 800f81c:	465a      	mov	r2, fp
 800f81e:	464b      	mov	r3, r9
 800f820:	f7f0 feea 	bl	80005f8 <__aeabi_dmul>
 800f824:	4602      	mov	r2, r0
 800f826:	460b      	mov	r3, r1
 800f828:	4630      	mov	r0, r6
 800f82a:	4639      	mov	r1, r7
 800f82c:	f7f0 fd2c 	bl	8000288 <__aeabi_dsub>
 800f830:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f834:	f7f0 fee0 	bl	80005f8 <__aeabi_dmul>
 800f838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f83c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f840:	4610      	mov	r0, r2
 800f842:	4619      	mov	r1, r3
 800f844:	f7f0 fed8 	bl	80005f8 <__aeabi_dmul>
 800f848:	a37d      	add	r3, pc, #500	@ (adr r3, 800fa40 <__ieee754_pow+0x730>)
 800f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84e:	4604      	mov	r4, r0
 800f850:	460d      	mov	r5, r1
 800f852:	f7f0 fed1 	bl	80005f8 <__aeabi_dmul>
 800f856:	a37c      	add	r3, pc, #496	@ (adr r3, 800fa48 <__ieee754_pow+0x738>)
 800f858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85c:	f7f0 fd16 	bl	800028c <__adddf3>
 800f860:	4622      	mov	r2, r4
 800f862:	462b      	mov	r3, r5
 800f864:	f7f0 fec8 	bl	80005f8 <__aeabi_dmul>
 800f868:	a379      	add	r3, pc, #484	@ (adr r3, 800fa50 <__ieee754_pow+0x740>)
 800f86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86e:	f7f0 fd0d 	bl	800028c <__adddf3>
 800f872:	4622      	mov	r2, r4
 800f874:	462b      	mov	r3, r5
 800f876:	f7f0 febf 	bl	80005f8 <__aeabi_dmul>
 800f87a:	a377      	add	r3, pc, #476	@ (adr r3, 800fa58 <__ieee754_pow+0x748>)
 800f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f880:	f7f0 fd04 	bl	800028c <__adddf3>
 800f884:	4622      	mov	r2, r4
 800f886:	462b      	mov	r3, r5
 800f888:	f7f0 feb6 	bl	80005f8 <__aeabi_dmul>
 800f88c:	a374      	add	r3, pc, #464	@ (adr r3, 800fa60 <__ieee754_pow+0x750>)
 800f88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f892:	f7f0 fcfb 	bl	800028c <__adddf3>
 800f896:	4622      	mov	r2, r4
 800f898:	462b      	mov	r3, r5
 800f89a:	f7f0 fead 	bl	80005f8 <__aeabi_dmul>
 800f89e:	a372      	add	r3, pc, #456	@ (adr r3, 800fa68 <__ieee754_pow+0x758>)
 800f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a4:	f7f0 fcf2 	bl	800028c <__adddf3>
 800f8a8:	4622      	mov	r2, r4
 800f8aa:	4606      	mov	r6, r0
 800f8ac:	460f      	mov	r7, r1
 800f8ae:	462b      	mov	r3, r5
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	4629      	mov	r1, r5
 800f8b4:	f7f0 fea0 	bl	80005f8 <__aeabi_dmul>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	4630      	mov	r0, r6
 800f8be:	4639      	mov	r1, r7
 800f8c0:	f7f0 fe9a 	bl	80005f8 <__aeabi_dmul>
 800f8c4:	465a      	mov	r2, fp
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	460d      	mov	r5, r1
 800f8ca:	464b      	mov	r3, r9
 800f8cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8d0:	f7f0 fcdc 	bl	800028c <__adddf3>
 800f8d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f8d8:	f7f0 fe8e 	bl	80005f8 <__aeabi_dmul>
 800f8dc:	4622      	mov	r2, r4
 800f8de:	462b      	mov	r3, r5
 800f8e0:	f7f0 fcd4 	bl	800028c <__adddf3>
 800f8e4:	465a      	mov	r2, fp
 800f8e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f8ea:	464b      	mov	r3, r9
 800f8ec:	4658      	mov	r0, fp
 800f8ee:	4649      	mov	r1, r9
 800f8f0:	f7f0 fe82 	bl	80005f8 <__aeabi_dmul>
 800f8f4:	4b6a      	ldr	r3, [pc, #424]	@ (800faa0 <__ieee754_pow+0x790>)
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	4606      	mov	r6, r0
 800f8fa:	460f      	mov	r7, r1
 800f8fc:	f7f0 fcc6 	bl	800028c <__adddf3>
 800f900:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f904:	f7f0 fcc2 	bl	800028c <__adddf3>
 800f908:	46d8      	mov	r8, fp
 800f90a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f90e:	460d      	mov	r5, r1
 800f910:	465a      	mov	r2, fp
 800f912:	460b      	mov	r3, r1
 800f914:	4640      	mov	r0, r8
 800f916:	4649      	mov	r1, r9
 800f918:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f91c:	f7f0 fe6c 	bl	80005f8 <__aeabi_dmul>
 800f920:	465c      	mov	r4, fp
 800f922:	4680      	mov	r8, r0
 800f924:	4689      	mov	r9, r1
 800f926:	4b5e      	ldr	r3, [pc, #376]	@ (800faa0 <__ieee754_pow+0x790>)
 800f928:	2200      	movs	r2, #0
 800f92a:	4620      	mov	r0, r4
 800f92c:	4629      	mov	r1, r5
 800f92e:	f7f0 fcab 	bl	8000288 <__aeabi_dsub>
 800f932:	4632      	mov	r2, r6
 800f934:	463b      	mov	r3, r7
 800f936:	f7f0 fca7 	bl	8000288 <__aeabi_dsub>
 800f93a:	4602      	mov	r2, r0
 800f93c:	460b      	mov	r3, r1
 800f93e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f942:	f7f0 fca1 	bl	8000288 <__aeabi_dsub>
 800f946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f94a:	f7f0 fe55 	bl	80005f8 <__aeabi_dmul>
 800f94e:	4622      	mov	r2, r4
 800f950:	4606      	mov	r6, r0
 800f952:	460f      	mov	r7, r1
 800f954:	462b      	mov	r3, r5
 800f956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f95a:	f7f0 fe4d 	bl	80005f8 <__aeabi_dmul>
 800f95e:	4602      	mov	r2, r0
 800f960:	460b      	mov	r3, r1
 800f962:	4630      	mov	r0, r6
 800f964:	4639      	mov	r1, r7
 800f966:	f7f0 fc91 	bl	800028c <__adddf3>
 800f96a:	4606      	mov	r6, r0
 800f96c:	460f      	mov	r7, r1
 800f96e:	4602      	mov	r2, r0
 800f970:	460b      	mov	r3, r1
 800f972:	4640      	mov	r0, r8
 800f974:	4649      	mov	r1, r9
 800f976:	f7f0 fc89 	bl	800028c <__adddf3>
 800f97a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f97e:	a33c      	add	r3, pc, #240	@ (adr r3, 800fa70 <__ieee754_pow+0x760>)
 800f980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f984:	4658      	mov	r0, fp
 800f986:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f98a:	460d      	mov	r5, r1
 800f98c:	f7f0 fe34 	bl	80005f8 <__aeabi_dmul>
 800f990:	465c      	mov	r4, fp
 800f992:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f996:	4642      	mov	r2, r8
 800f998:	464b      	mov	r3, r9
 800f99a:	4620      	mov	r0, r4
 800f99c:	4629      	mov	r1, r5
 800f99e:	f7f0 fc73 	bl	8000288 <__aeabi_dsub>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	4639      	mov	r1, r7
 800f9aa:	f7f0 fc6d 	bl	8000288 <__aeabi_dsub>
 800f9ae:	a332      	add	r3, pc, #200	@ (adr r3, 800fa78 <__ieee754_pow+0x768>)
 800f9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b4:	f7f0 fe20 	bl	80005f8 <__aeabi_dmul>
 800f9b8:	a331      	add	r3, pc, #196	@ (adr r3, 800fa80 <__ieee754_pow+0x770>)
 800f9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9be:	4606      	mov	r6, r0
 800f9c0:	460f      	mov	r7, r1
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	4629      	mov	r1, r5
 800f9c6:	f7f0 fe17 	bl	80005f8 <__aeabi_dmul>
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	4639      	mov	r1, r7
 800f9d2:	f7f0 fc5b 	bl	800028c <__adddf3>
 800f9d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f9d8:	4b32      	ldr	r3, [pc, #200]	@ (800faa4 <__ieee754_pow+0x794>)
 800f9da:	4413      	add	r3, r2
 800f9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e0:	f7f0 fc54 	bl	800028c <__adddf3>
 800f9e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f9e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f9ea:	f7f0 fd9b 	bl	8000524 <__aeabi_i2d>
 800f9ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f9f0:	4b2d      	ldr	r3, [pc, #180]	@ (800faa8 <__ieee754_pow+0x798>)
 800f9f2:	4413      	add	r3, r2
 800f9f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9f8:	4606      	mov	r6, r0
 800f9fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f9fe:	460f      	mov	r7, r1
 800fa00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa04:	f7f0 fc42 	bl	800028c <__adddf3>
 800fa08:	4642      	mov	r2, r8
 800fa0a:	464b      	mov	r3, r9
 800fa0c:	f7f0 fc3e 	bl	800028c <__adddf3>
 800fa10:	4632      	mov	r2, r6
 800fa12:	463b      	mov	r3, r7
 800fa14:	f7f0 fc3a 	bl	800028c <__adddf3>
 800fa18:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800fa1c:	4632      	mov	r2, r6
 800fa1e:	463b      	mov	r3, r7
 800fa20:	4658      	mov	r0, fp
 800fa22:	460d      	mov	r5, r1
 800fa24:	f7f0 fc30 	bl	8000288 <__aeabi_dsub>
 800fa28:	4642      	mov	r2, r8
 800fa2a:	464b      	mov	r3, r9
 800fa2c:	f7f0 fc2c 	bl	8000288 <__aeabi_dsub>
 800fa30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa34:	f7f0 fc28 	bl	8000288 <__aeabi_dsub>
 800fa38:	465c      	mov	r4, fp
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	e036      	b.n	800faac <__ieee754_pow+0x79c>
 800fa3e:	bf00      	nop
 800fa40:	4a454eef 	.word	0x4a454eef
 800fa44:	3fca7e28 	.word	0x3fca7e28
 800fa48:	93c9db65 	.word	0x93c9db65
 800fa4c:	3fcd864a 	.word	0x3fcd864a
 800fa50:	a91d4101 	.word	0xa91d4101
 800fa54:	3fd17460 	.word	0x3fd17460
 800fa58:	518f264d 	.word	0x518f264d
 800fa5c:	3fd55555 	.word	0x3fd55555
 800fa60:	db6fabff 	.word	0xdb6fabff
 800fa64:	3fdb6db6 	.word	0x3fdb6db6
 800fa68:	33333303 	.word	0x33333303
 800fa6c:	3fe33333 	.word	0x3fe33333
 800fa70:	e0000000 	.word	0xe0000000
 800fa74:	3feec709 	.word	0x3feec709
 800fa78:	dc3a03fd 	.word	0xdc3a03fd
 800fa7c:	3feec709 	.word	0x3feec709
 800fa80:	145b01f5 	.word	0x145b01f5
 800fa84:	be3e2fe0 	.word	0xbe3e2fe0
 800fa88:	7ff00000 	.word	0x7ff00000
 800fa8c:	43400000 	.word	0x43400000
 800fa90:	0003988e 	.word	0x0003988e
 800fa94:	000bb679 	.word	0x000bb679
 800fa98:	080112a0 	.word	0x080112a0
 800fa9c:	3ff00000 	.word	0x3ff00000
 800faa0:	40080000 	.word	0x40080000
 800faa4:	08011280 	.word	0x08011280
 800faa8:	08011290 	.word	0x08011290
 800faac:	460b      	mov	r3, r1
 800faae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fab2:	e5d7      	b.n	800f664 <__ieee754_pow+0x354>
 800fab4:	f04f 0a01 	mov.w	sl, #1
 800fab8:	e65e      	b.n	800f778 <__ieee754_pow+0x468>
 800faba:	a3b4      	add	r3, pc, #720	@ (adr r3, 800fd8c <__ieee754_pow+0xa7c>)
 800fabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac0:	4630      	mov	r0, r6
 800fac2:	4639      	mov	r1, r7
 800fac4:	f7f0 fbe2 	bl	800028c <__adddf3>
 800fac8:	4642      	mov	r2, r8
 800faca:	e9cd 0100 	strd	r0, r1, [sp]
 800face:	464b      	mov	r3, r9
 800fad0:	4620      	mov	r0, r4
 800fad2:	4629      	mov	r1, r5
 800fad4:	f7f0 fbd8 	bl	8000288 <__aeabi_dsub>
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fae0:	f7f1 f81a 	bl	8000b18 <__aeabi_dcmpgt>
 800fae4:	2800      	cmp	r0, #0
 800fae6:	f47f ae00 	bne.w	800f6ea <__ieee754_pow+0x3da>
 800faea:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800faee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800faf2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800faf6:	fa43 fa0a 	asr.w	sl, r3, sl
 800fafa:	44da      	add	sl, fp
 800fafc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800fb00:	489d      	ldr	r0, [pc, #628]	@ (800fd78 <__ieee754_pow+0xa68>)
 800fb02:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800fb06:	4108      	asrs	r0, r1
 800fb08:	ea00 030a 	and.w	r3, r0, sl
 800fb0c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fb10:	f1c1 0114 	rsb	r1, r1, #20
 800fb14:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800fb18:	fa4a fa01 	asr.w	sl, sl, r1
 800fb1c:	f1bb 0f00 	cmp.w	fp, #0
 800fb20:	4640      	mov	r0, r8
 800fb22:	4649      	mov	r1, r9
 800fb24:	f04f 0200 	mov.w	r2, #0
 800fb28:	bfb8      	it	lt
 800fb2a:	f1ca 0a00 	rsblt	sl, sl, #0
 800fb2e:	f7f0 fbab 	bl	8000288 <__aeabi_dsub>
 800fb32:	4680      	mov	r8, r0
 800fb34:	4689      	mov	r9, r1
 800fb36:	4632      	mov	r2, r6
 800fb38:	463b      	mov	r3, r7
 800fb3a:	4640      	mov	r0, r8
 800fb3c:	4649      	mov	r1, r9
 800fb3e:	f7f0 fba5 	bl	800028c <__adddf3>
 800fb42:	2400      	movs	r4, #0
 800fb44:	a37c      	add	r3, pc, #496	@ (adr r3, 800fd38 <__ieee754_pow+0xa28>)
 800fb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	460d      	mov	r5, r1
 800fb4e:	f7f0 fd53 	bl	80005f8 <__aeabi_dmul>
 800fb52:	4642      	mov	r2, r8
 800fb54:	e9cd 0100 	strd	r0, r1, [sp]
 800fb58:	464b      	mov	r3, r9
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	4629      	mov	r1, r5
 800fb5e:	f7f0 fb93 	bl	8000288 <__aeabi_dsub>
 800fb62:	4602      	mov	r2, r0
 800fb64:	460b      	mov	r3, r1
 800fb66:	4630      	mov	r0, r6
 800fb68:	4639      	mov	r1, r7
 800fb6a:	f7f0 fb8d 	bl	8000288 <__aeabi_dsub>
 800fb6e:	a374      	add	r3, pc, #464	@ (adr r3, 800fd40 <__ieee754_pow+0xa30>)
 800fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb74:	f7f0 fd40 	bl	80005f8 <__aeabi_dmul>
 800fb78:	a373      	add	r3, pc, #460	@ (adr r3, 800fd48 <__ieee754_pow+0xa38>)
 800fb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7e:	4680      	mov	r8, r0
 800fb80:	4689      	mov	r9, r1
 800fb82:	4620      	mov	r0, r4
 800fb84:	4629      	mov	r1, r5
 800fb86:	f7f0 fd37 	bl	80005f8 <__aeabi_dmul>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	4640      	mov	r0, r8
 800fb90:	4649      	mov	r1, r9
 800fb92:	f7f0 fb7b 	bl	800028c <__adddf3>
 800fb96:	4604      	mov	r4, r0
 800fb98:	460d      	mov	r5, r1
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fba2:	f7f0 fb73 	bl	800028c <__adddf3>
 800fba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbaa:	4680      	mov	r8, r0
 800fbac:	4689      	mov	r9, r1
 800fbae:	f7f0 fb6b 	bl	8000288 <__aeabi_dsub>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	4629      	mov	r1, r5
 800fbba:	f7f0 fb65 	bl	8000288 <__aeabi_dsub>
 800fbbe:	4642      	mov	r2, r8
 800fbc0:	4606      	mov	r6, r0
 800fbc2:	460f      	mov	r7, r1
 800fbc4:	464b      	mov	r3, r9
 800fbc6:	4640      	mov	r0, r8
 800fbc8:	4649      	mov	r1, r9
 800fbca:	f7f0 fd15 	bl	80005f8 <__aeabi_dmul>
 800fbce:	a360      	add	r3, pc, #384	@ (adr r3, 800fd50 <__ieee754_pow+0xa40>)
 800fbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd4:	4604      	mov	r4, r0
 800fbd6:	460d      	mov	r5, r1
 800fbd8:	f7f0 fd0e 	bl	80005f8 <__aeabi_dmul>
 800fbdc:	a35e      	add	r3, pc, #376	@ (adr r3, 800fd58 <__ieee754_pow+0xa48>)
 800fbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe2:	f7f0 fb51 	bl	8000288 <__aeabi_dsub>
 800fbe6:	4622      	mov	r2, r4
 800fbe8:	462b      	mov	r3, r5
 800fbea:	f7f0 fd05 	bl	80005f8 <__aeabi_dmul>
 800fbee:	a35c      	add	r3, pc, #368	@ (adr r3, 800fd60 <__ieee754_pow+0xa50>)
 800fbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf4:	f7f0 fb4a 	bl	800028c <__adddf3>
 800fbf8:	4622      	mov	r2, r4
 800fbfa:	462b      	mov	r3, r5
 800fbfc:	f7f0 fcfc 	bl	80005f8 <__aeabi_dmul>
 800fc00:	a359      	add	r3, pc, #356	@ (adr r3, 800fd68 <__ieee754_pow+0xa58>)
 800fc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc06:	f7f0 fb3f 	bl	8000288 <__aeabi_dsub>
 800fc0a:	4622      	mov	r2, r4
 800fc0c:	462b      	mov	r3, r5
 800fc0e:	f7f0 fcf3 	bl	80005f8 <__aeabi_dmul>
 800fc12:	a357      	add	r3, pc, #348	@ (adr r3, 800fd70 <__ieee754_pow+0xa60>)
 800fc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc18:	f7f0 fb38 	bl	800028c <__adddf3>
 800fc1c:	4622      	mov	r2, r4
 800fc1e:	462b      	mov	r3, r5
 800fc20:	f7f0 fcea 	bl	80005f8 <__aeabi_dmul>
 800fc24:	4602      	mov	r2, r0
 800fc26:	460b      	mov	r3, r1
 800fc28:	4640      	mov	r0, r8
 800fc2a:	4649      	mov	r1, r9
 800fc2c:	f7f0 fb2c 	bl	8000288 <__aeabi_dsub>
 800fc30:	4604      	mov	r4, r0
 800fc32:	460d      	mov	r5, r1
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	4640      	mov	r0, r8
 800fc3a:	4649      	mov	r1, r9
 800fc3c:	f7f0 fcdc 	bl	80005f8 <__aeabi_dmul>
 800fc40:	2200      	movs	r2, #0
 800fc42:	e9cd 0100 	strd	r0, r1, [sp]
 800fc46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	f7f0 fb1b 	bl	8000288 <__aeabi_dsub>
 800fc52:	4602      	mov	r2, r0
 800fc54:	460b      	mov	r3, r1
 800fc56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc5a:	f7f0 fdf7 	bl	800084c <__aeabi_ddiv>
 800fc5e:	4632      	mov	r2, r6
 800fc60:	4604      	mov	r4, r0
 800fc62:	460d      	mov	r5, r1
 800fc64:	463b      	mov	r3, r7
 800fc66:	4640      	mov	r0, r8
 800fc68:	4649      	mov	r1, r9
 800fc6a:	f7f0 fcc5 	bl	80005f8 <__aeabi_dmul>
 800fc6e:	4632      	mov	r2, r6
 800fc70:	463b      	mov	r3, r7
 800fc72:	f7f0 fb0b 	bl	800028c <__adddf3>
 800fc76:	4602      	mov	r2, r0
 800fc78:	460b      	mov	r3, r1
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	4629      	mov	r1, r5
 800fc7e:	f7f0 fb03 	bl	8000288 <__aeabi_dsub>
 800fc82:	4642      	mov	r2, r8
 800fc84:	464b      	mov	r3, r9
 800fc86:	f7f0 faff 	bl	8000288 <__aeabi_dsub>
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	4602      	mov	r2, r0
 800fc8e:	493b      	ldr	r1, [pc, #236]	@ (800fd7c <__ieee754_pow+0xa6c>)
 800fc90:	2000      	movs	r0, #0
 800fc92:	f7f0 faf9 	bl	8000288 <__aeabi_dsub>
 800fc96:	ec41 0b10 	vmov	d0, r0, r1
 800fc9a:	ee10 3a90 	vmov	r3, s1
 800fc9e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fca6:	da30      	bge.n	800fd0a <__ieee754_pow+0x9fa>
 800fca8:	4650      	mov	r0, sl
 800fcaa:	f000 fcad 	bl	8010608 <scalbn>
 800fcae:	ec51 0b10 	vmov	r0, r1, d0
 800fcb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcb6:	f7ff bbd2 	b.w	800f45e <__ieee754_pow+0x14e>
 800fcba:	4c31      	ldr	r4, [pc, #196]	@ (800fd80 <__ieee754_pow+0xa70>)
 800fcbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fcc0:	42a3      	cmp	r3, r4
 800fcc2:	d91a      	bls.n	800fcfa <__ieee754_pow+0x9ea>
 800fcc4:	4b2f      	ldr	r3, [pc, #188]	@ (800fd84 <__ieee754_pow+0xa74>)
 800fcc6:	440b      	add	r3, r1
 800fcc8:	4303      	orrs	r3, r0
 800fcca:	d009      	beq.n	800fce0 <__ieee754_pow+0x9d0>
 800fccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	f7f0 ff02 	bl	8000adc <__aeabi_dcmplt>
 800fcd8:	3800      	subs	r0, #0
 800fcda:	bf18      	it	ne
 800fcdc:	2001      	movne	r0, #1
 800fcde:	e42b      	b.n	800f538 <__ieee754_pow+0x228>
 800fce0:	4642      	mov	r2, r8
 800fce2:	464b      	mov	r3, r9
 800fce4:	f7f0 fad0 	bl	8000288 <__aeabi_dsub>
 800fce8:	4632      	mov	r2, r6
 800fcea:	463b      	mov	r3, r7
 800fcec:	f7f0 ff0a 	bl	8000b04 <__aeabi_dcmpge>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	d1eb      	bne.n	800fccc <__ieee754_pow+0x9bc>
 800fcf4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800fd94 <__ieee754_pow+0xa84>
 800fcf8:	e6f7      	b.n	800faea <__ieee754_pow+0x7da>
 800fcfa:	469a      	mov	sl, r3
 800fcfc:	4b22      	ldr	r3, [pc, #136]	@ (800fd88 <__ieee754_pow+0xa78>)
 800fcfe:	459a      	cmp	sl, r3
 800fd00:	f63f aef3 	bhi.w	800faea <__ieee754_pow+0x7da>
 800fd04:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fd08:	e715      	b.n	800fb36 <__ieee754_pow+0x826>
 800fd0a:	ec51 0b10 	vmov	r0, r1, d0
 800fd0e:	4619      	mov	r1, r3
 800fd10:	e7cf      	b.n	800fcb2 <__ieee754_pow+0x9a2>
 800fd12:	491a      	ldr	r1, [pc, #104]	@ (800fd7c <__ieee754_pow+0xa6c>)
 800fd14:	2000      	movs	r0, #0
 800fd16:	f7ff bb18 	b.w	800f34a <__ieee754_pow+0x3a>
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	f7ff bb14 	b.w	800f34a <__ieee754_pow+0x3a>
 800fd22:	4630      	mov	r0, r6
 800fd24:	4639      	mov	r1, r7
 800fd26:	f7ff bb10 	b.w	800f34a <__ieee754_pow+0x3a>
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	f7ff bb5e 	b.w	800f3ec <__ieee754_pow+0xdc>
 800fd30:	2400      	movs	r4, #0
 800fd32:	f7ff bb49 	b.w	800f3c8 <__ieee754_pow+0xb8>
 800fd36:	bf00      	nop
 800fd38:	00000000 	.word	0x00000000
 800fd3c:	3fe62e43 	.word	0x3fe62e43
 800fd40:	fefa39ef 	.word	0xfefa39ef
 800fd44:	3fe62e42 	.word	0x3fe62e42
 800fd48:	0ca86c39 	.word	0x0ca86c39
 800fd4c:	be205c61 	.word	0xbe205c61
 800fd50:	72bea4d0 	.word	0x72bea4d0
 800fd54:	3e663769 	.word	0x3e663769
 800fd58:	c5d26bf1 	.word	0xc5d26bf1
 800fd5c:	3ebbbd41 	.word	0x3ebbbd41
 800fd60:	af25de2c 	.word	0xaf25de2c
 800fd64:	3f11566a 	.word	0x3f11566a
 800fd68:	16bebd93 	.word	0x16bebd93
 800fd6c:	3f66c16c 	.word	0x3f66c16c
 800fd70:	5555553e 	.word	0x5555553e
 800fd74:	3fc55555 	.word	0x3fc55555
 800fd78:	fff00000 	.word	0xfff00000
 800fd7c:	3ff00000 	.word	0x3ff00000
 800fd80:	4090cbff 	.word	0x4090cbff
 800fd84:	3f6f3400 	.word	0x3f6f3400
 800fd88:	3fe00000 	.word	0x3fe00000
 800fd8c:	652b82fe 	.word	0x652b82fe
 800fd90:	3c971547 	.word	0x3c971547
 800fd94:	4090cc00 	.word	0x4090cc00

0800fd98 <atan>:
 800fd98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9c:	ec55 4b10 	vmov	r4, r5, d0
 800fda0:	4bbf      	ldr	r3, [pc, #764]	@ (80100a0 <atan+0x308>)
 800fda2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800fda6:	429e      	cmp	r6, r3
 800fda8:	46ab      	mov	fp, r5
 800fdaa:	d918      	bls.n	800fdde <atan+0x46>
 800fdac:	4bbd      	ldr	r3, [pc, #756]	@ (80100a4 <atan+0x30c>)
 800fdae:	429e      	cmp	r6, r3
 800fdb0:	d801      	bhi.n	800fdb6 <atan+0x1e>
 800fdb2:	d109      	bne.n	800fdc8 <atan+0x30>
 800fdb4:	b144      	cbz	r4, 800fdc8 <atan+0x30>
 800fdb6:	4622      	mov	r2, r4
 800fdb8:	462b      	mov	r3, r5
 800fdba:	4620      	mov	r0, r4
 800fdbc:	4629      	mov	r1, r5
 800fdbe:	f7f0 fa65 	bl	800028c <__adddf3>
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	460d      	mov	r5, r1
 800fdc6:	e006      	b.n	800fdd6 <atan+0x3e>
 800fdc8:	f1bb 0f00 	cmp.w	fp, #0
 800fdcc:	f340 812b 	ble.w	8010026 <atan+0x28e>
 800fdd0:	a597      	add	r5, pc, #604	@ (adr r5, 8010030 <atan+0x298>)
 800fdd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fdd6:	ec45 4b10 	vmov	d0, r4, r5
 800fdda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdde:	4bb2      	ldr	r3, [pc, #712]	@ (80100a8 <atan+0x310>)
 800fde0:	429e      	cmp	r6, r3
 800fde2:	d813      	bhi.n	800fe0c <atan+0x74>
 800fde4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800fde8:	429e      	cmp	r6, r3
 800fdea:	d80c      	bhi.n	800fe06 <atan+0x6e>
 800fdec:	a392      	add	r3, pc, #584	@ (adr r3, 8010038 <atan+0x2a0>)
 800fdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	f7f0 fa49 	bl	800028c <__adddf3>
 800fdfa:	4bac      	ldr	r3, [pc, #688]	@ (80100ac <atan+0x314>)
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	f7f0 fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d1e7      	bne.n	800fdd6 <atan+0x3e>
 800fe06:	f04f 3aff 	mov.w	sl, #4294967295
 800fe0a:	e029      	b.n	800fe60 <atan+0xc8>
 800fe0c:	f7fe fdec 	bl	800e9e8 <fabs>
 800fe10:	4ba7      	ldr	r3, [pc, #668]	@ (80100b0 <atan+0x318>)
 800fe12:	429e      	cmp	r6, r3
 800fe14:	ec55 4b10 	vmov	r4, r5, d0
 800fe18:	f200 80bc 	bhi.w	800ff94 <atan+0x1fc>
 800fe1c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800fe20:	429e      	cmp	r6, r3
 800fe22:	f200 809e 	bhi.w	800ff62 <atan+0x1ca>
 800fe26:	4622      	mov	r2, r4
 800fe28:	462b      	mov	r3, r5
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	4629      	mov	r1, r5
 800fe2e:	f7f0 fa2d 	bl	800028c <__adddf3>
 800fe32:	4b9e      	ldr	r3, [pc, #632]	@ (80100ac <atan+0x314>)
 800fe34:	2200      	movs	r2, #0
 800fe36:	f7f0 fa27 	bl	8000288 <__aeabi_dsub>
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	4606      	mov	r6, r0
 800fe3e:	460f      	mov	r7, r1
 800fe40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fe44:	4620      	mov	r0, r4
 800fe46:	4629      	mov	r1, r5
 800fe48:	f7f0 fa20 	bl	800028c <__adddf3>
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	460b      	mov	r3, r1
 800fe50:	4630      	mov	r0, r6
 800fe52:	4639      	mov	r1, r7
 800fe54:	f7f0 fcfa 	bl	800084c <__aeabi_ddiv>
 800fe58:	f04f 0a00 	mov.w	sl, #0
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	460d      	mov	r5, r1
 800fe60:	4622      	mov	r2, r4
 800fe62:	462b      	mov	r3, r5
 800fe64:	4620      	mov	r0, r4
 800fe66:	4629      	mov	r1, r5
 800fe68:	f7f0 fbc6 	bl	80005f8 <__aeabi_dmul>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	460b      	mov	r3, r1
 800fe70:	4680      	mov	r8, r0
 800fe72:	4689      	mov	r9, r1
 800fe74:	f7f0 fbc0 	bl	80005f8 <__aeabi_dmul>
 800fe78:	a371      	add	r3, pc, #452	@ (adr r3, 8010040 <atan+0x2a8>)
 800fe7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7e:	4606      	mov	r6, r0
 800fe80:	460f      	mov	r7, r1
 800fe82:	f7f0 fbb9 	bl	80005f8 <__aeabi_dmul>
 800fe86:	a370      	add	r3, pc, #448	@ (adr r3, 8010048 <atan+0x2b0>)
 800fe88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8c:	f7f0 f9fe 	bl	800028c <__adddf3>
 800fe90:	4632      	mov	r2, r6
 800fe92:	463b      	mov	r3, r7
 800fe94:	f7f0 fbb0 	bl	80005f8 <__aeabi_dmul>
 800fe98:	a36d      	add	r3, pc, #436	@ (adr r3, 8010050 <atan+0x2b8>)
 800fe9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9e:	f7f0 f9f5 	bl	800028c <__adddf3>
 800fea2:	4632      	mov	r2, r6
 800fea4:	463b      	mov	r3, r7
 800fea6:	f7f0 fba7 	bl	80005f8 <__aeabi_dmul>
 800feaa:	a36b      	add	r3, pc, #428	@ (adr r3, 8010058 <atan+0x2c0>)
 800feac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb0:	f7f0 f9ec 	bl	800028c <__adddf3>
 800feb4:	4632      	mov	r2, r6
 800feb6:	463b      	mov	r3, r7
 800feb8:	f7f0 fb9e 	bl	80005f8 <__aeabi_dmul>
 800febc:	a368      	add	r3, pc, #416	@ (adr r3, 8010060 <atan+0x2c8>)
 800febe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec2:	f7f0 f9e3 	bl	800028c <__adddf3>
 800fec6:	4632      	mov	r2, r6
 800fec8:	463b      	mov	r3, r7
 800feca:	f7f0 fb95 	bl	80005f8 <__aeabi_dmul>
 800fece:	a366      	add	r3, pc, #408	@ (adr r3, 8010068 <atan+0x2d0>)
 800fed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed4:	f7f0 f9da 	bl	800028c <__adddf3>
 800fed8:	4642      	mov	r2, r8
 800feda:	464b      	mov	r3, r9
 800fedc:	f7f0 fb8c 	bl	80005f8 <__aeabi_dmul>
 800fee0:	a363      	add	r3, pc, #396	@ (adr r3, 8010070 <atan+0x2d8>)
 800fee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee6:	4680      	mov	r8, r0
 800fee8:	4689      	mov	r9, r1
 800feea:	4630      	mov	r0, r6
 800feec:	4639      	mov	r1, r7
 800feee:	f7f0 fb83 	bl	80005f8 <__aeabi_dmul>
 800fef2:	a361      	add	r3, pc, #388	@ (adr r3, 8010078 <atan+0x2e0>)
 800fef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef8:	f7f0 f9c6 	bl	8000288 <__aeabi_dsub>
 800fefc:	4632      	mov	r2, r6
 800fefe:	463b      	mov	r3, r7
 800ff00:	f7f0 fb7a 	bl	80005f8 <__aeabi_dmul>
 800ff04:	a35e      	add	r3, pc, #376	@ (adr r3, 8010080 <atan+0x2e8>)
 800ff06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0a:	f7f0 f9bd 	bl	8000288 <__aeabi_dsub>
 800ff0e:	4632      	mov	r2, r6
 800ff10:	463b      	mov	r3, r7
 800ff12:	f7f0 fb71 	bl	80005f8 <__aeabi_dmul>
 800ff16:	a35c      	add	r3, pc, #368	@ (adr r3, 8010088 <atan+0x2f0>)
 800ff18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1c:	f7f0 f9b4 	bl	8000288 <__aeabi_dsub>
 800ff20:	4632      	mov	r2, r6
 800ff22:	463b      	mov	r3, r7
 800ff24:	f7f0 fb68 	bl	80005f8 <__aeabi_dmul>
 800ff28:	a359      	add	r3, pc, #356	@ (adr r3, 8010090 <atan+0x2f8>)
 800ff2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2e:	f7f0 f9ab 	bl	8000288 <__aeabi_dsub>
 800ff32:	4632      	mov	r2, r6
 800ff34:	463b      	mov	r3, r7
 800ff36:	f7f0 fb5f 	bl	80005f8 <__aeabi_dmul>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	4640      	mov	r0, r8
 800ff40:	4649      	mov	r1, r9
 800ff42:	f7f0 f9a3 	bl	800028c <__adddf3>
 800ff46:	4622      	mov	r2, r4
 800ff48:	462b      	mov	r3, r5
 800ff4a:	f7f0 fb55 	bl	80005f8 <__aeabi_dmul>
 800ff4e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	d148      	bne.n	800ffea <atan+0x252>
 800ff58:	4620      	mov	r0, r4
 800ff5a:	4629      	mov	r1, r5
 800ff5c:	f7f0 f994 	bl	8000288 <__aeabi_dsub>
 800ff60:	e72f      	b.n	800fdc2 <atan+0x2a>
 800ff62:	4b52      	ldr	r3, [pc, #328]	@ (80100ac <atan+0x314>)
 800ff64:	2200      	movs	r2, #0
 800ff66:	4620      	mov	r0, r4
 800ff68:	4629      	mov	r1, r5
 800ff6a:	f7f0 f98d 	bl	8000288 <__aeabi_dsub>
 800ff6e:	4b4f      	ldr	r3, [pc, #316]	@ (80100ac <atan+0x314>)
 800ff70:	4606      	mov	r6, r0
 800ff72:	460f      	mov	r7, r1
 800ff74:	2200      	movs	r2, #0
 800ff76:	4620      	mov	r0, r4
 800ff78:	4629      	mov	r1, r5
 800ff7a:	f7f0 f987 	bl	800028c <__adddf3>
 800ff7e:	4602      	mov	r2, r0
 800ff80:	460b      	mov	r3, r1
 800ff82:	4630      	mov	r0, r6
 800ff84:	4639      	mov	r1, r7
 800ff86:	f7f0 fc61 	bl	800084c <__aeabi_ddiv>
 800ff8a:	f04f 0a01 	mov.w	sl, #1
 800ff8e:	4604      	mov	r4, r0
 800ff90:	460d      	mov	r5, r1
 800ff92:	e765      	b.n	800fe60 <atan+0xc8>
 800ff94:	4b47      	ldr	r3, [pc, #284]	@ (80100b4 <atan+0x31c>)
 800ff96:	429e      	cmp	r6, r3
 800ff98:	d21c      	bcs.n	800ffd4 <atan+0x23c>
 800ff9a:	4b47      	ldr	r3, [pc, #284]	@ (80100b8 <atan+0x320>)
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	f7f0 f971 	bl	8000288 <__aeabi_dsub>
 800ffa6:	4b44      	ldr	r3, [pc, #272]	@ (80100b8 <atan+0x320>)
 800ffa8:	4606      	mov	r6, r0
 800ffaa:	460f      	mov	r7, r1
 800ffac:	2200      	movs	r2, #0
 800ffae:	4620      	mov	r0, r4
 800ffb0:	4629      	mov	r1, r5
 800ffb2:	f7f0 fb21 	bl	80005f8 <__aeabi_dmul>
 800ffb6:	4b3d      	ldr	r3, [pc, #244]	@ (80100ac <atan+0x314>)
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f7f0 f967 	bl	800028c <__adddf3>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	4630      	mov	r0, r6
 800ffc4:	4639      	mov	r1, r7
 800ffc6:	f7f0 fc41 	bl	800084c <__aeabi_ddiv>
 800ffca:	f04f 0a02 	mov.w	sl, #2
 800ffce:	4604      	mov	r4, r0
 800ffd0:	460d      	mov	r5, r1
 800ffd2:	e745      	b.n	800fe60 <atan+0xc8>
 800ffd4:	4622      	mov	r2, r4
 800ffd6:	462b      	mov	r3, r5
 800ffd8:	4938      	ldr	r1, [pc, #224]	@ (80100bc <atan+0x324>)
 800ffda:	2000      	movs	r0, #0
 800ffdc:	f7f0 fc36 	bl	800084c <__aeabi_ddiv>
 800ffe0:	f04f 0a03 	mov.w	sl, #3
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	460d      	mov	r5, r1
 800ffe8:	e73a      	b.n	800fe60 <atan+0xc8>
 800ffea:	4b35      	ldr	r3, [pc, #212]	@ (80100c0 <atan+0x328>)
 800ffec:	4e35      	ldr	r6, [pc, #212]	@ (80100c4 <atan+0x32c>)
 800ffee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff6:	f7f0 f947 	bl	8000288 <__aeabi_dsub>
 800fffa:	4622      	mov	r2, r4
 800fffc:	462b      	mov	r3, r5
 800fffe:	f7f0 f943 	bl	8000288 <__aeabi_dsub>
 8010002:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010006:	4602      	mov	r2, r0
 8010008:	460b      	mov	r3, r1
 801000a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801000e:	f7f0 f93b 	bl	8000288 <__aeabi_dsub>
 8010012:	f1bb 0f00 	cmp.w	fp, #0
 8010016:	4604      	mov	r4, r0
 8010018:	460d      	mov	r5, r1
 801001a:	f6bf aedc 	bge.w	800fdd6 <atan+0x3e>
 801001e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010022:	461d      	mov	r5, r3
 8010024:	e6d7      	b.n	800fdd6 <atan+0x3e>
 8010026:	a51c      	add	r5, pc, #112	@ (adr r5, 8010098 <atan+0x300>)
 8010028:	e9d5 4500 	ldrd	r4, r5, [r5]
 801002c:	e6d3      	b.n	800fdd6 <atan+0x3e>
 801002e:	bf00      	nop
 8010030:	54442d18 	.word	0x54442d18
 8010034:	3ff921fb 	.word	0x3ff921fb
 8010038:	8800759c 	.word	0x8800759c
 801003c:	7e37e43c 	.word	0x7e37e43c
 8010040:	e322da11 	.word	0xe322da11
 8010044:	3f90ad3a 	.word	0x3f90ad3a
 8010048:	24760deb 	.word	0x24760deb
 801004c:	3fa97b4b 	.word	0x3fa97b4b
 8010050:	a0d03d51 	.word	0xa0d03d51
 8010054:	3fb10d66 	.word	0x3fb10d66
 8010058:	c54c206e 	.word	0xc54c206e
 801005c:	3fb745cd 	.word	0x3fb745cd
 8010060:	920083ff 	.word	0x920083ff
 8010064:	3fc24924 	.word	0x3fc24924
 8010068:	5555550d 	.word	0x5555550d
 801006c:	3fd55555 	.word	0x3fd55555
 8010070:	2c6a6c2f 	.word	0x2c6a6c2f
 8010074:	bfa2b444 	.word	0xbfa2b444
 8010078:	52defd9a 	.word	0x52defd9a
 801007c:	3fadde2d 	.word	0x3fadde2d
 8010080:	af749a6d 	.word	0xaf749a6d
 8010084:	3fb3b0f2 	.word	0x3fb3b0f2
 8010088:	fe231671 	.word	0xfe231671
 801008c:	3fbc71c6 	.word	0x3fbc71c6
 8010090:	9998ebc4 	.word	0x9998ebc4
 8010094:	3fc99999 	.word	0x3fc99999
 8010098:	54442d18 	.word	0x54442d18
 801009c:	bff921fb 	.word	0xbff921fb
 80100a0:	440fffff 	.word	0x440fffff
 80100a4:	7ff00000 	.word	0x7ff00000
 80100a8:	3fdbffff 	.word	0x3fdbffff
 80100ac:	3ff00000 	.word	0x3ff00000
 80100b0:	3ff2ffff 	.word	0x3ff2ffff
 80100b4:	40038000 	.word	0x40038000
 80100b8:	3ff80000 	.word	0x3ff80000
 80100bc:	bff00000 	.word	0xbff00000
 80100c0:	080112b0 	.word	0x080112b0
 80100c4:	080112d0 	.word	0x080112d0

080100c8 <__kernel_cosf>:
 80100c8:	ee10 3a10 	vmov	r3, s0
 80100cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80100d0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80100d4:	eef0 6a40 	vmov.f32	s13, s0
 80100d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80100dc:	d204      	bcs.n	80100e8 <__kernel_cosf+0x20>
 80100de:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80100e2:	ee17 2a90 	vmov	r2, s15
 80100e6:	b342      	cbz	r2, 801013a <__kernel_cosf+0x72>
 80100e8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80100ec:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8010158 <__kernel_cosf+0x90>
 80100f0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801015c <__kernel_cosf+0x94>
 80100f4:	4a1a      	ldr	r2, [pc, #104]	@ (8010160 <__kernel_cosf+0x98>)
 80100f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80100fa:	4293      	cmp	r3, r2
 80100fc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010164 <__kernel_cosf+0x9c>
 8010100:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010104:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8010168 <__kernel_cosf+0xa0>
 8010108:	eea7 6a87 	vfma.f32	s12, s15, s14
 801010c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801016c <__kernel_cosf+0xa4>
 8010110:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010114:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8010170 <__kernel_cosf+0xa8>
 8010118:	eea7 6a87 	vfma.f32	s12, s15, s14
 801011c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010120:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010124:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010128:	eee7 0a06 	vfma.f32	s1, s14, s12
 801012c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010130:	d804      	bhi.n	801013c <__kernel_cosf+0x74>
 8010132:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010136:	ee30 0a67 	vsub.f32	s0, s0, s15
 801013a:	4770      	bx	lr
 801013c:	4a0d      	ldr	r2, [pc, #52]	@ (8010174 <__kernel_cosf+0xac>)
 801013e:	4293      	cmp	r3, r2
 8010140:	bf9a      	itte	ls
 8010142:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8010146:	ee07 3a10 	vmovls	s14, r3
 801014a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801014e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010156:	e7ec      	b.n	8010132 <__kernel_cosf+0x6a>
 8010158:	ad47d74e 	.word	0xad47d74e
 801015c:	310f74f6 	.word	0x310f74f6
 8010160:	3e999999 	.word	0x3e999999
 8010164:	b493f27c 	.word	0xb493f27c
 8010168:	37d00d01 	.word	0x37d00d01
 801016c:	bab60b61 	.word	0xbab60b61
 8010170:	3d2aaaab 	.word	0x3d2aaaab
 8010174:	3f480000 	.word	0x3f480000

08010178 <__kernel_sinf>:
 8010178:	ee10 3a10 	vmov	r3, s0
 801017c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010180:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010184:	d204      	bcs.n	8010190 <__kernel_sinf+0x18>
 8010186:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801018a:	ee17 3a90 	vmov	r3, s15
 801018e:	b35b      	cbz	r3, 80101e8 <__kernel_sinf+0x70>
 8010190:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010194:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80101ec <__kernel_sinf+0x74>
 8010198:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80101f0 <__kernel_sinf+0x78>
 801019c:	eea7 6a27 	vfma.f32	s12, s14, s15
 80101a0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80101f4 <__kernel_sinf+0x7c>
 80101a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80101a8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80101f8 <__kernel_sinf+0x80>
 80101ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 80101b0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80101fc <__kernel_sinf+0x84>
 80101b4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80101b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80101bc:	b930      	cbnz	r0, 80101cc <__kernel_sinf+0x54>
 80101be:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8010200 <__kernel_sinf+0x88>
 80101c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80101c6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80101ca:	4770      	bx	lr
 80101cc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80101d0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80101d4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80101d8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80101dc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010204 <__kernel_sinf+0x8c>
 80101e0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80101e4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80101e8:	4770      	bx	lr
 80101ea:	bf00      	nop
 80101ec:	2f2ec9d3 	.word	0x2f2ec9d3
 80101f0:	b2d72f34 	.word	0xb2d72f34
 80101f4:	3638ef1b 	.word	0x3638ef1b
 80101f8:	b9500d01 	.word	0xb9500d01
 80101fc:	3c088889 	.word	0x3c088889
 8010200:	be2aaaab 	.word	0xbe2aaaab
 8010204:	3e2aaaab 	.word	0x3e2aaaab

08010208 <__ieee754_expf>:
 8010208:	ee10 2a10 	vmov	r2, s0
 801020c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8010210:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010214:	d902      	bls.n	801021c <__ieee754_expf+0x14>
 8010216:	ee30 0a00 	vadd.f32	s0, s0, s0
 801021a:	4770      	bx	lr
 801021c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8010220:	d106      	bne.n	8010230 <__ieee754_expf+0x28>
 8010222:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801035c <__ieee754_expf+0x154>
 8010226:	2900      	cmp	r1, #0
 8010228:	bf18      	it	ne
 801022a:	eeb0 0a67 	vmovne.f32	s0, s15
 801022e:	4770      	bx	lr
 8010230:	484b      	ldr	r0, [pc, #300]	@ (8010360 <__ieee754_expf+0x158>)
 8010232:	4282      	cmp	r2, r0
 8010234:	dd02      	ble.n	801023c <__ieee754_expf+0x34>
 8010236:	2000      	movs	r0, #0
 8010238:	f000 bb28 	b.w	801088c <__math_oflowf>
 801023c:	2a00      	cmp	r2, #0
 801023e:	da05      	bge.n	801024c <__ieee754_expf+0x44>
 8010240:	4a48      	ldr	r2, [pc, #288]	@ (8010364 <__ieee754_expf+0x15c>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d902      	bls.n	801024c <__ieee754_expf+0x44>
 8010246:	2000      	movs	r0, #0
 8010248:	f000 bb1a 	b.w	8010880 <__math_uflowf>
 801024c:	4a46      	ldr	r2, [pc, #280]	@ (8010368 <__ieee754_expf+0x160>)
 801024e:	4293      	cmp	r3, r2
 8010250:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8010254:	d952      	bls.n	80102fc <__ieee754_expf+0xf4>
 8010256:	4a45      	ldr	r2, [pc, #276]	@ (801036c <__ieee754_expf+0x164>)
 8010258:	4293      	cmp	r3, r2
 801025a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801025e:	d834      	bhi.n	80102ca <__ieee754_expf+0xc2>
 8010260:	4b43      	ldr	r3, [pc, #268]	@ (8010370 <__ieee754_expf+0x168>)
 8010262:	4413      	add	r3, r2
 8010264:	ed93 7a00 	vldr	s14, [r3]
 8010268:	4b42      	ldr	r3, [pc, #264]	@ (8010374 <__ieee754_expf+0x16c>)
 801026a:	4413      	add	r3, r2
 801026c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010270:	f1c1 0201 	rsb	r2, r1, #1
 8010274:	edd3 7a00 	vldr	s15, [r3]
 8010278:	1a52      	subs	r2, r2, r1
 801027a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801027e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8010282:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8010378 <__ieee754_expf+0x170>
 8010286:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801037c <__ieee754_expf+0x174>
 801028a:	eee6 6a05 	vfma.f32	s13, s12, s10
 801028e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8010380 <__ieee754_expf+0x178>
 8010292:	eea6 5a86 	vfma.f32	s10, s13, s12
 8010296:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010384 <__ieee754_expf+0x17c>
 801029a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801029e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8010388 <__ieee754_expf+0x180>
 80102a2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80102a6:	eef0 6a40 	vmov.f32	s13, s0
 80102aa:	eee5 6a46 	vfms.f32	s13, s10, s12
 80102ae:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80102b2:	ee20 5a26 	vmul.f32	s10, s0, s13
 80102b6:	bb92      	cbnz	r2, 801031e <__ieee754_expf+0x116>
 80102b8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80102bc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80102c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80102c4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80102c8:	4770      	bx	lr
 80102ca:	4b30      	ldr	r3, [pc, #192]	@ (801038c <__ieee754_expf+0x184>)
 80102cc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8010390 <__ieee754_expf+0x188>
 80102d0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8010394 <__ieee754_expf+0x18c>
 80102d4:	4413      	add	r3, r2
 80102d6:	edd3 7a00 	vldr	s15, [r3]
 80102da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80102de:	eeb0 7a40 	vmov.f32	s14, s0
 80102e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102e6:	ee17 2a90 	vmov	r2, s15
 80102ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102ee:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80102f2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8010398 <__ieee754_expf+0x190>
 80102f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80102fa:	e7be      	b.n	801027a <__ieee754_expf+0x72>
 80102fc:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8010300:	d20b      	bcs.n	801031a <__ieee754_expf+0x112>
 8010302:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801039c <__ieee754_expf+0x194>
 8010306:	ee70 6a26 	vadd.f32	s13, s0, s13
 801030a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801030e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010312:	dd02      	ble.n	801031a <__ieee754_expf+0x112>
 8010314:	ee30 0a25 	vadd.f32	s0, s0, s11
 8010318:	4770      	bx	lr
 801031a:	2200      	movs	r2, #0
 801031c:	e7af      	b.n	801027e <__ieee754_expf+0x76>
 801031e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8010322:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8010326:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801032a:	bfb8      	it	lt
 801032c:	3264      	addlt	r2, #100	@ 0x64
 801032e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010332:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010336:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801033a:	ee17 3a90 	vmov	r3, s15
 801033e:	bfab      	itete	ge
 8010340:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8010344:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8010348:	ee00 3a10 	vmovge	s0, r3
 801034c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 80103a0 <__ieee754_expf+0x198>
 8010350:	bfbc      	itt	lt
 8010352:	ee00 3a10 	vmovlt	s0, r3
 8010356:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801035a:	4770      	bx	lr
 801035c:	00000000 	.word	0x00000000
 8010360:	42b17217 	.word	0x42b17217
 8010364:	42cff1b5 	.word	0x42cff1b5
 8010368:	3eb17218 	.word	0x3eb17218
 801036c:	3f851591 	.word	0x3f851591
 8010370:	080112f8 	.word	0x080112f8
 8010374:	080112f0 	.word	0x080112f0
 8010378:	3331bb4c 	.word	0x3331bb4c
 801037c:	b5ddea0e 	.word	0xb5ddea0e
 8010380:	388ab355 	.word	0x388ab355
 8010384:	bb360b61 	.word	0xbb360b61
 8010388:	3e2aaaab 	.word	0x3e2aaaab
 801038c:	08011300 	.word	0x08011300
 8010390:	3fb8aa3b 	.word	0x3fb8aa3b
 8010394:	3f317180 	.word	0x3f317180
 8010398:	3717f7d1 	.word	0x3717f7d1
 801039c:	7149f2ca 	.word	0x7149f2ca
 80103a0:	0d800000 	.word	0x0d800000

080103a4 <__ieee754_rem_pio2f>:
 80103a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103a6:	ee10 6a10 	vmov	r6, s0
 80103aa:	4b88      	ldr	r3, [pc, #544]	@ (80105cc <__ieee754_rem_pio2f+0x228>)
 80103ac:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80103b0:	429d      	cmp	r5, r3
 80103b2:	b087      	sub	sp, #28
 80103b4:	4604      	mov	r4, r0
 80103b6:	d805      	bhi.n	80103c4 <__ieee754_rem_pio2f+0x20>
 80103b8:	2300      	movs	r3, #0
 80103ba:	ed80 0a00 	vstr	s0, [r0]
 80103be:	6043      	str	r3, [r0, #4]
 80103c0:	2000      	movs	r0, #0
 80103c2:	e022      	b.n	801040a <__ieee754_rem_pio2f+0x66>
 80103c4:	4b82      	ldr	r3, [pc, #520]	@ (80105d0 <__ieee754_rem_pio2f+0x22c>)
 80103c6:	429d      	cmp	r5, r3
 80103c8:	d83a      	bhi.n	8010440 <__ieee754_rem_pio2f+0x9c>
 80103ca:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80103ce:	2e00      	cmp	r6, #0
 80103d0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80105d4 <__ieee754_rem_pio2f+0x230>
 80103d4:	4a80      	ldr	r2, [pc, #512]	@ (80105d8 <__ieee754_rem_pio2f+0x234>)
 80103d6:	f023 030f 	bic.w	r3, r3, #15
 80103da:	dd18      	ble.n	801040e <__ieee754_rem_pio2f+0x6a>
 80103dc:	4293      	cmp	r3, r2
 80103de:	ee70 7a47 	vsub.f32	s15, s0, s14
 80103e2:	bf09      	itett	eq
 80103e4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80105dc <__ieee754_rem_pio2f+0x238>
 80103e8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80105e0 <__ieee754_rem_pio2f+0x23c>
 80103ec:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80105e4 <__ieee754_rem_pio2f+0x240>
 80103f0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80103f4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80103f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80103fc:	ed80 7a00 	vstr	s14, [r0]
 8010400:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010404:	edc0 7a01 	vstr	s15, [r0, #4]
 8010408:	2001      	movs	r0, #1
 801040a:	b007      	add	sp, #28
 801040c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801040e:	4293      	cmp	r3, r2
 8010410:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010414:	bf09      	itett	eq
 8010416:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80105dc <__ieee754_rem_pio2f+0x238>
 801041a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80105e0 <__ieee754_rem_pio2f+0x23c>
 801041e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80105e4 <__ieee754_rem_pio2f+0x240>
 8010422:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8010426:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801042a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801042e:	ed80 7a00 	vstr	s14, [r0]
 8010432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010436:	edc0 7a01 	vstr	s15, [r0, #4]
 801043a:	f04f 30ff 	mov.w	r0, #4294967295
 801043e:	e7e4      	b.n	801040a <__ieee754_rem_pio2f+0x66>
 8010440:	4b69      	ldr	r3, [pc, #420]	@ (80105e8 <__ieee754_rem_pio2f+0x244>)
 8010442:	429d      	cmp	r5, r3
 8010444:	d873      	bhi.n	801052e <__ieee754_rem_pio2f+0x18a>
 8010446:	f7fe fb51 	bl	800eaec <fabsf>
 801044a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80105ec <__ieee754_rem_pio2f+0x248>
 801044e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010452:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801045a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801045e:	ee17 0a90 	vmov	r0, s15
 8010462:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80105d4 <__ieee754_rem_pio2f+0x230>
 8010466:	eea7 0a67 	vfms.f32	s0, s14, s15
 801046a:	281f      	cmp	r0, #31
 801046c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80105e0 <__ieee754_rem_pio2f+0x23c>
 8010470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010474:	eeb1 6a47 	vneg.f32	s12, s14
 8010478:	ee70 6a67 	vsub.f32	s13, s0, s15
 801047c:	ee16 1a90 	vmov	r1, s13
 8010480:	dc09      	bgt.n	8010496 <__ieee754_rem_pio2f+0xf2>
 8010482:	4a5b      	ldr	r2, [pc, #364]	@ (80105f0 <__ieee754_rem_pio2f+0x24c>)
 8010484:	1e47      	subs	r7, r0, #1
 8010486:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801048a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801048e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010492:	4293      	cmp	r3, r2
 8010494:	d107      	bne.n	80104a6 <__ieee754_rem_pio2f+0x102>
 8010496:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801049a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801049e:	2a08      	cmp	r2, #8
 80104a0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80104a4:	dc14      	bgt.n	80104d0 <__ieee754_rem_pio2f+0x12c>
 80104a6:	6021      	str	r1, [r4, #0]
 80104a8:	ed94 7a00 	vldr	s14, [r4]
 80104ac:	ee30 0a47 	vsub.f32	s0, s0, s14
 80104b0:	2e00      	cmp	r6, #0
 80104b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80104b6:	ed84 0a01 	vstr	s0, [r4, #4]
 80104ba:	daa6      	bge.n	801040a <__ieee754_rem_pio2f+0x66>
 80104bc:	eeb1 7a47 	vneg.f32	s14, s14
 80104c0:	eeb1 0a40 	vneg.f32	s0, s0
 80104c4:	ed84 7a00 	vstr	s14, [r4]
 80104c8:	ed84 0a01 	vstr	s0, [r4, #4]
 80104cc:	4240      	negs	r0, r0
 80104ce:	e79c      	b.n	801040a <__ieee754_rem_pio2f+0x66>
 80104d0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80105dc <__ieee754_rem_pio2f+0x238>
 80104d4:	eef0 6a40 	vmov.f32	s13, s0
 80104d8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80104dc:	ee70 7a66 	vsub.f32	s15, s0, s13
 80104e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80104e4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80105e4 <__ieee754_rem_pio2f+0x240>
 80104e8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80104ec:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80104f0:	ee15 2a90 	vmov	r2, s11
 80104f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80104f8:	1a5b      	subs	r3, r3, r1
 80104fa:	2b19      	cmp	r3, #25
 80104fc:	dc04      	bgt.n	8010508 <__ieee754_rem_pio2f+0x164>
 80104fe:	edc4 5a00 	vstr	s11, [r4]
 8010502:	eeb0 0a66 	vmov.f32	s0, s13
 8010506:	e7cf      	b.n	80104a8 <__ieee754_rem_pio2f+0x104>
 8010508:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80105f4 <__ieee754_rem_pio2f+0x250>
 801050c:	eeb0 0a66 	vmov.f32	s0, s13
 8010510:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010514:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010518:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80105f8 <__ieee754_rem_pio2f+0x254>
 801051c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010520:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010524:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010528:	ed84 7a00 	vstr	s14, [r4]
 801052c:	e7bc      	b.n	80104a8 <__ieee754_rem_pio2f+0x104>
 801052e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010532:	d306      	bcc.n	8010542 <__ieee754_rem_pio2f+0x19e>
 8010534:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010538:	edc0 7a01 	vstr	s15, [r0, #4]
 801053c:	edc0 7a00 	vstr	s15, [r0]
 8010540:	e73e      	b.n	80103c0 <__ieee754_rem_pio2f+0x1c>
 8010542:	15ea      	asrs	r2, r5, #23
 8010544:	3a86      	subs	r2, #134	@ 0x86
 8010546:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801054a:	ee07 3a90 	vmov	s15, r3
 801054e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010552:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80105fc <__ieee754_rem_pio2f+0x258>
 8010556:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801055a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801055e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010562:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010566:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801056a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801056e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010572:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010576:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801057a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010582:	edcd 7a05 	vstr	s15, [sp, #20]
 8010586:	d11e      	bne.n	80105c6 <__ieee754_rem_pio2f+0x222>
 8010588:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801058c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010590:	bf0c      	ite	eq
 8010592:	2301      	moveq	r3, #1
 8010594:	2302      	movne	r3, #2
 8010596:	491a      	ldr	r1, [pc, #104]	@ (8010600 <__ieee754_rem_pio2f+0x25c>)
 8010598:	9101      	str	r1, [sp, #4]
 801059a:	2102      	movs	r1, #2
 801059c:	9100      	str	r1, [sp, #0]
 801059e:	a803      	add	r0, sp, #12
 80105a0:	4621      	mov	r1, r4
 80105a2:	f000 f979 	bl	8010898 <__kernel_rem_pio2f>
 80105a6:	2e00      	cmp	r6, #0
 80105a8:	f6bf af2f 	bge.w	801040a <__ieee754_rem_pio2f+0x66>
 80105ac:	edd4 7a00 	vldr	s15, [r4]
 80105b0:	eef1 7a67 	vneg.f32	s15, s15
 80105b4:	edc4 7a00 	vstr	s15, [r4]
 80105b8:	edd4 7a01 	vldr	s15, [r4, #4]
 80105bc:	eef1 7a67 	vneg.f32	s15, s15
 80105c0:	edc4 7a01 	vstr	s15, [r4, #4]
 80105c4:	e782      	b.n	80104cc <__ieee754_rem_pio2f+0x128>
 80105c6:	2303      	movs	r3, #3
 80105c8:	e7e5      	b.n	8010596 <__ieee754_rem_pio2f+0x1f2>
 80105ca:	bf00      	nop
 80105cc:	3f490fd8 	.word	0x3f490fd8
 80105d0:	4016cbe3 	.word	0x4016cbe3
 80105d4:	3fc90f80 	.word	0x3fc90f80
 80105d8:	3fc90fd0 	.word	0x3fc90fd0
 80105dc:	37354400 	.word	0x37354400
 80105e0:	37354443 	.word	0x37354443
 80105e4:	2e85a308 	.word	0x2e85a308
 80105e8:	43490f80 	.word	0x43490f80
 80105ec:	3f22f984 	.word	0x3f22f984
 80105f0:	08011308 	.word	0x08011308
 80105f4:	2e85a300 	.word	0x2e85a300
 80105f8:	248d3132 	.word	0x248d3132
 80105fc:	43800000 	.word	0x43800000
 8010600:	08011388 	.word	0x08011388
 8010604:	00000000 	.word	0x00000000

08010608 <scalbn>:
 8010608:	b570      	push	{r4, r5, r6, lr}
 801060a:	ec55 4b10 	vmov	r4, r5, d0
 801060e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010612:	4606      	mov	r6, r0
 8010614:	462b      	mov	r3, r5
 8010616:	b991      	cbnz	r1, 801063e <scalbn+0x36>
 8010618:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801061c:	4323      	orrs	r3, r4
 801061e:	d03d      	beq.n	801069c <scalbn+0x94>
 8010620:	4b35      	ldr	r3, [pc, #212]	@ (80106f8 <scalbn+0xf0>)
 8010622:	4620      	mov	r0, r4
 8010624:	4629      	mov	r1, r5
 8010626:	2200      	movs	r2, #0
 8010628:	f7ef ffe6 	bl	80005f8 <__aeabi_dmul>
 801062c:	4b33      	ldr	r3, [pc, #204]	@ (80106fc <scalbn+0xf4>)
 801062e:	429e      	cmp	r6, r3
 8010630:	4604      	mov	r4, r0
 8010632:	460d      	mov	r5, r1
 8010634:	da0f      	bge.n	8010656 <scalbn+0x4e>
 8010636:	a328      	add	r3, pc, #160	@ (adr r3, 80106d8 <scalbn+0xd0>)
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	e01e      	b.n	801067c <scalbn+0x74>
 801063e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010642:	4291      	cmp	r1, r2
 8010644:	d10b      	bne.n	801065e <scalbn+0x56>
 8010646:	4622      	mov	r2, r4
 8010648:	4620      	mov	r0, r4
 801064a:	4629      	mov	r1, r5
 801064c:	f7ef fe1e 	bl	800028c <__adddf3>
 8010650:	4604      	mov	r4, r0
 8010652:	460d      	mov	r5, r1
 8010654:	e022      	b.n	801069c <scalbn+0x94>
 8010656:	460b      	mov	r3, r1
 8010658:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801065c:	3936      	subs	r1, #54	@ 0x36
 801065e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010662:	4296      	cmp	r6, r2
 8010664:	dd0d      	ble.n	8010682 <scalbn+0x7a>
 8010666:	2d00      	cmp	r5, #0
 8010668:	a11d      	add	r1, pc, #116	@ (adr r1, 80106e0 <scalbn+0xd8>)
 801066a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801066e:	da02      	bge.n	8010676 <scalbn+0x6e>
 8010670:	a11d      	add	r1, pc, #116	@ (adr r1, 80106e8 <scalbn+0xe0>)
 8010672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010676:	a31a      	add	r3, pc, #104	@ (adr r3, 80106e0 <scalbn+0xd8>)
 8010678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067c:	f7ef ffbc 	bl	80005f8 <__aeabi_dmul>
 8010680:	e7e6      	b.n	8010650 <scalbn+0x48>
 8010682:	1872      	adds	r2, r6, r1
 8010684:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010688:	428a      	cmp	r2, r1
 801068a:	dcec      	bgt.n	8010666 <scalbn+0x5e>
 801068c:	2a00      	cmp	r2, #0
 801068e:	dd08      	ble.n	80106a2 <scalbn+0x9a>
 8010690:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010694:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010698:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801069c:	ec45 4b10 	vmov	d0, r4, r5
 80106a0:	bd70      	pop	{r4, r5, r6, pc}
 80106a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80106a6:	da08      	bge.n	80106ba <scalbn+0xb2>
 80106a8:	2d00      	cmp	r5, #0
 80106aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80106d8 <scalbn+0xd0>)
 80106ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106b0:	dac1      	bge.n	8010636 <scalbn+0x2e>
 80106b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80106f0 <scalbn+0xe8>)
 80106b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106b8:	e7bd      	b.n	8010636 <scalbn+0x2e>
 80106ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80106be:	3236      	adds	r2, #54	@ 0x36
 80106c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80106c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80106c8:	4620      	mov	r0, r4
 80106ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010700 <scalbn+0xf8>)
 80106cc:	4629      	mov	r1, r5
 80106ce:	2200      	movs	r2, #0
 80106d0:	e7d4      	b.n	801067c <scalbn+0x74>
 80106d2:	bf00      	nop
 80106d4:	f3af 8000 	nop.w
 80106d8:	c2f8f359 	.word	0xc2f8f359
 80106dc:	01a56e1f 	.word	0x01a56e1f
 80106e0:	8800759c 	.word	0x8800759c
 80106e4:	7e37e43c 	.word	0x7e37e43c
 80106e8:	8800759c 	.word	0x8800759c
 80106ec:	fe37e43c 	.word	0xfe37e43c
 80106f0:	c2f8f359 	.word	0xc2f8f359
 80106f4:	81a56e1f 	.word	0x81a56e1f
 80106f8:	43500000 	.word	0x43500000
 80106fc:	ffff3cb0 	.word	0xffff3cb0
 8010700:	3c900000 	.word	0x3c900000

08010704 <with_errno>:
 8010704:	b510      	push	{r4, lr}
 8010706:	ed2d 8b02 	vpush	{d8}
 801070a:	eeb0 8a40 	vmov.f32	s16, s0
 801070e:	eef0 8a60 	vmov.f32	s17, s1
 8010712:	4604      	mov	r4, r0
 8010714:	f7fc f80e 	bl	800c734 <__errno>
 8010718:	eeb0 0a48 	vmov.f32	s0, s16
 801071c:	eef0 0a68 	vmov.f32	s1, s17
 8010720:	ecbd 8b02 	vpop	{d8}
 8010724:	6004      	str	r4, [r0, #0]
 8010726:	bd10      	pop	{r4, pc}

08010728 <xflow>:
 8010728:	4603      	mov	r3, r0
 801072a:	b507      	push	{r0, r1, r2, lr}
 801072c:	ec51 0b10 	vmov	r0, r1, d0
 8010730:	b183      	cbz	r3, 8010754 <xflow+0x2c>
 8010732:	4602      	mov	r2, r0
 8010734:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010738:	e9cd 2300 	strd	r2, r3, [sp]
 801073c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010740:	f7ef ff5a 	bl	80005f8 <__aeabi_dmul>
 8010744:	ec41 0b10 	vmov	d0, r0, r1
 8010748:	2022      	movs	r0, #34	@ 0x22
 801074a:	b003      	add	sp, #12
 801074c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010750:	f7ff bfd8 	b.w	8010704 <with_errno>
 8010754:	4602      	mov	r2, r0
 8010756:	460b      	mov	r3, r1
 8010758:	e7ee      	b.n	8010738 <xflow+0x10>
 801075a:	0000      	movs	r0, r0
 801075c:	0000      	movs	r0, r0
	...

08010760 <__math_uflow>:
 8010760:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010768 <__math_uflow+0x8>
 8010764:	f7ff bfe0 	b.w	8010728 <xflow>
 8010768:	00000000 	.word	0x00000000
 801076c:	10000000 	.word	0x10000000

08010770 <__math_oflow>:
 8010770:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010778 <__math_oflow+0x8>
 8010774:	f7ff bfd8 	b.w	8010728 <xflow>
 8010778:	00000000 	.word	0x00000000
 801077c:	70000000 	.word	0x70000000

08010780 <scalbnf>:
 8010780:	ee10 3a10 	vmov	r3, s0
 8010784:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010788:	d02b      	beq.n	80107e2 <scalbnf+0x62>
 801078a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801078e:	d302      	bcc.n	8010796 <scalbnf+0x16>
 8010790:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010794:	4770      	bx	lr
 8010796:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801079a:	d123      	bne.n	80107e4 <scalbnf+0x64>
 801079c:	4b24      	ldr	r3, [pc, #144]	@ (8010830 <scalbnf+0xb0>)
 801079e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010834 <scalbnf+0xb4>
 80107a2:	4298      	cmp	r0, r3
 80107a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80107a8:	db17      	blt.n	80107da <scalbnf+0x5a>
 80107aa:	ee10 3a10 	vmov	r3, s0
 80107ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80107b2:	3a19      	subs	r2, #25
 80107b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80107b8:	4288      	cmp	r0, r1
 80107ba:	dd15      	ble.n	80107e8 <scalbnf+0x68>
 80107bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010838 <scalbnf+0xb8>
 80107c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801083c <scalbnf+0xbc>
 80107c4:	ee10 3a10 	vmov	r3, s0
 80107c8:	eeb0 7a67 	vmov.f32	s14, s15
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	bfb8      	it	lt
 80107d0:	eef0 7a66 	vmovlt.f32	s15, s13
 80107d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80107d8:	4770      	bx	lr
 80107da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010840 <scalbnf+0xc0>
 80107de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80107e2:	4770      	bx	lr
 80107e4:	0dd2      	lsrs	r2, r2, #23
 80107e6:	e7e5      	b.n	80107b4 <scalbnf+0x34>
 80107e8:	4410      	add	r0, r2
 80107ea:	28fe      	cmp	r0, #254	@ 0xfe
 80107ec:	dce6      	bgt.n	80107bc <scalbnf+0x3c>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	dd06      	ble.n	8010800 <scalbnf+0x80>
 80107f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80107f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80107fa:	ee00 3a10 	vmov	s0, r3
 80107fe:	4770      	bx	lr
 8010800:	f110 0f16 	cmn.w	r0, #22
 8010804:	da09      	bge.n	801081a <scalbnf+0x9a>
 8010806:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010840 <scalbnf+0xc0>
 801080a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010844 <scalbnf+0xc4>
 801080e:	ee10 3a10 	vmov	r3, s0
 8010812:	eeb0 7a67 	vmov.f32	s14, s15
 8010816:	2b00      	cmp	r3, #0
 8010818:	e7d9      	b.n	80107ce <scalbnf+0x4e>
 801081a:	3019      	adds	r0, #25
 801081c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010820:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010824:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010848 <scalbnf+0xc8>
 8010828:	ee07 3a90 	vmov	s15, r3
 801082c:	e7d7      	b.n	80107de <scalbnf+0x5e>
 801082e:	bf00      	nop
 8010830:	ffff3cb0 	.word	0xffff3cb0
 8010834:	4c000000 	.word	0x4c000000
 8010838:	7149f2ca 	.word	0x7149f2ca
 801083c:	f149f2ca 	.word	0xf149f2ca
 8010840:	0da24260 	.word	0x0da24260
 8010844:	8da24260 	.word	0x8da24260
 8010848:	33000000 	.word	0x33000000

0801084c <with_errnof>:
 801084c:	b510      	push	{r4, lr}
 801084e:	ed2d 8b02 	vpush	{d8}
 8010852:	eeb0 8a40 	vmov.f32	s16, s0
 8010856:	4604      	mov	r4, r0
 8010858:	f7fb ff6c 	bl	800c734 <__errno>
 801085c:	eeb0 0a48 	vmov.f32	s0, s16
 8010860:	ecbd 8b02 	vpop	{d8}
 8010864:	6004      	str	r4, [r0, #0]
 8010866:	bd10      	pop	{r4, pc}

08010868 <xflowf>:
 8010868:	b130      	cbz	r0, 8010878 <xflowf+0x10>
 801086a:	eef1 7a40 	vneg.f32	s15, s0
 801086e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010872:	2022      	movs	r0, #34	@ 0x22
 8010874:	f7ff bfea 	b.w	801084c <with_errnof>
 8010878:	eef0 7a40 	vmov.f32	s15, s0
 801087c:	e7f7      	b.n	801086e <xflowf+0x6>
	...

08010880 <__math_uflowf>:
 8010880:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010888 <__math_uflowf+0x8>
 8010884:	f7ff bff0 	b.w	8010868 <xflowf>
 8010888:	10000000 	.word	0x10000000

0801088c <__math_oflowf>:
 801088c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010894 <__math_oflowf+0x8>
 8010890:	f7ff bfea 	b.w	8010868 <xflowf>
 8010894:	70000000 	.word	0x70000000

08010898 <__kernel_rem_pio2f>:
 8010898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801089c:	ed2d 8b04 	vpush	{d8-d9}
 80108a0:	b0d9      	sub	sp, #356	@ 0x164
 80108a2:	4690      	mov	r8, r2
 80108a4:	9001      	str	r0, [sp, #4]
 80108a6:	4ab9      	ldr	r2, [pc, #740]	@ (8010b8c <__kernel_rem_pio2f+0x2f4>)
 80108a8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80108aa:	f118 0f04 	cmn.w	r8, #4
 80108ae:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80108b2:	460f      	mov	r7, r1
 80108b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80108b8:	db27      	blt.n	801090a <__kernel_rem_pio2f+0x72>
 80108ba:	f1b8 0203 	subs.w	r2, r8, #3
 80108be:	bf48      	it	mi
 80108c0:	f108 0204 	addmi.w	r2, r8, #4
 80108c4:	10d2      	asrs	r2, r2, #3
 80108c6:	1c55      	adds	r5, r2, #1
 80108c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80108ca:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8010b9c <__kernel_rem_pio2f+0x304>
 80108ce:	00e8      	lsls	r0, r5, #3
 80108d0:	eba2 060b 	sub.w	r6, r2, fp
 80108d4:	9002      	str	r0, [sp, #8]
 80108d6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80108da:	eb0a 0c0b 	add.w	ip, sl, fp
 80108de:	ac1c      	add	r4, sp, #112	@ 0x70
 80108e0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80108e4:	2000      	movs	r0, #0
 80108e6:	4560      	cmp	r0, ip
 80108e8:	dd11      	ble.n	801090e <__kernel_rem_pio2f+0x76>
 80108ea:	a91c      	add	r1, sp, #112	@ 0x70
 80108ec:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80108f0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80108f4:	f04f 0c00 	mov.w	ip, #0
 80108f8:	45d4      	cmp	ip, sl
 80108fa:	dc27      	bgt.n	801094c <__kernel_rem_pio2f+0xb4>
 80108fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010900:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8010b9c <__kernel_rem_pio2f+0x304>
 8010904:	4606      	mov	r6, r0
 8010906:	2400      	movs	r4, #0
 8010908:	e016      	b.n	8010938 <__kernel_rem_pio2f+0xa0>
 801090a:	2200      	movs	r2, #0
 801090c:	e7db      	b.n	80108c6 <__kernel_rem_pio2f+0x2e>
 801090e:	42c6      	cmn	r6, r0
 8010910:	bf5d      	ittte	pl
 8010912:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010916:	ee07 1a90 	vmovpl	s15, r1
 801091a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801091e:	eef0 7a47 	vmovmi.f32	s15, s14
 8010922:	ece4 7a01 	vstmia	r4!, {s15}
 8010926:	3001      	adds	r0, #1
 8010928:	e7dd      	b.n	80108e6 <__kernel_rem_pio2f+0x4e>
 801092a:	ecfe 6a01 	vldmia	lr!, {s13}
 801092e:	ed96 7a00 	vldr	s14, [r6]
 8010932:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010936:	3401      	adds	r4, #1
 8010938:	455c      	cmp	r4, fp
 801093a:	f1a6 0604 	sub.w	r6, r6, #4
 801093e:	ddf4      	ble.n	801092a <__kernel_rem_pio2f+0x92>
 8010940:	ece9 7a01 	vstmia	r9!, {s15}
 8010944:	f10c 0c01 	add.w	ip, ip, #1
 8010948:	3004      	adds	r0, #4
 801094a:	e7d5      	b.n	80108f8 <__kernel_rem_pio2f+0x60>
 801094c:	a908      	add	r1, sp, #32
 801094e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010952:	9104      	str	r1, [sp, #16]
 8010954:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010956:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8010b98 <__kernel_rem_pio2f+0x300>
 801095a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8010b94 <__kernel_rem_pio2f+0x2fc>
 801095e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010962:	9203      	str	r2, [sp, #12]
 8010964:	4654      	mov	r4, sl
 8010966:	00a2      	lsls	r2, r4, #2
 8010968:	9205      	str	r2, [sp, #20]
 801096a:	aa58      	add	r2, sp, #352	@ 0x160
 801096c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010970:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010974:	a944      	add	r1, sp, #272	@ 0x110
 8010976:	aa08      	add	r2, sp, #32
 8010978:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801097c:	4694      	mov	ip, r2
 801097e:	4626      	mov	r6, r4
 8010980:	2e00      	cmp	r6, #0
 8010982:	f1a0 0004 	sub.w	r0, r0, #4
 8010986:	dc4c      	bgt.n	8010a22 <__kernel_rem_pio2f+0x18a>
 8010988:	4628      	mov	r0, r5
 801098a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801098e:	f7ff fef7 	bl	8010780 <scalbnf>
 8010992:	eeb0 8a40 	vmov.f32	s16, s0
 8010996:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801099a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801099e:	f000 f9ed 	bl	8010d7c <floorf>
 80109a2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80109a6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80109aa:	2d00      	cmp	r5, #0
 80109ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80109b0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80109b4:	ee17 9a90 	vmov	r9, s15
 80109b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109bc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80109c0:	dd41      	ble.n	8010a46 <__kernel_rem_pio2f+0x1ae>
 80109c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80109c6:	a908      	add	r1, sp, #32
 80109c8:	f1c5 0e08 	rsb	lr, r5, #8
 80109cc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80109d0:	fa46 f00e 	asr.w	r0, r6, lr
 80109d4:	4481      	add	r9, r0
 80109d6:	fa00 f00e 	lsl.w	r0, r0, lr
 80109da:	1a36      	subs	r6, r6, r0
 80109dc:	f1c5 0007 	rsb	r0, r5, #7
 80109e0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80109e4:	4106      	asrs	r6, r0
 80109e6:	2e00      	cmp	r6, #0
 80109e8:	dd3c      	ble.n	8010a64 <__kernel_rem_pio2f+0x1cc>
 80109ea:	f04f 0e00 	mov.w	lr, #0
 80109ee:	f109 0901 	add.w	r9, r9, #1
 80109f2:	4670      	mov	r0, lr
 80109f4:	4574      	cmp	r4, lr
 80109f6:	dc68      	bgt.n	8010aca <__kernel_rem_pio2f+0x232>
 80109f8:	2d00      	cmp	r5, #0
 80109fa:	dd03      	ble.n	8010a04 <__kernel_rem_pio2f+0x16c>
 80109fc:	2d01      	cmp	r5, #1
 80109fe:	d074      	beq.n	8010aea <__kernel_rem_pio2f+0x252>
 8010a00:	2d02      	cmp	r5, #2
 8010a02:	d07d      	beq.n	8010b00 <__kernel_rem_pio2f+0x268>
 8010a04:	2e02      	cmp	r6, #2
 8010a06:	d12d      	bne.n	8010a64 <__kernel_rem_pio2f+0x1cc>
 8010a08:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010a0c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010a10:	b340      	cbz	r0, 8010a64 <__kernel_rem_pio2f+0x1cc>
 8010a12:	4628      	mov	r0, r5
 8010a14:	9306      	str	r3, [sp, #24]
 8010a16:	f7ff feb3 	bl	8010780 <scalbnf>
 8010a1a:	9b06      	ldr	r3, [sp, #24]
 8010a1c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010a20:	e020      	b.n	8010a64 <__kernel_rem_pio2f+0x1cc>
 8010a22:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010a26:	3e01      	subs	r6, #1
 8010a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a30:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010a34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010a38:	ecac 0a01 	vstmia	ip!, {s0}
 8010a3c:	ed90 0a00 	vldr	s0, [r0]
 8010a40:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010a44:	e79c      	b.n	8010980 <__kernel_rem_pio2f+0xe8>
 8010a46:	d105      	bne.n	8010a54 <__kernel_rem_pio2f+0x1bc>
 8010a48:	1e60      	subs	r0, r4, #1
 8010a4a:	a908      	add	r1, sp, #32
 8010a4c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010a50:	11f6      	asrs	r6, r6, #7
 8010a52:	e7c8      	b.n	80109e6 <__kernel_rem_pio2f+0x14e>
 8010a54:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010a58:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a60:	da31      	bge.n	8010ac6 <__kernel_rem_pio2f+0x22e>
 8010a62:	2600      	movs	r6, #0
 8010a64:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6c:	f040 8098 	bne.w	8010ba0 <__kernel_rem_pio2f+0x308>
 8010a70:	1e60      	subs	r0, r4, #1
 8010a72:	2200      	movs	r2, #0
 8010a74:	4550      	cmp	r0, sl
 8010a76:	da4b      	bge.n	8010b10 <__kernel_rem_pio2f+0x278>
 8010a78:	2a00      	cmp	r2, #0
 8010a7a:	d065      	beq.n	8010b48 <__kernel_rem_pio2f+0x2b0>
 8010a7c:	3c01      	subs	r4, #1
 8010a7e:	ab08      	add	r3, sp, #32
 8010a80:	3d08      	subs	r5, #8
 8010a82:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d0f8      	beq.n	8010a7c <__kernel_rem_pio2f+0x1e4>
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010a90:	f7ff fe76 	bl	8010780 <scalbnf>
 8010a94:	1c63      	adds	r3, r4, #1
 8010a96:	aa44      	add	r2, sp, #272	@ 0x110
 8010a98:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8010b98 <__kernel_rem_pio2f+0x300>
 8010a9c:	0099      	lsls	r1, r3, #2
 8010a9e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010aa2:	4623      	mov	r3, r4
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f280 80a9 	bge.w	8010bfc <__kernel_rem_pio2f+0x364>
 8010aaa:	4623      	mov	r3, r4
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f2c0 80c7 	blt.w	8010c40 <__kernel_rem_pio2f+0x3a8>
 8010ab2:	aa44      	add	r2, sp, #272	@ 0x110
 8010ab4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010ab8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010b90 <__kernel_rem_pio2f+0x2f8>
 8010abc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8010b9c <__kernel_rem_pio2f+0x304>
 8010ac0:	2000      	movs	r0, #0
 8010ac2:	1ae2      	subs	r2, r4, r3
 8010ac4:	e0b1      	b.n	8010c2a <__kernel_rem_pio2f+0x392>
 8010ac6:	2602      	movs	r6, #2
 8010ac8:	e78f      	b.n	80109ea <__kernel_rem_pio2f+0x152>
 8010aca:	f852 1b04 	ldr.w	r1, [r2], #4
 8010ace:	b948      	cbnz	r0, 8010ae4 <__kernel_rem_pio2f+0x24c>
 8010ad0:	b121      	cbz	r1, 8010adc <__kernel_rem_pio2f+0x244>
 8010ad2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010ad6:	f842 1c04 	str.w	r1, [r2, #-4]
 8010ada:	2101      	movs	r1, #1
 8010adc:	f10e 0e01 	add.w	lr, lr, #1
 8010ae0:	4608      	mov	r0, r1
 8010ae2:	e787      	b.n	80109f4 <__kernel_rem_pio2f+0x15c>
 8010ae4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010ae8:	e7f5      	b.n	8010ad6 <__kernel_rem_pio2f+0x23e>
 8010aea:	f104 3cff 	add.w	ip, r4, #4294967295
 8010aee:	aa08      	add	r2, sp, #32
 8010af0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010af4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010af8:	a908      	add	r1, sp, #32
 8010afa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010afe:	e781      	b.n	8010a04 <__kernel_rem_pio2f+0x16c>
 8010b00:	f104 3cff 	add.w	ip, r4, #4294967295
 8010b04:	aa08      	add	r2, sp, #32
 8010b06:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010b0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010b0e:	e7f3      	b.n	8010af8 <__kernel_rem_pio2f+0x260>
 8010b10:	a908      	add	r1, sp, #32
 8010b12:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010b16:	3801      	subs	r0, #1
 8010b18:	430a      	orrs	r2, r1
 8010b1a:	e7ab      	b.n	8010a74 <__kernel_rem_pio2f+0x1dc>
 8010b1c:	3201      	adds	r2, #1
 8010b1e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010b22:	2e00      	cmp	r6, #0
 8010b24:	d0fa      	beq.n	8010b1c <__kernel_rem_pio2f+0x284>
 8010b26:	9905      	ldr	r1, [sp, #20]
 8010b28:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010b2c:	eb0d 0001 	add.w	r0, sp, r1
 8010b30:	18e6      	adds	r6, r4, r3
 8010b32:	a91c      	add	r1, sp, #112	@ 0x70
 8010b34:	f104 0c01 	add.w	ip, r4, #1
 8010b38:	384c      	subs	r0, #76	@ 0x4c
 8010b3a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010b3e:	4422      	add	r2, r4
 8010b40:	4562      	cmp	r2, ip
 8010b42:	da04      	bge.n	8010b4e <__kernel_rem_pio2f+0x2b6>
 8010b44:	4614      	mov	r4, r2
 8010b46:	e70e      	b.n	8010966 <__kernel_rem_pio2f+0xce>
 8010b48:	9804      	ldr	r0, [sp, #16]
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	e7e7      	b.n	8010b1e <__kernel_rem_pio2f+0x286>
 8010b4e:	9903      	ldr	r1, [sp, #12]
 8010b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010b54:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8010b58:	9105      	str	r1, [sp, #20]
 8010b5a:	ee07 1a90 	vmov	s15, r1
 8010b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b62:	2400      	movs	r4, #0
 8010b64:	ece6 7a01 	vstmia	r6!, {s15}
 8010b68:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8010b9c <__kernel_rem_pio2f+0x304>
 8010b6c:	46b1      	mov	r9, r6
 8010b6e:	455c      	cmp	r4, fp
 8010b70:	dd04      	ble.n	8010b7c <__kernel_rem_pio2f+0x2e4>
 8010b72:	ece0 7a01 	vstmia	r0!, {s15}
 8010b76:	f10c 0c01 	add.w	ip, ip, #1
 8010b7a:	e7e1      	b.n	8010b40 <__kernel_rem_pio2f+0x2a8>
 8010b7c:	ecfe 6a01 	vldmia	lr!, {s13}
 8010b80:	ed39 7a01 	vldmdb	r9!, {s14}
 8010b84:	3401      	adds	r4, #1
 8010b86:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010b8a:	e7f0      	b.n	8010b6e <__kernel_rem_pio2f+0x2d6>
 8010b8c:	080116cc 	.word	0x080116cc
 8010b90:	080116a0 	.word	0x080116a0
 8010b94:	43800000 	.word	0x43800000
 8010b98:	3b800000 	.word	0x3b800000
 8010b9c:	00000000 	.word	0x00000000
 8010ba0:	9b02      	ldr	r3, [sp, #8]
 8010ba2:	eeb0 0a48 	vmov.f32	s0, s16
 8010ba6:	eba3 0008 	sub.w	r0, r3, r8
 8010baa:	f7ff fde9 	bl	8010780 <scalbnf>
 8010bae:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010b94 <__kernel_rem_pio2f+0x2fc>
 8010bb2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bba:	db19      	blt.n	8010bf0 <__kernel_rem_pio2f+0x358>
 8010bbc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8010b98 <__kernel_rem_pio2f+0x300>
 8010bc0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010bc4:	aa08      	add	r2, sp, #32
 8010bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bca:	3508      	adds	r5, #8
 8010bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bd0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bd8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010bdc:	ee10 3a10 	vmov	r3, s0
 8010be0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010be4:	ee17 3a90 	vmov	r3, s15
 8010be8:	3401      	adds	r4, #1
 8010bea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010bee:	e74c      	b.n	8010a8a <__kernel_rem_pio2f+0x1f2>
 8010bf0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010bf4:	aa08      	add	r2, sp, #32
 8010bf6:	ee10 3a10 	vmov	r3, s0
 8010bfa:	e7f6      	b.n	8010bea <__kernel_rem_pio2f+0x352>
 8010bfc:	a808      	add	r0, sp, #32
 8010bfe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010c02:	9001      	str	r0, [sp, #4]
 8010c04:	ee07 0a90 	vmov	s15, r0
 8010c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c0c:	3b01      	subs	r3, #1
 8010c0e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010c12:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010c16:	ed62 7a01 	vstmdb	r2!, {s15}
 8010c1a:	e743      	b.n	8010aa4 <__kernel_rem_pio2f+0x20c>
 8010c1c:	ecfc 6a01 	vldmia	ip!, {s13}
 8010c20:	ecb5 7a01 	vldmia	r5!, {s14}
 8010c24:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010c28:	3001      	adds	r0, #1
 8010c2a:	4550      	cmp	r0, sl
 8010c2c:	dc01      	bgt.n	8010c32 <__kernel_rem_pio2f+0x39a>
 8010c2e:	4282      	cmp	r2, r0
 8010c30:	daf4      	bge.n	8010c1c <__kernel_rem_pio2f+0x384>
 8010c32:	a858      	add	r0, sp, #352	@ 0x160
 8010c34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010c38:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010c3c:	3b01      	subs	r3, #1
 8010c3e:	e735      	b.n	8010aac <__kernel_rem_pio2f+0x214>
 8010c40:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010c42:	2b02      	cmp	r3, #2
 8010c44:	dc09      	bgt.n	8010c5a <__kernel_rem_pio2f+0x3c2>
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dc2b      	bgt.n	8010ca2 <__kernel_rem_pio2f+0x40a>
 8010c4a:	d044      	beq.n	8010cd6 <__kernel_rem_pio2f+0x43e>
 8010c4c:	f009 0007 	and.w	r0, r9, #7
 8010c50:	b059      	add	sp, #356	@ 0x164
 8010c52:	ecbd 8b04 	vpop	{d8-d9}
 8010c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c5a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010c5c:	2b03      	cmp	r3, #3
 8010c5e:	d1f5      	bne.n	8010c4c <__kernel_rem_pio2f+0x3b4>
 8010c60:	aa30      	add	r2, sp, #192	@ 0xc0
 8010c62:	1f0b      	subs	r3, r1, #4
 8010c64:	4413      	add	r3, r2
 8010c66:	461a      	mov	r2, r3
 8010c68:	4620      	mov	r0, r4
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	f1a2 0204 	sub.w	r2, r2, #4
 8010c70:	dc52      	bgt.n	8010d18 <__kernel_rem_pio2f+0x480>
 8010c72:	4622      	mov	r2, r4
 8010c74:	2a01      	cmp	r2, #1
 8010c76:	f1a3 0304 	sub.w	r3, r3, #4
 8010c7a:	dc5d      	bgt.n	8010d38 <__kernel_rem_pio2f+0x4a0>
 8010c7c:	ab30      	add	r3, sp, #192	@ 0xc0
 8010c7e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8010b9c <__kernel_rem_pio2f+0x304>
 8010c82:	440b      	add	r3, r1
 8010c84:	2c01      	cmp	r4, #1
 8010c86:	dc67      	bgt.n	8010d58 <__kernel_rem_pio2f+0x4c0>
 8010c88:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010c8c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8010c90:	2e00      	cmp	r6, #0
 8010c92:	d167      	bne.n	8010d64 <__kernel_rem_pio2f+0x4cc>
 8010c94:	edc7 6a00 	vstr	s13, [r7]
 8010c98:	ed87 7a01 	vstr	s14, [r7, #4]
 8010c9c:	edc7 7a02 	vstr	s15, [r7, #8]
 8010ca0:	e7d4      	b.n	8010c4c <__kernel_rem_pio2f+0x3b4>
 8010ca2:	ab30      	add	r3, sp, #192	@ 0xc0
 8010ca4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8010b9c <__kernel_rem_pio2f+0x304>
 8010ca8:	440b      	add	r3, r1
 8010caa:	4622      	mov	r2, r4
 8010cac:	2a00      	cmp	r2, #0
 8010cae:	da24      	bge.n	8010cfa <__kernel_rem_pio2f+0x462>
 8010cb0:	b34e      	cbz	r6, 8010d06 <__kernel_rem_pio2f+0x46e>
 8010cb2:	eef1 7a47 	vneg.f32	s15, s14
 8010cb6:	edc7 7a00 	vstr	s15, [r7]
 8010cba:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8010cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cc2:	aa31      	add	r2, sp, #196	@ 0xc4
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	429c      	cmp	r4, r3
 8010cc8:	da20      	bge.n	8010d0c <__kernel_rem_pio2f+0x474>
 8010cca:	b10e      	cbz	r6, 8010cd0 <__kernel_rem_pio2f+0x438>
 8010ccc:	eef1 7a67 	vneg.f32	s15, s15
 8010cd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8010cd4:	e7ba      	b.n	8010c4c <__kernel_rem_pio2f+0x3b4>
 8010cd6:	ab30      	add	r3, sp, #192	@ 0xc0
 8010cd8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8010b9c <__kernel_rem_pio2f+0x304>
 8010cdc:	440b      	add	r3, r1
 8010cde:	2c00      	cmp	r4, #0
 8010ce0:	da05      	bge.n	8010cee <__kernel_rem_pio2f+0x456>
 8010ce2:	b10e      	cbz	r6, 8010ce8 <__kernel_rem_pio2f+0x450>
 8010ce4:	eef1 7a67 	vneg.f32	s15, s15
 8010ce8:	edc7 7a00 	vstr	s15, [r7]
 8010cec:	e7ae      	b.n	8010c4c <__kernel_rem_pio2f+0x3b4>
 8010cee:	ed33 7a01 	vldmdb	r3!, {s14}
 8010cf2:	3c01      	subs	r4, #1
 8010cf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010cf8:	e7f1      	b.n	8010cde <__kernel_rem_pio2f+0x446>
 8010cfa:	ed73 7a01 	vldmdb	r3!, {s15}
 8010cfe:	3a01      	subs	r2, #1
 8010d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010d04:	e7d2      	b.n	8010cac <__kernel_rem_pio2f+0x414>
 8010d06:	eef0 7a47 	vmov.f32	s15, s14
 8010d0a:	e7d4      	b.n	8010cb6 <__kernel_rem_pio2f+0x41e>
 8010d0c:	ecb2 7a01 	vldmia	r2!, {s14}
 8010d10:	3301      	adds	r3, #1
 8010d12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d16:	e7d6      	b.n	8010cc6 <__kernel_rem_pio2f+0x42e>
 8010d18:	edd2 7a00 	vldr	s15, [r2]
 8010d1c:	edd2 6a01 	vldr	s13, [r2, #4]
 8010d20:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010d24:	3801      	subs	r0, #1
 8010d26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d2a:	ed82 7a00 	vstr	s14, [r2]
 8010d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d32:	edc2 7a01 	vstr	s15, [r2, #4]
 8010d36:	e798      	b.n	8010c6a <__kernel_rem_pio2f+0x3d2>
 8010d38:	edd3 7a00 	vldr	s15, [r3]
 8010d3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8010d40:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010d44:	3a01      	subs	r2, #1
 8010d46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d4a:	ed83 7a00 	vstr	s14, [r3]
 8010d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d52:	edc3 7a01 	vstr	s15, [r3, #4]
 8010d56:	e78d      	b.n	8010c74 <__kernel_rem_pio2f+0x3dc>
 8010d58:	ed33 7a01 	vldmdb	r3!, {s14}
 8010d5c:	3c01      	subs	r4, #1
 8010d5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d62:	e78f      	b.n	8010c84 <__kernel_rem_pio2f+0x3ec>
 8010d64:	eef1 6a66 	vneg.f32	s13, s13
 8010d68:	eeb1 7a47 	vneg.f32	s14, s14
 8010d6c:	edc7 6a00 	vstr	s13, [r7]
 8010d70:	ed87 7a01 	vstr	s14, [r7, #4]
 8010d74:	eef1 7a67 	vneg.f32	s15, s15
 8010d78:	e790      	b.n	8010c9c <__kernel_rem_pio2f+0x404>
 8010d7a:	bf00      	nop

08010d7c <floorf>:
 8010d7c:	ee10 3a10 	vmov	r3, s0
 8010d80:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010d84:	3a7f      	subs	r2, #127	@ 0x7f
 8010d86:	2a16      	cmp	r2, #22
 8010d88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010d8c:	dc2b      	bgt.n	8010de6 <floorf+0x6a>
 8010d8e:	2a00      	cmp	r2, #0
 8010d90:	da12      	bge.n	8010db8 <floorf+0x3c>
 8010d92:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010df8 <floorf+0x7c>
 8010d96:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010d9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da2:	dd06      	ble.n	8010db2 <floorf+0x36>
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	da24      	bge.n	8010df2 <floorf+0x76>
 8010da8:	2900      	cmp	r1, #0
 8010daa:	4b14      	ldr	r3, [pc, #80]	@ (8010dfc <floorf+0x80>)
 8010dac:	bf08      	it	eq
 8010dae:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010db2:	ee00 3a10 	vmov	s0, r3
 8010db6:	4770      	bx	lr
 8010db8:	4911      	ldr	r1, [pc, #68]	@ (8010e00 <floorf+0x84>)
 8010dba:	4111      	asrs	r1, r2
 8010dbc:	420b      	tst	r3, r1
 8010dbe:	d0fa      	beq.n	8010db6 <floorf+0x3a>
 8010dc0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010df8 <floorf+0x7c>
 8010dc4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010dc8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd0:	ddef      	ble.n	8010db2 <floorf+0x36>
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	bfbe      	ittt	lt
 8010dd6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010dda:	fa40 f202 	asrlt.w	r2, r0, r2
 8010dde:	189b      	addlt	r3, r3, r2
 8010de0:	ea23 0301 	bic.w	r3, r3, r1
 8010de4:	e7e5      	b.n	8010db2 <floorf+0x36>
 8010de6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010dea:	d3e4      	bcc.n	8010db6 <floorf+0x3a>
 8010dec:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010df0:	4770      	bx	lr
 8010df2:	2300      	movs	r3, #0
 8010df4:	e7dd      	b.n	8010db2 <floorf+0x36>
 8010df6:	bf00      	nop
 8010df8:	7149f2ca 	.word	0x7149f2ca
 8010dfc:	bf800000 	.word	0xbf800000
 8010e00:	007fffff 	.word	0x007fffff

08010e04 <_init>:
 8010e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e06:	bf00      	nop
 8010e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e0a:	bc08      	pop	{r3}
 8010e0c:	469e      	mov	lr, r3
 8010e0e:	4770      	bx	lr

08010e10 <_fini>:
 8010e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e12:	bf00      	nop
 8010e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e16:	bc08      	pop	{r3}
 8010e18:	469e      	mov	lr, r3
 8010e1a:	4770      	bx	lr
