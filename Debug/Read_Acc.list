
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eee0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800f070  0800f070  00010070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8c0  0800f8c0  000112e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8c0  0800f8c0  000108c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8c8  0800f8c8  000112e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8c8  0800f8c8  000108c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f8cc  0800f8cc  000108cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  20000000  0800f8d0  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000112e8  2**0
                  CONTENTS
 10 .bss          00001f38  200002e8  200002e8  000112e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002220  20002220  000112e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000171d0  00000000  00000000  00011318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d03  00000000  00000000  000284e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0002c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100c  00000000  00000000  0002d708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002395f  00000000  00000000  0002e714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae6e  00000000  00000000  00052073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6979  00000000  00000000  0006cee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013385a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c80  00000000  00000000  001338a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0013a520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e8 	.word	0x200002e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f058 	.word	0x0800f058

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	0800f058 	.word	0x0800f058

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <API_PrintAngles>:
/**
 * @brief Function to display on API the Roll, Pitch, Yaw
 * @param angle [0]: Roll, [1]: Pitch, [2]: Yaw
 */
void API_PrintAngles(uint32_t timestamp, float* angle)
{
 8000f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f3c:	b0a8      	sub	sp, #160	@ 0xa0
 8000f3e:	af06      	add	r7, sp, #24
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
	char txBuff[128];
	sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\n", timestamp, angle[0], angle[1], angle[2]);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fafd 	bl	8000548 <__aeabi_f2d>
 8000f4e:	4604      	mov	r4, r0
 8000f50:	460d      	mov	r5, r1
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	3304      	adds	r3, #4
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff faf5 	bl	8000548 <__aeabi_f2d>
 8000f5e:	4680      	mov	r8, r0
 8000f60:	4689      	mov	r9, r1
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3308      	adds	r3, #8
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff faed 	bl	8000548 <__aeabi_f2d>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	f107 0008 	add.w	r0, r7, #8
 8000f76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f7a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f7e:	e9cd 4500 	strd	r4, r5, [sp]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	490a      	ldr	r1, [pc, #40]	@ (8000fb0 <API_PrintAngles+0x78>)
 8000f86:	f00a fbf7 	bl	800b778 <siprintf>
	txBuff[idx++] = '\n';

	// Trasmetti
	CDC_Transmit_FS((uint8_t *) txBuff, idx);*/
	/*------------------------------*/
	CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff));
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff f96e 	bl	8000270 <strlen>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f009 fa74 	bl	800a48c <CDC_Transmit_FS>
}
 8000fa4:	bf00      	nop
 8000fa6:	3788      	adds	r7, #136	@ 0x88
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fae:	bf00      	nop
 8000fb0:	0800f070 	.word	0x0800f070

08000fb4 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a3a      	ldr	r2, [r7, #32]
 8000fd8:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000fde:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6858      	ldr	r0, [r3, #4]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	899b      	ldrh	r3, [r3, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f002 fb22 	bl	8003644 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001000:	2001      	movs	r0, #1
 8001002:	f001 fcbb 	bl	800297c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6858      	ldr	r0, [r3, #4]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	899b      	ldrh	r3, [r3, #12]
 800100e:	2201      	movs	r2, #1
 8001010:	4619      	mov	r1, r3
 8001012:	f002 fb17 	bl	8003644 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001016:	2032      	movs	r0, #50	@ 0x32
 8001018:	f001 fcb0 	bl	800297c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 800101c:	22b6      	movs	r2, #182	@ 0xb6
 800101e:	217e      	movs	r1, #126	@ 0x7e
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 f959 	bl	80012d8 <BMI088_WriteAccRegister>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	4413      	add	r3, r2
 800102e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8001030:	2032      	movs	r0, #50	@ 0x32
 8001032:	f001 fca3 	bl	800297c <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8001036:	f107 0316 	add.w	r3, r7, #22
 800103a:	461a      	mov	r2, r3
 800103c:	2100      	movs	r1, #0
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f000 f8d0 	bl	80011e4 <BMI088_ReadAccRegister>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	4413      	add	r3, r2
 800104c:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 800104e:	200a      	movs	r0, #10
 8001050:	f001 fc94 	bl	800297c <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0x09); /* (no oversampling, ODR = 200 Hz, BW = ?? Hz /////////////////////////BW = 40 Hz) */
 8001054:	2209      	movs	r2, #9
 8001056:	2140      	movs	r1, #64	@ 0x40
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 f93d 	bl	80012d8 <BMI088_WriteAccRegister>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	4413      	add	r3, r2
 8001066:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001068:	200a      	movs	r0, #10
 800106a:	f001 fc87 	bl	800297c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x01); /* +- 6g range */
 800106e:	2201      	movs	r2, #1
 8001070:	2141      	movs	r1, #65	@ 0x41
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 f930 	bl	80012d8 <BMI088_WriteAccRegister>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	4413      	add	r3, r2
 8001080:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001082:	200a      	movs	r0, #10
 8001084:	f001 fc7a 	bl	800297c <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8001088:	220a      	movs	r2, #10
 800108a:	2153      	movs	r1, #83	@ 0x53
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 f923 	bl	80012d8 <BMI088_WriteAccRegister>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	4413      	add	r3, r2
 800109a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800109c:	200a      	movs	r0, #10
 800109e:	f001 fc6d 	bl	800297c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 80010a2:	2204      	movs	r2, #4
 80010a4:	2158      	movs	r1, #88	@ 0x58
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 f916 	bl	80012d8 <BMI088_WriteAccRegister>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	4413      	add	r3, r2
 80010b4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f001 fc60 	bl	800297c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 80010bc:	2200      	movs	r2, #0
 80010be:	217c      	movs	r1, #124	@ 0x7c
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 f909 	bl	80012d8 <BMI088_WriteAccRegister>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	4413      	add	r3, r2
 80010ce:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010d0:	200a      	movs	r0, #10
 80010d2:	f001 fc53 	bl	800297c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80010d6:	2204      	movs	r2, #4
 80010d8:	217d      	movs	r1, #125	@ 0x7d
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f8fc 	bl	80012d8 <BMI088_WriteAccRegister>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	4413      	add	r3, r2
 80010e8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010ea:	200a      	movs	r0, #10
 80010ec:	f001 fc46 	bl	800297c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a3a      	ldr	r2, [pc, #232]	@ (80011dc <BMI088_Init+0x228>)
 80010f4:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2292      	movs	r2, #146	@ 0x92
 80010fa:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6898      	ldr	r0, [r3, #8]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	89db      	ldrh	r3, [r3, #14]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f002 fa9c 	bl	8003644 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 800110c:	22b6      	movs	r2, #182	@ 0xb6
 800110e:	2114      	movs	r1, #20
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 f91b 	bl	800134c <BMI088_WriteGyrRegister>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	4413      	add	r3, r2
 800111e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8001120:	20fa      	movs	r0, #250	@ 0xfa
 8001122:	f001 fc2b 	bl	800297c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8001126:	f107 0316 	add.w	r3, r7, #22
 800112a:	461a      	mov	r2, r3
 800112c:	2100      	movs	r1, #0
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f000 f896 	bl	8001260 <BMI088_ReadGyrRegister>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	4413      	add	r3, r2
 800113c:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 800113e:	200a      	movs	r0, #10
 8001140:	f001 fc1c 	bl	800297c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8001144:	2201      	movs	r2, #1
 8001146:	210f      	movs	r1, #15
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 f8ff 	bl	800134c <BMI088_WriteGyrRegister>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	4413      	add	r3, r2
 8001156:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f001 fc0f 	bl	800297c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* ODR = 200 Hz, Filter bandwidth = 64 Hz */
 800115e:	2206      	movs	r2, #6
 8001160:	2110      	movs	r1, #16
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f8f2 	bl	800134c <BMI088_WriteGyrRegister>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	4413      	add	r3, r2
 8001170:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001172:	200a      	movs	r0, #10
 8001174:	f001 fc02 	bl	800297c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8001178:	2280      	movs	r2, #128	@ 0x80
 800117a:	2115      	movs	r1, #21
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f000 f8e5 	bl	800134c <BMI088_WriteGyrRegister>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	4413      	add	r3, r2
 800118a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f001 fbf5 	bl	800297c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001192:	2201      	movs	r2, #1
 8001194:	2116      	movs	r1, #22
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f8d8 	bl	800134c <BMI088_WriteGyrRegister>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	4413      	add	r3, r2
 80011a4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f001 fbe8 	bl	800297c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80011ac:	2201      	movs	r2, #1
 80011ae:	2118      	movs	r1, #24
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f000 f8cb 	bl	800134c <BMI088_WriteGyrRegister>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	4413      	add	r3, r2
 80011be:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f001 fbdb 	bl	800297c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <BMI088_Init+0x22c>)
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2282      	movs	r2, #130	@ 0x82
 80011d0:	769a      	strb	r2, [r3, #26]

	return status;
 80011d2:	7dfb      	ldrb	r3, [r7, #23]

}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	3a6b70a4 	.word	0x3a6b70a4
 80011e0:	3a0ba058 	.word	0x3a0ba058

080011e4 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	460b      	mov	r3, r1
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	753b      	strb	r3, [r7, #20]
 80011fc:	2300      	movs	r3, #0
 80011fe:	757b      	strb	r3, [r7, #21]
 8001200:	2300      	movs	r3, #0
 8001202:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6858      	ldr	r0, [r3, #4]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	899b      	ldrh	r3, [r3, #12]
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	f002 fa18 	bl	8003644 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	f107 0210 	add.w	r2, r7, #16
 800121c:	f107 0114 	add.w	r1, r7, #20
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2303      	movs	r3, #3
 8001228:	f004 fae5 	bl	80057f6 <HAL_SPI_TransmitReceive>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6858      	ldr	r0, [r3, #4]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	899b      	ldrh	r3, [r3, #12]
 8001242:	2201      	movs	r2, #1
 8001244:	4619      	mov	r1, r3
 8001246:	f002 f9fd 	bl	8003644 <HAL_GPIO_WritePin>

	if (status == 1) {
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d102      	bne.n	8001256 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8001250:	7cba      	ldrb	r2, [r7, #18]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8001256:	7dfb      	ldrb	r3, [r7, #23]

}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af02      	add	r7, sp, #8
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	460b      	mov	r3, r1
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001274:	b2db      	uxtb	r3, r3
 8001276:	753b      	strb	r3, [r7, #20]
 8001278:	2300      	movs	r3, #0
 800127a:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6898      	ldr	r0, [r3, #8]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	89db      	ldrh	r3, [r3, #14]
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	f002 f9dc 	bl	8003644 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	f107 0210 	add.w	r2, r7, #16
 8001294:	f107 0114 	add.w	r1, r7, #20
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2302      	movs	r3, #2
 80012a0:	f004 faa9 	bl	80057f6 <HAL_SPI_TransmitReceive>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf0c      	ite	eq
 80012aa:	2301      	moveq	r3, #1
 80012ac:	2300      	movne	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6898      	ldr	r0, [r3, #8]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	89db      	ldrh	r3, [r3, #14]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	f002 f9c1 	bl	8003644 <HAL_GPIO_WritePin>

	if (status == 1) {
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d102      	bne.n	80012ce <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80012c8:	7c7a      	ldrb	r2, [r7, #17]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80012ce:	7dfb      	ldrb	r3, [r7, #23]

}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
 80012e4:	4613      	mov	r3, r2
 80012e6:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	733b      	strb	r3, [r7, #12]
 80012ec:	78bb      	ldrb	r3, [r7, #2]
 80012ee:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6858      	ldr	r0, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	899b      	ldrh	r3, [r3, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	f002 f9a2 	bl	8003644 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	f107 010c 	add.w	r1, r7, #12
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	2202      	movs	r2, #2
 800130e:	f004 f92e 	bl	800556e <HAL_SPI_Transmit>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf0c      	ite	eq
 8001318:	2301      	moveq	r3, #1
 800131a:	2300      	movne	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001320:	bf00      	nop
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fe26 	bl	8005f78 <HAL_SPI_GetState>
 800132c:	4603      	mov	r3, r0
 800132e:	2b01      	cmp	r3, #1
 8001330:	d1f7      	bne.n	8001322 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6858      	ldr	r0, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	899b      	ldrh	r3, [r3, #12]
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	f002 f981 	bl	8003644 <HAL_GPIO_WritePin>

	return status;
 8001342:	7bfb      	ldrb	r3, [r7, #15]

}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
 8001358:	4613      	mov	r3, r2
 800135a:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	733b      	strb	r3, [r7, #12]
 8001360:	78bb      	ldrb	r3, [r7, #2]
 8001362:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6898      	ldr	r0, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	89db      	ldrh	r3, [r3, #14]
 800136c:	2200      	movs	r2, #0
 800136e:	4619      	mov	r1, r3
 8001370:	f002 f968 	bl	8003644 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	f107 010c 	add.w	r1, r7, #12
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	2202      	movs	r2, #2
 8001382:	f004 f8f4 	bl	800556e <HAL_SPI_Transmit>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001394:	bf00      	nop
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fdec 	bl	8005f78 <HAL_SPI_GetState>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d1f7      	bne.n	8001396 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6898      	ldr	r0, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	89db      	ldrh	r3, [r3, #14]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	f002 f947 	bl	8003644 <HAL_GPIO_WritePin>

	return status;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]

}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6858      	ldr	r0, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	899b      	ldrh	r3, [r3, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	4619      	mov	r1, r3
 80013d4:	f002 f936 	bl	8003644 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f103 0112 	add.w	r1, r3, #18
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80013e8:	2308      	movs	r3, #8
 80013ea:	f004 fbad 	bl	8005b48 <HAL_SPI_TransmitReceive_DMA>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d104      	bne.n	80013fe <BMI088_ReadAccelerometerDMA+0x3e>

		imu->readingAcc = 1;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	741a      	strb	r2, [r3, #16]
		return 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e008      	b.n	8001410 <BMI088_ReadAccelerometerDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6858      	ldr	r0, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	899b      	ldrh	r3, [r3, #12]
 8001406:	2201      	movs	r2, #1
 8001408:	4619      	mov	r1, r3
 800140a:	f002 f91b 	bl	8003644 <HAL_GPIO_WritePin>
		return 0;
 800140e:	2300      	movs	r3, #0

	}

}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6858      	ldr	r0, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	899b      	ldrh	r3, [r3, #12]
 8001428:	2201      	movs	r2, #1
 800142a:	4619      	mov	r1, r3
 800142c:	f002 f90a 	bl	8003644 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800143c:	b2db      	uxtb	r3, r3
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001448:	b2db      	uxtb	r3, r3
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001456:	b2db      	uxtb	r3, r3
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	b21a      	sxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001462:	b2db      	uxtb	r3, r3
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001470:	b2db      	uxtb	r3, r3
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800147c:	b2db      	uxtb	r3, r3
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800148a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6898      	ldr	r0, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	89db      	ldrh	r3, [r3, #14]
 80014f0:	2200      	movs	r2, #0
 80014f2:	4619      	mov	r1, r3
 80014f4:	f002 f8a6 	bl	8003644 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f103 011a 	add.w	r1, r3, #26
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001508:	2307      	movs	r3, #7
 800150a:	f004 fb1d 	bl	8005b48 <HAL_SPI_TransmitReceive_DMA>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d104      	bne.n	800151e <BMI088_ReadGyroscopeDMA+0x3e>

		imu->readingGyr = 1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	745a      	strb	r2, [r3, #17]
		return 1;
 800151a:	2301      	movs	r3, #1
 800151c:	e008      	b.n	8001530 <BMI088_ReadGyroscopeDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6898      	ldr	r0, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	89db      	ldrh	r3, [r3, #14]
 8001526:	2201      	movs	r2, #1
 8001528:	4619      	mov	r1, r3
 800152a:	f002 f88b 	bl	8003644 <HAL_GPIO_WritePin>
		return 0;
 800152e:	2300      	movs	r3, #0

	}

}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6898      	ldr	r0, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	89db      	ldrh	r3, [r3, #14]
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	f002 f87a 	bl	8003644 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800155c:	b2db      	uxtb	r3, r3
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21a      	sxth	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001568:	b2db      	uxtb	r3, r3
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001576:	b2db      	uxtb	r3, r3
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001582:	b2db      	uxtb	r3, r3
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001590:	b2db      	uxtb	r3, r3
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <SetQuaternionFromEuler>:

float correction_factor = 0.0f;


// Set angles to a specified quantity
void SetQuaternionFromEuler(Quaternion *q, float roll, float pitch, float yaw) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	ed87 0a02 	vstr	s0, [r7, #8]
 800160c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001610:	ed87 1a00 	vstr	s2, [r7]
	roll = roll * DEG_TO_RAD;
 8001614:	edd7 7a02 	vldr	s15, [r7, #8]
 8001618:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80017a4 <SetQuaternionFromEuler+0x1a4>
 800161c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001620:	edc7 7a02 	vstr	s15, [r7, #8]
	pitch = pitch * DEG_TO_RAD;
 8001624:	edd7 7a01 	vldr	s15, [r7, #4]
 8001628:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80017a4 <SetQuaternionFromEuler+0x1a4>
 800162c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001630:	edc7 7a01 	vstr	s15, [r7, #4]
	yaw = yaw* DEG_TO_RAD;
 8001634:	edd7 7a00 	vldr	s15, [r7]
 8001638:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80017a4 <SetQuaternionFromEuler+0x1a4>
 800163c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001640:	edc7 7a00 	vstr	s15, [r7]
    float cr = cosf(roll * 0.5f);
 8001644:	edd7 7a02 	vldr	s15, [r7, #8]
 8001648:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800164c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001650:	eeb0 0a67 	vmov.f32	s0, s15
 8001654:	f00c fa38 	bl	800dac8 <cosf>
 8001658:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float sr = sinf(roll * 0.5f);
 800165c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001660:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	f00c fa78 	bl	800db60 <sinf>
 8001670:	ed87 0a08 	vstr	s0, [r7, #32]
    float cp = cosf(pitch * 0.5f);
 8001674:	edd7 7a01 	vldr	s15, [r7, #4]
 8001678:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800167c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001680:	eeb0 0a67 	vmov.f32	s0, s15
 8001684:	f00c fa20 	bl	800dac8 <cosf>
 8001688:	ed87 0a07 	vstr	s0, [r7, #28]
    float sp = sinf(pitch * 0.5f);
 800168c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001690:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	f00c fa60 	bl	800db60 <sinf>
 80016a0:	ed87 0a06 	vstr	s0, [r7, #24]
    float cy = cosf(yaw * 0.5f);
 80016a4:	edd7 7a00 	vldr	s15, [r7]
 80016a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	f00c fa08 	bl	800dac8 <cosf>
 80016b8:	ed87 0a05 	vstr	s0, [r7, #20]
    float sy = sinf(yaw * 0.5f);
 80016bc:	edd7 7a00 	vldr	s15, [r7]
 80016c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	f00c fa48 	bl	800db60 <sinf>
 80016d0:	ed87 0a04 	vstr	s0, [r7, #16]

    q->w = cr * cp * cy + sr * sp * sy;
 80016d4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e8:	edd7 6a08 	vldr	s13, [r7, #32]
 80016ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	edc3 7a00 	vstr	s15, [r3]
    q->x = sr * cp * cy - cr * sp * sy;
 8001706:	ed97 7a08 	vldr	s14, [r7, #32]
 800170a:	edd7 7a07 	vldr	s15, [r7, #28]
 800170e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001712:	edd7 7a05 	vldr	s15, [r7, #20]
 8001716:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800171e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001722:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001726:	edd7 7a04 	vldr	s15, [r7, #16]
 800172a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y = cr * sp * cy + sr * cp * sy;
 8001738:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800173c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	edd7 7a05 	vldr	s15, [r7, #20]
 8001748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001750:	edd7 7a07 	vldr	s15, [r7, #28]
 8001754:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001758:	edd7 7a04 	vldr	s15, [r7, #16]
 800175c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z = cr * cp * sy - sr * sp * cy;
 800176a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800176e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001776:	edd7 7a04 	vldr	s15, [r7, #16]
 800177a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001782:	edd7 7a06 	vldr	s15, [r7, #24]
 8001786:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800178a:	edd7 7a05 	vldr	s15, [r7, #20]
 800178e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	@ 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	3c8efa39 	.word	0x3c8efa39

080017a8 <NormalizeQuaternion>:




// Function to normalize a generic quaternion
void NormalizeQuaternion(Quaternion *q) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
    float norm = sqrt(q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	ed93 7a00 	vldr	s14, [r3]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80017cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80017e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80017f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fc:	ee17 0a90 	vmov	r0, s15
 8001800:	f7fe fea2 	bl	8000548 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	ec43 2b10 	vmov	d0, r2, r3
 800180c:	f00c f928 	bl	800da60 <sqrt>
 8001810:	ec53 2b10 	vmov	r2, r3, d0
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9c6 	bl	8000ba8 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]
    if (norm > 0.0f) {
 8001820:	edd7 7a03 	vldr	s15, [r7, #12]
 8001824:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	dc00      	bgt.n	8001830 <NormalizeQuaternion+0x88>
        q->w /= norm;
        q->x /= norm;
        q->y /= norm;
        q->z /= norm;
    }
}
 800182e:	e027      	b.n	8001880 <NormalizeQuaternion+0xd8>
        q->w /= norm;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	edd3 6a00 	vldr	s13, [r3]
 8001836:	ed97 7a03 	vldr	s14, [r7, #12]
 800183a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	edc3 7a00 	vstr	s15, [r3]
        q->x /= norm;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	edd3 6a01 	vldr	s13, [r3, #4]
 800184a:	ed97 7a03 	vldr	s14, [r7, #12]
 800184e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	edc3 7a01 	vstr	s15, [r3, #4]
        q->y /= norm;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	edd3 6a02 	vldr	s13, [r3, #8]
 800185e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	edc3 7a02 	vstr	s15, [r3, #8]
        q->z /= norm;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001872:	ed97 7a03 	vldr	s14, [r7, #12]
 8001876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <UpdateQuaternion>:


// Update the rotation
void UpdateQuaternion(Quaternion *q, Vector3 gyro, float dt) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	@ 0x38
 800188c:	af00      	add	r7, sp, #0
 800188e:	6178      	str	r0, [r7, #20]
 8001890:	eef0 6a40 	vmov.f32	s13, s0
 8001894:	eeb0 7a60 	vmov.f32	s14, s1
 8001898:	eef0 7a41 	vmov.f32	s15, s2
 800189c:	edc7 1a01 	vstr	s3, [r7, #4]
 80018a0:	edc7 6a02 	vstr	s13, [r7, #8]
 80018a4:	ed87 7a03 	vstr	s14, [r7, #12]
 80018a8:	edc7 7a04 	vstr	s15, [r7, #16]
    float gx = gyro.x * 0.5f * dt;
 80018ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80018bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float gy = gyro.y * 0.5f * dt;
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80018d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float gz = gyro.z * 0.5f * dt;
 80018dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80018ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    Quaternion q_dot = {
        -q->x * gx - q->y * gy - q->z * gz,
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018fa:	eeb1 7a67 	vneg.f32	s14, s15
 80018fe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	edd3 6a02 	vldr	s13, [r3, #8]
 800190c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	edd3 6a03 	vldr	s13, [r3, #12]
 800191e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001926:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion q_dot = {
 800192a:	edc7 7a07 	vstr	s15, [r7, #28]
         q->w * gx + q->y * gz - q->z * gy,
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001942:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	edd3 6a03 	vldr	s13, [r3, #12]
 8001954:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion q_dot = {
 8001960:	edc7 7a08 	vstr	s15, [r7, #32]
         q->w * gy - q->x * gz + q->z * gx,
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800196e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	edd3 6a01 	vldr	s13, [r3, #4]
 8001978:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800197c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	edd3 6a03 	vldr	s13, [r3, #12]
 800198a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee77 7a27 	vadd.f32	s15, s14, s15
    Quaternion q_dot = {
 8001996:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         q->w * gz + q->x * gy - q->y * gx
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	ed93 7a00 	vldr	s14, [r3]
 80019a0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80019ae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80019c0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c8:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion q_dot = {
 80019cc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    };

    q->w += q_dot.w;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	ed93 7a00 	vldr	s14, [r3]
 80019d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	edc3 7a00 	vstr	s15, [r3]
    q->x += q_dot.x;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80019ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y += q_dot.y;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80019fe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z += q_dot.z;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a12:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	edc3 7a03 	vstr	s15, [r3, #12]

    NormalizeQuaternion(q);
 8001a20:	6978      	ldr	r0, [r7, #20]
 8001a22:	f7ff fec1 	bl	80017a8 <NormalizeQuaternion>
}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	@ 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <CorrectQuaternionWithAccel>:

// Correction with accelerometer
void CorrectQuaternionWithAccel(Quaternion *q, Vector3 accel, float alpha) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	@ 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6178      	str	r0, [r7, #20]
 8001a38:	eef0 6a40 	vmov.f32	s13, s0
 8001a3c:	eeb0 7a60 	vmov.f32	s14, s1
 8001a40:	eef0 7a41 	vmov.f32	s15, s2
 8001a44:	edc7 1a01 	vstr	s3, [r7, #4]
 8001a48:	edc7 6a02 	vstr	s13, [r7, #8]
 8001a4c:	ed87 7a03 	vstr	s14, [r7, #12]
 8001a50:	edc7 7a04 	vstr	s15, [r7, #16]
	// (alpha not used right now)
    Vector3 gravity = { 2.0f * (q->x * q->z - q->w * q->y),
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	edd3 6a00 	vldr	s13, [r3]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a7c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                        2.0f * (q->w * q->x + q->y * q->z),
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    Vector3 gravity = { 2.0f * (q->x * q->z - q->w * q->y),
 8001aa8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                        q->w * q->w - q->x * q->x - q->y * q->y + q->z * q->z };
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	edd3 6a03 	vldr	s13, [r3, #12]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	edd3 7a03 	vldr	s15, [r3, #12]
 8001af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
    Vector3 gravity = { 2.0f * (q->x * q->z - q->w * q->y),
 8001af8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    Vector3 error = { accel.y * gravity.z - accel.z * gravity.y,
 8001afc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b00:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b08:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b0c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	edc7 7a06 	vstr	s15, [r7, #24]
                      accel.z * gravity.x - accel.x * gravity.z,
 8001b1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b28:	edd7 6a02 	vldr	s13, [r7, #8]
 8001b2c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a67 	vsub.f32	s15, s14, s15
    Vector3 error = { accel.y * gravity.z - accel.z * gravity.y,
 8001b38:	edc7 7a07 	vstr	s15, [r7, #28]
                      accel.x * gravity.y - accel.y * gravity.x };
 8001b3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b40:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b48:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b4c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b54:	ee77 7a67 	vsub.f32	s15, s14, s15
    Vector3 error = { accel.y * gravity.z - accel.z * gravity.y,
 8001b58:	edc7 7a08 	vstr	s15, [r7, #32]

	correction_factor = 0.0f;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <CorrectQuaternionWithAccel+0x19c>)
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    q->x += correction_factor * error.x;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b6a:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <CorrectQuaternionWithAccel+0x19c>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	edc3 7a01 	vstr	s15, [r3, #4]
	q->y += correction_factor * error.y;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <CorrectQuaternionWithAccel+0x19c>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	edc3 7a02 	vstr	s15, [r3, #8]
	q->z += correction_factor * error.z;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ba6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001baa:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <CorrectQuaternionWithAccel+0x19c>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	edc3 7a03 	vstr	s15, [r3, #12]

    NormalizeQuaternion(q);
 8001bbe:	6978      	ldr	r0, [r7, #20]
 8001bc0:	f7ff fdf2 	bl	80017a8 <NormalizeQuaternion>
}
 8001bc4:	bf00      	nop
 8001bc6:	3730      	adds	r7, #48	@ 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000304 	.word	0x20000304

08001bd0 <QuaternionToEuler>:



// Conversion from quaternion to euler angles
void QuaternionToEuler(Quaternion q, float* ang) {
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b08c      	sub	sp, #48	@ 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	eeb0 6a40 	vmov.f32	s12, s0
 8001bda:	eef0 6a60 	vmov.f32	s13, s1
 8001bde:	eeb0 7a41 	vmov.f32	s14, s2
 8001be2:	eef0 7a61 	vmov.f32	s15, s3
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	ed87 6a02 	vstr	s12, [r7, #8]
 8001bec:	edc7 6a03 	vstr	s13, [r7, #12]
 8001bf0:	ed87 7a04 	vstr	s14, [r7, #16]
 8001bf4:	edc7 7a05 	vstr	s15, [r7, #20]
    //EulerAngles angles;

    // Roll (X-axis rotation)
    float sinr_cosp = 2.0f * (q.w * q.x + q.y * q.z);
 8001bf8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c04:	edd7 6a04 	vldr	s13, [r7, #16]
 8001c08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c18:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float cosr_cosp = 1.0f - 2.0f * (q.x * q.x + q.y * q.y);
 8001c1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c28:	edd7 6a04 	vldr	s13, [r7, #16]
 8001c2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c44:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles.roll = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
    ang[0] = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
 8001c48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c4a:	f7fe fc7d 	bl	8000548 <__aeabi_f2d>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	460d      	mov	r5, r1
 8001c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c54:	f7fe fc78 	bl	8000548 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	ec43 2b11 	vmov	d1, r2, r3
 8001c60:	ec45 4b10 	vmov	d0, r4, r5
 8001c64:	f00b fefa 	bl	800da5c <atan2>
 8001c68:	ec51 0b10 	vmov	r0, r1, d0
 8001c6c:	a356      	add	r3, pc, #344	@ (adr r3, 8001dc8 <QuaternionToEuler+0x1f8>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fcc1 	bl	80005f8 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ff93 	bl	8000ba8 <__aeabi_d2f>
 8001c82:	4602      	mov	r2, r0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	601a      	str	r2, [r3, #0]

    // Pitch (Y-axis rotation)
    float sinp = 2.0f * (q.w * q.y - q.z * q.x);
 8001c88:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ca8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (fabs(sinp) >= 1)
 8001cac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cb0:	eef0 7ae7 	vabs.f32	s15, s15
 8001cb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	db13      	blt.n	8001cea <QuaternionToEuler+0x11a>
        ang[1] = copysign(90.0f, sinp); // Evita errori numerici, blocco di gimbal lock
 8001cc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cc4:	f7fe fc40 	bl	8000548 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	ec43 2b11 	vmov	d1, r2, r3
 8001cd0:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8001dc0 <QuaternionToEuler+0x1f0>
 8001cd4:	f009 fe41 	bl	800b95a <copysign>
 8001cd8:	ec51 0b10 	vmov	r0, r1, d0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	1d1c      	adds	r4, r3, #4
 8001ce0:	f7fe ff62 	bl	8000ba8 <__aeabi_d2f>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	6023      	str	r3, [r4, #0]
 8001ce8:	e019      	b.n	8001d1e <QuaternionToEuler+0x14e>
    else
        ang[1] = asin(sinp) * RAD_TO_DEG;
 8001cea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cec:	f7fe fc2c 	bl	8000548 <__aeabi_f2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	ec43 2b10 	vmov	d0, r2, r3
 8001cf8:	f00b fe7c 	bl	800d9f4 <asin>
 8001cfc:	ec51 0b10 	vmov	r0, r1, d0
 8001d00:	a331      	add	r3, pc, #196	@ (adr r3, 8001dc8 <QuaternionToEuler+0x1f8>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f7fe fc77 	bl	80005f8 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	1d1c      	adds	r4, r3, #4
 8001d16:	f7fe ff47 	bl	8000ba8 <__aeabi_d2f>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6023      	str	r3, [r4, #0]

    // Yaw (Z-axis rotation)
    float siny_cosp = 2.0f * (q.w * q.z + q.x * q.y);
 8001d1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2a:	edd7 6a03 	vldr	s13, [r7, #12]
 8001d2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d3e:	edc7 7a08 	vstr	s15, [r7, #32]
    float cosy_cosp = 1.0f - 2.0f * (q.y * q.y + q.z * q.z);
 8001d42:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d46:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6a:	edc7 7a07 	vstr	s15, [r7, #28]
    ang[2] = atan2(siny_cosp, cosy_cosp) * RAD_TO_DEG;
 8001d6e:	6a38      	ldr	r0, [r7, #32]
 8001d70:	f7fe fbea 	bl	8000548 <__aeabi_f2d>
 8001d74:	4604      	mov	r4, r0
 8001d76:	460d      	mov	r5, r1
 8001d78:	69f8      	ldr	r0, [r7, #28]
 8001d7a:	f7fe fbe5 	bl	8000548 <__aeabi_f2d>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	ec43 2b11 	vmov	d1, r2, r3
 8001d86:	ec45 4b10 	vmov	d0, r4, r5
 8001d8a:	f00b fe67 	bl	800da5c <atan2>
 8001d8e:	ec51 0b10 	vmov	r0, r1, d0
 8001d92:	a30d      	add	r3, pc, #52	@ (adr r3, 8001dc8 <QuaternionToEuler+0x1f8>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fc2e 	bl	80005f8 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f103 0408 	add.w	r4, r3, #8
 8001daa:	f7fe fefd 	bl	8000ba8 <__aeabi_d2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	6023      	str	r3, [r4, #0]


    /*ang[0] = angles.roll;
    ang[1] = angles.pitch;
    ang[2] = angles.yaw;*/
}
 8001db2:	bf00      	nop
 8001db4:	3730      	adds	r7, #48	@ 0x30
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40568000 	.word	0x40568000
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	404ca5dc 	.word	0x404ca5dc

08001dd0 <HAL_GPIO_EXTI_Callback>:
uint32_t timerToggle = 0;



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d103      	bne.n	8001de8 <HAL_GPIO_EXTI_Callback+0x18>
	{
		// we check if the interrupt pin is the accelerometer one
		BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 8001de0:	4806      	ldr	r0, [pc, #24]	@ (8001dfc <HAL_GPIO_EXTI_Callback+0x2c>)
 8001de2:	f7ff faed 	bl	80013c0 <BMI088_ReadAccelerometerDMA>
	else if(GPIO_Pin == INT_GYR_Pin)
	{
		// we check if the interrupt pin is the gyroscope one
		BMI088_ReadGyroscopeDMA(&imu);
	}
}
 8001de6:	e005      	b.n	8001df4 <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == INT_GYR_Pin)
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d102      	bne.n	8001df4 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 8001dee:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <HAL_GPIO_EXTI_Callback+0x2c>)
 8001df0:	f7ff fb76 	bl	80014e0 <BMI088_ReadGyroscopeDMA>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000468 	.word	0x20000468

08001e00 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <HAL_SPI_TxRxCpltCallback+0x38>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10d      	bne.n	8001e2e <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001e14:	7c1b      	ldrb	r3, [r3, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8001e1a:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001e1c:	f7ff fafc 	bl	8001418 <BMI088_ReadAccelerometerDMA_Complete>
		}

		if (imu.readingGyr)
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001e22:	7c5b      	ldrb	r3, [r3, #17]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001e2a:	f7ff fb85 	bl	8001538 <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40013000 	.word	0x40013000
 8001e3c:	20000468 	.word	0x20000468

08001e40 <Take_IMU_Measurements>:


void Take_IMU_Measurements(BMI088 *imu)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	acc[2] = imu->acc_mps2[2];
	gyr[0] = imu->gyr_rps[0];
	gyr[1] = imu->gyr_rps[1];
	gyr[2] = imu->gyr_rps[2];*/

	gyr.y = -imu->gyr_rps[0];
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001e4e:	eef1 7a67 	vneg.f32	s15, s15
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <Take_IMU_Measurements+0x54>)
 8001e54:	edc3 7a01 	vstr	s15, [r3, #4]
	gyr.x = imu->gyr_rps[1];
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <Take_IMU_Measurements+0x54>)
 8001e5e:	6013      	str	r3, [r2, #0]
	gyr.z = imu->gyr_rps[2];
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e64:	4a0b      	ldr	r2, [pc, #44]	@ (8001e94 <Take_IMU_Measurements+0x54>)
 8001e66:	6093      	str	r3, [r2, #8]
	acc.y = -imu->acc_mps2[0];
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001e6e:	eef1 7a67 	vneg.f32	s15, s15
 8001e72:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <Take_IMU_Measurements+0x58>)
 8001e74:	edc3 7a01 	vstr	s15, [r3, #4]
	acc.x = imu->acc_mps2[1];
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7c:	4a06      	ldr	r2, [pc, #24]	@ (8001e98 <Take_IMU_Measurements+0x58>)
 8001e7e:	6013      	str	r3, [r2, #0]
	acc.z = imu->acc_mps2[2];
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <Take_IMU_Measurements+0x58>)
 8001e86:	6093      	str	r3, [r2, #8]

}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	200004c8 	.word	0x200004c8
 8001e98:	200004d4 	.word	0x200004d4

08001e9c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eac:	d147      	bne.n	8001f3e <HAL_TIM_PeriodElapsedCallback+0xa2>
    {
        // Code to execute at constant sample rate
        Take_IMU_Measurements(&imu);
 8001eae:	4826      	ldr	r0, [pc, #152]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001eb0:	f7ff ffc6 	bl	8001e40 <Take_IMU_Measurements>

        float dt = 0.001f; // 1ms
 8001eb4:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001eb6:	60fb      	str	r3, [r7, #12]
        UpdateQuaternion(&q, gyr, dt);
 8001eb8:	4b25      	ldr	r3, [pc, #148]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001eba:	edd3 6a00 	vldr	s13, [r3]
 8001ebe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ec2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ec6:	edd7 1a03 	vldr	s3, [r7, #12]
 8001eca:	eeb0 0a66 	vmov.f32	s0, s13
 8001ece:	eef0 0a47 	vmov.f32	s1, s14
 8001ed2:	eeb0 1a67 	vmov.f32	s2, s15
 8001ed6:	481f      	ldr	r0, [pc, #124]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ed8:	f7ff fcd6 	bl	8001888 <UpdateQuaternion>
        CorrectQuaternionWithAccel(&q, acc, 0.9f);
 8001edc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ede:	edd3 6a00 	vldr	s13, [r3]
 8001ee2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eea:	eddf 1a1c 	vldr	s3, [pc, #112]	@ 8001f5c <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001eee:	eeb0 0a66 	vmov.f32	s0, s13
 8001ef2:	eef0 0a47 	vmov.f32	s1, s14
 8001ef6:	eeb0 1a67 	vmov.f32	s2, s15
 8001efa:	4816      	ldr	r0, [pc, #88]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001efc:	f7ff fd98 	bl	8001a30 <CorrectQuaternionWithAccel>
        QuaternionToEuler(q, angles);
 8001f00:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001f02:	ed93 6a00 	vldr	s12, [r3]
 8001f06:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f12:	4813      	ldr	r0, [pc, #76]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f14:	eeb0 0a46 	vmov.f32	s0, s12
 8001f18:	eef0 0a66 	vmov.f32	s1, s13
 8001f1c:	eeb0 1a47 	vmov.f32	s2, s14
 8001f20:	eef0 1a67 	vmov.f32	s3, s15
 8001f24:	f7ff fe54 	bl	8001bd0 <QuaternionToEuler>


		API_PrintAngles(timestamp, angles);
 8001f28:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	490c      	ldr	r1, [pc, #48]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f802 	bl	8000f38 <API_PrintAngles>
		//float gyrArr[3] = {gyr.x, gyr.y, gyr.z};
		//float accArr[3] = {acc.x, acc.y, acc.z};
		//API_SendInertial(HAL_GetTick(), gyrArr, accArr);

		timestamp++;	// everytime
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f3c:	6013      	str	r3, [r2, #0]
    }
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000468 	.word	0x20000468
 8001f4c:	3a83126f 	.word	0x3a83126f
 8001f50:	200004c8 	.word	0x200004c8
 8001f54:	20000000 	.word	0x20000000
 8001f58:	200004d4 	.word	0x200004d4
 8001f5c:	3f666666 	.word	0x3f666666
 8001f60:	200004b8 	.word	0x200004b8
 8001f64:	200004c4 	.word	0x200004c4

08001f68 <Toggle>:


void Toggle()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	// Toggle to show if the code is running
	if ((HAL_GetTick() - timerToggle) >= SAMPLE_TIME_MS_TOGGLE)
 8001f6c:	f000 fcfa 	bl	8002964 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <Toggle+0x38>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f7c:	d308      	bcc.n	8001f90 <Toggle+0x28>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001f7e:	2110      	movs	r1, #16
 8001f80:	4808      	ldr	r0, [pc, #32]	@ (8001fa4 <Toggle+0x3c>)
 8001f82:	f001 fb78 	bl	8003676 <HAL_GPIO_TogglePin>
		timerToggle = HAL_GetTick();
 8001f86:	f000 fced 	bl	8002964 <HAL_GetTick>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <Toggle+0x38>)
 8001f8e:	6013      	str	r3, [r2, #0]
	}
	timerUSB = HAL_GetTick();
 8001f90:	f000 fce8 	bl	8002964 <HAL_GetTick>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <Toggle+0x40>)
 8001f98:	6013      	str	r3, [r2, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200004e4 	.word	0x200004e4
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	200004e0 	.word	0x200004e0

08001fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb2:	f000 fc71 	bl	8002898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb6:	f000 f839 	bl	800202c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fba:	f000 f94b 	bl	8002254 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fbe:	f000 f921 	bl	8002204 <MX_DMA_Init>
  MX_SPI1_Init();
 8001fc2:	f000 f89d 	bl	8002100 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001fc6:	f000 f8d1 	bl	800216c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001fca:	f008 f9a1 	bl	800a310 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8001fce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd2:	f000 fcd3 	bl	800297c <HAL_Delay>
  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 8001fd6:	2310      	movs	r3, #16
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	4b0d      	ldr	r3, [pc, #52]	@ (8002010 <main+0x64>)
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2310      	movs	r3, #16
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8002014 <main+0x68>)
 8001fe2:	490d      	ldr	r1, [pc, #52]	@ (8002018 <main+0x6c>)
 8001fe4:	480d      	ldr	r0, [pc, #52]	@ (800201c <main+0x70>)
 8001fe6:	f7fe ffe5 	bl	8000fb4 <BMI088_Init>
  //EKF_CalculateGyroBias(&imu, 500);
  SetQuaternionFromEuler(&q, 0, 0, 0);	// Angles on the starting position: roll=0, pitch=0, yaw=0
 8001fea:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 8002020 <main+0x74>
 8001fee:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8002020 <main+0x74>
 8001ff2:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8002020 <main+0x74>
 8001ff6:	480b      	ldr	r0, [pc, #44]	@ (8002024 <main+0x78>)
 8001ff8:	f7ff fb02 	bl	8001600 <SetQuaternionFromEuler>
  HAL_Delay(1000);
 8001ffc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002000:	f000 fcbc 	bl	800297c <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim2);   // Start timer
 8002004:	4808      	ldr	r0, [pc, #32]	@ (8002028 <main+0x7c>)
 8002006:	f004 fa43 	bl	8006490 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  Toggle();
 800200a:	f7ff ffad 	bl	8001f68 <Toggle>
 800200e:	e7fc      	b.n	800200a <main+0x5e>
 8002010:	40020800 	.word	0x40020800
 8002014:	40020000 	.word	0x40020000
 8002018:	20000308 	.word	0x20000308
 800201c:	20000468 	.word	0x20000468
 8002020:	00000000 	.word	0x00000000
 8002024:	20000000 	.word	0x20000000
 8002028:	20000420 	.word	0x20000420

0800202c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b094      	sub	sp, #80	@ 0x50
 8002030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002032:	f107 0320 	add.w	r3, r7, #32
 8002036:	2230      	movs	r2, #48	@ 0x30
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f009 fbff 	bl	800b83e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <SystemClock_Config+0xcc>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	4a27      	ldr	r2, [pc, #156]	@ (80020f8 <SystemClock_Config+0xcc>)
 800205a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800205e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002060:	4b25      	ldr	r3, [pc, #148]	@ (80020f8 <SystemClock_Config+0xcc>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800206c:	2300      	movs	r3, #0
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <SystemClock_Config+0xd0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a21      	ldr	r2, [pc, #132]	@ (80020fc <SystemClock_Config+0xd0>)
 8002076:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <SystemClock_Config+0xd0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002088:	2301      	movs	r3, #1
 800208a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800208c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002092:	2302      	movs	r3, #2
 8002094:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002096:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800209a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800209c:	2308      	movs	r3, #8
 800209e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80020a0:	23a8      	movs	r3, #168	@ 0xa8
 80020a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020a4:	2302      	movs	r3, #2
 80020a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020a8:	2307      	movs	r3, #7
 80020aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ac:	f107 0320 	add.w	r3, r7, #32
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 fd65 	bl	8004b80 <HAL_RCC_OscConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020bc:	f000 f970 	bl	80023a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c0:	230f      	movs	r3, #15
 80020c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c4:	2302      	movs	r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	2105      	movs	r1, #5
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 ffc6 	bl	8005070 <HAL_RCC_ClockConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020ea:	f000 f959 	bl	80023a0 <Error_Handler>
  }
}
 80020ee:	bf00      	nop
 80020f0:	3750      	adds	r7, #80	@ 0x50
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000

08002100 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002104:	4b17      	ldr	r3, [pc, #92]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002106:	4a18      	ldr	r2, [pc, #96]	@ (8002168 <MX_SPI1_Init+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <MX_SPI1_Init+0x64>)
 800210c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002110:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002112:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <MX_SPI1_Init+0x64>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800211e:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002124:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <MX_SPI1_Init+0x64>)
 800212c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002130:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002132:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002134:	2210      	movs	r2, #16
 8002136:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <MX_SPI1_Init+0x64>)
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002140:	2200      	movs	r2, #0
 8002142:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002144:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002146:	2200      	movs	r2, #0
 8002148:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <MX_SPI1_Init+0x64>)
 800214c:	220a      	movs	r2, #10
 800214e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002150:	4804      	ldr	r0, [pc, #16]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002152:	f003 f983 	bl	800545c <HAL_SPI_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800215c:	f000 f920 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000308 	.word	0x20000308
 8002168:	40013000 	.word	0x40013000

0800216c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002172:	f107 0308 	add.w	r3, r7, #8
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002180:	463b      	mov	r3, r7
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002188:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <MX_TIM2_Init+0x94>)
 800218a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800218e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8002190:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <MX_TIM2_Init+0x94>)
 8002192:	2229      	movs	r2, #41	@ 0x29
 8002194:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <MX_TIM2_Init+0x94>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <MX_TIM2_Init+0x94>)
 800219e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <MX_TIM2_Init+0x94>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021aa:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <MX_TIM2_Init+0x94>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021b0:	4813      	ldr	r0, [pc, #76]	@ (8002200 <MX_TIM2_Init+0x94>)
 80021b2:	f004 f91d 	bl	80063f0 <HAL_TIM_Base_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021bc:	f000 f8f0 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	4619      	mov	r1, r3
 80021cc:	480c      	ldr	r0, [pc, #48]	@ (8002200 <MX_TIM2_Init+0x94>)
 80021ce:	f004 fabf 	bl	8006750 <HAL_TIM_ConfigClockSource>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021d8:	f000 f8e2 	bl	80023a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021e4:	463b      	mov	r3, r7
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	@ (8002200 <MX_TIM2_Init+0x94>)
 80021ea:	f004 fce7 	bl	8006bbc <HAL_TIMEx_MasterConfigSynchronization>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80021f4:	f000 f8d4 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000420 	.word	0x20000420

08002204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <MX_DMA_Init+0x4c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a0f      	ldr	r2, [pc, #60]	@ (8002250 <MX_DMA_Init+0x4c>)
 8002214:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <MX_DMA_Init+0x4c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2038      	movs	r0, #56	@ 0x38
 800222c:	f000 fca5 	bl	8002b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002230:	2038      	movs	r0, #56	@ 0x38
 8002232:	f000 fcbe 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	203b      	movs	r0, #59	@ 0x3b
 800223c:	f000 fc9d 	bl	8002b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002240:	203b      	movs	r0, #59	@ 0x3b
 8002242:	f000 fcb6 	bl	8002bb2 <HAL_NVIC_EnableIRQ>

}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b48      	ldr	r3, [pc, #288]	@ (8002390 <MX_GPIO_Init+0x13c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a47      	ldr	r2, [pc, #284]	@ (8002390 <MX_GPIO_Init+0x13c>)
 8002274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b45      	ldr	r3, [pc, #276]	@ (8002390 <MX_GPIO_Init+0x13c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <MX_GPIO_Init+0x13c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4a40      	ldr	r2, [pc, #256]	@ (8002390 <MX_GPIO_Init+0x13c>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	6313      	str	r3, [r2, #48]	@ 0x30
 8002296:	4b3e      	ldr	r3, [pc, #248]	@ (8002390 <MX_GPIO_Init+0x13c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <MX_GPIO_Init+0x13c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a39      	ldr	r2, [pc, #228]	@ (8002390 <MX_GPIO_Init+0x13c>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b37      	ldr	r3, [pc, #220]	@ (8002390 <MX_GPIO_Init+0x13c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	4b33      	ldr	r3, [pc, #204]	@ (8002390 <MX_GPIO_Init+0x13c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4a32      	ldr	r2, [pc, #200]	@ (8002390 <MX_GPIO_Init+0x13c>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4b30      	ldr	r3, [pc, #192]	@ (8002390 <MX_GPIO_Init+0x13c>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	2110      	movs	r1, #16
 80022de:	482d      	ldr	r0, [pc, #180]	@ (8002394 <MX_GPIO_Init+0x140>)
 80022e0:	f001 f9b0 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2110      	movs	r1, #16
 80022e8:	482b      	ldr	r0, [pc, #172]	@ (8002398 <MX_GPIO_Init+0x144>)
 80022ea:	f001 f9ab 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2110      	movs	r1, #16
 80022f2:	482a      	ldr	r0, [pc, #168]	@ (800239c <MX_GPIO_Init+0x148>)
 80022f4:	f001 f9a6 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 80022f8:	230c      	movs	r3, #12
 80022fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	4822      	ldr	r0, [pc, #136]	@ (8002398 <MX_GPIO_Init+0x144>)
 800230e:	f000 fffd 	bl	800330c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 8002312:	2310      	movs	r3, #16
 8002314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002316:	2301      	movs	r3, #1
 8002318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4619      	mov	r1, r3
 8002328:	481a      	ldr	r0, [pc, #104]	@ (8002394 <MX_GPIO_Init+0x140>)
 800232a:	f000 ffef 	bl	800330c <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 800232e:	2310      	movs	r3, #16
 8002330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002332:	2301      	movs	r3, #1
 8002334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	4619      	mov	r1, r3
 8002344:	4814      	ldr	r0, [pc, #80]	@ (8002398 <MX_GPIO_Init+0x144>)
 8002346:	f000 ffe1 	bl	800330c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800234a:	2310      	movs	r3, #16
 800234c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	480e      	ldr	r0, [pc, #56]	@ (800239c <MX_GPIO_Init+0x148>)
 8002362:	f000 ffd3 	bl	800330c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	2008      	movs	r0, #8
 800236c:	f000 fc05 	bl	8002b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002370:	2008      	movs	r0, #8
 8002372:	f000 fc1e 	bl	8002bb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2009      	movs	r0, #9
 800237c:	f000 fbfd 	bl	8002b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002380:	2009      	movs	r0, #9
 8002382:	f000 fc16 	bl	8002bb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	@ 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020800 	.word	0x40020800
 800239c:	40020400 	.word	0x40020400

080023a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a4:	b672      	cpsid	i
}
 80023a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <Error_Handler+0x8>

080023ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <HAL_MspInit+0x4c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	4a0f      	ldr	r2, [pc, #60]	@ (80023f8 <HAL_MspInit+0x4c>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_MspInit+0x4c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	4a08      	ldr	r2, [pc, #32]	@ (80023f8 <HAL_MspInit+0x4c>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800

080023fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	@ 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a4c      	ldr	r2, [pc, #304]	@ (800254c <HAL_SPI_MspInit+0x150>)
 800241a:	4293      	cmp	r3, r2
 800241c:	f040 8092 	bne.w	8002544 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	4b4a      	ldr	r3, [pc, #296]	@ (8002550 <HAL_SPI_MspInit+0x154>)
 8002426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002428:	4a49      	ldr	r2, [pc, #292]	@ (8002550 <HAL_SPI_MspInit+0x154>)
 800242a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800242e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002430:	4b47      	ldr	r3, [pc, #284]	@ (8002550 <HAL_SPI_MspInit+0x154>)
 8002432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	4b43      	ldr	r3, [pc, #268]	@ (8002550 <HAL_SPI_MspInit+0x154>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002444:	4a42      	ldr	r2, [pc, #264]	@ (8002550 <HAL_SPI_MspInit+0x154>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6313      	str	r3, [r2, #48]	@ 0x30
 800244c:	4b40      	ldr	r3, [pc, #256]	@ (8002550 <HAL_SPI_MspInit+0x154>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002458:	23e0      	movs	r3, #224	@ 0xe0
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002468:	2305      	movs	r3, #5
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4838      	ldr	r0, [pc, #224]	@ (8002554 <HAL_SPI_MspInit+0x158>)
 8002474:	f000 ff4a 	bl	800330c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002478:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 800247a:	4a38      	ldr	r2, [pc, #224]	@ (800255c <HAL_SPI_MspInit+0x160>)
 800247c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800247e:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 8002480:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002484:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002486:	4b34      	ldr	r3, [pc, #208]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800248c:	4b32      	ldr	r3, [pc, #200]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002492:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 8002494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002498:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800249a:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80024a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80024ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 80024ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024b2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024b4:	4b28      	ldr	r3, [pc, #160]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80024ba:	4827      	ldr	r0, [pc, #156]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 80024bc:	f000 fb94 	bl	8002be8 <HAL_DMA_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80024c6:	f7ff ff6b 	bl	80023a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a22      	ldr	r2, [pc, #136]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 80024ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80024d0:	4a21      	ldr	r2, [pc, #132]	@ (8002558 <HAL_SPI_MspInit+0x15c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80024d6:	4b22      	ldr	r3, [pc, #136]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 80024d8:	4a22      	ldr	r2, [pc, #136]	@ (8002564 <HAL_SPI_MspInit+0x168>)
 80024da:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80024dc:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 80024de:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80024e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 80024e6:	2240      	movs	r2, #64	@ 0x40
 80024e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 80024f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024fe:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002504:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800250a:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 800250c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002510:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002512:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 8002514:	2200      	movs	r2, #0
 8002516:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002518:	4811      	ldr	r0, [pc, #68]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 800251a:	f000 fb65 	bl	8002be8 <HAL_DMA_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8002524:	f7ff ff3c 	bl	80023a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 800252c:	649a      	str	r2, [r3, #72]	@ 0x48
 800252e:	4a0c      	ldr	r2, [pc, #48]	@ (8002560 <HAL_SPI_MspInit+0x164>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2100      	movs	r1, #0
 8002538:	2023      	movs	r0, #35	@ 0x23
 800253a:	f000 fb1e 	bl	8002b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800253e:	2023      	movs	r0, #35	@ 0x23
 8002540:	f000 fb37 	bl	8002bb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	@ 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40013000 	.word	0x40013000
 8002550:	40023800 	.word	0x40023800
 8002554:	40020000 	.word	0x40020000
 8002558:	20000360 	.word	0x20000360
 800255c:	40026410 	.word	0x40026410
 8002560:	200003c0 	.word	0x200003c0
 8002564:	40026458 	.word	0x40026458

08002568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002578:	d115      	bne.n	80025a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <HAL_TIM_Base_MspInit+0x48>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	4a0b      	ldr	r2, [pc, #44]	@ (80025b0 <HAL_TIM_Base_MspInit+0x48>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6413      	str	r3, [r2, #64]	@ 0x40
 800258a:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_TIM_Base_MspInit+0x48>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	201c      	movs	r0, #28
 800259c:	f000 faed 	bl	8002b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025a0:	201c      	movs	r0, #28
 80025a2:	f000 fb06 	bl	8002bb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <NMI_Handler+0x4>

080025bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <HardFault_Handler+0x4>

080025c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <MemManage_Handler+0x4>

080025cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <UsageFault_Handler+0x4>

080025dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260a:	f000 f997 	bl	800293c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}

08002612 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8002616:	2004      	movs	r0, #4
 8002618:	f001 f848 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 8002624:	2008      	movs	r0, #8
 8002626:	f001 f841 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002634:	4802      	ldr	r0, [pc, #8]	@ (8002640 <TIM2_IRQHandler+0x10>)
 8002636:	f003 ff9b 	bl	8006570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000420 	.word	0x20000420

08002644 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002648:	4802      	ldr	r0, [pc, #8]	@ (8002654 <SPI1_IRQHandler+0x10>)
 800264a:	f003 fb79 	bl	8005d40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000308 	.word	0x20000308

08002658 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800265c:	4802      	ldr	r0, [pc, #8]	@ (8002668 <DMA2_Stream0_IRQHandler+0x10>)
 800265e:	f000 fbeb 	bl	8002e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000360 	.word	0x20000360

0800266c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002670:	4802      	ldr	r0, [pc, #8]	@ (800267c <DMA2_Stream3_IRQHandler+0x10>)
 8002672:	f000 fbe1 	bl	8002e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200003c0 	.word	0x200003c0

08002680 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002684:	4802      	ldr	r0, [pc, #8]	@ (8002690 <OTG_FS_IRQHandler+0x10>)
 8002686:	f001 f96d 	bl	8003964 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200019d0 	.word	0x200019d0

08002694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return 1;
 8002698:	2301      	movs	r3, #1
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_kill>:

int _kill(int pid, int sig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ae:	f009 f919 	bl	800b8e4 <__errno>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2216      	movs	r2, #22
 80026b6:	601a      	str	r2, [r3, #0]
  return -1;
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <_exit>:

void _exit (int status)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ffe7 	bl	80026a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d6:	bf00      	nop
 80026d8:	e7fd      	b.n	80026d6 <_exit+0x12>

080026da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e00a      	b.n	8002702 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ec:	f3af 8000 	nop.w
 80026f0:	4601      	mov	r1, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	60ba      	str	r2, [r7, #8]
 80026f8:	b2ca      	uxtb	r2, r1
 80026fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3301      	adds	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	dbf0      	blt.n	80026ec <_read+0x12>
  }

  return len;
 800270a:	687b      	ldr	r3, [r7, #4]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e009      	b.n	800273a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	60ba      	str	r2, [r7, #8]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	dbf1      	blt.n	8002726 <_write+0x12>
  }
  return len;
 8002742:	687b      	ldr	r3, [r7, #4]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <_close>:

int _close(int file)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002774:	605a      	str	r2, [r3, #4]
  return 0;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <_isatty>:

int _isatty(int file)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800278c:	2301      	movs	r3, #1
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027bc:	4a14      	ldr	r2, [pc, #80]	@ (8002810 <_sbrk+0x5c>)
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <_sbrk+0x60>)
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c8:	4b13      	ldr	r3, [pc, #76]	@ (8002818 <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d0:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <_sbrk+0x64>)
 80027d2:	4a12      	ldr	r2, [pc, #72]	@ (800281c <_sbrk+0x68>)
 80027d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d6:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <_sbrk+0x64>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d207      	bcs.n	80027f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e4:	f009 f87e 	bl	800b8e4 <__errno>
 80027e8:	4603      	mov	r3, r0
 80027ea:	220c      	movs	r2, #12
 80027ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	e009      	b.n	8002808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f4:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027fa:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	4a05      	ldr	r2, [pc, #20]	@ (8002818 <_sbrk+0x64>)
 8002804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002806:	68fb      	ldr	r3, [r7, #12]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20020000 	.word	0x20020000
 8002814:	00000400 	.word	0x00000400
 8002818:	200004e8 	.word	0x200004e8
 800281c:	20002220 	.word	0x20002220

08002820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <SystemInit+0x20>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282a:	4a05      	ldr	r2, [pc, #20]	@ (8002840 <SystemInit+0x20>)
 800282c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002844:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800287c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002848:	f7ff ffea 	bl	8002820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800284c:	480c      	ldr	r0, [pc, #48]	@ (8002880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800284e:	490d      	ldr	r1, [pc, #52]	@ (8002884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002850:	4a0d      	ldr	r2, [pc, #52]	@ (8002888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002854:	e002      	b.n	800285c <LoopCopyDataInit>

08002856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285a:	3304      	adds	r3, #4

0800285c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800285c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002860:	d3f9      	bcc.n	8002856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002864:	4c0a      	ldr	r4, [pc, #40]	@ (8002890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002868:	e001      	b.n	800286e <LoopFillZerobss>

0800286a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800286c:	3204      	adds	r2, #4

0800286e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002870:	d3fb      	bcc.n	800286a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002872:	f009 f83d 	bl	800b8f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002876:	f7ff fb99 	bl	8001fac <main>
  bx  lr    
 800287a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800287c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002884:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002888:	0800f8d0 	.word	0x0800f8d0
  ldr r2, =_sbss
 800288c:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002890:	20002220 	.word	0x20002220

08002894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002894:	e7fe      	b.n	8002894 <ADC_IRQHandler>
	...

08002898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800289c:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <HAL_Init+0x40>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0d      	ldr	r2, [pc, #52]	@ (80028d8 <HAL_Init+0x40>)
 80028a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028a8:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_Init+0x40>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <HAL_Init+0x40>)
 80028ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b4:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a07      	ldr	r2, [pc, #28]	@ (80028d8 <HAL_Init+0x40>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c0:	2003      	movs	r0, #3
 80028c2:	f000 f94f 	bl	8002b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c6:	200f      	movs	r0, #15
 80028c8:	f000 f808 	bl	80028dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028cc:	f7ff fd6e 	bl	80023ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023c00 	.word	0x40023c00

080028dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e4:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <HAL_InitTick+0x54>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <HAL_InitTick+0x58>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f967 	bl	8002bce <HAL_SYSTICK_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e00e      	b.n	8002928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d80a      	bhi.n	8002926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002910:	2200      	movs	r2, #0
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f000 f92f 	bl	8002b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800291c:	4a06      	ldr	r2, [pc, #24]	@ (8002938 <HAL_InitTick+0x5c>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000010 	.word	0x20000010
 8002934:	20000018 	.word	0x20000018
 8002938:	20000014 	.word	0x20000014

0800293c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_IncTick+0x20>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_IncTick+0x24>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <HAL_IncTick+0x24>)
 800294e:	6013      	str	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000018 	.word	0x20000018
 8002960:	200004ec 	.word	0x200004ec

08002964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return uwTick;
 8002968:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <HAL_GetTick+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	200004ec 	.word	0x200004ec

0800297c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff ffee 	bl	8002964 <HAL_GetTick>
 8002988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d005      	beq.n	80029a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <HAL_Delay+0x44>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029a2:	bf00      	nop
 80029a4:	f7ff ffde 	bl	8002964 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d8f7      	bhi.n	80029a4 <HAL_Delay+0x28>
  {
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000018 	.word	0x20000018

080029c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029e0:	4013      	ands	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f6:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	60d3      	str	r3, [r2, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <__NVIC_GetPriorityGrouping+0x18>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f003 0307 	and.w	r3, r3, #7
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	db0b      	blt.n	8002a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	4907      	ldr	r1, [pc, #28]	@ (8002a60 <__NVIC_EnableIRQ+0x38>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2001      	movs	r0, #1
 8002a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000e100 	.word	0xe000e100

08002a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	db0a      	blt.n	8002a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	490c      	ldr	r1, [pc, #48]	@ (8002ab0 <__NVIC_SetPriority+0x4c>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	0112      	lsls	r2, r2, #4
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	440b      	add	r3, r1
 8002a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a8c:	e00a      	b.n	8002aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4908      	ldr	r1, [pc, #32]	@ (8002ab4 <__NVIC_SetPriority+0x50>)
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	3b04      	subs	r3, #4
 8002a9c:	0112      	lsls	r2, r2, #4
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	761a      	strb	r2, [r3, #24]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000e100 	.word	0xe000e100
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	@ 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f1c3 0307 	rsb	r3, r3, #7
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	bf28      	it	cs
 8002ad6:	2304      	movcs	r3, #4
 8002ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d902      	bls.n	8002ae8 <NVIC_EncodePriority+0x30>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3b03      	subs	r3, #3
 8002ae6:	e000      	b.n	8002aea <NVIC_EncodePriority+0x32>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	401a      	ands	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b00:	f04f 31ff 	mov.w	r1, #4294967295
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43d9      	mvns	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	4313      	orrs	r3, r2
         );
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3724      	adds	r7, #36	@ 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b30:	d301      	bcc.n	8002b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00f      	b.n	8002b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b36:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <SysTick_Config+0x40>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3e:	210f      	movs	r1, #15
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f7ff ff8e 	bl	8002a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <SysTick_Config+0x40>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4e:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <SysTick_Config+0x40>)
 8002b50:	2207      	movs	r2, #7
 8002b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	e000e010 	.word	0xe000e010

08002b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ff29 	bl	80029c4 <__NVIC_SetPriorityGrouping>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8c:	f7ff ff3e 	bl	8002a0c <__NVIC_GetPriorityGrouping>
 8002b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff8e 	bl	8002ab8 <NVIC_EncodePriority>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff5d 	bl	8002a64 <__NVIC_SetPriority>
}
 8002baa:	bf00      	nop
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff31 	bl	8002a28 <__NVIC_EnableIRQ>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffa2 	bl	8002b20 <SysTick_Config>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff feb6 	bl	8002964 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e099      	b.n	8002d38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c24:	e00f      	b.n	8002c46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c26:	f7ff fe9d 	bl	8002964 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d908      	bls.n	8002c46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e078      	b.n	8002d38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e8      	bne.n	8002c26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <HAL_DMA_Init+0x158>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d107      	bne.n	8002cb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f023 0307 	bic.w	r3, r3, #7
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d117      	bne.n	8002d0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fa91 	bl	8003214 <DMA_CheckFifoParam>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2240      	movs	r2, #64	@ 0x40
 8002cfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d06:	2301      	movs	r3, #1
 8002d08:	e016      	b.n	8002d38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa48 	bl	80031a8 <DMA_CalcBaseAndBitshift>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	223f      	movs	r2, #63	@ 0x3f
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	f010803f 	.word	0xf010803f

08002d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_DMA_Start_IT+0x26>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e040      	b.n	8002dec <HAL_DMA_Start_IT+0xa8>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d12f      	bne.n	8002dde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f9da 	bl	800314c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9c:	223f      	movs	r2, #63	@ 0x3f
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0216 	orr.w	r2, r2, #22
 8002db2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e005      	b.n	8002dea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
 8002de8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d004      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2280      	movs	r2, #128	@ 0x80
 8002e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00c      	b.n	8002e2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2205      	movs	r2, #5
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e44:	4b8e      	ldr	r3, [pc, #568]	@ (8003080 <HAL_DMA_IRQHandler+0x248>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a8e      	ldr	r2, [pc, #568]	@ (8003084 <HAL_DMA_IRQHandler+0x24c>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0a9b      	lsrs	r3, r3, #10
 8002e50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e62:	2208      	movs	r2, #8
 8002e64:	409a      	lsls	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01a      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0204 	bic.w	r2, r2, #4
 8002e8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e90:	2208      	movs	r2, #8
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d012      	beq.n	8002eda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	f043 0202 	orr.w	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ede:	2204      	movs	r2, #4
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d012      	beq.n	8002f10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	2204      	movs	r2, #4
 8002efe:	409a      	lsls	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f08:	f043 0204 	orr.w	r2, r3, #4
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	2210      	movs	r2, #16
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d043      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03c      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f32:	2210      	movs	r2, #16
 8002f34:	409a      	lsls	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d018      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d108      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d024      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
 8002f66:	e01f      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
 8002f78:	e016      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d107      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0208 	bic.w	r2, r2, #8
 8002f96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fac:	2220      	movs	r2, #32
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 808f 	beq.w	80030d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8087 	beq.w	80030d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fce:	2220      	movs	r2, #32
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d136      	bne.n	8003050 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0216 	bic.w	r2, r2, #22
 8002ff0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003000:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <HAL_DMA_IRQHandler+0x1da>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0208 	bic.w	r2, r2, #8
 8003020:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	223f      	movs	r2, #63	@ 0x3f
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003042:	2b00      	cmp	r3, #0
 8003044:	d07e      	beq.n	8003144 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
        }
        return;
 800304e:	e079      	b.n	8003144 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01d      	beq.n	800309a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10d      	bne.n	8003088 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003070:	2b00      	cmp	r3, #0
 8003072:	d031      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
 800307c:	e02c      	b.n	80030d8 <HAL_DMA_IRQHandler+0x2a0>
 800307e:	bf00      	nop
 8003080:	20000010 	.word	0x20000010
 8003084:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d023      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
 8003098:	e01e      	b.n	80030d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10f      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0210 	bic.w	r2, r2, #16
 80030b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d032      	beq.n	8003146 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d022      	beq.n	8003132 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2205      	movs	r2, #5
 80030f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3301      	adds	r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	429a      	cmp	r2, r3
 800310e:	d307      	bcc.n	8003120 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f2      	bne.n	8003104 <HAL_DMA_IRQHandler+0x2cc>
 800311e:	e000      	b.n	8003122 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003120:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
 8003142:	e000      	b.n	8003146 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003144:	bf00      	nop
    }
  }
}
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003168:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b40      	cmp	r3, #64	@ 0x40
 8003178:	d108      	bne.n	800318c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800318a:	e007      	b.n	800319c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	60da      	str	r2, [r3, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	3b10      	subs	r3, #16
 80031b8:	4a14      	ldr	r2, [pc, #80]	@ (800320c <DMA_CalcBaseAndBitshift+0x64>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031c2:	4a13      	ldr	r2, [pc, #76]	@ (8003210 <DMA_CalcBaseAndBitshift+0x68>)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d909      	bls.n	80031ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80031e8:	e007      	b.n	80031fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	aaaaaaab 	.word	0xaaaaaaab
 8003210:	0800f108 	.word	0x0800f108

08003214 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d11f      	bne.n	800326e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d856      	bhi.n	80032e2 <DMA_CheckFifoParam+0xce>
 8003234:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <DMA_CheckFifoParam+0x28>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	0800324d 	.word	0x0800324d
 8003240:	0800325f 	.word	0x0800325f
 8003244:	0800324d 	.word	0x0800324d
 8003248:	080032e3 	.word	0x080032e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d046      	beq.n	80032e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800325c:	e043      	b.n	80032e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003262:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003266:	d140      	bne.n	80032ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800326c:	e03d      	b.n	80032ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003276:	d121      	bne.n	80032bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d837      	bhi.n	80032ee <DMA_CheckFifoParam+0xda>
 800327e:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <DMA_CheckFifoParam+0x70>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	08003295 	.word	0x08003295
 8003288:	0800329b 	.word	0x0800329b
 800328c:	08003295 	.word	0x08003295
 8003290:	080032ad 	.word	0x080032ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e030      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d025      	beq.n	80032f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032aa:	e022      	b.n	80032f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032b4:	d11f      	bne.n	80032f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032ba:	e01c      	b.n	80032f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d903      	bls.n	80032ca <DMA_CheckFifoParam+0xb6>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d003      	beq.n	80032d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032c8:	e018      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
      break;
 80032ce:	e015      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      break;
 80032e0:	e00b      	b.n	80032fa <DMA_CheckFifoParam+0xe6>
      break;
 80032e2:	bf00      	nop
 80032e4:	e00a      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
 80032e8:	e008      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;
 80032ea:	bf00      	nop
 80032ec:	e006      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
 80032f0:	e004      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;
 80032f2:	bf00      	nop
 80032f4:	e002      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;   
 80032f6:	bf00      	nop
 80032f8:	e000      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;
 80032fa:	bf00      	nop
    }
  } 
  
  return status; 
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop

0800330c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	@ 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	e16b      	b.n	8003600 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003328:	2201      	movs	r2, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	429a      	cmp	r2, r3
 8003342:	f040 815a 	bne.w	80035fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d005      	beq.n	800335e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335a:	2b02      	cmp	r3, #2
 800335c:	d130      	bne.n	80033c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 0201 	and.w	r2, r3, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d017      	beq.n	80033fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2203      	movs	r2, #3
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d123      	bne.n	8003450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	08da      	lsrs	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3208      	adds	r2, #8
 8003410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	220f      	movs	r2, #15
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	08da      	lsrs	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3208      	adds	r2, #8
 800344a:	69b9      	ldr	r1, [r7, #24]
 800344c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0203 	and.w	r2, r3, #3
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80b4 	beq.w	80035fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	4b60      	ldr	r3, [pc, #384]	@ (8003618 <HAL_GPIO_Init+0x30c>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	4a5f      	ldr	r2, [pc, #380]	@ (8003618 <HAL_GPIO_Init+0x30c>)
 800349c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003618 <HAL_GPIO_Init+0x30c>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ae:	4a5b      	ldr	r2, [pc, #364]	@ (800361c <HAL_GPIO_Init+0x310>)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	3302      	adds	r3, #2
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	220f      	movs	r2, #15
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a52      	ldr	r2, [pc, #328]	@ (8003620 <HAL_GPIO_Init+0x314>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d02b      	beq.n	8003532 <HAL_GPIO_Init+0x226>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a51      	ldr	r2, [pc, #324]	@ (8003624 <HAL_GPIO_Init+0x318>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d025      	beq.n	800352e <HAL_GPIO_Init+0x222>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a50      	ldr	r2, [pc, #320]	@ (8003628 <HAL_GPIO_Init+0x31c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01f      	beq.n	800352a <HAL_GPIO_Init+0x21e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4f      	ldr	r2, [pc, #316]	@ (800362c <HAL_GPIO_Init+0x320>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d019      	beq.n	8003526 <HAL_GPIO_Init+0x21a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4e      	ldr	r2, [pc, #312]	@ (8003630 <HAL_GPIO_Init+0x324>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_GPIO_Init+0x216>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003634 <HAL_GPIO_Init+0x328>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00d      	beq.n	800351e <HAL_GPIO_Init+0x212>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4c      	ldr	r2, [pc, #304]	@ (8003638 <HAL_GPIO_Init+0x32c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <HAL_GPIO_Init+0x20e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4b      	ldr	r2, [pc, #300]	@ (800363c <HAL_GPIO_Init+0x330>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <HAL_GPIO_Init+0x20a>
 8003512:	2307      	movs	r3, #7
 8003514:	e00e      	b.n	8003534 <HAL_GPIO_Init+0x228>
 8003516:	2308      	movs	r3, #8
 8003518:	e00c      	b.n	8003534 <HAL_GPIO_Init+0x228>
 800351a:	2306      	movs	r3, #6
 800351c:	e00a      	b.n	8003534 <HAL_GPIO_Init+0x228>
 800351e:	2305      	movs	r3, #5
 8003520:	e008      	b.n	8003534 <HAL_GPIO_Init+0x228>
 8003522:	2304      	movs	r3, #4
 8003524:	e006      	b.n	8003534 <HAL_GPIO_Init+0x228>
 8003526:	2303      	movs	r3, #3
 8003528:	e004      	b.n	8003534 <HAL_GPIO_Init+0x228>
 800352a:	2302      	movs	r3, #2
 800352c:	e002      	b.n	8003534 <HAL_GPIO_Init+0x228>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <HAL_GPIO_Init+0x228>
 8003532:	2300      	movs	r3, #0
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	f002 0203 	and.w	r2, r2, #3
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	4093      	lsls	r3, r2
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003544:	4935      	ldr	r1, [pc, #212]	@ (800361c <HAL_GPIO_Init+0x310>)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	089b      	lsrs	r3, r3, #2
 800354a:	3302      	adds	r3, #2
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003552:	4b3b      	ldr	r3, [pc, #236]	@ (8003640 <HAL_GPIO_Init+0x334>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003576:	4a32      	ldr	r2, [pc, #200]	@ (8003640 <HAL_GPIO_Init+0x334>)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800357c:	4b30      	ldr	r3, [pc, #192]	@ (8003640 <HAL_GPIO_Init+0x334>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035a0:	4a27      	ldr	r2, [pc, #156]	@ (8003640 <HAL_GPIO_Init+0x334>)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a6:	4b26      	ldr	r3, [pc, #152]	@ (8003640 <HAL_GPIO_Init+0x334>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003640 <HAL_GPIO_Init+0x334>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003640 <HAL_GPIO_Init+0x334>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f4:	4a12      	ldr	r2, [pc, #72]	@ (8003640 <HAL_GPIO_Init+0x334>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3301      	adds	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b0f      	cmp	r3, #15
 8003604:	f67f ae90 	bls.w	8003328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3724      	adds	r7, #36	@ 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	40013800 	.word	0x40013800
 8003620:	40020000 	.word	0x40020000
 8003624:	40020400 	.word	0x40020400
 8003628:	40020800 	.word	0x40020800
 800362c:	40020c00 	.word	0x40020c00
 8003630:	40021000 	.word	0x40021000
 8003634:	40021400 	.word	0x40021400
 8003638:	40021800 	.word	0x40021800
 800363c:	40021c00 	.word	0x40021c00
 8003640:	40013c00 	.word	0x40013c00

08003644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	807b      	strh	r3, [r7, #2]
 8003650:	4613      	mov	r3, r2
 8003652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003654:	787b      	ldrb	r3, [r7, #1]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003660:	e003      	b.n	800366a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003662:	887b      	ldrh	r3, [r7, #2]
 8003664:	041a      	lsls	r2, r3, #16
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	619a      	str	r2, [r3, #24]
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003688:	887a      	ldrh	r2, [r7, #2]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	041a      	lsls	r2, r3, #16
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43d9      	mvns	r1, r3
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	400b      	ands	r3, r1
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	619a      	str	r2, [r3, #24]
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036b6:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036c2:	4a05      	ldr	r2, [pc, #20]	@ (80036d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fb80 	bl	8001dd0 <HAL_GPIO_EXTI_Callback>
  }
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40013c00 	.word	0x40013c00

080036dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e101      	b.n	80038f2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f007 f807 	bl	800a71c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2203      	movs	r2, #3
 8003712:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800371c:	d102      	bne.n	8003724 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f003 fbee 	bl	8006f0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7c1a      	ldrb	r2, [r3, #16]
 8003736:	f88d 2000 	strb.w	r2, [sp]
 800373a:	3304      	adds	r3, #4
 800373c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800373e:	f003 facd 	bl	8006cdc <USB_CoreInit>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0ce      	b.n	80038f2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f003 fbe6 	bl	8006f2c <USB_SetCurrentMode>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0bf      	b.n	80038f2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	e04a      	b.n	800380e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3315      	adds	r3, #21
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3314      	adds	r3, #20
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	b298      	uxth	r0, r3
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	332e      	adds	r3, #46	@ 0x2e
 80037b4:	4602      	mov	r2, r0
 80037b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3318      	adds	r3, #24
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037cc:	7bfa      	ldrb	r2, [r7, #15]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	331c      	adds	r3, #28
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3320      	adds	r3, #32
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	3324      	adds	r3, #36	@ 0x24
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	3301      	adds	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	791b      	ldrb	r3, [r3, #4]
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	429a      	cmp	r2, r3
 8003816:	d3af      	bcc.n	8003778 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	e044      	b.n	80038a8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	3301      	adds	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	791b      	ldrb	r3, [r3, #4]
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d3b5      	bcc.n	800381e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	7c1a      	ldrb	r2, [r3, #16]
 80038ba:	f88d 2000 	strb.w	r2, [sp]
 80038be:	3304      	adds	r3, #4
 80038c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038c2:	f003 fb7f 	bl	8006fc4 <USB_DevInit>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e00c      	b.n	80038f2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f004 fbc9 	bl	8008082 <USB_DevDisconnect>

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_PCD_Start+0x1c>
 8003912:	2302      	movs	r3, #2
 8003914:	e022      	b.n	800395c <HAL_PCD_Start+0x62>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f003 fad0 	bl	8006ee8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f004 fb77 	bl	8008040 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b08d      	sub	sp, #52	@ 0x34
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f004 fc35 	bl	80081ea <USB_GetMode>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 848c 	bne.w	80042a0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f004 fb99 	bl	80080c4 <USB_ReadInterrupts>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8482 	beq.w	800429e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f004 fb86 	bl	80080c4 <USB_ReadInterrupts>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d107      	bne.n	80039d2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f002 0202 	and.w	r2, r2, #2
 80039d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f004 fb74 	bl	80080c4 <USB_ReadInterrupts>
 80039dc:	4603      	mov	r3, r0
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d161      	bne.n	8003aaa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699a      	ldr	r2, [r3, #24]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0210 	bic.w	r2, r2, #16
 80039f4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f003 020f 	and.w	r2, r3, #15
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	3304      	adds	r3, #4
 8003a14:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	0c5b      	lsrs	r3, r3, #17
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d124      	bne.n	8003a6c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d035      	beq.n	8003a9a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6a38      	ldr	r0, [r7, #32]
 8003a42:	f004 f9ab 	bl	8007d9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a52:	441a      	add	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a64:	441a      	add	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	615a      	str	r2, [r3, #20]
 8003a6a:	e016      	b.n	8003a9a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	0c5b      	lsrs	r3, r3, #17
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	2b06      	cmp	r3, #6
 8003a76:	d110      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a7e:	2208      	movs	r2, #8
 8003a80:	4619      	mov	r1, r3
 8003a82:	6a38      	ldr	r0, [r7, #32]
 8003a84:	f004 f98a 	bl	8007d9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a94:	441a      	add	r2, r3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0210 	orr.w	r2, r2, #16
 8003aa8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 fb08 	bl	80080c4 <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003abe:	f040 80a7 	bne.w	8003c10 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 fb0d 	bl	80080ea <USB_ReadDevAllOutEpInterrupt>
 8003ad0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003ad2:	e099      	b.n	8003c08 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 808e 	beq.w	8003bfc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f004 fb31 	bl	8008152 <USB_ReadDevOutEPInterrupt>
 8003af0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fea3 	bl	800485c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2308      	movs	r3, #8
 8003b30:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 ff79 	bl	8004a2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	2310      	movs	r3, #16
 8003b54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d030      	beq.n	8003bc2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b68:	2b80      	cmp	r3, #128	@ 0x80
 8003b6a:	d109      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b7e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	3304      	adds	r3, #4
 8003b94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	78db      	ldrb	r3, [r3, #3]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d108      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f006 febc 	bl	800a928 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd8:	461a      	mov	r2, r3
 8003bda:	2320      	movs	r3, #32
 8003bdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bfa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	3301      	adds	r3, #1
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f47f af62 	bne.w	8003ad4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fa55 	bl	80080c4 <USB_ReadInterrupts>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c24:	f040 80db 	bne.w	8003dde <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f004 fa76 	bl	800811e <USB_ReadDevAllInEpInterrupt>
 8003c32:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003c38:	e0cd      	b.n	8003dd6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80c2 	beq.w	8003dca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f004 fa9c 	bl	800818e <USB_ReadDevInEPInterrupt>
 8003c56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d057      	beq.n	8003d12 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	2201      	movs	r2, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69f9      	ldr	r1, [r7, #28]
 8003c7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c82:	4013      	ands	r3, r2
 8003c84:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c92:	461a      	mov	r2, r3
 8003c94:	2301      	movs	r3, #1
 8003c96:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	799b      	ldrb	r3, [r3, #6]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d132      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3320      	adds	r3, #32
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4403      	add	r3, r0
 8003cc0:	331c      	adds	r3, #28
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4419      	add	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4403      	add	r3, r0
 8003cd4:	3320      	adds	r3, #32
 8003cd6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d113      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x3a2>
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	3324      	adds	r3, #36	@ 0x24
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d108      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2101      	movs	r1, #1
 8003d02:	f004 faa3 	bl	800824c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f006 fd86 	bl	800a81e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d44:	461a      	mov	r2, r3
 8003d46:	2310      	movs	r3, #16
 8003d48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d60:	461a      	mov	r2, r3
 8003d62:	2340      	movs	r3, #64	@ 0x40
 8003d64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d023      	beq.n	8003db8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d72:	6a38      	ldr	r0, [r7, #32]
 8003d74:	f003 fa8a 	bl	800728c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	3310      	adds	r3, #16
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	4413      	add	r3, r2
 8003d88:	3304      	adds	r3, #4
 8003d8a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	78db      	ldrb	r3, [r3, #3]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d108      	bne.n	8003da6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2200      	movs	r2, #0
 8003d98:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f006 fdd3 	bl	800a94c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db2:	461a      	mov	r2, r3
 8003db4:	2302      	movs	r3, #2
 8003db6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003dc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fcbd 	bl	8004744 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	3301      	adds	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f47f af2e 	bne.w	8003c3a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f004 f96e 	bl	80080c4 <USB_ReadInterrupts>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003df2:	d122      	bne.n	8003e3a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d108      	bne.n	8003e24 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fea3 	bl	8004b68 <HAL_PCDEx_LPM_Callback>
 8003e22:	e002      	b.n	8003e2a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f006 fd71 	bl	800a90c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f004 f940 	bl	80080c4 <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e4e:	d112      	bne.n	8003e76 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d102      	bne.n	8003e66 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f006 fd2d 	bl	800a8c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003e74:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f004 f922 	bl	80080c4 <USB_ReadInterrupts>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8a:	f040 80b7 	bne.w	8003ffc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2110      	movs	r1, #16
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f003 f9ef 	bl	800728c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb2:	e046      	b.n	8003f42 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ec6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ee2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ee6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003efa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f3a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3e:	3301      	adds	r3, #1
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	791b      	ldrb	r3, [r3, #4]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d3b2      	bcc.n	8003eb4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f5c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003f60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	7bdb      	ldrb	r3, [r3, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d016      	beq.n	8003f98 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f7a:	f043 030b 	orr.w	r3, r3, #11
 8003f7e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f90:	f043 030b 	orr.w	r3, r3, #11
 8003f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f96:	e015      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fa6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003faa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003fae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fbe:	f043 030b 	orr.w	r3, r3, #11
 8003fc2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fd2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003fd6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f004 f930 	bl	800824c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f004 f85f 	bl	80080c4 <USB_ReadInterrupts>
 8004006:	4603      	mov	r3, r0
 8004008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800400c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004010:	d123      	bne.n	800405a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f004 f8f5 	bl	8008206 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f003 f9ac 	bl	800737e <USB_GetDevSpeed>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681c      	ldr	r4, [r3, #0]
 8004032:	f001 fa07 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 8004036:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800403c:	461a      	mov	r2, r3
 800403e:	4620      	mov	r0, r4
 8004040:	f002 feb0 	bl	8006da4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f006 fc12 	bl	800a86e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004058:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f004 f830 	bl	80080c4 <USB_ReadInterrupts>
 8004064:	4603      	mov	r3, r0
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b08      	cmp	r3, #8
 800406c:	d10a      	bne.n	8004084 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f006 fbef 	bl	800a852 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f002 0208 	and.w	r2, r2, #8
 8004082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f004 f81b 	bl	80080c4 <USB_ReadInterrupts>
 800408e:	4603      	mov	r3, r0
 8004090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004094:	2b80      	cmp	r3, #128	@ 0x80
 8004096:	d123      	bne.n	80040e0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a4:	2301      	movs	r3, #1
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a8:	e014      	b.n	80040d4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d105      	bne.n	80040ce <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fb0a 	bl	80046e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	3301      	adds	r3, #1
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	791b      	ldrb	r3, [r3, #4]
 80040d8:	461a      	mov	r2, r3
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	4293      	cmp	r3, r2
 80040de:	d3e4      	bcc.n	80040aa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f003 ffed 	bl	80080c4 <USB_ReadInterrupts>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040f4:	d13c      	bne.n	8004170 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040f6:	2301      	movs	r3, #1
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fa:	e02b      	b.n	8004154 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3318      	adds	r3, #24
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d115      	bne.n	800414e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004122:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004124:	2b00      	cmp	r3, #0
 8004126:	da12      	bge.n	800414e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3317      	adds	r3, #23
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004144:	b2db      	uxtb	r3, r3
 8004146:	4619      	mov	r1, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 faca 	bl	80046e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	3301      	adds	r3, #1
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	791b      	ldrb	r3, [r3, #4]
 8004158:	461a      	mov	r2, r3
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	4293      	cmp	r3, r2
 800415e:	d3cd      	bcc.n	80040fc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800416e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f003 ffa5 	bl	80080c4 <USB_ReadInterrupts>
 800417a:	4603      	mov	r3, r0
 800417c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004180:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004184:	d156      	bne.n	8004234 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004186:	2301      	movs	r3, #1
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
 800418a:	e045      	b.n	8004218 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a0:	4613      	mov	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d12e      	bne.n	8004212 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da2b      	bge.n	8004212 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80041c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d121      	bne.n	8004212 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041e0:	2201      	movs	r2, #1
 80041e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800420a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800420e:	6053      	str	r3, [r2, #4]
            break;
 8004210:	e008      	b.n	8004224 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	3301      	adds	r3, #1
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	791b      	ldrb	r3, [r3, #4]
 800421c:	461a      	mov	r2, r3
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	4293      	cmp	r3, r2
 8004222:	d3b3      	bcc.n	800418c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f003 ff43 	bl	80080c4 <USB_ReadInterrupts>
 800423e:	4603      	mov	r3, r0
 8004240:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004248:	d10a      	bne.n	8004260 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f006 fb90 	bl	800a970 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800425e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f003 ff2d 	bl	80080c4 <USB_ReadInterrupts>
 800426a:	4603      	mov	r3, r0
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b04      	cmp	r3, #4
 8004272:	d115      	bne.n	80042a0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f006 fb80 	bl	800a98c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6859      	ldr	r1, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	e000      	b.n	80042a0 <HAL_PCD_IRQHandler+0x93c>
      return;
 800429e:	bf00      	nop
    }
  }
}
 80042a0:	3734      	adds	r7, #52	@ 0x34
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd90      	pop	{r4, r7, pc}

080042a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	460b      	mov	r3, r1
 80042b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_PCD_SetAddress+0x1a>
 80042bc:	2302      	movs	r3, #2
 80042be:	e012      	b.n	80042e6 <HAL_PCD_SetAddress+0x40>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f003 fe8c 	bl	8007ff4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	4608      	mov	r0, r1
 80042f8:	4611      	mov	r1, r2
 80042fa:	461a      	mov	r2, r3
 80042fc:	4603      	mov	r3, r0
 80042fe:	70fb      	strb	r3, [r7, #3]
 8004300:	460b      	mov	r3, r1
 8004302:	803b      	strh	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800430c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004310:	2b00      	cmp	r3, #0
 8004312:	da0f      	bge.n	8004334 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	f003 020f 	and.w	r2, r3, #15
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	3310      	adds	r3, #16
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	4413      	add	r3, r2
 8004328:	3304      	adds	r3, #4
 800432a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	705a      	strb	r2, [r3, #1]
 8004332:	e00f      	b.n	8004354 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	f003 020f 	and.w	r2, r3, #15
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	3304      	adds	r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004360:	883b      	ldrh	r3, [r7, #0]
 8004362:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	78ba      	ldrb	r2, [r7, #2]
 800436e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	785b      	ldrb	r3, [r3, #1]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004382:	78bb      	ldrb	r3, [r7, #2]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d102      	bne.n	800438e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_PCD_EP_Open+0xae>
 8004398:	2302      	movs	r3, #2
 800439a:	e00e      	b.n	80043ba <HAL_PCD_EP_Open+0xcc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68f9      	ldr	r1, [r7, #12]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f003 f80c 	bl	80073c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80043b8:	7afb      	ldrb	r3, [r7, #11]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	da0f      	bge.n	80043f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	3310      	adds	r3, #16
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	3304      	adds	r3, #4
 80043ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	705a      	strb	r2, [r3, #1]
 80043f4:	e00f      	b.n	8004416 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 020f 	and.w	r2, r3, #15
 80043fc:	4613      	mov	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4413      	add	r3, r2
 800440c:	3304      	adds	r3, #4
 800440e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	b2da      	uxtb	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_PCD_EP_Close+0x6e>
 800442c:	2302      	movs	r3, #2
 800442e:	e00e      	b.n	800444e <HAL_PCD_EP_Close+0x8c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68f9      	ldr	r1, [r7, #12]
 800443e:	4618      	mov	r0, r3
 8004440:	f003 f84a 	bl	80074d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b086      	sub	sp, #24
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	460b      	mov	r3, r1
 8004464:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004466:	7afb      	ldrb	r3, [r7, #11]
 8004468:	f003 020f 	and.w	r2, r3, #15
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	3304      	adds	r3, #4
 800447e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2200      	movs	r2, #0
 8004490:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004498:	7afb      	ldrb	r3, [r7, #11]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	799b      	ldrb	r3, [r3, #6]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d102      	bne.n	80044b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	799b      	ldrb	r3, [r3, #6]
 80044ba:	461a      	mov	r2, r3
 80044bc:	6979      	ldr	r1, [r7, #20]
 80044be:	f003 f8e7 	bl	8007690 <USB_EPStartXfer>

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	f003 020f 	and.w	r2, r3, #15
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	460b      	mov	r3, r1
 800450a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800450c:	7afb      	ldrb	r3, [r7, #11]
 800450e:	f003 020f 	and.w	r2, r3, #15
 8004512:	4613      	mov	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	3310      	adds	r3, #16
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	3304      	adds	r3, #4
 8004522:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2200      	movs	r2, #0
 8004534:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2201      	movs	r2, #1
 800453a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800453c:	7afb      	ldrb	r3, [r7, #11]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	b2da      	uxtb	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	799b      	ldrb	r3, [r3, #6]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d102      	bne.n	8004556 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	799b      	ldrb	r3, [r3, #6]
 800455e:	461a      	mov	r2, r3
 8004560:	6979      	ldr	r1, [r7, #20]
 8004562:	f003 f895 	bl	8007690 <USB_EPStartXfer>

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	7912      	ldrb	r2, [r2, #4]
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e04f      	b.n	800462e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800458e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004592:	2b00      	cmp	r3, #0
 8004594:	da0f      	bge.n	80045b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	f003 020f 	and.w	r2, r3, #15
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	3310      	adds	r3, #16
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4413      	add	r3, r2
 80045aa:	3304      	adds	r3, #4
 80045ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	705a      	strb	r2, [r3, #1]
 80045b4:	e00d      	b.n	80045d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	3304      	adds	r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_PCD_EP_SetStall+0x82>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e01d      	b.n	800462e <HAL_PCD_EP_SetStall+0xbe>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	4618      	mov	r0, r3
 8004602:	f003 fc23 	bl	8007e4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7999      	ldrb	r1, [r3, #6]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800461e:	461a      	mov	r2, r3
 8004620:	f003 fe14 	bl	800824c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	460b      	mov	r3, r1
 8004640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	7912      	ldrb	r2, [r2, #4]
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e042      	b.n	80046da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004658:	2b00      	cmp	r3, #0
 800465a:	da0f      	bge.n	800467c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	f003 020f 	and.w	r2, r3, #15
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	3310      	adds	r3, #16
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4413      	add	r3, r2
 8004670:	3304      	adds	r3, #4
 8004672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	705a      	strb	r2, [r3, #1]
 800467a:	e00f      	b.n	800469c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	f003 020f 	and.w	r2, r3, #15
 8004682:	4613      	mov	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4413      	add	r3, r2
 8004692:	3304      	adds	r3, #4
 8004694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_PCD_EP_ClrStall+0x86>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e00e      	b.n	80046da <HAL_PCD_EP_ClrStall+0xa4>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f003 fc2c 	bl	8007f28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da0c      	bge.n	8004710 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 020f 	and.w	r2, r3, #15
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	3310      	adds	r3, #16
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	3304      	adds	r3, #4
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e00c      	b.n	800472a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	f003 020f 	and.w	r2, r3, #15
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	3304      	adds	r3, #4
 8004728:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	4618      	mov	r0, r3
 8004732:	f003 fa4b 	bl	8007bcc <USB_EPStopXfer>
 8004736:	4603      	mov	r3, r0
 8004738:	72fb      	strb	r3, [r7, #11]

  return ret;
 800473a:	7afb      	ldrb	r3, [r7, #11]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	@ 0x28
 8004748:	af02      	add	r7, sp, #8
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	3310      	adds	r3, #16
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4413      	add	r3, r2
 8004768:	3304      	adds	r3, #4
 800476a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	429a      	cmp	r2, r3
 8004776:	d901      	bls.n	800477c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e06b      	b.n	8004854 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	429a      	cmp	r2, r3
 8004790:	d902      	bls.n	8004798 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	3303      	adds	r3, #3
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047a0:	e02a      	b.n	80047f8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d902      	bls.n	80047be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3303      	adds	r3, #3
 80047c2:	089b      	lsrs	r3, r3, #2
 80047c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68d9      	ldr	r1, [r3, #12]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	4603      	mov	r3, r0
 80047da:	6978      	ldr	r0, [r7, #20]
 80047dc:	f003 faa0 	bl	8007d20 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	441a      	add	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	441a      	add	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	429a      	cmp	r2, r3
 800480c:	d809      	bhi.n	8004822 <PCD_WriteEmptyTxFifo+0xde>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004816:	429a      	cmp	r2, r3
 8004818:	d203      	bcs.n	8004822 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1bf      	bne.n	80047a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	429a      	cmp	r2, r3
 800482c:	d811      	bhi.n	8004852 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	2201      	movs	r2, #1
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	43db      	mvns	r3, r3
 8004848:	6939      	ldr	r1, [r7, #16]
 800484a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800484e:	4013      	ands	r3, r2
 8004850:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	333c      	adds	r3, #60	@ 0x3c
 8004874:	3304      	adds	r3, #4
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	799b      	ldrb	r3, [r3, #6]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d17b      	bne.n	800498a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d015      	beq.n	80048c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	4a61      	ldr	r2, [pc, #388]	@ (8004a24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	f240 80b9 	bls.w	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80b3 	beq.w	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048be:	461a      	mov	r2, r3
 80048c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048c4:	6093      	str	r3, [r2, #8]
 80048c6:	e0a7      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048de:	461a      	mov	r2, r3
 80048e0:	2320      	movs	r3, #32
 80048e2:	6093      	str	r3, [r2, #8]
 80048e4:	e098      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 8093 	bne.w	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004a24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d90f      	bls.n	800491a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004910:	461a      	mov	r2, r3
 8004912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004916:	6093      	str	r3, [r2, #8]
 8004918:	e07e      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	3304      	adds	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1a      	ldr	r2, [r3, #32]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	0159      	lsls	r1, r3, #5
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	440b      	add	r3, r1
 800493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004946:	1ad2      	subs	r2, r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d114      	bne.n	800497c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004964:	461a      	mov	r2, r3
 8004966:	2101      	movs	r1, #1
 8004968:	f003 fc70 	bl	800824c <USB_EP0_OutStart>
 800496c:	e006      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	441a      	add	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f005 ff30 	bl	800a7e8 <HAL_PCD_DataOutStageCallback>
 8004988:	e046      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	4a26      	ldr	r2, [pc, #152]	@ (8004a28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d124      	bne.n	80049dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a8:	461a      	mov	r2, r3
 80049aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ae:	6093      	str	r3, [r2, #8]
 80049b0:	e032      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c8:	461a      	mov	r2, r3
 80049ca:	2320      	movs	r3, #32
 80049cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f005 ff07 	bl	800a7e8 <HAL_PCD_DataOutStageCallback>
 80049da:	e01d      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d114      	bne.n	8004a0c <PCD_EP_OutXfrComplete_int+0x1b0>
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d108      	bne.n	8004a0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a04:	461a      	mov	r2, r3
 8004a06:	2100      	movs	r1, #0
 8004a08:	f003 fc20 	bl	800824c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f005 fee8 	bl	800a7e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	4f54300a 	.word	0x4f54300a
 8004a28:	4f54310a 	.word	0x4f54310a

08004a2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	333c      	adds	r3, #60	@ 0x3c
 8004a44:	3304      	adds	r3, #4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a15      	ldr	r2, [pc, #84]	@ (8004ab4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d90e      	bls.n	8004a80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f005 fe9f 	bl	800a7c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d90c      	bls.n	8004aa8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	799b      	ldrb	r3, [r3, #6]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d108      	bne.n	8004aa8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	f003 fbd2 	bl	800824c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	4f54300a 	.word	0x4f54300a

08004ab8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ad6:	883b      	ldrh	r3, [r7, #0]
 8004ad8:	0419      	lsls	r1, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ae4:	e028      	b.n	8004b38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	0c1b      	lsrs	r3, r3, #16
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4413      	add	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004af4:	2300      	movs	r3, #0
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	e00d      	b.n	8004b16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	3340      	adds	r3, #64	@ 0x40
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	3301      	adds	r3, #1
 8004b14:	73fb      	strb	r3, [r7, #15]
 8004b16:	7bfa      	ldrb	r2, [r7, #15]
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d3ec      	bcc.n	8004afa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b20:	883b      	ldrh	r3, [r7, #0]
 8004b22:	0418      	lsls	r0, r3, #16
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6819      	ldr	r1, [r3, #0]
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	4302      	orrs	r2, r0
 8004b30:	3340      	adds	r3, #64	@ 0x40
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e267      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d075      	beq.n	8004c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b9e:	4b88      	ldr	r3, [pc, #544]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004baa:	4b85      	ldr	r3, [pc, #532]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d112      	bne.n	8004bdc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bb6:	4b82      	ldr	r3, [pc, #520]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bc2:	d10b      	bne.n	8004bdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d05b      	beq.n	8004c88 <HAL_RCC_OscConfig+0x108>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d157      	bne.n	8004c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e242      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be4:	d106      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x74>
 8004be6:	4b76      	ldr	r3, [pc, #472]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a75      	ldr	r2, [pc, #468]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	e01d      	b.n	8004c30 <HAL_RCC_OscConfig+0xb0>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x98>
 8004bfe:	4b70      	ldr	r3, [pc, #448]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6f      	ldr	r2, [pc, #444]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6c      	ldr	r2, [pc, #432]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e00b      	b.n	8004c30 <HAL_RCC_OscConfig+0xb0>
 8004c18:	4b69      	ldr	r3, [pc, #420]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a68      	ldr	r2, [pc, #416]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	4b66      	ldr	r3, [pc, #408]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a65      	ldr	r2, [pc, #404]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d013      	beq.n	8004c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fd fe94 	bl	8002964 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c40:	f7fd fe90 	bl	8002964 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	@ 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e207      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c52:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0xc0>
 8004c5e:	e014      	b.n	8004c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fd fe80 	bl	8002964 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c68:	f7fd fe7c 	bl	8002964 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b64      	cmp	r3, #100	@ 0x64
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e1f3      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7a:	4b51      	ldr	r3, [pc, #324]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0xe8>
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d063      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c96:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00b      	beq.n	8004cba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca2:	4b47      	ldr	r3, [pc, #284]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d11c      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cae:	4b44      	ldr	r3, [pc, #272]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d116      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cba:	4b41      	ldr	r3, [pc, #260]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x152>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d001      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e1c7      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4937      	ldr	r1, [pc, #220]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce6:	e03a      	b.n	8004d5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d020      	beq.n	8004d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf0:	4b34      	ldr	r3, [pc, #208]	@ (8004dc4 <HAL_RCC_OscConfig+0x244>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fd fe35 	bl	8002964 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cfe:	f7fd fe31 	bl	8002964 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e1a8      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d10:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1c:	4b28      	ldr	r3, [pc, #160]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4925      	ldr	r1, [pc, #148]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	600b      	str	r3, [r1, #0]
 8004d30:	e015      	b.n	8004d5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d32:	4b24      	ldr	r3, [pc, #144]	@ (8004dc4 <HAL_RCC_OscConfig+0x244>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fd fe14 	bl	8002964 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d40:	f7fd fe10 	bl	8002964 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e187      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d52:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d036      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d016      	beq.n	8004da0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d72:	4b15      	ldr	r3, [pc, #84]	@ (8004dc8 <HAL_RCC_OscConfig+0x248>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7fd fdf4 	bl	8002964 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d80:	f7fd fdf0 	bl	8002964 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e167      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d92:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <HAL_RCC_OscConfig+0x240>)
 8004d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x200>
 8004d9e:	e01b      	b.n	8004dd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da0:	4b09      	ldr	r3, [pc, #36]	@ (8004dc8 <HAL_RCC_OscConfig+0x248>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da6:	f7fd fddd 	bl	8002964 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dac:	e00e      	b.n	8004dcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dae:	f7fd fdd9 	bl	8002964 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d907      	bls.n	8004dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e150      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	42470000 	.word	0x42470000
 8004dc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dcc:	4b88      	ldr	r3, [pc, #544]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ea      	bne.n	8004dae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 8097 	beq.w	8004f14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dea:	4b81      	ldr	r3, [pc, #516]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10f      	bne.n	8004e16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	4b7d      	ldr	r3, [pc, #500]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	4a7c      	ldr	r2, [pc, #496]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e06:	4b7a      	ldr	r3, [pc, #488]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e12:	2301      	movs	r3, #1
 8004e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e16:	4b77      	ldr	r3, [pc, #476]	@ (8004ff4 <HAL_RCC_OscConfig+0x474>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d118      	bne.n	8004e54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e22:	4b74      	ldr	r3, [pc, #464]	@ (8004ff4 <HAL_RCC_OscConfig+0x474>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a73      	ldr	r2, [pc, #460]	@ (8004ff4 <HAL_RCC_OscConfig+0x474>)
 8004e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2e:	f7fd fd99 	bl	8002964 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e36:	f7fd fd95 	bl	8002964 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e10c      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e48:	4b6a      	ldr	r3, [pc, #424]	@ (8004ff4 <HAL_RCC_OscConfig+0x474>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCC_OscConfig+0x2ea>
 8004e5c:	4b64      	ldr	r3, [pc, #400]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e60:	4a63      	ldr	r2, [pc, #396]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e68:	e01c      	b.n	8004ea4 <HAL_RCC_OscConfig+0x324>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b05      	cmp	r3, #5
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCC_OscConfig+0x30c>
 8004e72:	4b5f      	ldr	r3, [pc, #380]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e76:	4a5e      	ldr	r2, [pc, #376]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e78:	f043 0304 	orr.w	r3, r3, #4
 8004e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e82:	4a5b      	ldr	r2, [pc, #364]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e8a:	e00b      	b.n	8004ea4 <HAL_RCC_OscConfig+0x324>
 8004e8c:	4b58      	ldr	r3, [pc, #352]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e90:	4a57      	ldr	r2, [pc, #348]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e98:	4b55      	ldr	r3, [pc, #340]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9c:	4a54      	ldr	r2, [pc, #336]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	f023 0304 	bic.w	r3, r3, #4
 8004ea2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7fd fd5a 	bl	8002964 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	f7fd fd56 	bl	8002964 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e0cb      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eca:	4b49      	ldr	r3, [pc, #292]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ee      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x334>
 8004ed6:	e014      	b.n	8004f02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed8:	f7fd fd44 	bl	8002964 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fd fd40 	bl	8002964 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e0b5      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1ee      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d105      	bne.n	8004f14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f08:	4b39      	ldr	r3, [pc, #228]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	4a38      	ldr	r2, [pc, #224]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80a1 	beq.w	8005060 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f1e:	4b34      	ldr	r3, [pc, #208]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d05c      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d141      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f32:	4b31      	ldr	r3, [pc, #196]	@ (8004ff8 <HAL_RCC_OscConfig+0x478>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7fd fd14 	bl	8002964 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fd fd10 	bl	8002964 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e087      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f52:	4b27      	ldr	r3, [pc, #156]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69da      	ldr	r2, [r3, #28]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6c:	019b      	lsls	r3, r3, #6
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	3b01      	subs	r3, #1
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f80:	061b      	lsls	r3, r3, #24
 8004f82:	491b      	ldr	r1, [pc, #108]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <HAL_RCC_OscConfig+0x478>)
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8e:	f7fd fce9 	bl	8002964 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f96:	f7fd fce5 	bl	8002964 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e05c      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa8:	4b11      	ldr	r3, [pc, #68]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x416>
 8004fb4:	e054      	b.n	8005060 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb6:	4b10      	ldr	r3, [pc, #64]	@ (8004ff8 <HAL_RCC_OscConfig+0x478>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbc:	f7fd fcd2 	bl	8002964 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fd fcce 	bl	8002964 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e045      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x444>
 8004fe2:	e03d      	b.n	8005060 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d107      	bne.n	8004ffc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e038      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	40007000 	.word	0x40007000
 8004ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <HAL_RCC_OscConfig+0x4ec>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d028      	beq.n	800505c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005014:	429a      	cmp	r2, r3
 8005016:	d121      	bne.n	800505c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005022:	429a      	cmp	r2, r3
 8005024:	d11a      	bne.n	800505c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800502c:	4013      	ands	r3, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005034:	4293      	cmp	r3, r2
 8005036:	d111      	bne.n	800505c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005042:	085b      	lsrs	r3, r3, #1
 8005044:	3b01      	subs	r3, #1
 8005046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005048:	429a      	cmp	r2, r3
 800504a:	d107      	bne.n	800505c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d001      	beq.n	8005060 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800

08005070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0cc      	b.n	800521e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005084:	4b68      	ldr	r3, [pc, #416]	@ (8005228 <HAL_RCC_ClockConfig+0x1b8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d90c      	bls.n	80050ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005092:	4b65      	ldr	r3, [pc, #404]	@ (8005228 <HAL_RCC_ClockConfig+0x1b8>)
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509a:	4b63      	ldr	r3, [pc, #396]	@ (8005228 <HAL_RCC_ClockConfig+0x1b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0b8      	b.n	800521e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d020      	beq.n	80050fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050c4:	4b59      	ldr	r3, [pc, #356]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	4a58      	ldr	r2, [pc, #352]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050dc:	4b53      	ldr	r3, [pc, #332]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	4a52      	ldr	r2, [pc, #328]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e8:	4b50      	ldr	r3, [pc, #320]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	494d      	ldr	r1, [pc, #308]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d044      	beq.n	8005190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d107      	bne.n	800511e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510e:	4b47      	ldr	r3, [pc, #284]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d119      	bne.n	800514e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e07f      	b.n	800521e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d003      	beq.n	800512e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512a:	2b03      	cmp	r3, #3
 800512c:	d107      	bne.n	800513e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800512e:	4b3f      	ldr	r3, [pc, #252]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e06f      	b.n	800521e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513e:	4b3b      	ldr	r3, [pc, #236]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e067      	b.n	800521e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800514e:	4b37      	ldr	r3, [pc, #220]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f023 0203 	bic.w	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	4934      	ldr	r1, [pc, #208]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	4313      	orrs	r3, r2
 800515e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005160:	f7fd fc00 	bl	8002964 <HAL_GetTick>
 8005164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	e00a      	b.n	800517e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005168:	f7fd fbfc 	bl	8002964 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e04f      	b.n	800521e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517e:	4b2b      	ldr	r3, [pc, #172]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 020c 	and.w	r2, r3, #12
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	429a      	cmp	r2, r3
 800518e:	d1eb      	bne.n	8005168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005190:	4b25      	ldr	r3, [pc, #148]	@ (8005228 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d20c      	bcs.n	80051b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b22      	ldr	r3, [pc, #136]	@ (8005228 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b20      	ldr	r3, [pc, #128]	@ (8005228 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e032      	b.n	800521e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c4:	4b19      	ldr	r3, [pc, #100]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4916      	ldr	r1, [pc, #88]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051e2:	4b12      	ldr	r3, [pc, #72]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	490e      	ldr	r1, [pc, #56]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051f6:	f000 f821 	bl	800523c <HAL_RCC_GetSysClockFreq>
 80051fa:	4602      	mov	r2, r0
 80051fc:	4b0b      	ldr	r3, [pc, #44]	@ (800522c <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	490a      	ldr	r1, [pc, #40]	@ (8005230 <HAL_RCC_ClockConfig+0x1c0>)
 8005208:	5ccb      	ldrb	r3, [r1, r3]
 800520a:	fa22 f303 	lsr.w	r3, r2, r3
 800520e:	4a09      	ldr	r2, [pc, #36]	@ (8005234 <HAL_RCC_ClockConfig+0x1c4>)
 8005210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005212:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <HAL_RCC_ClockConfig+0x1c8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f7fd fb60 	bl	80028dc <HAL_InitTick>

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40023c00 	.word	0x40023c00
 800522c:	40023800 	.word	0x40023800
 8005230:	0800f0f8 	.word	0x0800f0f8
 8005234:	20000010 	.word	0x20000010
 8005238:	20000014 	.word	0x20000014

0800523c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800523c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005240:	b094      	sub	sp, #80	@ 0x50
 8005242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005254:	4b79      	ldr	r3, [pc, #484]	@ (800543c <HAL_RCC_GetSysClockFreq+0x200>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 030c 	and.w	r3, r3, #12
 800525c:	2b08      	cmp	r3, #8
 800525e:	d00d      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x40>
 8005260:	2b08      	cmp	r3, #8
 8005262:	f200 80e1 	bhi.w	8005428 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x34>
 800526a:	2b04      	cmp	r3, #4
 800526c:	d003      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0x3a>
 800526e:	e0db      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005270:	4b73      	ldr	r3, [pc, #460]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x204>)
 8005272:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005274:	e0db      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005276:	4b72      	ldr	r3, [pc, #456]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x204>)
 8005278:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800527a:	e0d8      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800527c:	4b6f      	ldr	r3, [pc, #444]	@ (800543c <HAL_RCC_GetSysClockFreq+0x200>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005284:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005286:	4b6d      	ldr	r3, [pc, #436]	@ (800543c <HAL_RCC_GetSysClockFreq+0x200>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d063      	beq.n	800535a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005292:	4b6a      	ldr	r3, [pc, #424]	@ (800543c <HAL_RCC_GetSysClockFreq+0x200>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	099b      	lsrs	r3, r3, #6
 8005298:	2200      	movs	r2, #0
 800529a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800529c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800529e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052a6:	2300      	movs	r3, #0
 80052a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052ae:	4622      	mov	r2, r4
 80052b0:	462b      	mov	r3, r5
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f04f 0100 	mov.w	r1, #0
 80052ba:	0159      	lsls	r1, r3, #5
 80052bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052c0:	0150      	lsls	r0, r2, #5
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4621      	mov	r1, r4
 80052c8:	1a51      	subs	r1, r2, r1
 80052ca:	6139      	str	r1, [r7, #16]
 80052cc:	4629      	mov	r1, r5
 80052ce:	eb63 0301 	sbc.w	r3, r3, r1
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052e0:	4659      	mov	r1, fp
 80052e2:	018b      	lsls	r3, r1, #6
 80052e4:	4651      	mov	r1, sl
 80052e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ea:	4651      	mov	r1, sl
 80052ec:	018a      	lsls	r2, r1, #6
 80052ee:	4651      	mov	r1, sl
 80052f0:	ebb2 0801 	subs.w	r8, r2, r1
 80052f4:	4659      	mov	r1, fp
 80052f6:	eb63 0901 	sbc.w	r9, r3, r1
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800530a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800530e:	4690      	mov	r8, r2
 8005310:	4699      	mov	r9, r3
 8005312:	4623      	mov	r3, r4
 8005314:	eb18 0303 	adds.w	r3, r8, r3
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	462b      	mov	r3, r5
 800531c:	eb49 0303 	adc.w	r3, r9, r3
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800532e:	4629      	mov	r1, r5
 8005330:	028b      	lsls	r3, r1, #10
 8005332:	4621      	mov	r1, r4
 8005334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005338:	4621      	mov	r1, r4
 800533a:	028a      	lsls	r2, r1, #10
 800533c:	4610      	mov	r0, r2
 800533e:	4619      	mov	r1, r3
 8005340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005342:	2200      	movs	r2, #0
 8005344:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005346:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005348:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800534c:	f7fb fc7c 	bl	8000c48 <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4613      	mov	r3, r2
 8005356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005358:	e058      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535a:	4b38      	ldr	r3, [pc, #224]	@ (800543c <HAL_RCC_GetSysClockFreq+0x200>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	099b      	lsrs	r3, r3, #6
 8005360:	2200      	movs	r2, #0
 8005362:	4618      	mov	r0, r3
 8005364:	4611      	mov	r1, r2
 8005366:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800536a:	623b      	str	r3, [r7, #32]
 800536c:	2300      	movs	r3, #0
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005370:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	f04f 0000 	mov.w	r0, #0
 800537c:	f04f 0100 	mov.w	r1, #0
 8005380:	0159      	lsls	r1, r3, #5
 8005382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005386:	0150      	lsls	r0, r2, #5
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4641      	mov	r1, r8
 800538e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005392:	4649      	mov	r1, r9
 8005394:	eb63 0b01 	sbc.w	fp, r3, r1
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053ac:	ebb2 040a 	subs.w	r4, r2, sl
 80053b0:	eb63 050b 	sbc.w	r5, r3, fp
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	00eb      	lsls	r3, r5, #3
 80053be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053c2:	00e2      	lsls	r2, r4, #3
 80053c4:	4614      	mov	r4, r2
 80053c6:	461d      	mov	r5, r3
 80053c8:	4643      	mov	r3, r8
 80053ca:	18e3      	adds	r3, r4, r3
 80053cc:	603b      	str	r3, [r7, #0]
 80053ce:	464b      	mov	r3, r9
 80053d0:	eb45 0303 	adc.w	r3, r5, r3
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053e2:	4629      	mov	r1, r5
 80053e4:	028b      	lsls	r3, r1, #10
 80053e6:	4621      	mov	r1, r4
 80053e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053ec:	4621      	mov	r1, r4
 80053ee:	028a      	lsls	r2, r1, #10
 80053f0:	4610      	mov	r0, r2
 80053f2:	4619      	mov	r1, r3
 80053f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053f6:	2200      	movs	r2, #0
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	61fa      	str	r2, [r7, #28]
 80053fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005400:	f7fb fc22 	bl	8000c48 <__aeabi_uldivmod>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4613      	mov	r3, r2
 800540a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800540c:	4b0b      	ldr	r3, [pc, #44]	@ (800543c <HAL_RCC_GetSysClockFreq+0x200>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	0c1b      	lsrs	r3, r3, #16
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	3301      	adds	r3, #1
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800541c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800541e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005426:	e002      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005428:	4b05      	ldr	r3, [pc, #20]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x204>)
 800542a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800542c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800542e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005430:	4618      	mov	r0, r3
 8005432:	3750      	adds	r7, #80	@ 0x50
 8005434:	46bd      	mov	sp, r7
 8005436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800
 8005440:	00f42400 	.word	0x00f42400

08005444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005448:	4b03      	ldr	r3, [pc, #12]	@ (8005458 <HAL_RCC_GetHCLKFreq+0x14>)
 800544a:	681b      	ldr	r3, [r3, #0]
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000010 	.word	0x20000010

0800545c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e07b      	b.n	8005566 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d108      	bne.n	8005488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800547e:	d009      	beq.n	8005494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	61da      	str	r2, [r3, #28]
 8005486:	e005      	b.n	8005494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fc ffa4 	bl	80023fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005518:	ea42 0103 	orr.w	r1, r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	f003 0104 	and.w	r1, r3, #4
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553a:	f003 0210 	and.w	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b088      	sub	sp, #32
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800557e:	f7fd f9f1 	bl	8002964 <HAL_GetTick>
 8005582:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005584:	88fb      	ldrh	r3, [r7, #6]
 8005586:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d001      	beq.n	8005598 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
 8005596:	e12a      	b.n	80057ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Transmit+0x36>
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e122      	b.n	80057ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_SPI_Transmit+0x48>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e11b      	b.n	80057ee <HAL_SPI_Transmit+0x280>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2203      	movs	r2, #3
 80055c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	88fa      	ldrh	r2, [r7, #6]
 80055d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005604:	d10f      	bne.n	8005626 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b40      	cmp	r3, #64	@ 0x40
 8005632:	d007      	beq.n	8005644 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800564c:	d152      	bne.n	80056f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_SPI_Transmit+0xee>
 8005656:	8b7b      	ldrh	r3, [r7, #26]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d145      	bne.n	80056e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005660:	881a      	ldrh	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	1c9a      	adds	r2, r3, #2
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005680:	e032      	b.n	80056e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b02      	cmp	r3, #2
 800568e:	d112      	bne.n	80056b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005694:	881a      	ldrh	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a0:	1c9a      	adds	r2, r3, #2
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056b4:	e018      	b.n	80056e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b6:	f7fd f955 	bl	8002964 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d803      	bhi.n	80056ce <HAL_SPI_Transmit+0x160>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d102      	bne.n	80056d4 <HAL_SPI_Transmit+0x166>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e082      	b.n	80057ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1c7      	bne.n	8005682 <HAL_SPI_Transmit+0x114>
 80056f2:	e053      	b.n	800579c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_SPI_Transmit+0x194>
 80056fc:	8b7b      	ldrh	r3, [r7, #26]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d147      	bne.n	8005792 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005728:	e033      	b.n	8005792 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d113      	bne.n	8005760 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	7812      	ldrb	r2, [r2, #0]
 8005744:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800575e:	e018      	b.n	8005792 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005760:	f7fd f900 	bl	8002964 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d803      	bhi.n	8005778 <HAL_SPI_Transmit+0x20a>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d102      	bne.n	800577e <HAL_SPI_Transmit+0x210>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e02d      	b.n	80057ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1c6      	bne.n	800572a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fdd1 	bl	8006348 <SPI_EndRxTxTransaction>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80057ec:	2300      	movs	r3, #0
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b08a      	sub	sp, #40	@ 0x28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005804:	2301      	movs	r3, #1
 8005806:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005808:	f7fd f8ac 	bl	8002964 <HAL_GetTick>
 800580c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005814:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800581c:	887b      	ldrh	r3, [r7, #2]
 800581e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005820:	7ffb      	ldrb	r3, [r7, #31]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d00c      	beq.n	8005840 <HAL_SPI_TransmitReceive+0x4a>
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800582c:	d106      	bne.n	800583c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d102      	bne.n	800583c <HAL_SPI_TransmitReceive+0x46>
 8005836:	7ffb      	ldrb	r3, [r7, #31]
 8005838:	2b04      	cmp	r3, #4
 800583a:	d001      	beq.n	8005840 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800583c:	2302      	movs	r3, #2
 800583e:	e17f      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x5c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x5c>
 800584c:	887b      	ldrh	r3, [r7, #2]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e174      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_SPI_TransmitReceive+0x6e>
 8005860:	2302      	movs	r3, #2
 8005862:	e16d      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x34a>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b04      	cmp	r3, #4
 8005876:	d003      	beq.n	8005880 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2205      	movs	r2, #5
 800587c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	887a      	ldrh	r2, [r7, #2]
 8005890:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	887a      	ldrh	r2, [r7, #2]
 8005896:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	887a      	ldrh	r2, [r7, #2]
 80058a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	887a      	ldrh	r2, [r7, #2]
 80058a8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c0:	2b40      	cmp	r3, #64	@ 0x40
 80058c2:	d007      	beq.n	80058d4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058dc:	d17e      	bne.n	80059dc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_SPI_TransmitReceive+0xf6>
 80058e6:	8afb      	ldrh	r3, [r7, #22]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d16c      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f0:	881a      	ldrh	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fc:	1c9a      	adds	r2, r3, #2
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005910:	e059      	b.n	80059c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d11b      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x162>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x162>
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	2b01      	cmp	r3, #1
 800592e:	d113      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005934:	881a      	ldrh	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d119      	bne.n	800599a <HAL_SPI_TransmitReceive+0x1a4>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d014      	beq.n	800599a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	b292      	uxth	r2, r2
 800597c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	1c9a      	adds	r2, r3, #2
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005996:	2301      	movs	r3, #1
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800599a:	f7fc ffe3 	bl	8002964 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d80d      	bhi.n	80059c6 <HAL_SPI_TransmitReceive+0x1d0>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d009      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e0bc      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1a0      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x11c>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d19b      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x11c>
 80059da:	e082      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x1f4>
 80059e4:	8afb      	ldrh	r3, [r7, #22]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d171      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	7812      	ldrb	r2, [r2, #0]
 80059f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a10:	e05d      	b.n	8005ace <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d11c      	bne.n	8005a5a <HAL_SPI_TransmitReceive+0x264>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d017      	beq.n	8005a5a <HAL_SPI_TransmitReceive+0x264>
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d114      	bne.n	8005a5a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	7812      	ldrb	r2, [r2, #0]
 8005a3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d119      	bne.n	8005a9c <HAL_SPI_TransmitReceive+0x2a6>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d014      	beq.n	8005a9c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a9c:	f7fc ff62 	bl	8002964 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d803      	bhi.n	8005ab4 <HAL_SPI_TransmitReceive+0x2be>
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab2:	d102      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x2c4>
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d109      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e038      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d19c      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x21c>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d197      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ae2:	6a3a      	ldr	r2, [r7, #32]
 8005ae4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 fc2e 	bl	8006348 <SPI_EndRxTxTransaction>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d008      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e01d      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
  }
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3728      	adds	r7, #40	@ 0x28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b5c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d00c      	beq.n	8005b84 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b70:	d106      	bne.n	8005b80 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <HAL_SPI_TransmitReceive_DMA+0x38>
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d001      	beq.n	8005b84 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
 8005b82:	e0cf      	b.n	8005d24 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0c4      	b.n	8005d24 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_SPI_TransmitReceive_DMA+0x60>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e0bd      	b.n	8005d24 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d003      	beq.n	8005bc4 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2205      	movs	r2, #5
 8005bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	887a      	ldrh	r2, [r7, #2]
 8005bd4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	887a      	ldrh	r2, [r7, #2]
 8005bda:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	887a      	ldrh	r2, [r7, #2]
 8005be6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	887a      	ldrh	r2, [r7, #2]
 8005bec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d108      	bne.n	8005c18 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c0a:	4a48      	ldr	r2, [pc, #288]	@ (8005d2c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c12:	4a47      	ldr	r2, [pc, #284]	@ (8005d30 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005c14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c16:	e007      	b.n	8005c28 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c1c:	4a45      	ldr	r2, [pc, #276]	@ (8005d34 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005c1e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c24:	4a44      	ldr	r2, [pc, #272]	@ (8005d38 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005c26:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2c:	4a43      	ldr	r2, [pc, #268]	@ (8005d3c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005c2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c34:	2200      	movs	r2, #0
 8005c36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	4619      	mov	r1, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c48:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c4e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c50:	f7fd f878 	bl	8002d44 <HAL_DMA_Start_IT>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5e:	f043 0210 	orr.w	r2, r3, #16
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e058      	b.n	8005d24 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f042 0201 	orr.w	r2, r2, #1
 8005c80:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c86:	2200      	movs	r2, #0
 8005c88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c8e:	2200      	movs	r2, #0
 8005c90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c96:	2200      	movs	r2, #0
 8005c98:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005caa:	4619      	mov	r1, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cb8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005cba:	f7fd f843 	bl	8002d44 <HAL_DMA_Start_IT>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00b      	beq.n	8005cdc <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc8:	f043 0210 	orr.w	r2, r3, #16
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e023      	b.n	8005d24 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce6:	2b40      	cmp	r3, #64	@ 0x40
 8005ce8:	d007      	beq.n	8005cfa <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cf8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0220 	orr.w	r2, r2, #32
 8005d10:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0202 	orr.w	r2, r2, #2
 8005d20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	080060cd 	.word	0x080060cd
 8005d30:	08005f95 	.word	0x08005f95
 8005d34:	080060e9 	.word	0x080060e9
 8005d38:	0800603d 	.word	0x0800603d
 8005d3c:	08006105 	.word	0x08006105

08005d40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10e      	bne.n	8005d80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
    return;
 8005d7e:	e0ce      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_SPI_IRQHandler+0x5e>
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4798      	blx	r3
    return;
 8005d9c:	e0bf      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <HAL_SPI_IRQHandler+0x7e>
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d105      	bne.n	8005dbe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80b0 	beq.w	8005f1e <HAL_SPI_IRQHandler+0x1de>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80aa 	beq.w	8005f1e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d023      	beq.n	8005e1c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d011      	beq.n	8005e04 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de4:	f043 0204 	orr.w	r2, r3, #4
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	e00b      	b.n	8005e1c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e04:	2300      	movs	r3, #0
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	693b      	ldr	r3, [r7, #16]
        return;
 8005e1a:	e080      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d014      	beq.n	8005e50 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2a:	f043 0201 	orr.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00c      	beq.n	8005e74 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5e:	f043 0208 	orr.w	r2, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d04f      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <HAL_SPI_IRQHandler+0x168>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d034      	beq.n	8005f12 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0203 	bic.w	r2, r2, #3
 8005eb6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec4:	4a17      	ldr	r2, [pc, #92]	@ (8005f24 <HAL_SPI_IRQHandler+0x1e4>)
 8005ec6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fc ff91 	bl	8002df4 <HAL_DMA_Abort_IT>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005edc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d016      	beq.n	8005f1a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8005f24 <HAL_SPI_IRQHandler+0x1e4>)
 8005ef2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fc ff7b 	bl	8002df4 <HAL_DMA_Abort_IT>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005f10:	e003      	b.n	8005f1a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f826 	bl	8005f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f18:	e000      	b.n	8005f1c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005f1a:	bf00      	nop
    return;
 8005f1c:	bf00      	nop
  }
}
 8005f1e:	3720      	adds	r7, #32
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	08006145 	.word	0x08006145

08005f28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f86:	b2db      	uxtb	r3, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa2:	f7fc fcdf 	bl	8002964 <HAL_GetTick>
 8005fa6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fb6:	d03b      	beq.n	8006030 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0220 	bic.w	r2, r2, #32
 8005fc6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10d      	bne.n	8005fec <SPI_DMAReceiveCplt+0x58>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fd8:	d108      	bne.n	8005fec <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0203 	bic.w	r2, r2, #3
 8005fe8:	605a      	str	r2, [r3, #4]
 8005fea:	e007      	b.n	8005ffc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0201 	bic.w	r2, r2, #1
 8005ffa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	2164      	movs	r1, #100	@ 0x64
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f93b 	bl	800627c <SPI_EndRxTransaction>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff ff9b 	bl	8005f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800602e:	e002      	b.n	8006036 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff ff79 	bl	8005f28 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006048:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800604a:	f7fc fc8b 	bl	8002964 <HAL_GetTick>
 800604e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800605e:	d02f      	beq.n	80060c0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0220 	bic.w	r2, r2, #32
 800606e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	2164      	movs	r1, #100	@ 0x64
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f967 	bl	8006348 <SPI_EndRxTxTransaction>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006084:	f043 0220 	orr.w	r2, r3, #32
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0203 	bic.w	r2, r2, #3
 800609a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff ff53 	bl	8005f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80060be:	e002      	b.n	80060c6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7fb fe9d 	bl	8001e00 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff ff2e 	bl	8005f3c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff ff2a 	bl	8005f50 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006110:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0203 	bic.w	r2, r2, #3
 8006120:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006126:	f043 0210 	orr.w	r2, r3, #16
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f7ff ff14 	bl	8005f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006150:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7ff ff00 	bl	8005f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800617c:	f7fc fbf2 	bl	8002964 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	4413      	add	r3, r2
 800618a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800618c:	f7fc fbea 	bl	8002964 <HAL_GetTick>
 8006190:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006192:	4b39      	ldr	r3, [pc, #228]	@ (8006278 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	015b      	lsls	r3, r3, #5
 8006198:	0d1b      	lsrs	r3, r3, #20
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	fb02 f303 	mul.w	r3, r2, r3
 80061a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a2:	e054      	b.n	800624e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d050      	beq.n	800624e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061ac:	f7fc fbda 	bl	8002964 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d902      	bls.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d13d      	bne.n	800623e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061da:	d111      	bne.n	8006200 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061e4:	d004      	beq.n	80061f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ee:	d107      	bne.n	8006200 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006208:	d10f      	bne.n	800622a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e017      	b.n	800626e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	3b01      	subs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4013      	ands	r3, r2
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	429a      	cmp	r2, r3
 800625c:	bf0c      	ite	eq
 800625e:	2301      	moveq	r3, #1
 8006260:	2300      	movne	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	429a      	cmp	r2, r3
 800626a:	d19b      	bne.n	80061a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3720      	adds	r7, #32
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000010 	.word	0x20000010

0800627c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006290:	d111      	bne.n	80062b6 <SPI_EndRxTransaction+0x3a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800629a:	d004      	beq.n	80062a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a4:	d107      	bne.n	80062b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062be:	d12a      	bne.n	8006316 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c8:	d012      	beq.n	80062f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2180      	movs	r1, #128	@ 0x80
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff ff49 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d02d      	beq.n	800633c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e026      	b.n	800633e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	2101      	movs	r1, #1
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff ff36 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01a      	beq.n	800633c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630a:	f043 0220 	orr.w	r2, r3, #32
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e013      	b.n	800633e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	2101      	movs	r1, #1
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff ff23 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e000      	b.n	800633e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2201      	movs	r2, #1
 800635c:	2102      	movs	r1, #2
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7ff ff04 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636e:	f043 0220 	orr.w	r2, r3, #32
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e032      	b.n	80063e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800637a:	4b1b      	ldr	r3, [pc, #108]	@ (80063e8 <SPI_EndRxTxTransaction+0xa0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1b      	ldr	r2, [pc, #108]	@ (80063ec <SPI_EndRxTxTransaction+0xa4>)
 8006380:	fba2 2303 	umull	r2, r3, r2, r3
 8006384:	0d5b      	lsrs	r3, r3, #21
 8006386:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006398:	d112      	bne.n	80063c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2200      	movs	r2, #0
 80063a2:	2180      	movs	r1, #128	@ 0x80
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fee1 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d016      	beq.n	80063de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b4:	f043 0220 	orr.w	r2, r3, #32
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e00f      	b.n	80063e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d6:	2b80      	cmp	r3, #128	@ 0x80
 80063d8:	d0f2      	beq.n	80063c0 <SPI_EndRxTxTransaction+0x78>
 80063da:	e000      	b.n	80063de <SPI_EndRxTxTransaction+0x96>
        break;
 80063dc:	bf00      	nop
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000010 	.word	0x20000010
 80063ec:	165e9f81 	.word	0x165e9f81

080063f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e041      	b.n	8006486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d106      	bne.n	800641c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fc f8a6 	bl	8002568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3304      	adds	r3, #4
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f000 fa7e 	bl	8006930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d001      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e04e      	b.n	8006546 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a23      	ldr	r2, [pc, #140]	@ (8006554 <HAL_TIM_Base_Start_IT+0xc4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d022      	beq.n	8006510 <HAL_TIM_Base_Start_IT+0x80>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d2:	d01d      	beq.n	8006510 <HAL_TIM_Base_Start_IT+0x80>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006558 <HAL_TIM_Base_Start_IT+0xc8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d018      	beq.n	8006510 <HAL_TIM_Base_Start_IT+0x80>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1e      	ldr	r2, [pc, #120]	@ (800655c <HAL_TIM_Base_Start_IT+0xcc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d013      	beq.n	8006510 <HAL_TIM_Base_Start_IT+0x80>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006560 <HAL_TIM_Base_Start_IT+0xd0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00e      	beq.n	8006510 <HAL_TIM_Base_Start_IT+0x80>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006564 <HAL_TIM_Base_Start_IT+0xd4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d009      	beq.n	8006510 <HAL_TIM_Base_Start_IT+0x80>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a19      	ldr	r2, [pc, #100]	@ (8006568 <HAL_TIM_Base_Start_IT+0xd8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d004      	beq.n	8006510 <HAL_TIM_Base_Start_IT+0x80>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a18      	ldr	r2, [pc, #96]	@ (800656c <HAL_TIM_Base_Start_IT+0xdc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d111      	bne.n	8006534 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b06      	cmp	r3, #6
 8006520:	d010      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0201 	orr.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006532:	e007      	b.n	8006544 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40010000 	.word	0x40010000
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800
 8006560:	40000c00 	.word	0x40000c00
 8006564:	40010400 	.word	0x40010400
 8006568:	40014000 	.word	0x40014000
 800656c:	40001800 	.word	0x40001800

08006570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d020      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01b      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0202 	mvn.w	r2, #2
 80065a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f999 	bl	80068f2 <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f98b 	bl	80068de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f99c 	bl	8006906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d020      	beq.n	8006620 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01b      	beq.n	8006620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0204 	mvn.w	r2, #4
 80065f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2202      	movs	r2, #2
 80065f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f973 	bl	80068f2 <HAL_TIM_IC_CaptureCallback>
 800660c:	e005      	b.n	800661a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f965 	bl	80068de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f976 	bl	8006906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d020      	beq.n	800666c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01b      	beq.n	800666c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0208 	mvn.w	r2, #8
 800663c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2204      	movs	r2, #4
 8006642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f94d 	bl	80068f2 <HAL_TIM_IC_CaptureCallback>
 8006658:	e005      	b.n	8006666 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f93f 	bl	80068de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f950 	bl	8006906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b00      	cmp	r3, #0
 8006674:	d020      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01b      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0210 	mvn.w	r2, #16
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2208      	movs	r2, #8
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f927 	bl	80068f2 <HAL_TIM_IC_CaptureCallback>
 80066a4:	e005      	b.n	80066b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f919 	bl	80068de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f92a 	bl	8006906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00c      	beq.n	80066dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d007      	beq.n	80066dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0201 	mvn.w	r2, #1
 80066d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fb fbe0 	bl	8001e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80066f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fae4 	bl	8006cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00c      	beq.n	8006724 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800671c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f8fb 	bl	800691a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00c      	beq.n	8006748 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0220 	mvn.w	r2, #32
 8006740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fab6 	bl	8006cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006748:	bf00      	nop
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006764:	2b01      	cmp	r3, #1
 8006766:	d101      	bne.n	800676c <HAL_TIM_ConfigClockSource+0x1c>
 8006768:	2302      	movs	r3, #2
 800676a:	e0b4      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x186>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800678a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067a4:	d03e      	beq.n	8006824 <HAL_TIM_ConfigClockSource+0xd4>
 80067a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067aa:	f200 8087 	bhi.w	80068bc <HAL_TIM_ConfigClockSource+0x16c>
 80067ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b2:	f000 8086 	beq.w	80068c2 <HAL_TIM_ConfigClockSource+0x172>
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ba:	d87f      	bhi.n	80068bc <HAL_TIM_ConfigClockSource+0x16c>
 80067bc:	2b70      	cmp	r3, #112	@ 0x70
 80067be:	d01a      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0xa6>
 80067c0:	2b70      	cmp	r3, #112	@ 0x70
 80067c2:	d87b      	bhi.n	80068bc <HAL_TIM_ConfigClockSource+0x16c>
 80067c4:	2b60      	cmp	r3, #96	@ 0x60
 80067c6:	d050      	beq.n	800686a <HAL_TIM_ConfigClockSource+0x11a>
 80067c8:	2b60      	cmp	r3, #96	@ 0x60
 80067ca:	d877      	bhi.n	80068bc <HAL_TIM_ConfigClockSource+0x16c>
 80067cc:	2b50      	cmp	r3, #80	@ 0x50
 80067ce:	d03c      	beq.n	800684a <HAL_TIM_ConfigClockSource+0xfa>
 80067d0:	2b50      	cmp	r3, #80	@ 0x50
 80067d2:	d873      	bhi.n	80068bc <HAL_TIM_ConfigClockSource+0x16c>
 80067d4:	2b40      	cmp	r3, #64	@ 0x40
 80067d6:	d058      	beq.n	800688a <HAL_TIM_ConfigClockSource+0x13a>
 80067d8:	2b40      	cmp	r3, #64	@ 0x40
 80067da:	d86f      	bhi.n	80068bc <HAL_TIM_ConfigClockSource+0x16c>
 80067dc:	2b30      	cmp	r3, #48	@ 0x30
 80067de:	d064      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x15a>
 80067e0:	2b30      	cmp	r3, #48	@ 0x30
 80067e2:	d86b      	bhi.n	80068bc <HAL_TIM_ConfigClockSource+0x16c>
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d060      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x15a>
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d867      	bhi.n	80068bc <HAL_TIM_ConfigClockSource+0x16c>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d05c      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x15a>
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d05a      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x15a>
 80067f4:	e062      	b.n	80068bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006806:	f000 f9b9 	bl	8006b7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	609a      	str	r2, [r3, #8]
      break;
 8006822:	e04f      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006834:	f000 f9a2 	bl	8006b7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006846:	609a      	str	r2, [r3, #8]
      break;
 8006848:	e03c      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006856:	461a      	mov	r2, r3
 8006858:	f000 f916 	bl	8006a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2150      	movs	r1, #80	@ 0x50
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f96f 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 8006868:	e02c      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006876:	461a      	mov	r2, r3
 8006878:	f000 f935 	bl	8006ae6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2160      	movs	r1, #96	@ 0x60
 8006882:	4618      	mov	r0, r3
 8006884:	f000 f95f 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 8006888:	e01c      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006896:	461a      	mov	r2, r3
 8006898:	f000 f8f6 	bl	8006a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2140      	movs	r1, #64	@ 0x40
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f94f 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 80068a8:	e00c      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f000 f946 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 80068ba:	e003      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
      break;
 80068c0:	e000      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
	...

08006930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a46      	ldr	r2, [pc, #280]	@ (8006a5c <TIM_Base_SetConfig+0x12c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <TIM_Base_SetConfig+0x40>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694e:	d00f      	beq.n	8006970 <TIM_Base_SetConfig+0x40>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a43      	ldr	r2, [pc, #268]	@ (8006a60 <TIM_Base_SetConfig+0x130>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00b      	beq.n	8006970 <TIM_Base_SetConfig+0x40>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a42      	ldr	r2, [pc, #264]	@ (8006a64 <TIM_Base_SetConfig+0x134>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d007      	beq.n	8006970 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a41      	ldr	r2, [pc, #260]	@ (8006a68 <TIM_Base_SetConfig+0x138>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a40      	ldr	r2, [pc, #256]	@ (8006a6c <TIM_Base_SetConfig+0x13c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d108      	bne.n	8006982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a35      	ldr	r2, [pc, #212]	@ (8006a5c <TIM_Base_SetConfig+0x12c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d02b      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006990:	d027      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a32      	ldr	r2, [pc, #200]	@ (8006a60 <TIM_Base_SetConfig+0x130>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d023      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a31      	ldr	r2, [pc, #196]	@ (8006a64 <TIM_Base_SetConfig+0x134>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01f      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a30      	ldr	r2, [pc, #192]	@ (8006a68 <TIM_Base_SetConfig+0x138>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d01b      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2f      	ldr	r2, [pc, #188]	@ (8006a6c <TIM_Base_SetConfig+0x13c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d017      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006a70 <TIM_Base_SetConfig+0x140>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006a74 <TIM_Base_SetConfig+0x144>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00f      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006a78 <TIM_Base_SetConfig+0x148>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00b      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a2b      	ldr	r2, [pc, #172]	@ (8006a7c <TIM_Base_SetConfig+0x14c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d007      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006a80 <TIM_Base_SetConfig+0x150>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d003      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a29      	ldr	r2, [pc, #164]	@ (8006a84 <TIM_Base_SetConfig+0x154>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d108      	bne.n	80069f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a10      	ldr	r2, [pc, #64]	@ (8006a5c <TIM_Base_SetConfig+0x12c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <TIM_Base_SetConfig+0xf8>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a12      	ldr	r2, [pc, #72]	@ (8006a6c <TIM_Base_SetConfig+0x13c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d103      	bne.n	8006a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d105      	bne.n	8006a4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f023 0201 	bic.w	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	611a      	str	r2, [r3, #16]
  }
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40000400 	.word	0x40000400
 8006a64:	40000800 	.word	0x40000800
 8006a68:	40000c00 	.word	0x40000c00
 8006a6c:	40010400 	.word	0x40010400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800
 8006a7c:	40001800 	.word	0x40001800
 8006a80:	40001c00 	.word	0x40001c00
 8006a84:	40002000 	.word	0x40002000

08006a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0201 	bic.w	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f023 030a 	bic.w	r3, r3, #10
 8006ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b087      	sub	sp, #28
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	f023 0210 	bic.w	r2, r3, #16
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	031b      	lsls	r3, r3, #12
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f043 0307 	orr.w	r3, r3, #7
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	021a      	lsls	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	609a      	str	r2, [r3, #8]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e05a      	b.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a21      	ldr	r2, [pc, #132]	@ (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d022      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c20:	d01d      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a1d      	ldr	r2, [pc, #116]	@ (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d018      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d013      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d00e      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a18      	ldr	r2, [pc, #96]	@ (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d009      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a17      	ldr	r2, [pc, #92]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d004      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a15      	ldr	r2, [pc, #84]	@ (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d10c      	bne.n	8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40000400 	.word	0x40000400
 8006ca0:	40000800 	.word	0x40000800
 8006ca4:	40000c00 	.word	0x40000c00
 8006ca8:	40010400 	.word	0x40010400
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	40001800 	.word	0x40001800

08006cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cdc:	b084      	sub	sp, #16
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	f107 001c 	add.w	r0, r7, #28
 8006cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d123      	bne.n	8006d3e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006d0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d105      	bne.n	8006d32 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fae8 	bl	8008308 <USB_CoreReset>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	e01b      	b.n	8006d76 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fadc 	bl	8008308 <USB_CoreReset>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d68:	e005      	b.n	8006d76 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d76:	7fbb      	ldrb	r3, [r7, #30]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d10b      	bne.n	8006d94 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f043 0206 	orr.w	r2, r3, #6
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f043 0220 	orr.w	r2, r3, #32
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006da0:	b004      	add	sp, #16
 8006da2:	4770      	bx	lr

08006da4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d165      	bne.n	8006e84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4a41      	ldr	r2, [pc, #260]	@ (8006ec0 <USB_SetTurnaroundTime+0x11c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d906      	bls.n	8006dce <USB_SetTurnaroundTime+0x2a>
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4a40      	ldr	r2, [pc, #256]	@ (8006ec4 <USB_SetTurnaroundTime+0x120>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d202      	bcs.n	8006dce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006dc8:	230f      	movs	r3, #15
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	e062      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	4a3c      	ldr	r2, [pc, #240]	@ (8006ec4 <USB_SetTurnaroundTime+0x120>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d306      	bcc.n	8006de4 <USB_SetTurnaroundTime+0x40>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8006ec8 <USB_SetTurnaroundTime+0x124>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d202      	bcs.n	8006de4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006dde:	230e      	movs	r3, #14
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e057      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4a38      	ldr	r2, [pc, #224]	@ (8006ec8 <USB_SetTurnaroundTime+0x124>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d306      	bcc.n	8006dfa <USB_SetTurnaroundTime+0x56>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4a37      	ldr	r2, [pc, #220]	@ (8006ecc <USB_SetTurnaroundTime+0x128>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d202      	bcs.n	8006dfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006df4:	230d      	movs	r3, #13
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	e04c      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4a33      	ldr	r2, [pc, #204]	@ (8006ecc <USB_SetTurnaroundTime+0x128>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d306      	bcc.n	8006e10 <USB_SetTurnaroundTime+0x6c>
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4a32      	ldr	r2, [pc, #200]	@ (8006ed0 <USB_SetTurnaroundTime+0x12c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d802      	bhi.n	8006e10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	e041      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4a2f      	ldr	r2, [pc, #188]	@ (8006ed0 <USB_SetTurnaroundTime+0x12c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d906      	bls.n	8006e26 <USB_SetTurnaroundTime+0x82>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8006ed4 <USB_SetTurnaroundTime+0x130>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d802      	bhi.n	8006e26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006e20:	230b      	movs	r3, #11
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	e036      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed4 <USB_SetTurnaroundTime+0x130>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d906      	bls.n	8006e3c <USB_SetTurnaroundTime+0x98>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4a29      	ldr	r2, [pc, #164]	@ (8006ed8 <USB_SetTurnaroundTime+0x134>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d802      	bhi.n	8006e3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006e36:	230a      	movs	r3, #10
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	e02b      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4a26      	ldr	r2, [pc, #152]	@ (8006ed8 <USB_SetTurnaroundTime+0x134>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d906      	bls.n	8006e52 <USB_SetTurnaroundTime+0xae>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4a25      	ldr	r2, [pc, #148]	@ (8006edc <USB_SetTurnaroundTime+0x138>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d202      	bcs.n	8006e52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006e4c:	2309      	movs	r3, #9
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	e020      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	4a21      	ldr	r2, [pc, #132]	@ (8006edc <USB_SetTurnaroundTime+0x138>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d306      	bcc.n	8006e68 <USB_SetTurnaroundTime+0xc4>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	4a20      	ldr	r2, [pc, #128]	@ (8006ee0 <USB_SetTurnaroundTime+0x13c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d802      	bhi.n	8006e68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006e62:	2308      	movs	r3, #8
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	e015      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee0 <USB_SetTurnaroundTime+0x13c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d906      	bls.n	8006e7e <USB_SetTurnaroundTime+0xda>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee4 <USB_SetTurnaroundTime+0x140>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d202      	bcs.n	8006e7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e78:	2307      	movs	r3, #7
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e00a      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e7e:	2306      	movs	r3, #6
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	e007      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d102      	bne.n	8006e90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e8a:	2309      	movs	r3, #9
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	e001      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e90:	2309      	movs	r3, #9
 8006e92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	029b      	lsls	r3, r3, #10
 8006ea8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006eac:	431a      	orrs	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	00d8acbf 	.word	0x00d8acbf
 8006ec4:	00e4e1c0 	.word	0x00e4e1c0
 8006ec8:	00f42400 	.word	0x00f42400
 8006ecc:	01067380 	.word	0x01067380
 8006ed0:	011a499f 	.word	0x011a499f
 8006ed4:	01312cff 	.word	0x01312cff
 8006ed8:	014ca43f 	.word	0x014ca43f
 8006edc:	016e3600 	.word	0x016e3600
 8006ee0:	01a6ab1f 	.word	0x01a6ab1f
 8006ee4:	01e84800 	.word	0x01e84800

08006ee8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f043 0201 	orr.w	r2, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f023 0201 	bic.w	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d115      	bne.n	8006f7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f5a:	200a      	movs	r0, #10
 8006f5c:	f7fb fd0e 	bl	800297c <HAL_Delay>
      ms += 10U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	330a      	adds	r3, #10
 8006f64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f93f 	bl	80081ea <USB_GetMode>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d01e      	beq.n	8006fb0 <USB_SetCurrentMode+0x84>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f76:	d9f0      	bls.n	8006f5a <USB_SetCurrentMode+0x2e>
 8006f78:	e01a      	b.n	8006fb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d115      	bne.n	8006fac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f8c:	200a      	movs	r0, #10
 8006f8e:	f7fb fcf5 	bl	800297c <HAL_Delay>
      ms += 10U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	330a      	adds	r3, #10
 8006f96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 f926 	bl	80081ea <USB_GetMode>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <USB_SetCurrentMode+0x84>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2bc7      	cmp	r3, #199	@ 0xc7
 8006fa8:	d9f0      	bls.n	8006f8c <USB_SetCurrentMode+0x60>
 8006faa:	e001      	b.n	8006fb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e005      	b.n	8006fbc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2bc8      	cmp	r3, #200	@ 0xc8
 8006fb4:	d101      	bne.n	8006fba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fde:	2300      	movs	r3, #0
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	e009      	b.n	8006ff8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3340      	adds	r3, #64	@ 0x40
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	613b      	str	r3, [r7, #16]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	2b0e      	cmp	r3, #14
 8006ffc:	d9f2      	bls.n	8006fe4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ffe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007002:	2b00      	cmp	r3, #0
 8007004:	d11c      	bne.n	8007040 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007014:	f043 0302 	orr.w	r3, r3, #2
 8007018:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007036:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	639a      	str	r2, [r3, #56]	@ 0x38
 800703e:	e00b      	b.n	8007058 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007044:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800705e:	461a      	mov	r2, r3
 8007060:	2300      	movs	r3, #0
 8007062:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007064:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007068:	2b01      	cmp	r3, #1
 800706a:	d10d      	bne.n	8007088 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800706c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007074:	2100      	movs	r1, #0
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f968 	bl	800734c <USB_SetDevSpeed>
 800707c:	e008      	b.n	8007090 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800707e:	2101      	movs	r1, #1
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f963 	bl	800734c <USB_SetDevSpeed>
 8007086:	e003      	b.n	8007090 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007088:	2103      	movs	r1, #3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f95e 	bl	800734c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007090:	2110      	movs	r1, #16
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f8fa 	bl	800728c <USB_FlushTxFifo>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f924 	bl	80072f0 <USB_FlushRxFifo>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b8:	461a      	mov	r2, r3
 80070ba:	2300      	movs	r3, #0
 80070bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c4:	461a      	mov	r2, r3
 80070c6:	2300      	movs	r3, #0
 80070c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d0:	461a      	mov	r2, r3
 80070d2:	2300      	movs	r3, #0
 80070d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070d6:	2300      	movs	r3, #0
 80070d8:	613b      	str	r3, [r7, #16]
 80070da:	e043      	b.n	8007164 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070f2:	d118      	bne.n	8007126 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10a      	bne.n	8007110 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007106:	461a      	mov	r2, r3
 8007108:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	e013      	b.n	8007138 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800711c:	461a      	mov	r2, r3
 800711e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	e008      	b.n	8007138 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007132:	461a      	mov	r2, r3
 8007134:	2300      	movs	r3, #0
 8007136:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007144:	461a      	mov	r2, r3
 8007146:	2300      	movs	r3, #0
 8007148:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007156:	461a      	mov	r2, r3
 8007158:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800715c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	3301      	adds	r3, #1
 8007162:	613b      	str	r3, [r7, #16]
 8007164:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007168:	461a      	mov	r2, r3
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	4293      	cmp	r3, r2
 800716e:	d3b5      	bcc.n	80070dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007170:	2300      	movs	r3, #0
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	e043      	b.n	80071fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007188:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800718c:	d118      	bne.n	80071c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a0:	461a      	mov	r2, r3
 80071a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	e013      	b.n	80071d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b6:	461a      	mov	r2, r3
 80071b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	e008      	b.n	80071d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071cc:	461a      	mov	r2, r3
 80071ce:	2300      	movs	r3, #0
 80071d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071de:	461a      	mov	r2, r3
 80071e0:	2300      	movs	r3, #0
 80071e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f0:	461a      	mov	r2, r3
 80071f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	3301      	adds	r3, #1
 80071fc:	613b      	str	r3, [r7, #16]
 80071fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007202:	461a      	mov	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4293      	cmp	r3, r2
 8007208:	d3b5      	bcc.n	8007176 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800721c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800722a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800722c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007230:	2b00      	cmp	r3, #0
 8007232:	d105      	bne.n	8007240 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f043 0210 	orr.w	r2, r3, #16
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	699a      	ldr	r2, [r3, #24]
 8007244:	4b10      	ldr	r3, [pc, #64]	@ (8007288 <USB_DevInit+0x2c4>)
 8007246:	4313      	orrs	r3, r2
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800724c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	f043 0208 	orr.w	r2, r3, #8
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007260:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007264:	2b01      	cmp	r3, #1
 8007266:	d107      	bne.n	8007278 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007270:	f043 0304 	orr.w	r3, r3, #4
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007278:	7dfb      	ldrb	r3, [r7, #23]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007284:	b004      	add	sp, #16
 8007286:	4770      	bx	lr
 8007288:	803c3800 	.word	0x803c3800

0800728c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3301      	adds	r3, #1
 800729e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072a6:	d901      	bls.n	80072ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e01b      	b.n	80072e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	daf2      	bge.n	800729a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	019b      	lsls	r3, r3, #6
 80072bc:	f043 0220 	orr.w	r2, r3, #32
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072d0:	d901      	bls.n	80072d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e006      	b.n	80072e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d0f0      	beq.n	80072c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3301      	adds	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007308:	d901      	bls.n	800730e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e018      	b.n	8007340 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	daf2      	bge.n	80072fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2210      	movs	r2, #16
 800731e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3301      	adds	r3, #1
 8007324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800732c:	d901      	bls.n	8007332 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e006      	b.n	8007340 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b10      	cmp	r3, #16
 800733c:	d0f0      	beq.n	8007320 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	68f9      	ldr	r1, [r7, #12]
 8007368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800736c:	4313      	orrs	r3, r2
 800736e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800737e:	b480      	push	{r7}
 8007380:	b087      	sub	sp, #28
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 0306 	and.w	r3, r3, #6
 8007396:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d102      	bne.n	80073a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800739e:	2300      	movs	r3, #0
 80073a0:	75fb      	strb	r3, [r7, #23]
 80073a2:	e00a      	b.n	80073ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d002      	beq.n	80073b0 <USB_GetDevSpeed+0x32>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b06      	cmp	r3, #6
 80073ae:	d102      	bne.n	80073b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80073b0:	2302      	movs	r3, #2
 80073b2:	75fb      	strb	r3, [r7, #23]
 80073b4:	e001      	b.n	80073ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80073b6:	230f      	movs	r3, #15
 80073b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d13a      	bne.n	800745a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	2101      	movs	r1, #1
 80073f6:	fa01 f303 	lsl.w	r3, r1, r3
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	68f9      	ldr	r1, [r7, #12]
 80073fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007402:	4313      	orrs	r3, r2
 8007404:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d155      	bne.n	80074c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	791b      	ldrb	r3, [r3, #4]
 8007436:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007438:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	059b      	lsls	r3, r3, #22
 800743e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007440:	4313      	orrs	r3, r2
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	0151      	lsls	r1, r2, #5
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	440a      	add	r2, r1
 800744a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800744e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	e036      	b.n	80074c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007460:	69da      	ldr	r2, [r3, #28]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	f003 030f 	and.w	r3, r3, #15
 800746a:	2101      	movs	r1, #1
 800746c:	fa01 f303 	lsl.w	r3, r1, r3
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007478:	4313      	orrs	r3, r2
 800747a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d11a      	bne.n	80074c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	791b      	ldrb	r3, [r3, #4]
 80074ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80074ae:	430b      	orrs	r3, r1
 80074b0:	4313      	orrs	r3, r2
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	0151      	lsls	r1, r2, #5
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	440a      	add	r2, r1
 80074ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
	...

080074d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d161      	bne.n	80075b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800750a:	d11f      	bne.n	800754c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	0151      	lsls	r1, r2, #5
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	440a      	add	r2, r1
 8007522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007526:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800752a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	440a      	add	r2, r1
 8007542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007546:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800754a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	f003 030f 	and.w	r3, r3, #15
 800755c:	2101      	movs	r1, #1
 800755e:	fa01 f303 	lsl.w	r3, r1, r3
 8007562:	b29b      	uxth	r3, r3
 8007564:	43db      	mvns	r3, r3
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800756c:	4013      	ands	r3, r2
 800756e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007576:	69da      	ldr	r2, [r3, #28]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	2101      	movs	r1, #1
 8007582:	fa01 f303 	lsl.w	r3, r1, r3
 8007586:	b29b      	uxth	r3, r3
 8007588:	43db      	mvns	r3, r3
 800758a:	68f9      	ldr	r1, [r7, #12]
 800758c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007590:	4013      	ands	r3, r2
 8007592:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	0159      	lsls	r1, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	440b      	add	r3, r1
 80075aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ae:	4619      	mov	r1, r3
 80075b0:	4b35      	ldr	r3, [pc, #212]	@ (8007688 <USB_DeactivateEndpoint+0x1b0>)
 80075b2:	4013      	ands	r3, r2
 80075b4:	600b      	str	r3, [r1, #0]
 80075b6:	e060      	b.n	800767a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075ce:	d11f      	bne.n	8007610 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	440a      	add	r2, r1
 8007606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800760a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800760e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 030f 	and.w	r3, r3, #15
 8007620:	2101      	movs	r1, #1
 8007622:	fa01 f303 	lsl.w	r3, r1, r3
 8007626:	041b      	lsls	r3, r3, #16
 8007628:	43db      	mvns	r3, r3
 800762a:	68f9      	ldr	r1, [r7, #12]
 800762c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007630:	4013      	ands	r3, r2
 8007632:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800763a:	69da      	ldr	r2, [r3, #28]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	2101      	movs	r1, #1
 8007646:	fa01 f303 	lsl.w	r3, r1, r3
 800764a:	041b      	lsls	r3, r3, #16
 800764c:	43db      	mvns	r3, r3
 800764e:	68f9      	ldr	r1, [r7, #12]
 8007650:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007654:	4013      	ands	r3, r2
 8007656:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	0159      	lsls	r1, r3, #5
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	440b      	add	r3, r1
 800766e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007672:	4619      	mov	r1, r3
 8007674:	4b05      	ldr	r3, [pc, #20]	@ (800768c <USB_DeactivateEndpoint+0x1b4>)
 8007676:	4013      	ands	r3, r2
 8007678:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	ec337800 	.word	0xec337800
 800768c:	eff37800 	.word	0xeff37800

08007690 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08a      	sub	sp, #40	@ 0x28
 8007694:	af02      	add	r7, sp, #8
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	4613      	mov	r3, r2
 800769c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	f040 817f 	bne.w	80079b0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d132      	bne.n	8007720 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	0151      	lsls	r1, r2, #5
 80076cc:	69fa      	ldr	r2, [r7, #28]
 80076ce:	440a      	add	r2, r1
 80076d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80076d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80076dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007718:	0cdb      	lsrs	r3, r3, #19
 800771a:	04db      	lsls	r3, r3, #19
 800771c:	6113      	str	r3, [r2, #16]
 800771e:	e097      	b.n	8007850 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	440a      	add	r2, r1
 8007736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800773a:	0cdb      	lsrs	r3, r3, #19
 800773c:	04db      	lsls	r3, r3, #19
 800773e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800775a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800775e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007762:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d11a      	bne.n	80077a0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	691a      	ldr	r2, [r3, #16]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	d903      	bls.n	800777e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	0151      	lsls	r1, r2, #5
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	440a      	add	r2, r1
 8007794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007798:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800779c:	6113      	str	r3, [r2, #16]
 800779e:	e044      	b.n	800782a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	4413      	add	r3, r2
 80077aa:	1e5a      	subs	r2, r3, #1
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	8afb      	ldrh	r3, [r7, #22]
 80077c6:	04d9      	lsls	r1, r3, #19
 80077c8:	4ba4      	ldr	r3, [pc, #656]	@ (8007a5c <USB_EPStartXfer+0x3cc>)
 80077ca:	400b      	ands	r3, r1
 80077cc:	69b9      	ldr	r1, [r7, #24]
 80077ce:	0148      	lsls	r0, r1, #5
 80077d0:	69f9      	ldr	r1, [r7, #28]
 80077d2:	4401      	add	r1, r0
 80077d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80077d8:	4313      	orrs	r3, r2
 80077da:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	791b      	ldrb	r3, [r3, #4]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d122      	bne.n	800782a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077fe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007802:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	8afb      	ldrh	r3, [r7, #22]
 8007814:	075b      	lsls	r3, r3, #29
 8007816:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800781a:	69b9      	ldr	r1, [r7, #24]
 800781c:	0148      	lsls	r0, r1, #5
 800781e:	69f9      	ldr	r1, [r7, #28]
 8007820:	4401      	add	r1, r0
 8007822:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007826:	4313      	orrs	r3, r2
 8007828:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007840:	69b9      	ldr	r1, [r7, #24]
 8007842:	0148      	lsls	r0, r1, #5
 8007844:	69f9      	ldr	r1, [r7, #28]
 8007846:	4401      	add	r1, r0
 8007848:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800784c:	4313      	orrs	r3, r2
 800784e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d14b      	bne.n	80078ee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d009      	beq.n	8007872 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786a:	461a      	mov	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	791b      	ldrb	r3, [r3, #4]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d128      	bne.n	80078cc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007886:	2b00      	cmp	r3, #0
 8007888:	d110      	bne.n	80078ac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	69fa      	ldr	r2, [r7, #28]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	e00f      	b.n	80078cc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078ca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	e166      	b.n	8007bbc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	0151      	lsls	r1, r2, #5
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	440a      	add	r2, r1
 8007904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007908:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800790c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	791b      	ldrb	r3, [r3, #4]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d015      	beq.n	8007942 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 814e 	beq.w	8007bbc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	2101      	movs	r1, #1
 8007932:	fa01 f303 	lsl.w	r3, r1, r3
 8007936:	69f9      	ldr	r1, [r7, #28]
 8007938:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800793c:	4313      	orrs	r3, r2
 800793e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007940:	e13c      	b.n	8007bbc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800794e:	2b00      	cmp	r3, #0
 8007950:	d110      	bne.n	8007974 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	440a      	add	r2, r1
 8007968:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800796c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	e00f      	b.n	8007994 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800798e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007992:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	68d9      	ldr	r1, [r3, #12]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	781a      	ldrb	r2, [r3, #0]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	b298      	uxth	r0, r3
 80079a2:	79fb      	ldrb	r3, [r7, #7]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	4603      	mov	r3, r0
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f9b9 	bl	8007d20 <USB_WritePacket>
 80079ae:	e105      	b.n	8007bbc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	0151      	lsls	r1, r2, #5
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	440a      	add	r2, r1
 80079c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079ca:	0cdb      	lsrs	r3, r3, #19
 80079cc:	04db      	lsls	r3, r3, #19
 80079ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	0151      	lsls	r1, r2, #5
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	440a      	add	r2, r1
 80079e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80079f2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d132      	bne.n	8007a60 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	689a      	ldr	r2, [r3, #8]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1e:	691a      	ldr	r2, [r3, #16]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a28:	69b9      	ldr	r1, [r7, #24]
 8007a2a:	0148      	lsls	r0, r1, #5
 8007a2c:	69f9      	ldr	r1, [r7, #28]
 8007a2e:	4401      	add	r1, r0
 8007a30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a34:	4313      	orrs	r3, r2
 8007a36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a56:	6113      	str	r3, [r2, #16]
 8007a58:	e062      	b.n	8007b20 <USB_EPStartXfer+0x490>
 8007a5a:	bf00      	nop
 8007a5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d123      	bne.n	8007ab0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a7e:	69b9      	ldr	r1, [r7, #24]
 8007a80:	0148      	lsls	r0, r1, #5
 8007a82:	69f9      	ldr	r1, [r7, #28]
 8007a84:	4401      	add	r1, r0
 8007a86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007aac:	6113      	str	r3, [r2, #16]
 8007aae:	e037      	b.n	8007b20 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	4413      	add	r3, r2
 8007aba:	1e5a      	subs	r2, r3, #1
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	8afa      	ldrh	r2, [r7, #22]
 8007acc:	fb03 f202 	mul.w	r2, r3, r2
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	8afb      	ldrh	r3, [r7, #22]
 8007ae4:	04d9      	lsls	r1, r3, #19
 8007ae6:	4b38      	ldr	r3, [pc, #224]	@ (8007bc8 <USB_EPStartXfer+0x538>)
 8007ae8:	400b      	ands	r3, r1
 8007aea:	69b9      	ldr	r1, [r7, #24]
 8007aec:	0148      	lsls	r0, r1, #5
 8007aee:	69f9      	ldr	r1, [r7, #28]
 8007af0:	4401      	add	r1, r0
 8007af2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007af6:	4313      	orrs	r3, r2
 8007af8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b10:	69b9      	ldr	r1, [r7, #24]
 8007b12:	0148      	lsls	r0, r1, #5
 8007b14:	69f9      	ldr	r1, [r7, #28]
 8007b16:	4401      	add	r1, r0
 8007b18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d10d      	bne.n	8007b42 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d009      	beq.n	8007b42 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	68d9      	ldr	r1, [r3, #12]
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b3e:	460a      	mov	r2, r1
 8007b40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	791b      	ldrb	r3, [r3, #4]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d128      	bne.n	8007b9c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d110      	bne.n	8007b7c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	69fa      	ldr	r2, [r7, #28]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	e00f      	b.n	8007b9c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	0151      	lsls	r1, r2, #5
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	440a      	add	r2, r1
 8007bb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007bba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3720      	adds	r7, #32
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	1ff80000 	.word	0x1ff80000

08007bcc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d14a      	bne.n	8007c80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c02:	f040 8086 	bne.w	8007d12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	7812      	ldrb	r2, [r2, #0]
 8007c1a:	0151      	lsls	r1, r2, #5
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	440a      	add	r2, r1
 8007c20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	7812      	ldrb	r2, [r2, #0]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3301      	adds	r3, #1
 8007c52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d902      	bls.n	8007c64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	75fb      	strb	r3, [r7, #23]
          break;
 8007c62:	e056      	b.n	8007d12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c7c:	d0e7      	beq.n	8007c4e <USB_EPStopXfer+0x82>
 8007c7e:	e048      	b.n	8007d12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c98:	d13b      	bne.n	8007d12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	7812      	ldrb	r2, [r2, #0]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007cbc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	7812      	ldrb	r2, [r2, #0]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d902      	bls.n	8007cf8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8007cf6:	e00c      	b.n	8007d12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d10:	d0e7      	beq.n	8007ce2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b089      	sub	sp, #36	@ 0x24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	460b      	mov	r3, r1
 8007d30:	71fb      	strb	r3, [r7, #7]
 8007d32:	4613      	mov	r3, r2
 8007d34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d123      	bne.n	8007d8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d46:	88bb      	ldrh	r3, [r7, #4]
 8007d48:	3303      	adds	r3, #3
 8007d4a:	089b      	lsrs	r3, r3, #2
 8007d4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	e018      	b.n	8007d86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	031a      	lsls	r2, r3, #12
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d60:	461a      	mov	r2, r3
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	3301      	adds	r3, #1
 8007d72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	3301      	adds	r3, #1
 8007d78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	3301      	adds	r3, #1
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d3e2      	bcc.n	8007d54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3724      	adds	r7, #36	@ 0x24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b08b      	sub	sp, #44	@ 0x2c
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	4613      	mov	r3, r2
 8007da8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007db2:	88fb      	ldrh	r3, [r7, #6]
 8007db4:	089b      	lsrs	r3, r3, #2
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	f003 0303 	and.w	r3, r3, #3
 8007dc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	623b      	str	r3, [r7, #32]
 8007dc6:	e014      	b.n	8007df2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	3301      	adds	r3, #1
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	3301      	adds	r3, #1
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	3301      	adds	r3, #1
 8007dea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	3301      	adds	r3, #1
 8007df0:	623b      	str	r3, [r7, #32]
 8007df2:	6a3a      	ldr	r2, [r7, #32]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d3e6      	bcc.n	8007dc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007dfa:	8bfb      	ldrh	r3, [r7, #30]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01e      	beq.n	8007e3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f107 0310 	add.w	r3, r7, #16
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e24:	701a      	strb	r2, [r3, #0]
      i++;
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	3301      	adds	r3, #1
 8007e30:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007e32:	8bfb      	ldrh	r3, [r7, #30]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e38:	8bfb      	ldrh	r3, [r7, #30]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1ea      	bne.n	8007e14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	372c      	adds	r7, #44	@ 0x2c
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	785b      	ldrb	r3, [r3, #1]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d12c      	bne.n	8007ec2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	db12      	blt.n	8007ea0 <USB_EPSetStall+0x54>
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00f      	beq.n	8007ea0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	0151      	lsls	r1, r2, #5
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	440a      	add	r2, r1
 8007e96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	e02b      	b.n	8007f1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	db12      	blt.n	8007efa <USB_EPSetStall+0xae>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00f      	beq.n	8007efa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	0151      	lsls	r1, r2, #5
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	440a      	add	r2, r1
 8007ef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ef4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ef8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	0151      	lsls	r1, r2, #5
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	440a      	add	r2, r1
 8007f10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	785b      	ldrb	r3, [r3, #1]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d128      	bne.n	8007f96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	0151      	lsls	r1, r2, #5
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	440a      	add	r2, r1
 8007f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	791b      	ldrb	r3, [r3, #4]
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d003      	beq.n	8007f74 <USB_EPClearStall+0x4c>
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	791b      	ldrb	r3, [r3, #4]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d138      	bne.n	8007fe6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	0151      	lsls	r1, r2, #5
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	440a      	add	r2, r1
 8007f8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f92:	6013      	str	r3, [r2, #0]
 8007f94:	e027      	b.n	8007fe6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	0151      	lsls	r1, r2, #5
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	440a      	add	r2, r1
 8007fac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fb0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007fb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	791b      	ldrb	r3, [r3, #4]
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d003      	beq.n	8007fc6 <USB_EPClearStall+0x9e>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	791b      	ldrb	r3, [r3, #4]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d10f      	bne.n	8007fe6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fe4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008012:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008016:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	011b      	lsls	r3, r3, #4
 8008024:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008028:	68f9      	ldr	r1, [r7, #12]
 800802a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800802e:	4313      	orrs	r3, r2
 8008030:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800806e:	f023 0302 	bic.w	r3, r3, #2
 8008072:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008082:	b480      	push	{r7}
 8008084:	b085      	sub	sp, #20
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800809c:	f023 0303 	bic.w	r3, r3, #3
 80080a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080b0:	f043 0302 	orr.w	r3, r3, #2
 80080b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4013      	ands	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080dc:	68fb      	ldr	r3, [r7, #12]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	4013      	ands	r3, r2
 800810c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	0c1b      	lsrs	r3, r3, #16
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	4013      	ands	r3, r2
 8008140:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	b29b      	uxth	r3, r3
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008162:	78fb      	ldrb	r3, [r7, #3]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	4013      	ands	r3, r2
 800817e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008180:	68bb      	ldr	r3, [r7, #8]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800818e:	b480      	push	{r7}
 8008190:	b087      	sub	sp, #28
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80081b2:	78fb      	ldrb	r3, [r7, #3]
 80081b4:	f003 030f 	and.w	r3, r3, #15
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	fa22 f303 	lsr.w	r3, r2, r3
 80081be:	01db      	lsls	r3, r3, #7
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	4013      	ands	r3, r2
 80081da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081dc:	68bb      	ldr	r3, [r7, #8]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	f003 0301 	and.w	r3, r3, #1
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008206:	b480      	push	{r7}
 8008208:	b085      	sub	sp, #20
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008220:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008224:	f023 0307 	bic.w	r3, r3, #7
 8008228:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800823c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	460b      	mov	r3, r1
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	333c      	adds	r3, #60	@ 0x3c
 8008262:	3304      	adds	r3, #4
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	4a26      	ldr	r2, [pc, #152]	@ (8008304 <USB_EP0_OutStart+0xb8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d90a      	bls.n	8008286 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800827c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008280:	d101      	bne.n	8008286 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e037      	b.n	80082f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800828c:	461a      	mov	r2, r3
 800828e:	2300      	movs	r3, #0
 8008290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082b4:	f043 0318 	orr.w	r3, r3, #24
 80082b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80082cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80082ce:	7afb      	ldrb	r3, [r7, #11]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d10f      	bne.n	80082f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082da:	461a      	mov	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80082f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	4f54300a 	.word	0x4f54300a

08008308 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3301      	adds	r3, #1
 8008318:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008320:	d901      	bls.n	8008326 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e01b      	b.n	800835e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	daf2      	bge.n	8008314 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f043 0201 	orr.w	r2, r3, #1
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3301      	adds	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800834a:	d901      	bls.n	8008350 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e006      	b.n	800835e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b01      	cmp	r3, #1
 800835a:	d0f0      	beq.n	800833e <USB_CoreReset+0x36>

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008378:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800837c:	f002 fc9e 	bl	800acbc <USBD_static_malloc>
 8008380:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	32b0      	adds	r2, #176	@ 0xb0
 8008392:	2100      	movs	r1, #0
 8008394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008398:	2302      	movs	r3, #2
 800839a:	e0d4      	b.n	8008546 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800839c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80083a0:	2100      	movs	r1, #0
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f003 fa4b 	bl	800b83e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	32b0      	adds	r2, #176	@ 0xb0
 80083b2:	68f9      	ldr	r1, [r7, #12]
 80083b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	32b0      	adds	r2, #176	@ 0xb0
 80083c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	7c1b      	ldrb	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d138      	bne.n	8008446 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80083d4:	4b5e      	ldr	r3, [pc, #376]	@ (8008550 <USBD_CDC_Init+0x1e4>)
 80083d6:	7819      	ldrb	r1, [r3, #0]
 80083d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083dc:	2202      	movs	r2, #2
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f002 fb49 	bl	800aa76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083e4:	4b5a      	ldr	r3, [pc, #360]	@ (8008550 <USBD_CDC_Init+0x1e4>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	f003 020f 	and.w	r2, r3, #15
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	3324      	adds	r3, #36	@ 0x24
 80083fa:	2201      	movs	r2, #1
 80083fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083fe:	4b55      	ldr	r3, [pc, #340]	@ (8008554 <USBD_CDC_Init+0x1e8>)
 8008400:	7819      	ldrb	r1, [r3, #0]
 8008402:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008406:	2202      	movs	r2, #2
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f002 fb34 	bl	800aa76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800840e:	4b51      	ldr	r3, [pc, #324]	@ (8008554 <USBD_CDC_Init+0x1e8>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	f003 020f 	and.w	r2, r3, #15
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	440b      	add	r3, r1
 8008422:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008426:	2201      	movs	r2, #1
 8008428:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800842a:	4b4b      	ldr	r3, [pc, #300]	@ (8008558 <USBD_CDC_Init+0x1ec>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	f003 020f 	and.w	r2, r3, #15
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	3326      	adds	r3, #38	@ 0x26
 8008440:	2210      	movs	r2, #16
 8008442:	801a      	strh	r2, [r3, #0]
 8008444:	e035      	b.n	80084b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008446:	4b42      	ldr	r3, [pc, #264]	@ (8008550 <USBD_CDC_Init+0x1e4>)
 8008448:	7819      	ldrb	r1, [r3, #0]
 800844a:	2340      	movs	r3, #64	@ 0x40
 800844c:	2202      	movs	r2, #2
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f002 fb11 	bl	800aa76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008454:	4b3e      	ldr	r3, [pc, #248]	@ (8008550 <USBD_CDC_Init+0x1e4>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	f003 020f 	and.w	r2, r3, #15
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	440b      	add	r3, r1
 8008468:	3324      	adds	r3, #36	@ 0x24
 800846a:	2201      	movs	r2, #1
 800846c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800846e:	4b39      	ldr	r3, [pc, #228]	@ (8008554 <USBD_CDC_Init+0x1e8>)
 8008470:	7819      	ldrb	r1, [r3, #0]
 8008472:	2340      	movs	r3, #64	@ 0x40
 8008474:	2202      	movs	r2, #2
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f002 fafd 	bl	800aa76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800847c:	4b35      	ldr	r3, [pc, #212]	@ (8008554 <USBD_CDC_Init+0x1e8>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	f003 020f 	and.w	r2, r3, #15
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	440b      	add	r3, r1
 8008490:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008494:	2201      	movs	r2, #1
 8008496:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008498:	4b2f      	ldr	r3, [pc, #188]	@ (8008558 <USBD_CDC_Init+0x1ec>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f003 020f 	and.w	r2, r3, #15
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	440b      	add	r3, r1
 80084ac:	3326      	adds	r3, #38	@ 0x26
 80084ae:	2210      	movs	r2, #16
 80084b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80084b2:	4b29      	ldr	r3, [pc, #164]	@ (8008558 <USBD_CDC_Init+0x1ec>)
 80084b4:	7819      	ldrb	r1, [r3, #0]
 80084b6:	2308      	movs	r3, #8
 80084b8:	2203      	movs	r2, #3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f002 fadb 	bl	800aa76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80084c0:	4b25      	ldr	r3, [pc, #148]	@ (8008558 <USBD_CDC_Init+0x1ec>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	f003 020f 	and.w	r2, r3, #15
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	440b      	add	r3, r1
 80084d4:	3324      	adds	r3, #36	@ 0x24
 80084d6:	2201      	movs	r2, #1
 80084d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	33b0      	adds	r3, #176	@ 0xb0
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008510:	2302      	movs	r3, #2
 8008512:	e018      	b.n	8008546 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	7c1b      	ldrb	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800851c:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <USBD_CDC_Init+0x1e8>)
 800851e:	7819      	ldrb	r1, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008526:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f002 fb92 	bl	800ac54 <USBD_LL_PrepareReceive>
 8008530:	e008      	b.n	8008544 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008532:	4b08      	ldr	r3, [pc, #32]	@ (8008554 <USBD_CDC_Init+0x1e8>)
 8008534:	7819      	ldrb	r1, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800853c:	2340      	movs	r3, #64	@ 0x40
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f002 fb88 	bl	800ac54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	200000a3 	.word	0x200000a3
 8008554:	200000a4 	.word	0x200000a4
 8008558:	200000a5 	.word	0x200000a5

0800855c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008568:	4b3a      	ldr	r3, [pc, #232]	@ (8008654 <USBD_CDC_DeInit+0xf8>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f002 faa7 	bl	800aac2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008574:	4b37      	ldr	r3, [pc, #220]	@ (8008654 <USBD_CDC_DeInit+0xf8>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	f003 020f 	and.w	r2, r3, #15
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4613      	mov	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	440b      	add	r3, r1
 8008588:	3324      	adds	r3, #36	@ 0x24
 800858a:	2200      	movs	r2, #0
 800858c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800858e:	4b32      	ldr	r3, [pc, #200]	@ (8008658 <USBD_CDC_DeInit+0xfc>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f002 fa94 	bl	800aac2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800859a:	4b2f      	ldr	r3, [pc, #188]	@ (8008658 <USBD_CDC_DeInit+0xfc>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f003 020f 	and.w	r2, r3, #15
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	4613      	mov	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	440b      	add	r3, r1
 80085ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085b2:	2200      	movs	r2, #0
 80085b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80085b6:	4b29      	ldr	r3, [pc, #164]	@ (800865c <USBD_CDC_DeInit+0x100>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f002 fa80 	bl	800aac2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80085c2:	4b26      	ldr	r3, [pc, #152]	@ (800865c <USBD_CDC_DeInit+0x100>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	f003 020f 	and.w	r2, r3, #15
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	440b      	add	r3, r1
 80085d6:	3324      	adds	r3, #36	@ 0x24
 80085d8:	2200      	movs	r2, #0
 80085da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80085dc:	4b1f      	ldr	r3, [pc, #124]	@ (800865c <USBD_CDC_DeInit+0x100>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	f003 020f 	and.w	r2, r3, #15
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	3326      	adds	r3, #38	@ 0x26
 80085f2:	2200      	movs	r2, #0
 80085f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	32b0      	adds	r2, #176	@ 0xb0
 8008600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d01f      	beq.n	8008648 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	33b0      	adds	r3, #176	@ 0xb0
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	32b0      	adds	r2, #176	@ 0xb0
 8008626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862a:	4618      	mov	r0, r3
 800862c:	f002 fb54 	bl	800acd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	32b0      	adds	r2, #176	@ 0xb0
 800863a:	2100      	movs	r1, #0
 800863c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	200000a3 	.word	0x200000a3
 8008658:	200000a4 	.word	0x200000a4
 800865c:	200000a5 	.word	0x200000a5

08008660 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	32b0      	adds	r2, #176	@ 0xb0
 8008674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008678:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800868c:	2303      	movs	r3, #3
 800868e:	e0bf      	b.n	8008810 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008698:	2b00      	cmp	r3, #0
 800869a:	d050      	beq.n	800873e <USBD_CDC_Setup+0xde>
 800869c:	2b20      	cmp	r3, #32
 800869e:	f040 80af 	bne.w	8008800 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	88db      	ldrh	r3, [r3, #6]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d03a      	beq.n	8008720 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	b25b      	sxtb	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da1b      	bge.n	80086ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	33b0      	adds	r3, #176	@ 0xb0
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80086ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	88d2      	ldrh	r2, [r2, #6]
 80086d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	88db      	ldrh	r3, [r3, #6]
 80086d6:	2b07      	cmp	r3, #7
 80086d8:	bf28      	it	cs
 80086da:	2307      	movcs	r3, #7
 80086dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	89fa      	ldrh	r2, [r7, #14]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fd93 	bl	800a210 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80086ea:	e090      	b.n	800880e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	785a      	ldrb	r2, [r3, #1]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	88db      	ldrh	r3, [r3, #6]
 80086fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80086fc:	d803      	bhi.n	8008706 <USBD_CDC_Setup+0xa6>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	88db      	ldrh	r3, [r3, #6]
 8008702:	b2da      	uxtb	r2, r3
 8008704:	e000      	b.n	8008708 <USBD_CDC_Setup+0xa8>
 8008706:	2240      	movs	r2, #64	@ 0x40
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800870e:	6939      	ldr	r1, [r7, #16]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008716:	461a      	mov	r2, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f001 fda5 	bl	800a268 <USBD_CtlPrepareRx>
      break;
 800871e:	e076      	b.n	800880e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	33b0      	adds	r3, #176	@ 0xb0
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	7850      	ldrb	r0, [r2, #1]
 8008736:	2200      	movs	r2, #0
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	4798      	blx	r3
      break;
 800873c:	e067      	b.n	800880e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b0b      	cmp	r3, #11
 8008744:	d851      	bhi.n	80087ea <USBD_CDC_Setup+0x18a>
 8008746:	a201      	add	r2, pc, #4	@ (adr r2, 800874c <USBD_CDC_Setup+0xec>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	0800877d 	.word	0x0800877d
 8008750:	080087f9 	.word	0x080087f9
 8008754:	080087eb 	.word	0x080087eb
 8008758:	080087eb 	.word	0x080087eb
 800875c:	080087eb 	.word	0x080087eb
 8008760:	080087eb 	.word	0x080087eb
 8008764:	080087eb 	.word	0x080087eb
 8008768:	080087eb 	.word	0x080087eb
 800876c:	080087eb 	.word	0x080087eb
 8008770:	080087eb 	.word	0x080087eb
 8008774:	080087a7 	.word	0x080087a7
 8008778:	080087d1 	.word	0x080087d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b03      	cmp	r3, #3
 8008786:	d107      	bne.n	8008798 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008788:	f107 030a 	add.w	r3, r7, #10
 800878c:	2202      	movs	r2, #2
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 fd3d 	bl	800a210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008796:	e032      	b.n	80087fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 fcbb 	bl	800a116 <USBD_CtlError>
            ret = USBD_FAIL;
 80087a0:	2303      	movs	r3, #3
 80087a2:	75fb      	strb	r3, [r7, #23]
          break;
 80087a4:	e02b      	b.n	80087fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d107      	bne.n	80087c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80087b2:	f107 030d 	add.w	r3, r7, #13
 80087b6:	2201      	movs	r2, #1
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fd28 	bl	800a210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087c0:	e01d      	b.n	80087fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 fca6 	bl	800a116 <USBD_CtlError>
            ret = USBD_FAIL;
 80087ca:	2303      	movs	r3, #3
 80087cc:	75fb      	strb	r3, [r7, #23]
          break;
 80087ce:	e016      	b.n	80087fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d00f      	beq.n	80087fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 fc99 	bl	800a116 <USBD_CtlError>
            ret = USBD_FAIL;
 80087e4:	2303      	movs	r3, #3
 80087e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80087e8:	e008      	b.n	80087fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 fc92 	bl	800a116 <USBD_CtlError>
          ret = USBD_FAIL;
 80087f2:	2303      	movs	r3, #3
 80087f4:	75fb      	strb	r3, [r7, #23]
          break;
 80087f6:	e002      	b.n	80087fe <USBD_CDC_Setup+0x19e>
          break;
 80087f8:	bf00      	nop
 80087fa:	e008      	b.n	800880e <USBD_CDC_Setup+0x1ae>
          break;
 80087fc:	bf00      	nop
      }
      break;
 80087fe:	e006      	b.n	800880e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f001 fc87 	bl	800a116 <USBD_CtlError>
      ret = USBD_FAIL;
 8008808:	2303      	movs	r3, #3
 800880a:	75fb      	strb	r3, [r7, #23]
      break;
 800880c:	bf00      	nop
  }

  return (uint8_t)ret;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800882a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	32b0      	adds	r2, #176	@ 0xb0
 8008836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800883e:	2303      	movs	r3, #3
 8008840:	e065      	b.n	800890e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	32b0      	adds	r2, #176	@ 0xb0
 800884c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008850:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	f003 020f 	and.w	r2, r3, #15
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	3318      	adds	r3, #24
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d02f      	beq.n	80088cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	f003 020f 	and.w	r2, r3, #15
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	4613      	mov	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	3318      	adds	r3, #24
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	f003 010f 	and.w	r1, r3, #15
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	460b      	mov	r3, r1
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	440b      	add	r3, r1
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4403      	add	r3, r0
 8008894:	331c      	adds	r3, #28
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	fbb2 f1f3 	udiv	r1, r2, r3
 800889c:	fb01 f303 	mul.w	r3, r1, r3
 80088a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d112      	bne.n	80088cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	f003 020f 	and.w	r2, r3, #15
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	440b      	add	r3, r1
 80088b8:	3318      	adds	r3, #24
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088be:	78f9      	ldrb	r1, [r7, #3]
 80088c0:	2300      	movs	r3, #0
 80088c2:	2200      	movs	r2, #0
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f002 f9a4 	bl	800ac12 <USBD_LL_Transmit>
 80088ca:	e01f      	b.n	800890c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	33b0      	adds	r3, #176	@ 0xb0
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d010      	beq.n	800890c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	33b0      	adds	r3, #176	@ 0xb0
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008908:	78fa      	ldrb	r2, [r7, #3]
 800890a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	32b0      	adds	r2, #176	@ 0xb0
 800892c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008930:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	32b0      	adds	r2, #176	@ 0xb0
 800893c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008944:	2303      	movs	r3, #3
 8008946:	e01a      	b.n	800897e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008948:	78fb      	ldrb	r3, [r7, #3]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f002 f9a2 	bl	800ac96 <USBD_LL_GetRxDataSize>
 8008952:	4602      	mov	r2, r0
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	33b0      	adds	r3, #176	@ 0xb0
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008978:	4611      	mov	r1, r2
 800897a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	32b0      	adds	r2, #176	@ 0xb0
 8008998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e024      	b.n	80089f2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	33b0      	adds	r3, #176	@ 0xb0
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d019      	beq.n	80089f0 <USBD_CDC_EP0_RxReady+0x6a>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80089c2:	2bff      	cmp	r3, #255	@ 0xff
 80089c4:	d014      	beq.n	80089f0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	33b0      	adds	r3, #176	@ 0xb0
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80089de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80089e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	22ff      	movs	r2, #255	@ 0xff
 80089ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a04:	2182      	movs	r1, #130	@ 0x82
 8008a06:	4818      	ldr	r0, [pc, #96]	@ (8008a68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008a08:	f000 fd4f 	bl	80094aa <USBD_GetEpDesc>
 8008a0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a0e:	2101      	movs	r1, #1
 8008a10:	4815      	ldr	r0, [pc, #84]	@ (8008a68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008a12:	f000 fd4a 	bl	80094aa <USBD_GetEpDesc>
 8008a16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a18:	2181      	movs	r1, #129	@ 0x81
 8008a1a:	4813      	ldr	r0, [pc, #76]	@ (8008a68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008a1c:	f000 fd45 	bl	80094aa <USBD_GetEpDesc>
 8008a20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2210      	movs	r2, #16
 8008a2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d006      	beq.n	8008a42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a3c:	711a      	strb	r2, [r3, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d006      	beq.n	8008a56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a50:	711a      	strb	r2, [r3, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2243      	movs	r2, #67	@ 0x43
 8008a5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a5c:	4b02      	ldr	r3, [pc, #8]	@ (8008a68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000060 	.word	0x20000060

08008a6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a74:	2182      	movs	r1, #130	@ 0x82
 8008a76:	4818      	ldr	r0, [pc, #96]	@ (8008ad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a78:	f000 fd17 	bl	80094aa <USBD_GetEpDesc>
 8008a7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a7e:	2101      	movs	r1, #1
 8008a80:	4815      	ldr	r0, [pc, #84]	@ (8008ad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a82:	f000 fd12 	bl	80094aa <USBD_GetEpDesc>
 8008a86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a88:	2181      	movs	r1, #129	@ 0x81
 8008a8a:	4813      	ldr	r0, [pc, #76]	@ (8008ad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a8c:	f000 fd0d 	bl	80094aa <USBD_GetEpDesc>
 8008a90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2210      	movs	r2, #16
 8008a9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d006      	beq.n	8008ab2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	711a      	strb	r2, [r3, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f042 0202 	orr.w	r2, r2, #2
 8008ab0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d006      	beq.n	8008ac6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	711a      	strb	r2, [r3, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f042 0202 	orr.w	r2, r2, #2
 8008ac4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2243      	movs	r2, #67	@ 0x43
 8008aca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008acc:	4b02      	ldr	r3, [pc, #8]	@ (8008ad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000060 	.word	0x20000060

08008adc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ae4:	2182      	movs	r1, #130	@ 0x82
 8008ae6:	4818      	ldr	r0, [pc, #96]	@ (8008b48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ae8:	f000 fcdf 	bl	80094aa <USBD_GetEpDesc>
 8008aec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008aee:	2101      	movs	r1, #1
 8008af0:	4815      	ldr	r0, [pc, #84]	@ (8008b48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008af2:	f000 fcda 	bl	80094aa <USBD_GetEpDesc>
 8008af6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008af8:	2181      	movs	r1, #129	@ 0x81
 8008afa:	4813      	ldr	r0, [pc, #76]	@ (8008b48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008afc:	f000 fcd5 	bl	80094aa <USBD_GetEpDesc>
 8008b00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2210      	movs	r2, #16
 8008b0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d006      	beq.n	8008b22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b1c:	711a      	strb	r2, [r3, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d006      	beq.n	8008b36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b30:	711a      	strb	r2, [r3, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2243      	movs	r2, #67	@ 0x43
 8008b3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b3c:	4b02      	ldr	r3, [pc, #8]	@ (8008b48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000060 	.word	0x20000060

08008b4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	220a      	movs	r2, #10
 8008b58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008b5a:	4b03      	ldr	r3, [pc, #12]	@ (8008b68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	2000001c 	.word	0x2000001c

08008b6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e009      	b.n	8008b94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	33b0      	adds	r3, #176	@ 0xb0
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	32b0      	adds	r2, #176	@ 0xb0
 8008bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e008      	b.n	8008bd8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	371c      	adds	r7, #28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	32b0      	adds	r2, #176	@ 0xb0
 8008bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e004      	b.n	8008c12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	32b0      	adds	r2, #176	@ 0xb0
 8008c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c36:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e025      	b.n	8008c92 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d11f      	bne.n	8008c90 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008c58:	4b10      	ldr	r3, [pc, #64]	@ (8008c9c <USBD_CDC_TransmitPacket+0x7c>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	f003 020f 	and.w	r2, r3, #15
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4403      	add	r3, r0
 8008c72:	3318      	adds	r3, #24
 8008c74:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008c76:	4b09      	ldr	r3, [pc, #36]	@ (8008c9c <USBD_CDC_TransmitPacket+0x7c>)
 8008c78:	7819      	ldrb	r1, [r3, #0]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f001 ffc3 	bl	800ac12 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200000a3 	.word	0x200000a3

08008ca0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	32b0      	adds	r2, #176	@ 0xb0
 8008cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	32b0      	adds	r2, #176	@ 0xb0
 8008cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e018      	b.n	8008d00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	7c1b      	ldrb	r3, [r3, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10a      	bne.n	8008cec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8008d08 <USBD_CDC_ReceivePacket+0x68>)
 8008cd8:	7819      	ldrb	r1, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 ffb5 	bl	800ac54 <USBD_LL_PrepareReceive>
 8008cea:	e008      	b.n	8008cfe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <USBD_CDC_ReceivePacket+0x68>)
 8008cee:	7819      	ldrb	r1, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cf6:	2340      	movs	r3, #64	@ 0x40
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 ffab 	bl	800ac54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	200000a4 	.word	0x200000a4

08008d0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e01f      	b.n	8008d64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	79fa      	ldrb	r2, [r7, #7]
 8008d56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f001 fe25 	bl	800a9a8 <USBD_LL_Init>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3718      	adds	r7, #24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e025      	b.n	8008dd0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	32ae      	adds	r2, #174	@ 0xae
 8008d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00f      	beq.n	8008dc0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	32ae      	adds	r2, #174	@ 0xae
 8008daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db0:	f107 020e 	add.w	r2, r7, #14
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
 8008db8:	4602      	mov	r2, r0
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f001 fe2d 	bl	800aa40 <USBD_LL_Start>
 8008de6:	4603      	mov	r3, r0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008df8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d009      	beq.n	8008e34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	78fa      	ldrb	r2, [r7, #3]
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	4798      	blx	r3
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	460b      	mov	r3, r1
 8008e48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	4611      	mov	r1, r2
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	4798      	blx	r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008e64:	2303      	movs	r3, #3
 8008e66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f001 f90c 	bl	800a0a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008e98:	461a      	mov	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ea6:	f003 031f 	and.w	r3, r3, #31
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d01a      	beq.n	8008ee4 <USBD_LL_SetupStage+0x72>
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d822      	bhi.n	8008ef8 <USBD_LL_SetupStage+0x86>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <USBD_LL_SetupStage+0x4a>
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d00a      	beq.n	8008ed0 <USBD_LL_SetupStage+0x5e>
 8008eba:	e01d      	b.n	8008ef8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fb63 	bl	8009590 <USBD_StdDevReq>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ece:	e020      	b.n	8008f12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fbcb 	bl	8009674 <USBD_StdItfReq>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee2:	e016      	b.n	8008f12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fc2d 	bl	800974c <USBD_StdEPReq>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef6:	e00c      	b.n	8008f12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008efe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f001 fdfa 	bl	800ab00 <USBD_LL_StallEP>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f10:	bf00      	nop
  }

  return ret;
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	460b      	mov	r3, r1
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008f2e:	7afb      	ldrb	r3, [r7, #11]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d16e      	bne.n	8009012 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008f3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	f040 8098 	bne.w	8009078 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d913      	bls.n	8008f7c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	1ad2      	subs	r2, r2, r3
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	bf28      	it	cs
 8008f6e:	4613      	movcs	r3, r2
 8008f70:	461a      	mov	r2, r3
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f001 f994 	bl	800a2a2 <USBD_CtlContinueRx>
 8008f7a:	e07d      	b.n	8009078 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008f82:	f003 031f 	and.w	r3, r3, #31
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d014      	beq.n	8008fb4 <USBD_LL_DataOutStage+0x98>
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d81d      	bhi.n	8008fca <USBD_LL_DataOutStage+0xae>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <USBD_LL_DataOutStage+0x7c>
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d003      	beq.n	8008f9e <USBD_LL_DataOutStage+0x82>
 8008f96:	e018      	b.n	8008fca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	75bb      	strb	r3, [r7, #22]
            break;
 8008f9c:	e018      	b.n	8008fd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 fa64 	bl	8009476 <USBD_CoreFindIF>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75bb      	strb	r3, [r7, #22]
            break;
 8008fb2:	e00d      	b.n	8008fd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 fa66 	bl	8009490 <USBD_CoreFindEP>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	75bb      	strb	r3, [r7, #22]
            break;
 8008fc8:	e002      	b.n	8008fd0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	75bb      	strb	r3, [r7, #22]
            break;
 8008fce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008fd0:	7dbb      	ldrb	r3, [r7, #22]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d119      	bne.n	800900a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d113      	bne.n	800900a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008fe2:	7dba      	ldrb	r2, [r7, #22]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	32ae      	adds	r2, #174	@ 0xae
 8008fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00b      	beq.n	800900a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ff2:	7dba      	ldrb	r2, [r7, #22]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ffa:	7dba      	ldrb	r2, [r7, #22]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	32ae      	adds	r2, #174	@ 0xae
 8009000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f001 f95a 	bl	800a2c4 <USBD_CtlSendStatus>
 8009010:	e032      	b.n	8009078 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009012:	7afb      	ldrb	r3, [r7, #11]
 8009014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009018:	b2db      	uxtb	r3, r3
 800901a:	4619      	mov	r1, r3
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 fa37 	bl	8009490 <USBD_CoreFindEP>
 8009022:	4603      	mov	r3, r0
 8009024:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009026:	7dbb      	ldrb	r3, [r7, #22]
 8009028:	2bff      	cmp	r3, #255	@ 0xff
 800902a:	d025      	beq.n	8009078 <USBD_LL_DataOutStage+0x15c>
 800902c:	7dbb      	ldrb	r3, [r7, #22]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d122      	bne.n	8009078 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b03      	cmp	r3, #3
 800903c:	d117      	bne.n	800906e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800903e:	7dba      	ldrb	r2, [r7, #22]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	32ae      	adds	r2, #174	@ 0xae
 8009044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00f      	beq.n	800906e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800904e:	7dba      	ldrb	r2, [r7, #22]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009056:	7dba      	ldrb	r2, [r7, #22]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	32ae      	adds	r2, #174	@ 0xae
 800905c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	7afa      	ldrb	r2, [r7, #11]
 8009064:	4611      	mov	r1, r2
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	4798      	blx	r3
 800906a:	4603      	mov	r3, r0
 800906c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800906e:	7dfb      	ldrb	r3, [r7, #23]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	e000      	b.n	800907a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b086      	sub	sp, #24
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	460b      	mov	r3, r1
 800908c:	607a      	str	r2, [r7, #4]
 800908e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009090:	7afb      	ldrb	r3, [r7, #11]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d16f      	bne.n	8009176 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3314      	adds	r3, #20
 800909a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d15a      	bne.n	800915c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d914      	bls.n	80090dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	689a      	ldr	r2, [r3, #8]
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	1ad2      	subs	r2, r2, r3
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	461a      	mov	r2, r3
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f001 f8bc 	bl	800a246 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ce:	2300      	movs	r3, #0
 80090d0:	2200      	movs	r2, #0
 80090d2:	2100      	movs	r1, #0
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f001 fdbd 	bl	800ac54 <USBD_LL_PrepareReceive>
 80090da:	e03f      	b.n	800915c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d11c      	bne.n	8009122 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d316      	bcc.n	8009122 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090fe:	429a      	cmp	r2, r3
 8009100:	d20f      	bcs.n	8009122 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009102:	2200      	movs	r2, #0
 8009104:	2100      	movs	r1, #0
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f001 f89d 	bl	800a246 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009114:	2300      	movs	r3, #0
 8009116:	2200      	movs	r2, #0
 8009118:	2100      	movs	r1, #0
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f001 fd9a 	bl	800ac54 <USBD_LL_PrepareReceive>
 8009120:	e01c      	b.n	800915c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b03      	cmp	r3, #3
 800912c:	d10f      	bne.n	800914e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d009      	beq.n	800914e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800914e:	2180      	movs	r1, #128	@ 0x80
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f001 fcd5 	bl	800ab00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f001 f8c7 	bl	800a2ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d03a      	beq.n	80091dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f7ff fe42 	bl	8008df0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009174:	e032      	b.n	80091dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009176:	7afb      	ldrb	r3, [r7, #11]
 8009178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800917c:	b2db      	uxtb	r3, r3
 800917e:	4619      	mov	r1, r3
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 f985 	bl	8009490 <USBD_CoreFindEP>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	2bff      	cmp	r3, #255	@ 0xff
 800918e:	d025      	beq.n	80091dc <USBD_LL_DataInStage+0x15a>
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d122      	bne.n	80091dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d11c      	bne.n	80091dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80091a2:	7dfa      	ldrb	r2, [r7, #23]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	32ae      	adds	r2, #174	@ 0xae
 80091a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d014      	beq.n	80091dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80091b2:	7dfa      	ldrb	r2, [r7, #23]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80091ba:	7dfa      	ldrb	r2, [r7, #23]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	32ae      	adds	r2, #174	@ 0xae
 80091c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	7afa      	ldrb	r2, [r7, #11]
 80091c8:	4611      	mov	r1, r2
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	4798      	blx	r3
 80091ce:	4603      	mov	r3, r0
 80091d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80091d2:	7dbb      	ldrb	r3, [r7, #22]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80091d8:	7dbb      	ldrb	r3, [r7, #22]
 80091da:	e000      	b.n	80091de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800921e:	2b00      	cmp	r3, #0
 8009220:	d014      	beq.n	800924c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00e      	beq.n	800924c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	6852      	ldr	r2, [r2, #4]
 800923a:	b2d2      	uxtb	r2, r2
 800923c:	4611      	mov	r1, r2
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	4798      	blx	r3
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009248:	2303      	movs	r3, #3
 800924a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800924c:	2340      	movs	r3, #64	@ 0x40
 800924e:	2200      	movs	r2, #0
 8009250:	2100      	movs	r1, #0
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 fc0f 	bl	800aa76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2240      	movs	r2, #64	@ 0x40
 8009264:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009268:	2340      	movs	r3, #64	@ 0x40
 800926a:	2200      	movs	r2, #0
 800926c:	2180      	movs	r1, #128	@ 0x80
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 fc01 	bl	800aa76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2240      	movs	r2, #64	@ 0x40
 800927e:	621a      	str	r2, [r3, #32]

  return ret;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800928a:	b480      	push	{r7}
 800928c:	b083      	sub	sp, #12
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	460b      	mov	r3, r1
 8009294:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d006      	beq.n	80092cc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2204      	movs	r2, #4
 80092d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d106      	bne.n	8009304 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b03      	cmp	r3, #3
 8009324:	d110      	bne.n	8009348 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d005      	beq.n	8009348 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	32ae      	adds	r2, #174	@ 0xae
 8009368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009370:	2303      	movs	r3, #3
 8009372:	e01c      	b.n	80093ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b03      	cmp	r3, #3
 800937e:	d115      	bne.n	80093ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	32ae      	adds	r2, #174	@ 0xae
 800938a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938e:	6a1b      	ldr	r3, [r3, #32]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00b      	beq.n	80093ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	32ae      	adds	r2, #174	@ 0xae
 800939e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	78fa      	ldrb	r2, [r7, #3]
 80093a6:	4611      	mov	r1, r2
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	32ae      	adds	r2, #174	@ 0xae
 80093cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e01c      	b.n	8009412 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d115      	bne.n	8009410 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	32ae      	adds	r2, #174	@ 0xae
 80093ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	32ae      	adds	r2, #174	@ 0xae
 8009402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	4611      	mov	r1, r2
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	6852      	ldr	r2, [r2, #4]
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	4611      	mov	r1, r2
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	4798      	blx	r3
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009468:	2303      	movs	r3, #3
 800946a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800946c:	7bfb      	ldrb	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	460b      	mov	r3, r1
 8009480:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009482:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800949c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800949e:	4618      	mov	r0, r3
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b086      	sub	sp, #24
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	885b      	ldrh	r3, [r3, #2]
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	7812      	ldrb	r2, [r2, #0]
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d91f      	bls.n	8009510 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80094d6:	e013      	b.n	8009500 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80094d8:	f107 030a 	add.w	r3, r7, #10
 80094dc:	4619      	mov	r1, r3
 80094de:	6978      	ldr	r0, [r7, #20]
 80094e0:	f000 f81b 	bl	800951a <USBD_GetNextDesc>
 80094e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	785b      	ldrb	r3, [r3, #1]
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	d108      	bne.n	8009500 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	789b      	ldrb	r3, [r3, #2]
 80094f6:	78fa      	ldrb	r2, [r7, #3]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d008      	beq.n	800950e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80094fc:	2300      	movs	r3, #0
 80094fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	885b      	ldrh	r3, [r3, #2]
 8009504:	b29a      	uxth	r2, r3
 8009506:	897b      	ldrh	r3, [r7, #10]
 8009508:	429a      	cmp	r2, r3
 800950a:	d8e5      	bhi.n	80094d8 <USBD_GetEpDesc+0x2e>
 800950c:	e000      	b.n	8009510 <USBD_GetEpDesc+0x66>
          break;
 800950e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009510:	693b      	ldr	r3, [r7, #16]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800951a:	b480      	push	{r7}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	7812      	ldrb	r2, [r2, #0]
 8009530:	4413      	add	r3, r2
 8009532:	b29a      	uxth	r2, r3
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4413      	add	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009544:	68fb      	ldr	r3, [r7, #12]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3714      	adds	r7, #20
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009552:	b480      	push	{r7}
 8009554:	b087      	sub	sp, #28
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	3301      	adds	r3, #1
 8009568:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009570:	8a3b      	ldrh	r3, [r7, #16]
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	b21a      	sxth	r2, r3
 8009576:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800957a:	4313      	orrs	r3, r2
 800957c:	b21b      	sxth	r3, r3
 800957e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009580:	89fb      	ldrh	r3, [r7, #14]
}
 8009582:	4618      	mov	r0, r3
 8009584:	371c      	adds	r7, #28
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
	...

08009590 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095a6:	2b40      	cmp	r3, #64	@ 0x40
 80095a8:	d005      	beq.n	80095b6 <USBD_StdDevReq+0x26>
 80095aa:	2b40      	cmp	r3, #64	@ 0x40
 80095ac:	d857      	bhi.n	800965e <USBD_StdDevReq+0xce>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00f      	beq.n	80095d2 <USBD_StdDevReq+0x42>
 80095b2:	2b20      	cmp	r3, #32
 80095b4:	d153      	bne.n	800965e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	32ae      	adds	r2, #174	@ 0xae
 80095c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	4798      	blx	r3
 80095cc:	4603      	mov	r3, r0
 80095ce:	73fb      	strb	r3, [r7, #15]
      break;
 80095d0:	e04a      	b.n	8009668 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	785b      	ldrb	r3, [r3, #1]
 80095d6:	2b09      	cmp	r3, #9
 80095d8:	d83b      	bhi.n	8009652 <USBD_StdDevReq+0xc2>
 80095da:	a201      	add	r2, pc, #4	@ (adr r2, 80095e0 <USBD_StdDevReq+0x50>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	08009635 	.word	0x08009635
 80095e4:	08009649 	.word	0x08009649
 80095e8:	08009653 	.word	0x08009653
 80095ec:	0800963f 	.word	0x0800963f
 80095f0:	08009653 	.word	0x08009653
 80095f4:	08009613 	.word	0x08009613
 80095f8:	08009609 	.word	0x08009609
 80095fc:	08009653 	.word	0x08009653
 8009600:	0800962b 	.word	0x0800962b
 8009604:	0800961d 	.word	0x0800961d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fa3c 	bl	8009a88 <USBD_GetDescriptor>
          break;
 8009610:	e024      	b.n	800965c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fba1 	bl	8009d5c <USBD_SetAddress>
          break;
 800961a:	e01f      	b.n	800965c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fbe0 	bl	8009de4 <USBD_SetConfig>
 8009624:	4603      	mov	r3, r0
 8009626:	73fb      	strb	r3, [r7, #15]
          break;
 8009628:	e018      	b.n	800965c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fc83 	bl	8009f38 <USBD_GetConfig>
          break;
 8009632:	e013      	b.n	800965c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fcb4 	bl	8009fa4 <USBD_GetStatus>
          break;
 800963c:	e00e      	b.n	800965c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fce3 	bl	800a00c <USBD_SetFeature>
          break;
 8009646:	e009      	b.n	800965c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fd07 	bl	800a05e <USBD_ClrFeature>
          break;
 8009650:	e004      	b.n	800965c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fd5e 	bl	800a116 <USBD_CtlError>
          break;
 800965a:	bf00      	nop
      }
      break;
 800965c:	e004      	b.n	8009668 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fd58 	bl	800a116 <USBD_CtlError>
      break;
 8009666:	bf00      	nop
  }

  return ret;
 8009668:	7bfb      	ldrb	r3, [r7, #15]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop

08009674 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800968a:	2b40      	cmp	r3, #64	@ 0x40
 800968c:	d005      	beq.n	800969a <USBD_StdItfReq+0x26>
 800968e:	2b40      	cmp	r3, #64	@ 0x40
 8009690:	d852      	bhi.n	8009738 <USBD_StdItfReq+0xc4>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <USBD_StdItfReq+0x26>
 8009696:	2b20      	cmp	r3, #32
 8009698:	d14e      	bne.n	8009738 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	3b01      	subs	r3, #1
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d840      	bhi.n	800972a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	889b      	ldrh	r3, [r3, #4]
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d836      	bhi.n	8009720 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	889b      	ldrh	r3, [r3, #4]
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7ff fedb 	bl	8009476 <USBD_CoreFindIF>
 80096c0:	4603      	mov	r3, r0
 80096c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	2bff      	cmp	r3, #255	@ 0xff
 80096c8:	d01d      	beq.n	8009706 <USBD_StdItfReq+0x92>
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d11a      	bne.n	8009706 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80096d0:	7bba      	ldrb	r2, [r7, #14]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	32ae      	adds	r2, #174	@ 0xae
 80096d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00f      	beq.n	8009700 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80096e0:	7bba      	ldrb	r2, [r7, #14]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096e8:	7bba      	ldrb	r2, [r7, #14]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	32ae      	adds	r2, #174	@ 0xae
 80096ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	4798      	blx	r3
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80096fe:	e004      	b.n	800970a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009700:	2303      	movs	r3, #3
 8009702:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009704:	e001      	b.n	800970a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009706:	2303      	movs	r3, #3
 8009708:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	88db      	ldrh	r3, [r3, #6]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d110      	bne.n	8009734 <USBD_StdItfReq+0xc0>
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10d      	bne.n	8009734 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fdd3 	bl	800a2c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800971e:	e009      	b.n	8009734 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fcf7 	bl	800a116 <USBD_CtlError>
          break;
 8009728:	e004      	b.n	8009734 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fcf2 	bl	800a116 <USBD_CtlError>
          break;
 8009732:	e000      	b.n	8009736 <USBD_StdItfReq+0xc2>
          break;
 8009734:	bf00      	nop
      }
      break;
 8009736:	e004      	b.n	8009742 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fceb 	bl	800a116 <USBD_CtlError>
      break;
 8009740:	bf00      	nop
  }

  return ret;
 8009742:	7bfb      	ldrb	r3, [r7, #15]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	889b      	ldrh	r3, [r3, #4]
 800975e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009768:	2b40      	cmp	r3, #64	@ 0x40
 800976a:	d007      	beq.n	800977c <USBD_StdEPReq+0x30>
 800976c:	2b40      	cmp	r3, #64	@ 0x40
 800976e:	f200 817f 	bhi.w	8009a70 <USBD_StdEPReq+0x324>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d02a      	beq.n	80097cc <USBD_StdEPReq+0x80>
 8009776:	2b20      	cmp	r3, #32
 8009778:	f040 817a 	bne.w	8009a70 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff fe85 	bl	8009490 <USBD_CoreFindEP>
 8009786:	4603      	mov	r3, r0
 8009788:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800978a:	7b7b      	ldrb	r3, [r7, #13]
 800978c:	2bff      	cmp	r3, #255	@ 0xff
 800978e:	f000 8174 	beq.w	8009a7a <USBD_StdEPReq+0x32e>
 8009792:	7b7b      	ldrb	r3, [r7, #13]
 8009794:	2b00      	cmp	r3, #0
 8009796:	f040 8170 	bne.w	8009a7a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800979a:	7b7a      	ldrb	r2, [r7, #13]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80097a2:	7b7a      	ldrb	r2, [r7, #13]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	32ae      	adds	r2, #174	@ 0xae
 80097a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 8163 	beq.w	8009a7a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80097b4:	7b7a      	ldrb	r2, [r7, #13]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	32ae      	adds	r2, #174	@ 0xae
 80097ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	4798      	blx	r3
 80097c6:	4603      	mov	r3, r0
 80097c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80097ca:	e156      	b.n	8009a7a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	785b      	ldrb	r3, [r3, #1]
 80097d0:	2b03      	cmp	r3, #3
 80097d2:	d008      	beq.n	80097e6 <USBD_StdEPReq+0x9a>
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	f300 8145 	bgt.w	8009a64 <USBD_StdEPReq+0x318>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 809b 	beq.w	8009916 <USBD_StdEPReq+0x1ca>
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d03c      	beq.n	800985e <USBD_StdEPReq+0x112>
 80097e4:	e13e      	b.n	8009a64 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d002      	beq.n	80097f8 <USBD_StdEPReq+0xac>
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d016      	beq.n	8009824 <USBD_StdEPReq+0xd8>
 80097f6:	e02c      	b.n	8009852 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00d      	beq.n	800981a <USBD_StdEPReq+0xce>
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	2b80      	cmp	r3, #128	@ 0x80
 8009802:	d00a      	beq.n	800981a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009804:	7bbb      	ldrb	r3, [r7, #14]
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f001 f979 	bl	800ab00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800980e:	2180      	movs	r1, #128	@ 0x80
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f001 f975 	bl	800ab00 <USBD_LL_StallEP>
 8009816:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009818:	e020      	b.n	800985c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fc7a 	bl	800a116 <USBD_CtlError>
              break;
 8009822:	e01b      	b.n	800985c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	885b      	ldrh	r3, [r3, #2]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10e      	bne.n	800984a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00b      	beq.n	800984a <USBD_StdEPReq+0xfe>
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	2b80      	cmp	r3, #128	@ 0x80
 8009836:	d008      	beq.n	800984a <USBD_StdEPReq+0xfe>
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	88db      	ldrh	r3, [r3, #6]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d104      	bne.n	800984a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009840:	7bbb      	ldrb	r3, [r7, #14]
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 f95b 	bl	800ab00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fd3a 	bl	800a2c4 <USBD_CtlSendStatus>

              break;
 8009850:	e004      	b.n	800985c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fc5e 	bl	800a116 <USBD_CtlError>
              break;
 800985a:	bf00      	nop
          }
          break;
 800985c:	e107      	b.n	8009a6e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b02      	cmp	r3, #2
 8009868:	d002      	beq.n	8009870 <USBD_StdEPReq+0x124>
 800986a:	2b03      	cmp	r3, #3
 800986c:	d016      	beq.n	800989c <USBD_StdEPReq+0x150>
 800986e:	e04b      	b.n	8009908 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00d      	beq.n	8009892 <USBD_StdEPReq+0x146>
 8009876:	7bbb      	ldrb	r3, [r7, #14]
 8009878:	2b80      	cmp	r3, #128	@ 0x80
 800987a:	d00a      	beq.n	8009892 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f001 f93d 	bl	800ab00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009886:	2180      	movs	r1, #128	@ 0x80
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f001 f939 	bl	800ab00 <USBD_LL_StallEP>
 800988e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009890:	e040      	b.n	8009914 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fc3e 	bl	800a116 <USBD_CtlError>
              break;
 800989a:	e03b      	b.n	8009914 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	885b      	ldrh	r3, [r3, #2]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d136      	bne.n	8009912 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d004      	beq.n	80098b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f001 f943 	bl	800ab3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fd03 	bl	800a2c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7ff fde4 	bl	8009490 <USBD_CoreFindEP>
 80098c8:	4603      	mov	r3, r0
 80098ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098cc:	7b7b      	ldrb	r3, [r7, #13]
 80098ce:	2bff      	cmp	r3, #255	@ 0xff
 80098d0:	d01f      	beq.n	8009912 <USBD_StdEPReq+0x1c6>
 80098d2:	7b7b      	ldrb	r3, [r7, #13]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d11c      	bne.n	8009912 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80098d8:	7b7a      	ldrb	r2, [r7, #13]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80098e0:	7b7a      	ldrb	r2, [r7, #13]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	32ae      	adds	r2, #174	@ 0xae
 80098e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d010      	beq.n	8009912 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80098f0:	7b7a      	ldrb	r2, [r7, #13]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32ae      	adds	r2, #174	@ 0xae
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009906:	e004      	b.n	8009912 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fc03 	bl	800a116 <USBD_CtlError>
              break;
 8009910:	e000      	b.n	8009914 <USBD_StdEPReq+0x1c8>
              break;
 8009912:	bf00      	nop
          }
          break;
 8009914:	e0ab      	b.n	8009a6e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b02      	cmp	r3, #2
 8009920:	d002      	beq.n	8009928 <USBD_StdEPReq+0x1dc>
 8009922:	2b03      	cmp	r3, #3
 8009924:	d032      	beq.n	800998c <USBD_StdEPReq+0x240>
 8009926:	e097      	b.n	8009a58 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d007      	beq.n	800993e <USBD_StdEPReq+0x1f2>
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	2b80      	cmp	r3, #128	@ 0x80
 8009932:	d004      	beq.n	800993e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fbed 	bl	800a116 <USBD_CtlError>
                break;
 800993c:	e091      	b.n	8009a62 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800993e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009942:	2b00      	cmp	r3, #0
 8009944:	da0b      	bge.n	800995e <USBD_StdEPReq+0x212>
 8009946:	7bbb      	ldrb	r3, [r7, #14]
 8009948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	3310      	adds	r3, #16
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	3304      	adds	r3, #4
 800995c:	e00b      	b.n	8009976 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009964:	4613      	mov	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	4413      	add	r3, r2
 8009974:	3304      	adds	r3, #4
 8009976:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2202      	movs	r2, #2
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fc43 	bl	800a210 <USBD_CtlSendData>
              break;
 800998a:	e06a      	b.n	8009a62 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800998c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009990:	2b00      	cmp	r3, #0
 8009992:	da11      	bge.n	80099b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	f003 020f 	and.w	r2, r3, #15
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	4613      	mov	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	440b      	add	r3, r1
 80099a6:	3324      	adds	r3, #36	@ 0x24
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d117      	bne.n	80099de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fbb0 	bl	800a116 <USBD_CtlError>
                  break;
 80099b6:	e054      	b.n	8009a62 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
 80099ba:	f003 020f 	and.w	r2, r3, #15
 80099be:	6879      	ldr	r1, [r7, #4]
 80099c0:	4613      	mov	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d104      	bne.n	80099de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fb9d 	bl	800a116 <USBD_CtlError>
                  break;
 80099dc:	e041      	b.n	8009a62 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	da0b      	bge.n	80099fe <USBD_StdEPReq+0x2b2>
 80099e6:	7bbb      	ldrb	r3, [r7, #14]
 80099e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099ec:	4613      	mov	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	3310      	adds	r3, #16
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	4413      	add	r3, r2
 80099fa:	3304      	adds	r3, #4
 80099fc:	e00b      	b.n	8009a16 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
 8009a00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a04:	4613      	mov	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	4413      	add	r3, r2
 8009a14:	3304      	adds	r3, #4
 8009a16:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <USBD_StdEPReq+0x2d8>
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	2b80      	cmp	r3, #128	@ 0x80
 8009a22:	d103      	bne.n	8009a2c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2200      	movs	r2, #0
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e00e      	b.n	8009a4a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f001 f8a3 	bl	800ab7c <USBD_LL_IsStallEP>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	e002      	b.n	8009a4a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	4619      	mov	r1, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fbdd 	bl	800a210 <USBD_CtlSendData>
              break;
 8009a56:	e004      	b.n	8009a62 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fb5b 	bl	800a116 <USBD_CtlError>
              break;
 8009a60:	bf00      	nop
          }
          break;
 8009a62:	e004      	b.n	8009a6e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fb55 	bl	800a116 <USBD_CtlError>
          break;
 8009a6c:	bf00      	nop
      }
      break;
 8009a6e:	e005      	b.n	8009a7c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fb4f 	bl	800a116 <USBD_CtlError>
      break;
 8009a78:	e000      	b.n	8009a7c <USBD_StdEPReq+0x330>
      break;
 8009a7a:	bf00      	nop
  }

  return ret;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	885b      	ldrh	r3, [r3, #2]
 8009aa2:	0a1b      	lsrs	r3, r3, #8
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	2b06      	cmp	r3, #6
 8009aaa:	f200 8128 	bhi.w	8009cfe <USBD_GetDescriptor+0x276>
 8009aae:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab4 <USBD_GetDescriptor+0x2c>)
 8009ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab4:	08009ad1 	.word	0x08009ad1
 8009ab8:	08009ae9 	.word	0x08009ae9
 8009abc:	08009b29 	.word	0x08009b29
 8009ac0:	08009cff 	.word	0x08009cff
 8009ac4:	08009cff 	.word	0x08009cff
 8009ac8:	08009c9f 	.word	0x08009c9f
 8009acc:	08009ccb 	.word	0x08009ccb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	7c12      	ldrb	r2, [r2, #16]
 8009adc:	f107 0108 	add.w	r1, r7, #8
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	4798      	blx	r3
 8009ae4:	60f8      	str	r0, [r7, #12]
      break;
 8009ae6:	e112      	b.n	8009d0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7c1b      	ldrb	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10d      	bne.n	8009b0c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af8:	f107 0208 	add.w	r2, r7, #8
 8009afc:	4610      	mov	r0, r2
 8009afe:	4798      	blx	r3
 8009b00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3301      	adds	r3, #1
 8009b06:	2202      	movs	r2, #2
 8009b08:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b0a:	e100      	b.n	8009d0e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b14:	f107 0208 	add.w	r2, r7, #8
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4798      	blx	r3
 8009b1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3301      	adds	r3, #1
 8009b22:	2202      	movs	r2, #2
 8009b24:	701a      	strb	r2, [r3, #0]
      break;
 8009b26:	e0f2      	b.n	8009d0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	885b      	ldrh	r3, [r3, #2]
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	f200 80ac 	bhi.w	8009c8c <USBD_GetDescriptor+0x204>
 8009b34:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <USBD_GetDescriptor+0xb4>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009b55 	.word	0x08009b55
 8009b40:	08009b89 	.word	0x08009b89
 8009b44:	08009bbd 	.word	0x08009bbd
 8009b48:	08009bf1 	.word	0x08009bf1
 8009b4c:	08009c25 	.word	0x08009c25
 8009b50:	08009c59 	.word	0x08009c59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	7c12      	ldrb	r2, [r2, #16]
 8009b6c:	f107 0108 	add.w	r1, r7, #8
 8009b70:	4610      	mov	r0, r2
 8009b72:	4798      	blx	r3
 8009b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b76:	e091      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 facb 	bl	800a116 <USBD_CtlError>
            err++;
 8009b80:	7afb      	ldrb	r3, [r7, #11]
 8009b82:	3301      	adds	r3, #1
 8009b84:	72fb      	strb	r3, [r7, #11]
          break;
 8009b86:	e089      	b.n	8009c9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00b      	beq.n	8009bac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	7c12      	ldrb	r2, [r2, #16]
 8009ba0:	f107 0108 	add.w	r1, r7, #8
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	4798      	blx	r3
 8009ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009baa:	e077      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fab1 	bl	800a116 <USBD_CtlError>
            err++;
 8009bb4:	7afb      	ldrb	r3, [r7, #11]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bba:	e06f      	b.n	8009c9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00b      	beq.n	8009be0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	7c12      	ldrb	r2, [r2, #16]
 8009bd4:	f107 0108 	add.w	r1, r7, #8
 8009bd8:	4610      	mov	r0, r2
 8009bda:	4798      	blx	r3
 8009bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bde:	e05d      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fa97 	bl	800a116 <USBD_CtlError>
            err++;
 8009be8:	7afb      	ldrb	r3, [r7, #11]
 8009bea:	3301      	adds	r3, #1
 8009bec:	72fb      	strb	r3, [r7, #11]
          break;
 8009bee:	e055      	b.n	8009c9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	7c12      	ldrb	r2, [r2, #16]
 8009c08:	f107 0108 	add.w	r1, r7, #8
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	4798      	blx	r3
 8009c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c12:	e043      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fa7d 	bl	800a116 <USBD_CtlError>
            err++;
 8009c1c:	7afb      	ldrb	r3, [r7, #11]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	72fb      	strb	r3, [r7, #11]
          break;
 8009c22:	e03b      	b.n	8009c9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00b      	beq.n	8009c48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	7c12      	ldrb	r2, [r2, #16]
 8009c3c:	f107 0108 	add.w	r1, r7, #8
 8009c40:	4610      	mov	r0, r2
 8009c42:	4798      	blx	r3
 8009c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c46:	e029      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fa63 	bl	800a116 <USBD_CtlError>
            err++;
 8009c50:	7afb      	ldrb	r3, [r7, #11]
 8009c52:	3301      	adds	r3, #1
 8009c54:	72fb      	strb	r3, [r7, #11]
          break;
 8009c56:	e021      	b.n	8009c9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00b      	beq.n	8009c7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	7c12      	ldrb	r2, [r2, #16]
 8009c70:	f107 0108 	add.w	r1, r7, #8
 8009c74:	4610      	mov	r0, r2
 8009c76:	4798      	blx	r3
 8009c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c7a:	e00f      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fa49 	bl	800a116 <USBD_CtlError>
            err++;
 8009c84:	7afb      	ldrb	r3, [r7, #11]
 8009c86:	3301      	adds	r3, #1
 8009c88:	72fb      	strb	r3, [r7, #11]
          break;
 8009c8a:	e007      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa41 	bl	800a116 <USBD_CtlError>
          err++;
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	3301      	adds	r3, #1
 8009c98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c9a:	bf00      	nop
      }
      break;
 8009c9c:	e037      	b.n	8009d0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	7c1b      	ldrb	r3, [r3, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d109      	bne.n	8009cba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cae:	f107 0208 	add.w	r2, r7, #8
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	4798      	blx	r3
 8009cb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cb8:	e029      	b.n	8009d0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fa2a 	bl	800a116 <USBD_CtlError>
        err++;
 8009cc2:	7afb      	ldrb	r3, [r7, #11]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	72fb      	strb	r3, [r7, #11]
      break;
 8009cc8:	e021      	b.n	8009d0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	7c1b      	ldrb	r3, [r3, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10d      	bne.n	8009cee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cda:	f107 0208 	add.w	r2, r7, #8
 8009cde:	4610      	mov	r0, r2
 8009ce0:	4798      	blx	r3
 8009ce2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	2207      	movs	r2, #7
 8009cea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cec:	e00f      	b.n	8009d0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fa10 	bl	800a116 <USBD_CtlError>
        err++;
 8009cf6:	7afb      	ldrb	r3, [r7, #11]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	72fb      	strb	r3, [r7, #11]
      break;
 8009cfc:	e007      	b.n	8009d0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fa08 	bl	800a116 <USBD_CtlError>
      err++;
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d0c:	bf00      	nop
  }

  if (err != 0U)
 8009d0e:	7afb      	ldrb	r3, [r7, #11]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d11e      	bne.n	8009d52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	88db      	ldrh	r3, [r3, #6]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d016      	beq.n	8009d4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009d1c:	893b      	ldrh	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00e      	beq.n	8009d40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	88da      	ldrh	r2, [r3, #6]
 8009d26:	893b      	ldrh	r3, [r7, #8]
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	bf28      	it	cs
 8009d2c:	4613      	movcs	r3, r2
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d32:	893b      	ldrh	r3, [r7, #8]
 8009d34:	461a      	mov	r2, r3
 8009d36:	68f9      	ldr	r1, [r7, #12]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fa69 	bl	800a210 <USBD_CtlSendData>
 8009d3e:	e009      	b.n	8009d54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f9e7 	bl	800a116 <USBD_CtlError>
 8009d48:	e004      	b.n	8009d54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 faba 	bl	800a2c4 <USBD_CtlSendStatus>
 8009d50:	e000      	b.n	8009d54 <USBD_GetDescriptor+0x2cc>
    return;
 8009d52:	bf00      	nop
  }
}
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop

08009d5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	889b      	ldrh	r3, [r3, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d131      	bne.n	8009dd2 <USBD_SetAddress+0x76>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	88db      	ldrh	r3, [r3, #6]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d12d      	bne.n	8009dd2 <USBD_SetAddress+0x76>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	885b      	ldrh	r3, [r3, #2]
 8009d7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d7c:	d829      	bhi.n	8009dd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	885b      	ldrh	r3, [r3, #2]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d104      	bne.n	8009da0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f9bc 	bl	800a116 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9e:	e01d      	b.n	8009ddc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	7bfa      	ldrb	r2, [r7, #15]
 8009da4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 ff11 	bl	800abd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fa86 	bl	800a2c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d004      	beq.n	8009dc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc6:	e009      	b.n	8009ddc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dd0:	e004      	b.n	8009ddc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f99e 	bl	800a116 <USBD_CtlError>
  }
}
 8009dda:	bf00      	nop
 8009ddc:	bf00      	nop
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	885b      	ldrh	r3, [r3, #2]
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	4b4e      	ldr	r3, [pc, #312]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009dfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d905      	bls.n	8009e10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f985 	bl	800a116 <USBD_CtlError>
    return USBD_FAIL;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e08c      	b.n	8009f2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d002      	beq.n	8009e22 <USBD_SetConfig+0x3e>
 8009e1c:	2b03      	cmp	r3, #3
 8009e1e:	d029      	beq.n	8009e74 <USBD_SetConfig+0x90>
 8009e20:	e075      	b.n	8009f0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e22:	4b44      	ldr	r3, [pc, #272]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d020      	beq.n	8009e6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009e2a:	4b42      	ldr	r3, [pc, #264]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e34:	4b3f      	ldr	r3, [pc, #252]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7fe ffe3 	bl	8008e06 <USBD_SetClassConfig>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d008      	beq.n	8009e5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f962 	bl	800a116 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2202      	movs	r2, #2
 8009e56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e5a:	e065      	b.n	8009f28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fa31 	bl	800a2c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2203      	movs	r2, #3
 8009e66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009e6a:	e05d      	b.n	8009f28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fa29 	bl	800a2c4 <USBD_CtlSendStatus>
      break;
 8009e72:	e059      	b.n	8009f28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e74:	4b2f      	ldr	r3, [pc, #188]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d112      	bne.n	8009ea2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009e84:	4b2b      	ldr	r3, [pc, #172]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e8e:	4b29      	ldr	r3, [pc, #164]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7fe ffd2 	bl	8008e3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fa12 	bl	800a2c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ea0:	e042      	b.n	8009f28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009ea2:	4b24      	ldr	r3, [pc, #144]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d02a      	beq.n	8009f06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7fe ffc0 	bl	8008e3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7fe ff99 	bl	8008e06 <USBD_SetClassConfig>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00f      	beq.n	8009efe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f918 	bl	800a116 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7fe ffa5 	bl	8008e3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009efc:	e014      	b.n	8009f28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f9e0 	bl	800a2c4 <USBD_CtlSendStatus>
      break;
 8009f04:	e010      	b.n	8009f28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f9dc 	bl	800a2c4 <USBD_CtlSendStatus>
      break;
 8009f0c:	e00c      	b.n	8009f28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f900 	bl	800a116 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f16:	4b07      	ldr	r3, [pc, #28]	@ (8009f34 <USBD_SetConfig+0x150>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7fe ff8e 	bl	8008e3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009f22:	2303      	movs	r3, #3
 8009f24:	73fb      	strb	r3, [r7, #15]
      break;
 8009f26:	bf00      	nop
  }

  return ret;
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	200004f0 	.word	0x200004f0

08009f38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	88db      	ldrh	r3, [r3, #6]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d004      	beq.n	8009f54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f8e2 	bl	800a116 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f52:	e023      	b.n	8009f9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	dc02      	bgt.n	8009f66 <USBD_GetConfig+0x2e>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	dc03      	bgt.n	8009f6c <USBD_GetConfig+0x34>
 8009f64:	e015      	b.n	8009f92 <USBD_GetConfig+0x5a>
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	d00b      	beq.n	8009f82 <USBD_GetConfig+0x4a>
 8009f6a:	e012      	b.n	8009f92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3308      	adds	r3, #8
 8009f76:	2201      	movs	r2, #1
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f948 	bl	800a210 <USBD_CtlSendData>
        break;
 8009f80:	e00c      	b.n	8009f9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	3304      	adds	r3, #4
 8009f86:	2201      	movs	r2, #1
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f940 	bl	800a210 <USBD_CtlSendData>
        break;
 8009f90:	e004      	b.n	8009f9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f8be 	bl	800a116 <USBD_CtlError>
        break;
 8009f9a:	bf00      	nop
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d81e      	bhi.n	8009ffa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	88db      	ldrh	r3, [r3, #6]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d004      	beq.n	8009fce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f8a5 	bl	800a116 <USBD_CtlError>
        break;
 8009fcc:	e01a      	b.n	800a004 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d005      	beq.n	8009fea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f043 0202 	orr.w	r2, r3, #2
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	330c      	adds	r3, #12
 8009fee:	2202      	movs	r2, #2
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f90c 	bl	800a210 <USBD_CtlSendData>
      break;
 8009ff8:	e004      	b.n	800a004 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f88a 	bl	800a116 <USBD_CtlError>
      break;
 800a002:	bf00      	nop
  }
}
 800a004:	bf00      	nop
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	885b      	ldrh	r3, [r3, #2]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d107      	bne.n	800a02e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f94c 	bl	800a2c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a02c:	e013      	b.n	800a056 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	885b      	ldrh	r3, [r3, #2]
 800a032:	2b02      	cmp	r3, #2
 800a034:	d10b      	bne.n	800a04e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	889b      	ldrh	r3, [r3, #4]
 800a03a:	0a1b      	lsrs	r3, r3, #8
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f93c 	bl	800a2c4 <USBD_CtlSendStatus>
}
 800a04c:	e003      	b.n	800a056 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f860 	bl	800a116 <USBD_CtlError>
}
 800a056:	bf00      	nop
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b082      	sub	sp, #8
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	3b01      	subs	r3, #1
 800a072:	2b02      	cmp	r3, #2
 800a074:	d80b      	bhi.n	800a08e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	885b      	ldrh	r3, [r3, #2]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d10c      	bne.n	800a098 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f91c 	bl	800a2c4 <USBD_CtlSendStatus>
      }
      break;
 800a08c:	e004      	b.n	800a098 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f840 	bl	800a116 <USBD_CtlError>
      break;
 800a096:	e000      	b.n	800a09a <USBD_ClrFeature+0x3c>
      break;
 800a098:	bf00      	nop
  }
}
 800a09a:	bf00      	nop
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	781a      	ldrb	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	781a      	ldrb	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7ff fa40 	bl	8009552 <SWAPBYTE>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff fa33 	bl	8009552 <SWAPBYTE>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7ff fa26 	bl	8009552 <SWAPBYTE>
 800a106:	4603      	mov	r3, r0
 800a108:	461a      	mov	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	80da      	strh	r2, [r3, #6]
}
 800a10e:	bf00      	nop
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a120:	2180      	movs	r1, #128	@ 0x80
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fcec 	bl	800ab00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a128:	2100      	movs	r1, #0
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fce8 	bl	800ab00 <USBD_LL_StallEP>
}
 800a130:	bf00      	nop
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d042      	beq.n	800a1d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a152:	6938      	ldr	r0, [r7, #16]
 800a154:	f000 f842 	bl	800a1dc <USBD_GetLen>
 800a158:	4603      	mov	r3, r0
 800a15a:	3301      	adds	r3, #1
 800a15c:	005b      	lsls	r3, r3, #1
 800a15e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a162:	d808      	bhi.n	800a176 <USBD_GetString+0x3e>
 800a164:	6938      	ldr	r0, [r7, #16]
 800a166:	f000 f839 	bl	800a1dc <USBD_GetLen>
 800a16a:	4603      	mov	r3, r0
 800a16c:	3301      	adds	r3, #1
 800a16e:	b29b      	uxth	r3, r3
 800a170:	005b      	lsls	r3, r3, #1
 800a172:	b29a      	uxth	r2, r3
 800a174:	e001      	b.n	800a17a <USBD_GetString+0x42>
 800a176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a17e:	7dfb      	ldrb	r3, [r7, #23]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	4413      	add	r3, r2
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	7812      	ldrb	r2, [r2, #0]
 800a188:	701a      	strb	r2, [r3, #0]
  idx++;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	3301      	adds	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	4413      	add	r3, r2
 800a196:	2203      	movs	r2, #3
 800a198:	701a      	strb	r2, [r3, #0]
  idx++;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	3301      	adds	r3, #1
 800a19e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a1a0:	e013      	b.n	800a1ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	7812      	ldrb	r2, [r2, #0]
 800a1ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	613b      	str	r3, [r7, #16]
    idx++;
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	4413      	add	r3, r2
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a1c4:	7dfb      	ldrb	r3, [r7, #23]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e7      	bne.n	800a1a2 <USBD_GetString+0x6a>
 800a1d2:	e000      	b.n	800a1d6 <USBD_GetString+0x9e>
    return;
 800a1d4:	bf00      	nop
  }
}
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a1ec:	e005      	b.n	800a1fa <USBD_GetLen+0x1e>
  {
    len++;
 800a1ee:	7bfb      	ldrb	r3, [r7, #15]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f5      	bne.n	800a1ee <USBD_GetLen+0x12>
  }

  return len;
 800a202:	7bfb      	ldrb	r3, [r7, #15]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2202      	movs	r2, #2
 800a220:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	2100      	movs	r1, #0
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 fceb 	bl	800ac12 <USBD_LL_Transmit>

  return USBD_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	60f8      	str	r0, [r7, #12]
 800a24e:	60b9      	str	r1, [r7, #8]
 800a250:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	2100      	movs	r1, #0
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 fcda 	bl	800ac12 <USBD_LL_Transmit>

  return USBD_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2203      	movs	r2, #3
 800a278:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	2100      	movs	r1, #0
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 fcde 	bl	800ac54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	60f8      	str	r0, [r7, #12]
 800a2aa:	60b9      	str	r1, [r7, #8]
 800a2ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 fccd 	bl	800ac54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2204      	movs	r2, #4
 800a2d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fc99 	bl	800ac12 <USBD_LL_Transmit>

  return USBD_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b082      	sub	sp, #8
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2205      	movs	r2, #5
 800a2f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2100      	movs	r1, #0
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fca7 	bl	800ac54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a314:	2200      	movs	r2, #0
 800a316:	4912      	ldr	r1, [pc, #72]	@ (800a360 <MX_USB_DEVICE_Init+0x50>)
 800a318:	4812      	ldr	r0, [pc, #72]	@ (800a364 <MX_USB_DEVICE_Init+0x54>)
 800a31a:	f7fe fcf7 	bl	8008d0c <USBD_Init>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a324:	f7f8 f83c 	bl	80023a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a328:	490f      	ldr	r1, [pc, #60]	@ (800a368 <MX_USB_DEVICE_Init+0x58>)
 800a32a:	480e      	ldr	r0, [pc, #56]	@ (800a364 <MX_USB_DEVICE_Init+0x54>)
 800a32c:	f7fe fd1e 	bl	8008d6c <USBD_RegisterClass>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a336:	f7f8 f833 	bl	80023a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a33a:	490c      	ldr	r1, [pc, #48]	@ (800a36c <MX_USB_DEVICE_Init+0x5c>)
 800a33c:	4809      	ldr	r0, [pc, #36]	@ (800a364 <MX_USB_DEVICE_Init+0x54>)
 800a33e:	f7fe fc15 	bl	8008b6c <USBD_CDC_RegisterInterface>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a348:	f7f8 f82a 	bl	80023a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a34c:	4805      	ldr	r0, [pc, #20]	@ (800a364 <MX_USB_DEVICE_Init+0x54>)
 800a34e:	f7fe fd43 	bl	8008dd8 <USBD_Start>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a358:	f7f8 f822 	bl	80023a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a35c:	bf00      	nop
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	200000bc 	.word	0x200000bc
 800a364:	200004f4 	.word	0x200004f4
 800a368:	20000028 	.word	0x20000028
 800a36c:	200000a8 	.word	0x200000a8

0800a370 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a374:	2200      	movs	r2, #0
 800a376:	4905      	ldr	r1, [pc, #20]	@ (800a38c <CDC_Init_FS+0x1c>)
 800a378:	4805      	ldr	r0, [pc, #20]	@ (800a390 <CDC_Init_FS+0x20>)
 800a37a:	f7fe fc11 	bl	8008ba0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a37e:	4905      	ldr	r1, [pc, #20]	@ (800a394 <CDC_Init_FS+0x24>)
 800a380:	4803      	ldr	r0, [pc, #12]	@ (800a390 <CDC_Init_FS+0x20>)
 800a382:	f7fe fc2f 	bl	8008be4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a386:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a388:	4618      	mov	r0, r3
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20000fd0 	.word	0x20000fd0
 800a390:	200004f4 	.word	0x200004f4
 800a394:	200007d0 	.word	0x200007d0

0800a398 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a398:	b480      	push	{r7}
 800a39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a39c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	6039      	str	r1, [r7, #0]
 800a3b2:	71fb      	strb	r3, [r7, #7]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	2b23      	cmp	r3, #35	@ 0x23
 800a3bc:	d84a      	bhi.n	800a454 <CDC_Control_FS+0xac>
 800a3be:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c4 <CDC_Control_FS+0x1c>)
 800a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c4:	0800a455 	.word	0x0800a455
 800a3c8:	0800a455 	.word	0x0800a455
 800a3cc:	0800a455 	.word	0x0800a455
 800a3d0:	0800a455 	.word	0x0800a455
 800a3d4:	0800a455 	.word	0x0800a455
 800a3d8:	0800a455 	.word	0x0800a455
 800a3dc:	0800a455 	.word	0x0800a455
 800a3e0:	0800a455 	.word	0x0800a455
 800a3e4:	0800a455 	.word	0x0800a455
 800a3e8:	0800a455 	.word	0x0800a455
 800a3ec:	0800a455 	.word	0x0800a455
 800a3f0:	0800a455 	.word	0x0800a455
 800a3f4:	0800a455 	.word	0x0800a455
 800a3f8:	0800a455 	.word	0x0800a455
 800a3fc:	0800a455 	.word	0x0800a455
 800a400:	0800a455 	.word	0x0800a455
 800a404:	0800a455 	.word	0x0800a455
 800a408:	0800a455 	.word	0x0800a455
 800a40c:	0800a455 	.word	0x0800a455
 800a410:	0800a455 	.word	0x0800a455
 800a414:	0800a455 	.word	0x0800a455
 800a418:	0800a455 	.word	0x0800a455
 800a41c:	0800a455 	.word	0x0800a455
 800a420:	0800a455 	.word	0x0800a455
 800a424:	0800a455 	.word	0x0800a455
 800a428:	0800a455 	.word	0x0800a455
 800a42c:	0800a455 	.word	0x0800a455
 800a430:	0800a455 	.word	0x0800a455
 800a434:	0800a455 	.word	0x0800a455
 800a438:	0800a455 	.word	0x0800a455
 800a43c:	0800a455 	.word	0x0800a455
 800a440:	0800a455 	.word	0x0800a455
 800a444:	0800a455 	.word	0x0800a455
 800a448:	0800a455 	.word	0x0800a455
 800a44c:	0800a455 	.word	0x0800a455
 800a450:	0800a455 	.word	0x0800a455
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a454:	bf00      	nop
  }

  return (USBD_OK);
 800a456:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	4805      	ldr	r0, [pc, #20]	@ (800a488 <CDC_Receive_FS+0x24>)
 800a472:	f7fe fbb7 	bl	8008be4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a476:	4804      	ldr	r0, [pc, #16]	@ (800a488 <CDC_Receive_FS+0x24>)
 800a478:	f7fe fc12 	bl	8008ca0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a47c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	200004f4 	.word	0x200004f4

0800a48c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a49c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d4 <CDC_Transmit_FS+0x48>)
 800a49e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e00b      	b.n	800a4ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a4b2:	887b      	ldrh	r3, [r7, #2]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	6879      	ldr	r1, [r7, #4]
 800a4b8:	4806      	ldr	r0, [pc, #24]	@ (800a4d4 <CDC_Transmit_FS+0x48>)
 800a4ba:	f7fe fb71 	bl	8008ba0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a4be:	4805      	ldr	r0, [pc, #20]	@ (800a4d4 <CDC_Transmit_FS+0x48>)
 800a4c0:	f7fe fbae 	bl	8008c20 <USBD_CDC_TransmitPacket>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200004f4 	.word	0x200004f4

0800a4d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a4ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
	...

0800a4fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	4603      	mov	r3, r0
 800a504:	6039      	str	r1, [r7, #0]
 800a506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2212      	movs	r2, #18
 800a50c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a50e:	4b03      	ldr	r3, [pc, #12]	@ (800a51c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a510:	4618      	mov	r0, r3
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	200000d8 	.word	0x200000d8

0800a520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	6039      	str	r1, [r7, #0]
 800a52a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2204      	movs	r2, #4
 800a530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a532:	4b03      	ldr	r3, [pc, #12]	@ (800a540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	200000ec 	.word	0x200000ec

0800a544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d105      	bne.n	800a562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	4907      	ldr	r1, [pc, #28]	@ (800a578 <USBD_FS_ProductStrDescriptor+0x34>)
 800a55a:	4808      	ldr	r0, [pc, #32]	@ (800a57c <USBD_FS_ProductStrDescriptor+0x38>)
 800a55c:	f7ff fdec 	bl	800a138 <USBD_GetString>
 800a560:	e004      	b.n	800a56c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	4904      	ldr	r1, [pc, #16]	@ (800a578 <USBD_FS_ProductStrDescriptor+0x34>)
 800a566:	4805      	ldr	r0, [pc, #20]	@ (800a57c <USBD_FS_ProductStrDescriptor+0x38>)
 800a568:	f7ff fde6 	bl	800a138 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a56c:	4b02      	ldr	r3, [pc, #8]	@ (800a578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	200017d0 	.word	0x200017d0
 800a57c:	0800f0b0 	.word	0x0800f0b0

0800a580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	6039      	str	r1, [r7, #0]
 800a58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	4904      	ldr	r1, [pc, #16]	@ (800a5a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a590:	4804      	ldr	r0, [pc, #16]	@ (800a5a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a592:	f7ff fdd1 	bl	800a138 <USBD_GetString>
  return USBD_StrDesc;
 800a596:	4b02      	ldr	r3, [pc, #8]	@ (800a5a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	200017d0 	.word	0x200017d0
 800a5a4:	0800f0c8 	.word	0x0800f0c8

0800a5a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	6039      	str	r1, [r7, #0]
 800a5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	221a      	movs	r2, #26
 800a5b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5ba:	f000 f843 	bl	800a644 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5be:	4b02      	ldr	r3, [pc, #8]	@ (800a5c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	200000f0 	.word	0x200000f0

0800a5cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	6039      	str	r1, [r7, #0]
 800a5d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a5d8:	79fb      	ldrb	r3, [r7, #7]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d105      	bne.n	800a5ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	4907      	ldr	r1, [pc, #28]	@ (800a600 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5e2:	4808      	ldr	r0, [pc, #32]	@ (800a604 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5e4:	f7ff fda8 	bl	800a138 <USBD_GetString>
 800a5e8:	e004      	b.n	800a5f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	4904      	ldr	r1, [pc, #16]	@ (800a600 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5ee:	4805      	ldr	r0, [pc, #20]	@ (800a604 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5f0:	f7ff fda2 	bl	800a138 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5f4:	4b02      	ldr	r3, [pc, #8]	@ (800a600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	200017d0 	.word	0x200017d0
 800a604:	0800f0dc 	.word	0x0800f0dc

0800a608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	6039      	str	r1, [r7, #0]
 800a612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a614:	79fb      	ldrb	r3, [r7, #7]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d105      	bne.n	800a626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	4907      	ldr	r1, [pc, #28]	@ (800a63c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a61e:	4808      	ldr	r0, [pc, #32]	@ (800a640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a620:	f7ff fd8a 	bl	800a138 <USBD_GetString>
 800a624:	e004      	b.n	800a630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	4904      	ldr	r1, [pc, #16]	@ (800a63c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a62a:	4805      	ldr	r0, [pc, #20]	@ (800a640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a62c:	f7ff fd84 	bl	800a138 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a630:	4b02      	ldr	r3, [pc, #8]	@ (800a63c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	200017d0 	.word	0x200017d0
 800a640:	0800f0e8 	.word	0x0800f0e8

0800a644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a64a:	4b0f      	ldr	r3, [pc, #60]	@ (800a688 <Get_SerialNum+0x44>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a650:	4b0e      	ldr	r3, [pc, #56]	@ (800a68c <Get_SerialNum+0x48>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a656:	4b0e      	ldr	r3, [pc, #56]	@ (800a690 <Get_SerialNum+0x4c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4413      	add	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d009      	beq.n	800a67e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a66a:	2208      	movs	r2, #8
 800a66c:	4909      	ldr	r1, [pc, #36]	@ (800a694 <Get_SerialNum+0x50>)
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 f814 	bl	800a69c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a674:	2204      	movs	r2, #4
 800a676:	4908      	ldr	r1, [pc, #32]	@ (800a698 <Get_SerialNum+0x54>)
 800a678:	68b8      	ldr	r0, [r7, #8]
 800a67a:	f000 f80f 	bl	800a69c <IntToUnicode>
  }
}
 800a67e:	bf00      	nop
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	1fff7a10 	.word	0x1fff7a10
 800a68c:	1fff7a14 	.word	0x1fff7a14
 800a690:	1fff7a18 	.word	0x1fff7a18
 800a694:	200000f2 	.word	0x200000f2
 800a698:	20000102 	.word	0x20000102

0800a69c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	75fb      	strb	r3, [r7, #23]
 800a6b2:	e027      	b.n	800a704 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	0f1b      	lsrs	r3, r3, #28
 800a6b8:	2b09      	cmp	r3, #9
 800a6ba:	d80b      	bhi.n	800a6d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	0f1b      	lsrs	r3, r3, #28
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	7dfb      	ldrb	r3, [r7, #23]
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	440b      	add	r3, r1
 800a6cc:	3230      	adds	r2, #48	@ 0x30
 800a6ce:	b2d2      	uxtb	r2, r2
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	e00a      	b.n	800a6ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	0f1b      	lsrs	r3, r3, #28
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	4619      	mov	r1, r3
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	440b      	add	r3, r1
 800a6e4:	3237      	adds	r2, #55	@ 0x37
 800a6e6:	b2d2      	uxtb	r2, r2
 800a6e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	011b      	lsls	r3, r3, #4
 800a6ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
 800a700:	3301      	adds	r3, #1
 800a702:	75fb      	strb	r3, [r7, #23]
 800a704:	7dfa      	ldrb	r2, [r7, #23]
 800a706:	79fb      	ldrb	r3, [r7, #7]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d3d3      	bcc.n	800a6b4 <IntToUnicode+0x18>
  }
}
 800a70c:	bf00      	nop
 800a70e:	bf00      	nop
 800a710:	371c      	adds	r7, #28
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
	...

0800a71c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b08a      	sub	sp, #40	@ 0x28
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a724:	f107 0314 	add.w	r3, r7, #20
 800a728:	2200      	movs	r2, #0
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	605a      	str	r2, [r3, #4]
 800a72e:	609a      	str	r2, [r3, #8]
 800a730:	60da      	str	r2, [r3, #12]
 800a732:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a73c:	d13a      	bne.n	800a7b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a73e:	2300      	movs	r3, #0
 800a740:	613b      	str	r3, [r7, #16]
 800a742:	4b1e      	ldr	r3, [pc, #120]	@ (800a7bc <HAL_PCD_MspInit+0xa0>)
 800a744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a746:	4a1d      	ldr	r2, [pc, #116]	@ (800a7bc <HAL_PCD_MspInit+0xa0>)
 800a748:	f043 0301 	orr.w	r3, r3, #1
 800a74c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a74e:	4b1b      	ldr	r3, [pc, #108]	@ (800a7bc <HAL_PCD_MspInit+0xa0>)
 800a750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	613b      	str	r3, [r7, #16]
 800a758:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a75a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a75e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a760:	2302      	movs	r3, #2
 800a762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a764:	2300      	movs	r3, #0
 800a766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a768:	2303      	movs	r3, #3
 800a76a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a76c:	230a      	movs	r3, #10
 800a76e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a770:	f107 0314 	add.w	r3, r7, #20
 800a774:	4619      	mov	r1, r3
 800a776:	4812      	ldr	r0, [pc, #72]	@ (800a7c0 <HAL_PCD_MspInit+0xa4>)
 800a778:	f7f8 fdc8 	bl	800330c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a77c:	4b0f      	ldr	r3, [pc, #60]	@ (800a7bc <HAL_PCD_MspInit+0xa0>)
 800a77e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a780:	4a0e      	ldr	r2, [pc, #56]	@ (800a7bc <HAL_PCD_MspInit+0xa0>)
 800a782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a786:	6353      	str	r3, [r2, #52]	@ 0x34
 800a788:	2300      	movs	r3, #0
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	4b0b      	ldr	r3, [pc, #44]	@ (800a7bc <HAL_PCD_MspInit+0xa0>)
 800a78e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a790:	4a0a      	ldr	r2, [pc, #40]	@ (800a7bc <HAL_PCD_MspInit+0xa0>)
 800a792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a796:	6453      	str	r3, [r2, #68]	@ 0x44
 800a798:	4b08      	ldr	r3, [pc, #32]	@ (800a7bc <HAL_PCD_MspInit+0xa0>)
 800a79a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a79c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	2043      	movs	r0, #67	@ 0x43
 800a7aa:	f7f8 f9e6 	bl	8002b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a7ae:	2043      	movs	r0, #67	@ 0x43
 800a7b0:	f7f8 f9ff 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a7b4:	bf00      	nop
 800a7b6:	3728      	adds	r7, #40	@ 0x28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	40023800 	.word	0x40023800
 800a7c0:	40020000 	.word	0x40020000

0800a7c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a7d8:	4619      	mov	r1, r3
 800a7da:	4610      	mov	r0, r2
 800a7dc:	f7fe fb49 	bl	8008e72 <USBD_LL_SetupStage>
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a7fa:	78fa      	ldrb	r2, [r7, #3]
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	4613      	mov	r3, r2
 800a800:	00db      	lsls	r3, r3, #3
 800a802:	4413      	add	r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	440b      	add	r3, r1
 800a808:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	4619      	mov	r1, r3
 800a812:	f7fe fb83 	bl	8008f1c <USBD_LL_DataOutStage>
}
 800a816:	bf00      	nop
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	460b      	mov	r3, r1
 800a828:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a830:	78fa      	ldrb	r2, [r7, #3]
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	4613      	mov	r3, r2
 800a836:	00db      	lsls	r3, r3, #3
 800a838:	4413      	add	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	440b      	add	r3, r1
 800a83e:	3320      	adds	r3, #32
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	78fb      	ldrb	r3, [r7, #3]
 800a844:	4619      	mov	r1, r3
 800a846:	f7fe fc1c 	bl	8009082 <USBD_LL_DataInStage>
}
 800a84a:	bf00      	nop
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe fd56 	bl	8009312 <USBD_LL_SOF>
}
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b084      	sub	sp, #16
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a876:	2301      	movs	r3, #1
 800a878:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	79db      	ldrb	r3, [r3, #7]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d102      	bne.n	800a888 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a882:	2300      	movs	r3, #0
 800a884:	73fb      	strb	r3, [r7, #15]
 800a886:	e008      	b.n	800a89a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	79db      	ldrb	r3, [r3, #7]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d102      	bne.n	800a896 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a890:	2301      	movs	r3, #1
 800a892:	73fb      	strb	r3, [r7, #15]
 800a894:	e001      	b.n	800a89a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a896:	f7f7 fd83 	bl	80023a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8a0:	7bfa      	ldrb	r2, [r7, #15]
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe fcf0 	bl	800928a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fc98 	bl	80091e6 <USBD_LL_Reset>
}
 800a8b6:	bf00      	nop
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fceb 	bl	80092aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	6812      	ldr	r2, [r2, #0]
 800a8e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8e6:	f043 0301 	orr.w	r3, r3, #1
 800a8ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	7adb      	ldrb	r3, [r3, #11]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d005      	beq.n	800a900 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8f4:	4b04      	ldr	r3, [pc, #16]	@ (800a908 <HAL_PCD_SuspendCallback+0x48>)
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	4a03      	ldr	r2, [pc, #12]	@ (800a908 <HAL_PCD_SuspendCallback+0x48>)
 800a8fa:	f043 0306 	orr.w	r3, r3, #6
 800a8fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a900:	bf00      	nop
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	e000ed00 	.word	0xe000ed00

0800a90c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe fce1 	bl	80092e2 <USBD_LL_Resume>
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	4611      	mov	r1, r2
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fe fd39 	bl	80093b6 <USBD_LL_IsoOUTIncomplete>
}
 800a944:	bf00      	nop
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a95e:	78fa      	ldrb	r2, [r7, #3]
 800a960:	4611      	mov	r1, r2
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe fcf5 	bl	8009352 <USBD_LL_IsoINIncomplete>
}
 800a968:	bf00      	nop
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fe fd4b 	bl	800941a <USBD_LL_DevConnected>
}
 800a984:	bf00      	nop
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fe fd48 	bl	8009430 <USBD_LL_DevDisconnected>
}
 800a9a0:	bf00      	nop
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d13c      	bne.n	800aa32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a9b8:	4a20      	ldr	r2, [pc, #128]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a1e      	ldr	r2, [pc, #120]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a9c8:	4b1c      	ldr	r3, [pc, #112]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a9ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a9d0:	4b1a      	ldr	r3, [pc, #104]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9d2:	2204      	movs	r2, #4
 800a9d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a9d6:	4b19      	ldr	r3, [pc, #100]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9d8:	2202      	movs	r2, #2
 800a9da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a9dc:	4b17      	ldr	r3, [pc, #92]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9de:	2200      	movs	r2, #0
 800a9e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a9e2:	4b16      	ldr	r3, [pc, #88]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a9e8:	4b14      	ldr	r3, [pc, #80]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a9ee:	4b13      	ldr	r3, [pc, #76]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a9f4:	4b11      	ldr	r3, [pc, #68]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a9fa:	4b10      	ldr	r3, [pc, #64]	@ (800aa3c <USBD_LL_Init+0x94>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aa00:	4b0e      	ldr	r3, [pc, #56]	@ (800aa3c <USBD_LL_Init+0x94>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aa06:	480d      	ldr	r0, [pc, #52]	@ (800aa3c <USBD_LL_Init+0x94>)
 800aa08:	f7f8 fe68 	bl	80036dc <HAL_PCD_Init>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aa12:	f7f7 fcc5 	bl	80023a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aa16:	2180      	movs	r1, #128	@ 0x80
 800aa18:	4808      	ldr	r0, [pc, #32]	@ (800aa3c <USBD_LL_Init+0x94>)
 800aa1a:	f7fa f894 	bl	8004b46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aa1e:	2240      	movs	r2, #64	@ 0x40
 800aa20:	2100      	movs	r1, #0
 800aa22:	4806      	ldr	r0, [pc, #24]	@ (800aa3c <USBD_LL_Init+0x94>)
 800aa24:	f7fa f848 	bl	8004ab8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aa28:	2280      	movs	r2, #128	@ 0x80
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	4803      	ldr	r0, [pc, #12]	@ (800aa3c <USBD_LL_Init+0x94>)
 800aa2e:	f7fa f843 	bl	8004ab8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	200019d0 	.word	0x200019d0

0800aa40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7f8 ff4f 	bl	80038fa <HAL_PCD_Start>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 f942 	bl	800acec <USBD_Get_USB_Status>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	4608      	mov	r0, r1
 800aa80:	4611      	mov	r1, r2
 800aa82:	461a      	mov	r2, r3
 800aa84:	4603      	mov	r3, r0
 800aa86:	70fb      	strb	r3, [r7, #3]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	70bb      	strb	r3, [r7, #2]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa9e:	78bb      	ldrb	r3, [r7, #2]
 800aaa0:	883a      	ldrh	r2, [r7, #0]
 800aaa2:	78f9      	ldrb	r1, [r7, #3]
 800aaa4:	f7f9 fc23 	bl	80042ee <HAL_PCD_EP_Open>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 f91c 	bl	800acec <USBD_Get_USB_Status>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	460b      	mov	r3, r1
 800aacc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aadc:	78fa      	ldrb	r2, [r7, #3]
 800aade:	4611      	mov	r1, r2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7f9 fc6e 	bl	80043c2 <HAL_PCD_EP_Close>
 800aae6:	4603      	mov	r3, r0
 800aae8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaea:	7bfb      	ldrb	r3, [r7, #15]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f000 f8fd 	bl	800acec <USBD_Get_USB_Status>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab1a:	78fa      	ldrb	r2, [r7, #3]
 800ab1c:	4611      	mov	r1, r2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f9 fd26 	bl	8004570 <HAL_PCD_EP_SetStall>
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 f8de 	bl	800acec <USBD_Get_USB_Status>
 800ab30:	4603      	mov	r3, r0
 800ab32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	460b      	mov	r3, r1
 800ab48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab58:	78fa      	ldrb	r2, [r7, #3]
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7f9 fd6a 	bl	8004636 <HAL_PCD_EP_ClrStall>
 800ab62:	4603      	mov	r3, r0
 800ab64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab66:	7bfb      	ldrb	r3, [r7, #15]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 f8bf 	bl	800acec <USBD_Get_USB_Status>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	da0b      	bge.n	800abb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab98:	78fb      	ldrb	r3, [r7, #3]
 800ab9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab9e:	68f9      	ldr	r1, [r7, #12]
 800aba0:	4613      	mov	r3, r2
 800aba2:	00db      	lsls	r3, r3, #3
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	440b      	add	r3, r1
 800abaa:	3316      	adds	r3, #22
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	e00b      	b.n	800abc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abb6:	68f9      	ldr	r1, [r7, #12]
 800abb8:	4613      	mov	r3, r2
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	4413      	add	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	440b      	add	r3, r1
 800abc2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800abc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800abee:	78fa      	ldrb	r2, [r7, #3]
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7f9 fb57 	bl	80042a6 <HAL_PCD_SetAddress>
 800abf8:	4603      	mov	r3, r0
 800abfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 f874 	bl	800acec <USBD_Get_USB_Status>
 800ac04:	4603      	mov	r3, r0
 800ac06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b086      	sub	sp, #24
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	60f8      	str	r0, [r7, #12]
 800ac1a:	607a      	str	r2, [r7, #4]
 800ac1c:	603b      	str	r3, [r7, #0]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac30:	7af9      	ldrb	r1, [r7, #11]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	f7f9 fc61 	bl	80044fc <HAL_PCD_EP_Transmit>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 f853 	bl	800acec <USBD_Get_USB_Status>
 800ac46:	4603      	mov	r3, r0
 800ac48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	607a      	str	r2, [r7, #4]
 800ac5e:	603b      	str	r3, [r7, #0]
 800ac60:	460b      	mov	r3, r1
 800ac62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac64:	2300      	movs	r3, #0
 800ac66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac72:	7af9      	ldrb	r1, [r7, #11]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	f7f9 fbed 	bl	8004456 <HAL_PCD_EP_Receive>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 f832 	bl	800acec <USBD_Get_USB_Status>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aca8:	78fa      	ldrb	r2, [r7, #3]
 800acaa:	4611      	mov	r1, r2
 800acac:	4618      	mov	r0, r3
 800acae:	f7f9 fc0d 	bl	80044cc <HAL_PCD_EP_GetRxCount>
 800acb2:	4603      	mov	r3, r0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800acc4:	4b03      	ldr	r3, [pc, #12]	@ (800acd4 <USBD_static_malloc+0x18>)
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	20001eb4 	.word	0x20001eb4

0800acd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]

}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	2b03      	cmp	r3, #3
 800acfe:	d817      	bhi.n	800ad30 <USBD_Get_USB_Status+0x44>
 800ad00:	a201      	add	r2, pc, #4	@ (adr r2, 800ad08 <USBD_Get_USB_Status+0x1c>)
 800ad02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad06:	bf00      	nop
 800ad08:	0800ad19 	.word	0x0800ad19
 800ad0c:	0800ad1f 	.word	0x0800ad1f
 800ad10:	0800ad25 	.word	0x0800ad25
 800ad14:	0800ad2b 	.word	0x0800ad2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad1c:	e00b      	b.n	800ad36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad1e:	2303      	movs	r3, #3
 800ad20:	73fb      	strb	r3, [r7, #15]
    break;
 800ad22:	e008      	b.n	800ad36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad24:	2301      	movs	r3, #1
 800ad26:	73fb      	strb	r3, [r7, #15]
    break;
 800ad28:	e005      	b.n	800ad36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad2e:	e002      	b.n	800ad36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad30:	2303      	movs	r3, #3
 800ad32:	73fb      	strb	r3, [r7, #15]
    break;
 800ad34:	bf00      	nop
  }
  return usb_status;
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <__cvt>:
 800ad44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad48:	ec57 6b10 	vmov	r6, r7, d0
 800ad4c:	2f00      	cmp	r7, #0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	4619      	mov	r1, r3
 800ad52:	463b      	mov	r3, r7
 800ad54:	bfbb      	ittet	lt
 800ad56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad5a:	461f      	movlt	r7, r3
 800ad5c:	2300      	movge	r3, #0
 800ad5e:	232d      	movlt	r3, #45	@ 0x2d
 800ad60:	700b      	strb	r3, [r1, #0]
 800ad62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad68:	4691      	mov	r9, r2
 800ad6a:	f023 0820 	bic.w	r8, r3, #32
 800ad6e:	bfbc      	itt	lt
 800ad70:	4632      	movlt	r2, r6
 800ad72:	4616      	movlt	r6, r2
 800ad74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad78:	d005      	beq.n	800ad86 <__cvt+0x42>
 800ad7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad7e:	d100      	bne.n	800ad82 <__cvt+0x3e>
 800ad80:	3401      	adds	r4, #1
 800ad82:	2102      	movs	r1, #2
 800ad84:	e000      	b.n	800ad88 <__cvt+0x44>
 800ad86:	2103      	movs	r1, #3
 800ad88:	ab03      	add	r3, sp, #12
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	ab02      	add	r3, sp, #8
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	ec47 6b10 	vmov	d0, r6, r7
 800ad94:	4653      	mov	r3, sl
 800ad96:	4622      	mov	r2, r4
 800ad98:	f000 fe7a 	bl	800ba90 <_dtoa_r>
 800ad9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ada0:	4605      	mov	r5, r0
 800ada2:	d119      	bne.n	800add8 <__cvt+0x94>
 800ada4:	f019 0f01 	tst.w	r9, #1
 800ada8:	d00e      	beq.n	800adc8 <__cvt+0x84>
 800adaa:	eb00 0904 	add.w	r9, r0, r4
 800adae:	2200      	movs	r2, #0
 800adb0:	2300      	movs	r3, #0
 800adb2:	4630      	mov	r0, r6
 800adb4:	4639      	mov	r1, r7
 800adb6:	f7f5 fe87 	bl	8000ac8 <__aeabi_dcmpeq>
 800adba:	b108      	cbz	r0, 800adc0 <__cvt+0x7c>
 800adbc:	f8cd 900c 	str.w	r9, [sp, #12]
 800adc0:	2230      	movs	r2, #48	@ 0x30
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	454b      	cmp	r3, r9
 800adc6:	d31e      	bcc.n	800ae06 <__cvt+0xc2>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adcc:	1b5b      	subs	r3, r3, r5
 800adce:	4628      	mov	r0, r5
 800add0:	6013      	str	r3, [r2, #0]
 800add2:	b004      	add	sp, #16
 800add4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800addc:	eb00 0904 	add.w	r9, r0, r4
 800ade0:	d1e5      	bne.n	800adae <__cvt+0x6a>
 800ade2:	7803      	ldrb	r3, [r0, #0]
 800ade4:	2b30      	cmp	r3, #48	@ 0x30
 800ade6:	d10a      	bne.n	800adfe <__cvt+0xba>
 800ade8:	2200      	movs	r2, #0
 800adea:	2300      	movs	r3, #0
 800adec:	4630      	mov	r0, r6
 800adee:	4639      	mov	r1, r7
 800adf0:	f7f5 fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800adf4:	b918      	cbnz	r0, 800adfe <__cvt+0xba>
 800adf6:	f1c4 0401 	rsb	r4, r4, #1
 800adfa:	f8ca 4000 	str.w	r4, [sl]
 800adfe:	f8da 3000 	ldr.w	r3, [sl]
 800ae02:	4499      	add	r9, r3
 800ae04:	e7d3      	b.n	800adae <__cvt+0x6a>
 800ae06:	1c59      	adds	r1, r3, #1
 800ae08:	9103      	str	r1, [sp, #12]
 800ae0a:	701a      	strb	r2, [r3, #0]
 800ae0c:	e7d9      	b.n	800adc2 <__cvt+0x7e>

0800ae0e <__exponent>:
 800ae0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae10:	2900      	cmp	r1, #0
 800ae12:	bfba      	itte	lt
 800ae14:	4249      	neglt	r1, r1
 800ae16:	232d      	movlt	r3, #45	@ 0x2d
 800ae18:	232b      	movge	r3, #43	@ 0x2b
 800ae1a:	2909      	cmp	r1, #9
 800ae1c:	7002      	strb	r2, [r0, #0]
 800ae1e:	7043      	strb	r3, [r0, #1]
 800ae20:	dd29      	ble.n	800ae76 <__exponent+0x68>
 800ae22:	f10d 0307 	add.w	r3, sp, #7
 800ae26:	461d      	mov	r5, r3
 800ae28:	270a      	movs	r7, #10
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae30:	fb07 1416 	mls	r4, r7, r6, r1
 800ae34:	3430      	adds	r4, #48	@ 0x30
 800ae36:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	2c63      	cmp	r4, #99	@ 0x63
 800ae3e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae42:	4631      	mov	r1, r6
 800ae44:	dcf1      	bgt.n	800ae2a <__exponent+0x1c>
 800ae46:	3130      	adds	r1, #48	@ 0x30
 800ae48:	1e94      	subs	r4, r2, #2
 800ae4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae4e:	1c41      	adds	r1, r0, #1
 800ae50:	4623      	mov	r3, r4
 800ae52:	42ab      	cmp	r3, r5
 800ae54:	d30a      	bcc.n	800ae6c <__exponent+0x5e>
 800ae56:	f10d 0309 	add.w	r3, sp, #9
 800ae5a:	1a9b      	subs	r3, r3, r2
 800ae5c:	42ac      	cmp	r4, r5
 800ae5e:	bf88      	it	hi
 800ae60:	2300      	movhi	r3, #0
 800ae62:	3302      	adds	r3, #2
 800ae64:	4403      	add	r3, r0
 800ae66:	1a18      	subs	r0, r3, r0
 800ae68:	b003      	add	sp, #12
 800ae6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae70:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae74:	e7ed      	b.n	800ae52 <__exponent+0x44>
 800ae76:	2330      	movs	r3, #48	@ 0x30
 800ae78:	3130      	adds	r1, #48	@ 0x30
 800ae7a:	7083      	strb	r3, [r0, #2]
 800ae7c:	70c1      	strb	r1, [r0, #3]
 800ae7e:	1d03      	adds	r3, r0, #4
 800ae80:	e7f1      	b.n	800ae66 <__exponent+0x58>
	...

0800ae84 <_printf_float>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	b08d      	sub	sp, #52	@ 0x34
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae90:	4616      	mov	r6, r2
 800ae92:	461f      	mov	r7, r3
 800ae94:	4605      	mov	r5, r0
 800ae96:	f000 fcdb 	bl	800b850 <_localeconv_r>
 800ae9a:	6803      	ldr	r3, [r0, #0]
 800ae9c:	9304      	str	r3, [sp, #16]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f5 f9e6 	bl	8000270 <strlen>
 800aea4:	2300      	movs	r3, #0
 800aea6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aea8:	f8d8 3000 	ldr.w	r3, [r8]
 800aeac:	9005      	str	r0, [sp, #20]
 800aeae:	3307      	adds	r3, #7
 800aeb0:	f023 0307 	bic.w	r3, r3, #7
 800aeb4:	f103 0208 	add.w	r2, r3, #8
 800aeb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aebc:	f8d4 b000 	ldr.w	fp, [r4]
 800aec0:	f8c8 2000 	str.w	r2, [r8]
 800aec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aec8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aecc:	9307      	str	r3, [sp, #28]
 800aece:	f8cd 8018 	str.w	r8, [sp, #24]
 800aed2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeda:	4b9c      	ldr	r3, [pc, #624]	@ (800b14c <_printf_float+0x2c8>)
 800aedc:	f04f 32ff 	mov.w	r2, #4294967295
 800aee0:	f7f5 fe24 	bl	8000b2c <__aeabi_dcmpun>
 800aee4:	bb70      	cbnz	r0, 800af44 <_printf_float+0xc0>
 800aee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeea:	4b98      	ldr	r3, [pc, #608]	@ (800b14c <_printf_float+0x2c8>)
 800aeec:	f04f 32ff 	mov.w	r2, #4294967295
 800aef0:	f7f5 fdfe 	bl	8000af0 <__aeabi_dcmple>
 800aef4:	bb30      	cbnz	r0, 800af44 <_printf_float+0xc0>
 800aef6:	2200      	movs	r2, #0
 800aef8:	2300      	movs	r3, #0
 800aefa:	4640      	mov	r0, r8
 800aefc:	4649      	mov	r1, r9
 800aefe:	f7f5 fded 	bl	8000adc <__aeabi_dcmplt>
 800af02:	b110      	cbz	r0, 800af0a <_printf_float+0x86>
 800af04:	232d      	movs	r3, #45	@ 0x2d
 800af06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af0a:	4a91      	ldr	r2, [pc, #580]	@ (800b150 <_printf_float+0x2cc>)
 800af0c:	4b91      	ldr	r3, [pc, #580]	@ (800b154 <_printf_float+0x2d0>)
 800af0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af12:	bf94      	ite	ls
 800af14:	4690      	movls	r8, r2
 800af16:	4698      	movhi	r8, r3
 800af18:	2303      	movs	r3, #3
 800af1a:	6123      	str	r3, [r4, #16]
 800af1c:	f02b 0304 	bic.w	r3, fp, #4
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	f04f 0900 	mov.w	r9, #0
 800af26:	9700      	str	r7, [sp, #0]
 800af28:	4633      	mov	r3, r6
 800af2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af2c:	4621      	mov	r1, r4
 800af2e:	4628      	mov	r0, r5
 800af30:	f000 f9d2 	bl	800b2d8 <_printf_common>
 800af34:	3001      	adds	r0, #1
 800af36:	f040 808d 	bne.w	800b054 <_printf_float+0x1d0>
 800af3a:	f04f 30ff 	mov.w	r0, #4294967295
 800af3e:	b00d      	add	sp, #52	@ 0x34
 800af40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af44:	4642      	mov	r2, r8
 800af46:	464b      	mov	r3, r9
 800af48:	4640      	mov	r0, r8
 800af4a:	4649      	mov	r1, r9
 800af4c:	f7f5 fdee 	bl	8000b2c <__aeabi_dcmpun>
 800af50:	b140      	cbz	r0, 800af64 <_printf_float+0xe0>
 800af52:	464b      	mov	r3, r9
 800af54:	2b00      	cmp	r3, #0
 800af56:	bfbc      	itt	lt
 800af58:	232d      	movlt	r3, #45	@ 0x2d
 800af5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af5e:	4a7e      	ldr	r2, [pc, #504]	@ (800b158 <_printf_float+0x2d4>)
 800af60:	4b7e      	ldr	r3, [pc, #504]	@ (800b15c <_printf_float+0x2d8>)
 800af62:	e7d4      	b.n	800af0e <_printf_float+0x8a>
 800af64:	6863      	ldr	r3, [r4, #4]
 800af66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af6a:	9206      	str	r2, [sp, #24]
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	d13b      	bne.n	800afe8 <_printf_float+0x164>
 800af70:	2306      	movs	r3, #6
 800af72:	6063      	str	r3, [r4, #4]
 800af74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af78:	2300      	movs	r3, #0
 800af7a:	6022      	str	r2, [r4, #0]
 800af7c:	9303      	str	r3, [sp, #12]
 800af7e:	ab0a      	add	r3, sp, #40	@ 0x28
 800af80:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af84:	ab09      	add	r3, sp, #36	@ 0x24
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	6861      	ldr	r1, [r4, #4]
 800af8a:	ec49 8b10 	vmov	d0, r8, r9
 800af8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af92:	4628      	mov	r0, r5
 800af94:	f7ff fed6 	bl	800ad44 <__cvt>
 800af98:	9b06      	ldr	r3, [sp, #24]
 800af9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af9c:	2b47      	cmp	r3, #71	@ 0x47
 800af9e:	4680      	mov	r8, r0
 800afa0:	d129      	bne.n	800aff6 <_printf_float+0x172>
 800afa2:	1cc8      	adds	r0, r1, #3
 800afa4:	db02      	blt.n	800afac <_printf_float+0x128>
 800afa6:	6863      	ldr	r3, [r4, #4]
 800afa8:	4299      	cmp	r1, r3
 800afaa:	dd41      	ble.n	800b030 <_printf_float+0x1ac>
 800afac:	f1aa 0a02 	sub.w	sl, sl, #2
 800afb0:	fa5f fa8a 	uxtb.w	sl, sl
 800afb4:	3901      	subs	r1, #1
 800afb6:	4652      	mov	r2, sl
 800afb8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800afbc:	9109      	str	r1, [sp, #36]	@ 0x24
 800afbe:	f7ff ff26 	bl	800ae0e <__exponent>
 800afc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afc4:	1813      	adds	r3, r2, r0
 800afc6:	2a01      	cmp	r2, #1
 800afc8:	4681      	mov	r9, r0
 800afca:	6123      	str	r3, [r4, #16]
 800afcc:	dc02      	bgt.n	800afd4 <_printf_float+0x150>
 800afce:	6822      	ldr	r2, [r4, #0]
 800afd0:	07d2      	lsls	r2, r2, #31
 800afd2:	d501      	bpl.n	800afd8 <_printf_float+0x154>
 800afd4:	3301      	adds	r3, #1
 800afd6:	6123      	str	r3, [r4, #16]
 800afd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0a2      	beq.n	800af26 <_printf_float+0xa2>
 800afe0:	232d      	movs	r3, #45	@ 0x2d
 800afe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afe6:	e79e      	b.n	800af26 <_printf_float+0xa2>
 800afe8:	9a06      	ldr	r2, [sp, #24]
 800afea:	2a47      	cmp	r2, #71	@ 0x47
 800afec:	d1c2      	bne.n	800af74 <_printf_float+0xf0>
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1c0      	bne.n	800af74 <_printf_float+0xf0>
 800aff2:	2301      	movs	r3, #1
 800aff4:	e7bd      	b.n	800af72 <_printf_float+0xee>
 800aff6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800affa:	d9db      	bls.n	800afb4 <_printf_float+0x130>
 800affc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b000:	d118      	bne.n	800b034 <_printf_float+0x1b0>
 800b002:	2900      	cmp	r1, #0
 800b004:	6863      	ldr	r3, [r4, #4]
 800b006:	dd0b      	ble.n	800b020 <_printf_float+0x19c>
 800b008:	6121      	str	r1, [r4, #16]
 800b00a:	b913      	cbnz	r3, 800b012 <_printf_float+0x18e>
 800b00c:	6822      	ldr	r2, [r4, #0]
 800b00e:	07d0      	lsls	r0, r2, #31
 800b010:	d502      	bpl.n	800b018 <_printf_float+0x194>
 800b012:	3301      	adds	r3, #1
 800b014:	440b      	add	r3, r1
 800b016:	6123      	str	r3, [r4, #16]
 800b018:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b01a:	f04f 0900 	mov.w	r9, #0
 800b01e:	e7db      	b.n	800afd8 <_printf_float+0x154>
 800b020:	b913      	cbnz	r3, 800b028 <_printf_float+0x1a4>
 800b022:	6822      	ldr	r2, [r4, #0]
 800b024:	07d2      	lsls	r2, r2, #31
 800b026:	d501      	bpl.n	800b02c <_printf_float+0x1a8>
 800b028:	3302      	adds	r3, #2
 800b02a:	e7f4      	b.n	800b016 <_printf_float+0x192>
 800b02c:	2301      	movs	r3, #1
 800b02e:	e7f2      	b.n	800b016 <_printf_float+0x192>
 800b030:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b036:	4299      	cmp	r1, r3
 800b038:	db05      	blt.n	800b046 <_printf_float+0x1c2>
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	6121      	str	r1, [r4, #16]
 800b03e:	07d8      	lsls	r0, r3, #31
 800b040:	d5ea      	bpl.n	800b018 <_printf_float+0x194>
 800b042:	1c4b      	adds	r3, r1, #1
 800b044:	e7e7      	b.n	800b016 <_printf_float+0x192>
 800b046:	2900      	cmp	r1, #0
 800b048:	bfd4      	ite	le
 800b04a:	f1c1 0202 	rsble	r2, r1, #2
 800b04e:	2201      	movgt	r2, #1
 800b050:	4413      	add	r3, r2
 800b052:	e7e0      	b.n	800b016 <_printf_float+0x192>
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	055a      	lsls	r2, r3, #21
 800b058:	d407      	bmi.n	800b06a <_printf_float+0x1e6>
 800b05a:	6923      	ldr	r3, [r4, #16]
 800b05c:	4642      	mov	r2, r8
 800b05e:	4631      	mov	r1, r6
 800b060:	4628      	mov	r0, r5
 800b062:	47b8      	blx	r7
 800b064:	3001      	adds	r0, #1
 800b066:	d12b      	bne.n	800b0c0 <_printf_float+0x23c>
 800b068:	e767      	b.n	800af3a <_printf_float+0xb6>
 800b06a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b06e:	f240 80dd 	bls.w	800b22c <_printf_float+0x3a8>
 800b072:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b076:	2200      	movs	r2, #0
 800b078:	2300      	movs	r3, #0
 800b07a:	f7f5 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800b07e:	2800      	cmp	r0, #0
 800b080:	d033      	beq.n	800b0ea <_printf_float+0x266>
 800b082:	4a37      	ldr	r2, [pc, #220]	@ (800b160 <_printf_float+0x2dc>)
 800b084:	2301      	movs	r3, #1
 800b086:	4631      	mov	r1, r6
 800b088:	4628      	mov	r0, r5
 800b08a:	47b8      	blx	r7
 800b08c:	3001      	adds	r0, #1
 800b08e:	f43f af54 	beq.w	800af3a <_printf_float+0xb6>
 800b092:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b096:	4543      	cmp	r3, r8
 800b098:	db02      	blt.n	800b0a0 <_printf_float+0x21c>
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	07d8      	lsls	r0, r3, #31
 800b09e:	d50f      	bpl.n	800b0c0 <_printf_float+0x23c>
 800b0a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	47b8      	blx	r7
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	f43f af45 	beq.w	800af3a <_printf_float+0xb6>
 800b0b0:	f04f 0900 	mov.w	r9, #0
 800b0b4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0b8:	f104 0a1a 	add.w	sl, r4, #26
 800b0bc:	45c8      	cmp	r8, r9
 800b0be:	dc09      	bgt.n	800b0d4 <_printf_float+0x250>
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	079b      	lsls	r3, r3, #30
 800b0c4:	f100 8103 	bmi.w	800b2ce <_printf_float+0x44a>
 800b0c8:	68e0      	ldr	r0, [r4, #12]
 800b0ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0cc:	4298      	cmp	r0, r3
 800b0ce:	bfb8      	it	lt
 800b0d0:	4618      	movlt	r0, r3
 800b0d2:	e734      	b.n	800af3e <_printf_float+0xba>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	4652      	mov	r2, sl
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4628      	mov	r0, r5
 800b0dc:	47b8      	blx	r7
 800b0de:	3001      	adds	r0, #1
 800b0e0:	f43f af2b 	beq.w	800af3a <_printf_float+0xb6>
 800b0e4:	f109 0901 	add.w	r9, r9, #1
 800b0e8:	e7e8      	b.n	800b0bc <_printf_float+0x238>
 800b0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dc39      	bgt.n	800b164 <_printf_float+0x2e0>
 800b0f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b160 <_printf_float+0x2dc>)
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	47b8      	blx	r7
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	f43f af1d 	beq.w	800af3a <_printf_float+0xb6>
 800b100:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b104:	ea59 0303 	orrs.w	r3, r9, r3
 800b108:	d102      	bne.n	800b110 <_printf_float+0x28c>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	07d9      	lsls	r1, r3, #31
 800b10e:	d5d7      	bpl.n	800b0c0 <_printf_float+0x23c>
 800b110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b114:	4631      	mov	r1, r6
 800b116:	4628      	mov	r0, r5
 800b118:	47b8      	blx	r7
 800b11a:	3001      	adds	r0, #1
 800b11c:	f43f af0d 	beq.w	800af3a <_printf_float+0xb6>
 800b120:	f04f 0a00 	mov.w	sl, #0
 800b124:	f104 0b1a 	add.w	fp, r4, #26
 800b128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b12a:	425b      	negs	r3, r3
 800b12c:	4553      	cmp	r3, sl
 800b12e:	dc01      	bgt.n	800b134 <_printf_float+0x2b0>
 800b130:	464b      	mov	r3, r9
 800b132:	e793      	b.n	800b05c <_printf_float+0x1d8>
 800b134:	2301      	movs	r3, #1
 800b136:	465a      	mov	r2, fp
 800b138:	4631      	mov	r1, r6
 800b13a:	4628      	mov	r0, r5
 800b13c:	47b8      	blx	r7
 800b13e:	3001      	adds	r0, #1
 800b140:	f43f aefb 	beq.w	800af3a <_printf_float+0xb6>
 800b144:	f10a 0a01 	add.w	sl, sl, #1
 800b148:	e7ee      	b.n	800b128 <_printf_float+0x2a4>
 800b14a:	bf00      	nop
 800b14c:	7fefffff 	.word	0x7fefffff
 800b150:	0800f110 	.word	0x0800f110
 800b154:	0800f114 	.word	0x0800f114
 800b158:	0800f118 	.word	0x0800f118
 800b15c:	0800f11c 	.word	0x0800f11c
 800b160:	0800f120 	.word	0x0800f120
 800b164:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b166:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b16a:	4553      	cmp	r3, sl
 800b16c:	bfa8      	it	ge
 800b16e:	4653      	movge	r3, sl
 800b170:	2b00      	cmp	r3, #0
 800b172:	4699      	mov	r9, r3
 800b174:	dc36      	bgt.n	800b1e4 <_printf_float+0x360>
 800b176:	f04f 0b00 	mov.w	fp, #0
 800b17a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b17e:	f104 021a 	add.w	r2, r4, #26
 800b182:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b184:	9306      	str	r3, [sp, #24]
 800b186:	eba3 0309 	sub.w	r3, r3, r9
 800b18a:	455b      	cmp	r3, fp
 800b18c:	dc31      	bgt.n	800b1f2 <_printf_float+0x36e>
 800b18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b190:	459a      	cmp	sl, r3
 800b192:	dc3a      	bgt.n	800b20a <_printf_float+0x386>
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	07da      	lsls	r2, r3, #31
 800b198:	d437      	bmi.n	800b20a <_printf_float+0x386>
 800b19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b19c:	ebaa 0903 	sub.w	r9, sl, r3
 800b1a0:	9b06      	ldr	r3, [sp, #24]
 800b1a2:	ebaa 0303 	sub.w	r3, sl, r3
 800b1a6:	4599      	cmp	r9, r3
 800b1a8:	bfa8      	it	ge
 800b1aa:	4699      	movge	r9, r3
 800b1ac:	f1b9 0f00 	cmp.w	r9, #0
 800b1b0:	dc33      	bgt.n	800b21a <_printf_float+0x396>
 800b1b2:	f04f 0800 	mov.w	r8, #0
 800b1b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1ba:	f104 0b1a 	add.w	fp, r4, #26
 800b1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c0:	ebaa 0303 	sub.w	r3, sl, r3
 800b1c4:	eba3 0309 	sub.w	r3, r3, r9
 800b1c8:	4543      	cmp	r3, r8
 800b1ca:	f77f af79 	ble.w	800b0c0 <_printf_float+0x23c>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	465a      	mov	r2, fp
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b8      	blx	r7
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f43f aeae 	beq.w	800af3a <_printf_float+0xb6>
 800b1de:	f108 0801 	add.w	r8, r8, #1
 800b1e2:	e7ec      	b.n	800b1be <_printf_float+0x33a>
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d1c2      	bne.n	800b176 <_printf_float+0x2f2>
 800b1f0:	e6a3      	b.n	800af3a <_printf_float+0xb6>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	9206      	str	r2, [sp, #24]
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f ae9c 	beq.w	800af3a <_printf_float+0xb6>
 800b202:	9a06      	ldr	r2, [sp, #24]
 800b204:	f10b 0b01 	add.w	fp, fp, #1
 800b208:	e7bb      	b.n	800b182 <_printf_float+0x2fe>
 800b20a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b20e:	4631      	mov	r1, r6
 800b210:	4628      	mov	r0, r5
 800b212:	47b8      	blx	r7
 800b214:	3001      	adds	r0, #1
 800b216:	d1c0      	bne.n	800b19a <_printf_float+0x316>
 800b218:	e68f      	b.n	800af3a <_printf_float+0xb6>
 800b21a:	9a06      	ldr	r2, [sp, #24]
 800b21c:	464b      	mov	r3, r9
 800b21e:	4442      	add	r2, r8
 800b220:	4631      	mov	r1, r6
 800b222:	4628      	mov	r0, r5
 800b224:	47b8      	blx	r7
 800b226:	3001      	adds	r0, #1
 800b228:	d1c3      	bne.n	800b1b2 <_printf_float+0x32e>
 800b22a:	e686      	b.n	800af3a <_printf_float+0xb6>
 800b22c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b230:	f1ba 0f01 	cmp.w	sl, #1
 800b234:	dc01      	bgt.n	800b23a <_printf_float+0x3b6>
 800b236:	07db      	lsls	r3, r3, #31
 800b238:	d536      	bpl.n	800b2a8 <_printf_float+0x424>
 800b23a:	2301      	movs	r3, #1
 800b23c:	4642      	mov	r2, r8
 800b23e:	4631      	mov	r1, r6
 800b240:	4628      	mov	r0, r5
 800b242:	47b8      	blx	r7
 800b244:	3001      	adds	r0, #1
 800b246:	f43f ae78 	beq.w	800af3a <_printf_float+0xb6>
 800b24a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b24e:	4631      	mov	r1, r6
 800b250:	4628      	mov	r0, r5
 800b252:	47b8      	blx	r7
 800b254:	3001      	adds	r0, #1
 800b256:	f43f ae70 	beq.w	800af3a <_printf_float+0xb6>
 800b25a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b25e:	2200      	movs	r2, #0
 800b260:	2300      	movs	r3, #0
 800b262:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b266:	f7f5 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b26a:	b9c0      	cbnz	r0, 800b29e <_printf_float+0x41a>
 800b26c:	4653      	mov	r3, sl
 800b26e:	f108 0201 	add.w	r2, r8, #1
 800b272:	4631      	mov	r1, r6
 800b274:	4628      	mov	r0, r5
 800b276:	47b8      	blx	r7
 800b278:	3001      	adds	r0, #1
 800b27a:	d10c      	bne.n	800b296 <_printf_float+0x412>
 800b27c:	e65d      	b.n	800af3a <_printf_float+0xb6>
 800b27e:	2301      	movs	r3, #1
 800b280:	465a      	mov	r2, fp
 800b282:	4631      	mov	r1, r6
 800b284:	4628      	mov	r0, r5
 800b286:	47b8      	blx	r7
 800b288:	3001      	adds	r0, #1
 800b28a:	f43f ae56 	beq.w	800af3a <_printf_float+0xb6>
 800b28e:	f108 0801 	add.w	r8, r8, #1
 800b292:	45d0      	cmp	r8, sl
 800b294:	dbf3      	blt.n	800b27e <_printf_float+0x3fa>
 800b296:	464b      	mov	r3, r9
 800b298:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b29c:	e6df      	b.n	800b05e <_printf_float+0x1da>
 800b29e:	f04f 0800 	mov.w	r8, #0
 800b2a2:	f104 0b1a 	add.w	fp, r4, #26
 800b2a6:	e7f4      	b.n	800b292 <_printf_float+0x40e>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	4642      	mov	r2, r8
 800b2ac:	e7e1      	b.n	800b272 <_printf_float+0x3ee>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	464a      	mov	r2, r9
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47b8      	blx	r7
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	f43f ae3e 	beq.w	800af3a <_printf_float+0xb6>
 800b2be:	f108 0801 	add.w	r8, r8, #1
 800b2c2:	68e3      	ldr	r3, [r4, #12]
 800b2c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b2c6:	1a5b      	subs	r3, r3, r1
 800b2c8:	4543      	cmp	r3, r8
 800b2ca:	dcf0      	bgt.n	800b2ae <_printf_float+0x42a>
 800b2cc:	e6fc      	b.n	800b0c8 <_printf_float+0x244>
 800b2ce:	f04f 0800 	mov.w	r8, #0
 800b2d2:	f104 0919 	add.w	r9, r4, #25
 800b2d6:	e7f4      	b.n	800b2c2 <_printf_float+0x43e>

0800b2d8 <_printf_common>:
 800b2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2dc:	4616      	mov	r6, r2
 800b2de:	4698      	mov	r8, r3
 800b2e0:	688a      	ldr	r2, [r1, #8]
 800b2e2:	690b      	ldr	r3, [r1, #16]
 800b2e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	bfb8      	it	lt
 800b2ec:	4613      	movlt	r3, r2
 800b2ee:	6033      	str	r3, [r6, #0]
 800b2f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2f4:	4607      	mov	r7, r0
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	b10a      	cbz	r2, 800b2fe <_printf_common+0x26>
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	6033      	str	r3, [r6, #0]
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	0699      	lsls	r1, r3, #26
 800b302:	bf42      	ittt	mi
 800b304:	6833      	ldrmi	r3, [r6, #0]
 800b306:	3302      	addmi	r3, #2
 800b308:	6033      	strmi	r3, [r6, #0]
 800b30a:	6825      	ldr	r5, [r4, #0]
 800b30c:	f015 0506 	ands.w	r5, r5, #6
 800b310:	d106      	bne.n	800b320 <_printf_common+0x48>
 800b312:	f104 0a19 	add.w	sl, r4, #25
 800b316:	68e3      	ldr	r3, [r4, #12]
 800b318:	6832      	ldr	r2, [r6, #0]
 800b31a:	1a9b      	subs	r3, r3, r2
 800b31c:	42ab      	cmp	r3, r5
 800b31e:	dc26      	bgt.n	800b36e <_printf_common+0x96>
 800b320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b324:	6822      	ldr	r2, [r4, #0]
 800b326:	3b00      	subs	r3, #0
 800b328:	bf18      	it	ne
 800b32a:	2301      	movne	r3, #1
 800b32c:	0692      	lsls	r2, r2, #26
 800b32e:	d42b      	bmi.n	800b388 <_printf_common+0xb0>
 800b330:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b334:	4641      	mov	r1, r8
 800b336:	4638      	mov	r0, r7
 800b338:	47c8      	blx	r9
 800b33a:	3001      	adds	r0, #1
 800b33c:	d01e      	beq.n	800b37c <_printf_common+0xa4>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	6922      	ldr	r2, [r4, #16]
 800b342:	f003 0306 	and.w	r3, r3, #6
 800b346:	2b04      	cmp	r3, #4
 800b348:	bf02      	ittt	eq
 800b34a:	68e5      	ldreq	r5, [r4, #12]
 800b34c:	6833      	ldreq	r3, [r6, #0]
 800b34e:	1aed      	subeq	r5, r5, r3
 800b350:	68a3      	ldr	r3, [r4, #8]
 800b352:	bf0c      	ite	eq
 800b354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b358:	2500      	movne	r5, #0
 800b35a:	4293      	cmp	r3, r2
 800b35c:	bfc4      	itt	gt
 800b35e:	1a9b      	subgt	r3, r3, r2
 800b360:	18ed      	addgt	r5, r5, r3
 800b362:	2600      	movs	r6, #0
 800b364:	341a      	adds	r4, #26
 800b366:	42b5      	cmp	r5, r6
 800b368:	d11a      	bne.n	800b3a0 <_printf_common+0xc8>
 800b36a:	2000      	movs	r0, #0
 800b36c:	e008      	b.n	800b380 <_printf_common+0xa8>
 800b36e:	2301      	movs	r3, #1
 800b370:	4652      	mov	r2, sl
 800b372:	4641      	mov	r1, r8
 800b374:	4638      	mov	r0, r7
 800b376:	47c8      	blx	r9
 800b378:	3001      	adds	r0, #1
 800b37a:	d103      	bne.n	800b384 <_printf_common+0xac>
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295
 800b380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b384:	3501      	adds	r5, #1
 800b386:	e7c6      	b.n	800b316 <_printf_common+0x3e>
 800b388:	18e1      	adds	r1, r4, r3
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	2030      	movs	r0, #48	@ 0x30
 800b38e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b392:	4422      	add	r2, r4
 800b394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b39c:	3302      	adds	r3, #2
 800b39e:	e7c7      	b.n	800b330 <_printf_common+0x58>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	4622      	mov	r2, r4
 800b3a4:	4641      	mov	r1, r8
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	47c8      	blx	r9
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	d0e6      	beq.n	800b37c <_printf_common+0xa4>
 800b3ae:	3601      	adds	r6, #1
 800b3b0:	e7d9      	b.n	800b366 <_printf_common+0x8e>
	...

0800b3b4 <_printf_i>:
 800b3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b8:	7e0f      	ldrb	r7, [r1, #24]
 800b3ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3bc:	2f78      	cmp	r7, #120	@ 0x78
 800b3be:	4691      	mov	r9, r2
 800b3c0:	4680      	mov	r8, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	469a      	mov	sl, r3
 800b3c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3ca:	d807      	bhi.n	800b3dc <_printf_i+0x28>
 800b3cc:	2f62      	cmp	r7, #98	@ 0x62
 800b3ce:	d80a      	bhi.n	800b3e6 <_printf_i+0x32>
 800b3d0:	2f00      	cmp	r7, #0
 800b3d2:	f000 80d2 	beq.w	800b57a <_printf_i+0x1c6>
 800b3d6:	2f58      	cmp	r7, #88	@ 0x58
 800b3d8:	f000 80b9 	beq.w	800b54e <_printf_i+0x19a>
 800b3dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3e4:	e03a      	b.n	800b45c <_printf_i+0xa8>
 800b3e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3ea:	2b15      	cmp	r3, #21
 800b3ec:	d8f6      	bhi.n	800b3dc <_printf_i+0x28>
 800b3ee:	a101      	add	r1, pc, #4	@ (adr r1, 800b3f4 <_printf_i+0x40>)
 800b3f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3f4:	0800b44d 	.word	0x0800b44d
 800b3f8:	0800b461 	.word	0x0800b461
 800b3fc:	0800b3dd 	.word	0x0800b3dd
 800b400:	0800b3dd 	.word	0x0800b3dd
 800b404:	0800b3dd 	.word	0x0800b3dd
 800b408:	0800b3dd 	.word	0x0800b3dd
 800b40c:	0800b461 	.word	0x0800b461
 800b410:	0800b3dd 	.word	0x0800b3dd
 800b414:	0800b3dd 	.word	0x0800b3dd
 800b418:	0800b3dd 	.word	0x0800b3dd
 800b41c:	0800b3dd 	.word	0x0800b3dd
 800b420:	0800b561 	.word	0x0800b561
 800b424:	0800b48b 	.word	0x0800b48b
 800b428:	0800b51b 	.word	0x0800b51b
 800b42c:	0800b3dd 	.word	0x0800b3dd
 800b430:	0800b3dd 	.word	0x0800b3dd
 800b434:	0800b583 	.word	0x0800b583
 800b438:	0800b3dd 	.word	0x0800b3dd
 800b43c:	0800b48b 	.word	0x0800b48b
 800b440:	0800b3dd 	.word	0x0800b3dd
 800b444:	0800b3dd 	.word	0x0800b3dd
 800b448:	0800b523 	.word	0x0800b523
 800b44c:	6833      	ldr	r3, [r6, #0]
 800b44e:	1d1a      	adds	r2, r3, #4
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	6032      	str	r2, [r6, #0]
 800b454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b45c:	2301      	movs	r3, #1
 800b45e:	e09d      	b.n	800b59c <_printf_i+0x1e8>
 800b460:	6833      	ldr	r3, [r6, #0]
 800b462:	6820      	ldr	r0, [r4, #0]
 800b464:	1d19      	adds	r1, r3, #4
 800b466:	6031      	str	r1, [r6, #0]
 800b468:	0606      	lsls	r6, r0, #24
 800b46a:	d501      	bpl.n	800b470 <_printf_i+0xbc>
 800b46c:	681d      	ldr	r5, [r3, #0]
 800b46e:	e003      	b.n	800b478 <_printf_i+0xc4>
 800b470:	0645      	lsls	r5, r0, #25
 800b472:	d5fb      	bpl.n	800b46c <_printf_i+0xb8>
 800b474:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b478:	2d00      	cmp	r5, #0
 800b47a:	da03      	bge.n	800b484 <_printf_i+0xd0>
 800b47c:	232d      	movs	r3, #45	@ 0x2d
 800b47e:	426d      	negs	r5, r5
 800b480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b484:	4859      	ldr	r0, [pc, #356]	@ (800b5ec <_printf_i+0x238>)
 800b486:	230a      	movs	r3, #10
 800b488:	e011      	b.n	800b4ae <_printf_i+0xfa>
 800b48a:	6821      	ldr	r1, [r4, #0]
 800b48c:	6833      	ldr	r3, [r6, #0]
 800b48e:	0608      	lsls	r0, r1, #24
 800b490:	f853 5b04 	ldr.w	r5, [r3], #4
 800b494:	d402      	bmi.n	800b49c <_printf_i+0xe8>
 800b496:	0649      	lsls	r1, r1, #25
 800b498:	bf48      	it	mi
 800b49a:	b2ad      	uxthmi	r5, r5
 800b49c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b49e:	4853      	ldr	r0, [pc, #332]	@ (800b5ec <_printf_i+0x238>)
 800b4a0:	6033      	str	r3, [r6, #0]
 800b4a2:	bf14      	ite	ne
 800b4a4:	230a      	movne	r3, #10
 800b4a6:	2308      	moveq	r3, #8
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4ae:	6866      	ldr	r6, [r4, #4]
 800b4b0:	60a6      	str	r6, [r4, #8]
 800b4b2:	2e00      	cmp	r6, #0
 800b4b4:	bfa2      	ittt	ge
 800b4b6:	6821      	ldrge	r1, [r4, #0]
 800b4b8:	f021 0104 	bicge.w	r1, r1, #4
 800b4bc:	6021      	strge	r1, [r4, #0]
 800b4be:	b90d      	cbnz	r5, 800b4c4 <_printf_i+0x110>
 800b4c0:	2e00      	cmp	r6, #0
 800b4c2:	d04b      	beq.n	800b55c <_printf_i+0x1a8>
 800b4c4:	4616      	mov	r6, r2
 800b4c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4ca:	fb03 5711 	mls	r7, r3, r1, r5
 800b4ce:	5dc7      	ldrb	r7, [r0, r7]
 800b4d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4d4:	462f      	mov	r7, r5
 800b4d6:	42bb      	cmp	r3, r7
 800b4d8:	460d      	mov	r5, r1
 800b4da:	d9f4      	bls.n	800b4c6 <_printf_i+0x112>
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	d10b      	bne.n	800b4f8 <_printf_i+0x144>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	07df      	lsls	r7, r3, #31
 800b4e4:	d508      	bpl.n	800b4f8 <_printf_i+0x144>
 800b4e6:	6923      	ldr	r3, [r4, #16]
 800b4e8:	6861      	ldr	r1, [r4, #4]
 800b4ea:	4299      	cmp	r1, r3
 800b4ec:	bfde      	ittt	le
 800b4ee:	2330      	movle	r3, #48	@ 0x30
 800b4f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4f8:	1b92      	subs	r2, r2, r6
 800b4fa:	6122      	str	r2, [r4, #16]
 800b4fc:	f8cd a000 	str.w	sl, [sp]
 800b500:	464b      	mov	r3, r9
 800b502:	aa03      	add	r2, sp, #12
 800b504:	4621      	mov	r1, r4
 800b506:	4640      	mov	r0, r8
 800b508:	f7ff fee6 	bl	800b2d8 <_printf_common>
 800b50c:	3001      	adds	r0, #1
 800b50e:	d14a      	bne.n	800b5a6 <_printf_i+0x1f2>
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	b004      	add	sp, #16
 800b516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	f043 0320 	orr.w	r3, r3, #32
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	4833      	ldr	r0, [pc, #204]	@ (800b5f0 <_printf_i+0x23c>)
 800b524:	2778      	movs	r7, #120	@ 0x78
 800b526:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	6831      	ldr	r1, [r6, #0]
 800b52e:	061f      	lsls	r7, r3, #24
 800b530:	f851 5b04 	ldr.w	r5, [r1], #4
 800b534:	d402      	bmi.n	800b53c <_printf_i+0x188>
 800b536:	065f      	lsls	r7, r3, #25
 800b538:	bf48      	it	mi
 800b53a:	b2ad      	uxthmi	r5, r5
 800b53c:	6031      	str	r1, [r6, #0]
 800b53e:	07d9      	lsls	r1, r3, #31
 800b540:	bf44      	itt	mi
 800b542:	f043 0320 	orrmi.w	r3, r3, #32
 800b546:	6023      	strmi	r3, [r4, #0]
 800b548:	b11d      	cbz	r5, 800b552 <_printf_i+0x19e>
 800b54a:	2310      	movs	r3, #16
 800b54c:	e7ac      	b.n	800b4a8 <_printf_i+0xf4>
 800b54e:	4827      	ldr	r0, [pc, #156]	@ (800b5ec <_printf_i+0x238>)
 800b550:	e7e9      	b.n	800b526 <_printf_i+0x172>
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	f023 0320 	bic.w	r3, r3, #32
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	e7f6      	b.n	800b54a <_printf_i+0x196>
 800b55c:	4616      	mov	r6, r2
 800b55e:	e7bd      	b.n	800b4dc <_printf_i+0x128>
 800b560:	6833      	ldr	r3, [r6, #0]
 800b562:	6825      	ldr	r5, [r4, #0]
 800b564:	6961      	ldr	r1, [r4, #20]
 800b566:	1d18      	adds	r0, r3, #4
 800b568:	6030      	str	r0, [r6, #0]
 800b56a:	062e      	lsls	r6, r5, #24
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	d501      	bpl.n	800b574 <_printf_i+0x1c0>
 800b570:	6019      	str	r1, [r3, #0]
 800b572:	e002      	b.n	800b57a <_printf_i+0x1c6>
 800b574:	0668      	lsls	r0, r5, #25
 800b576:	d5fb      	bpl.n	800b570 <_printf_i+0x1bc>
 800b578:	8019      	strh	r1, [r3, #0]
 800b57a:	2300      	movs	r3, #0
 800b57c:	6123      	str	r3, [r4, #16]
 800b57e:	4616      	mov	r6, r2
 800b580:	e7bc      	b.n	800b4fc <_printf_i+0x148>
 800b582:	6833      	ldr	r3, [r6, #0]
 800b584:	1d1a      	adds	r2, r3, #4
 800b586:	6032      	str	r2, [r6, #0]
 800b588:	681e      	ldr	r6, [r3, #0]
 800b58a:	6862      	ldr	r2, [r4, #4]
 800b58c:	2100      	movs	r1, #0
 800b58e:	4630      	mov	r0, r6
 800b590:	f7f4 fe1e 	bl	80001d0 <memchr>
 800b594:	b108      	cbz	r0, 800b59a <_printf_i+0x1e6>
 800b596:	1b80      	subs	r0, r0, r6
 800b598:	6060      	str	r0, [r4, #4]
 800b59a:	6863      	ldr	r3, [r4, #4]
 800b59c:	6123      	str	r3, [r4, #16]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5a4:	e7aa      	b.n	800b4fc <_printf_i+0x148>
 800b5a6:	6923      	ldr	r3, [r4, #16]
 800b5a8:	4632      	mov	r2, r6
 800b5aa:	4649      	mov	r1, r9
 800b5ac:	4640      	mov	r0, r8
 800b5ae:	47d0      	blx	sl
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	d0ad      	beq.n	800b510 <_printf_i+0x15c>
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	079b      	lsls	r3, r3, #30
 800b5b8:	d413      	bmi.n	800b5e2 <_printf_i+0x22e>
 800b5ba:	68e0      	ldr	r0, [r4, #12]
 800b5bc:	9b03      	ldr	r3, [sp, #12]
 800b5be:	4298      	cmp	r0, r3
 800b5c0:	bfb8      	it	lt
 800b5c2:	4618      	movlt	r0, r3
 800b5c4:	e7a6      	b.n	800b514 <_printf_i+0x160>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	4632      	mov	r2, r6
 800b5ca:	4649      	mov	r1, r9
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	47d0      	blx	sl
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	d09d      	beq.n	800b510 <_printf_i+0x15c>
 800b5d4:	3501      	adds	r5, #1
 800b5d6:	68e3      	ldr	r3, [r4, #12]
 800b5d8:	9903      	ldr	r1, [sp, #12]
 800b5da:	1a5b      	subs	r3, r3, r1
 800b5dc:	42ab      	cmp	r3, r5
 800b5de:	dcf2      	bgt.n	800b5c6 <_printf_i+0x212>
 800b5e0:	e7eb      	b.n	800b5ba <_printf_i+0x206>
 800b5e2:	2500      	movs	r5, #0
 800b5e4:	f104 0619 	add.w	r6, r4, #25
 800b5e8:	e7f5      	b.n	800b5d6 <_printf_i+0x222>
 800b5ea:	bf00      	nop
 800b5ec:	0800f122 	.word	0x0800f122
 800b5f0:	0800f133 	.word	0x0800f133

0800b5f4 <std>:
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	b510      	push	{r4, lr}
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b5fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b602:	6083      	str	r3, [r0, #8]
 800b604:	8181      	strh	r1, [r0, #12]
 800b606:	6643      	str	r3, [r0, #100]	@ 0x64
 800b608:	81c2      	strh	r2, [r0, #14]
 800b60a:	6183      	str	r3, [r0, #24]
 800b60c:	4619      	mov	r1, r3
 800b60e:	2208      	movs	r2, #8
 800b610:	305c      	adds	r0, #92	@ 0x5c
 800b612:	f000 f914 	bl	800b83e <memset>
 800b616:	4b0d      	ldr	r3, [pc, #52]	@ (800b64c <std+0x58>)
 800b618:	6263      	str	r3, [r4, #36]	@ 0x24
 800b61a:	4b0d      	ldr	r3, [pc, #52]	@ (800b650 <std+0x5c>)
 800b61c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b61e:	4b0d      	ldr	r3, [pc, #52]	@ (800b654 <std+0x60>)
 800b620:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b622:	4b0d      	ldr	r3, [pc, #52]	@ (800b658 <std+0x64>)
 800b624:	6323      	str	r3, [r4, #48]	@ 0x30
 800b626:	4b0d      	ldr	r3, [pc, #52]	@ (800b65c <std+0x68>)
 800b628:	6224      	str	r4, [r4, #32]
 800b62a:	429c      	cmp	r4, r3
 800b62c:	d006      	beq.n	800b63c <std+0x48>
 800b62e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b632:	4294      	cmp	r4, r2
 800b634:	d002      	beq.n	800b63c <std+0x48>
 800b636:	33d0      	adds	r3, #208	@ 0xd0
 800b638:	429c      	cmp	r4, r3
 800b63a:	d105      	bne.n	800b648 <std+0x54>
 800b63c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b644:	f000 b978 	b.w	800b938 <__retarget_lock_init_recursive>
 800b648:	bd10      	pop	{r4, pc}
 800b64a:	bf00      	nop
 800b64c:	0800b7b9 	.word	0x0800b7b9
 800b650:	0800b7db 	.word	0x0800b7db
 800b654:	0800b813 	.word	0x0800b813
 800b658:	0800b837 	.word	0x0800b837
 800b65c:	200020d4 	.word	0x200020d4

0800b660 <stdio_exit_handler>:
 800b660:	4a02      	ldr	r2, [pc, #8]	@ (800b66c <stdio_exit_handler+0xc>)
 800b662:	4903      	ldr	r1, [pc, #12]	@ (800b670 <stdio_exit_handler+0x10>)
 800b664:	4803      	ldr	r0, [pc, #12]	@ (800b674 <stdio_exit_handler+0x14>)
 800b666:	f000 b869 	b.w	800b73c <_fwalk_sglue>
 800b66a:	bf00      	nop
 800b66c:	2000010c 	.word	0x2000010c
 800b670:	0800d2d5 	.word	0x0800d2d5
 800b674:	2000011c 	.word	0x2000011c

0800b678 <cleanup_stdio>:
 800b678:	6841      	ldr	r1, [r0, #4]
 800b67a:	4b0c      	ldr	r3, [pc, #48]	@ (800b6ac <cleanup_stdio+0x34>)
 800b67c:	4299      	cmp	r1, r3
 800b67e:	b510      	push	{r4, lr}
 800b680:	4604      	mov	r4, r0
 800b682:	d001      	beq.n	800b688 <cleanup_stdio+0x10>
 800b684:	f001 fe26 	bl	800d2d4 <_fflush_r>
 800b688:	68a1      	ldr	r1, [r4, #8]
 800b68a:	4b09      	ldr	r3, [pc, #36]	@ (800b6b0 <cleanup_stdio+0x38>)
 800b68c:	4299      	cmp	r1, r3
 800b68e:	d002      	beq.n	800b696 <cleanup_stdio+0x1e>
 800b690:	4620      	mov	r0, r4
 800b692:	f001 fe1f 	bl	800d2d4 <_fflush_r>
 800b696:	68e1      	ldr	r1, [r4, #12]
 800b698:	4b06      	ldr	r3, [pc, #24]	@ (800b6b4 <cleanup_stdio+0x3c>)
 800b69a:	4299      	cmp	r1, r3
 800b69c:	d004      	beq.n	800b6a8 <cleanup_stdio+0x30>
 800b69e:	4620      	mov	r0, r4
 800b6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a4:	f001 be16 	b.w	800d2d4 <_fflush_r>
 800b6a8:	bd10      	pop	{r4, pc}
 800b6aa:	bf00      	nop
 800b6ac:	200020d4 	.word	0x200020d4
 800b6b0:	2000213c 	.word	0x2000213c
 800b6b4:	200021a4 	.word	0x200021a4

0800b6b8 <global_stdio_init.part.0>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b6e8 <global_stdio_init.part.0+0x30>)
 800b6bc:	4c0b      	ldr	r4, [pc, #44]	@ (800b6ec <global_stdio_init.part.0+0x34>)
 800b6be:	4a0c      	ldr	r2, [pc, #48]	@ (800b6f0 <global_stdio_init.part.0+0x38>)
 800b6c0:	601a      	str	r2, [r3, #0]
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	2104      	movs	r1, #4
 800b6c8:	f7ff ff94 	bl	800b5f4 <std>
 800b6cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	2109      	movs	r1, #9
 800b6d4:	f7ff ff8e 	bl	800b5f4 <std>
 800b6d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6dc:	2202      	movs	r2, #2
 800b6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6e2:	2112      	movs	r1, #18
 800b6e4:	f7ff bf86 	b.w	800b5f4 <std>
 800b6e8:	2000220c 	.word	0x2000220c
 800b6ec:	200020d4 	.word	0x200020d4
 800b6f0:	0800b661 	.word	0x0800b661

0800b6f4 <__sfp_lock_acquire>:
 800b6f4:	4801      	ldr	r0, [pc, #4]	@ (800b6fc <__sfp_lock_acquire+0x8>)
 800b6f6:	f000 b920 	b.w	800b93a <__retarget_lock_acquire_recursive>
 800b6fa:	bf00      	nop
 800b6fc:	20002215 	.word	0x20002215

0800b700 <__sfp_lock_release>:
 800b700:	4801      	ldr	r0, [pc, #4]	@ (800b708 <__sfp_lock_release+0x8>)
 800b702:	f000 b91b 	b.w	800b93c <__retarget_lock_release_recursive>
 800b706:	bf00      	nop
 800b708:	20002215 	.word	0x20002215

0800b70c <__sinit>:
 800b70c:	b510      	push	{r4, lr}
 800b70e:	4604      	mov	r4, r0
 800b710:	f7ff fff0 	bl	800b6f4 <__sfp_lock_acquire>
 800b714:	6a23      	ldr	r3, [r4, #32]
 800b716:	b11b      	cbz	r3, 800b720 <__sinit+0x14>
 800b718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b71c:	f7ff bff0 	b.w	800b700 <__sfp_lock_release>
 800b720:	4b04      	ldr	r3, [pc, #16]	@ (800b734 <__sinit+0x28>)
 800b722:	6223      	str	r3, [r4, #32]
 800b724:	4b04      	ldr	r3, [pc, #16]	@ (800b738 <__sinit+0x2c>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d1f5      	bne.n	800b718 <__sinit+0xc>
 800b72c:	f7ff ffc4 	bl	800b6b8 <global_stdio_init.part.0>
 800b730:	e7f2      	b.n	800b718 <__sinit+0xc>
 800b732:	bf00      	nop
 800b734:	0800b679 	.word	0x0800b679
 800b738:	2000220c 	.word	0x2000220c

0800b73c <_fwalk_sglue>:
 800b73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b740:	4607      	mov	r7, r0
 800b742:	4688      	mov	r8, r1
 800b744:	4614      	mov	r4, r2
 800b746:	2600      	movs	r6, #0
 800b748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b74c:	f1b9 0901 	subs.w	r9, r9, #1
 800b750:	d505      	bpl.n	800b75e <_fwalk_sglue+0x22>
 800b752:	6824      	ldr	r4, [r4, #0]
 800b754:	2c00      	cmp	r4, #0
 800b756:	d1f7      	bne.n	800b748 <_fwalk_sglue+0xc>
 800b758:	4630      	mov	r0, r6
 800b75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75e:	89ab      	ldrh	r3, [r5, #12]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d907      	bls.n	800b774 <_fwalk_sglue+0x38>
 800b764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b768:	3301      	adds	r3, #1
 800b76a:	d003      	beq.n	800b774 <_fwalk_sglue+0x38>
 800b76c:	4629      	mov	r1, r5
 800b76e:	4638      	mov	r0, r7
 800b770:	47c0      	blx	r8
 800b772:	4306      	orrs	r6, r0
 800b774:	3568      	adds	r5, #104	@ 0x68
 800b776:	e7e9      	b.n	800b74c <_fwalk_sglue+0x10>

0800b778 <siprintf>:
 800b778:	b40e      	push	{r1, r2, r3}
 800b77a:	b500      	push	{lr}
 800b77c:	b09c      	sub	sp, #112	@ 0x70
 800b77e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b780:	9002      	str	r0, [sp, #8]
 800b782:	9006      	str	r0, [sp, #24]
 800b784:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b788:	4809      	ldr	r0, [pc, #36]	@ (800b7b0 <siprintf+0x38>)
 800b78a:	9107      	str	r1, [sp, #28]
 800b78c:	9104      	str	r1, [sp, #16]
 800b78e:	4909      	ldr	r1, [pc, #36]	@ (800b7b4 <siprintf+0x3c>)
 800b790:	f853 2b04 	ldr.w	r2, [r3], #4
 800b794:	9105      	str	r1, [sp, #20]
 800b796:	6800      	ldr	r0, [r0, #0]
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	a902      	add	r1, sp, #8
 800b79c:	f001 fc1a 	bl	800cfd4 <_svfiprintf_r>
 800b7a0:	9b02      	ldr	r3, [sp, #8]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	701a      	strb	r2, [r3, #0]
 800b7a6:	b01c      	add	sp, #112	@ 0x70
 800b7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7ac:	b003      	add	sp, #12
 800b7ae:	4770      	bx	lr
 800b7b0:	20000118 	.word	0x20000118
 800b7b4:	ffff0208 	.word	0xffff0208

0800b7b8 <__sread>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c0:	f000 f86c 	bl	800b89c <_read_r>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	bfab      	itete	ge
 800b7c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b7ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b7cc:	181b      	addge	r3, r3, r0
 800b7ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7d2:	bfac      	ite	ge
 800b7d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7d6:	81a3      	strhlt	r3, [r4, #12]
 800b7d8:	bd10      	pop	{r4, pc}

0800b7da <__swrite>:
 800b7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7de:	461f      	mov	r7, r3
 800b7e0:	898b      	ldrh	r3, [r1, #12]
 800b7e2:	05db      	lsls	r3, r3, #23
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	4616      	mov	r6, r2
 800b7ea:	d505      	bpl.n	800b7f8 <__swrite+0x1e>
 800b7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f000 f840 	bl	800b878 <_lseek_r>
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	4632      	mov	r2, r6
 800b806:	463b      	mov	r3, r7
 800b808:	4628      	mov	r0, r5
 800b80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b80e:	f000 b857 	b.w	800b8c0 <_write_r>

0800b812 <__sseek>:
 800b812:	b510      	push	{r4, lr}
 800b814:	460c      	mov	r4, r1
 800b816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b81a:	f000 f82d 	bl	800b878 <_lseek_r>
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	bf15      	itete	ne
 800b824:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b826:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b82a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b82e:	81a3      	strheq	r3, [r4, #12]
 800b830:	bf18      	it	ne
 800b832:	81a3      	strhne	r3, [r4, #12]
 800b834:	bd10      	pop	{r4, pc}

0800b836 <__sclose>:
 800b836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b83a:	f000 b80d 	b.w	800b858 <_close_r>

0800b83e <memset>:
 800b83e:	4402      	add	r2, r0
 800b840:	4603      	mov	r3, r0
 800b842:	4293      	cmp	r3, r2
 800b844:	d100      	bne.n	800b848 <memset+0xa>
 800b846:	4770      	bx	lr
 800b848:	f803 1b01 	strb.w	r1, [r3], #1
 800b84c:	e7f9      	b.n	800b842 <memset+0x4>
	...

0800b850 <_localeconv_r>:
 800b850:	4800      	ldr	r0, [pc, #0]	@ (800b854 <_localeconv_r+0x4>)
 800b852:	4770      	bx	lr
 800b854:	20000258 	.word	0x20000258

0800b858 <_close_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4d06      	ldr	r5, [pc, #24]	@ (800b874 <_close_r+0x1c>)
 800b85c:	2300      	movs	r3, #0
 800b85e:	4604      	mov	r4, r0
 800b860:	4608      	mov	r0, r1
 800b862:	602b      	str	r3, [r5, #0]
 800b864:	f7f6 ff72 	bl	800274c <_close>
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	d102      	bne.n	800b872 <_close_r+0x1a>
 800b86c:	682b      	ldr	r3, [r5, #0]
 800b86e:	b103      	cbz	r3, 800b872 <_close_r+0x1a>
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	bd38      	pop	{r3, r4, r5, pc}
 800b874:	20002210 	.word	0x20002210

0800b878 <_lseek_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	4d07      	ldr	r5, [pc, #28]	@ (800b898 <_lseek_r+0x20>)
 800b87c:	4604      	mov	r4, r0
 800b87e:	4608      	mov	r0, r1
 800b880:	4611      	mov	r1, r2
 800b882:	2200      	movs	r2, #0
 800b884:	602a      	str	r2, [r5, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	f7f6 ff87 	bl	800279a <_lseek>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d102      	bne.n	800b896 <_lseek_r+0x1e>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	b103      	cbz	r3, 800b896 <_lseek_r+0x1e>
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	bd38      	pop	{r3, r4, r5, pc}
 800b898:	20002210 	.word	0x20002210

0800b89c <_read_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4d07      	ldr	r5, [pc, #28]	@ (800b8bc <_read_r+0x20>)
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	4608      	mov	r0, r1
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	602a      	str	r2, [r5, #0]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f7f6 ff15 	bl	80026da <_read>
 800b8b0:	1c43      	adds	r3, r0, #1
 800b8b2:	d102      	bne.n	800b8ba <_read_r+0x1e>
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	b103      	cbz	r3, 800b8ba <_read_r+0x1e>
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	20002210 	.word	0x20002210

0800b8c0 <_write_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4d07      	ldr	r5, [pc, #28]	@ (800b8e0 <_write_r+0x20>)
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	4608      	mov	r0, r1
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	602a      	str	r2, [r5, #0]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f7f6 ff20 	bl	8002714 <_write>
 800b8d4:	1c43      	adds	r3, r0, #1
 800b8d6:	d102      	bne.n	800b8de <_write_r+0x1e>
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	b103      	cbz	r3, 800b8de <_write_r+0x1e>
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	20002210 	.word	0x20002210

0800b8e4 <__errno>:
 800b8e4:	4b01      	ldr	r3, [pc, #4]	@ (800b8ec <__errno+0x8>)
 800b8e6:	6818      	ldr	r0, [r3, #0]
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	20000118 	.word	0x20000118

0800b8f0 <__libc_init_array>:
 800b8f0:	b570      	push	{r4, r5, r6, lr}
 800b8f2:	4d0d      	ldr	r5, [pc, #52]	@ (800b928 <__libc_init_array+0x38>)
 800b8f4:	4c0d      	ldr	r4, [pc, #52]	@ (800b92c <__libc_init_array+0x3c>)
 800b8f6:	1b64      	subs	r4, r4, r5
 800b8f8:	10a4      	asrs	r4, r4, #2
 800b8fa:	2600      	movs	r6, #0
 800b8fc:	42a6      	cmp	r6, r4
 800b8fe:	d109      	bne.n	800b914 <__libc_init_array+0x24>
 800b900:	4d0b      	ldr	r5, [pc, #44]	@ (800b930 <__libc_init_array+0x40>)
 800b902:	4c0c      	ldr	r4, [pc, #48]	@ (800b934 <__libc_init_array+0x44>)
 800b904:	f003 fba8 	bl	800f058 <_init>
 800b908:	1b64      	subs	r4, r4, r5
 800b90a:	10a4      	asrs	r4, r4, #2
 800b90c:	2600      	movs	r6, #0
 800b90e:	42a6      	cmp	r6, r4
 800b910:	d105      	bne.n	800b91e <__libc_init_array+0x2e>
 800b912:	bd70      	pop	{r4, r5, r6, pc}
 800b914:	f855 3b04 	ldr.w	r3, [r5], #4
 800b918:	4798      	blx	r3
 800b91a:	3601      	adds	r6, #1
 800b91c:	e7ee      	b.n	800b8fc <__libc_init_array+0xc>
 800b91e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b922:	4798      	blx	r3
 800b924:	3601      	adds	r6, #1
 800b926:	e7f2      	b.n	800b90e <__libc_init_array+0x1e>
 800b928:	0800f8c8 	.word	0x0800f8c8
 800b92c:	0800f8c8 	.word	0x0800f8c8
 800b930:	0800f8c8 	.word	0x0800f8c8
 800b934:	0800f8cc 	.word	0x0800f8cc

0800b938 <__retarget_lock_init_recursive>:
 800b938:	4770      	bx	lr

0800b93a <__retarget_lock_acquire_recursive>:
 800b93a:	4770      	bx	lr

0800b93c <__retarget_lock_release_recursive>:
 800b93c:	4770      	bx	lr

0800b93e <memcpy>:
 800b93e:	440a      	add	r2, r1
 800b940:	4291      	cmp	r1, r2
 800b942:	f100 33ff 	add.w	r3, r0, #4294967295
 800b946:	d100      	bne.n	800b94a <memcpy+0xc>
 800b948:	4770      	bx	lr
 800b94a:	b510      	push	{r4, lr}
 800b94c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b950:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b954:	4291      	cmp	r1, r2
 800b956:	d1f9      	bne.n	800b94c <memcpy+0xe>
 800b958:	bd10      	pop	{r4, pc}

0800b95a <copysign>:
 800b95a:	b082      	sub	sp, #8
 800b95c:	ec51 0b10 	vmov	r0, r1, d0
 800b960:	ed8d 1b00 	vstr	d1, [sp]
 800b964:	4602      	mov	r2, r0
 800b966:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800b96a:	9901      	ldr	r1, [sp, #4]
 800b96c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800b970:	ea40 0301 	orr.w	r3, r0, r1
 800b974:	ec43 2b10 	vmov	d0, r2, r3
 800b978:	b002      	add	sp, #8
 800b97a:	4770      	bx	lr

0800b97c <quorem>:
 800b97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b980:	6903      	ldr	r3, [r0, #16]
 800b982:	690c      	ldr	r4, [r1, #16]
 800b984:	42a3      	cmp	r3, r4
 800b986:	4607      	mov	r7, r0
 800b988:	db7e      	blt.n	800ba88 <quorem+0x10c>
 800b98a:	3c01      	subs	r4, #1
 800b98c:	f101 0814 	add.w	r8, r1, #20
 800b990:	00a3      	lsls	r3, r4, #2
 800b992:	f100 0514 	add.w	r5, r0, #20
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b99c:	9301      	str	r3, [sp, #4]
 800b99e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9b2:	d32e      	bcc.n	800ba12 <quorem+0x96>
 800b9b4:	f04f 0a00 	mov.w	sl, #0
 800b9b8:	46c4      	mov	ip, r8
 800b9ba:	46ae      	mov	lr, r5
 800b9bc:	46d3      	mov	fp, sl
 800b9be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9c2:	b298      	uxth	r0, r3
 800b9c4:	fb06 a000 	mla	r0, r6, r0, sl
 800b9c8:	0c02      	lsrs	r2, r0, #16
 800b9ca:	0c1b      	lsrs	r3, r3, #16
 800b9cc:	fb06 2303 	mla	r3, r6, r3, r2
 800b9d0:	f8de 2000 	ldr.w	r2, [lr]
 800b9d4:	b280      	uxth	r0, r0
 800b9d6:	b292      	uxth	r2, r2
 800b9d8:	1a12      	subs	r2, r2, r0
 800b9da:	445a      	add	r2, fp
 800b9dc:	f8de 0000 	ldr.w	r0, [lr]
 800b9e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b9ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b9ee:	b292      	uxth	r2, r2
 800b9f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b9f4:	45e1      	cmp	r9, ip
 800b9f6:	f84e 2b04 	str.w	r2, [lr], #4
 800b9fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b9fe:	d2de      	bcs.n	800b9be <quorem+0x42>
 800ba00:	9b00      	ldr	r3, [sp, #0]
 800ba02:	58eb      	ldr	r3, [r5, r3]
 800ba04:	b92b      	cbnz	r3, 800ba12 <quorem+0x96>
 800ba06:	9b01      	ldr	r3, [sp, #4]
 800ba08:	3b04      	subs	r3, #4
 800ba0a:	429d      	cmp	r5, r3
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	d32f      	bcc.n	800ba70 <quorem+0xf4>
 800ba10:	613c      	str	r4, [r7, #16]
 800ba12:	4638      	mov	r0, r7
 800ba14:	f001 f97a 	bl	800cd0c <__mcmp>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	db25      	blt.n	800ba68 <quorem+0xec>
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	2000      	movs	r0, #0
 800ba20:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba24:	f8d1 c000 	ldr.w	ip, [r1]
 800ba28:	fa1f fe82 	uxth.w	lr, r2
 800ba2c:	fa1f f38c 	uxth.w	r3, ip
 800ba30:	eba3 030e 	sub.w	r3, r3, lr
 800ba34:	4403      	add	r3, r0
 800ba36:	0c12      	lsrs	r2, r2, #16
 800ba38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba46:	45c1      	cmp	r9, r8
 800ba48:	f841 3b04 	str.w	r3, [r1], #4
 800ba4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba50:	d2e6      	bcs.n	800ba20 <quorem+0xa4>
 800ba52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba5a:	b922      	cbnz	r2, 800ba66 <quorem+0xea>
 800ba5c:	3b04      	subs	r3, #4
 800ba5e:	429d      	cmp	r5, r3
 800ba60:	461a      	mov	r2, r3
 800ba62:	d30b      	bcc.n	800ba7c <quorem+0x100>
 800ba64:	613c      	str	r4, [r7, #16]
 800ba66:	3601      	adds	r6, #1
 800ba68:	4630      	mov	r0, r6
 800ba6a:	b003      	add	sp, #12
 800ba6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba70:	6812      	ldr	r2, [r2, #0]
 800ba72:	3b04      	subs	r3, #4
 800ba74:	2a00      	cmp	r2, #0
 800ba76:	d1cb      	bne.n	800ba10 <quorem+0x94>
 800ba78:	3c01      	subs	r4, #1
 800ba7a:	e7c6      	b.n	800ba0a <quorem+0x8e>
 800ba7c:	6812      	ldr	r2, [r2, #0]
 800ba7e:	3b04      	subs	r3, #4
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	d1ef      	bne.n	800ba64 <quorem+0xe8>
 800ba84:	3c01      	subs	r4, #1
 800ba86:	e7ea      	b.n	800ba5e <quorem+0xe2>
 800ba88:	2000      	movs	r0, #0
 800ba8a:	e7ee      	b.n	800ba6a <quorem+0xee>
 800ba8c:	0000      	movs	r0, r0
	...

0800ba90 <_dtoa_r>:
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	69c7      	ldr	r7, [r0, #28]
 800ba96:	b099      	sub	sp, #100	@ 0x64
 800ba98:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ba9c:	ec55 4b10 	vmov	r4, r5, d0
 800baa0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800baa2:	9109      	str	r1, [sp, #36]	@ 0x24
 800baa4:	4683      	mov	fp, r0
 800baa6:	920e      	str	r2, [sp, #56]	@ 0x38
 800baa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800baaa:	b97f      	cbnz	r7, 800bacc <_dtoa_r+0x3c>
 800baac:	2010      	movs	r0, #16
 800baae:	f000 fdfd 	bl	800c6ac <malloc>
 800bab2:	4602      	mov	r2, r0
 800bab4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bab8:	b920      	cbnz	r0, 800bac4 <_dtoa_r+0x34>
 800baba:	4ba7      	ldr	r3, [pc, #668]	@ (800bd58 <_dtoa_r+0x2c8>)
 800babc:	21ef      	movs	r1, #239	@ 0xef
 800babe:	48a7      	ldr	r0, [pc, #668]	@ (800bd5c <_dtoa_r+0x2cc>)
 800bac0:	f001 fc5a 	bl	800d378 <__assert_func>
 800bac4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bac8:	6007      	str	r7, [r0, #0]
 800baca:	60c7      	str	r7, [r0, #12]
 800bacc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bad0:	6819      	ldr	r1, [r3, #0]
 800bad2:	b159      	cbz	r1, 800baec <_dtoa_r+0x5c>
 800bad4:	685a      	ldr	r2, [r3, #4]
 800bad6:	604a      	str	r2, [r1, #4]
 800bad8:	2301      	movs	r3, #1
 800bada:	4093      	lsls	r3, r2
 800badc:	608b      	str	r3, [r1, #8]
 800bade:	4658      	mov	r0, fp
 800bae0:	f000 feda 	bl	800c898 <_Bfree>
 800bae4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bae8:	2200      	movs	r2, #0
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	1e2b      	subs	r3, r5, #0
 800baee:	bfb9      	ittee	lt
 800baf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800baf4:	9303      	strlt	r3, [sp, #12]
 800baf6:	2300      	movge	r3, #0
 800baf8:	6033      	strge	r3, [r6, #0]
 800bafa:	9f03      	ldr	r7, [sp, #12]
 800bafc:	4b98      	ldr	r3, [pc, #608]	@ (800bd60 <_dtoa_r+0x2d0>)
 800bafe:	bfbc      	itt	lt
 800bb00:	2201      	movlt	r2, #1
 800bb02:	6032      	strlt	r2, [r6, #0]
 800bb04:	43bb      	bics	r3, r7
 800bb06:	d112      	bne.n	800bb2e <_dtoa_r+0x9e>
 800bb08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb14:	4323      	orrs	r3, r4
 800bb16:	f000 854d 	beq.w	800c5b4 <_dtoa_r+0xb24>
 800bb1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bd74 <_dtoa_r+0x2e4>
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 854f 	beq.w	800c5c4 <_dtoa_r+0xb34>
 800bb26:	f10a 0303 	add.w	r3, sl, #3
 800bb2a:	f000 bd49 	b.w	800c5c0 <_dtoa_r+0xb30>
 800bb2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb32:	2200      	movs	r2, #0
 800bb34:	ec51 0b17 	vmov	r0, r1, d7
 800bb38:	2300      	movs	r3, #0
 800bb3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bb3e:	f7f4 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb42:	4680      	mov	r8, r0
 800bb44:	b158      	cbz	r0, 800bb5e <_dtoa_r+0xce>
 800bb46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb48:	2301      	movs	r3, #1
 800bb4a:	6013      	str	r3, [r2, #0]
 800bb4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb4e:	b113      	cbz	r3, 800bb56 <_dtoa_r+0xc6>
 800bb50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb52:	4b84      	ldr	r3, [pc, #528]	@ (800bd64 <_dtoa_r+0x2d4>)
 800bb54:	6013      	str	r3, [r2, #0]
 800bb56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bd78 <_dtoa_r+0x2e8>
 800bb5a:	f000 bd33 	b.w	800c5c4 <_dtoa_r+0xb34>
 800bb5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bb62:	aa16      	add	r2, sp, #88	@ 0x58
 800bb64:	a917      	add	r1, sp, #92	@ 0x5c
 800bb66:	4658      	mov	r0, fp
 800bb68:	f001 f980 	bl	800ce6c <__d2b>
 800bb6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bb70:	4681      	mov	r9, r0
 800bb72:	2e00      	cmp	r6, #0
 800bb74:	d077      	beq.n	800bc66 <_dtoa_r+0x1d6>
 800bb76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bb7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bb88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bb8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bb90:	4619      	mov	r1, r3
 800bb92:	2200      	movs	r2, #0
 800bb94:	4b74      	ldr	r3, [pc, #464]	@ (800bd68 <_dtoa_r+0x2d8>)
 800bb96:	f7f4 fb77 	bl	8000288 <__aeabi_dsub>
 800bb9a:	a369      	add	r3, pc, #420	@ (adr r3, 800bd40 <_dtoa_r+0x2b0>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	f7f4 fd2a 	bl	80005f8 <__aeabi_dmul>
 800bba4:	a368      	add	r3, pc, #416	@ (adr r3, 800bd48 <_dtoa_r+0x2b8>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	f7f4 fb6f 	bl	800028c <__adddf3>
 800bbae:	4604      	mov	r4, r0
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	f7f4 fcb6 	bl	8000524 <__aeabi_i2d>
 800bbb8:	a365      	add	r3, pc, #404	@ (adr r3, 800bd50 <_dtoa_r+0x2c0>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fd1b 	bl	80005f8 <__aeabi_dmul>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7f4 fb5f 	bl	800028c <__adddf3>
 800bbce:	4604      	mov	r4, r0
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	f7f4 ffc1 	bl	8000b58 <__aeabi_d2iz>
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	4607      	mov	r7, r0
 800bbda:	2300      	movs	r3, #0
 800bbdc:	4620      	mov	r0, r4
 800bbde:	4629      	mov	r1, r5
 800bbe0:	f7f4 ff7c 	bl	8000adc <__aeabi_dcmplt>
 800bbe4:	b140      	cbz	r0, 800bbf8 <_dtoa_r+0x168>
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	f7f4 fc9c 	bl	8000524 <__aeabi_i2d>
 800bbec:	4622      	mov	r2, r4
 800bbee:	462b      	mov	r3, r5
 800bbf0:	f7f4 ff6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbf4:	b900      	cbnz	r0, 800bbf8 <_dtoa_r+0x168>
 800bbf6:	3f01      	subs	r7, #1
 800bbf8:	2f16      	cmp	r7, #22
 800bbfa:	d851      	bhi.n	800bca0 <_dtoa_r+0x210>
 800bbfc:	4b5b      	ldr	r3, [pc, #364]	@ (800bd6c <_dtoa_r+0x2dc>)
 800bbfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc0a:	f7f4 ff67 	bl	8000adc <__aeabi_dcmplt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d048      	beq.n	800bca4 <_dtoa_r+0x214>
 800bc12:	3f01      	subs	r7, #1
 800bc14:	2300      	movs	r3, #0
 800bc16:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc1a:	1b9b      	subs	r3, r3, r6
 800bc1c:	1e5a      	subs	r2, r3, #1
 800bc1e:	bf44      	itt	mi
 800bc20:	f1c3 0801 	rsbmi	r8, r3, #1
 800bc24:	2300      	movmi	r3, #0
 800bc26:	9208      	str	r2, [sp, #32]
 800bc28:	bf54      	ite	pl
 800bc2a:	f04f 0800 	movpl.w	r8, #0
 800bc2e:	9308      	strmi	r3, [sp, #32]
 800bc30:	2f00      	cmp	r7, #0
 800bc32:	db39      	blt.n	800bca8 <_dtoa_r+0x218>
 800bc34:	9b08      	ldr	r3, [sp, #32]
 800bc36:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bc38:	443b      	add	r3, r7
 800bc3a:	9308      	str	r3, [sp, #32]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc42:	2b09      	cmp	r3, #9
 800bc44:	d864      	bhi.n	800bd10 <_dtoa_r+0x280>
 800bc46:	2b05      	cmp	r3, #5
 800bc48:	bfc4      	itt	gt
 800bc4a:	3b04      	subgt	r3, #4
 800bc4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc50:	f1a3 0302 	sub.w	r3, r3, #2
 800bc54:	bfcc      	ite	gt
 800bc56:	2400      	movgt	r4, #0
 800bc58:	2401      	movle	r4, #1
 800bc5a:	2b03      	cmp	r3, #3
 800bc5c:	d863      	bhi.n	800bd26 <_dtoa_r+0x296>
 800bc5e:	e8df f003 	tbb	[pc, r3]
 800bc62:	372a      	.short	0x372a
 800bc64:	5535      	.short	0x5535
 800bc66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bc6a:	441e      	add	r6, r3
 800bc6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc70:	2b20      	cmp	r3, #32
 800bc72:	bfc1      	itttt	gt
 800bc74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bc78:	409f      	lslgt	r7, r3
 800bc7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bc7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bc82:	bfd6      	itet	le
 800bc84:	f1c3 0320 	rsble	r3, r3, #32
 800bc88:	ea47 0003 	orrgt.w	r0, r7, r3
 800bc8c:	fa04 f003 	lslle.w	r0, r4, r3
 800bc90:	f7f4 fc38 	bl	8000504 <__aeabi_ui2d>
 800bc94:	2201      	movs	r2, #1
 800bc96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bc9a:	3e01      	subs	r6, #1
 800bc9c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bc9e:	e777      	b.n	800bb90 <_dtoa_r+0x100>
 800bca0:	2301      	movs	r3, #1
 800bca2:	e7b8      	b.n	800bc16 <_dtoa_r+0x186>
 800bca4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bca6:	e7b7      	b.n	800bc18 <_dtoa_r+0x188>
 800bca8:	427b      	negs	r3, r7
 800bcaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcac:	2300      	movs	r3, #0
 800bcae:	eba8 0807 	sub.w	r8, r8, r7
 800bcb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bcb4:	e7c4      	b.n	800bc40 <_dtoa_r+0x1b0>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dc35      	bgt.n	800bd2c <_dtoa_r+0x29c>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	9307      	str	r3, [sp, #28]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcca:	e00b      	b.n	800bce4 <_dtoa_r+0x254>
 800bccc:	2301      	movs	r3, #1
 800bcce:	e7f3      	b.n	800bcb8 <_dtoa_r+0x228>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcd6:	18fb      	adds	r3, r7, r3
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	9307      	str	r3, [sp, #28]
 800bce0:	bfb8      	it	lt
 800bce2:	2301      	movlt	r3, #1
 800bce4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bce8:	2100      	movs	r1, #0
 800bcea:	2204      	movs	r2, #4
 800bcec:	f102 0514 	add.w	r5, r2, #20
 800bcf0:	429d      	cmp	r5, r3
 800bcf2:	d91f      	bls.n	800bd34 <_dtoa_r+0x2a4>
 800bcf4:	6041      	str	r1, [r0, #4]
 800bcf6:	4658      	mov	r0, fp
 800bcf8:	f000 fd8e 	bl	800c818 <_Balloc>
 800bcfc:	4682      	mov	sl, r0
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d13c      	bne.n	800bd7c <_dtoa_r+0x2ec>
 800bd02:	4b1b      	ldr	r3, [pc, #108]	@ (800bd70 <_dtoa_r+0x2e0>)
 800bd04:	4602      	mov	r2, r0
 800bd06:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd0a:	e6d8      	b.n	800babe <_dtoa_r+0x2e>
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e7e0      	b.n	800bcd2 <_dtoa_r+0x242>
 800bd10:	2401      	movs	r4, #1
 800bd12:	2300      	movs	r3, #0
 800bd14:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd18:	f04f 33ff 	mov.w	r3, #4294967295
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	9307      	str	r3, [sp, #28]
 800bd20:	2200      	movs	r2, #0
 800bd22:	2312      	movs	r3, #18
 800bd24:	e7d0      	b.n	800bcc8 <_dtoa_r+0x238>
 800bd26:	2301      	movs	r3, #1
 800bd28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd2a:	e7f5      	b.n	800bd18 <_dtoa_r+0x288>
 800bd2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	9307      	str	r3, [sp, #28]
 800bd32:	e7d7      	b.n	800bce4 <_dtoa_r+0x254>
 800bd34:	3101      	adds	r1, #1
 800bd36:	0052      	lsls	r2, r2, #1
 800bd38:	e7d8      	b.n	800bcec <_dtoa_r+0x25c>
 800bd3a:	bf00      	nop
 800bd3c:	f3af 8000 	nop.w
 800bd40:	636f4361 	.word	0x636f4361
 800bd44:	3fd287a7 	.word	0x3fd287a7
 800bd48:	8b60c8b3 	.word	0x8b60c8b3
 800bd4c:	3fc68a28 	.word	0x3fc68a28
 800bd50:	509f79fb 	.word	0x509f79fb
 800bd54:	3fd34413 	.word	0x3fd34413
 800bd58:	0800f151 	.word	0x0800f151
 800bd5c:	0800f168 	.word	0x0800f168
 800bd60:	7ff00000 	.word	0x7ff00000
 800bd64:	0800f121 	.word	0x0800f121
 800bd68:	3ff80000 	.word	0x3ff80000
 800bd6c:	0800f260 	.word	0x0800f260
 800bd70:	0800f1c0 	.word	0x0800f1c0
 800bd74:	0800f14d 	.word	0x0800f14d
 800bd78:	0800f120 	.word	0x0800f120
 800bd7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd80:	6018      	str	r0, [r3, #0]
 800bd82:	9b07      	ldr	r3, [sp, #28]
 800bd84:	2b0e      	cmp	r3, #14
 800bd86:	f200 80a4 	bhi.w	800bed2 <_dtoa_r+0x442>
 800bd8a:	2c00      	cmp	r4, #0
 800bd8c:	f000 80a1 	beq.w	800bed2 <_dtoa_r+0x442>
 800bd90:	2f00      	cmp	r7, #0
 800bd92:	dd33      	ble.n	800bdfc <_dtoa_r+0x36c>
 800bd94:	4bad      	ldr	r3, [pc, #692]	@ (800c04c <_dtoa_r+0x5bc>)
 800bd96:	f007 020f 	and.w	r2, r7, #15
 800bd9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd9e:	ed93 7b00 	vldr	d7, [r3]
 800bda2:	05f8      	lsls	r0, r7, #23
 800bda4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bda8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bdac:	d516      	bpl.n	800bddc <_dtoa_r+0x34c>
 800bdae:	4ba8      	ldr	r3, [pc, #672]	@ (800c050 <_dtoa_r+0x5c0>)
 800bdb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdb8:	f7f4 fd48 	bl	800084c <__aeabi_ddiv>
 800bdbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdc0:	f004 040f 	and.w	r4, r4, #15
 800bdc4:	2603      	movs	r6, #3
 800bdc6:	4da2      	ldr	r5, [pc, #648]	@ (800c050 <_dtoa_r+0x5c0>)
 800bdc8:	b954      	cbnz	r4, 800bde0 <_dtoa_r+0x350>
 800bdca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd2:	f7f4 fd3b 	bl	800084c <__aeabi_ddiv>
 800bdd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdda:	e028      	b.n	800be2e <_dtoa_r+0x39e>
 800bddc:	2602      	movs	r6, #2
 800bdde:	e7f2      	b.n	800bdc6 <_dtoa_r+0x336>
 800bde0:	07e1      	lsls	r1, r4, #31
 800bde2:	d508      	bpl.n	800bdf6 <_dtoa_r+0x366>
 800bde4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bde8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdec:	f7f4 fc04 	bl	80005f8 <__aeabi_dmul>
 800bdf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdf4:	3601      	adds	r6, #1
 800bdf6:	1064      	asrs	r4, r4, #1
 800bdf8:	3508      	adds	r5, #8
 800bdfa:	e7e5      	b.n	800bdc8 <_dtoa_r+0x338>
 800bdfc:	f000 80d2 	beq.w	800bfa4 <_dtoa_r+0x514>
 800be00:	427c      	negs	r4, r7
 800be02:	4b92      	ldr	r3, [pc, #584]	@ (800c04c <_dtoa_r+0x5bc>)
 800be04:	4d92      	ldr	r5, [pc, #584]	@ (800c050 <_dtoa_r+0x5c0>)
 800be06:	f004 020f 	and.w	r2, r4, #15
 800be0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be16:	f7f4 fbef 	bl	80005f8 <__aeabi_dmul>
 800be1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be1e:	1124      	asrs	r4, r4, #4
 800be20:	2300      	movs	r3, #0
 800be22:	2602      	movs	r6, #2
 800be24:	2c00      	cmp	r4, #0
 800be26:	f040 80b2 	bne.w	800bf8e <_dtoa_r+0x4fe>
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1d3      	bne.n	800bdd6 <_dtoa_r+0x346>
 800be2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 80b7 	beq.w	800bfa8 <_dtoa_r+0x518>
 800be3a:	4b86      	ldr	r3, [pc, #536]	@ (800c054 <_dtoa_r+0x5c4>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	4620      	mov	r0, r4
 800be40:	4629      	mov	r1, r5
 800be42:	f7f4 fe4b 	bl	8000adc <__aeabi_dcmplt>
 800be46:	2800      	cmp	r0, #0
 800be48:	f000 80ae 	beq.w	800bfa8 <_dtoa_r+0x518>
 800be4c:	9b07      	ldr	r3, [sp, #28]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 80aa 	beq.w	800bfa8 <_dtoa_r+0x518>
 800be54:	9b00      	ldr	r3, [sp, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	dd37      	ble.n	800beca <_dtoa_r+0x43a>
 800be5a:	1e7b      	subs	r3, r7, #1
 800be5c:	9304      	str	r3, [sp, #16]
 800be5e:	4620      	mov	r0, r4
 800be60:	4b7d      	ldr	r3, [pc, #500]	@ (800c058 <_dtoa_r+0x5c8>)
 800be62:	2200      	movs	r2, #0
 800be64:	4629      	mov	r1, r5
 800be66:	f7f4 fbc7 	bl	80005f8 <__aeabi_dmul>
 800be6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be6e:	9c00      	ldr	r4, [sp, #0]
 800be70:	3601      	adds	r6, #1
 800be72:	4630      	mov	r0, r6
 800be74:	f7f4 fb56 	bl	8000524 <__aeabi_i2d>
 800be78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be7c:	f7f4 fbbc 	bl	80005f8 <__aeabi_dmul>
 800be80:	4b76      	ldr	r3, [pc, #472]	@ (800c05c <_dtoa_r+0x5cc>)
 800be82:	2200      	movs	r2, #0
 800be84:	f7f4 fa02 	bl	800028c <__adddf3>
 800be88:	4605      	mov	r5, r0
 800be8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800be8e:	2c00      	cmp	r4, #0
 800be90:	f040 808d 	bne.w	800bfae <_dtoa_r+0x51e>
 800be94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be98:	4b71      	ldr	r3, [pc, #452]	@ (800c060 <_dtoa_r+0x5d0>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	f7f4 f9f4 	bl	8000288 <__aeabi_dsub>
 800bea0:	4602      	mov	r2, r0
 800bea2:	460b      	mov	r3, r1
 800bea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bea8:	462a      	mov	r2, r5
 800beaa:	4633      	mov	r3, r6
 800beac:	f7f4 fe34 	bl	8000b18 <__aeabi_dcmpgt>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	f040 828b 	bne.w	800c3cc <_dtoa_r+0x93c>
 800beb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beba:	462a      	mov	r2, r5
 800bebc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bec0:	f7f4 fe0c 	bl	8000adc <__aeabi_dcmplt>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	f040 8128 	bne.w	800c11a <_dtoa_r+0x68a>
 800beca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bece:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bed2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f2c0 815a 	blt.w	800c18e <_dtoa_r+0x6fe>
 800beda:	2f0e      	cmp	r7, #14
 800bedc:	f300 8157 	bgt.w	800c18e <_dtoa_r+0x6fe>
 800bee0:	4b5a      	ldr	r3, [pc, #360]	@ (800c04c <_dtoa_r+0x5bc>)
 800bee2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bee6:	ed93 7b00 	vldr	d7, [r3]
 800beea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beec:	2b00      	cmp	r3, #0
 800beee:	ed8d 7b00 	vstr	d7, [sp]
 800bef2:	da03      	bge.n	800befc <_dtoa_r+0x46c>
 800bef4:	9b07      	ldr	r3, [sp, #28]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f340 8101 	ble.w	800c0fe <_dtoa_r+0x66e>
 800befc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf00:	4656      	mov	r6, sl
 800bf02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf06:	4620      	mov	r0, r4
 800bf08:	4629      	mov	r1, r5
 800bf0a:	f7f4 fc9f 	bl	800084c <__aeabi_ddiv>
 800bf0e:	f7f4 fe23 	bl	8000b58 <__aeabi_d2iz>
 800bf12:	4680      	mov	r8, r0
 800bf14:	f7f4 fb06 	bl	8000524 <__aeabi_i2d>
 800bf18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf1c:	f7f4 fb6c 	bl	80005f8 <__aeabi_dmul>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4620      	mov	r0, r4
 800bf26:	4629      	mov	r1, r5
 800bf28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf2c:	f7f4 f9ac 	bl	8000288 <__aeabi_dsub>
 800bf30:	f806 4b01 	strb.w	r4, [r6], #1
 800bf34:	9d07      	ldr	r5, [sp, #28]
 800bf36:	eba6 040a 	sub.w	r4, r6, sl
 800bf3a:	42a5      	cmp	r5, r4
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	f040 8117 	bne.w	800c172 <_dtoa_r+0x6e2>
 800bf44:	f7f4 f9a2 	bl	800028c <__adddf3>
 800bf48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	460d      	mov	r5, r1
 800bf50:	f7f4 fde2 	bl	8000b18 <__aeabi_dcmpgt>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	f040 80f9 	bne.w	800c14c <_dtoa_r+0x6bc>
 800bf5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf5e:	4620      	mov	r0, r4
 800bf60:	4629      	mov	r1, r5
 800bf62:	f7f4 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf66:	b118      	cbz	r0, 800bf70 <_dtoa_r+0x4e0>
 800bf68:	f018 0f01 	tst.w	r8, #1
 800bf6c:	f040 80ee 	bne.w	800c14c <_dtoa_r+0x6bc>
 800bf70:	4649      	mov	r1, r9
 800bf72:	4658      	mov	r0, fp
 800bf74:	f000 fc90 	bl	800c898 <_Bfree>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	7033      	strb	r3, [r6, #0]
 800bf7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf7e:	3701      	adds	r7, #1
 800bf80:	601f      	str	r7, [r3, #0]
 800bf82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 831d 	beq.w	800c5c4 <_dtoa_r+0xb34>
 800bf8a:	601e      	str	r6, [r3, #0]
 800bf8c:	e31a      	b.n	800c5c4 <_dtoa_r+0xb34>
 800bf8e:	07e2      	lsls	r2, r4, #31
 800bf90:	d505      	bpl.n	800bf9e <_dtoa_r+0x50e>
 800bf92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf96:	f7f4 fb2f 	bl	80005f8 <__aeabi_dmul>
 800bf9a:	3601      	adds	r6, #1
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	1064      	asrs	r4, r4, #1
 800bfa0:	3508      	adds	r5, #8
 800bfa2:	e73f      	b.n	800be24 <_dtoa_r+0x394>
 800bfa4:	2602      	movs	r6, #2
 800bfa6:	e742      	b.n	800be2e <_dtoa_r+0x39e>
 800bfa8:	9c07      	ldr	r4, [sp, #28]
 800bfaa:	9704      	str	r7, [sp, #16]
 800bfac:	e761      	b.n	800be72 <_dtoa_r+0x3e2>
 800bfae:	4b27      	ldr	r3, [pc, #156]	@ (800c04c <_dtoa_r+0x5bc>)
 800bfb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfba:	4454      	add	r4, sl
 800bfbc:	2900      	cmp	r1, #0
 800bfbe:	d053      	beq.n	800c068 <_dtoa_r+0x5d8>
 800bfc0:	4928      	ldr	r1, [pc, #160]	@ (800c064 <_dtoa_r+0x5d4>)
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	f7f4 fc42 	bl	800084c <__aeabi_ddiv>
 800bfc8:	4633      	mov	r3, r6
 800bfca:	462a      	mov	r2, r5
 800bfcc:	f7f4 f95c 	bl	8000288 <__aeabi_dsub>
 800bfd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfd4:	4656      	mov	r6, sl
 800bfd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfda:	f7f4 fdbd 	bl	8000b58 <__aeabi_d2iz>
 800bfde:	4605      	mov	r5, r0
 800bfe0:	f7f4 faa0 	bl	8000524 <__aeabi_i2d>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfec:	f7f4 f94c 	bl	8000288 <__aeabi_dsub>
 800bff0:	3530      	adds	r5, #48	@ 0x30
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bffa:	f806 5b01 	strb.w	r5, [r6], #1
 800bffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c002:	f7f4 fd6b 	bl	8000adc <__aeabi_dcmplt>
 800c006:	2800      	cmp	r0, #0
 800c008:	d171      	bne.n	800c0ee <_dtoa_r+0x65e>
 800c00a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c00e:	4911      	ldr	r1, [pc, #68]	@ (800c054 <_dtoa_r+0x5c4>)
 800c010:	2000      	movs	r0, #0
 800c012:	f7f4 f939 	bl	8000288 <__aeabi_dsub>
 800c016:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c01a:	f7f4 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800c01e:	2800      	cmp	r0, #0
 800c020:	f040 8095 	bne.w	800c14e <_dtoa_r+0x6be>
 800c024:	42a6      	cmp	r6, r4
 800c026:	f43f af50 	beq.w	800beca <_dtoa_r+0x43a>
 800c02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c02e:	4b0a      	ldr	r3, [pc, #40]	@ (800c058 <_dtoa_r+0x5c8>)
 800c030:	2200      	movs	r2, #0
 800c032:	f7f4 fae1 	bl	80005f8 <__aeabi_dmul>
 800c036:	4b08      	ldr	r3, [pc, #32]	@ (800c058 <_dtoa_r+0x5c8>)
 800c038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c03c:	2200      	movs	r2, #0
 800c03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c042:	f7f4 fad9 	bl	80005f8 <__aeabi_dmul>
 800c046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c04a:	e7c4      	b.n	800bfd6 <_dtoa_r+0x546>
 800c04c:	0800f260 	.word	0x0800f260
 800c050:	0800f238 	.word	0x0800f238
 800c054:	3ff00000 	.word	0x3ff00000
 800c058:	40240000 	.word	0x40240000
 800c05c:	401c0000 	.word	0x401c0000
 800c060:	40140000 	.word	0x40140000
 800c064:	3fe00000 	.word	0x3fe00000
 800c068:	4631      	mov	r1, r6
 800c06a:	4628      	mov	r0, r5
 800c06c:	f7f4 fac4 	bl	80005f8 <__aeabi_dmul>
 800c070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c074:	9415      	str	r4, [sp, #84]	@ 0x54
 800c076:	4656      	mov	r6, sl
 800c078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c07c:	f7f4 fd6c 	bl	8000b58 <__aeabi_d2iz>
 800c080:	4605      	mov	r5, r0
 800c082:	f7f4 fa4f 	bl	8000524 <__aeabi_i2d>
 800c086:	4602      	mov	r2, r0
 800c088:	460b      	mov	r3, r1
 800c08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c08e:	f7f4 f8fb 	bl	8000288 <__aeabi_dsub>
 800c092:	3530      	adds	r5, #48	@ 0x30
 800c094:	f806 5b01 	strb.w	r5, [r6], #1
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	42a6      	cmp	r6, r4
 800c09e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0a2:	f04f 0200 	mov.w	r2, #0
 800c0a6:	d124      	bne.n	800c0f2 <_dtoa_r+0x662>
 800c0a8:	4bac      	ldr	r3, [pc, #688]	@ (800c35c <_dtoa_r+0x8cc>)
 800c0aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0ae:	f7f4 f8ed 	bl	800028c <__adddf3>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ba:	f7f4 fd2d 	bl	8000b18 <__aeabi_dcmpgt>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d145      	bne.n	800c14e <_dtoa_r+0x6be>
 800c0c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0c6:	49a5      	ldr	r1, [pc, #660]	@ (800c35c <_dtoa_r+0x8cc>)
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	f7f4 f8dd 	bl	8000288 <__aeabi_dsub>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0d6:	f7f4 fd01 	bl	8000adc <__aeabi_dcmplt>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	f43f aef5 	beq.w	800beca <_dtoa_r+0x43a>
 800c0e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c0e2:	1e73      	subs	r3, r6, #1
 800c0e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c0ea:	2b30      	cmp	r3, #48	@ 0x30
 800c0ec:	d0f8      	beq.n	800c0e0 <_dtoa_r+0x650>
 800c0ee:	9f04      	ldr	r7, [sp, #16]
 800c0f0:	e73e      	b.n	800bf70 <_dtoa_r+0x4e0>
 800c0f2:	4b9b      	ldr	r3, [pc, #620]	@ (800c360 <_dtoa_r+0x8d0>)
 800c0f4:	f7f4 fa80 	bl	80005f8 <__aeabi_dmul>
 800c0f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0fc:	e7bc      	b.n	800c078 <_dtoa_r+0x5e8>
 800c0fe:	d10c      	bne.n	800c11a <_dtoa_r+0x68a>
 800c100:	4b98      	ldr	r3, [pc, #608]	@ (800c364 <_dtoa_r+0x8d4>)
 800c102:	2200      	movs	r2, #0
 800c104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c108:	f7f4 fa76 	bl	80005f8 <__aeabi_dmul>
 800c10c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c110:	f7f4 fcf8 	bl	8000b04 <__aeabi_dcmpge>
 800c114:	2800      	cmp	r0, #0
 800c116:	f000 8157 	beq.w	800c3c8 <_dtoa_r+0x938>
 800c11a:	2400      	movs	r4, #0
 800c11c:	4625      	mov	r5, r4
 800c11e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c120:	43db      	mvns	r3, r3
 800c122:	9304      	str	r3, [sp, #16]
 800c124:	4656      	mov	r6, sl
 800c126:	2700      	movs	r7, #0
 800c128:	4621      	mov	r1, r4
 800c12a:	4658      	mov	r0, fp
 800c12c:	f000 fbb4 	bl	800c898 <_Bfree>
 800c130:	2d00      	cmp	r5, #0
 800c132:	d0dc      	beq.n	800c0ee <_dtoa_r+0x65e>
 800c134:	b12f      	cbz	r7, 800c142 <_dtoa_r+0x6b2>
 800c136:	42af      	cmp	r7, r5
 800c138:	d003      	beq.n	800c142 <_dtoa_r+0x6b2>
 800c13a:	4639      	mov	r1, r7
 800c13c:	4658      	mov	r0, fp
 800c13e:	f000 fbab 	bl	800c898 <_Bfree>
 800c142:	4629      	mov	r1, r5
 800c144:	4658      	mov	r0, fp
 800c146:	f000 fba7 	bl	800c898 <_Bfree>
 800c14a:	e7d0      	b.n	800c0ee <_dtoa_r+0x65e>
 800c14c:	9704      	str	r7, [sp, #16]
 800c14e:	4633      	mov	r3, r6
 800c150:	461e      	mov	r6, r3
 800c152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c156:	2a39      	cmp	r2, #57	@ 0x39
 800c158:	d107      	bne.n	800c16a <_dtoa_r+0x6da>
 800c15a:	459a      	cmp	sl, r3
 800c15c:	d1f8      	bne.n	800c150 <_dtoa_r+0x6c0>
 800c15e:	9a04      	ldr	r2, [sp, #16]
 800c160:	3201      	adds	r2, #1
 800c162:	9204      	str	r2, [sp, #16]
 800c164:	2230      	movs	r2, #48	@ 0x30
 800c166:	f88a 2000 	strb.w	r2, [sl]
 800c16a:	781a      	ldrb	r2, [r3, #0]
 800c16c:	3201      	adds	r2, #1
 800c16e:	701a      	strb	r2, [r3, #0]
 800c170:	e7bd      	b.n	800c0ee <_dtoa_r+0x65e>
 800c172:	4b7b      	ldr	r3, [pc, #492]	@ (800c360 <_dtoa_r+0x8d0>)
 800c174:	2200      	movs	r2, #0
 800c176:	f7f4 fa3f 	bl	80005f8 <__aeabi_dmul>
 800c17a:	2200      	movs	r2, #0
 800c17c:	2300      	movs	r3, #0
 800c17e:	4604      	mov	r4, r0
 800c180:	460d      	mov	r5, r1
 800c182:	f7f4 fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c186:	2800      	cmp	r0, #0
 800c188:	f43f aebb 	beq.w	800bf02 <_dtoa_r+0x472>
 800c18c:	e6f0      	b.n	800bf70 <_dtoa_r+0x4e0>
 800c18e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c190:	2a00      	cmp	r2, #0
 800c192:	f000 80db 	beq.w	800c34c <_dtoa_r+0x8bc>
 800c196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c198:	2a01      	cmp	r2, #1
 800c19a:	f300 80bf 	bgt.w	800c31c <_dtoa_r+0x88c>
 800c19e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	f000 80b7 	beq.w	800c314 <_dtoa_r+0x884>
 800c1a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c1aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c1ac:	4646      	mov	r6, r8
 800c1ae:	9a08      	ldr	r2, [sp, #32]
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	441a      	add	r2, r3
 800c1b4:	4658      	mov	r0, fp
 800c1b6:	4498      	add	r8, r3
 800c1b8:	9208      	str	r2, [sp, #32]
 800c1ba:	f000 fc21 	bl	800ca00 <__i2b>
 800c1be:	4605      	mov	r5, r0
 800c1c0:	b15e      	cbz	r6, 800c1da <_dtoa_r+0x74a>
 800c1c2:	9b08      	ldr	r3, [sp, #32]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	dd08      	ble.n	800c1da <_dtoa_r+0x74a>
 800c1c8:	42b3      	cmp	r3, r6
 800c1ca:	9a08      	ldr	r2, [sp, #32]
 800c1cc:	bfa8      	it	ge
 800c1ce:	4633      	movge	r3, r6
 800c1d0:	eba8 0803 	sub.w	r8, r8, r3
 800c1d4:	1af6      	subs	r6, r6, r3
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	9308      	str	r3, [sp, #32]
 800c1da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1dc:	b1f3      	cbz	r3, 800c21c <_dtoa_r+0x78c>
 800c1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 80b7 	beq.w	800c354 <_dtoa_r+0x8c4>
 800c1e6:	b18c      	cbz	r4, 800c20c <_dtoa_r+0x77c>
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	4622      	mov	r2, r4
 800c1ec:	4658      	mov	r0, fp
 800c1ee:	f000 fcc7 	bl	800cb80 <__pow5mult>
 800c1f2:	464a      	mov	r2, r9
 800c1f4:	4601      	mov	r1, r0
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	4658      	mov	r0, fp
 800c1fa:	f000 fc17 	bl	800ca2c <__multiply>
 800c1fe:	4649      	mov	r1, r9
 800c200:	9004      	str	r0, [sp, #16]
 800c202:	4658      	mov	r0, fp
 800c204:	f000 fb48 	bl	800c898 <_Bfree>
 800c208:	9b04      	ldr	r3, [sp, #16]
 800c20a:	4699      	mov	r9, r3
 800c20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c20e:	1b1a      	subs	r2, r3, r4
 800c210:	d004      	beq.n	800c21c <_dtoa_r+0x78c>
 800c212:	4649      	mov	r1, r9
 800c214:	4658      	mov	r0, fp
 800c216:	f000 fcb3 	bl	800cb80 <__pow5mult>
 800c21a:	4681      	mov	r9, r0
 800c21c:	2101      	movs	r1, #1
 800c21e:	4658      	mov	r0, fp
 800c220:	f000 fbee 	bl	800ca00 <__i2b>
 800c224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c226:	4604      	mov	r4, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f000 81cf 	beq.w	800c5cc <_dtoa_r+0xb3c>
 800c22e:	461a      	mov	r2, r3
 800c230:	4601      	mov	r1, r0
 800c232:	4658      	mov	r0, fp
 800c234:	f000 fca4 	bl	800cb80 <__pow5mult>
 800c238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	4604      	mov	r4, r0
 800c23e:	f300 8095 	bgt.w	800c36c <_dtoa_r+0x8dc>
 800c242:	9b02      	ldr	r3, [sp, #8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	f040 8087 	bne.w	800c358 <_dtoa_r+0x8c8>
 800c24a:	9b03      	ldr	r3, [sp, #12]
 800c24c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c250:	2b00      	cmp	r3, #0
 800c252:	f040 8089 	bne.w	800c368 <_dtoa_r+0x8d8>
 800c256:	9b03      	ldr	r3, [sp, #12]
 800c258:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c25c:	0d1b      	lsrs	r3, r3, #20
 800c25e:	051b      	lsls	r3, r3, #20
 800c260:	b12b      	cbz	r3, 800c26e <_dtoa_r+0x7de>
 800c262:	9b08      	ldr	r3, [sp, #32]
 800c264:	3301      	adds	r3, #1
 800c266:	9308      	str	r3, [sp, #32]
 800c268:	f108 0801 	add.w	r8, r8, #1
 800c26c:	2301      	movs	r3, #1
 800c26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 81b0 	beq.w	800c5d8 <_dtoa_r+0xb48>
 800c278:	6923      	ldr	r3, [r4, #16]
 800c27a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c27e:	6918      	ldr	r0, [r3, #16]
 800c280:	f000 fb72 	bl	800c968 <__hi0bits>
 800c284:	f1c0 0020 	rsb	r0, r0, #32
 800c288:	9b08      	ldr	r3, [sp, #32]
 800c28a:	4418      	add	r0, r3
 800c28c:	f010 001f 	ands.w	r0, r0, #31
 800c290:	d077      	beq.n	800c382 <_dtoa_r+0x8f2>
 800c292:	f1c0 0320 	rsb	r3, r0, #32
 800c296:	2b04      	cmp	r3, #4
 800c298:	dd6b      	ble.n	800c372 <_dtoa_r+0x8e2>
 800c29a:	9b08      	ldr	r3, [sp, #32]
 800c29c:	f1c0 001c 	rsb	r0, r0, #28
 800c2a0:	4403      	add	r3, r0
 800c2a2:	4480      	add	r8, r0
 800c2a4:	4406      	add	r6, r0
 800c2a6:	9308      	str	r3, [sp, #32]
 800c2a8:	f1b8 0f00 	cmp.w	r8, #0
 800c2ac:	dd05      	ble.n	800c2ba <_dtoa_r+0x82a>
 800c2ae:	4649      	mov	r1, r9
 800c2b0:	4642      	mov	r2, r8
 800c2b2:	4658      	mov	r0, fp
 800c2b4:	f000 fcbe 	bl	800cc34 <__lshift>
 800c2b8:	4681      	mov	r9, r0
 800c2ba:	9b08      	ldr	r3, [sp, #32]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dd05      	ble.n	800c2cc <_dtoa_r+0x83c>
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	4658      	mov	r0, fp
 800c2c6:	f000 fcb5 	bl	800cc34 <__lshift>
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d059      	beq.n	800c386 <_dtoa_r+0x8f6>
 800c2d2:	4621      	mov	r1, r4
 800c2d4:	4648      	mov	r0, r9
 800c2d6:	f000 fd19 	bl	800cd0c <__mcmp>
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	da53      	bge.n	800c386 <_dtoa_r+0x8f6>
 800c2de:	1e7b      	subs	r3, r7, #1
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	4649      	mov	r1, r9
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	220a      	movs	r2, #10
 800c2e8:	4658      	mov	r0, fp
 800c2ea:	f000 faf7 	bl	800c8dc <__multadd>
 800c2ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2f0:	4681      	mov	r9, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f000 8172 	beq.w	800c5dc <_dtoa_r+0xb4c>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	220a      	movs	r2, #10
 800c2fe:	4658      	mov	r0, fp
 800c300:	f000 faec 	bl	800c8dc <__multadd>
 800c304:	9b00      	ldr	r3, [sp, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	4605      	mov	r5, r0
 800c30a:	dc67      	bgt.n	800c3dc <_dtoa_r+0x94c>
 800c30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c30e:	2b02      	cmp	r3, #2
 800c310:	dc41      	bgt.n	800c396 <_dtoa_r+0x906>
 800c312:	e063      	b.n	800c3dc <_dtoa_r+0x94c>
 800c314:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c316:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c31a:	e746      	b.n	800c1aa <_dtoa_r+0x71a>
 800c31c:	9b07      	ldr	r3, [sp, #28]
 800c31e:	1e5c      	subs	r4, r3, #1
 800c320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c322:	42a3      	cmp	r3, r4
 800c324:	bfbf      	itttt	lt
 800c326:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c328:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c32a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c32c:	1ae3      	sublt	r3, r4, r3
 800c32e:	bfb4      	ite	lt
 800c330:	18d2      	addlt	r2, r2, r3
 800c332:	1b1c      	subge	r4, r3, r4
 800c334:	9b07      	ldr	r3, [sp, #28]
 800c336:	bfbc      	itt	lt
 800c338:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c33a:	2400      	movlt	r4, #0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	bfb5      	itete	lt
 800c340:	eba8 0603 	sublt.w	r6, r8, r3
 800c344:	9b07      	ldrge	r3, [sp, #28]
 800c346:	2300      	movlt	r3, #0
 800c348:	4646      	movge	r6, r8
 800c34a:	e730      	b.n	800c1ae <_dtoa_r+0x71e>
 800c34c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c34e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c350:	4646      	mov	r6, r8
 800c352:	e735      	b.n	800c1c0 <_dtoa_r+0x730>
 800c354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c356:	e75c      	b.n	800c212 <_dtoa_r+0x782>
 800c358:	2300      	movs	r3, #0
 800c35a:	e788      	b.n	800c26e <_dtoa_r+0x7de>
 800c35c:	3fe00000 	.word	0x3fe00000
 800c360:	40240000 	.word	0x40240000
 800c364:	40140000 	.word	0x40140000
 800c368:	9b02      	ldr	r3, [sp, #8]
 800c36a:	e780      	b.n	800c26e <_dtoa_r+0x7de>
 800c36c:	2300      	movs	r3, #0
 800c36e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c370:	e782      	b.n	800c278 <_dtoa_r+0x7e8>
 800c372:	d099      	beq.n	800c2a8 <_dtoa_r+0x818>
 800c374:	9a08      	ldr	r2, [sp, #32]
 800c376:	331c      	adds	r3, #28
 800c378:	441a      	add	r2, r3
 800c37a:	4498      	add	r8, r3
 800c37c:	441e      	add	r6, r3
 800c37e:	9208      	str	r2, [sp, #32]
 800c380:	e792      	b.n	800c2a8 <_dtoa_r+0x818>
 800c382:	4603      	mov	r3, r0
 800c384:	e7f6      	b.n	800c374 <_dtoa_r+0x8e4>
 800c386:	9b07      	ldr	r3, [sp, #28]
 800c388:	9704      	str	r7, [sp, #16]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	dc20      	bgt.n	800c3d0 <_dtoa_r+0x940>
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c392:	2b02      	cmp	r3, #2
 800c394:	dd1e      	ble.n	800c3d4 <_dtoa_r+0x944>
 800c396:	9b00      	ldr	r3, [sp, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f47f aec0 	bne.w	800c11e <_dtoa_r+0x68e>
 800c39e:	4621      	mov	r1, r4
 800c3a0:	2205      	movs	r2, #5
 800c3a2:	4658      	mov	r0, fp
 800c3a4:	f000 fa9a 	bl	800c8dc <__multadd>
 800c3a8:	4601      	mov	r1, r0
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	4648      	mov	r0, r9
 800c3ae:	f000 fcad 	bl	800cd0c <__mcmp>
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	f77f aeb3 	ble.w	800c11e <_dtoa_r+0x68e>
 800c3b8:	4656      	mov	r6, sl
 800c3ba:	2331      	movs	r3, #49	@ 0x31
 800c3bc:	f806 3b01 	strb.w	r3, [r6], #1
 800c3c0:	9b04      	ldr	r3, [sp, #16]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	9304      	str	r3, [sp, #16]
 800c3c6:	e6ae      	b.n	800c126 <_dtoa_r+0x696>
 800c3c8:	9c07      	ldr	r4, [sp, #28]
 800c3ca:	9704      	str	r7, [sp, #16]
 800c3cc:	4625      	mov	r5, r4
 800c3ce:	e7f3      	b.n	800c3b8 <_dtoa_r+0x928>
 800c3d0:	9b07      	ldr	r3, [sp, #28]
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 8104 	beq.w	800c5e4 <_dtoa_r+0xb54>
 800c3dc:	2e00      	cmp	r6, #0
 800c3de:	dd05      	ble.n	800c3ec <_dtoa_r+0x95c>
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	4632      	mov	r2, r6
 800c3e4:	4658      	mov	r0, fp
 800c3e6:	f000 fc25 	bl	800cc34 <__lshift>
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d05a      	beq.n	800c4a8 <_dtoa_r+0xa18>
 800c3f2:	6869      	ldr	r1, [r5, #4]
 800c3f4:	4658      	mov	r0, fp
 800c3f6:	f000 fa0f 	bl	800c818 <_Balloc>
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	b928      	cbnz	r0, 800c40a <_dtoa_r+0x97a>
 800c3fe:	4b84      	ldr	r3, [pc, #528]	@ (800c610 <_dtoa_r+0xb80>)
 800c400:	4602      	mov	r2, r0
 800c402:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c406:	f7ff bb5a 	b.w	800babe <_dtoa_r+0x2e>
 800c40a:	692a      	ldr	r2, [r5, #16]
 800c40c:	3202      	adds	r2, #2
 800c40e:	0092      	lsls	r2, r2, #2
 800c410:	f105 010c 	add.w	r1, r5, #12
 800c414:	300c      	adds	r0, #12
 800c416:	f7ff fa92 	bl	800b93e <memcpy>
 800c41a:	2201      	movs	r2, #1
 800c41c:	4631      	mov	r1, r6
 800c41e:	4658      	mov	r0, fp
 800c420:	f000 fc08 	bl	800cc34 <__lshift>
 800c424:	f10a 0301 	add.w	r3, sl, #1
 800c428:	9307      	str	r3, [sp, #28]
 800c42a:	9b00      	ldr	r3, [sp, #0]
 800c42c:	4453      	add	r3, sl
 800c42e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c430:	9b02      	ldr	r3, [sp, #8]
 800c432:	f003 0301 	and.w	r3, r3, #1
 800c436:	462f      	mov	r7, r5
 800c438:	930a      	str	r3, [sp, #40]	@ 0x28
 800c43a:	4605      	mov	r5, r0
 800c43c:	9b07      	ldr	r3, [sp, #28]
 800c43e:	4621      	mov	r1, r4
 800c440:	3b01      	subs	r3, #1
 800c442:	4648      	mov	r0, r9
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	f7ff fa99 	bl	800b97c <quorem>
 800c44a:	4639      	mov	r1, r7
 800c44c:	9002      	str	r0, [sp, #8]
 800c44e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c452:	4648      	mov	r0, r9
 800c454:	f000 fc5a 	bl	800cd0c <__mcmp>
 800c458:	462a      	mov	r2, r5
 800c45a:	9008      	str	r0, [sp, #32]
 800c45c:	4621      	mov	r1, r4
 800c45e:	4658      	mov	r0, fp
 800c460:	f000 fc70 	bl	800cd44 <__mdiff>
 800c464:	68c2      	ldr	r2, [r0, #12]
 800c466:	4606      	mov	r6, r0
 800c468:	bb02      	cbnz	r2, 800c4ac <_dtoa_r+0xa1c>
 800c46a:	4601      	mov	r1, r0
 800c46c:	4648      	mov	r0, r9
 800c46e:	f000 fc4d 	bl	800cd0c <__mcmp>
 800c472:	4602      	mov	r2, r0
 800c474:	4631      	mov	r1, r6
 800c476:	4658      	mov	r0, fp
 800c478:	920e      	str	r2, [sp, #56]	@ 0x38
 800c47a:	f000 fa0d 	bl	800c898 <_Bfree>
 800c47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c480:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c482:	9e07      	ldr	r6, [sp, #28]
 800c484:	ea43 0102 	orr.w	r1, r3, r2
 800c488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c48a:	4319      	orrs	r1, r3
 800c48c:	d110      	bne.n	800c4b0 <_dtoa_r+0xa20>
 800c48e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c492:	d029      	beq.n	800c4e8 <_dtoa_r+0xa58>
 800c494:	9b08      	ldr	r3, [sp, #32]
 800c496:	2b00      	cmp	r3, #0
 800c498:	dd02      	ble.n	800c4a0 <_dtoa_r+0xa10>
 800c49a:	9b02      	ldr	r3, [sp, #8]
 800c49c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c4a0:	9b00      	ldr	r3, [sp, #0]
 800c4a2:	f883 8000 	strb.w	r8, [r3]
 800c4a6:	e63f      	b.n	800c128 <_dtoa_r+0x698>
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	e7bb      	b.n	800c424 <_dtoa_r+0x994>
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	e7e1      	b.n	800c474 <_dtoa_r+0x9e4>
 800c4b0:	9b08      	ldr	r3, [sp, #32]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	db04      	blt.n	800c4c0 <_dtoa_r+0xa30>
 800c4b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4b8:	430b      	orrs	r3, r1
 800c4ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4bc:	430b      	orrs	r3, r1
 800c4be:	d120      	bne.n	800c502 <_dtoa_r+0xa72>
 800c4c0:	2a00      	cmp	r2, #0
 800c4c2:	dded      	ble.n	800c4a0 <_dtoa_r+0xa10>
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	4658      	mov	r0, fp
 800c4ca:	f000 fbb3 	bl	800cc34 <__lshift>
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	4681      	mov	r9, r0
 800c4d2:	f000 fc1b 	bl	800cd0c <__mcmp>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	dc03      	bgt.n	800c4e2 <_dtoa_r+0xa52>
 800c4da:	d1e1      	bne.n	800c4a0 <_dtoa_r+0xa10>
 800c4dc:	f018 0f01 	tst.w	r8, #1
 800c4e0:	d0de      	beq.n	800c4a0 <_dtoa_r+0xa10>
 800c4e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4e6:	d1d8      	bne.n	800c49a <_dtoa_r+0xa0a>
 800c4e8:	9a00      	ldr	r2, [sp, #0]
 800c4ea:	2339      	movs	r3, #57	@ 0x39
 800c4ec:	7013      	strb	r3, [r2, #0]
 800c4ee:	4633      	mov	r3, r6
 800c4f0:	461e      	mov	r6, r3
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c4f8:	2a39      	cmp	r2, #57	@ 0x39
 800c4fa:	d052      	beq.n	800c5a2 <_dtoa_r+0xb12>
 800c4fc:	3201      	adds	r2, #1
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	e612      	b.n	800c128 <_dtoa_r+0x698>
 800c502:	2a00      	cmp	r2, #0
 800c504:	dd07      	ble.n	800c516 <_dtoa_r+0xa86>
 800c506:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c50a:	d0ed      	beq.n	800c4e8 <_dtoa_r+0xa58>
 800c50c:	9a00      	ldr	r2, [sp, #0]
 800c50e:	f108 0301 	add.w	r3, r8, #1
 800c512:	7013      	strb	r3, [r2, #0]
 800c514:	e608      	b.n	800c128 <_dtoa_r+0x698>
 800c516:	9b07      	ldr	r3, [sp, #28]
 800c518:	9a07      	ldr	r2, [sp, #28]
 800c51a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c51e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c520:	4293      	cmp	r3, r2
 800c522:	d028      	beq.n	800c576 <_dtoa_r+0xae6>
 800c524:	4649      	mov	r1, r9
 800c526:	2300      	movs	r3, #0
 800c528:	220a      	movs	r2, #10
 800c52a:	4658      	mov	r0, fp
 800c52c:	f000 f9d6 	bl	800c8dc <__multadd>
 800c530:	42af      	cmp	r7, r5
 800c532:	4681      	mov	r9, r0
 800c534:	f04f 0300 	mov.w	r3, #0
 800c538:	f04f 020a 	mov.w	r2, #10
 800c53c:	4639      	mov	r1, r7
 800c53e:	4658      	mov	r0, fp
 800c540:	d107      	bne.n	800c552 <_dtoa_r+0xac2>
 800c542:	f000 f9cb 	bl	800c8dc <__multadd>
 800c546:	4607      	mov	r7, r0
 800c548:	4605      	mov	r5, r0
 800c54a:	9b07      	ldr	r3, [sp, #28]
 800c54c:	3301      	adds	r3, #1
 800c54e:	9307      	str	r3, [sp, #28]
 800c550:	e774      	b.n	800c43c <_dtoa_r+0x9ac>
 800c552:	f000 f9c3 	bl	800c8dc <__multadd>
 800c556:	4629      	mov	r1, r5
 800c558:	4607      	mov	r7, r0
 800c55a:	2300      	movs	r3, #0
 800c55c:	220a      	movs	r2, #10
 800c55e:	4658      	mov	r0, fp
 800c560:	f000 f9bc 	bl	800c8dc <__multadd>
 800c564:	4605      	mov	r5, r0
 800c566:	e7f0      	b.n	800c54a <_dtoa_r+0xaba>
 800c568:	9b00      	ldr	r3, [sp, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	bfcc      	ite	gt
 800c56e:	461e      	movgt	r6, r3
 800c570:	2601      	movle	r6, #1
 800c572:	4456      	add	r6, sl
 800c574:	2700      	movs	r7, #0
 800c576:	4649      	mov	r1, r9
 800c578:	2201      	movs	r2, #1
 800c57a:	4658      	mov	r0, fp
 800c57c:	f000 fb5a 	bl	800cc34 <__lshift>
 800c580:	4621      	mov	r1, r4
 800c582:	4681      	mov	r9, r0
 800c584:	f000 fbc2 	bl	800cd0c <__mcmp>
 800c588:	2800      	cmp	r0, #0
 800c58a:	dcb0      	bgt.n	800c4ee <_dtoa_r+0xa5e>
 800c58c:	d102      	bne.n	800c594 <_dtoa_r+0xb04>
 800c58e:	f018 0f01 	tst.w	r8, #1
 800c592:	d1ac      	bne.n	800c4ee <_dtoa_r+0xa5e>
 800c594:	4633      	mov	r3, r6
 800c596:	461e      	mov	r6, r3
 800c598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c59c:	2a30      	cmp	r2, #48	@ 0x30
 800c59e:	d0fa      	beq.n	800c596 <_dtoa_r+0xb06>
 800c5a0:	e5c2      	b.n	800c128 <_dtoa_r+0x698>
 800c5a2:	459a      	cmp	sl, r3
 800c5a4:	d1a4      	bne.n	800c4f0 <_dtoa_r+0xa60>
 800c5a6:	9b04      	ldr	r3, [sp, #16]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	9304      	str	r3, [sp, #16]
 800c5ac:	2331      	movs	r3, #49	@ 0x31
 800c5ae:	f88a 3000 	strb.w	r3, [sl]
 800c5b2:	e5b9      	b.n	800c128 <_dtoa_r+0x698>
 800c5b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c614 <_dtoa_r+0xb84>
 800c5ba:	b11b      	cbz	r3, 800c5c4 <_dtoa_r+0xb34>
 800c5bc:	f10a 0308 	add.w	r3, sl, #8
 800c5c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	4650      	mov	r0, sl
 800c5c6:	b019      	add	sp, #100	@ 0x64
 800c5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	f77f ae37 	ble.w	800c242 <_dtoa_r+0x7b2>
 800c5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5d8:	2001      	movs	r0, #1
 800c5da:	e655      	b.n	800c288 <_dtoa_r+0x7f8>
 800c5dc:	9b00      	ldr	r3, [sp, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f77f aed6 	ble.w	800c390 <_dtoa_r+0x900>
 800c5e4:	4656      	mov	r6, sl
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	4648      	mov	r0, r9
 800c5ea:	f7ff f9c7 	bl	800b97c <quorem>
 800c5ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5f2:	f806 8b01 	strb.w	r8, [r6], #1
 800c5f6:	9b00      	ldr	r3, [sp, #0]
 800c5f8:	eba6 020a 	sub.w	r2, r6, sl
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	ddb3      	ble.n	800c568 <_dtoa_r+0xad8>
 800c600:	4649      	mov	r1, r9
 800c602:	2300      	movs	r3, #0
 800c604:	220a      	movs	r2, #10
 800c606:	4658      	mov	r0, fp
 800c608:	f000 f968 	bl	800c8dc <__multadd>
 800c60c:	4681      	mov	r9, r0
 800c60e:	e7ea      	b.n	800c5e6 <_dtoa_r+0xb56>
 800c610:	0800f1c0 	.word	0x0800f1c0
 800c614:	0800f144 	.word	0x0800f144

0800c618 <_free_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4605      	mov	r5, r0
 800c61c:	2900      	cmp	r1, #0
 800c61e:	d041      	beq.n	800c6a4 <_free_r+0x8c>
 800c620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c624:	1f0c      	subs	r4, r1, #4
 800c626:	2b00      	cmp	r3, #0
 800c628:	bfb8      	it	lt
 800c62a:	18e4      	addlt	r4, r4, r3
 800c62c:	f000 f8e8 	bl	800c800 <__malloc_lock>
 800c630:	4a1d      	ldr	r2, [pc, #116]	@ (800c6a8 <_free_r+0x90>)
 800c632:	6813      	ldr	r3, [r2, #0]
 800c634:	b933      	cbnz	r3, 800c644 <_free_r+0x2c>
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	6014      	str	r4, [r2, #0]
 800c63a:	4628      	mov	r0, r5
 800c63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c640:	f000 b8e4 	b.w	800c80c <__malloc_unlock>
 800c644:	42a3      	cmp	r3, r4
 800c646:	d908      	bls.n	800c65a <_free_r+0x42>
 800c648:	6820      	ldr	r0, [r4, #0]
 800c64a:	1821      	adds	r1, r4, r0
 800c64c:	428b      	cmp	r3, r1
 800c64e:	bf01      	itttt	eq
 800c650:	6819      	ldreq	r1, [r3, #0]
 800c652:	685b      	ldreq	r3, [r3, #4]
 800c654:	1809      	addeq	r1, r1, r0
 800c656:	6021      	streq	r1, [r4, #0]
 800c658:	e7ed      	b.n	800c636 <_free_r+0x1e>
 800c65a:	461a      	mov	r2, r3
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	b10b      	cbz	r3, 800c664 <_free_r+0x4c>
 800c660:	42a3      	cmp	r3, r4
 800c662:	d9fa      	bls.n	800c65a <_free_r+0x42>
 800c664:	6811      	ldr	r1, [r2, #0]
 800c666:	1850      	adds	r0, r2, r1
 800c668:	42a0      	cmp	r0, r4
 800c66a:	d10b      	bne.n	800c684 <_free_r+0x6c>
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	4401      	add	r1, r0
 800c670:	1850      	adds	r0, r2, r1
 800c672:	4283      	cmp	r3, r0
 800c674:	6011      	str	r1, [r2, #0]
 800c676:	d1e0      	bne.n	800c63a <_free_r+0x22>
 800c678:	6818      	ldr	r0, [r3, #0]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	6053      	str	r3, [r2, #4]
 800c67e:	4408      	add	r0, r1
 800c680:	6010      	str	r0, [r2, #0]
 800c682:	e7da      	b.n	800c63a <_free_r+0x22>
 800c684:	d902      	bls.n	800c68c <_free_r+0x74>
 800c686:	230c      	movs	r3, #12
 800c688:	602b      	str	r3, [r5, #0]
 800c68a:	e7d6      	b.n	800c63a <_free_r+0x22>
 800c68c:	6820      	ldr	r0, [r4, #0]
 800c68e:	1821      	adds	r1, r4, r0
 800c690:	428b      	cmp	r3, r1
 800c692:	bf04      	itt	eq
 800c694:	6819      	ldreq	r1, [r3, #0]
 800c696:	685b      	ldreq	r3, [r3, #4]
 800c698:	6063      	str	r3, [r4, #4]
 800c69a:	bf04      	itt	eq
 800c69c:	1809      	addeq	r1, r1, r0
 800c69e:	6021      	streq	r1, [r4, #0]
 800c6a0:	6054      	str	r4, [r2, #4]
 800c6a2:	e7ca      	b.n	800c63a <_free_r+0x22>
 800c6a4:	bd38      	pop	{r3, r4, r5, pc}
 800c6a6:	bf00      	nop
 800c6a8:	2000221c 	.word	0x2000221c

0800c6ac <malloc>:
 800c6ac:	4b02      	ldr	r3, [pc, #8]	@ (800c6b8 <malloc+0xc>)
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	f000 b825 	b.w	800c700 <_malloc_r>
 800c6b6:	bf00      	nop
 800c6b8:	20000118 	.word	0x20000118

0800c6bc <sbrk_aligned>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	4e0f      	ldr	r6, [pc, #60]	@ (800c6fc <sbrk_aligned+0x40>)
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	6831      	ldr	r1, [r6, #0]
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	b911      	cbnz	r1, 800c6ce <sbrk_aligned+0x12>
 800c6c8:	f000 fe46 	bl	800d358 <_sbrk_r>
 800c6cc:	6030      	str	r0, [r6, #0]
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f000 fe41 	bl	800d358 <_sbrk_r>
 800c6d6:	1c43      	adds	r3, r0, #1
 800c6d8:	d103      	bne.n	800c6e2 <sbrk_aligned+0x26>
 800c6da:	f04f 34ff 	mov.w	r4, #4294967295
 800c6de:	4620      	mov	r0, r4
 800c6e0:	bd70      	pop	{r4, r5, r6, pc}
 800c6e2:	1cc4      	adds	r4, r0, #3
 800c6e4:	f024 0403 	bic.w	r4, r4, #3
 800c6e8:	42a0      	cmp	r0, r4
 800c6ea:	d0f8      	beq.n	800c6de <sbrk_aligned+0x22>
 800c6ec:	1a21      	subs	r1, r4, r0
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	f000 fe32 	bl	800d358 <_sbrk_r>
 800c6f4:	3001      	adds	r0, #1
 800c6f6:	d1f2      	bne.n	800c6de <sbrk_aligned+0x22>
 800c6f8:	e7ef      	b.n	800c6da <sbrk_aligned+0x1e>
 800c6fa:	bf00      	nop
 800c6fc:	20002218 	.word	0x20002218

0800c700 <_malloc_r>:
 800c700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c704:	1ccd      	adds	r5, r1, #3
 800c706:	f025 0503 	bic.w	r5, r5, #3
 800c70a:	3508      	adds	r5, #8
 800c70c:	2d0c      	cmp	r5, #12
 800c70e:	bf38      	it	cc
 800c710:	250c      	movcc	r5, #12
 800c712:	2d00      	cmp	r5, #0
 800c714:	4606      	mov	r6, r0
 800c716:	db01      	blt.n	800c71c <_malloc_r+0x1c>
 800c718:	42a9      	cmp	r1, r5
 800c71a:	d904      	bls.n	800c726 <_malloc_r+0x26>
 800c71c:	230c      	movs	r3, #12
 800c71e:	6033      	str	r3, [r6, #0]
 800c720:	2000      	movs	r0, #0
 800c722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c7fc <_malloc_r+0xfc>
 800c72a:	f000 f869 	bl	800c800 <__malloc_lock>
 800c72e:	f8d8 3000 	ldr.w	r3, [r8]
 800c732:	461c      	mov	r4, r3
 800c734:	bb44      	cbnz	r4, 800c788 <_malloc_r+0x88>
 800c736:	4629      	mov	r1, r5
 800c738:	4630      	mov	r0, r6
 800c73a:	f7ff ffbf 	bl	800c6bc <sbrk_aligned>
 800c73e:	1c43      	adds	r3, r0, #1
 800c740:	4604      	mov	r4, r0
 800c742:	d158      	bne.n	800c7f6 <_malloc_r+0xf6>
 800c744:	f8d8 4000 	ldr.w	r4, [r8]
 800c748:	4627      	mov	r7, r4
 800c74a:	2f00      	cmp	r7, #0
 800c74c:	d143      	bne.n	800c7d6 <_malloc_r+0xd6>
 800c74e:	2c00      	cmp	r4, #0
 800c750:	d04b      	beq.n	800c7ea <_malloc_r+0xea>
 800c752:	6823      	ldr	r3, [r4, #0]
 800c754:	4639      	mov	r1, r7
 800c756:	4630      	mov	r0, r6
 800c758:	eb04 0903 	add.w	r9, r4, r3
 800c75c:	f000 fdfc 	bl	800d358 <_sbrk_r>
 800c760:	4581      	cmp	r9, r0
 800c762:	d142      	bne.n	800c7ea <_malloc_r+0xea>
 800c764:	6821      	ldr	r1, [r4, #0]
 800c766:	1a6d      	subs	r5, r5, r1
 800c768:	4629      	mov	r1, r5
 800c76a:	4630      	mov	r0, r6
 800c76c:	f7ff ffa6 	bl	800c6bc <sbrk_aligned>
 800c770:	3001      	adds	r0, #1
 800c772:	d03a      	beq.n	800c7ea <_malloc_r+0xea>
 800c774:	6823      	ldr	r3, [r4, #0]
 800c776:	442b      	add	r3, r5
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	f8d8 3000 	ldr.w	r3, [r8]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	bb62      	cbnz	r2, 800c7dc <_malloc_r+0xdc>
 800c782:	f8c8 7000 	str.w	r7, [r8]
 800c786:	e00f      	b.n	800c7a8 <_malloc_r+0xa8>
 800c788:	6822      	ldr	r2, [r4, #0]
 800c78a:	1b52      	subs	r2, r2, r5
 800c78c:	d420      	bmi.n	800c7d0 <_malloc_r+0xd0>
 800c78e:	2a0b      	cmp	r2, #11
 800c790:	d917      	bls.n	800c7c2 <_malloc_r+0xc2>
 800c792:	1961      	adds	r1, r4, r5
 800c794:	42a3      	cmp	r3, r4
 800c796:	6025      	str	r5, [r4, #0]
 800c798:	bf18      	it	ne
 800c79a:	6059      	strne	r1, [r3, #4]
 800c79c:	6863      	ldr	r3, [r4, #4]
 800c79e:	bf08      	it	eq
 800c7a0:	f8c8 1000 	streq.w	r1, [r8]
 800c7a4:	5162      	str	r2, [r4, r5]
 800c7a6:	604b      	str	r3, [r1, #4]
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f000 f82f 	bl	800c80c <__malloc_unlock>
 800c7ae:	f104 000b 	add.w	r0, r4, #11
 800c7b2:	1d23      	adds	r3, r4, #4
 800c7b4:	f020 0007 	bic.w	r0, r0, #7
 800c7b8:	1ac2      	subs	r2, r0, r3
 800c7ba:	bf1c      	itt	ne
 800c7bc:	1a1b      	subne	r3, r3, r0
 800c7be:	50a3      	strne	r3, [r4, r2]
 800c7c0:	e7af      	b.n	800c722 <_malloc_r+0x22>
 800c7c2:	6862      	ldr	r2, [r4, #4]
 800c7c4:	42a3      	cmp	r3, r4
 800c7c6:	bf0c      	ite	eq
 800c7c8:	f8c8 2000 	streq.w	r2, [r8]
 800c7cc:	605a      	strne	r2, [r3, #4]
 800c7ce:	e7eb      	b.n	800c7a8 <_malloc_r+0xa8>
 800c7d0:	4623      	mov	r3, r4
 800c7d2:	6864      	ldr	r4, [r4, #4]
 800c7d4:	e7ae      	b.n	800c734 <_malloc_r+0x34>
 800c7d6:	463c      	mov	r4, r7
 800c7d8:	687f      	ldr	r7, [r7, #4]
 800c7da:	e7b6      	b.n	800c74a <_malloc_r+0x4a>
 800c7dc:	461a      	mov	r2, r3
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	d1fb      	bne.n	800c7dc <_malloc_r+0xdc>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	6053      	str	r3, [r2, #4]
 800c7e8:	e7de      	b.n	800c7a8 <_malloc_r+0xa8>
 800c7ea:	230c      	movs	r3, #12
 800c7ec:	6033      	str	r3, [r6, #0]
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f000 f80c 	bl	800c80c <__malloc_unlock>
 800c7f4:	e794      	b.n	800c720 <_malloc_r+0x20>
 800c7f6:	6005      	str	r5, [r0, #0]
 800c7f8:	e7d6      	b.n	800c7a8 <_malloc_r+0xa8>
 800c7fa:	bf00      	nop
 800c7fc:	2000221c 	.word	0x2000221c

0800c800 <__malloc_lock>:
 800c800:	4801      	ldr	r0, [pc, #4]	@ (800c808 <__malloc_lock+0x8>)
 800c802:	f7ff b89a 	b.w	800b93a <__retarget_lock_acquire_recursive>
 800c806:	bf00      	nop
 800c808:	20002214 	.word	0x20002214

0800c80c <__malloc_unlock>:
 800c80c:	4801      	ldr	r0, [pc, #4]	@ (800c814 <__malloc_unlock+0x8>)
 800c80e:	f7ff b895 	b.w	800b93c <__retarget_lock_release_recursive>
 800c812:	bf00      	nop
 800c814:	20002214 	.word	0x20002214

0800c818 <_Balloc>:
 800c818:	b570      	push	{r4, r5, r6, lr}
 800c81a:	69c6      	ldr	r6, [r0, #28]
 800c81c:	4604      	mov	r4, r0
 800c81e:	460d      	mov	r5, r1
 800c820:	b976      	cbnz	r6, 800c840 <_Balloc+0x28>
 800c822:	2010      	movs	r0, #16
 800c824:	f7ff ff42 	bl	800c6ac <malloc>
 800c828:	4602      	mov	r2, r0
 800c82a:	61e0      	str	r0, [r4, #28]
 800c82c:	b920      	cbnz	r0, 800c838 <_Balloc+0x20>
 800c82e:	4b18      	ldr	r3, [pc, #96]	@ (800c890 <_Balloc+0x78>)
 800c830:	4818      	ldr	r0, [pc, #96]	@ (800c894 <_Balloc+0x7c>)
 800c832:	216b      	movs	r1, #107	@ 0x6b
 800c834:	f000 fda0 	bl	800d378 <__assert_func>
 800c838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c83c:	6006      	str	r6, [r0, #0]
 800c83e:	60c6      	str	r6, [r0, #12]
 800c840:	69e6      	ldr	r6, [r4, #28]
 800c842:	68f3      	ldr	r3, [r6, #12]
 800c844:	b183      	cbz	r3, 800c868 <_Balloc+0x50>
 800c846:	69e3      	ldr	r3, [r4, #28]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c84e:	b9b8      	cbnz	r0, 800c880 <_Balloc+0x68>
 800c850:	2101      	movs	r1, #1
 800c852:	fa01 f605 	lsl.w	r6, r1, r5
 800c856:	1d72      	adds	r2, r6, #5
 800c858:	0092      	lsls	r2, r2, #2
 800c85a:	4620      	mov	r0, r4
 800c85c:	f000 fdaa 	bl	800d3b4 <_calloc_r>
 800c860:	b160      	cbz	r0, 800c87c <_Balloc+0x64>
 800c862:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c866:	e00e      	b.n	800c886 <_Balloc+0x6e>
 800c868:	2221      	movs	r2, #33	@ 0x21
 800c86a:	2104      	movs	r1, #4
 800c86c:	4620      	mov	r0, r4
 800c86e:	f000 fda1 	bl	800d3b4 <_calloc_r>
 800c872:	69e3      	ldr	r3, [r4, #28]
 800c874:	60f0      	str	r0, [r6, #12]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1e4      	bne.n	800c846 <_Balloc+0x2e>
 800c87c:	2000      	movs	r0, #0
 800c87e:	bd70      	pop	{r4, r5, r6, pc}
 800c880:	6802      	ldr	r2, [r0, #0]
 800c882:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c886:	2300      	movs	r3, #0
 800c888:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c88c:	e7f7      	b.n	800c87e <_Balloc+0x66>
 800c88e:	bf00      	nop
 800c890:	0800f151 	.word	0x0800f151
 800c894:	0800f1d1 	.word	0x0800f1d1

0800c898 <_Bfree>:
 800c898:	b570      	push	{r4, r5, r6, lr}
 800c89a:	69c6      	ldr	r6, [r0, #28]
 800c89c:	4605      	mov	r5, r0
 800c89e:	460c      	mov	r4, r1
 800c8a0:	b976      	cbnz	r6, 800c8c0 <_Bfree+0x28>
 800c8a2:	2010      	movs	r0, #16
 800c8a4:	f7ff ff02 	bl	800c6ac <malloc>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	61e8      	str	r0, [r5, #28]
 800c8ac:	b920      	cbnz	r0, 800c8b8 <_Bfree+0x20>
 800c8ae:	4b09      	ldr	r3, [pc, #36]	@ (800c8d4 <_Bfree+0x3c>)
 800c8b0:	4809      	ldr	r0, [pc, #36]	@ (800c8d8 <_Bfree+0x40>)
 800c8b2:	218f      	movs	r1, #143	@ 0x8f
 800c8b4:	f000 fd60 	bl	800d378 <__assert_func>
 800c8b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8bc:	6006      	str	r6, [r0, #0]
 800c8be:	60c6      	str	r6, [r0, #12]
 800c8c0:	b13c      	cbz	r4, 800c8d2 <_Bfree+0x3a>
 800c8c2:	69eb      	ldr	r3, [r5, #28]
 800c8c4:	6862      	ldr	r2, [r4, #4]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8cc:	6021      	str	r1, [r4, #0]
 800c8ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8d2:	bd70      	pop	{r4, r5, r6, pc}
 800c8d4:	0800f151 	.word	0x0800f151
 800c8d8:	0800f1d1 	.word	0x0800f1d1

0800c8dc <__multadd>:
 800c8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e0:	690d      	ldr	r5, [r1, #16]
 800c8e2:	4607      	mov	r7, r0
 800c8e4:	460c      	mov	r4, r1
 800c8e6:	461e      	mov	r6, r3
 800c8e8:	f101 0c14 	add.w	ip, r1, #20
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	f8dc 3000 	ldr.w	r3, [ip]
 800c8f2:	b299      	uxth	r1, r3
 800c8f4:	fb02 6101 	mla	r1, r2, r1, r6
 800c8f8:	0c1e      	lsrs	r6, r3, #16
 800c8fa:	0c0b      	lsrs	r3, r1, #16
 800c8fc:	fb02 3306 	mla	r3, r2, r6, r3
 800c900:	b289      	uxth	r1, r1
 800c902:	3001      	adds	r0, #1
 800c904:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c908:	4285      	cmp	r5, r0
 800c90a:	f84c 1b04 	str.w	r1, [ip], #4
 800c90e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c912:	dcec      	bgt.n	800c8ee <__multadd+0x12>
 800c914:	b30e      	cbz	r6, 800c95a <__multadd+0x7e>
 800c916:	68a3      	ldr	r3, [r4, #8]
 800c918:	42ab      	cmp	r3, r5
 800c91a:	dc19      	bgt.n	800c950 <__multadd+0x74>
 800c91c:	6861      	ldr	r1, [r4, #4]
 800c91e:	4638      	mov	r0, r7
 800c920:	3101      	adds	r1, #1
 800c922:	f7ff ff79 	bl	800c818 <_Balloc>
 800c926:	4680      	mov	r8, r0
 800c928:	b928      	cbnz	r0, 800c936 <__multadd+0x5a>
 800c92a:	4602      	mov	r2, r0
 800c92c:	4b0c      	ldr	r3, [pc, #48]	@ (800c960 <__multadd+0x84>)
 800c92e:	480d      	ldr	r0, [pc, #52]	@ (800c964 <__multadd+0x88>)
 800c930:	21ba      	movs	r1, #186	@ 0xba
 800c932:	f000 fd21 	bl	800d378 <__assert_func>
 800c936:	6922      	ldr	r2, [r4, #16]
 800c938:	3202      	adds	r2, #2
 800c93a:	f104 010c 	add.w	r1, r4, #12
 800c93e:	0092      	lsls	r2, r2, #2
 800c940:	300c      	adds	r0, #12
 800c942:	f7fe fffc 	bl	800b93e <memcpy>
 800c946:	4621      	mov	r1, r4
 800c948:	4638      	mov	r0, r7
 800c94a:	f7ff ffa5 	bl	800c898 <_Bfree>
 800c94e:	4644      	mov	r4, r8
 800c950:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c954:	3501      	adds	r5, #1
 800c956:	615e      	str	r6, [r3, #20]
 800c958:	6125      	str	r5, [r4, #16]
 800c95a:	4620      	mov	r0, r4
 800c95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c960:	0800f1c0 	.word	0x0800f1c0
 800c964:	0800f1d1 	.word	0x0800f1d1

0800c968 <__hi0bits>:
 800c968:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c96c:	4603      	mov	r3, r0
 800c96e:	bf36      	itet	cc
 800c970:	0403      	lslcc	r3, r0, #16
 800c972:	2000      	movcs	r0, #0
 800c974:	2010      	movcc	r0, #16
 800c976:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c97a:	bf3c      	itt	cc
 800c97c:	021b      	lslcc	r3, r3, #8
 800c97e:	3008      	addcc	r0, #8
 800c980:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c984:	bf3c      	itt	cc
 800c986:	011b      	lslcc	r3, r3, #4
 800c988:	3004      	addcc	r0, #4
 800c98a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c98e:	bf3c      	itt	cc
 800c990:	009b      	lslcc	r3, r3, #2
 800c992:	3002      	addcc	r0, #2
 800c994:	2b00      	cmp	r3, #0
 800c996:	db05      	blt.n	800c9a4 <__hi0bits+0x3c>
 800c998:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c99c:	f100 0001 	add.w	r0, r0, #1
 800c9a0:	bf08      	it	eq
 800c9a2:	2020      	moveq	r0, #32
 800c9a4:	4770      	bx	lr

0800c9a6 <__lo0bits>:
 800c9a6:	6803      	ldr	r3, [r0, #0]
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	f013 0007 	ands.w	r0, r3, #7
 800c9ae:	d00b      	beq.n	800c9c8 <__lo0bits+0x22>
 800c9b0:	07d9      	lsls	r1, r3, #31
 800c9b2:	d421      	bmi.n	800c9f8 <__lo0bits+0x52>
 800c9b4:	0798      	lsls	r0, r3, #30
 800c9b6:	bf49      	itett	mi
 800c9b8:	085b      	lsrmi	r3, r3, #1
 800c9ba:	089b      	lsrpl	r3, r3, #2
 800c9bc:	2001      	movmi	r0, #1
 800c9be:	6013      	strmi	r3, [r2, #0]
 800c9c0:	bf5c      	itt	pl
 800c9c2:	6013      	strpl	r3, [r2, #0]
 800c9c4:	2002      	movpl	r0, #2
 800c9c6:	4770      	bx	lr
 800c9c8:	b299      	uxth	r1, r3
 800c9ca:	b909      	cbnz	r1, 800c9d0 <__lo0bits+0x2a>
 800c9cc:	0c1b      	lsrs	r3, r3, #16
 800c9ce:	2010      	movs	r0, #16
 800c9d0:	b2d9      	uxtb	r1, r3
 800c9d2:	b909      	cbnz	r1, 800c9d8 <__lo0bits+0x32>
 800c9d4:	3008      	adds	r0, #8
 800c9d6:	0a1b      	lsrs	r3, r3, #8
 800c9d8:	0719      	lsls	r1, r3, #28
 800c9da:	bf04      	itt	eq
 800c9dc:	091b      	lsreq	r3, r3, #4
 800c9de:	3004      	addeq	r0, #4
 800c9e0:	0799      	lsls	r1, r3, #30
 800c9e2:	bf04      	itt	eq
 800c9e4:	089b      	lsreq	r3, r3, #2
 800c9e6:	3002      	addeq	r0, #2
 800c9e8:	07d9      	lsls	r1, r3, #31
 800c9ea:	d403      	bmi.n	800c9f4 <__lo0bits+0x4e>
 800c9ec:	085b      	lsrs	r3, r3, #1
 800c9ee:	f100 0001 	add.w	r0, r0, #1
 800c9f2:	d003      	beq.n	800c9fc <__lo0bits+0x56>
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	4770      	bx	lr
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	4770      	bx	lr
 800c9fc:	2020      	movs	r0, #32
 800c9fe:	4770      	bx	lr

0800ca00 <__i2b>:
 800ca00:	b510      	push	{r4, lr}
 800ca02:	460c      	mov	r4, r1
 800ca04:	2101      	movs	r1, #1
 800ca06:	f7ff ff07 	bl	800c818 <_Balloc>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	b928      	cbnz	r0, 800ca1a <__i2b+0x1a>
 800ca0e:	4b05      	ldr	r3, [pc, #20]	@ (800ca24 <__i2b+0x24>)
 800ca10:	4805      	ldr	r0, [pc, #20]	@ (800ca28 <__i2b+0x28>)
 800ca12:	f240 1145 	movw	r1, #325	@ 0x145
 800ca16:	f000 fcaf 	bl	800d378 <__assert_func>
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	6144      	str	r4, [r0, #20]
 800ca1e:	6103      	str	r3, [r0, #16]
 800ca20:	bd10      	pop	{r4, pc}
 800ca22:	bf00      	nop
 800ca24:	0800f1c0 	.word	0x0800f1c0
 800ca28:	0800f1d1 	.word	0x0800f1d1

0800ca2c <__multiply>:
 800ca2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca30:	4614      	mov	r4, r2
 800ca32:	690a      	ldr	r2, [r1, #16]
 800ca34:	6923      	ldr	r3, [r4, #16]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	bfa8      	it	ge
 800ca3a:	4623      	movge	r3, r4
 800ca3c:	460f      	mov	r7, r1
 800ca3e:	bfa4      	itt	ge
 800ca40:	460c      	movge	r4, r1
 800ca42:	461f      	movge	r7, r3
 800ca44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ca48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ca4c:	68a3      	ldr	r3, [r4, #8]
 800ca4e:	6861      	ldr	r1, [r4, #4]
 800ca50:	eb0a 0609 	add.w	r6, sl, r9
 800ca54:	42b3      	cmp	r3, r6
 800ca56:	b085      	sub	sp, #20
 800ca58:	bfb8      	it	lt
 800ca5a:	3101      	addlt	r1, #1
 800ca5c:	f7ff fedc 	bl	800c818 <_Balloc>
 800ca60:	b930      	cbnz	r0, 800ca70 <__multiply+0x44>
 800ca62:	4602      	mov	r2, r0
 800ca64:	4b44      	ldr	r3, [pc, #272]	@ (800cb78 <__multiply+0x14c>)
 800ca66:	4845      	ldr	r0, [pc, #276]	@ (800cb7c <__multiply+0x150>)
 800ca68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ca6c:	f000 fc84 	bl	800d378 <__assert_func>
 800ca70:	f100 0514 	add.w	r5, r0, #20
 800ca74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca78:	462b      	mov	r3, r5
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	4543      	cmp	r3, r8
 800ca7e:	d321      	bcc.n	800cac4 <__multiply+0x98>
 800ca80:	f107 0114 	add.w	r1, r7, #20
 800ca84:	f104 0214 	add.w	r2, r4, #20
 800ca88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ca8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ca90:	9302      	str	r3, [sp, #8]
 800ca92:	1b13      	subs	r3, r2, r4
 800ca94:	3b15      	subs	r3, #21
 800ca96:	f023 0303 	bic.w	r3, r3, #3
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	f104 0715 	add.w	r7, r4, #21
 800caa0:	42ba      	cmp	r2, r7
 800caa2:	bf38      	it	cc
 800caa4:	2304      	movcc	r3, #4
 800caa6:	9301      	str	r3, [sp, #4]
 800caa8:	9b02      	ldr	r3, [sp, #8]
 800caaa:	9103      	str	r1, [sp, #12]
 800caac:	428b      	cmp	r3, r1
 800caae:	d80c      	bhi.n	800caca <__multiply+0x9e>
 800cab0:	2e00      	cmp	r6, #0
 800cab2:	dd03      	ble.n	800cabc <__multiply+0x90>
 800cab4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d05b      	beq.n	800cb74 <__multiply+0x148>
 800cabc:	6106      	str	r6, [r0, #16]
 800cabe:	b005      	add	sp, #20
 800cac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac4:	f843 2b04 	str.w	r2, [r3], #4
 800cac8:	e7d8      	b.n	800ca7c <__multiply+0x50>
 800caca:	f8b1 a000 	ldrh.w	sl, [r1]
 800cace:	f1ba 0f00 	cmp.w	sl, #0
 800cad2:	d024      	beq.n	800cb1e <__multiply+0xf2>
 800cad4:	f104 0e14 	add.w	lr, r4, #20
 800cad8:	46a9      	mov	r9, r5
 800cada:	f04f 0c00 	mov.w	ip, #0
 800cade:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cae2:	f8d9 3000 	ldr.w	r3, [r9]
 800cae6:	fa1f fb87 	uxth.w	fp, r7
 800caea:	b29b      	uxth	r3, r3
 800caec:	fb0a 330b 	mla	r3, sl, fp, r3
 800caf0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800caf4:	f8d9 7000 	ldr.w	r7, [r9]
 800caf8:	4463      	add	r3, ip
 800cafa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cafe:	fb0a c70b 	mla	r7, sl, fp, ip
 800cb02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb0c:	4572      	cmp	r2, lr
 800cb0e:	f849 3b04 	str.w	r3, [r9], #4
 800cb12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cb16:	d8e2      	bhi.n	800cade <__multiply+0xb2>
 800cb18:	9b01      	ldr	r3, [sp, #4]
 800cb1a:	f845 c003 	str.w	ip, [r5, r3]
 800cb1e:	9b03      	ldr	r3, [sp, #12]
 800cb20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb24:	3104      	adds	r1, #4
 800cb26:	f1b9 0f00 	cmp.w	r9, #0
 800cb2a:	d021      	beq.n	800cb70 <__multiply+0x144>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	f104 0c14 	add.w	ip, r4, #20
 800cb32:	46ae      	mov	lr, r5
 800cb34:	f04f 0a00 	mov.w	sl, #0
 800cb38:	f8bc b000 	ldrh.w	fp, [ip]
 800cb3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cb40:	fb09 770b 	mla	r7, r9, fp, r7
 800cb44:	4457      	add	r7, sl
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb4c:	f84e 3b04 	str.w	r3, [lr], #4
 800cb50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb58:	f8be 3000 	ldrh.w	r3, [lr]
 800cb5c:	fb09 330a 	mla	r3, r9, sl, r3
 800cb60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cb64:	4562      	cmp	r2, ip
 800cb66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb6a:	d8e5      	bhi.n	800cb38 <__multiply+0x10c>
 800cb6c:	9f01      	ldr	r7, [sp, #4]
 800cb6e:	51eb      	str	r3, [r5, r7]
 800cb70:	3504      	adds	r5, #4
 800cb72:	e799      	b.n	800caa8 <__multiply+0x7c>
 800cb74:	3e01      	subs	r6, #1
 800cb76:	e79b      	b.n	800cab0 <__multiply+0x84>
 800cb78:	0800f1c0 	.word	0x0800f1c0
 800cb7c:	0800f1d1 	.word	0x0800f1d1

0800cb80 <__pow5mult>:
 800cb80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb84:	4615      	mov	r5, r2
 800cb86:	f012 0203 	ands.w	r2, r2, #3
 800cb8a:	4607      	mov	r7, r0
 800cb8c:	460e      	mov	r6, r1
 800cb8e:	d007      	beq.n	800cba0 <__pow5mult+0x20>
 800cb90:	4c25      	ldr	r4, [pc, #148]	@ (800cc28 <__pow5mult+0xa8>)
 800cb92:	3a01      	subs	r2, #1
 800cb94:	2300      	movs	r3, #0
 800cb96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb9a:	f7ff fe9f 	bl	800c8dc <__multadd>
 800cb9e:	4606      	mov	r6, r0
 800cba0:	10ad      	asrs	r5, r5, #2
 800cba2:	d03d      	beq.n	800cc20 <__pow5mult+0xa0>
 800cba4:	69fc      	ldr	r4, [r7, #28]
 800cba6:	b97c      	cbnz	r4, 800cbc8 <__pow5mult+0x48>
 800cba8:	2010      	movs	r0, #16
 800cbaa:	f7ff fd7f 	bl	800c6ac <malloc>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	61f8      	str	r0, [r7, #28]
 800cbb2:	b928      	cbnz	r0, 800cbc0 <__pow5mult+0x40>
 800cbb4:	4b1d      	ldr	r3, [pc, #116]	@ (800cc2c <__pow5mult+0xac>)
 800cbb6:	481e      	ldr	r0, [pc, #120]	@ (800cc30 <__pow5mult+0xb0>)
 800cbb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cbbc:	f000 fbdc 	bl	800d378 <__assert_func>
 800cbc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbc4:	6004      	str	r4, [r0, #0]
 800cbc6:	60c4      	str	r4, [r0, #12]
 800cbc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cbcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbd0:	b94c      	cbnz	r4, 800cbe6 <__pow5mult+0x66>
 800cbd2:	f240 2171 	movw	r1, #625	@ 0x271
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	f7ff ff12 	bl	800ca00 <__i2b>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	6003      	str	r3, [r0, #0]
 800cbe6:	f04f 0900 	mov.w	r9, #0
 800cbea:	07eb      	lsls	r3, r5, #31
 800cbec:	d50a      	bpl.n	800cc04 <__pow5mult+0x84>
 800cbee:	4631      	mov	r1, r6
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	f7ff ff1a 	bl	800ca2c <__multiply>
 800cbf8:	4631      	mov	r1, r6
 800cbfa:	4680      	mov	r8, r0
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	f7ff fe4b 	bl	800c898 <_Bfree>
 800cc02:	4646      	mov	r6, r8
 800cc04:	106d      	asrs	r5, r5, #1
 800cc06:	d00b      	beq.n	800cc20 <__pow5mult+0xa0>
 800cc08:	6820      	ldr	r0, [r4, #0]
 800cc0a:	b938      	cbnz	r0, 800cc1c <__pow5mult+0x9c>
 800cc0c:	4622      	mov	r2, r4
 800cc0e:	4621      	mov	r1, r4
 800cc10:	4638      	mov	r0, r7
 800cc12:	f7ff ff0b 	bl	800ca2c <__multiply>
 800cc16:	6020      	str	r0, [r4, #0]
 800cc18:	f8c0 9000 	str.w	r9, [r0]
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	e7e4      	b.n	800cbea <__pow5mult+0x6a>
 800cc20:	4630      	mov	r0, r6
 800cc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc26:	bf00      	nop
 800cc28:	0800f22c 	.word	0x0800f22c
 800cc2c:	0800f151 	.word	0x0800f151
 800cc30:	0800f1d1 	.word	0x0800f1d1

0800cc34 <__lshift>:
 800cc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc38:	460c      	mov	r4, r1
 800cc3a:	6849      	ldr	r1, [r1, #4]
 800cc3c:	6923      	ldr	r3, [r4, #16]
 800cc3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc42:	68a3      	ldr	r3, [r4, #8]
 800cc44:	4607      	mov	r7, r0
 800cc46:	4691      	mov	r9, r2
 800cc48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc4c:	f108 0601 	add.w	r6, r8, #1
 800cc50:	42b3      	cmp	r3, r6
 800cc52:	db0b      	blt.n	800cc6c <__lshift+0x38>
 800cc54:	4638      	mov	r0, r7
 800cc56:	f7ff fddf 	bl	800c818 <_Balloc>
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	b948      	cbnz	r0, 800cc72 <__lshift+0x3e>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	4b28      	ldr	r3, [pc, #160]	@ (800cd04 <__lshift+0xd0>)
 800cc62:	4829      	ldr	r0, [pc, #164]	@ (800cd08 <__lshift+0xd4>)
 800cc64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cc68:	f000 fb86 	bl	800d378 <__assert_func>
 800cc6c:	3101      	adds	r1, #1
 800cc6e:	005b      	lsls	r3, r3, #1
 800cc70:	e7ee      	b.n	800cc50 <__lshift+0x1c>
 800cc72:	2300      	movs	r3, #0
 800cc74:	f100 0114 	add.w	r1, r0, #20
 800cc78:	f100 0210 	add.w	r2, r0, #16
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	4553      	cmp	r3, sl
 800cc80:	db33      	blt.n	800ccea <__lshift+0xb6>
 800cc82:	6920      	ldr	r0, [r4, #16]
 800cc84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc88:	f104 0314 	add.w	r3, r4, #20
 800cc8c:	f019 091f 	ands.w	r9, r9, #31
 800cc90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc98:	d02b      	beq.n	800ccf2 <__lshift+0xbe>
 800cc9a:	f1c9 0e20 	rsb	lr, r9, #32
 800cc9e:	468a      	mov	sl, r1
 800cca0:	2200      	movs	r2, #0
 800cca2:	6818      	ldr	r0, [r3, #0]
 800cca4:	fa00 f009 	lsl.w	r0, r0, r9
 800cca8:	4310      	orrs	r0, r2
 800ccaa:	f84a 0b04 	str.w	r0, [sl], #4
 800ccae:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccb2:	459c      	cmp	ip, r3
 800ccb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ccb8:	d8f3      	bhi.n	800cca2 <__lshift+0x6e>
 800ccba:	ebac 0304 	sub.w	r3, ip, r4
 800ccbe:	3b15      	subs	r3, #21
 800ccc0:	f023 0303 	bic.w	r3, r3, #3
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	f104 0015 	add.w	r0, r4, #21
 800ccca:	4584      	cmp	ip, r0
 800cccc:	bf38      	it	cc
 800ccce:	2304      	movcc	r3, #4
 800ccd0:	50ca      	str	r2, [r1, r3]
 800ccd2:	b10a      	cbz	r2, 800ccd8 <__lshift+0xa4>
 800ccd4:	f108 0602 	add.w	r6, r8, #2
 800ccd8:	3e01      	subs	r6, #1
 800ccda:	4638      	mov	r0, r7
 800ccdc:	612e      	str	r6, [r5, #16]
 800ccde:	4621      	mov	r1, r4
 800cce0:	f7ff fdda 	bl	800c898 <_Bfree>
 800cce4:	4628      	mov	r0, r5
 800cce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccea:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccee:	3301      	adds	r3, #1
 800ccf0:	e7c5      	b.n	800cc7e <__lshift+0x4a>
 800ccf2:	3904      	subs	r1, #4
 800ccf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ccfc:	459c      	cmp	ip, r3
 800ccfe:	d8f9      	bhi.n	800ccf4 <__lshift+0xc0>
 800cd00:	e7ea      	b.n	800ccd8 <__lshift+0xa4>
 800cd02:	bf00      	nop
 800cd04:	0800f1c0 	.word	0x0800f1c0
 800cd08:	0800f1d1 	.word	0x0800f1d1

0800cd0c <__mcmp>:
 800cd0c:	690a      	ldr	r2, [r1, #16]
 800cd0e:	4603      	mov	r3, r0
 800cd10:	6900      	ldr	r0, [r0, #16]
 800cd12:	1a80      	subs	r0, r0, r2
 800cd14:	b530      	push	{r4, r5, lr}
 800cd16:	d10e      	bne.n	800cd36 <__mcmp+0x2a>
 800cd18:	3314      	adds	r3, #20
 800cd1a:	3114      	adds	r1, #20
 800cd1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd2c:	4295      	cmp	r5, r2
 800cd2e:	d003      	beq.n	800cd38 <__mcmp+0x2c>
 800cd30:	d205      	bcs.n	800cd3e <__mcmp+0x32>
 800cd32:	f04f 30ff 	mov.w	r0, #4294967295
 800cd36:	bd30      	pop	{r4, r5, pc}
 800cd38:	42a3      	cmp	r3, r4
 800cd3a:	d3f3      	bcc.n	800cd24 <__mcmp+0x18>
 800cd3c:	e7fb      	b.n	800cd36 <__mcmp+0x2a>
 800cd3e:	2001      	movs	r0, #1
 800cd40:	e7f9      	b.n	800cd36 <__mcmp+0x2a>
	...

0800cd44 <__mdiff>:
 800cd44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd48:	4689      	mov	r9, r1
 800cd4a:	4606      	mov	r6, r0
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	4648      	mov	r0, r9
 800cd50:	4614      	mov	r4, r2
 800cd52:	f7ff ffdb 	bl	800cd0c <__mcmp>
 800cd56:	1e05      	subs	r5, r0, #0
 800cd58:	d112      	bne.n	800cd80 <__mdiff+0x3c>
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f7ff fd5b 	bl	800c818 <_Balloc>
 800cd62:	4602      	mov	r2, r0
 800cd64:	b928      	cbnz	r0, 800cd72 <__mdiff+0x2e>
 800cd66:	4b3f      	ldr	r3, [pc, #252]	@ (800ce64 <__mdiff+0x120>)
 800cd68:	f240 2137 	movw	r1, #567	@ 0x237
 800cd6c:	483e      	ldr	r0, [pc, #248]	@ (800ce68 <__mdiff+0x124>)
 800cd6e:	f000 fb03 	bl	800d378 <__assert_func>
 800cd72:	2301      	movs	r3, #1
 800cd74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd78:	4610      	mov	r0, r2
 800cd7a:	b003      	add	sp, #12
 800cd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd80:	bfbc      	itt	lt
 800cd82:	464b      	movlt	r3, r9
 800cd84:	46a1      	movlt	r9, r4
 800cd86:	4630      	mov	r0, r6
 800cd88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd8c:	bfba      	itte	lt
 800cd8e:	461c      	movlt	r4, r3
 800cd90:	2501      	movlt	r5, #1
 800cd92:	2500      	movge	r5, #0
 800cd94:	f7ff fd40 	bl	800c818 <_Balloc>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	b918      	cbnz	r0, 800cda4 <__mdiff+0x60>
 800cd9c:	4b31      	ldr	r3, [pc, #196]	@ (800ce64 <__mdiff+0x120>)
 800cd9e:	f240 2145 	movw	r1, #581	@ 0x245
 800cda2:	e7e3      	b.n	800cd6c <__mdiff+0x28>
 800cda4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cda8:	6926      	ldr	r6, [r4, #16]
 800cdaa:	60c5      	str	r5, [r0, #12]
 800cdac:	f109 0310 	add.w	r3, r9, #16
 800cdb0:	f109 0514 	add.w	r5, r9, #20
 800cdb4:	f104 0e14 	add.w	lr, r4, #20
 800cdb8:	f100 0b14 	add.w	fp, r0, #20
 800cdbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cdc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	46d9      	mov	r9, fp
 800cdc8:	f04f 0c00 	mov.w	ip, #0
 800cdcc:	9b01      	ldr	r3, [sp, #4]
 800cdce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cdd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	fa1f f38a 	uxth.w	r3, sl
 800cddc:	4619      	mov	r1, r3
 800cdde:	b283      	uxth	r3, r0
 800cde0:	1acb      	subs	r3, r1, r3
 800cde2:	0c00      	lsrs	r0, r0, #16
 800cde4:	4463      	add	r3, ip
 800cde6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cdea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cdf4:	4576      	cmp	r6, lr
 800cdf6:	f849 3b04 	str.w	r3, [r9], #4
 800cdfa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cdfe:	d8e5      	bhi.n	800cdcc <__mdiff+0x88>
 800ce00:	1b33      	subs	r3, r6, r4
 800ce02:	3b15      	subs	r3, #21
 800ce04:	f023 0303 	bic.w	r3, r3, #3
 800ce08:	3415      	adds	r4, #21
 800ce0a:	3304      	adds	r3, #4
 800ce0c:	42a6      	cmp	r6, r4
 800ce0e:	bf38      	it	cc
 800ce10:	2304      	movcc	r3, #4
 800ce12:	441d      	add	r5, r3
 800ce14:	445b      	add	r3, fp
 800ce16:	461e      	mov	r6, r3
 800ce18:	462c      	mov	r4, r5
 800ce1a:	4544      	cmp	r4, r8
 800ce1c:	d30e      	bcc.n	800ce3c <__mdiff+0xf8>
 800ce1e:	f108 0103 	add.w	r1, r8, #3
 800ce22:	1b49      	subs	r1, r1, r5
 800ce24:	f021 0103 	bic.w	r1, r1, #3
 800ce28:	3d03      	subs	r5, #3
 800ce2a:	45a8      	cmp	r8, r5
 800ce2c:	bf38      	it	cc
 800ce2e:	2100      	movcc	r1, #0
 800ce30:	440b      	add	r3, r1
 800ce32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce36:	b191      	cbz	r1, 800ce5e <__mdiff+0x11a>
 800ce38:	6117      	str	r7, [r2, #16]
 800ce3a:	e79d      	b.n	800cd78 <__mdiff+0x34>
 800ce3c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce40:	46e6      	mov	lr, ip
 800ce42:	0c08      	lsrs	r0, r1, #16
 800ce44:	fa1c fc81 	uxtah	ip, ip, r1
 800ce48:	4471      	add	r1, lr
 800ce4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce4e:	b289      	uxth	r1, r1
 800ce50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce54:	f846 1b04 	str.w	r1, [r6], #4
 800ce58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce5c:	e7dd      	b.n	800ce1a <__mdiff+0xd6>
 800ce5e:	3f01      	subs	r7, #1
 800ce60:	e7e7      	b.n	800ce32 <__mdiff+0xee>
 800ce62:	bf00      	nop
 800ce64:	0800f1c0 	.word	0x0800f1c0
 800ce68:	0800f1d1 	.word	0x0800f1d1

0800ce6c <__d2b>:
 800ce6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce70:	460f      	mov	r7, r1
 800ce72:	2101      	movs	r1, #1
 800ce74:	ec59 8b10 	vmov	r8, r9, d0
 800ce78:	4616      	mov	r6, r2
 800ce7a:	f7ff fccd 	bl	800c818 <_Balloc>
 800ce7e:	4604      	mov	r4, r0
 800ce80:	b930      	cbnz	r0, 800ce90 <__d2b+0x24>
 800ce82:	4602      	mov	r2, r0
 800ce84:	4b23      	ldr	r3, [pc, #140]	@ (800cf14 <__d2b+0xa8>)
 800ce86:	4824      	ldr	r0, [pc, #144]	@ (800cf18 <__d2b+0xac>)
 800ce88:	f240 310f 	movw	r1, #783	@ 0x30f
 800ce8c:	f000 fa74 	bl	800d378 <__assert_func>
 800ce90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce98:	b10d      	cbz	r5, 800ce9e <__d2b+0x32>
 800ce9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce9e:	9301      	str	r3, [sp, #4]
 800cea0:	f1b8 0300 	subs.w	r3, r8, #0
 800cea4:	d023      	beq.n	800ceee <__d2b+0x82>
 800cea6:	4668      	mov	r0, sp
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	f7ff fd7c 	bl	800c9a6 <__lo0bits>
 800ceae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ceb2:	b1d0      	cbz	r0, 800ceea <__d2b+0x7e>
 800ceb4:	f1c0 0320 	rsb	r3, r0, #32
 800ceb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cebc:	430b      	orrs	r3, r1
 800cebe:	40c2      	lsrs	r2, r0
 800cec0:	6163      	str	r3, [r4, #20]
 800cec2:	9201      	str	r2, [sp, #4]
 800cec4:	9b01      	ldr	r3, [sp, #4]
 800cec6:	61a3      	str	r3, [r4, #24]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	bf0c      	ite	eq
 800cecc:	2201      	moveq	r2, #1
 800cece:	2202      	movne	r2, #2
 800ced0:	6122      	str	r2, [r4, #16]
 800ced2:	b1a5      	cbz	r5, 800cefe <__d2b+0x92>
 800ced4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ced8:	4405      	add	r5, r0
 800ceda:	603d      	str	r5, [r7, #0]
 800cedc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cee0:	6030      	str	r0, [r6, #0]
 800cee2:	4620      	mov	r0, r4
 800cee4:	b003      	add	sp, #12
 800cee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceea:	6161      	str	r1, [r4, #20]
 800ceec:	e7ea      	b.n	800cec4 <__d2b+0x58>
 800ceee:	a801      	add	r0, sp, #4
 800cef0:	f7ff fd59 	bl	800c9a6 <__lo0bits>
 800cef4:	9b01      	ldr	r3, [sp, #4]
 800cef6:	6163      	str	r3, [r4, #20]
 800cef8:	3020      	adds	r0, #32
 800cefa:	2201      	movs	r2, #1
 800cefc:	e7e8      	b.n	800ced0 <__d2b+0x64>
 800cefe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cf06:	6038      	str	r0, [r7, #0]
 800cf08:	6918      	ldr	r0, [r3, #16]
 800cf0a:	f7ff fd2d 	bl	800c968 <__hi0bits>
 800cf0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf12:	e7e5      	b.n	800cee0 <__d2b+0x74>
 800cf14:	0800f1c0 	.word	0x0800f1c0
 800cf18:	0800f1d1 	.word	0x0800f1d1

0800cf1c <__ssputs_r>:
 800cf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf20:	688e      	ldr	r6, [r1, #8]
 800cf22:	461f      	mov	r7, r3
 800cf24:	42be      	cmp	r6, r7
 800cf26:	680b      	ldr	r3, [r1, #0]
 800cf28:	4682      	mov	sl, r0
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	4690      	mov	r8, r2
 800cf2e:	d82d      	bhi.n	800cf8c <__ssputs_r+0x70>
 800cf30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf38:	d026      	beq.n	800cf88 <__ssputs_r+0x6c>
 800cf3a:	6965      	ldr	r5, [r4, #20]
 800cf3c:	6909      	ldr	r1, [r1, #16]
 800cf3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf42:	eba3 0901 	sub.w	r9, r3, r1
 800cf46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf4a:	1c7b      	adds	r3, r7, #1
 800cf4c:	444b      	add	r3, r9
 800cf4e:	106d      	asrs	r5, r5, #1
 800cf50:	429d      	cmp	r5, r3
 800cf52:	bf38      	it	cc
 800cf54:	461d      	movcc	r5, r3
 800cf56:	0553      	lsls	r3, r2, #21
 800cf58:	d527      	bpl.n	800cfaa <__ssputs_r+0x8e>
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	f7ff fbd0 	bl	800c700 <_malloc_r>
 800cf60:	4606      	mov	r6, r0
 800cf62:	b360      	cbz	r0, 800cfbe <__ssputs_r+0xa2>
 800cf64:	6921      	ldr	r1, [r4, #16]
 800cf66:	464a      	mov	r2, r9
 800cf68:	f7fe fce9 	bl	800b93e <memcpy>
 800cf6c:	89a3      	ldrh	r3, [r4, #12]
 800cf6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf76:	81a3      	strh	r3, [r4, #12]
 800cf78:	6126      	str	r6, [r4, #16]
 800cf7a:	6165      	str	r5, [r4, #20]
 800cf7c:	444e      	add	r6, r9
 800cf7e:	eba5 0509 	sub.w	r5, r5, r9
 800cf82:	6026      	str	r6, [r4, #0]
 800cf84:	60a5      	str	r5, [r4, #8]
 800cf86:	463e      	mov	r6, r7
 800cf88:	42be      	cmp	r6, r7
 800cf8a:	d900      	bls.n	800cf8e <__ssputs_r+0x72>
 800cf8c:	463e      	mov	r6, r7
 800cf8e:	6820      	ldr	r0, [r4, #0]
 800cf90:	4632      	mov	r2, r6
 800cf92:	4641      	mov	r1, r8
 800cf94:	f000 f9c6 	bl	800d324 <memmove>
 800cf98:	68a3      	ldr	r3, [r4, #8]
 800cf9a:	1b9b      	subs	r3, r3, r6
 800cf9c:	60a3      	str	r3, [r4, #8]
 800cf9e:	6823      	ldr	r3, [r4, #0]
 800cfa0:	4433      	add	r3, r6
 800cfa2:	6023      	str	r3, [r4, #0]
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfaa:	462a      	mov	r2, r5
 800cfac:	f000 fa28 	bl	800d400 <_realloc_r>
 800cfb0:	4606      	mov	r6, r0
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d1e0      	bne.n	800cf78 <__ssputs_r+0x5c>
 800cfb6:	6921      	ldr	r1, [r4, #16]
 800cfb8:	4650      	mov	r0, sl
 800cfba:	f7ff fb2d 	bl	800c618 <_free_r>
 800cfbe:	230c      	movs	r3, #12
 800cfc0:	f8ca 3000 	str.w	r3, [sl]
 800cfc4:	89a3      	ldrh	r3, [r4, #12]
 800cfc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfca:	81a3      	strh	r3, [r4, #12]
 800cfcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd0:	e7e9      	b.n	800cfa6 <__ssputs_r+0x8a>
	...

0800cfd4 <_svfiprintf_r>:
 800cfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd8:	4698      	mov	r8, r3
 800cfda:	898b      	ldrh	r3, [r1, #12]
 800cfdc:	061b      	lsls	r3, r3, #24
 800cfde:	b09d      	sub	sp, #116	@ 0x74
 800cfe0:	4607      	mov	r7, r0
 800cfe2:	460d      	mov	r5, r1
 800cfe4:	4614      	mov	r4, r2
 800cfe6:	d510      	bpl.n	800d00a <_svfiprintf_r+0x36>
 800cfe8:	690b      	ldr	r3, [r1, #16]
 800cfea:	b973      	cbnz	r3, 800d00a <_svfiprintf_r+0x36>
 800cfec:	2140      	movs	r1, #64	@ 0x40
 800cfee:	f7ff fb87 	bl	800c700 <_malloc_r>
 800cff2:	6028      	str	r0, [r5, #0]
 800cff4:	6128      	str	r0, [r5, #16]
 800cff6:	b930      	cbnz	r0, 800d006 <_svfiprintf_r+0x32>
 800cff8:	230c      	movs	r3, #12
 800cffa:	603b      	str	r3, [r7, #0]
 800cffc:	f04f 30ff 	mov.w	r0, #4294967295
 800d000:	b01d      	add	sp, #116	@ 0x74
 800d002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d006:	2340      	movs	r3, #64	@ 0x40
 800d008:	616b      	str	r3, [r5, #20]
 800d00a:	2300      	movs	r3, #0
 800d00c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d00e:	2320      	movs	r3, #32
 800d010:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d014:	f8cd 800c 	str.w	r8, [sp, #12]
 800d018:	2330      	movs	r3, #48	@ 0x30
 800d01a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d1b8 <_svfiprintf_r+0x1e4>
 800d01e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d022:	f04f 0901 	mov.w	r9, #1
 800d026:	4623      	mov	r3, r4
 800d028:	469a      	mov	sl, r3
 800d02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d02e:	b10a      	cbz	r2, 800d034 <_svfiprintf_r+0x60>
 800d030:	2a25      	cmp	r2, #37	@ 0x25
 800d032:	d1f9      	bne.n	800d028 <_svfiprintf_r+0x54>
 800d034:	ebba 0b04 	subs.w	fp, sl, r4
 800d038:	d00b      	beq.n	800d052 <_svfiprintf_r+0x7e>
 800d03a:	465b      	mov	r3, fp
 800d03c:	4622      	mov	r2, r4
 800d03e:	4629      	mov	r1, r5
 800d040:	4638      	mov	r0, r7
 800d042:	f7ff ff6b 	bl	800cf1c <__ssputs_r>
 800d046:	3001      	adds	r0, #1
 800d048:	f000 80a7 	beq.w	800d19a <_svfiprintf_r+0x1c6>
 800d04c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d04e:	445a      	add	r2, fp
 800d050:	9209      	str	r2, [sp, #36]	@ 0x24
 800d052:	f89a 3000 	ldrb.w	r3, [sl]
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 809f 	beq.w	800d19a <_svfiprintf_r+0x1c6>
 800d05c:	2300      	movs	r3, #0
 800d05e:	f04f 32ff 	mov.w	r2, #4294967295
 800d062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d066:	f10a 0a01 	add.w	sl, sl, #1
 800d06a:	9304      	str	r3, [sp, #16]
 800d06c:	9307      	str	r3, [sp, #28]
 800d06e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d072:	931a      	str	r3, [sp, #104]	@ 0x68
 800d074:	4654      	mov	r4, sl
 800d076:	2205      	movs	r2, #5
 800d078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07c:	484e      	ldr	r0, [pc, #312]	@ (800d1b8 <_svfiprintf_r+0x1e4>)
 800d07e:	f7f3 f8a7 	bl	80001d0 <memchr>
 800d082:	9a04      	ldr	r2, [sp, #16]
 800d084:	b9d8      	cbnz	r0, 800d0be <_svfiprintf_r+0xea>
 800d086:	06d0      	lsls	r0, r2, #27
 800d088:	bf44      	itt	mi
 800d08a:	2320      	movmi	r3, #32
 800d08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d090:	0711      	lsls	r1, r2, #28
 800d092:	bf44      	itt	mi
 800d094:	232b      	movmi	r3, #43	@ 0x2b
 800d096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d09a:	f89a 3000 	ldrb.w	r3, [sl]
 800d09e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0a0:	d015      	beq.n	800d0ce <_svfiprintf_r+0xfa>
 800d0a2:	9a07      	ldr	r2, [sp, #28]
 800d0a4:	4654      	mov	r4, sl
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	f04f 0c0a 	mov.w	ip, #10
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0b2:	3b30      	subs	r3, #48	@ 0x30
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	d94b      	bls.n	800d150 <_svfiprintf_r+0x17c>
 800d0b8:	b1b0      	cbz	r0, 800d0e8 <_svfiprintf_r+0x114>
 800d0ba:	9207      	str	r2, [sp, #28]
 800d0bc:	e014      	b.n	800d0e8 <_svfiprintf_r+0x114>
 800d0be:	eba0 0308 	sub.w	r3, r0, r8
 800d0c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	9304      	str	r3, [sp, #16]
 800d0ca:	46a2      	mov	sl, r4
 800d0cc:	e7d2      	b.n	800d074 <_svfiprintf_r+0xa0>
 800d0ce:	9b03      	ldr	r3, [sp, #12]
 800d0d0:	1d19      	adds	r1, r3, #4
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	9103      	str	r1, [sp, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	bfbb      	ittet	lt
 800d0da:	425b      	neglt	r3, r3
 800d0dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d0e0:	9307      	strge	r3, [sp, #28]
 800d0e2:	9307      	strlt	r3, [sp, #28]
 800d0e4:	bfb8      	it	lt
 800d0e6:	9204      	strlt	r2, [sp, #16]
 800d0e8:	7823      	ldrb	r3, [r4, #0]
 800d0ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0ec:	d10a      	bne.n	800d104 <_svfiprintf_r+0x130>
 800d0ee:	7863      	ldrb	r3, [r4, #1]
 800d0f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0f2:	d132      	bne.n	800d15a <_svfiprintf_r+0x186>
 800d0f4:	9b03      	ldr	r3, [sp, #12]
 800d0f6:	1d1a      	adds	r2, r3, #4
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	9203      	str	r2, [sp, #12]
 800d0fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d100:	3402      	adds	r4, #2
 800d102:	9305      	str	r3, [sp, #20]
 800d104:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d1c8 <_svfiprintf_r+0x1f4>
 800d108:	7821      	ldrb	r1, [r4, #0]
 800d10a:	2203      	movs	r2, #3
 800d10c:	4650      	mov	r0, sl
 800d10e:	f7f3 f85f 	bl	80001d0 <memchr>
 800d112:	b138      	cbz	r0, 800d124 <_svfiprintf_r+0x150>
 800d114:	9b04      	ldr	r3, [sp, #16]
 800d116:	eba0 000a 	sub.w	r0, r0, sl
 800d11a:	2240      	movs	r2, #64	@ 0x40
 800d11c:	4082      	lsls	r2, r0
 800d11e:	4313      	orrs	r3, r2
 800d120:	3401      	adds	r4, #1
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d128:	4824      	ldr	r0, [pc, #144]	@ (800d1bc <_svfiprintf_r+0x1e8>)
 800d12a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d12e:	2206      	movs	r2, #6
 800d130:	f7f3 f84e 	bl	80001d0 <memchr>
 800d134:	2800      	cmp	r0, #0
 800d136:	d036      	beq.n	800d1a6 <_svfiprintf_r+0x1d2>
 800d138:	4b21      	ldr	r3, [pc, #132]	@ (800d1c0 <_svfiprintf_r+0x1ec>)
 800d13a:	bb1b      	cbnz	r3, 800d184 <_svfiprintf_r+0x1b0>
 800d13c:	9b03      	ldr	r3, [sp, #12]
 800d13e:	3307      	adds	r3, #7
 800d140:	f023 0307 	bic.w	r3, r3, #7
 800d144:	3308      	adds	r3, #8
 800d146:	9303      	str	r3, [sp, #12]
 800d148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d14a:	4433      	add	r3, r6
 800d14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d14e:	e76a      	b.n	800d026 <_svfiprintf_r+0x52>
 800d150:	fb0c 3202 	mla	r2, ip, r2, r3
 800d154:	460c      	mov	r4, r1
 800d156:	2001      	movs	r0, #1
 800d158:	e7a8      	b.n	800d0ac <_svfiprintf_r+0xd8>
 800d15a:	2300      	movs	r3, #0
 800d15c:	3401      	adds	r4, #1
 800d15e:	9305      	str	r3, [sp, #20]
 800d160:	4619      	mov	r1, r3
 800d162:	f04f 0c0a 	mov.w	ip, #10
 800d166:	4620      	mov	r0, r4
 800d168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d16c:	3a30      	subs	r2, #48	@ 0x30
 800d16e:	2a09      	cmp	r2, #9
 800d170:	d903      	bls.n	800d17a <_svfiprintf_r+0x1a6>
 800d172:	2b00      	cmp	r3, #0
 800d174:	d0c6      	beq.n	800d104 <_svfiprintf_r+0x130>
 800d176:	9105      	str	r1, [sp, #20]
 800d178:	e7c4      	b.n	800d104 <_svfiprintf_r+0x130>
 800d17a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d17e:	4604      	mov	r4, r0
 800d180:	2301      	movs	r3, #1
 800d182:	e7f0      	b.n	800d166 <_svfiprintf_r+0x192>
 800d184:	ab03      	add	r3, sp, #12
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	462a      	mov	r2, r5
 800d18a:	4b0e      	ldr	r3, [pc, #56]	@ (800d1c4 <_svfiprintf_r+0x1f0>)
 800d18c:	a904      	add	r1, sp, #16
 800d18e:	4638      	mov	r0, r7
 800d190:	f7fd fe78 	bl	800ae84 <_printf_float>
 800d194:	1c42      	adds	r2, r0, #1
 800d196:	4606      	mov	r6, r0
 800d198:	d1d6      	bne.n	800d148 <_svfiprintf_r+0x174>
 800d19a:	89ab      	ldrh	r3, [r5, #12]
 800d19c:	065b      	lsls	r3, r3, #25
 800d19e:	f53f af2d 	bmi.w	800cffc <_svfiprintf_r+0x28>
 800d1a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1a4:	e72c      	b.n	800d000 <_svfiprintf_r+0x2c>
 800d1a6:	ab03      	add	r3, sp, #12
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	462a      	mov	r2, r5
 800d1ac:	4b05      	ldr	r3, [pc, #20]	@ (800d1c4 <_svfiprintf_r+0x1f0>)
 800d1ae:	a904      	add	r1, sp, #16
 800d1b0:	4638      	mov	r0, r7
 800d1b2:	f7fe f8ff 	bl	800b3b4 <_printf_i>
 800d1b6:	e7ed      	b.n	800d194 <_svfiprintf_r+0x1c0>
 800d1b8:	0800f328 	.word	0x0800f328
 800d1bc:	0800f332 	.word	0x0800f332
 800d1c0:	0800ae85 	.word	0x0800ae85
 800d1c4:	0800cf1d 	.word	0x0800cf1d
 800d1c8:	0800f32e 	.word	0x0800f32e

0800d1cc <__sflush_r>:
 800d1cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d4:	0716      	lsls	r6, r2, #28
 800d1d6:	4605      	mov	r5, r0
 800d1d8:	460c      	mov	r4, r1
 800d1da:	d454      	bmi.n	800d286 <__sflush_r+0xba>
 800d1dc:	684b      	ldr	r3, [r1, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	dc02      	bgt.n	800d1e8 <__sflush_r+0x1c>
 800d1e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	dd48      	ble.n	800d27a <__sflush_r+0xae>
 800d1e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1ea:	2e00      	cmp	r6, #0
 800d1ec:	d045      	beq.n	800d27a <__sflush_r+0xae>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1f4:	682f      	ldr	r7, [r5, #0]
 800d1f6:	6a21      	ldr	r1, [r4, #32]
 800d1f8:	602b      	str	r3, [r5, #0]
 800d1fa:	d030      	beq.n	800d25e <__sflush_r+0x92>
 800d1fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1fe:	89a3      	ldrh	r3, [r4, #12]
 800d200:	0759      	lsls	r1, r3, #29
 800d202:	d505      	bpl.n	800d210 <__sflush_r+0x44>
 800d204:	6863      	ldr	r3, [r4, #4]
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d20a:	b10b      	cbz	r3, 800d210 <__sflush_r+0x44>
 800d20c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d20e:	1ad2      	subs	r2, r2, r3
 800d210:	2300      	movs	r3, #0
 800d212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d214:	6a21      	ldr	r1, [r4, #32]
 800d216:	4628      	mov	r0, r5
 800d218:	47b0      	blx	r6
 800d21a:	1c43      	adds	r3, r0, #1
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	d106      	bne.n	800d22e <__sflush_r+0x62>
 800d220:	6829      	ldr	r1, [r5, #0]
 800d222:	291d      	cmp	r1, #29
 800d224:	d82b      	bhi.n	800d27e <__sflush_r+0xb2>
 800d226:	4a2a      	ldr	r2, [pc, #168]	@ (800d2d0 <__sflush_r+0x104>)
 800d228:	410a      	asrs	r2, r1
 800d22a:	07d6      	lsls	r6, r2, #31
 800d22c:	d427      	bmi.n	800d27e <__sflush_r+0xb2>
 800d22e:	2200      	movs	r2, #0
 800d230:	6062      	str	r2, [r4, #4]
 800d232:	04d9      	lsls	r1, r3, #19
 800d234:	6922      	ldr	r2, [r4, #16]
 800d236:	6022      	str	r2, [r4, #0]
 800d238:	d504      	bpl.n	800d244 <__sflush_r+0x78>
 800d23a:	1c42      	adds	r2, r0, #1
 800d23c:	d101      	bne.n	800d242 <__sflush_r+0x76>
 800d23e:	682b      	ldr	r3, [r5, #0]
 800d240:	b903      	cbnz	r3, 800d244 <__sflush_r+0x78>
 800d242:	6560      	str	r0, [r4, #84]	@ 0x54
 800d244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d246:	602f      	str	r7, [r5, #0]
 800d248:	b1b9      	cbz	r1, 800d27a <__sflush_r+0xae>
 800d24a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d24e:	4299      	cmp	r1, r3
 800d250:	d002      	beq.n	800d258 <__sflush_r+0x8c>
 800d252:	4628      	mov	r0, r5
 800d254:	f7ff f9e0 	bl	800c618 <_free_r>
 800d258:	2300      	movs	r3, #0
 800d25a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d25c:	e00d      	b.n	800d27a <__sflush_r+0xae>
 800d25e:	2301      	movs	r3, #1
 800d260:	4628      	mov	r0, r5
 800d262:	47b0      	blx	r6
 800d264:	4602      	mov	r2, r0
 800d266:	1c50      	adds	r0, r2, #1
 800d268:	d1c9      	bne.n	800d1fe <__sflush_r+0x32>
 800d26a:	682b      	ldr	r3, [r5, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d0c6      	beq.n	800d1fe <__sflush_r+0x32>
 800d270:	2b1d      	cmp	r3, #29
 800d272:	d001      	beq.n	800d278 <__sflush_r+0xac>
 800d274:	2b16      	cmp	r3, #22
 800d276:	d11e      	bne.n	800d2b6 <__sflush_r+0xea>
 800d278:	602f      	str	r7, [r5, #0]
 800d27a:	2000      	movs	r0, #0
 800d27c:	e022      	b.n	800d2c4 <__sflush_r+0xf8>
 800d27e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d282:	b21b      	sxth	r3, r3
 800d284:	e01b      	b.n	800d2be <__sflush_r+0xf2>
 800d286:	690f      	ldr	r7, [r1, #16]
 800d288:	2f00      	cmp	r7, #0
 800d28a:	d0f6      	beq.n	800d27a <__sflush_r+0xae>
 800d28c:	0793      	lsls	r3, r2, #30
 800d28e:	680e      	ldr	r6, [r1, #0]
 800d290:	bf08      	it	eq
 800d292:	694b      	ldreq	r3, [r1, #20]
 800d294:	600f      	str	r7, [r1, #0]
 800d296:	bf18      	it	ne
 800d298:	2300      	movne	r3, #0
 800d29a:	eba6 0807 	sub.w	r8, r6, r7
 800d29e:	608b      	str	r3, [r1, #8]
 800d2a0:	f1b8 0f00 	cmp.w	r8, #0
 800d2a4:	dde9      	ble.n	800d27a <__sflush_r+0xae>
 800d2a6:	6a21      	ldr	r1, [r4, #32]
 800d2a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d2aa:	4643      	mov	r3, r8
 800d2ac:	463a      	mov	r2, r7
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	47b0      	blx	r6
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	dc08      	bgt.n	800d2c8 <__sflush_r+0xfc>
 800d2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2be:	81a3      	strh	r3, [r4, #12]
 800d2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c8:	4407      	add	r7, r0
 800d2ca:	eba8 0800 	sub.w	r8, r8, r0
 800d2ce:	e7e7      	b.n	800d2a0 <__sflush_r+0xd4>
 800d2d0:	dfbffffe 	.word	0xdfbffffe

0800d2d4 <_fflush_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	690b      	ldr	r3, [r1, #16]
 800d2d8:	4605      	mov	r5, r0
 800d2da:	460c      	mov	r4, r1
 800d2dc:	b913      	cbnz	r3, 800d2e4 <_fflush_r+0x10>
 800d2de:	2500      	movs	r5, #0
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	bd38      	pop	{r3, r4, r5, pc}
 800d2e4:	b118      	cbz	r0, 800d2ee <_fflush_r+0x1a>
 800d2e6:	6a03      	ldr	r3, [r0, #32]
 800d2e8:	b90b      	cbnz	r3, 800d2ee <_fflush_r+0x1a>
 800d2ea:	f7fe fa0f 	bl	800b70c <__sinit>
 800d2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d0f3      	beq.n	800d2de <_fflush_r+0xa>
 800d2f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2f8:	07d0      	lsls	r0, r2, #31
 800d2fa:	d404      	bmi.n	800d306 <_fflush_r+0x32>
 800d2fc:	0599      	lsls	r1, r3, #22
 800d2fe:	d402      	bmi.n	800d306 <_fflush_r+0x32>
 800d300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d302:	f7fe fb1a 	bl	800b93a <__retarget_lock_acquire_recursive>
 800d306:	4628      	mov	r0, r5
 800d308:	4621      	mov	r1, r4
 800d30a:	f7ff ff5f 	bl	800d1cc <__sflush_r>
 800d30e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d310:	07da      	lsls	r2, r3, #31
 800d312:	4605      	mov	r5, r0
 800d314:	d4e4      	bmi.n	800d2e0 <_fflush_r+0xc>
 800d316:	89a3      	ldrh	r3, [r4, #12]
 800d318:	059b      	lsls	r3, r3, #22
 800d31a:	d4e1      	bmi.n	800d2e0 <_fflush_r+0xc>
 800d31c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d31e:	f7fe fb0d 	bl	800b93c <__retarget_lock_release_recursive>
 800d322:	e7dd      	b.n	800d2e0 <_fflush_r+0xc>

0800d324 <memmove>:
 800d324:	4288      	cmp	r0, r1
 800d326:	b510      	push	{r4, lr}
 800d328:	eb01 0402 	add.w	r4, r1, r2
 800d32c:	d902      	bls.n	800d334 <memmove+0x10>
 800d32e:	4284      	cmp	r4, r0
 800d330:	4623      	mov	r3, r4
 800d332:	d807      	bhi.n	800d344 <memmove+0x20>
 800d334:	1e43      	subs	r3, r0, #1
 800d336:	42a1      	cmp	r1, r4
 800d338:	d008      	beq.n	800d34c <memmove+0x28>
 800d33a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d33e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d342:	e7f8      	b.n	800d336 <memmove+0x12>
 800d344:	4402      	add	r2, r0
 800d346:	4601      	mov	r1, r0
 800d348:	428a      	cmp	r2, r1
 800d34a:	d100      	bne.n	800d34e <memmove+0x2a>
 800d34c:	bd10      	pop	{r4, pc}
 800d34e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d356:	e7f7      	b.n	800d348 <memmove+0x24>

0800d358 <_sbrk_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4d06      	ldr	r5, [pc, #24]	@ (800d374 <_sbrk_r+0x1c>)
 800d35c:	2300      	movs	r3, #0
 800d35e:	4604      	mov	r4, r0
 800d360:	4608      	mov	r0, r1
 800d362:	602b      	str	r3, [r5, #0]
 800d364:	f7f5 fa26 	bl	80027b4 <_sbrk>
 800d368:	1c43      	adds	r3, r0, #1
 800d36a:	d102      	bne.n	800d372 <_sbrk_r+0x1a>
 800d36c:	682b      	ldr	r3, [r5, #0]
 800d36e:	b103      	cbz	r3, 800d372 <_sbrk_r+0x1a>
 800d370:	6023      	str	r3, [r4, #0]
 800d372:	bd38      	pop	{r3, r4, r5, pc}
 800d374:	20002210 	.word	0x20002210

0800d378 <__assert_func>:
 800d378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d37a:	4614      	mov	r4, r2
 800d37c:	461a      	mov	r2, r3
 800d37e:	4b09      	ldr	r3, [pc, #36]	@ (800d3a4 <__assert_func+0x2c>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4605      	mov	r5, r0
 800d384:	68d8      	ldr	r0, [r3, #12]
 800d386:	b954      	cbnz	r4, 800d39e <__assert_func+0x26>
 800d388:	4b07      	ldr	r3, [pc, #28]	@ (800d3a8 <__assert_func+0x30>)
 800d38a:	461c      	mov	r4, r3
 800d38c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d390:	9100      	str	r1, [sp, #0]
 800d392:	462b      	mov	r3, r5
 800d394:	4905      	ldr	r1, [pc, #20]	@ (800d3ac <__assert_func+0x34>)
 800d396:	f000 f86f 	bl	800d478 <fiprintf>
 800d39a:	f000 f87f 	bl	800d49c <abort>
 800d39e:	4b04      	ldr	r3, [pc, #16]	@ (800d3b0 <__assert_func+0x38>)
 800d3a0:	e7f4      	b.n	800d38c <__assert_func+0x14>
 800d3a2:	bf00      	nop
 800d3a4:	20000118 	.word	0x20000118
 800d3a8:	0800f37e 	.word	0x0800f37e
 800d3ac:	0800f350 	.word	0x0800f350
 800d3b0:	0800f343 	.word	0x0800f343

0800d3b4 <_calloc_r>:
 800d3b4:	b570      	push	{r4, r5, r6, lr}
 800d3b6:	fba1 5402 	umull	r5, r4, r1, r2
 800d3ba:	b93c      	cbnz	r4, 800d3cc <_calloc_r+0x18>
 800d3bc:	4629      	mov	r1, r5
 800d3be:	f7ff f99f 	bl	800c700 <_malloc_r>
 800d3c2:	4606      	mov	r6, r0
 800d3c4:	b928      	cbnz	r0, 800d3d2 <_calloc_r+0x1e>
 800d3c6:	2600      	movs	r6, #0
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}
 800d3cc:	220c      	movs	r2, #12
 800d3ce:	6002      	str	r2, [r0, #0]
 800d3d0:	e7f9      	b.n	800d3c6 <_calloc_r+0x12>
 800d3d2:	462a      	mov	r2, r5
 800d3d4:	4621      	mov	r1, r4
 800d3d6:	f7fe fa32 	bl	800b83e <memset>
 800d3da:	e7f5      	b.n	800d3c8 <_calloc_r+0x14>

0800d3dc <__ascii_mbtowc>:
 800d3dc:	b082      	sub	sp, #8
 800d3de:	b901      	cbnz	r1, 800d3e2 <__ascii_mbtowc+0x6>
 800d3e0:	a901      	add	r1, sp, #4
 800d3e2:	b142      	cbz	r2, 800d3f6 <__ascii_mbtowc+0x1a>
 800d3e4:	b14b      	cbz	r3, 800d3fa <__ascii_mbtowc+0x1e>
 800d3e6:	7813      	ldrb	r3, [r2, #0]
 800d3e8:	600b      	str	r3, [r1, #0]
 800d3ea:	7812      	ldrb	r2, [r2, #0]
 800d3ec:	1e10      	subs	r0, r2, #0
 800d3ee:	bf18      	it	ne
 800d3f0:	2001      	movne	r0, #1
 800d3f2:	b002      	add	sp, #8
 800d3f4:	4770      	bx	lr
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	e7fb      	b.n	800d3f2 <__ascii_mbtowc+0x16>
 800d3fa:	f06f 0001 	mvn.w	r0, #1
 800d3fe:	e7f8      	b.n	800d3f2 <__ascii_mbtowc+0x16>

0800d400 <_realloc_r>:
 800d400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d404:	4680      	mov	r8, r0
 800d406:	4615      	mov	r5, r2
 800d408:	460c      	mov	r4, r1
 800d40a:	b921      	cbnz	r1, 800d416 <_realloc_r+0x16>
 800d40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d410:	4611      	mov	r1, r2
 800d412:	f7ff b975 	b.w	800c700 <_malloc_r>
 800d416:	b92a      	cbnz	r2, 800d424 <_realloc_r+0x24>
 800d418:	f7ff f8fe 	bl	800c618 <_free_r>
 800d41c:	2400      	movs	r4, #0
 800d41e:	4620      	mov	r0, r4
 800d420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d424:	f000 f841 	bl	800d4aa <_malloc_usable_size_r>
 800d428:	4285      	cmp	r5, r0
 800d42a:	4606      	mov	r6, r0
 800d42c:	d802      	bhi.n	800d434 <_realloc_r+0x34>
 800d42e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d432:	d8f4      	bhi.n	800d41e <_realloc_r+0x1e>
 800d434:	4629      	mov	r1, r5
 800d436:	4640      	mov	r0, r8
 800d438:	f7ff f962 	bl	800c700 <_malloc_r>
 800d43c:	4607      	mov	r7, r0
 800d43e:	2800      	cmp	r0, #0
 800d440:	d0ec      	beq.n	800d41c <_realloc_r+0x1c>
 800d442:	42b5      	cmp	r5, r6
 800d444:	462a      	mov	r2, r5
 800d446:	4621      	mov	r1, r4
 800d448:	bf28      	it	cs
 800d44a:	4632      	movcs	r2, r6
 800d44c:	f7fe fa77 	bl	800b93e <memcpy>
 800d450:	4621      	mov	r1, r4
 800d452:	4640      	mov	r0, r8
 800d454:	f7ff f8e0 	bl	800c618 <_free_r>
 800d458:	463c      	mov	r4, r7
 800d45a:	e7e0      	b.n	800d41e <_realloc_r+0x1e>

0800d45c <__ascii_wctomb>:
 800d45c:	4603      	mov	r3, r0
 800d45e:	4608      	mov	r0, r1
 800d460:	b141      	cbz	r1, 800d474 <__ascii_wctomb+0x18>
 800d462:	2aff      	cmp	r2, #255	@ 0xff
 800d464:	d904      	bls.n	800d470 <__ascii_wctomb+0x14>
 800d466:	228a      	movs	r2, #138	@ 0x8a
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	f04f 30ff 	mov.w	r0, #4294967295
 800d46e:	4770      	bx	lr
 800d470:	700a      	strb	r2, [r1, #0]
 800d472:	2001      	movs	r0, #1
 800d474:	4770      	bx	lr
	...

0800d478 <fiprintf>:
 800d478:	b40e      	push	{r1, r2, r3}
 800d47a:	b503      	push	{r0, r1, lr}
 800d47c:	4601      	mov	r1, r0
 800d47e:	ab03      	add	r3, sp, #12
 800d480:	4805      	ldr	r0, [pc, #20]	@ (800d498 <fiprintf+0x20>)
 800d482:	f853 2b04 	ldr.w	r2, [r3], #4
 800d486:	6800      	ldr	r0, [r0, #0]
 800d488:	9301      	str	r3, [sp, #4]
 800d48a:	f000 f83f 	bl	800d50c <_vfiprintf_r>
 800d48e:	b002      	add	sp, #8
 800d490:	f85d eb04 	ldr.w	lr, [sp], #4
 800d494:	b003      	add	sp, #12
 800d496:	4770      	bx	lr
 800d498:	20000118 	.word	0x20000118

0800d49c <abort>:
 800d49c:	b508      	push	{r3, lr}
 800d49e:	2006      	movs	r0, #6
 800d4a0:	f000 fa08 	bl	800d8b4 <raise>
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	f7f5 f90d 	bl	80026c4 <_exit>

0800d4aa <_malloc_usable_size_r>:
 800d4aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ae:	1f18      	subs	r0, r3, #4
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	bfbc      	itt	lt
 800d4b4:	580b      	ldrlt	r3, [r1, r0]
 800d4b6:	18c0      	addlt	r0, r0, r3
 800d4b8:	4770      	bx	lr

0800d4ba <__sfputc_r>:
 800d4ba:	6893      	ldr	r3, [r2, #8]
 800d4bc:	3b01      	subs	r3, #1
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	b410      	push	{r4}
 800d4c2:	6093      	str	r3, [r2, #8]
 800d4c4:	da08      	bge.n	800d4d8 <__sfputc_r+0x1e>
 800d4c6:	6994      	ldr	r4, [r2, #24]
 800d4c8:	42a3      	cmp	r3, r4
 800d4ca:	db01      	blt.n	800d4d0 <__sfputc_r+0x16>
 800d4cc:	290a      	cmp	r1, #10
 800d4ce:	d103      	bne.n	800d4d8 <__sfputc_r+0x1e>
 800d4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4d4:	f000 b932 	b.w	800d73c <__swbuf_r>
 800d4d8:	6813      	ldr	r3, [r2, #0]
 800d4da:	1c58      	adds	r0, r3, #1
 800d4dc:	6010      	str	r0, [r2, #0]
 800d4de:	7019      	strb	r1, [r3, #0]
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <__sfputs_r>:
 800d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	460f      	mov	r7, r1
 800d4ee:	4614      	mov	r4, r2
 800d4f0:	18d5      	adds	r5, r2, r3
 800d4f2:	42ac      	cmp	r4, r5
 800d4f4:	d101      	bne.n	800d4fa <__sfputs_r+0x12>
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	e007      	b.n	800d50a <__sfputs_r+0x22>
 800d4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4fe:	463a      	mov	r2, r7
 800d500:	4630      	mov	r0, r6
 800d502:	f7ff ffda 	bl	800d4ba <__sfputc_r>
 800d506:	1c43      	adds	r3, r0, #1
 800d508:	d1f3      	bne.n	800d4f2 <__sfputs_r+0xa>
 800d50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d50c <_vfiprintf_r>:
 800d50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d510:	460d      	mov	r5, r1
 800d512:	b09d      	sub	sp, #116	@ 0x74
 800d514:	4614      	mov	r4, r2
 800d516:	4698      	mov	r8, r3
 800d518:	4606      	mov	r6, r0
 800d51a:	b118      	cbz	r0, 800d524 <_vfiprintf_r+0x18>
 800d51c:	6a03      	ldr	r3, [r0, #32]
 800d51e:	b90b      	cbnz	r3, 800d524 <_vfiprintf_r+0x18>
 800d520:	f7fe f8f4 	bl	800b70c <__sinit>
 800d524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d526:	07d9      	lsls	r1, r3, #31
 800d528:	d405      	bmi.n	800d536 <_vfiprintf_r+0x2a>
 800d52a:	89ab      	ldrh	r3, [r5, #12]
 800d52c:	059a      	lsls	r2, r3, #22
 800d52e:	d402      	bmi.n	800d536 <_vfiprintf_r+0x2a>
 800d530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d532:	f7fe fa02 	bl	800b93a <__retarget_lock_acquire_recursive>
 800d536:	89ab      	ldrh	r3, [r5, #12]
 800d538:	071b      	lsls	r3, r3, #28
 800d53a:	d501      	bpl.n	800d540 <_vfiprintf_r+0x34>
 800d53c:	692b      	ldr	r3, [r5, #16]
 800d53e:	b99b      	cbnz	r3, 800d568 <_vfiprintf_r+0x5c>
 800d540:	4629      	mov	r1, r5
 800d542:	4630      	mov	r0, r6
 800d544:	f000 f938 	bl	800d7b8 <__swsetup_r>
 800d548:	b170      	cbz	r0, 800d568 <_vfiprintf_r+0x5c>
 800d54a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d54c:	07dc      	lsls	r4, r3, #31
 800d54e:	d504      	bpl.n	800d55a <_vfiprintf_r+0x4e>
 800d550:	f04f 30ff 	mov.w	r0, #4294967295
 800d554:	b01d      	add	sp, #116	@ 0x74
 800d556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55a:	89ab      	ldrh	r3, [r5, #12]
 800d55c:	0598      	lsls	r0, r3, #22
 800d55e:	d4f7      	bmi.n	800d550 <_vfiprintf_r+0x44>
 800d560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d562:	f7fe f9eb 	bl	800b93c <__retarget_lock_release_recursive>
 800d566:	e7f3      	b.n	800d550 <_vfiprintf_r+0x44>
 800d568:	2300      	movs	r3, #0
 800d56a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d56c:	2320      	movs	r3, #32
 800d56e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d572:	f8cd 800c 	str.w	r8, [sp, #12]
 800d576:	2330      	movs	r3, #48	@ 0x30
 800d578:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d728 <_vfiprintf_r+0x21c>
 800d57c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d580:	f04f 0901 	mov.w	r9, #1
 800d584:	4623      	mov	r3, r4
 800d586:	469a      	mov	sl, r3
 800d588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d58c:	b10a      	cbz	r2, 800d592 <_vfiprintf_r+0x86>
 800d58e:	2a25      	cmp	r2, #37	@ 0x25
 800d590:	d1f9      	bne.n	800d586 <_vfiprintf_r+0x7a>
 800d592:	ebba 0b04 	subs.w	fp, sl, r4
 800d596:	d00b      	beq.n	800d5b0 <_vfiprintf_r+0xa4>
 800d598:	465b      	mov	r3, fp
 800d59a:	4622      	mov	r2, r4
 800d59c:	4629      	mov	r1, r5
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f7ff ffa2 	bl	800d4e8 <__sfputs_r>
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	f000 80a7 	beq.w	800d6f8 <_vfiprintf_r+0x1ec>
 800d5aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5ac:	445a      	add	r2, fp
 800d5ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 809f 	beq.w	800d6f8 <_vfiprintf_r+0x1ec>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5c4:	f10a 0a01 	add.w	sl, sl, #1
 800d5c8:	9304      	str	r3, [sp, #16]
 800d5ca:	9307      	str	r3, [sp, #28]
 800d5cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5d2:	4654      	mov	r4, sl
 800d5d4:	2205      	movs	r2, #5
 800d5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5da:	4853      	ldr	r0, [pc, #332]	@ (800d728 <_vfiprintf_r+0x21c>)
 800d5dc:	f7f2 fdf8 	bl	80001d0 <memchr>
 800d5e0:	9a04      	ldr	r2, [sp, #16]
 800d5e2:	b9d8      	cbnz	r0, 800d61c <_vfiprintf_r+0x110>
 800d5e4:	06d1      	lsls	r1, r2, #27
 800d5e6:	bf44      	itt	mi
 800d5e8:	2320      	movmi	r3, #32
 800d5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5ee:	0713      	lsls	r3, r2, #28
 800d5f0:	bf44      	itt	mi
 800d5f2:	232b      	movmi	r3, #43	@ 0x2b
 800d5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5fe:	d015      	beq.n	800d62c <_vfiprintf_r+0x120>
 800d600:	9a07      	ldr	r2, [sp, #28]
 800d602:	4654      	mov	r4, sl
 800d604:	2000      	movs	r0, #0
 800d606:	f04f 0c0a 	mov.w	ip, #10
 800d60a:	4621      	mov	r1, r4
 800d60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d610:	3b30      	subs	r3, #48	@ 0x30
 800d612:	2b09      	cmp	r3, #9
 800d614:	d94b      	bls.n	800d6ae <_vfiprintf_r+0x1a2>
 800d616:	b1b0      	cbz	r0, 800d646 <_vfiprintf_r+0x13a>
 800d618:	9207      	str	r2, [sp, #28]
 800d61a:	e014      	b.n	800d646 <_vfiprintf_r+0x13a>
 800d61c:	eba0 0308 	sub.w	r3, r0, r8
 800d620:	fa09 f303 	lsl.w	r3, r9, r3
 800d624:	4313      	orrs	r3, r2
 800d626:	9304      	str	r3, [sp, #16]
 800d628:	46a2      	mov	sl, r4
 800d62a:	e7d2      	b.n	800d5d2 <_vfiprintf_r+0xc6>
 800d62c:	9b03      	ldr	r3, [sp, #12]
 800d62e:	1d19      	adds	r1, r3, #4
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	9103      	str	r1, [sp, #12]
 800d634:	2b00      	cmp	r3, #0
 800d636:	bfbb      	ittet	lt
 800d638:	425b      	neglt	r3, r3
 800d63a:	f042 0202 	orrlt.w	r2, r2, #2
 800d63e:	9307      	strge	r3, [sp, #28]
 800d640:	9307      	strlt	r3, [sp, #28]
 800d642:	bfb8      	it	lt
 800d644:	9204      	strlt	r2, [sp, #16]
 800d646:	7823      	ldrb	r3, [r4, #0]
 800d648:	2b2e      	cmp	r3, #46	@ 0x2e
 800d64a:	d10a      	bne.n	800d662 <_vfiprintf_r+0x156>
 800d64c:	7863      	ldrb	r3, [r4, #1]
 800d64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d650:	d132      	bne.n	800d6b8 <_vfiprintf_r+0x1ac>
 800d652:	9b03      	ldr	r3, [sp, #12]
 800d654:	1d1a      	adds	r2, r3, #4
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	9203      	str	r2, [sp, #12]
 800d65a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d65e:	3402      	adds	r4, #2
 800d660:	9305      	str	r3, [sp, #20]
 800d662:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d738 <_vfiprintf_r+0x22c>
 800d666:	7821      	ldrb	r1, [r4, #0]
 800d668:	2203      	movs	r2, #3
 800d66a:	4650      	mov	r0, sl
 800d66c:	f7f2 fdb0 	bl	80001d0 <memchr>
 800d670:	b138      	cbz	r0, 800d682 <_vfiprintf_r+0x176>
 800d672:	9b04      	ldr	r3, [sp, #16]
 800d674:	eba0 000a 	sub.w	r0, r0, sl
 800d678:	2240      	movs	r2, #64	@ 0x40
 800d67a:	4082      	lsls	r2, r0
 800d67c:	4313      	orrs	r3, r2
 800d67e:	3401      	adds	r4, #1
 800d680:	9304      	str	r3, [sp, #16]
 800d682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d686:	4829      	ldr	r0, [pc, #164]	@ (800d72c <_vfiprintf_r+0x220>)
 800d688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d68c:	2206      	movs	r2, #6
 800d68e:	f7f2 fd9f 	bl	80001d0 <memchr>
 800d692:	2800      	cmp	r0, #0
 800d694:	d03f      	beq.n	800d716 <_vfiprintf_r+0x20a>
 800d696:	4b26      	ldr	r3, [pc, #152]	@ (800d730 <_vfiprintf_r+0x224>)
 800d698:	bb1b      	cbnz	r3, 800d6e2 <_vfiprintf_r+0x1d6>
 800d69a:	9b03      	ldr	r3, [sp, #12]
 800d69c:	3307      	adds	r3, #7
 800d69e:	f023 0307 	bic.w	r3, r3, #7
 800d6a2:	3308      	adds	r3, #8
 800d6a4:	9303      	str	r3, [sp, #12]
 800d6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6a8:	443b      	add	r3, r7
 800d6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ac:	e76a      	b.n	800d584 <_vfiprintf_r+0x78>
 800d6ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	2001      	movs	r0, #1
 800d6b6:	e7a8      	b.n	800d60a <_vfiprintf_r+0xfe>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	3401      	adds	r4, #1
 800d6bc:	9305      	str	r3, [sp, #20]
 800d6be:	4619      	mov	r1, r3
 800d6c0:	f04f 0c0a 	mov.w	ip, #10
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6ca:	3a30      	subs	r2, #48	@ 0x30
 800d6cc:	2a09      	cmp	r2, #9
 800d6ce:	d903      	bls.n	800d6d8 <_vfiprintf_r+0x1cc>
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d0c6      	beq.n	800d662 <_vfiprintf_r+0x156>
 800d6d4:	9105      	str	r1, [sp, #20]
 800d6d6:	e7c4      	b.n	800d662 <_vfiprintf_r+0x156>
 800d6d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6dc:	4604      	mov	r4, r0
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e7f0      	b.n	800d6c4 <_vfiprintf_r+0x1b8>
 800d6e2:	ab03      	add	r3, sp, #12
 800d6e4:	9300      	str	r3, [sp, #0]
 800d6e6:	462a      	mov	r2, r5
 800d6e8:	4b12      	ldr	r3, [pc, #72]	@ (800d734 <_vfiprintf_r+0x228>)
 800d6ea:	a904      	add	r1, sp, #16
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7fd fbc9 	bl	800ae84 <_printf_float>
 800d6f2:	4607      	mov	r7, r0
 800d6f4:	1c78      	adds	r0, r7, #1
 800d6f6:	d1d6      	bne.n	800d6a6 <_vfiprintf_r+0x19a>
 800d6f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6fa:	07d9      	lsls	r1, r3, #31
 800d6fc:	d405      	bmi.n	800d70a <_vfiprintf_r+0x1fe>
 800d6fe:	89ab      	ldrh	r3, [r5, #12]
 800d700:	059a      	lsls	r2, r3, #22
 800d702:	d402      	bmi.n	800d70a <_vfiprintf_r+0x1fe>
 800d704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d706:	f7fe f919 	bl	800b93c <__retarget_lock_release_recursive>
 800d70a:	89ab      	ldrh	r3, [r5, #12]
 800d70c:	065b      	lsls	r3, r3, #25
 800d70e:	f53f af1f 	bmi.w	800d550 <_vfiprintf_r+0x44>
 800d712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d714:	e71e      	b.n	800d554 <_vfiprintf_r+0x48>
 800d716:	ab03      	add	r3, sp, #12
 800d718:	9300      	str	r3, [sp, #0]
 800d71a:	462a      	mov	r2, r5
 800d71c:	4b05      	ldr	r3, [pc, #20]	@ (800d734 <_vfiprintf_r+0x228>)
 800d71e:	a904      	add	r1, sp, #16
 800d720:	4630      	mov	r0, r6
 800d722:	f7fd fe47 	bl	800b3b4 <_printf_i>
 800d726:	e7e4      	b.n	800d6f2 <_vfiprintf_r+0x1e6>
 800d728:	0800f328 	.word	0x0800f328
 800d72c:	0800f332 	.word	0x0800f332
 800d730:	0800ae85 	.word	0x0800ae85
 800d734:	0800d4e9 	.word	0x0800d4e9
 800d738:	0800f32e 	.word	0x0800f32e

0800d73c <__swbuf_r>:
 800d73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73e:	460e      	mov	r6, r1
 800d740:	4614      	mov	r4, r2
 800d742:	4605      	mov	r5, r0
 800d744:	b118      	cbz	r0, 800d74e <__swbuf_r+0x12>
 800d746:	6a03      	ldr	r3, [r0, #32]
 800d748:	b90b      	cbnz	r3, 800d74e <__swbuf_r+0x12>
 800d74a:	f7fd ffdf 	bl	800b70c <__sinit>
 800d74e:	69a3      	ldr	r3, [r4, #24]
 800d750:	60a3      	str	r3, [r4, #8]
 800d752:	89a3      	ldrh	r3, [r4, #12]
 800d754:	071a      	lsls	r2, r3, #28
 800d756:	d501      	bpl.n	800d75c <__swbuf_r+0x20>
 800d758:	6923      	ldr	r3, [r4, #16]
 800d75a:	b943      	cbnz	r3, 800d76e <__swbuf_r+0x32>
 800d75c:	4621      	mov	r1, r4
 800d75e:	4628      	mov	r0, r5
 800d760:	f000 f82a 	bl	800d7b8 <__swsetup_r>
 800d764:	b118      	cbz	r0, 800d76e <__swbuf_r+0x32>
 800d766:	f04f 37ff 	mov.w	r7, #4294967295
 800d76a:	4638      	mov	r0, r7
 800d76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d76e:	6823      	ldr	r3, [r4, #0]
 800d770:	6922      	ldr	r2, [r4, #16]
 800d772:	1a98      	subs	r0, r3, r2
 800d774:	6963      	ldr	r3, [r4, #20]
 800d776:	b2f6      	uxtb	r6, r6
 800d778:	4283      	cmp	r3, r0
 800d77a:	4637      	mov	r7, r6
 800d77c:	dc05      	bgt.n	800d78a <__swbuf_r+0x4e>
 800d77e:	4621      	mov	r1, r4
 800d780:	4628      	mov	r0, r5
 800d782:	f7ff fda7 	bl	800d2d4 <_fflush_r>
 800d786:	2800      	cmp	r0, #0
 800d788:	d1ed      	bne.n	800d766 <__swbuf_r+0x2a>
 800d78a:	68a3      	ldr	r3, [r4, #8]
 800d78c:	3b01      	subs	r3, #1
 800d78e:	60a3      	str	r3, [r4, #8]
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	1c5a      	adds	r2, r3, #1
 800d794:	6022      	str	r2, [r4, #0]
 800d796:	701e      	strb	r6, [r3, #0]
 800d798:	6962      	ldr	r2, [r4, #20]
 800d79a:	1c43      	adds	r3, r0, #1
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d004      	beq.n	800d7aa <__swbuf_r+0x6e>
 800d7a0:	89a3      	ldrh	r3, [r4, #12]
 800d7a2:	07db      	lsls	r3, r3, #31
 800d7a4:	d5e1      	bpl.n	800d76a <__swbuf_r+0x2e>
 800d7a6:	2e0a      	cmp	r6, #10
 800d7a8:	d1df      	bne.n	800d76a <__swbuf_r+0x2e>
 800d7aa:	4621      	mov	r1, r4
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	f7ff fd91 	bl	800d2d4 <_fflush_r>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d0d9      	beq.n	800d76a <__swbuf_r+0x2e>
 800d7b6:	e7d6      	b.n	800d766 <__swbuf_r+0x2a>

0800d7b8 <__swsetup_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	4b29      	ldr	r3, [pc, #164]	@ (800d860 <__swsetup_r+0xa8>)
 800d7bc:	4605      	mov	r5, r0
 800d7be:	6818      	ldr	r0, [r3, #0]
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	b118      	cbz	r0, 800d7cc <__swsetup_r+0x14>
 800d7c4:	6a03      	ldr	r3, [r0, #32]
 800d7c6:	b90b      	cbnz	r3, 800d7cc <__swsetup_r+0x14>
 800d7c8:	f7fd ffa0 	bl	800b70c <__sinit>
 800d7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7d0:	0719      	lsls	r1, r3, #28
 800d7d2:	d422      	bmi.n	800d81a <__swsetup_r+0x62>
 800d7d4:	06da      	lsls	r2, r3, #27
 800d7d6:	d407      	bmi.n	800d7e8 <__swsetup_r+0x30>
 800d7d8:	2209      	movs	r2, #9
 800d7da:	602a      	str	r2, [r5, #0]
 800d7dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7e0:	81a3      	strh	r3, [r4, #12]
 800d7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e6:	e033      	b.n	800d850 <__swsetup_r+0x98>
 800d7e8:	0758      	lsls	r0, r3, #29
 800d7ea:	d512      	bpl.n	800d812 <__swsetup_r+0x5a>
 800d7ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7ee:	b141      	cbz	r1, 800d802 <__swsetup_r+0x4a>
 800d7f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7f4:	4299      	cmp	r1, r3
 800d7f6:	d002      	beq.n	800d7fe <__swsetup_r+0x46>
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	f7fe ff0d 	bl	800c618 <_free_r>
 800d7fe:	2300      	movs	r3, #0
 800d800:	6363      	str	r3, [r4, #52]	@ 0x34
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d808:	81a3      	strh	r3, [r4, #12]
 800d80a:	2300      	movs	r3, #0
 800d80c:	6063      	str	r3, [r4, #4]
 800d80e:	6923      	ldr	r3, [r4, #16]
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	89a3      	ldrh	r3, [r4, #12]
 800d814:	f043 0308 	orr.w	r3, r3, #8
 800d818:	81a3      	strh	r3, [r4, #12]
 800d81a:	6923      	ldr	r3, [r4, #16]
 800d81c:	b94b      	cbnz	r3, 800d832 <__swsetup_r+0x7a>
 800d81e:	89a3      	ldrh	r3, [r4, #12]
 800d820:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d828:	d003      	beq.n	800d832 <__swsetup_r+0x7a>
 800d82a:	4621      	mov	r1, r4
 800d82c:	4628      	mov	r0, r5
 800d82e:	f000 f883 	bl	800d938 <__smakebuf_r>
 800d832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d836:	f013 0201 	ands.w	r2, r3, #1
 800d83a:	d00a      	beq.n	800d852 <__swsetup_r+0x9a>
 800d83c:	2200      	movs	r2, #0
 800d83e:	60a2      	str	r2, [r4, #8]
 800d840:	6962      	ldr	r2, [r4, #20]
 800d842:	4252      	negs	r2, r2
 800d844:	61a2      	str	r2, [r4, #24]
 800d846:	6922      	ldr	r2, [r4, #16]
 800d848:	b942      	cbnz	r2, 800d85c <__swsetup_r+0xa4>
 800d84a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d84e:	d1c5      	bne.n	800d7dc <__swsetup_r+0x24>
 800d850:	bd38      	pop	{r3, r4, r5, pc}
 800d852:	0799      	lsls	r1, r3, #30
 800d854:	bf58      	it	pl
 800d856:	6962      	ldrpl	r2, [r4, #20]
 800d858:	60a2      	str	r2, [r4, #8]
 800d85a:	e7f4      	b.n	800d846 <__swsetup_r+0x8e>
 800d85c:	2000      	movs	r0, #0
 800d85e:	e7f7      	b.n	800d850 <__swsetup_r+0x98>
 800d860:	20000118 	.word	0x20000118

0800d864 <_raise_r>:
 800d864:	291f      	cmp	r1, #31
 800d866:	b538      	push	{r3, r4, r5, lr}
 800d868:	4605      	mov	r5, r0
 800d86a:	460c      	mov	r4, r1
 800d86c:	d904      	bls.n	800d878 <_raise_r+0x14>
 800d86e:	2316      	movs	r3, #22
 800d870:	6003      	str	r3, [r0, #0]
 800d872:	f04f 30ff 	mov.w	r0, #4294967295
 800d876:	bd38      	pop	{r3, r4, r5, pc}
 800d878:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d87a:	b112      	cbz	r2, 800d882 <_raise_r+0x1e>
 800d87c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d880:	b94b      	cbnz	r3, 800d896 <_raise_r+0x32>
 800d882:	4628      	mov	r0, r5
 800d884:	f000 f830 	bl	800d8e8 <_getpid_r>
 800d888:	4622      	mov	r2, r4
 800d88a:	4601      	mov	r1, r0
 800d88c:	4628      	mov	r0, r5
 800d88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d892:	f000 b817 	b.w	800d8c4 <_kill_r>
 800d896:	2b01      	cmp	r3, #1
 800d898:	d00a      	beq.n	800d8b0 <_raise_r+0x4c>
 800d89a:	1c59      	adds	r1, r3, #1
 800d89c:	d103      	bne.n	800d8a6 <_raise_r+0x42>
 800d89e:	2316      	movs	r3, #22
 800d8a0:	6003      	str	r3, [r0, #0]
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	e7e7      	b.n	800d876 <_raise_r+0x12>
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	4798      	blx	r3
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	e7e0      	b.n	800d876 <_raise_r+0x12>

0800d8b4 <raise>:
 800d8b4:	4b02      	ldr	r3, [pc, #8]	@ (800d8c0 <raise+0xc>)
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f7ff bfd3 	b.w	800d864 <_raise_r>
 800d8be:	bf00      	nop
 800d8c0:	20000118 	.word	0x20000118

0800d8c4 <_kill_r>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	4d07      	ldr	r5, [pc, #28]	@ (800d8e4 <_kill_r+0x20>)
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	4608      	mov	r0, r1
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	602b      	str	r3, [r5, #0]
 800d8d2:	f7f4 fee7 	bl	80026a4 <_kill>
 800d8d6:	1c43      	adds	r3, r0, #1
 800d8d8:	d102      	bne.n	800d8e0 <_kill_r+0x1c>
 800d8da:	682b      	ldr	r3, [r5, #0]
 800d8dc:	b103      	cbz	r3, 800d8e0 <_kill_r+0x1c>
 800d8de:	6023      	str	r3, [r4, #0]
 800d8e0:	bd38      	pop	{r3, r4, r5, pc}
 800d8e2:	bf00      	nop
 800d8e4:	20002210 	.word	0x20002210

0800d8e8 <_getpid_r>:
 800d8e8:	f7f4 bed4 	b.w	8002694 <_getpid>

0800d8ec <__swhatbuf_r>:
 800d8ec:	b570      	push	{r4, r5, r6, lr}
 800d8ee:	460c      	mov	r4, r1
 800d8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f4:	2900      	cmp	r1, #0
 800d8f6:	b096      	sub	sp, #88	@ 0x58
 800d8f8:	4615      	mov	r5, r2
 800d8fa:	461e      	mov	r6, r3
 800d8fc:	da0d      	bge.n	800d91a <__swhatbuf_r+0x2e>
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d904:	f04f 0100 	mov.w	r1, #0
 800d908:	bf14      	ite	ne
 800d90a:	2340      	movne	r3, #64	@ 0x40
 800d90c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d910:	2000      	movs	r0, #0
 800d912:	6031      	str	r1, [r6, #0]
 800d914:	602b      	str	r3, [r5, #0]
 800d916:	b016      	add	sp, #88	@ 0x58
 800d918:	bd70      	pop	{r4, r5, r6, pc}
 800d91a:	466a      	mov	r2, sp
 800d91c:	f000 f848 	bl	800d9b0 <_fstat_r>
 800d920:	2800      	cmp	r0, #0
 800d922:	dbec      	blt.n	800d8fe <__swhatbuf_r+0x12>
 800d924:	9901      	ldr	r1, [sp, #4]
 800d926:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d92a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d92e:	4259      	negs	r1, r3
 800d930:	4159      	adcs	r1, r3
 800d932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d936:	e7eb      	b.n	800d910 <__swhatbuf_r+0x24>

0800d938 <__smakebuf_r>:
 800d938:	898b      	ldrh	r3, [r1, #12]
 800d93a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d93c:	079d      	lsls	r5, r3, #30
 800d93e:	4606      	mov	r6, r0
 800d940:	460c      	mov	r4, r1
 800d942:	d507      	bpl.n	800d954 <__smakebuf_r+0x1c>
 800d944:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d948:	6023      	str	r3, [r4, #0]
 800d94a:	6123      	str	r3, [r4, #16]
 800d94c:	2301      	movs	r3, #1
 800d94e:	6163      	str	r3, [r4, #20]
 800d950:	b003      	add	sp, #12
 800d952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d954:	ab01      	add	r3, sp, #4
 800d956:	466a      	mov	r2, sp
 800d958:	f7ff ffc8 	bl	800d8ec <__swhatbuf_r>
 800d95c:	9f00      	ldr	r7, [sp, #0]
 800d95e:	4605      	mov	r5, r0
 800d960:	4639      	mov	r1, r7
 800d962:	4630      	mov	r0, r6
 800d964:	f7fe fecc 	bl	800c700 <_malloc_r>
 800d968:	b948      	cbnz	r0, 800d97e <__smakebuf_r+0x46>
 800d96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d96e:	059a      	lsls	r2, r3, #22
 800d970:	d4ee      	bmi.n	800d950 <__smakebuf_r+0x18>
 800d972:	f023 0303 	bic.w	r3, r3, #3
 800d976:	f043 0302 	orr.w	r3, r3, #2
 800d97a:	81a3      	strh	r3, [r4, #12]
 800d97c:	e7e2      	b.n	800d944 <__smakebuf_r+0xc>
 800d97e:	89a3      	ldrh	r3, [r4, #12]
 800d980:	6020      	str	r0, [r4, #0]
 800d982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d986:	81a3      	strh	r3, [r4, #12]
 800d988:	9b01      	ldr	r3, [sp, #4]
 800d98a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d98e:	b15b      	cbz	r3, 800d9a8 <__smakebuf_r+0x70>
 800d990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d994:	4630      	mov	r0, r6
 800d996:	f000 f81d 	bl	800d9d4 <_isatty_r>
 800d99a:	b128      	cbz	r0, 800d9a8 <__smakebuf_r+0x70>
 800d99c:	89a3      	ldrh	r3, [r4, #12]
 800d99e:	f023 0303 	bic.w	r3, r3, #3
 800d9a2:	f043 0301 	orr.w	r3, r3, #1
 800d9a6:	81a3      	strh	r3, [r4, #12]
 800d9a8:	89a3      	ldrh	r3, [r4, #12]
 800d9aa:	431d      	orrs	r5, r3
 800d9ac:	81a5      	strh	r5, [r4, #12]
 800d9ae:	e7cf      	b.n	800d950 <__smakebuf_r+0x18>

0800d9b0 <_fstat_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	4d07      	ldr	r5, [pc, #28]	@ (800d9d0 <_fstat_r+0x20>)
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	4608      	mov	r0, r1
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	602b      	str	r3, [r5, #0]
 800d9be:	f7f4 fed1 	bl	8002764 <_fstat>
 800d9c2:	1c43      	adds	r3, r0, #1
 800d9c4:	d102      	bne.n	800d9cc <_fstat_r+0x1c>
 800d9c6:	682b      	ldr	r3, [r5, #0]
 800d9c8:	b103      	cbz	r3, 800d9cc <_fstat_r+0x1c>
 800d9ca:	6023      	str	r3, [r4, #0]
 800d9cc:	bd38      	pop	{r3, r4, r5, pc}
 800d9ce:	bf00      	nop
 800d9d0:	20002210 	.word	0x20002210

0800d9d4 <_isatty_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4d06      	ldr	r5, [pc, #24]	@ (800d9f0 <_isatty_r+0x1c>)
 800d9d8:	2300      	movs	r3, #0
 800d9da:	4604      	mov	r4, r0
 800d9dc:	4608      	mov	r0, r1
 800d9de:	602b      	str	r3, [r5, #0]
 800d9e0:	f7f4 fed0 	bl	8002784 <_isatty>
 800d9e4:	1c43      	adds	r3, r0, #1
 800d9e6:	d102      	bne.n	800d9ee <_isatty_r+0x1a>
 800d9e8:	682b      	ldr	r3, [r5, #0]
 800d9ea:	b103      	cbz	r3, 800d9ee <_isatty_r+0x1a>
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	bd38      	pop	{r3, r4, r5, pc}
 800d9f0:	20002210 	.word	0x20002210

0800d9f4 <asin>:
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	ed2d 8b02 	vpush	{d8}
 800d9fa:	ec55 4b10 	vmov	r4, r5, d0
 800d9fe:	f000 f9db 	bl	800ddb8 <__ieee754_asin>
 800da02:	4622      	mov	r2, r4
 800da04:	462b      	mov	r3, r5
 800da06:	4620      	mov	r0, r4
 800da08:	4629      	mov	r1, r5
 800da0a:	eeb0 8a40 	vmov.f32	s16, s0
 800da0e:	eef0 8a60 	vmov.f32	s17, s1
 800da12:	f7f3 f88b 	bl	8000b2c <__aeabi_dcmpun>
 800da16:	b9a8      	cbnz	r0, 800da44 <asin+0x50>
 800da18:	ec45 4b10 	vmov	d0, r4, r5
 800da1c:	f000 f84c 	bl	800dab8 <fabs>
 800da20:	4b0c      	ldr	r3, [pc, #48]	@ (800da54 <asin+0x60>)
 800da22:	ec51 0b10 	vmov	r0, r1, d0
 800da26:	2200      	movs	r2, #0
 800da28:	f7f3 f876 	bl	8000b18 <__aeabi_dcmpgt>
 800da2c:	b150      	cbz	r0, 800da44 <asin+0x50>
 800da2e:	f7fd ff59 	bl	800b8e4 <__errno>
 800da32:	ecbd 8b02 	vpop	{d8}
 800da36:	2321      	movs	r3, #33	@ 0x21
 800da38:	6003      	str	r3, [r0, #0]
 800da3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da3e:	4806      	ldr	r0, [pc, #24]	@ (800da58 <asin+0x64>)
 800da40:	f000 b8d6 	b.w	800dbf0 <nan>
 800da44:	eeb0 0a48 	vmov.f32	s0, s16
 800da48:	eef0 0a68 	vmov.f32	s1, s17
 800da4c:	ecbd 8b02 	vpop	{d8}
 800da50:	bd38      	pop	{r3, r4, r5, pc}
 800da52:	bf00      	nop
 800da54:	3ff00000 	.word	0x3ff00000
 800da58:	0800f37e 	.word	0x0800f37e

0800da5c <atan2>:
 800da5c:	f000 bbb0 	b.w	800e1c0 <__ieee754_atan2>

0800da60 <sqrt>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	ed2d 8b02 	vpush	{d8}
 800da66:	ec55 4b10 	vmov	r4, r5, d0
 800da6a:	f000 f8c9 	bl	800dc00 <__ieee754_sqrt>
 800da6e:	4622      	mov	r2, r4
 800da70:	462b      	mov	r3, r5
 800da72:	4620      	mov	r0, r4
 800da74:	4629      	mov	r1, r5
 800da76:	eeb0 8a40 	vmov.f32	s16, s0
 800da7a:	eef0 8a60 	vmov.f32	s17, s1
 800da7e:	f7f3 f855 	bl	8000b2c <__aeabi_dcmpun>
 800da82:	b990      	cbnz	r0, 800daaa <sqrt+0x4a>
 800da84:	2200      	movs	r2, #0
 800da86:	2300      	movs	r3, #0
 800da88:	4620      	mov	r0, r4
 800da8a:	4629      	mov	r1, r5
 800da8c:	f7f3 f826 	bl	8000adc <__aeabi_dcmplt>
 800da90:	b158      	cbz	r0, 800daaa <sqrt+0x4a>
 800da92:	f7fd ff27 	bl	800b8e4 <__errno>
 800da96:	2321      	movs	r3, #33	@ 0x21
 800da98:	6003      	str	r3, [r0, #0]
 800da9a:	2200      	movs	r2, #0
 800da9c:	2300      	movs	r3, #0
 800da9e:	4610      	mov	r0, r2
 800daa0:	4619      	mov	r1, r3
 800daa2:	f7f2 fed3 	bl	800084c <__aeabi_ddiv>
 800daa6:	ec41 0b18 	vmov	d8, r0, r1
 800daaa:	eeb0 0a48 	vmov.f32	s0, s16
 800daae:	eef0 0a68 	vmov.f32	s1, s17
 800dab2:	ecbd 8b02 	vpop	{d8}
 800dab6:	bd38      	pop	{r3, r4, r5, pc}

0800dab8 <fabs>:
 800dab8:	ec51 0b10 	vmov	r0, r1, d0
 800dabc:	4602      	mov	r2, r0
 800dabe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dac2:	ec43 2b10 	vmov	d0, r2, r3
 800dac6:	4770      	bx	lr

0800dac8 <cosf>:
 800dac8:	ee10 3a10 	vmov	r3, s0
 800dacc:	b507      	push	{r0, r1, r2, lr}
 800dace:	4a1e      	ldr	r2, [pc, #120]	@ (800db48 <cosf+0x80>)
 800dad0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d806      	bhi.n	800dae6 <cosf+0x1e>
 800dad8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800db4c <cosf+0x84>
 800dadc:	b003      	add	sp, #12
 800dade:	f85d eb04 	ldr.w	lr, [sp], #4
 800dae2:	f000 bdcd 	b.w	800e680 <__kernel_cosf>
 800dae6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800daea:	d304      	bcc.n	800daf6 <cosf+0x2e>
 800daec:	ee30 0a40 	vsub.f32	s0, s0, s0
 800daf0:	b003      	add	sp, #12
 800daf2:	f85d fb04 	ldr.w	pc, [sp], #4
 800daf6:	4668      	mov	r0, sp
 800daf8:	f000 fe62 	bl	800e7c0 <__ieee754_rem_pio2f>
 800dafc:	f000 0003 	and.w	r0, r0, #3
 800db00:	2801      	cmp	r0, #1
 800db02:	d009      	beq.n	800db18 <cosf+0x50>
 800db04:	2802      	cmp	r0, #2
 800db06:	d010      	beq.n	800db2a <cosf+0x62>
 800db08:	b9b0      	cbnz	r0, 800db38 <cosf+0x70>
 800db0a:	eddd 0a01 	vldr	s1, [sp, #4]
 800db0e:	ed9d 0a00 	vldr	s0, [sp]
 800db12:	f000 fdb5 	bl	800e680 <__kernel_cosf>
 800db16:	e7eb      	b.n	800daf0 <cosf+0x28>
 800db18:	eddd 0a01 	vldr	s1, [sp, #4]
 800db1c:	ed9d 0a00 	vldr	s0, [sp]
 800db20:	f000 fe06 	bl	800e730 <__kernel_sinf>
 800db24:	eeb1 0a40 	vneg.f32	s0, s0
 800db28:	e7e2      	b.n	800daf0 <cosf+0x28>
 800db2a:	eddd 0a01 	vldr	s1, [sp, #4]
 800db2e:	ed9d 0a00 	vldr	s0, [sp]
 800db32:	f000 fda5 	bl	800e680 <__kernel_cosf>
 800db36:	e7f5      	b.n	800db24 <cosf+0x5c>
 800db38:	eddd 0a01 	vldr	s1, [sp, #4]
 800db3c:	ed9d 0a00 	vldr	s0, [sp]
 800db40:	2001      	movs	r0, #1
 800db42:	f000 fdf5 	bl	800e730 <__kernel_sinf>
 800db46:	e7d3      	b.n	800daf0 <cosf+0x28>
 800db48:	3f490fd8 	.word	0x3f490fd8
 800db4c:	00000000 	.word	0x00000000

0800db50 <fabsf>:
 800db50:	ee10 3a10 	vmov	r3, s0
 800db54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db58:	ee00 3a10 	vmov	s0, r3
 800db5c:	4770      	bx	lr
	...

0800db60 <sinf>:
 800db60:	ee10 3a10 	vmov	r3, s0
 800db64:	b507      	push	{r0, r1, r2, lr}
 800db66:	4a1f      	ldr	r2, [pc, #124]	@ (800dbe4 <sinf+0x84>)
 800db68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d807      	bhi.n	800db80 <sinf+0x20>
 800db70:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800dbe8 <sinf+0x88>
 800db74:	2000      	movs	r0, #0
 800db76:	b003      	add	sp, #12
 800db78:	f85d eb04 	ldr.w	lr, [sp], #4
 800db7c:	f000 bdd8 	b.w	800e730 <__kernel_sinf>
 800db80:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800db84:	d304      	bcc.n	800db90 <sinf+0x30>
 800db86:	ee30 0a40 	vsub.f32	s0, s0, s0
 800db8a:	b003      	add	sp, #12
 800db8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800db90:	4668      	mov	r0, sp
 800db92:	f000 fe15 	bl	800e7c0 <__ieee754_rem_pio2f>
 800db96:	f000 0003 	and.w	r0, r0, #3
 800db9a:	2801      	cmp	r0, #1
 800db9c:	d00a      	beq.n	800dbb4 <sinf+0x54>
 800db9e:	2802      	cmp	r0, #2
 800dba0:	d00f      	beq.n	800dbc2 <sinf+0x62>
 800dba2:	b9c0      	cbnz	r0, 800dbd6 <sinf+0x76>
 800dba4:	eddd 0a01 	vldr	s1, [sp, #4]
 800dba8:	ed9d 0a00 	vldr	s0, [sp]
 800dbac:	2001      	movs	r0, #1
 800dbae:	f000 fdbf 	bl	800e730 <__kernel_sinf>
 800dbb2:	e7ea      	b.n	800db8a <sinf+0x2a>
 800dbb4:	eddd 0a01 	vldr	s1, [sp, #4]
 800dbb8:	ed9d 0a00 	vldr	s0, [sp]
 800dbbc:	f000 fd60 	bl	800e680 <__kernel_cosf>
 800dbc0:	e7e3      	b.n	800db8a <sinf+0x2a>
 800dbc2:	eddd 0a01 	vldr	s1, [sp, #4]
 800dbc6:	ed9d 0a00 	vldr	s0, [sp]
 800dbca:	2001      	movs	r0, #1
 800dbcc:	f000 fdb0 	bl	800e730 <__kernel_sinf>
 800dbd0:	eeb1 0a40 	vneg.f32	s0, s0
 800dbd4:	e7d9      	b.n	800db8a <sinf+0x2a>
 800dbd6:	eddd 0a01 	vldr	s1, [sp, #4]
 800dbda:	ed9d 0a00 	vldr	s0, [sp]
 800dbde:	f000 fd4f 	bl	800e680 <__kernel_cosf>
 800dbe2:	e7f5      	b.n	800dbd0 <sinf+0x70>
 800dbe4:	3f490fd8 	.word	0x3f490fd8
	...

0800dbf0 <nan>:
 800dbf0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dbf8 <nan+0x8>
 800dbf4:	4770      	bx	lr
 800dbf6:	bf00      	nop
 800dbf8:	00000000 	.word	0x00000000
 800dbfc:	7ff80000 	.word	0x7ff80000

0800dc00 <__ieee754_sqrt>:
 800dc00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	4a68      	ldr	r2, [pc, #416]	@ (800dda8 <__ieee754_sqrt+0x1a8>)
 800dc06:	ec55 4b10 	vmov	r4, r5, d0
 800dc0a:	43aa      	bics	r2, r5
 800dc0c:	462b      	mov	r3, r5
 800dc0e:	4621      	mov	r1, r4
 800dc10:	d110      	bne.n	800dc34 <__ieee754_sqrt+0x34>
 800dc12:	4622      	mov	r2, r4
 800dc14:	4620      	mov	r0, r4
 800dc16:	4629      	mov	r1, r5
 800dc18:	f7f2 fcee 	bl	80005f8 <__aeabi_dmul>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	460b      	mov	r3, r1
 800dc20:	4620      	mov	r0, r4
 800dc22:	4629      	mov	r1, r5
 800dc24:	f7f2 fb32 	bl	800028c <__adddf3>
 800dc28:	4604      	mov	r4, r0
 800dc2a:	460d      	mov	r5, r1
 800dc2c:	ec45 4b10 	vmov	d0, r4, r5
 800dc30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc34:	2d00      	cmp	r5, #0
 800dc36:	dc0e      	bgt.n	800dc56 <__ieee754_sqrt+0x56>
 800dc38:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dc3c:	4322      	orrs	r2, r4
 800dc3e:	d0f5      	beq.n	800dc2c <__ieee754_sqrt+0x2c>
 800dc40:	b19d      	cbz	r5, 800dc6a <__ieee754_sqrt+0x6a>
 800dc42:	4622      	mov	r2, r4
 800dc44:	4620      	mov	r0, r4
 800dc46:	4629      	mov	r1, r5
 800dc48:	f7f2 fb1e 	bl	8000288 <__aeabi_dsub>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	460b      	mov	r3, r1
 800dc50:	f7f2 fdfc 	bl	800084c <__aeabi_ddiv>
 800dc54:	e7e8      	b.n	800dc28 <__ieee754_sqrt+0x28>
 800dc56:	152a      	asrs	r2, r5, #20
 800dc58:	d115      	bne.n	800dc86 <__ieee754_sqrt+0x86>
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	e009      	b.n	800dc72 <__ieee754_sqrt+0x72>
 800dc5e:	0acb      	lsrs	r3, r1, #11
 800dc60:	3a15      	subs	r2, #21
 800dc62:	0549      	lsls	r1, r1, #21
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d0fa      	beq.n	800dc5e <__ieee754_sqrt+0x5e>
 800dc68:	e7f7      	b.n	800dc5a <__ieee754_sqrt+0x5a>
 800dc6a:	462a      	mov	r2, r5
 800dc6c:	e7fa      	b.n	800dc64 <__ieee754_sqrt+0x64>
 800dc6e:	005b      	lsls	r3, r3, #1
 800dc70:	3001      	adds	r0, #1
 800dc72:	02dc      	lsls	r4, r3, #11
 800dc74:	d5fb      	bpl.n	800dc6e <__ieee754_sqrt+0x6e>
 800dc76:	1e44      	subs	r4, r0, #1
 800dc78:	1b12      	subs	r2, r2, r4
 800dc7a:	f1c0 0420 	rsb	r4, r0, #32
 800dc7e:	fa21 f404 	lsr.w	r4, r1, r4
 800dc82:	4323      	orrs	r3, r4
 800dc84:	4081      	lsls	r1, r0
 800dc86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc8a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800dc8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc92:	07d2      	lsls	r2, r2, #31
 800dc94:	bf5c      	itt	pl
 800dc96:	005b      	lslpl	r3, r3, #1
 800dc98:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dc9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dca0:	bf58      	it	pl
 800dca2:	0049      	lslpl	r1, r1, #1
 800dca4:	2600      	movs	r6, #0
 800dca6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800dcaa:	106d      	asrs	r5, r5, #1
 800dcac:	0049      	lsls	r1, r1, #1
 800dcae:	2016      	movs	r0, #22
 800dcb0:	4632      	mov	r2, r6
 800dcb2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800dcb6:	1917      	adds	r7, r2, r4
 800dcb8:	429f      	cmp	r7, r3
 800dcba:	bfde      	ittt	le
 800dcbc:	193a      	addle	r2, r7, r4
 800dcbe:	1bdb      	suble	r3, r3, r7
 800dcc0:	1936      	addle	r6, r6, r4
 800dcc2:	0fcf      	lsrs	r7, r1, #31
 800dcc4:	3801      	subs	r0, #1
 800dcc6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800dcca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dcce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800dcd2:	d1f0      	bne.n	800dcb6 <__ieee754_sqrt+0xb6>
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	2720      	movs	r7, #32
 800dcd8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	eb00 0e0c 	add.w	lr, r0, ip
 800dce2:	db02      	blt.n	800dcea <__ieee754_sqrt+0xea>
 800dce4:	d113      	bne.n	800dd0e <__ieee754_sqrt+0x10e>
 800dce6:	458e      	cmp	lr, r1
 800dce8:	d811      	bhi.n	800dd0e <__ieee754_sqrt+0x10e>
 800dcea:	f1be 0f00 	cmp.w	lr, #0
 800dcee:	eb0e 000c 	add.w	r0, lr, ip
 800dcf2:	da42      	bge.n	800dd7a <__ieee754_sqrt+0x17a>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	db40      	blt.n	800dd7a <__ieee754_sqrt+0x17a>
 800dcf8:	f102 0801 	add.w	r8, r2, #1
 800dcfc:	1a9b      	subs	r3, r3, r2
 800dcfe:	458e      	cmp	lr, r1
 800dd00:	bf88      	it	hi
 800dd02:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dd06:	eba1 010e 	sub.w	r1, r1, lr
 800dd0a:	4464      	add	r4, ip
 800dd0c:	4642      	mov	r2, r8
 800dd0e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800dd12:	3f01      	subs	r7, #1
 800dd14:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dd18:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dd1c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dd20:	d1dc      	bne.n	800dcdc <__ieee754_sqrt+0xdc>
 800dd22:	4319      	orrs	r1, r3
 800dd24:	d01b      	beq.n	800dd5e <__ieee754_sqrt+0x15e>
 800dd26:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ddac <__ieee754_sqrt+0x1ac>
 800dd2a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ddb0 <__ieee754_sqrt+0x1b0>
 800dd2e:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd32:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd36:	f7f2 faa7 	bl	8000288 <__aeabi_dsub>
 800dd3a:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd3e:	4602      	mov	r2, r0
 800dd40:	460b      	mov	r3, r1
 800dd42:	4640      	mov	r0, r8
 800dd44:	4649      	mov	r1, r9
 800dd46:	f7f2 fed3 	bl	8000af0 <__aeabi_dcmple>
 800dd4a:	b140      	cbz	r0, 800dd5e <__ieee754_sqrt+0x15e>
 800dd4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dd50:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd54:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd58:	d111      	bne.n	800dd7e <__ieee754_sqrt+0x17e>
 800dd5a:	3601      	adds	r6, #1
 800dd5c:	463c      	mov	r4, r7
 800dd5e:	1072      	asrs	r2, r6, #1
 800dd60:	0863      	lsrs	r3, r4, #1
 800dd62:	07f1      	lsls	r1, r6, #31
 800dd64:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800dd68:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800dd6c:	bf48      	it	mi
 800dd6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800dd72:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800dd76:	4618      	mov	r0, r3
 800dd78:	e756      	b.n	800dc28 <__ieee754_sqrt+0x28>
 800dd7a:	4690      	mov	r8, r2
 800dd7c:	e7be      	b.n	800dcfc <__ieee754_sqrt+0xfc>
 800dd7e:	f7f2 fa85 	bl	800028c <__adddf3>
 800dd82:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd86:	4602      	mov	r2, r0
 800dd88:	460b      	mov	r3, r1
 800dd8a:	4640      	mov	r0, r8
 800dd8c:	4649      	mov	r1, r9
 800dd8e:	f7f2 fea5 	bl	8000adc <__aeabi_dcmplt>
 800dd92:	b120      	cbz	r0, 800dd9e <__ieee754_sqrt+0x19e>
 800dd94:	1ca0      	adds	r0, r4, #2
 800dd96:	bf08      	it	eq
 800dd98:	3601      	addeq	r6, #1
 800dd9a:	3402      	adds	r4, #2
 800dd9c:	e7df      	b.n	800dd5e <__ieee754_sqrt+0x15e>
 800dd9e:	1c63      	adds	r3, r4, #1
 800dda0:	f023 0401 	bic.w	r4, r3, #1
 800dda4:	e7db      	b.n	800dd5e <__ieee754_sqrt+0x15e>
 800dda6:	bf00      	nop
 800dda8:	7ff00000 	.word	0x7ff00000
 800ddac:	200002e0 	.word	0x200002e0
 800ddb0:	200002d8 	.word	0x200002d8
 800ddb4:	00000000 	.word	0x00000000

0800ddb8 <__ieee754_asin>:
 800ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	ec55 4b10 	vmov	r4, r5, d0
 800ddc0:	4bc7      	ldr	r3, [pc, #796]	@ (800e0e0 <__ieee754_asin+0x328>)
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ddc8:	429e      	cmp	r6, r3
 800ddca:	9501      	str	r5, [sp, #4]
 800ddcc:	d92d      	bls.n	800de2a <__ieee754_asin+0x72>
 800ddce:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800ddd2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800ddd6:	4326      	orrs	r6, r4
 800ddd8:	d116      	bne.n	800de08 <__ieee754_asin+0x50>
 800ddda:	a3a7      	add	r3, pc, #668	@ (adr r3, 800e078 <__ieee754_asin+0x2c0>)
 800dddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde0:	4620      	mov	r0, r4
 800dde2:	4629      	mov	r1, r5
 800dde4:	f7f2 fc08 	bl	80005f8 <__aeabi_dmul>
 800dde8:	a3a5      	add	r3, pc, #660	@ (adr r3, 800e080 <__ieee754_asin+0x2c8>)
 800ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddee:	4606      	mov	r6, r0
 800ddf0:	460f      	mov	r7, r1
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	4629      	mov	r1, r5
 800ddf6:	f7f2 fbff 	bl	80005f8 <__aeabi_dmul>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	4630      	mov	r0, r6
 800de00:	4639      	mov	r1, r7
 800de02:	f7f2 fa43 	bl	800028c <__adddf3>
 800de06:	e009      	b.n	800de1c <__ieee754_asin+0x64>
 800de08:	4622      	mov	r2, r4
 800de0a:	462b      	mov	r3, r5
 800de0c:	4620      	mov	r0, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	f7f2 fa3a 	bl	8000288 <__aeabi_dsub>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	f7f2 fd18 	bl	800084c <__aeabi_ddiv>
 800de1c:	4604      	mov	r4, r0
 800de1e:	460d      	mov	r5, r1
 800de20:	ec45 4b10 	vmov	d0, r4, r5
 800de24:	b007      	add	sp, #28
 800de26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2a:	4bae      	ldr	r3, [pc, #696]	@ (800e0e4 <__ieee754_asin+0x32c>)
 800de2c:	429e      	cmp	r6, r3
 800de2e:	d810      	bhi.n	800de52 <__ieee754_asin+0x9a>
 800de30:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800de34:	f080 80ad 	bcs.w	800df92 <__ieee754_asin+0x1da>
 800de38:	a393      	add	r3, pc, #588	@ (adr r3, 800e088 <__ieee754_asin+0x2d0>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	4620      	mov	r0, r4
 800de40:	4629      	mov	r1, r5
 800de42:	f7f2 fa23 	bl	800028c <__adddf3>
 800de46:	4ba8      	ldr	r3, [pc, #672]	@ (800e0e8 <__ieee754_asin+0x330>)
 800de48:	2200      	movs	r2, #0
 800de4a:	f7f2 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d1e6      	bne.n	800de20 <__ieee754_asin+0x68>
 800de52:	ec45 4b10 	vmov	d0, r4, r5
 800de56:	f7ff fe2f 	bl	800dab8 <fabs>
 800de5a:	49a3      	ldr	r1, [pc, #652]	@ (800e0e8 <__ieee754_asin+0x330>)
 800de5c:	ec53 2b10 	vmov	r2, r3, d0
 800de60:	2000      	movs	r0, #0
 800de62:	f7f2 fa11 	bl	8000288 <__aeabi_dsub>
 800de66:	4ba1      	ldr	r3, [pc, #644]	@ (800e0ec <__ieee754_asin+0x334>)
 800de68:	2200      	movs	r2, #0
 800de6a:	f7f2 fbc5 	bl	80005f8 <__aeabi_dmul>
 800de6e:	a388      	add	r3, pc, #544	@ (adr r3, 800e090 <__ieee754_asin+0x2d8>)
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	4604      	mov	r4, r0
 800de76:	460d      	mov	r5, r1
 800de78:	f7f2 fbbe 	bl	80005f8 <__aeabi_dmul>
 800de7c:	a386      	add	r3, pc, #536	@ (adr r3, 800e098 <__ieee754_asin+0x2e0>)
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	f7f2 fa03 	bl	800028c <__adddf3>
 800de86:	4622      	mov	r2, r4
 800de88:	462b      	mov	r3, r5
 800de8a:	f7f2 fbb5 	bl	80005f8 <__aeabi_dmul>
 800de8e:	a384      	add	r3, pc, #528	@ (adr r3, 800e0a0 <__ieee754_asin+0x2e8>)
 800de90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de94:	f7f2 f9f8 	bl	8000288 <__aeabi_dsub>
 800de98:	4622      	mov	r2, r4
 800de9a:	462b      	mov	r3, r5
 800de9c:	f7f2 fbac 	bl	80005f8 <__aeabi_dmul>
 800dea0:	a381      	add	r3, pc, #516	@ (adr r3, 800e0a8 <__ieee754_asin+0x2f0>)
 800dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea6:	f7f2 f9f1 	bl	800028c <__adddf3>
 800deaa:	4622      	mov	r2, r4
 800deac:	462b      	mov	r3, r5
 800deae:	f7f2 fba3 	bl	80005f8 <__aeabi_dmul>
 800deb2:	a37f      	add	r3, pc, #508	@ (adr r3, 800e0b0 <__ieee754_asin+0x2f8>)
 800deb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb8:	f7f2 f9e6 	bl	8000288 <__aeabi_dsub>
 800debc:	4622      	mov	r2, r4
 800debe:	462b      	mov	r3, r5
 800dec0:	f7f2 fb9a 	bl	80005f8 <__aeabi_dmul>
 800dec4:	a37c      	add	r3, pc, #496	@ (adr r3, 800e0b8 <__ieee754_asin+0x300>)
 800dec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deca:	f7f2 f9df 	bl	800028c <__adddf3>
 800dece:	4622      	mov	r2, r4
 800ded0:	462b      	mov	r3, r5
 800ded2:	f7f2 fb91 	bl	80005f8 <__aeabi_dmul>
 800ded6:	a37a      	add	r3, pc, #488	@ (adr r3, 800e0c0 <__ieee754_asin+0x308>)
 800ded8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dedc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dee0:	4620      	mov	r0, r4
 800dee2:	4629      	mov	r1, r5
 800dee4:	f7f2 fb88 	bl	80005f8 <__aeabi_dmul>
 800dee8:	a377      	add	r3, pc, #476	@ (adr r3, 800e0c8 <__ieee754_asin+0x310>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 f9cb 	bl	8000288 <__aeabi_dsub>
 800def2:	4622      	mov	r2, r4
 800def4:	462b      	mov	r3, r5
 800def6:	f7f2 fb7f 	bl	80005f8 <__aeabi_dmul>
 800defa:	a375      	add	r3, pc, #468	@ (adr r3, 800e0d0 <__ieee754_asin+0x318>)
 800defc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df00:	f7f2 f9c4 	bl	800028c <__adddf3>
 800df04:	4622      	mov	r2, r4
 800df06:	462b      	mov	r3, r5
 800df08:	f7f2 fb76 	bl	80005f8 <__aeabi_dmul>
 800df0c:	a372      	add	r3, pc, #456	@ (adr r3, 800e0d8 <__ieee754_asin+0x320>)
 800df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df12:	f7f2 f9b9 	bl	8000288 <__aeabi_dsub>
 800df16:	4622      	mov	r2, r4
 800df18:	462b      	mov	r3, r5
 800df1a:	f7f2 fb6d 	bl	80005f8 <__aeabi_dmul>
 800df1e:	4b72      	ldr	r3, [pc, #456]	@ (800e0e8 <__ieee754_asin+0x330>)
 800df20:	2200      	movs	r2, #0
 800df22:	f7f2 f9b3 	bl	800028c <__adddf3>
 800df26:	ec45 4b10 	vmov	d0, r4, r5
 800df2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df2e:	f7ff fe67 	bl	800dc00 <__ieee754_sqrt>
 800df32:	4b6f      	ldr	r3, [pc, #444]	@ (800e0f0 <__ieee754_asin+0x338>)
 800df34:	429e      	cmp	r6, r3
 800df36:	ec5b ab10 	vmov	sl, fp, d0
 800df3a:	f240 80db 	bls.w	800e0f4 <__ieee754_asin+0x33c>
 800df3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df46:	f7f2 fc81 	bl	800084c <__aeabi_ddiv>
 800df4a:	4652      	mov	r2, sl
 800df4c:	465b      	mov	r3, fp
 800df4e:	f7f2 fb53 	bl	80005f8 <__aeabi_dmul>
 800df52:	4652      	mov	r2, sl
 800df54:	465b      	mov	r3, fp
 800df56:	f7f2 f999 	bl	800028c <__adddf3>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	f7f2 f995 	bl	800028c <__adddf3>
 800df62:	a347      	add	r3, pc, #284	@ (adr r3, 800e080 <__ieee754_asin+0x2c8>)
 800df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df68:	f7f2 f98e 	bl	8000288 <__aeabi_dsub>
 800df6c:	4602      	mov	r2, r0
 800df6e:	460b      	mov	r3, r1
 800df70:	a141      	add	r1, pc, #260	@ (adr r1, 800e078 <__ieee754_asin+0x2c0>)
 800df72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df76:	f7f2 f987 	bl	8000288 <__aeabi_dsub>
 800df7a:	9b01      	ldr	r3, [sp, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bfdc      	itt	le
 800df80:	4602      	movle	r2, r0
 800df82:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800df86:	4604      	mov	r4, r0
 800df88:	460d      	mov	r5, r1
 800df8a:	bfdc      	itt	le
 800df8c:	4614      	movle	r4, r2
 800df8e:	461d      	movle	r5, r3
 800df90:	e746      	b.n	800de20 <__ieee754_asin+0x68>
 800df92:	4622      	mov	r2, r4
 800df94:	462b      	mov	r3, r5
 800df96:	4620      	mov	r0, r4
 800df98:	4629      	mov	r1, r5
 800df9a:	f7f2 fb2d 	bl	80005f8 <__aeabi_dmul>
 800df9e:	a33c      	add	r3, pc, #240	@ (adr r3, 800e090 <__ieee754_asin+0x2d8>)
 800dfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	460f      	mov	r7, r1
 800dfa8:	f7f2 fb26 	bl	80005f8 <__aeabi_dmul>
 800dfac:	a33a      	add	r3, pc, #232	@ (adr r3, 800e098 <__ieee754_asin+0x2e0>)
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	f7f2 f96b 	bl	800028c <__adddf3>
 800dfb6:	4632      	mov	r2, r6
 800dfb8:	463b      	mov	r3, r7
 800dfba:	f7f2 fb1d 	bl	80005f8 <__aeabi_dmul>
 800dfbe:	a338      	add	r3, pc, #224	@ (adr r3, 800e0a0 <__ieee754_asin+0x2e8>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	f7f2 f960 	bl	8000288 <__aeabi_dsub>
 800dfc8:	4632      	mov	r2, r6
 800dfca:	463b      	mov	r3, r7
 800dfcc:	f7f2 fb14 	bl	80005f8 <__aeabi_dmul>
 800dfd0:	a335      	add	r3, pc, #212	@ (adr r3, 800e0a8 <__ieee754_asin+0x2f0>)
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	f7f2 f959 	bl	800028c <__adddf3>
 800dfda:	4632      	mov	r2, r6
 800dfdc:	463b      	mov	r3, r7
 800dfde:	f7f2 fb0b 	bl	80005f8 <__aeabi_dmul>
 800dfe2:	a333      	add	r3, pc, #204	@ (adr r3, 800e0b0 <__ieee754_asin+0x2f8>)
 800dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe8:	f7f2 f94e 	bl	8000288 <__aeabi_dsub>
 800dfec:	4632      	mov	r2, r6
 800dfee:	463b      	mov	r3, r7
 800dff0:	f7f2 fb02 	bl	80005f8 <__aeabi_dmul>
 800dff4:	a330      	add	r3, pc, #192	@ (adr r3, 800e0b8 <__ieee754_asin+0x300>)
 800dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffa:	f7f2 f947 	bl	800028c <__adddf3>
 800dffe:	4632      	mov	r2, r6
 800e000:	463b      	mov	r3, r7
 800e002:	f7f2 faf9 	bl	80005f8 <__aeabi_dmul>
 800e006:	a32e      	add	r3, pc, #184	@ (adr r3, 800e0c0 <__ieee754_asin+0x308>)
 800e008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00c:	4680      	mov	r8, r0
 800e00e:	4689      	mov	r9, r1
 800e010:	4630      	mov	r0, r6
 800e012:	4639      	mov	r1, r7
 800e014:	f7f2 faf0 	bl	80005f8 <__aeabi_dmul>
 800e018:	a32b      	add	r3, pc, #172	@ (adr r3, 800e0c8 <__ieee754_asin+0x310>)
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	f7f2 f933 	bl	8000288 <__aeabi_dsub>
 800e022:	4632      	mov	r2, r6
 800e024:	463b      	mov	r3, r7
 800e026:	f7f2 fae7 	bl	80005f8 <__aeabi_dmul>
 800e02a:	a329      	add	r3, pc, #164	@ (adr r3, 800e0d0 <__ieee754_asin+0x318>)
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f7f2 f92c 	bl	800028c <__adddf3>
 800e034:	4632      	mov	r2, r6
 800e036:	463b      	mov	r3, r7
 800e038:	f7f2 fade 	bl	80005f8 <__aeabi_dmul>
 800e03c:	a326      	add	r3, pc, #152	@ (adr r3, 800e0d8 <__ieee754_asin+0x320>)
 800e03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e042:	f7f2 f921 	bl	8000288 <__aeabi_dsub>
 800e046:	4632      	mov	r2, r6
 800e048:	463b      	mov	r3, r7
 800e04a:	f7f2 fad5 	bl	80005f8 <__aeabi_dmul>
 800e04e:	4b26      	ldr	r3, [pc, #152]	@ (800e0e8 <__ieee754_asin+0x330>)
 800e050:	2200      	movs	r2, #0
 800e052:	f7f2 f91b 	bl	800028c <__adddf3>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	4640      	mov	r0, r8
 800e05c:	4649      	mov	r1, r9
 800e05e:	f7f2 fbf5 	bl	800084c <__aeabi_ddiv>
 800e062:	4622      	mov	r2, r4
 800e064:	462b      	mov	r3, r5
 800e066:	f7f2 fac7 	bl	80005f8 <__aeabi_dmul>
 800e06a:	4602      	mov	r2, r0
 800e06c:	460b      	mov	r3, r1
 800e06e:	4620      	mov	r0, r4
 800e070:	4629      	mov	r1, r5
 800e072:	e6c6      	b.n	800de02 <__ieee754_asin+0x4a>
 800e074:	f3af 8000 	nop.w
 800e078:	54442d18 	.word	0x54442d18
 800e07c:	3ff921fb 	.word	0x3ff921fb
 800e080:	33145c07 	.word	0x33145c07
 800e084:	3c91a626 	.word	0x3c91a626
 800e088:	8800759c 	.word	0x8800759c
 800e08c:	7e37e43c 	.word	0x7e37e43c
 800e090:	0dfdf709 	.word	0x0dfdf709
 800e094:	3f023de1 	.word	0x3f023de1
 800e098:	7501b288 	.word	0x7501b288
 800e09c:	3f49efe0 	.word	0x3f49efe0
 800e0a0:	b5688f3b 	.word	0xb5688f3b
 800e0a4:	3fa48228 	.word	0x3fa48228
 800e0a8:	0e884455 	.word	0x0e884455
 800e0ac:	3fc9c155 	.word	0x3fc9c155
 800e0b0:	03eb6f7d 	.word	0x03eb6f7d
 800e0b4:	3fd4d612 	.word	0x3fd4d612
 800e0b8:	55555555 	.word	0x55555555
 800e0bc:	3fc55555 	.word	0x3fc55555
 800e0c0:	b12e9282 	.word	0xb12e9282
 800e0c4:	3fb3b8c5 	.word	0x3fb3b8c5
 800e0c8:	1b8d0159 	.word	0x1b8d0159
 800e0cc:	3fe6066c 	.word	0x3fe6066c
 800e0d0:	9c598ac8 	.word	0x9c598ac8
 800e0d4:	40002ae5 	.word	0x40002ae5
 800e0d8:	1c8a2d4b 	.word	0x1c8a2d4b
 800e0dc:	40033a27 	.word	0x40033a27
 800e0e0:	3fefffff 	.word	0x3fefffff
 800e0e4:	3fdfffff 	.word	0x3fdfffff
 800e0e8:	3ff00000 	.word	0x3ff00000
 800e0ec:	3fe00000 	.word	0x3fe00000
 800e0f0:	3fef3332 	.word	0x3fef3332
 800e0f4:	4652      	mov	r2, sl
 800e0f6:	465b      	mov	r3, fp
 800e0f8:	4650      	mov	r0, sl
 800e0fa:	4659      	mov	r1, fp
 800e0fc:	f7f2 f8c6 	bl	800028c <__adddf3>
 800e100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e104:	4606      	mov	r6, r0
 800e106:	460f      	mov	r7, r1
 800e108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e10c:	f7f2 fb9e 	bl	800084c <__aeabi_ddiv>
 800e110:	4602      	mov	r2, r0
 800e112:	460b      	mov	r3, r1
 800e114:	4630      	mov	r0, r6
 800e116:	4639      	mov	r1, r7
 800e118:	f7f2 fa6e 	bl	80005f8 <__aeabi_dmul>
 800e11c:	f04f 0800 	mov.w	r8, #0
 800e120:	4606      	mov	r6, r0
 800e122:	460f      	mov	r7, r1
 800e124:	4642      	mov	r2, r8
 800e126:	465b      	mov	r3, fp
 800e128:	4640      	mov	r0, r8
 800e12a:	4659      	mov	r1, fp
 800e12c:	f7f2 fa64 	bl	80005f8 <__aeabi_dmul>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	4620      	mov	r0, r4
 800e136:	4629      	mov	r1, r5
 800e138:	f7f2 f8a6 	bl	8000288 <__aeabi_dsub>
 800e13c:	4642      	mov	r2, r8
 800e13e:	4604      	mov	r4, r0
 800e140:	460d      	mov	r5, r1
 800e142:	465b      	mov	r3, fp
 800e144:	4650      	mov	r0, sl
 800e146:	4659      	mov	r1, fp
 800e148:	f7f2 f8a0 	bl	800028c <__adddf3>
 800e14c:	4602      	mov	r2, r0
 800e14e:	460b      	mov	r3, r1
 800e150:	4620      	mov	r0, r4
 800e152:	4629      	mov	r1, r5
 800e154:	f7f2 fb7a 	bl	800084c <__aeabi_ddiv>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	f7f2 f896 	bl	800028c <__adddf3>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	a112      	add	r1, pc, #72	@ (adr r1, 800e1b0 <__ieee754_asin+0x3f8>)
 800e166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e16a:	f7f2 f88d 	bl	8000288 <__aeabi_dsub>
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	4630      	mov	r0, r6
 800e174:	4639      	mov	r1, r7
 800e176:	f7f2 f887 	bl	8000288 <__aeabi_dsub>
 800e17a:	4642      	mov	r2, r8
 800e17c:	4604      	mov	r4, r0
 800e17e:	460d      	mov	r5, r1
 800e180:	465b      	mov	r3, fp
 800e182:	4640      	mov	r0, r8
 800e184:	4659      	mov	r1, fp
 800e186:	f7f2 f881 	bl	800028c <__adddf3>
 800e18a:	4602      	mov	r2, r0
 800e18c:	460b      	mov	r3, r1
 800e18e:	a10a      	add	r1, pc, #40	@ (adr r1, 800e1b8 <__ieee754_asin+0x400>)
 800e190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e194:	f7f2 f878 	bl	8000288 <__aeabi_dsub>
 800e198:	4602      	mov	r2, r0
 800e19a:	460b      	mov	r3, r1
 800e19c:	4620      	mov	r0, r4
 800e19e:	4629      	mov	r1, r5
 800e1a0:	f7f2 f872 	bl	8000288 <__aeabi_dsub>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	a103      	add	r1, pc, #12	@ (adr r1, 800e1b8 <__ieee754_asin+0x400>)
 800e1aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ae:	e6e2      	b.n	800df76 <__ieee754_asin+0x1be>
 800e1b0:	33145c07 	.word	0x33145c07
 800e1b4:	3c91a626 	.word	0x3c91a626
 800e1b8:	54442d18 	.word	0x54442d18
 800e1bc:	3fe921fb 	.word	0x3fe921fb

0800e1c0 <__ieee754_atan2>:
 800e1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c4:	ec57 6b11 	vmov	r6, r7, d1
 800e1c8:	4273      	negs	r3, r6
 800e1ca:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e348 <__ieee754_atan2+0x188>
 800e1ce:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e1d2:	4333      	orrs	r3, r6
 800e1d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e1d8:	4543      	cmp	r3, r8
 800e1da:	ec51 0b10 	vmov	r0, r1, d0
 800e1de:	4635      	mov	r5, r6
 800e1e0:	d809      	bhi.n	800e1f6 <__ieee754_atan2+0x36>
 800e1e2:	4244      	negs	r4, r0
 800e1e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e1e8:	4304      	orrs	r4, r0
 800e1ea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e1ee:	4544      	cmp	r4, r8
 800e1f0:	468e      	mov	lr, r1
 800e1f2:	4681      	mov	r9, r0
 800e1f4:	d907      	bls.n	800e206 <__ieee754_atan2+0x46>
 800e1f6:	4632      	mov	r2, r6
 800e1f8:	463b      	mov	r3, r7
 800e1fa:	f7f2 f847 	bl	800028c <__adddf3>
 800e1fe:	ec41 0b10 	vmov	d0, r0, r1
 800e202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e206:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e20a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e20e:	4334      	orrs	r4, r6
 800e210:	d103      	bne.n	800e21a <__ieee754_atan2+0x5a>
 800e212:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e216:	f000 b89b 	b.w	800e350 <atan>
 800e21a:	17bc      	asrs	r4, r7, #30
 800e21c:	f004 0402 	and.w	r4, r4, #2
 800e220:	ea53 0909 	orrs.w	r9, r3, r9
 800e224:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e228:	d107      	bne.n	800e23a <__ieee754_atan2+0x7a>
 800e22a:	2c02      	cmp	r4, #2
 800e22c:	d05f      	beq.n	800e2ee <__ieee754_atan2+0x12e>
 800e22e:	2c03      	cmp	r4, #3
 800e230:	d1e5      	bne.n	800e1fe <__ieee754_atan2+0x3e>
 800e232:	a141      	add	r1, pc, #260	@ (adr r1, 800e338 <__ieee754_atan2+0x178>)
 800e234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e238:	e7e1      	b.n	800e1fe <__ieee754_atan2+0x3e>
 800e23a:	4315      	orrs	r5, r2
 800e23c:	d106      	bne.n	800e24c <__ieee754_atan2+0x8c>
 800e23e:	f1be 0f00 	cmp.w	lr, #0
 800e242:	da5f      	bge.n	800e304 <__ieee754_atan2+0x144>
 800e244:	a13e      	add	r1, pc, #248	@ (adr r1, 800e340 <__ieee754_atan2+0x180>)
 800e246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e24a:	e7d8      	b.n	800e1fe <__ieee754_atan2+0x3e>
 800e24c:	4542      	cmp	r2, r8
 800e24e:	d10f      	bne.n	800e270 <__ieee754_atan2+0xb0>
 800e250:	4293      	cmp	r3, r2
 800e252:	f104 34ff 	add.w	r4, r4, #4294967295
 800e256:	d107      	bne.n	800e268 <__ieee754_atan2+0xa8>
 800e258:	2c02      	cmp	r4, #2
 800e25a:	d84c      	bhi.n	800e2f6 <__ieee754_atan2+0x136>
 800e25c:	4b34      	ldr	r3, [pc, #208]	@ (800e330 <__ieee754_atan2+0x170>)
 800e25e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e262:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e266:	e7ca      	b.n	800e1fe <__ieee754_atan2+0x3e>
 800e268:	2c02      	cmp	r4, #2
 800e26a:	d848      	bhi.n	800e2fe <__ieee754_atan2+0x13e>
 800e26c:	4b31      	ldr	r3, [pc, #196]	@ (800e334 <__ieee754_atan2+0x174>)
 800e26e:	e7f6      	b.n	800e25e <__ieee754_atan2+0x9e>
 800e270:	4543      	cmp	r3, r8
 800e272:	d0e4      	beq.n	800e23e <__ieee754_atan2+0x7e>
 800e274:	1a9b      	subs	r3, r3, r2
 800e276:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e27a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e27e:	da1e      	bge.n	800e2be <__ieee754_atan2+0xfe>
 800e280:	2f00      	cmp	r7, #0
 800e282:	da01      	bge.n	800e288 <__ieee754_atan2+0xc8>
 800e284:	323c      	adds	r2, #60	@ 0x3c
 800e286:	db1e      	blt.n	800e2c6 <__ieee754_atan2+0x106>
 800e288:	4632      	mov	r2, r6
 800e28a:	463b      	mov	r3, r7
 800e28c:	f7f2 fade 	bl	800084c <__aeabi_ddiv>
 800e290:	ec41 0b10 	vmov	d0, r0, r1
 800e294:	f7ff fc10 	bl	800dab8 <fabs>
 800e298:	f000 f85a 	bl	800e350 <atan>
 800e29c:	ec51 0b10 	vmov	r0, r1, d0
 800e2a0:	2c01      	cmp	r4, #1
 800e2a2:	d013      	beq.n	800e2cc <__ieee754_atan2+0x10c>
 800e2a4:	2c02      	cmp	r4, #2
 800e2a6:	d015      	beq.n	800e2d4 <__ieee754_atan2+0x114>
 800e2a8:	2c00      	cmp	r4, #0
 800e2aa:	d0a8      	beq.n	800e1fe <__ieee754_atan2+0x3e>
 800e2ac:	a318      	add	r3, pc, #96	@ (adr r3, 800e310 <__ieee754_atan2+0x150>)
 800e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b2:	f7f1 ffe9 	bl	8000288 <__aeabi_dsub>
 800e2b6:	a318      	add	r3, pc, #96	@ (adr r3, 800e318 <__ieee754_atan2+0x158>)
 800e2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2bc:	e014      	b.n	800e2e8 <__ieee754_atan2+0x128>
 800e2be:	a118      	add	r1, pc, #96	@ (adr r1, 800e320 <__ieee754_atan2+0x160>)
 800e2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2c4:	e7ec      	b.n	800e2a0 <__ieee754_atan2+0xe0>
 800e2c6:	2000      	movs	r0, #0
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	e7e9      	b.n	800e2a0 <__ieee754_atan2+0xe0>
 800e2cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	e794      	b.n	800e1fe <__ieee754_atan2+0x3e>
 800e2d4:	a30e      	add	r3, pc, #56	@ (adr r3, 800e310 <__ieee754_atan2+0x150>)
 800e2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2da:	f7f1 ffd5 	bl	8000288 <__aeabi_dsub>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	a10d      	add	r1, pc, #52	@ (adr r1, 800e318 <__ieee754_atan2+0x158>)
 800e2e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2e8:	f7f1 ffce 	bl	8000288 <__aeabi_dsub>
 800e2ec:	e787      	b.n	800e1fe <__ieee754_atan2+0x3e>
 800e2ee:	a10a      	add	r1, pc, #40	@ (adr r1, 800e318 <__ieee754_atan2+0x158>)
 800e2f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2f4:	e783      	b.n	800e1fe <__ieee754_atan2+0x3e>
 800e2f6:	a10c      	add	r1, pc, #48	@ (adr r1, 800e328 <__ieee754_atan2+0x168>)
 800e2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2fc:	e77f      	b.n	800e1fe <__ieee754_atan2+0x3e>
 800e2fe:	2000      	movs	r0, #0
 800e300:	2100      	movs	r1, #0
 800e302:	e77c      	b.n	800e1fe <__ieee754_atan2+0x3e>
 800e304:	a106      	add	r1, pc, #24	@ (adr r1, 800e320 <__ieee754_atan2+0x160>)
 800e306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e30a:	e778      	b.n	800e1fe <__ieee754_atan2+0x3e>
 800e30c:	f3af 8000 	nop.w
 800e310:	33145c07 	.word	0x33145c07
 800e314:	3ca1a626 	.word	0x3ca1a626
 800e318:	54442d18 	.word	0x54442d18
 800e31c:	400921fb 	.word	0x400921fb
 800e320:	54442d18 	.word	0x54442d18
 800e324:	3ff921fb 	.word	0x3ff921fb
 800e328:	54442d18 	.word	0x54442d18
 800e32c:	3fe921fb 	.word	0x3fe921fb
 800e330:	0800f498 	.word	0x0800f498
 800e334:	0800f480 	.word	0x0800f480
 800e338:	54442d18 	.word	0x54442d18
 800e33c:	c00921fb 	.word	0xc00921fb
 800e340:	54442d18 	.word	0x54442d18
 800e344:	bff921fb 	.word	0xbff921fb
 800e348:	7ff00000 	.word	0x7ff00000
 800e34c:	00000000 	.word	0x00000000

0800e350 <atan>:
 800e350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e354:	ec55 4b10 	vmov	r4, r5, d0
 800e358:	4bbf      	ldr	r3, [pc, #764]	@ (800e658 <atan+0x308>)
 800e35a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e35e:	429e      	cmp	r6, r3
 800e360:	46ab      	mov	fp, r5
 800e362:	d918      	bls.n	800e396 <atan+0x46>
 800e364:	4bbd      	ldr	r3, [pc, #756]	@ (800e65c <atan+0x30c>)
 800e366:	429e      	cmp	r6, r3
 800e368:	d801      	bhi.n	800e36e <atan+0x1e>
 800e36a:	d109      	bne.n	800e380 <atan+0x30>
 800e36c:	b144      	cbz	r4, 800e380 <atan+0x30>
 800e36e:	4622      	mov	r2, r4
 800e370:	462b      	mov	r3, r5
 800e372:	4620      	mov	r0, r4
 800e374:	4629      	mov	r1, r5
 800e376:	f7f1 ff89 	bl	800028c <__adddf3>
 800e37a:	4604      	mov	r4, r0
 800e37c:	460d      	mov	r5, r1
 800e37e:	e006      	b.n	800e38e <atan+0x3e>
 800e380:	f1bb 0f00 	cmp.w	fp, #0
 800e384:	f340 812b 	ble.w	800e5de <atan+0x28e>
 800e388:	a597      	add	r5, pc, #604	@ (adr r5, 800e5e8 <atan+0x298>)
 800e38a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e38e:	ec45 4b10 	vmov	d0, r4, r5
 800e392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e396:	4bb2      	ldr	r3, [pc, #712]	@ (800e660 <atan+0x310>)
 800e398:	429e      	cmp	r6, r3
 800e39a:	d813      	bhi.n	800e3c4 <atan+0x74>
 800e39c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e3a0:	429e      	cmp	r6, r3
 800e3a2:	d80c      	bhi.n	800e3be <atan+0x6e>
 800e3a4:	a392      	add	r3, pc, #584	@ (adr r3, 800e5f0 <atan+0x2a0>)
 800e3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	f7f1 ff6d 	bl	800028c <__adddf3>
 800e3b2:	4bac      	ldr	r3, [pc, #688]	@ (800e664 <atan+0x314>)
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	f7f2 fbaf 	bl	8000b18 <__aeabi_dcmpgt>
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d1e7      	bne.n	800e38e <atan+0x3e>
 800e3be:	f04f 3aff 	mov.w	sl, #4294967295
 800e3c2:	e029      	b.n	800e418 <atan+0xc8>
 800e3c4:	f7ff fb78 	bl	800dab8 <fabs>
 800e3c8:	4ba7      	ldr	r3, [pc, #668]	@ (800e668 <atan+0x318>)
 800e3ca:	429e      	cmp	r6, r3
 800e3cc:	ec55 4b10 	vmov	r4, r5, d0
 800e3d0:	f200 80bc 	bhi.w	800e54c <atan+0x1fc>
 800e3d4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e3d8:	429e      	cmp	r6, r3
 800e3da:	f200 809e 	bhi.w	800e51a <atan+0x1ca>
 800e3de:	4622      	mov	r2, r4
 800e3e0:	462b      	mov	r3, r5
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	f7f1 ff51 	bl	800028c <__adddf3>
 800e3ea:	4b9e      	ldr	r3, [pc, #632]	@ (800e664 <atan+0x314>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f7f1 ff4b 	bl	8000288 <__aeabi_dsub>
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	4606      	mov	r6, r0
 800e3f6:	460f      	mov	r7, r1
 800e3f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	4629      	mov	r1, r5
 800e400:	f7f1 ff44 	bl	800028c <__adddf3>
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	4630      	mov	r0, r6
 800e40a:	4639      	mov	r1, r7
 800e40c:	f7f2 fa1e 	bl	800084c <__aeabi_ddiv>
 800e410:	f04f 0a00 	mov.w	sl, #0
 800e414:	4604      	mov	r4, r0
 800e416:	460d      	mov	r5, r1
 800e418:	4622      	mov	r2, r4
 800e41a:	462b      	mov	r3, r5
 800e41c:	4620      	mov	r0, r4
 800e41e:	4629      	mov	r1, r5
 800e420:	f7f2 f8ea 	bl	80005f8 <__aeabi_dmul>
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	4680      	mov	r8, r0
 800e42a:	4689      	mov	r9, r1
 800e42c:	f7f2 f8e4 	bl	80005f8 <__aeabi_dmul>
 800e430:	a371      	add	r3, pc, #452	@ (adr r3, 800e5f8 <atan+0x2a8>)
 800e432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e436:	4606      	mov	r6, r0
 800e438:	460f      	mov	r7, r1
 800e43a:	f7f2 f8dd 	bl	80005f8 <__aeabi_dmul>
 800e43e:	a370      	add	r3, pc, #448	@ (adr r3, 800e600 <atan+0x2b0>)
 800e440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e444:	f7f1 ff22 	bl	800028c <__adddf3>
 800e448:	4632      	mov	r2, r6
 800e44a:	463b      	mov	r3, r7
 800e44c:	f7f2 f8d4 	bl	80005f8 <__aeabi_dmul>
 800e450:	a36d      	add	r3, pc, #436	@ (adr r3, 800e608 <atan+0x2b8>)
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	f7f1 ff19 	bl	800028c <__adddf3>
 800e45a:	4632      	mov	r2, r6
 800e45c:	463b      	mov	r3, r7
 800e45e:	f7f2 f8cb 	bl	80005f8 <__aeabi_dmul>
 800e462:	a36b      	add	r3, pc, #428	@ (adr r3, 800e610 <atan+0x2c0>)
 800e464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e468:	f7f1 ff10 	bl	800028c <__adddf3>
 800e46c:	4632      	mov	r2, r6
 800e46e:	463b      	mov	r3, r7
 800e470:	f7f2 f8c2 	bl	80005f8 <__aeabi_dmul>
 800e474:	a368      	add	r3, pc, #416	@ (adr r3, 800e618 <atan+0x2c8>)
 800e476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47a:	f7f1 ff07 	bl	800028c <__adddf3>
 800e47e:	4632      	mov	r2, r6
 800e480:	463b      	mov	r3, r7
 800e482:	f7f2 f8b9 	bl	80005f8 <__aeabi_dmul>
 800e486:	a366      	add	r3, pc, #408	@ (adr r3, 800e620 <atan+0x2d0>)
 800e488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48c:	f7f1 fefe 	bl	800028c <__adddf3>
 800e490:	4642      	mov	r2, r8
 800e492:	464b      	mov	r3, r9
 800e494:	f7f2 f8b0 	bl	80005f8 <__aeabi_dmul>
 800e498:	a363      	add	r3, pc, #396	@ (adr r3, 800e628 <atan+0x2d8>)
 800e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49e:	4680      	mov	r8, r0
 800e4a0:	4689      	mov	r9, r1
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	f7f2 f8a7 	bl	80005f8 <__aeabi_dmul>
 800e4aa:	a361      	add	r3, pc, #388	@ (adr r3, 800e630 <atan+0x2e0>)
 800e4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b0:	f7f1 feea 	bl	8000288 <__aeabi_dsub>
 800e4b4:	4632      	mov	r2, r6
 800e4b6:	463b      	mov	r3, r7
 800e4b8:	f7f2 f89e 	bl	80005f8 <__aeabi_dmul>
 800e4bc:	a35e      	add	r3, pc, #376	@ (adr r3, 800e638 <atan+0x2e8>)
 800e4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c2:	f7f1 fee1 	bl	8000288 <__aeabi_dsub>
 800e4c6:	4632      	mov	r2, r6
 800e4c8:	463b      	mov	r3, r7
 800e4ca:	f7f2 f895 	bl	80005f8 <__aeabi_dmul>
 800e4ce:	a35c      	add	r3, pc, #368	@ (adr r3, 800e640 <atan+0x2f0>)
 800e4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d4:	f7f1 fed8 	bl	8000288 <__aeabi_dsub>
 800e4d8:	4632      	mov	r2, r6
 800e4da:	463b      	mov	r3, r7
 800e4dc:	f7f2 f88c 	bl	80005f8 <__aeabi_dmul>
 800e4e0:	a359      	add	r3, pc, #356	@ (adr r3, 800e648 <atan+0x2f8>)
 800e4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e6:	f7f1 fecf 	bl	8000288 <__aeabi_dsub>
 800e4ea:	4632      	mov	r2, r6
 800e4ec:	463b      	mov	r3, r7
 800e4ee:	f7f2 f883 	bl	80005f8 <__aeabi_dmul>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	4640      	mov	r0, r8
 800e4f8:	4649      	mov	r1, r9
 800e4fa:	f7f1 fec7 	bl	800028c <__adddf3>
 800e4fe:	4622      	mov	r2, r4
 800e500:	462b      	mov	r3, r5
 800e502:	f7f2 f879 	bl	80005f8 <__aeabi_dmul>
 800e506:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	d148      	bne.n	800e5a2 <atan+0x252>
 800e510:	4620      	mov	r0, r4
 800e512:	4629      	mov	r1, r5
 800e514:	f7f1 feb8 	bl	8000288 <__aeabi_dsub>
 800e518:	e72f      	b.n	800e37a <atan+0x2a>
 800e51a:	4b52      	ldr	r3, [pc, #328]	@ (800e664 <atan+0x314>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	4620      	mov	r0, r4
 800e520:	4629      	mov	r1, r5
 800e522:	f7f1 feb1 	bl	8000288 <__aeabi_dsub>
 800e526:	4b4f      	ldr	r3, [pc, #316]	@ (800e664 <atan+0x314>)
 800e528:	4606      	mov	r6, r0
 800e52a:	460f      	mov	r7, r1
 800e52c:	2200      	movs	r2, #0
 800e52e:	4620      	mov	r0, r4
 800e530:	4629      	mov	r1, r5
 800e532:	f7f1 feab 	bl	800028c <__adddf3>
 800e536:	4602      	mov	r2, r0
 800e538:	460b      	mov	r3, r1
 800e53a:	4630      	mov	r0, r6
 800e53c:	4639      	mov	r1, r7
 800e53e:	f7f2 f985 	bl	800084c <__aeabi_ddiv>
 800e542:	f04f 0a01 	mov.w	sl, #1
 800e546:	4604      	mov	r4, r0
 800e548:	460d      	mov	r5, r1
 800e54a:	e765      	b.n	800e418 <atan+0xc8>
 800e54c:	4b47      	ldr	r3, [pc, #284]	@ (800e66c <atan+0x31c>)
 800e54e:	429e      	cmp	r6, r3
 800e550:	d21c      	bcs.n	800e58c <atan+0x23c>
 800e552:	4b47      	ldr	r3, [pc, #284]	@ (800e670 <atan+0x320>)
 800e554:	2200      	movs	r2, #0
 800e556:	4620      	mov	r0, r4
 800e558:	4629      	mov	r1, r5
 800e55a:	f7f1 fe95 	bl	8000288 <__aeabi_dsub>
 800e55e:	4b44      	ldr	r3, [pc, #272]	@ (800e670 <atan+0x320>)
 800e560:	4606      	mov	r6, r0
 800e562:	460f      	mov	r7, r1
 800e564:	2200      	movs	r2, #0
 800e566:	4620      	mov	r0, r4
 800e568:	4629      	mov	r1, r5
 800e56a:	f7f2 f845 	bl	80005f8 <__aeabi_dmul>
 800e56e:	4b3d      	ldr	r3, [pc, #244]	@ (800e664 <atan+0x314>)
 800e570:	2200      	movs	r2, #0
 800e572:	f7f1 fe8b 	bl	800028c <__adddf3>
 800e576:	4602      	mov	r2, r0
 800e578:	460b      	mov	r3, r1
 800e57a:	4630      	mov	r0, r6
 800e57c:	4639      	mov	r1, r7
 800e57e:	f7f2 f965 	bl	800084c <__aeabi_ddiv>
 800e582:	f04f 0a02 	mov.w	sl, #2
 800e586:	4604      	mov	r4, r0
 800e588:	460d      	mov	r5, r1
 800e58a:	e745      	b.n	800e418 <atan+0xc8>
 800e58c:	4622      	mov	r2, r4
 800e58e:	462b      	mov	r3, r5
 800e590:	4938      	ldr	r1, [pc, #224]	@ (800e674 <atan+0x324>)
 800e592:	2000      	movs	r0, #0
 800e594:	f7f2 f95a 	bl	800084c <__aeabi_ddiv>
 800e598:	f04f 0a03 	mov.w	sl, #3
 800e59c:	4604      	mov	r4, r0
 800e59e:	460d      	mov	r5, r1
 800e5a0:	e73a      	b.n	800e418 <atan+0xc8>
 800e5a2:	4b35      	ldr	r3, [pc, #212]	@ (800e678 <atan+0x328>)
 800e5a4:	4e35      	ldr	r6, [pc, #212]	@ (800e67c <atan+0x32c>)
 800e5a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	f7f1 fe6b 	bl	8000288 <__aeabi_dsub>
 800e5b2:	4622      	mov	r2, r4
 800e5b4:	462b      	mov	r3, r5
 800e5b6:	f7f1 fe67 	bl	8000288 <__aeabi_dsub>
 800e5ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e5c6:	f7f1 fe5f 	bl	8000288 <__aeabi_dsub>
 800e5ca:	f1bb 0f00 	cmp.w	fp, #0
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	460d      	mov	r5, r1
 800e5d2:	f6bf aedc 	bge.w	800e38e <atan+0x3e>
 800e5d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e5da:	461d      	mov	r5, r3
 800e5dc:	e6d7      	b.n	800e38e <atan+0x3e>
 800e5de:	a51c      	add	r5, pc, #112	@ (adr r5, 800e650 <atan+0x300>)
 800e5e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e5e4:	e6d3      	b.n	800e38e <atan+0x3e>
 800e5e6:	bf00      	nop
 800e5e8:	54442d18 	.word	0x54442d18
 800e5ec:	3ff921fb 	.word	0x3ff921fb
 800e5f0:	8800759c 	.word	0x8800759c
 800e5f4:	7e37e43c 	.word	0x7e37e43c
 800e5f8:	e322da11 	.word	0xe322da11
 800e5fc:	3f90ad3a 	.word	0x3f90ad3a
 800e600:	24760deb 	.word	0x24760deb
 800e604:	3fa97b4b 	.word	0x3fa97b4b
 800e608:	a0d03d51 	.word	0xa0d03d51
 800e60c:	3fb10d66 	.word	0x3fb10d66
 800e610:	c54c206e 	.word	0xc54c206e
 800e614:	3fb745cd 	.word	0x3fb745cd
 800e618:	920083ff 	.word	0x920083ff
 800e61c:	3fc24924 	.word	0x3fc24924
 800e620:	5555550d 	.word	0x5555550d
 800e624:	3fd55555 	.word	0x3fd55555
 800e628:	2c6a6c2f 	.word	0x2c6a6c2f
 800e62c:	bfa2b444 	.word	0xbfa2b444
 800e630:	52defd9a 	.word	0x52defd9a
 800e634:	3fadde2d 	.word	0x3fadde2d
 800e638:	af749a6d 	.word	0xaf749a6d
 800e63c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e640:	fe231671 	.word	0xfe231671
 800e644:	3fbc71c6 	.word	0x3fbc71c6
 800e648:	9998ebc4 	.word	0x9998ebc4
 800e64c:	3fc99999 	.word	0x3fc99999
 800e650:	54442d18 	.word	0x54442d18
 800e654:	bff921fb 	.word	0xbff921fb
 800e658:	440fffff 	.word	0x440fffff
 800e65c:	7ff00000 	.word	0x7ff00000
 800e660:	3fdbffff 	.word	0x3fdbffff
 800e664:	3ff00000 	.word	0x3ff00000
 800e668:	3ff2ffff 	.word	0x3ff2ffff
 800e66c:	40038000 	.word	0x40038000
 800e670:	3ff80000 	.word	0x3ff80000
 800e674:	bff00000 	.word	0xbff00000
 800e678:	0800f4b0 	.word	0x0800f4b0
 800e67c:	0800f4d0 	.word	0x0800f4d0

0800e680 <__kernel_cosf>:
 800e680:	ee10 3a10 	vmov	r3, s0
 800e684:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e688:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e68c:	eef0 6a40 	vmov.f32	s13, s0
 800e690:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e694:	d204      	bcs.n	800e6a0 <__kernel_cosf+0x20>
 800e696:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800e69a:	ee17 2a90 	vmov	r2, s15
 800e69e:	b342      	cbz	r2, 800e6f2 <__kernel_cosf+0x72>
 800e6a0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e6a4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800e710 <__kernel_cosf+0x90>
 800e6a8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800e714 <__kernel_cosf+0x94>
 800e6ac:	4a1a      	ldr	r2, [pc, #104]	@ (800e718 <__kernel_cosf+0x98>)
 800e6ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e71c <__kernel_cosf+0x9c>
 800e6b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e6bc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800e720 <__kernel_cosf+0xa0>
 800e6c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e6c4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800e724 <__kernel_cosf+0xa4>
 800e6c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e6cc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800e728 <__kernel_cosf+0xa8>
 800e6d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e6d4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800e6d8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e6dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e6e0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800e6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6e8:	d804      	bhi.n	800e6f4 <__kernel_cosf+0x74>
 800e6ea:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e6ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e6f2:	4770      	bx	lr
 800e6f4:	4a0d      	ldr	r2, [pc, #52]	@ (800e72c <__kernel_cosf+0xac>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	bf9a      	itte	ls
 800e6fa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800e6fe:	ee07 3a10 	vmovls	s14, r3
 800e702:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800e706:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e70a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e70e:	e7ec      	b.n	800e6ea <__kernel_cosf+0x6a>
 800e710:	ad47d74e 	.word	0xad47d74e
 800e714:	310f74f6 	.word	0x310f74f6
 800e718:	3e999999 	.word	0x3e999999
 800e71c:	b493f27c 	.word	0xb493f27c
 800e720:	37d00d01 	.word	0x37d00d01
 800e724:	bab60b61 	.word	0xbab60b61
 800e728:	3d2aaaab 	.word	0x3d2aaaab
 800e72c:	3f480000 	.word	0x3f480000

0800e730 <__kernel_sinf>:
 800e730:	ee10 3a10 	vmov	r3, s0
 800e734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e738:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e73c:	d204      	bcs.n	800e748 <__kernel_sinf+0x18>
 800e73e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e742:	ee17 3a90 	vmov	r3, s15
 800e746:	b35b      	cbz	r3, 800e7a0 <__kernel_sinf+0x70>
 800e748:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e74c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e7a4 <__kernel_sinf+0x74>
 800e750:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800e7a8 <__kernel_sinf+0x78>
 800e754:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e758:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800e7ac <__kernel_sinf+0x7c>
 800e75c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e760:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800e7b0 <__kernel_sinf+0x80>
 800e764:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e768:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800e7b4 <__kernel_sinf+0x84>
 800e76c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e770:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e774:	b930      	cbnz	r0, 800e784 <__kernel_sinf+0x54>
 800e776:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800e7b8 <__kernel_sinf+0x88>
 800e77a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e77e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e782:	4770      	bx	lr
 800e784:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e788:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e78c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e790:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e794:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800e7bc <__kernel_sinf+0x8c>
 800e798:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e79c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	2f2ec9d3 	.word	0x2f2ec9d3
 800e7a8:	b2d72f34 	.word	0xb2d72f34
 800e7ac:	3638ef1b 	.word	0x3638ef1b
 800e7b0:	b9500d01 	.word	0xb9500d01
 800e7b4:	3c088889 	.word	0x3c088889
 800e7b8:	be2aaaab 	.word	0xbe2aaaab
 800e7bc:	3e2aaaab 	.word	0x3e2aaaab

0800e7c0 <__ieee754_rem_pio2f>:
 800e7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7c2:	ee10 6a10 	vmov	r6, s0
 800e7c6:	4b88      	ldr	r3, [pc, #544]	@ (800e9e8 <__ieee754_rem_pio2f+0x228>)
 800e7c8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800e7cc:	429d      	cmp	r5, r3
 800e7ce:	b087      	sub	sp, #28
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	d805      	bhi.n	800e7e0 <__ieee754_rem_pio2f+0x20>
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	ed80 0a00 	vstr	s0, [r0]
 800e7da:	6043      	str	r3, [r0, #4]
 800e7dc:	2000      	movs	r0, #0
 800e7de:	e022      	b.n	800e826 <__ieee754_rem_pio2f+0x66>
 800e7e0:	4b82      	ldr	r3, [pc, #520]	@ (800e9ec <__ieee754_rem_pio2f+0x22c>)
 800e7e2:	429d      	cmp	r5, r3
 800e7e4:	d83a      	bhi.n	800e85c <__ieee754_rem_pio2f+0x9c>
 800e7e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e7ea:	2e00      	cmp	r6, #0
 800e7ec:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800e9f0 <__ieee754_rem_pio2f+0x230>
 800e7f0:	4a80      	ldr	r2, [pc, #512]	@ (800e9f4 <__ieee754_rem_pio2f+0x234>)
 800e7f2:	f023 030f 	bic.w	r3, r3, #15
 800e7f6:	dd18      	ble.n	800e82a <__ieee754_rem_pio2f+0x6a>
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e7fe:	bf09      	itett	eq
 800e800:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800e9f8 <__ieee754_rem_pio2f+0x238>
 800e804:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800e9fc <__ieee754_rem_pio2f+0x23c>
 800e808:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800ea00 <__ieee754_rem_pio2f+0x240>
 800e80c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e810:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800e814:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e818:	ed80 7a00 	vstr	s14, [r0]
 800e81c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e820:	edc0 7a01 	vstr	s15, [r0, #4]
 800e824:	2001      	movs	r0, #1
 800e826:	b007      	add	sp, #28
 800e828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e82a:	4293      	cmp	r3, r2
 800e82c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e830:	bf09      	itett	eq
 800e832:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800e9f8 <__ieee754_rem_pio2f+0x238>
 800e836:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800e9fc <__ieee754_rem_pio2f+0x23c>
 800e83a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800ea00 <__ieee754_rem_pio2f+0x240>
 800e83e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e842:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e846:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e84a:	ed80 7a00 	vstr	s14, [r0]
 800e84e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e852:	edc0 7a01 	vstr	s15, [r0, #4]
 800e856:	f04f 30ff 	mov.w	r0, #4294967295
 800e85a:	e7e4      	b.n	800e826 <__ieee754_rem_pio2f+0x66>
 800e85c:	4b69      	ldr	r3, [pc, #420]	@ (800ea04 <__ieee754_rem_pio2f+0x244>)
 800e85e:	429d      	cmp	r5, r3
 800e860:	d873      	bhi.n	800e94a <__ieee754_rem_pio2f+0x18a>
 800e862:	f7ff f975 	bl	800db50 <fabsf>
 800e866:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800ea08 <__ieee754_rem_pio2f+0x248>
 800e86a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e86e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e87a:	ee17 0a90 	vmov	r0, s15
 800e87e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e9f0 <__ieee754_rem_pio2f+0x230>
 800e882:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e886:	281f      	cmp	r0, #31
 800e888:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e9fc <__ieee754_rem_pio2f+0x23c>
 800e88c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e890:	eeb1 6a47 	vneg.f32	s12, s14
 800e894:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e898:	ee16 1a90 	vmov	r1, s13
 800e89c:	dc09      	bgt.n	800e8b2 <__ieee754_rem_pio2f+0xf2>
 800e89e:	4a5b      	ldr	r2, [pc, #364]	@ (800ea0c <__ieee754_rem_pio2f+0x24c>)
 800e8a0:	1e47      	subs	r7, r0, #1
 800e8a2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e8a6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800e8aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d107      	bne.n	800e8c2 <__ieee754_rem_pio2f+0x102>
 800e8b2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800e8b6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800e8ba:	2a08      	cmp	r2, #8
 800e8bc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e8c0:	dc14      	bgt.n	800e8ec <__ieee754_rem_pio2f+0x12c>
 800e8c2:	6021      	str	r1, [r4, #0]
 800e8c4:	ed94 7a00 	vldr	s14, [r4]
 800e8c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e8cc:	2e00      	cmp	r6, #0
 800e8ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e8d2:	ed84 0a01 	vstr	s0, [r4, #4]
 800e8d6:	daa6      	bge.n	800e826 <__ieee754_rem_pio2f+0x66>
 800e8d8:	eeb1 7a47 	vneg.f32	s14, s14
 800e8dc:	eeb1 0a40 	vneg.f32	s0, s0
 800e8e0:	ed84 7a00 	vstr	s14, [r4]
 800e8e4:	ed84 0a01 	vstr	s0, [r4, #4]
 800e8e8:	4240      	negs	r0, r0
 800e8ea:	e79c      	b.n	800e826 <__ieee754_rem_pio2f+0x66>
 800e8ec:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800e9f8 <__ieee754_rem_pio2f+0x238>
 800e8f0:	eef0 6a40 	vmov.f32	s13, s0
 800e8f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e8f8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e8fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e900:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ea00 <__ieee754_rem_pio2f+0x240>
 800e904:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e908:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e90c:	ee15 2a90 	vmov	r2, s11
 800e910:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e914:	1a5b      	subs	r3, r3, r1
 800e916:	2b19      	cmp	r3, #25
 800e918:	dc04      	bgt.n	800e924 <__ieee754_rem_pio2f+0x164>
 800e91a:	edc4 5a00 	vstr	s11, [r4]
 800e91e:	eeb0 0a66 	vmov.f32	s0, s13
 800e922:	e7cf      	b.n	800e8c4 <__ieee754_rem_pio2f+0x104>
 800e924:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800ea10 <__ieee754_rem_pio2f+0x250>
 800e928:	eeb0 0a66 	vmov.f32	s0, s13
 800e92c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e930:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e934:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800ea14 <__ieee754_rem_pio2f+0x254>
 800e938:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e93c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e940:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e944:	ed84 7a00 	vstr	s14, [r4]
 800e948:	e7bc      	b.n	800e8c4 <__ieee754_rem_pio2f+0x104>
 800e94a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e94e:	d306      	bcc.n	800e95e <__ieee754_rem_pio2f+0x19e>
 800e950:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e954:	edc0 7a01 	vstr	s15, [r0, #4]
 800e958:	edc0 7a00 	vstr	s15, [r0]
 800e95c:	e73e      	b.n	800e7dc <__ieee754_rem_pio2f+0x1c>
 800e95e:	15ea      	asrs	r2, r5, #23
 800e960:	3a86      	subs	r2, #134	@ 0x86
 800e962:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e966:	ee07 3a90 	vmov	s15, r3
 800e96a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e96e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800ea18 <__ieee754_rem_pio2f+0x258>
 800e972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e97a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e97e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e982:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e986:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e98a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e98e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e992:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e996:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e99e:	edcd 7a05 	vstr	s15, [sp, #20]
 800e9a2:	d11e      	bne.n	800e9e2 <__ieee754_rem_pio2f+0x222>
 800e9a4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ac:	bf0c      	ite	eq
 800e9ae:	2301      	moveq	r3, #1
 800e9b0:	2302      	movne	r3, #2
 800e9b2:	491a      	ldr	r1, [pc, #104]	@ (800ea1c <__ieee754_rem_pio2f+0x25c>)
 800e9b4:	9101      	str	r1, [sp, #4]
 800e9b6:	2102      	movs	r1, #2
 800e9b8:	9100      	str	r1, [sp, #0]
 800e9ba:	a803      	add	r0, sp, #12
 800e9bc:	4621      	mov	r1, r4
 800e9be:	f000 f895 	bl	800eaec <__kernel_rem_pio2f>
 800e9c2:	2e00      	cmp	r6, #0
 800e9c4:	f6bf af2f 	bge.w	800e826 <__ieee754_rem_pio2f+0x66>
 800e9c8:	edd4 7a00 	vldr	s15, [r4]
 800e9cc:	eef1 7a67 	vneg.f32	s15, s15
 800e9d0:	edc4 7a00 	vstr	s15, [r4]
 800e9d4:	edd4 7a01 	vldr	s15, [r4, #4]
 800e9d8:	eef1 7a67 	vneg.f32	s15, s15
 800e9dc:	edc4 7a01 	vstr	s15, [r4, #4]
 800e9e0:	e782      	b.n	800e8e8 <__ieee754_rem_pio2f+0x128>
 800e9e2:	2303      	movs	r3, #3
 800e9e4:	e7e5      	b.n	800e9b2 <__ieee754_rem_pio2f+0x1f2>
 800e9e6:	bf00      	nop
 800e9e8:	3f490fd8 	.word	0x3f490fd8
 800e9ec:	4016cbe3 	.word	0x4016cbe3
 800e9f0:	3fc90f80 	.word	0x3fc90f80
 800e9f4:	3fc90fd0 	.word	0x3fc90fd0
 800e9f8:	37354400 	.word	0x37354400
 800e9fc:	37354443 	.word	0x37354443
 800ea00:	2e85a308 	.word	0x2e85a308
 800ea04:	43490f80 	.word	0x43490f80
 800ea08:	3f22f984 	.word	0x3f22f984
 800ea0c:	0800f4f0 	.word	0x0800f4f0
 800ea10:	2e85a300 	.word	0x2e85a300
 800ea14:	248d3132 	.word	0x248d3132
 800ea18:	43800000 	.word	0x43800000
 800ea1c:	0800f570 	.word	0x0800f570

0800ea20 <scalbnf>:
 800ea20:	ee10 3a10 	vmov	r3, s0
 800ea24:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ea28:	d02b      	beq.n	800ea82 <scalbnf+0x62>
 800ea2a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ea2e:	d302      	bcc.n	800ea36 <scalbnf+0x16>
 800ea30:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ea34:	4770      	bx	lr
 800ea36:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ea3a:	d123      	bne.n	800ea84 <scalbnf+0x64>
 800ea3c:	4b24      	ldr	r3, [pc, #144]	@ (800ead0 <scalbnf+0xb0>)
 800ea3e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ead4 <scalbnf+0xb4>
 800ea42:	4298      	cmp	r0, r3
 800ea44:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea48:	db17      	blt.n	800ea7a <scalbnf+0x5a>
 800ea4a:	ee10 3a10 	vmov	r3, s0
 800ea4e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ea52:	3a19      	subs	r2, #25
 800ea54:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ea58:	4288      	cmp	r0, r1
 800ea5a:	dd15      	ble.n	800ea88 <scalbnf+0x68>
 800ea5c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ead8 <scalbnf+0xb8>
 800ea60:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800eadc <scalbnf+0xbc>
 800ea64:	ee10 3a10 	vmov	r3, s0
 800ea68:	eeb0 7a67 	vmov.f32	s14, s15
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	bfb8      	it	lt
 800ea70:	eef0 7a66 	vmovlt.f32	s15, s13
 800ea74:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ea78:	4770      	bx	lr
 800ea7a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800eae0 <scalbnf+0xc0>
 800ea7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea82:	4770      	bx	lr
 800ea84:	0dd2      	lsrs	r2, r2, #23
 800ea86:	e7e5      	b.n	800ea54 <scalbnf+0x34>
 800ea88:	4410      	add	r0, r2
 800ea8a:	28fe      	cmp	r0, #254	@ 0xfe
 800ea8c:	dce6      	bgt.n	800ea5c <scalbnf+0x3c>
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	dd06      	ble.n	800eaa0 <scalbnf+0x80>
 800ea92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea96:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ea9a:	ee00 3a10 	vmov	s0, r3
 800ea9e:	4770      	bx	lr
 800eaa0:	f110 0f16 	cmn.w	r0, #22
 800eaa4:	da09      	bge.n	800eaba <scalbnf+0x9a>
 800eaa6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800eae0 <scalbnf+0xc0>
 800eaaa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800eae4 <scalbnf+0xc4>
 800eaae:	ee10 3a10 	vmov	r3, s0
 800eab2:	eeb0 7a67 	vmov.f32	s14, s15
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	e7d9      	b.n	800ea6e <scalbnf+0x4e>
 800eaba:	3019      	adds	r0, #25
 800eabc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800eac0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800eac4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800eae8 <scalbnf+0xc8>
 800eac8:	ee07 3a90 	vmov	s15, r3
 800eacc:	e7d7      	b.n	800ea7e <scalbnf+0x5e>
 800eace:	bf00      	nop
 800ead0:	ffff3cb0 	.word	0xffff3cb0
 800ead4:	4c000000 	.word	0x4c000000
 800ead8:	7149f2ca 	.word	0x7149f2ca
 800eadc:	f149f2ca 	.word	0xf149f2ca
 800eae0:	0da24260 	.word	0x0da24260
 800eae4:	8da24260 	.word	0x8da24260
 800eae8:	33000000 	.word	0x33000000

0800eaec <__kernel_rem_pio2f>:
 800eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	ed2d 8b04 	vpush	{d8-d9}
 800eaf4:	b0d9      	sub	sp, #356	@ 0x164
 800eaf6:	4690      	mov	r8, r2
 800eaf8:	9001      	str	r0, [sp, #4]
 800eafa:	4ab9      	ldr	r2, [pc, #740]	@ (800ede0 <__kernel_rem_pio2f+0x2f4>)
 800eafc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800eafe:	f118 0f04 	cmn.w	r8, #4
 800eb02:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800eb06:	460f      	mov	r7, r1
 800eb08:	f103 3bff 	add.w	fp, r3, #4294967295
 800eb0c:	db27      	blt.n	800eb5e <__kernel_rem_pio2f+0x72>
 800eb0e:	f1b8 0203 	subs.w	r2, r8, #3
 800eb12:	bf48      	it	mi
 800eb14:	f108 0204 	addmi.w	r2, r8, #4
 800eb18:	10d2      	asrs	r2, r2, #3
 800eb1a:	1c55      	adds	r5, r2, #1
 800eb1c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800eb1e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800edf0 <__kernel_rem_pio2f+0x304>
 800eb22:	00e8      	lsls	r0, r5, #3
 800eb24:	eba2 060b 	sub.w	r6, r2, fp
 800eb28:	9002      	str	r0, [sp, #8]
 800eb2a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800eb2e:	eb0a 0c0b 	add.w	ip, sl, fp
 800eb32:	ac1c      	add	r4, sp, #112	@ 0x70
 800eb34:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800eb38:	2000      	movs	r0, #0
 800eb3a:	4560      	cmp	r0, ip
 800eb3c:	dd11      	ble.n	800eb62 <__kernel_rem_pio2f+0x76>
 800eb3e:	a91c      	add	r1, sp, #112	@ 0x70
 800eb40:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800eb44:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800eb48:	f04f 0c00 	mov.w	ip, #0
 800eb4c:	45d4      	cmp	ip, sl
 800eb4e:	dc27      	bgt.n	800eba0 <__kernel_rem_pio2f+0xb4>
 800eb50:	f8dd e004 	ldr.w	lr, [sp, #4]
 800eb54:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800edf0 <__kernel_rem_pio2f+0x304>
 800eb58:	4606      	mov	r6, r0
 800eb5a:	2400      	movs	r4, #0
 800eb5c:	e016      	b.n	800eb8c <__kernel_rem_pio2f+0xa0>
 800eb5e:	2200      	movs	r2, #0
 800eb60:	e7db      	b.n	800eb1a <__kernel_rem_pio2f+0x2e>
 800eb62:	42c6      	cmn	r6, r0
 800eb64:	bf5d      	ittte	pl
 800eb66:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800eb6a:	ee07 1a90 	vmovpl	s15, r1
 800eb6e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800eb72:	eef0 7a47 	vmovmi.f32	s15, s14
 800eb76:	ece4 7a01 	vstmia	r4!, {s15}
 800eb7a:	3001      	adds	r0, #1
 800eb7c:	e7dd      	b.n	800eb3a <__kernel_rem_pio2f+0x4e>
 800eb7e:	ecfe 6a01 	vldmia	lr!, {s13}
 800eb82:	ed96 7a00 	vldr	s14, [r6]
 800eb86:	eee6 7a87 	vfma.f32	s15, s13, s14
 800eb8a:	3401      	adds	r4, #1
 800eb8c:	455c      	cmp	r4, fp
 800eb8e:	f1a6 0604 	sub.w	r6, r6, #4
 800eb92:	ddf4      	ble.n	800eb7e <__kernel_rem_pio2f+0x92>
 800eb94:	ece9 7a01 	vstmia	r9!, {s15}
 800eb98:	f10c 0c01 	add.w	ip, ip, #1
 800eb9c:	3004      	adds	r0, #4
 800eb9e:	e7d5      	b.n	800eb4c <__kernel_rem_pio2f+0x60>
 800eba0:	a908      	add	r1, sp, #32
 800eba2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eba6:	9104      	str	r1, [sp, #16]
 800eba8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ebaa:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800edec <__kernel_rem_pio2f+0x300>
 800ebae:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800ede8 <__kernel_rem_pio2f+0x2fc>
 800ebb2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ebb6:	9203      	str	r2, [sp, #12]
 800ebb8:	4654      	mov	r4, sl
 800ebba:	00a2      	lsls	r2, r4, #2
 800ebbc:	9205      	str	r2, [sp, #20]
 800ebbe:	aa58      	add	r2, sp, #352	@ 0x160
 800ebc0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ebc4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800ebc8:	a944      	add	r1, sp, #272	@ 0x110
 800ebca:	aa08      	add	r2, sp, #32
 800ebcc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800ebd0:	4694      	mov	ip, r2
 800ebd2:	4626      	mov	r6, r4
 800ebd4:	2e00      	cmp	r6, #0
 800ebd6:	f1a0 0004 	sub.w	r0, r0, #4
 800ebda:	dc4c      	bgt.n	800ec76 <__kernel_rem_pio2f+0x18a>
 800ebdc:	4628      	mov	r0, r5
 800ebde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ebe2:	f7ff ff1d 	bl	800ea20 <scalbnf>
 800ebe6:	eeb0 8a40 	vmov.f32	s16, s0
 800ebea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800ebee:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ebf2:	f000 f9ed 	bl	800efd0 <floorf>
 800ebf6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800ebfa:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ebfe:	2d00      	cmp	r5, #0
 800ec00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec04:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ec08:	ee17 9a90 	vmov	r9, s15
 800ec0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec10:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ec14:	dd41      	ble.n	800ec9a <__kernel_rem_pio2f+0x1ae>
 800ec16:	f104 3cff 	add.w	ip, r4, #4294967295
 800ec1a:	a908      	add	r1, sp, #32
 800ec1c:	f1c5 0e08 	rsb	lr, r5, #8
 800ec20:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800ec24:	fa46 f00e 	asr.w	r0, r6, lr
 800ec28:	4481      	add	r9, r0
 800ec2a:	fa00 f00e 	lsl.w	r0, r0, lr
 800ec2e:	1a36      	subs	r6, r6, r0
 800ec30:	f1c5 0007 	rsb	r0, r5, #7
 800ec34:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800ec38:	4106      	asrs	r6, r0
 800ec3a:	2e00      	cmp	r6, #0
 800ec3c:	dd3c      	ble.n	800ecb8 <__kernel_rem_pio2f+0x1cc>
 800ec3e:	f04f 0e00 	mov.w	lr, #0
 800ec42:	f109 0901 	add.w	r9, r9, #1
 800ec46:	4670      	mov	r0, lr
 800ec48:	4574      	cmp	r4, lr
 800ec4a:	dc68      	bgt.n	800ed1e <__kernel_rem_pio2f+0x232>
 800ec4c:	2d00      	cmp	r5, #0
 800ec4e:	dd03      	ble.n	800ec58 <__kernel_rem_pio2f+0x16c>
 800ec50:	2d01      	cmp	r5, #1
 800ec52:	d074      	beq.n	800ed3e <__kernel_rem_pio2f+0x252>
 800ec54:	2d02      	cmp	r5, #2
 800ec56:	d07d      	beq.n	800ed54 <__kernel_rem_pio2f+0x268>
 800ec58:	2e02      	cmp	r6, #2
 800ec5a:	d12d      	bne.n	800ecb8 <__kernel_rem_pio2f+0x1cc>
 800ec5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ec60:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ec64:	b340      	cbz	r0, 800ecb8 <__kernel_rem_pio2f+0x1cc>
 800ec66:	4628      	mov	r0, r5
 800ec68:	9306      	str	r3, [sp, #24]
 800ec6a:	f7ff fed9 	bl	800ea20 <scalbnf>
 800ec6e:	9b06      	ldr	r3, [sp, #24]
 800ec70:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ec74:	e020      	b.n	800ecb8 <__kernel_rem_pio2f+0x1cc>
 800ec76:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ec7a:	3e01      	subs	r6, #1
 800ec7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec84:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ec88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ec8c:	ecac 0a01 	vstmia	ip!, {s0}
 800ec90:	ed90 0a00 	vldr	s0, [r0]
 800ec94:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ec98:	e79c      	b.n	800ebd4 <__kernel_rem_pio2f+0xe8>
 800ec9a:	d105      	bne.n	800eca8 <__kernel_rem_pio2f+0x1bc>
 800ec9c:	1e60      	subs	r0, r4, #1
 800ec9e:	a908      	add	r1, sp, #32
 800eca0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800eca4:	11f6      	asrs	r6, r6, #7
 800eca6:	e7c8      	b.n	800ec3a <__kernel_rem_pio2f+0x14e>
 800eca8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ecac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ecb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb4:	da31      	bge.n	800ed1a <__kernel_rem_pio2f+0x22e>
 800ecb6:	2600      	movs	r6, #0
 800ecb8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ecbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc0:	f040 8098 	bne.w	800edf4 <__kernel_rem_pio2f+0x308>
 800ecc4:	1e60      	subs	r0, r4, #1
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	4550      	cmp	r0, sl
 800ecca:	da4b      	bge.n	800ed64 <__kernel_rem_pio2f+0x278>
 800eccc:	2a00      	cmp	r2, #0
 800ecce:	d065      	beq.n	800ed9c <__kernel_rem_pio2f+0x2b0>
 800ecd0:	3c01      	subs	r4, #1
 800ecd2:	ab08      	add	r3, sp, #32
 800ecd4:	3d08      	subs	r5, #8
 800ecd6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d0f8      	beq.n	800ecd0 <__kernel_rem_pio2f+0x1e4>
 800ecde:	4628      	mov	r0, r5
 800ece0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ece4:	f7ff fe9c 	bl	800ea20 <scalbnf>
 800ece8:	1c63      	adds	r3, r4, #1
 800ecea:	aa44      	add	r2, sp, #272	@ 0x110
 800ecec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800edec <__kernel_rem_pio2f+0x300>
 800ecf0:	0099      	lsls	r1, r3, #2
 800ecf2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ecf6:	4623      	mov	r3, r4
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f280 80a9 	bge.w	800ee50 <__kernel_rem_pio2f+0x364>
 800ecfe:	4623      	mov	r3, r4
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f2c0 80c7 	blt.w	800ee94 <__kernel_rem_pio2f+0x3a8>
 800ed06:	aa44      	add	r2, sp, #272	@ 0x110
 800ed08:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ed0c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ede4 <__kernel_rem_pio2f+0x2f8>
 800ed10:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800edf0 <__kernel_rem_pio2f+0x304>
 800ed14:	2000      	movs	r0, #0
 800ed16:	1ae2      	subs	r2, r4, r3
 800ed18:	e0b1      	b.n	800ee7e <__kernel_rem_pio2f+0x392>
 800ed1a:	2602      	movs	r6, #2
 800ed1c:	e78f      	b.n	800ec3e <__kernel_rem_pio2f+0x152>
 800ed1e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ed22:	b948      	cbnz	r0, 800ed38 <__kernel_rem_pio2f+0x24c>
 800ed24:	b121      	cbz	r1, 800ed30 <__kernel_rem_pio2f+0x244>
 800ed26:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800ed2a:	f842 1c04 	str.w	r1, [r2, #-4]
 800ed2e:	2101      	movs	r1, #1
 800ed30:	f10e 0e01 	add.w	lr, lr, #1
 800ed34:	4608      	mov	r0, r1
 800ed36:	e787      	b.n	800ec48 <__kernel_rem_pio2f+0x15c>
 800ed38:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800ed3c:	e7f5      	b.n	800ed2a <__kernel_rem_pio2f+0x23e>
 800ed3e:	f104 3cff 	add.w	ip, r4, #4294967295
 800ed42:	aa08      	add	r2, sp, #32
 800ed44:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ed48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ed4c:	a908      	add	r1, sp, #32
 800ed4e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ed52:	e781      	b.n	800ec58 <__kernel_rem_pio2f+0x16c>
 800ed54:	f104 3cff 	add.w	ip, r4, #4294967295
 800ed58:	aa08      	add	r2, sp, #32
 800ed5a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ed5e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ed62:	e7f3      	b.n	800ed4c <__kernel_rem_pio2f+0x260>
 800ed64:	a908      	add	r1, sp, #32
 800ed66:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ed6a:	3801      	subs	r0, #1
 800ed6c:	430a      	orrs	r2, r1
 800ed6e:	e7ab      	b.n	800ecc8 <__kernel_rem_pio2f+0x1dc>
 800ed70:	3201      	adds	r2, #1
 800ed72:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ed76:	2e00      	cmp	r6, #0
 800ed78:	d0fa      	beq.n	800ed70 <__kernel_rem_pio2f+0x284>
 800ed7a:	9905      	ldr	r1, [sp, #20]
 800ed7c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ed80:	eb0d 0001 	add.w	r0, sp, r1
 800ed84:	18e6      	adds	r6, r4, r3
 800ed86:	a91c      	add	r1, sp, #112	@ 0x70
 800ed88:	f104 0c01 	add.w	ip, r4, #1
 800ed8c:	384c      	subs	r0, #76	@ 0x4c
 800ed8e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ed92:	4422      	add	r2, r4
 800ed94:	4562      	cmp	r2, ip
 800ed96:	da04      	bge.n	800eda2 <__kernel_rem_pio2f+0x2b6>
 800ed98:	4614      	mov	r4, r2
 800ed9a:	e70e      	b.n	800ebba <__kernel_rem_pio2f+0xce>
 800ed9c:	9804      	ldr	r0, [sp, #16]
 800ed9e:	2201      	movs	r2, #1
 800eda0:	e7e7      	b.n	800ed72 <__kernel_rem_pio2f+0x286>
 800eda2:	9903      	ldr	r1, [sp, #12]
 800eda4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800eda8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800edac:	9105      	str	r1, [sp, #20]
 800edae:	ee07 1a90 	vmov	s15, r1
 800edb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edb6:	2400      	movs	r4, #0
 800edb8:	ece6 7a01 	vstmia	r6!, {s15}
 800edbc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800edf0 <__kernel_rem_pio2f+0x304>
 800edc0:	46b1      	mov	r9, r6
 800edc2:	455c      	cmp	r4, fp
 800edc4:	dd04      	ble.n	800edd0 <__kernel_rem_pio2f+0x2e4>
 800edc6:	ece0 7a01 	vstmia	r0!, {s15}
 800edca:	f10c 0c01 	add.w	ip, ip, #1
 800edce:	e7e1      	b.n	800ed94 <__kernel_rem_pio2f+0x2a8>
 800edd0:	ecfe 6a01 	vldmia	lr!, {s13}
 800edd4:	ed39 7a01 	vldmdb	r9!, {s14}
 800edd8:	3401      	adds	r4, #1
 800edda:	eee6 7a87 	vfma.f32	s15, s13, s14
 800edde:	e7f0      	b.n	800edc2 <__kernel_rem_pio2f+0x2d6>
 800ede0:	0800f8b4 	.word	0x0800f8b4
 800ede4:	0800f888 	.word	0x0800f888
 800ede8:	43800000 	.word	0x43800000
 800edec:	3b800000 	.word	0x3b800000
 800edf0:	00000000 	.word	0x00000000
 800edf4:	9b02      	ldr	r3, [sp, #8]
 800edf6:	eeb0 0a48 	vmov.f32	s0, s16
 800edfa:	eba3 0008 	sub.w	r0, r3, r8
 800edfe:	f7ff fe0f 	bl	800ea20 <scalbnf>
 800ee02:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ede8 <__kernel_rem_pio2f+0x2fc>
 800ee06:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ee0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0e:	db19      	blt.n	800ee44 <__kernel_rem_pio2f+0x358>
 800ee10:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800edec <__kernel_rem_pio2f+0x300>
 800ee14:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ee18:	aa08      	add	r2, sp, #32
 800ee1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee1e:	3508      	adds	r5, #8
 800ee20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee24:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ee28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ee30:	ee10 3a10 	vmov	r3, s0
 800ee34:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ee38:	ee17 3a90 	vmov	r3, s15
 800ee3c:	3401      	adds	r4, #1
 800ee3e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ee42:	e74c      	b.n	800ecde <__kernel_rem_pio2f+0x1f2>
 800ee44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ee48:	aa08      	add	r2, sp, #32
 800ee4a:	ee10 3a10 	vmov	r3, s0
 800ee4e:	e7f6      	b.n	800ee3e <__kernel_rem_pio2f+0x352>
 800ee50:	a808      	add	r0, sp, #32
 800ee52:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ee56:	9001      	str	r0, [sp, #4]
 800ee58:	ee07 0a90 	vmov	s15, r0
 800ee5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee60:	3b01      	subs	r3, #1
 800ee62:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ee66:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ee6a:	ed62 7a01 	vstmdb	r2!, {s15}
 800ee6e:	e743      	b.n	800ecf8 <__kernel_rem_pio2f+0x20c>
 800ee70:	ecfc 6a01 	vldmia	ip!, {s13}
 800ee74:	ecb5 7a01 	vldmia	r5!, {s14}
 800ee78:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ee7c:	3001      	adds	r0, #1
 800ee7e:	4550      	cmp	r0, sl
 800ee80:	dc01      	bgt.n	800ee86 <__kernel_rem_pio2f+0x39a>
 800ee82:	4282      	cmp	r2, r0
 800ee84:	daf4      	bge.n	800ee70 <__kernel_rem_pio2f+0x384>
 800ee86:	a858      	add	r0, sp, #352	@ 0x160
 800ee88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ee8c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ee90:	3b01      	subs	r3, #1
 800ee92:	e735      	b.n	800ed00 <__kernel_rem_pio2f+0x214>
 800ee94:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	dc09      	bgt.n	800eeae <__kernel_rem_pio2f+0x3c2>
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	dc2b      	bgt.n	800eef6 <__kernel_rem_pio2f+0x40a>
 800ee9e:	d044      	beq.n	800ef2a <__kernel_rem_pio2f+0x43e>
 800eea0:	f009 0007 	and.w	r0, r9, #7
 800eea4:	b059      	add	sp, #356	@ 0x164
 800eea6:	ecbd 8b04 	vpop	{d8-d9}
 800eeaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800eeb0:	2b03      	cmp	r3, #3
 800eeb2:	d1f5      	bne.n	800eea0 <__kernel_rem_pio2f+0x3b4>
 800eeb4:	aa30      	add	r2, sp, #192	@ 0xc0
 800eeb6:	1f0b      	subs	r3, r1, #4
 800eeb8:	4413      	add	r3, r2
 800eeba:	461a      	mov	r2, r3
 800eebc:	4620      	mov	r0, r4
 800eebe:	2800      	cmp	r0, #0
 800eec0:	f1a2 0204 	sub.w	r2, r2, #4
 800eec4:	dc52      	bgt.n	800ef6c <__kernel_rem_pio2f+0x480>
 800eec6:	4622      	mov	r2, r4
 800eec8:	2a01      	cmp	r2, #1
 800eeca:	f1a3 0304 	sub.w	r3, r3, #4
 800eece:	dc5d      	bgt.n	800ef8c <__kernel_rem_pio2f+0x4a0>
 800eed0:	ab30      	add	r3, sp, #192	@ 0xc0
 800eed2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800edf0 <__kernel_rem_pio2f+0x304>
 800eed6:	440b      	add	r3, r1
 800eed8:	2c01      	cmp	r4, #1
 800eeda:	dc67      	bgt.n	800efac <__kernel_rem_pio2f+0x4c0>
 800eedc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800eee0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800eee4:	2e00      	cmp	r6, #0
 800eee6:	d167      	bne.n	800efb8 <__kernel_rem_pio2f+0x4cc>
 800eee8:	edc7 6a00 	vstr	s13, [r7]
 800eeec:	ed87 7a01 	vstr	s14, [r7, #4]
 800eef0:	edc7 7a02 	vstr	s15, [r7, #8]
 800eef4:	e7d4      	b.n	800eea0 <__kernel_rem_pio2f+0x3b4>
 800eef6:	ab30      	add	r3, sp, #192	@ 0xc0
 800eef8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800edf0 <__kernel_rem_pio2f+0x304>
 800eefc:	440b      	add	r3, r1
 800eefe:	4622      	mov	r2, r4
 800ef00:	2a00      	cmp	r2, #0
 800ef02:	da24      	bge.n	800ef4e <__kernel_rem_pio2f+0x462>
 800ef04:	b34e      	cbz	r6, 800ef5a <__kernel_rem_pio2f+0x46e>
 800ef06:	eef1 7a47 	vneg.f32	s15, s14
 800ef0a:	edc7 7a00 	vstr	s15, [r7]
 800ef0e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ef12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef16:	aa31      	add	r2, sp, #196	@ 0xc4
 800ef18:	2301      	movs	r3, #1
 800ef1a:	429c      	cmp	r4, r3
 800ef1c:	da20      	bge.n	800ef60 <__kernel_rem_pio2f+0x474>
 800ef1e:	b10e      	cbz	r6, 800ef24 <__kernel_rem_pio2f+0x438>
 800ef20:	eef1 7a67 	vneg.f32	s15, s15
 800ef24:	edc7 7a01 	vstr	s15, [r7, #4]
 800ef28:	e7ba      	b.n	800eea0 <__kernel_rem_pio2f+0x3b4>
 800ef2a:	ab30      	add	r3, sp, #192	@ 0xc0
 800ef2c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800edf0 <__kernel_rem_pio2f+0x304>
 800ef30:	440b      	add	r3, r1
 800ef32:	2c00      	cmp	r4, #0
 800ef34:	da05      	bge.n	800ef42 <__kernel_rem_pio2f+0x456>
 800ef36:	b10e      	cbz	r6, 800ef3c <__kernel_rem_pio2f+0x450>
 800ef38:	eef1 7a67 	vneg.f32	s15, s15
 800ef3c:	edc7 7a00 	vstr	s15, [r7]
 800ef40:	e7ae      	b.n	800eea0 <__kernel_rem_pio2f+0x3b4>
 800ef42:	ed33 7a01 	vldmdb	r3!, {s14}
 800ef46:	3c01      	subs	r4, #1
 800ef48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ef4c:	e7f1      	b.n	800ef32 <__kernel_rem_pio2f+0x446>
 800ef4e:	ed73 7a01 	vldmdb	r3!, {s15}
 800ef52:	3a01      	subs	r2, #1
 800ef54:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef58:	e7d2      	b.n	800ef00 <__kernel_rem_pio2f+0x414>
 800ef5a:	eef0 7a47 	vmov.f32	s15, s14
 800ef5e:	e7d4      	b.n	800ef0a <__kernel_rem_pio2f+0x41e>
 800ef60:	ecb2 7a01 	vldmia	r2!, {s14}
 800ef64:	3301      	adds	r3, #1
 800ef66:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ef6a:	e7d6      	b.n	800ef1a <__kernel_rem_pio2f+0x42e>
 800ef6c:	edd2 7a00 	vldr	s15, [r2]
 800ef70:	edd2 6a01 	vldr	s13, [r2, #4]
 800ef74:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ef78:	3801      	subs	r0, #1
 800ef7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef7e:	ed82 7a00 	vstr	s14, [r2]
 800ef82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef86:	edc2 7a01 	vstr	s15, [r2, #4]
 800ef8a:	e798      	b.n	800eebe <__kernel_rem_pio2f+0x3d2>
 800ef8c:	edd3 7a00 	vldr	s15, [r3]
 800ef90:	edd3 6a01 	vldr	s13, [r3, #4]
 800ef94:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ef98:	3a01      	subs	r2, #1
 800ef9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef9e:	ed83 7a00 	vstr	s14, [r3]
 800efa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efa6:	edc3 7a01 	vstr	s15, [r3, #4]
 800efaa:	e78d      	b.n	800eec8 <__kernel_rem_pio2f+0x3dc>
 800efac:	ed33 7a01 	vldmdb	r3!, {s14}
 800efb0:	3c01      	subs	r4, #1
 800efb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800efb6:	e78f      	b.n	800eed8 <__kernel_rem_pio2f+0x3ec>
 800efb8:	eef1 6a66 	vneg.f32	s13, s13
 800efbc:	eeb1 7a47 	vneg.f32	s14, s14
 800efc0:	edc7 6a00 	vstr	s13, [r7]
 800efc4:	ed87 7a01 	vstr	s14, [r7, #4]
 800efc8:	eef1 7a67 	vneg.f32	s15, s15
 800efcc:	e790      	b.n	800eef0 <__kernel_rem_pio2f+0x404>
 800efce:	bf00      	nop

0800efd0 <floorf>:
 800efd0:	ee10 3a10 	vmov	r3, s0
 800efd4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800efd8:	3a7f      	subs	r2, #127	@ 0x7f
 800efda:	2a16      	cmp	r2, #22
 800efdc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800efe0:	dc2b      	bgt.n	800f03a <floorf+0x6a>
 800efe2:	2a00      	cmp	r2, #0
 800efe4:	da12      	bge.n	800f00c <floorf+0x3c>
 800efe6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f04c <floorf+0x7c>
 800efea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800efee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff6:	dd06      	ble.n	800f006 <floorf+0x36>
 800eff8:	2b00      	cmp	r3, #0
 800effa:	da24      	bge.n	800f046 <floorf+0x76>
 800effc:	2900      	cmp	r1, #0
 800effe:	4b14      	ldr	r3, [pc, #80]	@ (800f050 <floorf+0x80>)
 800f000:	bf08      	it	eq
 800f002:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800f006:	ee00 3a10 	vmov	s0, r3
 800f00a:	4770      	bx	lr
 800f00c:	4911      	ldr	r1, [pc, #68]	@ (800f054 <floorf+0x84>)
 800f00e:	4111      	asrs	r1, r2
 800f010:	420b      	tst	r3, r1
 800f012:	d0fa      	beq.n	800f00a <floorf+0x3a>
 800f014:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800f04c <floorf+0x7c>
 800f018:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f01c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f024:	ddef      	ble.n	800f006 <floorf+0x36>
 800f026:	2b00      	cmp	r3, #0
 800f028:	bfbe      	ittt	lt
 800f02a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800f02e:	fa40 f202 	asrlt.w	r2, r0, r2
 800f032:	189b      	addlt	r3, r3, r2
 800f034:	ea23 0301 	bic.w	r3, r3, r1
 800f038:	e7e5      	b.n	800f006 <floorf+0x36>
 800f03a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f03e:	d3e4      	bcc.n	800f00a <floorf+0x3a>
 800f040:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f044:	4770      	bx	lr
 800f046:	2300      	movs	r3, #0
 800f048:	e7dd      	b.n	800f006 <floorf+0x36>
 800f04a:	bf00      	nop
 800f04c:	7149f2ca 	.word	0x7149f2ca
 800f050:	bf800000 	.word	0xbf800000
 800f054:	007fffff 	.word	0x007fffff

0800f058 <_init>:
 800f058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f05a:	bf00      	nop
 800f05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f05e:	bc08      	pop	{r3}
 800f060:	469e      	mov	lr, r3
 800f062:	4770      	bx	lr

0800f064 <_fini>:
 800f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f066:	bf00      	nop
 800f068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f06a:	bc08      	pop	{r3}
 800f06c:	469e      	mov	lr, r3
 800f06e:	4770      	bx	lr
