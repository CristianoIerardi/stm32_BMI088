
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e638  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800e7c8  0800e7c8  0000f7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f018  0800f018  000112e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f018  0800f018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f020  0800f020  000112e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f020  0800f020  00010020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f024  0800f024  00010024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  20000000  0800f028  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000112e8  2**0
                  CONTENTS
 10 .bss          00001f74  200002e8  200002e8  000112e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000225c  2000225c  000112e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013184  00000000  00000000  00011318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a1a  00000000  00000000  0002449c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00027eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd7  00000000  00000000  00028ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d23  00000000  00000000  00029a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001611a  00000000  00000000  0004c7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be33d  00000000  00000000  000628bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120bf9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005498  00000000  00000000  00120c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001260d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e8 	.word	0x200002e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e7b0 	.word	0x0800e7b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	0800e7b0 	.word	0x0800e7b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <API_PrintAngles>:
/**
 * @brief Function to display on API the Roll, Pitch, Yaw
 * @param angle [0]: Roll, [1]: Pitch, [2]: Yaw
 */
void API_PrintAngles(uint32_t timestamp, float* angle)
{
 8000f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f3c:	b088      	sub	sp, #32
 8000f3e:	af06      	add	r7, sp, #24
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
	sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\n", timestamp, angle[0], angle[1], angle[2]);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fafd 	bl	8000548 <__aeabi_f2d>
 8000f4e:	4604      	mov	r4, r0
 8000f50:	460d      	mov	r5, r1
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	3304      	adds	r3, #4
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff faf5 	bl	8000548 <__aeabi_f2d>
 8000f5e:	4680      	mov	r8, r0
 8000f60:	4689      	mov	r9, r1
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3308      	adds	r3, #8
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff faed 	bl	8000548 <__aeabi_f2d>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f76:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f7a:	e9cd 4500 	strd	r4, r5, [sp]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	490b      	ldr	r1, [pc, #44]	@ (8000fb0 <API_PrintAngles+0x78>)
 8000f82:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <API_PrintAngles+0x7c>)
 8000f84:	f009 ffa8 	bl	800aed8 <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 8000f88:	bf00      	nop
 8000f8a:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <API_PrintAngles+0x7c>)
 8000f8c:	f7ff f970 	bl	8000270 <strlen>
 8000f90:	4603      	mov	r3, r0
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <API_PrintAngles+0x7c>)
 8000f98:	f008 fe28 	bl	8009bec <CDC_Transmit_FS>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d0f3      	beq.n	8000f8a <API_PrintAngles+0x52>
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fae:	bf00      	nop
 8000fb0:	0800e7c8 	.word	0x0800e7c8
 8000fb4:	2000047c 	.word	0x2000047c

08000fb8 <API_SendInertial>:
 * @brief Function to display on API the gyroscope and accelerometer values
 * @param gyro array of gyroscope measurements --> gyroX, gyroY, gyroZ
 * @param accel array of accelerometer measurements --> accelX, accelY, accelZ
 */
void API_SendInertial(uint32_t timestamp, float* gyro, float* accel)
{
 8000fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fbc:	b094      	sub	sp, #80	@ 0x50
 8000fbe:	af0c      	add	r7, sp, #48	@ 0x30
 8000fc0:	61f8      	str	r0, [r7, #28]
 8000fc2:	61b9      	str	r1, [r7, #24]
 8000fc4:	617a      	str	r2, [r7, #20]
	sprintf(txBuff, "I,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\n", timestamp, gyro[0], gyro[1], gyro[2], accel[0], accel[1], accel[2]);
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fabc 	bl	8000548 <__aeabi_f2d>
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fab4 	bl	8000548 <__aeabi_f2d>
 8000fe0:	4680      	mov	r8, r0
 8000fe2:	4689      	mov	r9, r1
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff faac 	bl	8000548 <__aeabi_f2d>
 8000ff0:	4682      	mov	sl, r0
 8000ff2:	468b      	mov	fp, r1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff faa5 	bl	8000548 <__aeabi_f2d>
 8000ffe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3304      	adds	r3, #4
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa9d 	bl	8000548 <__aeabi_f2d>
 800100e:	e9c7 0100 	strd	r0, r1, [r7]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3308      	adds	r3, #8
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa95 	bl	8000548 <__aeabi_f2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001026:	ed97 7b00 	vldr	d7, [r7]
 800102a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800102e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001032:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001036:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800103a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800103e:	e9cd 4500 	strd	r4, r5, [sp]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	490b      	ldr	r1, [pc, #44]	@ (8001074 <API_SendInertial+0xbc>)
 8001046:	480c      	ldr	r0, [pc, #48]	@ (8001078 <API_SendInertial+0xc0>)
 8001048:	f009 ff46 	bl	800aed8 <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 800104c:	bf00      	nop
 800104e:	480a      	ldr	r0, [pc, #40]	@ (8001078 <API_SendInertial+0xc0>)
 8001050:	f7ff f90e 	bl	8000270 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29b      	uxth	r3, r3
 8001058:	4619      	mov	r1, r3
 800105a:	4807      	ldr	r0, [pc, #28]	@ (8001078 <API_SendInertial+0xc0>)
 800105c:	f008 fdc6 	bl	8009bec <CDC_Transmit_FS>
 8001060:	4603      	mov	r3, r0
 8001062:	2b02      	cmp	r3, #2
 8001064:	d0f3      	beq.n	800104e <API_SendInertial+0x96>
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001072:	bf00      	nop
 8001074:	0800e7e0 	.word	0x0800e7e0
 8001078:	2000047c 	.word	0x2000047c

0800107c <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	887a      	ldrh	r2, [r7, #2]
 800109a:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6a3a      	ldr	r2, [r7, #32]
 80010a0:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010a6:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2200      	movs	r2, #0
 80010ac:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2200      	movs	r2, #0
 80010b2:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6858      	ldr	r0, [r3, #4]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	899b      	ldrh	r3, [r3, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	4619      	mov	r1, r3
 80010c4:	f002 fafe 	bl	80036c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f001 fc97 	bl	80029fc <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6858      	ldr	r0, [r3, #4]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	899b      	ldrh	r3, [r3, #12]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	f002 faf3 	bl	80036c4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80010de:	2032      	movs	r0, #50	@ 0x32
 80010e0:	f001 fc8c 	bl	80029fc <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 80010e4:	22b6      	movs	r2, #182	@ 0xb6
 80010e6:	217e      	movs	r1, #126	@ 0x7e
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f959 	bl	80013a0 <BMI088_WriteAccRegister>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	4413      	add	r3, r2
 80010f6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80010f8:	2032      	movs	r0, #50	@ 0x32
 80010fa:	f001 fc7f 	bl	80029fc <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 80010fe:	f107 0316 	add.w	r3, r7, #22
 8001102:	461a      	mov	r2, r3
 8001104:	2100      	movs	r1, #0
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 f8d0 	bl	80012ac <BMI088_ReadAccRegister>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	4413      	add	r3, r2
 8001114:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8001116:	200a      	movs	r0, #10
 8001118:	f001 fc70 	bl	80029fc <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 800111c:	22a8      	movs	r2, #168	@ 0xa8
 800111e:	2140      	movs	r1, #64	@ 0x40
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 f93d 	bl	80013a0 <BMI088_WriteAccRegister>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	4413      	add	r3, r2
 800112e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f001 fc63 	bl	80029fc <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8001136:	2200      	movs	r2, #0
 8001138:	2141      	movs	r1, #65	@ 0x41
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 f930 	bl	80013a0 <BMI088_WriteAccRegister>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	4413      	add	r3, r2
 8001148:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800114a:	200a      	movs	r0, #10
 800114c:	f001 fc56 	bl	80029fc <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8001150:	220a      	movs	r2, #10
 8001152:	2153      	movs	r1, #83	@ 0x53
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f000 f923 	bl	80013a0 <BMI088_WriteAccRegister>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	4413      	add	r3, r2
 8001162:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001164:	200a      	movs	r0, #10
 8001166:	f001 fc49 	bl	80029fc <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 800116a:	2204      	movs	r2, #4
 800116c:	2158      	movs	r1, #88	@ 0x58
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f916 	bl	80013a0 <BMI088_WriteAccRegister>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	4413      	add	r3, r2
 800117c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800117e:	200a      	movs	r0, #10
 8001180:	f001 fc3c 	bl	80029fc <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8001184:	2200      	movs	r2, #0
 8001186:	217c      	movs	r1, #124	@ 0x7c
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 f909 	bl	80013a0 <BMI088_WriteAccRegister>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	4413      	add	r3, r2
 8001196:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001198:	200a      	movs	r0, #10
 800119a:	f001 fc2f 	bl	80029fc <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800119e:	2204      	movs	r2, #4
 80011a0:	217d      	movs	r1, #125	@ 0x7d
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f000 f8fc 	bl	80013a0 <BMI088_WriteAccRegister>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	4413      	add	r3, r2
 80011b0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011b2:	200a      	movs	r0, #10
 80011b4:	f001 fc22 	bl	80029fc <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a3a      	ldr	r2, [pc, #232]	@ (80012a4 <BMI088_Init+0x228>)
 80011bc:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2292      	movs	r2, #146	@ 0x92
 80011c2:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6898      	ldr	r0, [r3, #8]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	89db      	ldrh	r3, [r3, #14]
 80011cc:	2201      	movs	r2, #1
 80011ce:	4619      	mov	r1, r3
 80011d0:	f002 fa78 	bl	80036c4 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 80011d4:	22b6      	movs	r2, #182	@ 0xb6
 80011d6:	2114      	movs	r1, #20
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 f91b 	bl	8001414 <BMI088_WriteGyrRegister>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	4413      	add	r3, r2
 80011e6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 80011e8:	20fa      	movs	r0, #250	@ 0xfa
 80011ea:	f001 fc07 	bl	80029fc <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80011ee:	f107 0316 	add.w	r3, r7, #22
 80011f2:	461a      	mov	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 f896 	bl	8001328 <BMI088_ReadGyrRegister>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	4413      	add	r3, r2
 8001204:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 8001206:	200a      	movs	r0, #10
 8001208:	f001 fbf8 	bl	80029fc <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 800120c:	2201      	movs	r2, #1
 800120e:	210f      	movs	r1, #15
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f8ff 	bl	8001414 <BMI088_WriteGyrRegister>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	7dfb      	ldrb	r3, [r7, #23]
 800121c:	4413      	add	r3, r2
 800121e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001220:	200a      	movs	r0, #10
 8001222:	f001 fbeb 	bl	80029fc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 8001226:	2207      	movs	r2, #7
 8001228:	2110      	movs	r1, #16
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 f8f2 	bl	8001414 <BMI088_WriteGyrRegister>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	4413      	add	r3, r2
 8001238:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800123a:	200a      	movs	r0, #10
 800123c:	f001 fbde 	bl	80029fc <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	2115      	movs	r1, #21
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 f8e5 	bl	8001414 <BMI088_WriteGyrRegister>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	4413      	add	r3, r2
 8001252:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001254:	200a      	movs	r0, #10
 8001256:	f001 fbd1 	bl	80029fc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 800125a:	2201      	movs	r2, #1
 800125c:	2116      	movs	r1, #22
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 f8d8 	bl	8001414 <BMI088_WriteGyrRegister>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	4413      	add	r3, r2
 800126c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800126e:	200a      	movs	r0, #10
 8001270:	f001 fbc4 	bl	80029fc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001274:	2201      	movs	r2, #1
 8001276:	2118      	movs	r1, #24
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f8cb 	bl	8001414 <BMI088_WriteGyrRegister>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	7dfb      	ldrb	r3, [r7, #23]
 8001284:	4413      	add	r3, r2
 8001286:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001288:	200a      	movs	r0, #10
 800128a:	f001 fbb7 	bl	80029fc <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <BMI088_Init+0x22c>)
 8001292:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2282      	movs	r2, #130	@ 0x82
 8001298:	769a      	strb	r2, [r3, #26]

	return status;
 800129a:	7dfb      	ldrb	r3, [r7, #23]

}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	3a6b70a4 	.word	0x3a6b70a4
 80012a8:	3a0ba058 	.word	0x3a0ba058

080012ac <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	460b      	mov	r3, r1
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	753b      	strb	r3, [r7, #20]
 80012c4:	2300      	movs	r3, #0
 80012c6:	757b      	strb	r3, [r7, #21]
 80012c8:	2300      	movs	r3, #0
 80012ca:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6858      	ldr	r0, [r3, #4]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	899b      	ldrh	r3, [r3, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	f002 f9f4 	bl	80036c4 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f107 0210 	add.w	r2, r7, #16
 80012e4:	f107 0114 	add.w	r1, r7, #20
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2303      	movs	r3, #3
 80012f0:	f004 faa7 	bl	8005842 <HAL_SPI_TransmitReceive>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf0c      	ite	eq
 80012fa:	2301      	moveq	r3, #1
 80012fc:	2300      	movne	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6858      	ldr	r0, [r3, #4]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	899b      	ldrh	r3, [r3, #12]
 800130a:	2201      	movs	r2, #1
 800130c:	4619      	mov	r1, r3
 800130e:	f002 f9d9 	bl	80036c4 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d102      	bne.n	800131e <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8001318:	7cba      	ldrb	r2, [r7, #18]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800131e:	7dfb      	ldrb	r3, [r7, #23]

}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af02      	add	r7, sp, #8
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	460b      	mov	r3, r1
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8001336:	7afb      	ldrb	r3, [r7, #11]
 8001338:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800133c:	b2db      	uxtb	r3, r3
 800133e:	753b      	strb	r3, [r7, #20]
 8001340:	2300      	movs	r3, #0
 8001342:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6898      	ldr	r0, [r3, #8]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	89db      	ldrh	r3, [r3, #14]
 800134c:	2200      	movs	r2, #0
 800134e:	4619      	mov	r1, r3
 8001350:	f002 f9b8 	bl	80036c4 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	f107 0210 	add.w	r2, r7, #16
 800135c:	f107 0114 	add.w	r1, r7, #20
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2302      	movs	r3, #2
 8001368:	f004 fa6b 	bl	8005842 <HAL_SPI_TransmitReceive>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6898      	ldr	r0, [r3, #8]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	89db      	ldrh	r3, [r3, #14]
 8001382:	2201      	movs	r2, #1
 8001384:	4619      	mov	r1, r3
 8001386:	f002 f99d 	bl	80036c4 <HAL_GPIO_WritePin>

	if (status == 1) {
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d102      	bne.n	8001396 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8001390:	7c7a      	ldrb	r2, [r7, #17]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8001396:	7dfb      	ldrb	r3, [r7, #23]

}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
 80013ac:	4613      	mov	r3, r2
 80013ae:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	733b      	strb	r3, [r7, #12]
 80013b4:	78bb      	ldrb	r3, [r7, #2]
 80013b6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6858      	ldr	r0, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	899b      	ldrh	r3, [r3, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	f002 f97e 	bl	80036c4 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	f107 010c 	add.w	r1, r7, #12
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
 80013d4:	2202      	movs	r2, #2
 80013d6:	f004 f8f0 	bl	80055ba <HAL_SPI_Transmit>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80013e8:	bf00      	nop
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 fde8 	bl	8005fc4 <HAL_SPI_GetState>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d1f7      	bne.n	80013ea <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6858      	ldr	r0, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f002 f95d 	bl	80036c4 <HAL_GPIO_WritePin>

	return status;
 800140a:	7bfb      	ldrb	r3, [r7, #15]

}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
 8001420:	4613      	mov	r3, r2
 8001422:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	733b      	strb	r3, [r7, #12]
 8001428:	78bb      	ldrb	r3, [r7, #2]
 800142a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6898      	ldr	r0, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	89db      	ldrh	r3, [r3, #14]
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	f002 f944 	bl	80036c4 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	f107 010c 	add.w	r1, r7, #12
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	2202      	movs	r2, #2
 800144a:	f004 f8b6 	bl	80055ba <HAL_SPI_Transmit>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800145c:	bf00      	nop
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f004 fdae 	bl	8005fc4 <HAL_SPI_GetState>
 8001468:	4603      	mov	r3, r0
 800146a:	2b01      	cmp	r3, #1
 800146c:	d1f7      	bne.n	800145e <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6898      	ldr	r0, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	89db      	ldrh	r3, [r3, #14]
 8001476:	2201      	movs	r2, #1
 8001478:	4619      	mov	r1, r3
 800147a:	f002 f923 	bl	80036c4 <HAL_GPIO_WritePin>

	return status;
 800147e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6858      	ldr	r0, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	899b      	ldrh	r3, [r3, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	f002 f912 	bl	80036c4 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f103 0112 	add.w	r1, r3, #18
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80014b0:	2308      	movs	r3, #8
 80014b2:	f004 fb6f 	bl	8005b94 <HAL_SPI_TransmitReceive_DMA>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d104      	bne.n	80014c6 <BMI088_ReadAccelerometerDMA+0x3e>

		imu->readingAcc = 1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	741a      	strb	r2, [r3, #16]
		return 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e008      	b.n	80014d8 <BMI088_ReadAccelerometerDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6858      	ldr	r0, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	899b      	ldrh	r3, [r3, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4619      	mov	r1, r3
 80014d2:	f002 f8f7 	bl	80036c4 <HAL_GPIO_WritePin>
		return 0;
 80014d6:	2300      	movs	r3, #0

	}

}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6858      	ldr	r0, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	899b      	ldrh	r3, [r3, #12]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f002 f8e6 	bl	80036c4 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001504:	b2db      	uxtb	r3, r3
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001510:	b2db      	uxtb	r3, r3
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800151e:	b2db      	uxtb	r3, r3
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800152a:	b2db      	uxtb	r3, r3
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001538:	b2db      	uxtb	r3, r3
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001544:	b2db      	uxtb	r3, r3
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800156e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800158a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6898      	ldr	r0, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	89db      	ldrh	r3, [r3, #14]
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	f002 f882 	bl	80036c4 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f103 011a 	add.w	r1, r3, #26
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80015d0:	2307      	movs	r3, #7
 80015d2:	f004 fadf 	bl	8005b94 <HAL_SPI_TransmitReceive_DMA>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d104      	bne.n	80015e6 <BMI088_ReadGyroscopeDMA+0x3e>

		imu->readingGyr = 1;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	745a      	strb	r2, [r3, #17]
		return 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e008      	b.n	80015f8 <BMI088_ReadGyroscopeDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6898      	ldr	r0, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	89db      	ldrh	r3, [r3, #14]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4619      	mov	r1, r3
 80015f2:	f002 f867 	bl	80036c4 <HAL_GPIO_WritePin>
		return 0;
 80015f6:	2300      	movs	r3, #0

	}

}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6898      	ldr	r0, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	89db      	ldrh	r3, [r3, #14]
 8001610:	2201      	movs	r2, #1
 8001612:	4619      	mov	r1, r3
 8001614:	f002 f856 	bl	80036c4 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001624:	b2db      	uxtb	r3, r3
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001630:	b2db      	uxtb	r3, r3
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800163e:	b2db      	uxtb	r3, r3
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800164a:	b2db      	uxtb	r3, r3
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001658:	b2db      	uxtb	r3, r3
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001664:	b2db      	uxtb	r3, r3
 8001666:	b21b      	sxth	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001672:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800168e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80016aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <SetQuaternionFromEuler>:

float correction_factor = 0.0f;


// Set angles to a specified quantity
void SetQuaternionFromEuler(Quaternion *q, float roll, float pitch, float yaw) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80016d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80016d8:	ed87 1a00 	vstr	s2, [r7]
	roll = roll * DEG_TO_RAD;
 80016dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800186c <SetQuaternionFromEuler+0x1a4>
 80016e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e8:	edc7 7a02 	vstr	s15, [r7, #8]
	pitch = pitch * DEG_TO_RAD;
 80016ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800186c <SetQuaternionFromEuler+0x1a4>
 80016f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f8:	edc7 7a01 	vstr	s15, [r7, #4]
	yaw = yaw* DEG_TO_RAD;
 80016fc:	edd7 7a00 	vldr	s15, [r7]
 8001700:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800186c <SetQuaternionFromEuler+0x1a4>
 8001704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001708:	edc7 7a00 	vstr	s15, [r7]
    float cr = cosf(roll * 0.5f);
 800170c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001710:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f00b fd82 	bl	800d224 <cosf>
 8001720:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float sr = sinf(roll * 0.5f);
 8001724:	edd7 7a02 	vldr	s15, [r7, #8]
 8001728:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800172c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001730:	eeb0 0a67 	vmov.f32	s0, s15
 8001734:	f00b fdc2 	bl	800d2bc <sinf>
 8001738:	ed87 0a08 	vstr	s0, [r7, #32]
    float cp = cosf(pitch * 0.5f);
 800173c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001740:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	f00b fd6a 	bl	800d224 <cosf>
 8001750:	ed87 0a07 	vstr	s0, [r7, #28]
    float sp = sinf(pitch * 0.5f);
 8001754:	edd7 7a01 	vldr	s15, [r7, #4]
 8001758:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800175c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001760:	eeb0 0a67 	vmov.f32	s0, s15
 8001764:	f00b fdaa 	bl	800d2bc <sinf>
 8001768:	ed87 0a06 	vstr	s0, [r7, #24]
    float cy = cosf(yaw * 0.5f);
 800176c:	edd7 7a00 	vldr	s15, [r7]
 8001770:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	f00b fd52 	bl	800d224 <cosf>
 8001780:	ed87 0a05 	vstr	s0, [r7, #20]
    float sy = sinf(yaw * 0.5f);
 8001784:	edd7 7a00 	vldr	s15, [r7]
 8001788:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800178c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001790:	eeb0 0a67 	vmov.f32	s0, s15
 8001794:	f00b fd92 	bl	800d2bc <sinf>
 8001798:	ed87 0a04 	vstr	s0, [r7, #16]

    q->w = cr * cp * cy + sr * sp * sy;
 800179c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80017a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b0:	edd7 6a08 	vldr	s13, [r7, #32]
 80017b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80017b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	edc3 7a00 	vstr	s15, [r3]
    q->x = sr * cp * cy - cr * sp * sy;
 80017ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80017d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017da:	edd7 7a05 	vldr	s15, [r7, #20]
 80017de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80017e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80017f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y = cr * sp * cy + sr * cp * sy;
 8001800:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001804:	edd7 7a06 	vldr	s15, [r7, #24]
 8001808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001814:	edd7 6a08 	vldr	s13, [r7, #32]
 8001818:	edd7 7a07 	vldr	s15, [r7, #28]
 800181c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001820:	edd7 7a04 	vldr	s15, [r7, #16]
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z = cr * cp * sy - sr * sp * cy;
 8001832:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001836:	edd7 7a07 	vldr	s15, [r7, #28]
 800183a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001846:	edd7 6a08 	vldr	s13, [r7, #32]
 800184a:	edd7 7a06 	vldr	s15, [r7, #24]
 800184e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001852:	edd7 7a05 	vldr	s15, [r7, #20]
 8001856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	@ 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	3c8efa39 	.word	0x3c8efa39

08001870 <NormalizeQuaternion>:




// Function to normalize a generic quaternion
void NormalizeQuaternion(Quaternion *q) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
    float norm = sqrt(q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	ed93 7a00 	vldr	s14, [r3]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	edd3 6a01 	vldr	s13, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	edd3 7a01 	vldr	s15, [r3, #4]
 8001894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	edd3 6a02 	vldr	s13, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	edd3 6a03 	vldr	s13, [r3, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80018bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c4:	ee17 0a90 	vmov	r0, s15
 80018c8:	f7fe fe3e 	bl	8000548 <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	ec43 2b10 	vmov	d0, r2, r3
 80018d4:	f00b fc72 	bl	800d1bc <sqrt>
 80018d8:	ec53 2b10 	vmov	r2, r3, d0
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff f962 	bl	8000ba8 <__aeabi_d2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	60fb      	str	r3, [r7, #12]
    if (norm > 0.0f) {
 80018e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f4:	dc00      	bgt.n	80018f8 <NormalizeQuaternion+0x88>
        q->w /= norm;
        q->x /= norm;
        q->y /= norm;
        q->z /= norm;
    }
}
 80018f6:	e027      	b.n	8001948 <NormalizeQuaternion+0xd8>
        q->w /= norm;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	edd3 6a00 	vldr	s13, [r3]
 80018fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	edc3 7a00 	vstr	s15, [r3]
        q->x /= norm;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001912:	ed97 7a03 	vldr	s14, [r7, #12]
 8001916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	edc3 7a01 	vstr	s15, [r3, #4]
        q->y /= norm;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edd3 6a02 	vldr	s13, [r3, #8]
 8001926:	ed97 7a03 	vldr	s14, [r7, #12]
 800192a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	edc3 7a02 	vstr	s15, [r3, #8]
        q->z /= norm;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	edd3 6a03 	vldr	s13, [r3, #12]
 800193a:	ed97 7a03 	vldr	s14, [r7, #12]
 800193e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <UpdateQuaternion>:


// Update the rotation
void UpdateQuaternion(Quaternion *q, Vector3 gyro, float dt) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b08e      	sub	sp, #56	@ 0x38
 8001954:	af00      	add	r7, sp, #0
 8001956:	6178      	str	r0, [r7, #20]
 8001958:	eef0 6a40 	vmov.f32	s13, s0
 800195c:	eeb0 7a60 	vmov.f32	s14, s1
 8001960:	eef0 7a41 	vmov.f32	s15, s2
 8001964:	edc7 1a01 	vstr	s3, [r7, #4]
 8001968:	edc7 6a02 	vstr	s13, [r7, #8]
 800196c:	ed87 7a03 	vstr	s14, [r7, #12]
 8001970:	edc7 7a04 	vstr	s15, [r7, #16]
    float gx = gyro.x * 0.5f * dt;
 8001974:	edd7 7a02 	vldr	s15, [r7, #8]
 8001978:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800197c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001980:	ed97 7a01 	vldr	s14, [r7, #4]
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float gy = gyro.y * 0.5f * dt;
 800198c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001990:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001998:	ed97 7a01 	vldr	s14, [r7, #4]
 800199c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float gz = gyro.z * 0.5f * dt;
 80019a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    Quaternion q_dot = {
        -q->x * gx - q->y * gy - q->z * gz,
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	edd3 7a01 	vldr	s15, [r3, #4]
 80019c2:	eeb1 7a67 	vneg.f32	s14, s15
 80019c6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80019d4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	edd3 6a03 	vldr	s13, [r3, #12]
 80019e6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ee:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion q_dot = {
 80019f2:	edc7 7a07 	vstr	s15, [r7, #28]
         q->w * gx + q->y * gz - q->z * gy,
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	ed93 7a00 	vldr	s14, [r3]
 80019fc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a0a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a1c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a24:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion q_dot = {
 8001a28:	edc7 7a08 	vstr	s15, [r7, #32]
         q->w * gy - q->x * gz + q->z * gx,
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	ed93 7a00 	vldr	s14, [r3]
 8001a32:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a40:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a52:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
    Quaternion q_dot = {
 8001a5e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         q->w * gz + q->x * gy - q->y * gx
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	ed93 7a00 	vldr	s14, [r3]
 8001a68:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a76:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a90:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion q_dot = {
 8001a94:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    };

    q->w += q_dot.w;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	ed93 7a00 	vldr	s14, [r3]
 8001a9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
    q->x += q_dot.x;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ab2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y += q_dot.y;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ac6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z += q_dot.z;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ada:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	edc3 7a03 	vstr	s15, [r3, #12]

    NormalizeQuaternion(q);
 8001ae8:	6978      	ldr	r0, [r7, #20]
 8001aea:	f7ff fec1 	bl	8001870 <NormalizeQuaternion>
}
 8001aee:	bf00      	nop
 8001af0:	3738      	adds	r7, #56	@ 0x38
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <CorrectQuaternionWithAccel>:

// Correction with accelerometer
void CorrectQuaternionWithAccel(Quaternion *q, Vector3 accel, float alpha) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	@ 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6178      	str	r0, [r7, #20]
 8001b00:	eef0 6a40 	vmov.f32	s13, s0
 8001b04:	eeb0 7a60 	vmov.f32	s14, s1
 8001b08:	eef0 7a41 	vmov.f32	s15, s2
 8001b0c:	edc7 1a01 	vstr	s3, [r7, #4]
 8001b10:	edc7 6a02 	vstr	s13, [r7, #8]
 8001b14:	ed87 7a03 	vstr	s14, [r7, #12]
 8001b18:	edc7 7a04 	vstr	s15, [r7, #16]
	// (alpha not used right now)
    Vector3 gravity = { 2.0f * (q->x * q->z - q->w * q->y),
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	edd3 6a00 	vldr	s13, [r3]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b44:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                        2.0f * (q->w * q->x + q->y * q->z),
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	ed93 7a00 	vldr	s14, [r3]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    Vector3 gravity = { 2.0f * (q->x * q->z - q->w * q->y),
 8001b70:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                        q->w * q->w - q->x * q->x - q->y * q->y + q->z * q->z };
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	ed93 7a00 	vldr	s14, [r3]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
    Vector3 gravity = { 2.0f * (q->x * q->z - q->w * q->y),
 8001bc0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    Vector3 error = { accel.y * gravity.z - accel.z * gravity.y,
 8001bc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bc8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001bd4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be0:	edc7 7a06 	vstr	s15, [r7, #24]
                      accel.z * gravity.x - accel.x * gravity.z,
 8001be4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001be8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf0:	edd7 6a02 	vldr	s13, [r7, #8]
 8001bf4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
    Vector3 error = { accel.y * gravity.z - accel.z * gravity.y,
 8001c00:	edc7 7a07 	vstr	s15, [r7, #28]
                      accel.x * gravity.y - accel.y * gravity.x };
 8001c04:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c08:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c10:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c14:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
    Vector3 error = { accel.y * gravity.z - accel.z * gravity.y,
 8001c20:	edc7 7a08 	vstr	s15, [r7, #32]

	correction_factor = 0.0f;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <CorrectQuaternionWithAccel+0x19c>)
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
    q->x += correction_factor * error.x;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c32:	edd7 6a06 	vldr	s13, [r7, #24]
 8001c36:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <CorrectQuaternionWithAccel+0x19c>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	edc3 7a01 	vstr	s15, [r3, #4]
	q->y += correction_factor * error.y;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <CorrectQuaternionWithAccel+0x19c>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	edc3 7a02 	vstr	s15, [r3, #8]
	q->z += correction_factor * error.z;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c6e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <CorrectQuaternionWithAccel+0x19c>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	edc3 7a03 	vstr	s15, [r3, #12]

    NormalizeQuaternion(q);
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff fdf2 	bl	8001870 <NormalizeQuaternion>
}
 8001c8c:	bf00      	nop
 8001c8e:	3730      	adds	r7, #48	@ 0x30
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000304 	.word	0x20000304

08001c98 <QuaternionToEuler>:



// Conversion from quaternion to euler angles
void QuaternionToEuler(Quaternion q, float* ang) {
 8001c98:	b5b0      	push	{r4, r5, r7, lr}
 8001c9a:	b08c      	sub	sp, #48	@ 0x30
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	eeb0 6a40 	vmov.f32	s12, s0
 8001ca2:	eef0 6a60 	vmov.f32	s13, s1
 8001ca6:	eeb0 7a41 	vmov.f32	s14, s2
 8001caa:	eef0 7a61 	vmov.f32	s15, s3
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	ed87 6a02 	vstr	s12, [r7, #8]
 8001cb4:	edc7 6a03 	vstr	s13, [r7, #12]
 8001cb8:	ed87 7a04 	vstr	s14, [r7, #16]
 8001cbc:	edc7 7a05 	vstr	s15, [r7, #20]
    //EulerAngles angles;

    // Roll (X-axis rotation)
    float sinr_cosp = 2.0f * (q.w * q.x + q.y * q.z);
 8001cc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ccc:	edd7 6a04 	vldr	s13, [r7, #16]
 8001cd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ce0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float cosr_cosp = 1.0f - 2.0f * (q.x * q.x + q.y * q.y);
 8001ce4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ce8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001cf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles.roll = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
    ang[0] = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
 8001d10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d12:	f7fe fc19 	bl	8000548 <__aeabi_f2d>
 8001d16:	4604      	mov	r4, r0
 8001d18:	460d      	mov	r5, r1
 8001d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d1c:	f7fe fc14 	bl	8000548 <__aeabi_f2d>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	ec43 2b11 	vmov	d1, r2, r3
 8001d28:	ec45 4b10 	vmov	d0, r4, r5
 8001d2c:	f00b fa44 	bl	800d1b8 <atan2>
 8001d30:	ec51 0b10 	vmov	r0, r1, d0
 8001d34:	a356      	add	r3, pc, #344	@ (adr r3, 8001e90 <QuaternionToEuler+0x1f8>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fc5d 	bl	80005f8 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe ff2f 	bl	8000ba8 <__aeabi_d2f>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	601a      	str	r2, [r3, #0]

    // Pitch (Y-axis rotation)
    float sinp = 2.0f * (q.w * q.y - q.z * q.x);
 8001d50:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (fabs(sinp) >= 1)
 8001d74:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d78:	eef0 7ae7 	vabs.f32	s15, s15
 8001d7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	db13      	blt.n	8001db2 <QuaternionToEuler+0x11a>
        ang[1] = copysign(90.0f, sinp); // Evita errori numerici, blocco di gimbal lock
 8001d8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d8c:	f7fe fbdc 	bl	8000548 <__aeabi_f2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	ec43 2b11 	vmov	d1, r2, r3
 8001d98:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8001e88 <QuaternionToEuler+0x1f0>
 8001d9c:	f009 f97f 	bl	800b09e <copysign>
 8001da0:	ec51 0b10 	vmov	r0, r1, d0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	1d1c      	adds	r4, r3, #4
 8001da8:	f7fe fefe 	bl	8000ba8 <__aeabi_d2f>
 8001dac:	4603      	mov	r3, r0
 8001dae:	6023      	str	r3, [r4, #0]
 8001db0:	e019      	b.n	8001de6 <QuaternionToEuler+0x14e>
    else
        ang[1] = asin(sinp) * RAD_TO_DEG;
 8001db2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001db4:	f7fe fbc8 	bl	8000548 <__aeabi_f2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	ec43 2b10 	vmov	d0, r2, r3
 8001dc0:	f00b f9c6 	bl	800d150 <asin>
 8001dc4:	ec51 0b10 	vmov	r0, r1, d0
 8001dc8:	a331      	add	r3, pc, #196	@ (adr r3, 8001e90 <QuaternionToEuler+0x1f8>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fc13 	bl	80005f8 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	1d1c      	adds	r4, r3, #4
 8001dde:	f7fe fee3 	bl	8000ba8 <__aeabi_d2f>
 8001de2:	4603      	mov	r3, r0
 8001de4:	6023      	str	r3, [r4, #0]

    // Yaw (Z-axis rotation)
    float siny_cosp = 2.0f * (q.w * q.z + q.x * q.y);
 8001de6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df2:	edd7 6a03 	vldr	s13, [r7, #12]
 8001df6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e06:	edc7 7a08 	vstr	s15, [r7, #32]
    float cosy_cosp = 1.0f - 2.0f * (q.y * q.y + q.z * q.z);
 8001e0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e16:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e32:	edc7 7a07 	vstr	s15, [r7, #28]
    ang[2] = atan2(siny_cosp, cosy_cosp) * RAD_TO_DEG;
 8001e36:	6a38      	ldr	r0, [r7, #32]
 8001e38:	f7fe fb86 	bl	8000548 <__aeabi_f2d>
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	460d      	mov	r5, r1
 8001e40:	69f8      	ldr	r0, [r7, #28]
 8001e42:	f7fe fb81 	bl	8000548 <__aeabi_f2d>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	ec43 2b11 	vmov	d1, r2, r3
 8001e4e:	ec45 4b10 	vmov	d0, r4, r5
 8001e52:	f00b f9b1 	bl	800d1b8 <atan2>
 8001e56:	ec51 0b10 	vmov	r0, r1, d0
 8001e5a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001e90 <QuaternionToEuler+0x1f8>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbca 	bl	80005f8 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f103 0408 	add.w	r4, r3, #8
 8001e72:	f7fe fe99 	bl	8000ba8 <__aeabi_d2f>
 8001e76:	4603      	mov	r3, r0
 8001e78:	6023      	str	r3, [r4, #0]


    /*ang[0] = angles.roll;
    ang[1] = angles.pitch;
    ang[2] = angles.yaw;*/
}
 8001e7a:	bf00      	nop
 8001e7c:	3730      	adds	r7, #48	@ 0x30
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdb0      	pop	{r4, r5, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	f3af 8000 	nop.w
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	40568000 	.word	0x40568000
 8001e90:	20000000 	.word	0x20000000
 8001e94:	404ca5dc 	.word	0x404ca5dc

08001e98 <EKF_CalculateGyroBias>:
 * @param imu IMU algorithm structure
 * @param samples number of samples to calculate the mean average bias
 * @param ret_bias address (array) where to write the calculated bias values
 */
void EKF_CalculateGyroBias(BMI088* imu, int cycles)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	@ 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
    float bias[3] = {0,0,0};
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < cycles; i++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	e01d      	b.n	8001ef6 <EKF_CalculateGyroBias+0x5e>
        bias[0] += imu->gyr_rps[0];
 8001eba:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec8:	edc7 7a03 	vstr	s15, [r7, #12]
        bias[1] += imu->gyr_rps[1];
 8001ecc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eda:	edc7 7a04 	vstr	s15, [r7, #16]
        bias[2] += imu->gyr_rps[2];
 8001ede:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eec:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < cycles; i++) {
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbdd      	blt.n	8001eba <EKF_CalculateGyroBias+0x22>
    }
    for (int i = 0; i < 3; i++) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	e016      	b.n	8001f32 <EKF_CalculateGyroBias+0x9a>
        gyro_bias[i] = bias[i] / cycles;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	3320      	adds	r3, #32
 8001f0a:	443b      	add	r3, r7
 8001f0c:	3b14      	subs	r3, #20
 8001f0e:	edd3 6a00 	vldr	s13, [r3]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f20:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <EKF_CalculateGyroBias+0xb0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	dde5      	ble.n	8001f04 <EKF_CalculateGyroBias+0x6c>
    }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000308 	.word	0x20000308

08001f4c <HAL_GPIO_EXTI_Callback>:
uint32_t timerToggle = 0;



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d103      	bne.n	8001f64 <HAL_GPIO_EXTI_Callback+0x18>
	{
		// we check if the interrupt pin is the accelerometer one
		BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 8001f5c:	4806      	ldr	r0, [pc, #24]	@ (8001f78 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001f5e:	f7ff fa93 	bl	8001488 <BMI088_ReadAccelerometerDMA>
	else if(GPIO_Pin == INT_GYR_Pin)
	{
		// we check if the interrupt pin is the gyroscope one
		BMI088_ReadGyroscopeDMA(&imu);
	}
}
 8001f62:	e005      	b.n	8001f70 <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == INT_GYR_Pin)
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d102      	bne.n	8001f70 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 8001f6a:	4803      	ldr	r0, [pc, #12]	@ (8001f78 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001f6c:	f7ff fb1c 	bl	80015a8 <BMI088_ReadGyroscopeDMA>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000042c 	.word	0x2000042c

08001f7c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb4 <HAL_SPI_TxRxCpltCallback+0x38>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10d      	bne.n	8001faa <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001f90:	7c1b      	ldrb	r3, [r3, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8001f96:	4808      	ldr	r0, [pc, #32]	@ (8001fb8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001f98:	f7ff faa2 	bl	80014e0 <BMI088_ReadAccelerometerDMA_Complete>
		}

		if (imu.readingGyr)
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001f9e:	7c5b      	ldrb	r3, [r3, #17]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 8001fa4:	4804      	ldr	r0, [pc, #16]	@ (8001fb8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001fa6:	f7ff fb2b 	bl	8001600 <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40013000 	.word	0x40013000
 8001fb8:	2000042c 	.word	0x2000042c

08001fbc <Take_IMU_Measurements>:


void Take_IMU_Measurements(BMI088 *imu)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	acc[2] = imu->acc_mps2[2];
	gyr[0] = imu->gyr_rps[0];
	gyr[1] = imu->gyr_rps[1];
	gyr[2] = imu->gyr_rps[2];*/

	gyr.y = -imu->gyr_rps[0];
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001fca:	eef1 7a67 	vneg.f32	s15, s15
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <Take_IMU_Measurements+0x54>)
 8001fd0:	edc3 7a01 	vstr	s15, [r3, #4]
	gyr.x = imu->gyr_rps[1];
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002010 <Take_IMU_Measurements+0x54>)
 8001fda:	6013      	str	r3, [r2, #0]
	gyr.z = imu->gyr_rps[2];
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8002010 <Take_IMU_Measurements+0x54>)
 8001fe2:	6093      	str	r3, [r2, #8]
	acc.y = -imu->acc_mps2[0];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001fea:	eef1 7a67 	vneg.f32	s15, s15
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <Take_IMU_Measurements+0x58>)
 8001ff0:	edc3 7a01 	vstr	s15, [r3, #4]
	acc.x = imu->acc_mps2[1];
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff8:	4a06      	ldr	r2, [pc, #24]	@ (8002014 <Take_IMU_Measurements+0x58>)
 8001ffa:	6013      	str	r3, [r2, #0]
	acc.z = imu->acc_mps2[2];
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <Take_IMU_Measurements+0x58>)
 8002002:	6093      	str	r3, [r2, #8]

}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	20000508 	.word	0x20000508
 8002014:	20000514 	.word	0x20000514

08002018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	@ 0x28
 800201c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800201e:	f000 fc7b 	bl	8002918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002022:	f000 f8bf 	bl	80021a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002026:	f000 f985 	bl	8002334 <MX_GPIO_Init>
  MX_DMA_Init();
 800202a:	f000 f95b 	bl	80022e4 <MX_DMA_Init>
  MX_SPI1_Init();
 800202e:	f000 f923 	bl	8002278 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002032:	f007 fd1d 	bl	8009a70 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8002036:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800203a:	f000 fcdf 	bl	80029fc <HAL_Delay>
  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 800203e:	2310      	movs	r3, #16
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	4b4c      	ldr	r3, [pc, #304]	@ (8002174 <main+0x15c>)
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2310      	movs	r3, #16
 8002048:	4a4b      	ldr	r2, [pc, #300]	@ (8002178 <main+0x160>)
 800204a:	494c      	ldr	r1, [pc, #304]	@ (800217c <main+0x164>)
 800204c:	484c      	ldr	r0, [pc, #304]	@ (8002180 <main+0x168>)
 800204e:	f7ff f815 	bl	800107c <BMI088_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  EKF_CalculateGyroBias(&imu, 500);
 8002052:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002056:	484a      	ldr	r0, [pc, #296]	@ (8002180 <main+0x168>)
 8002058:	f7ff ff1e 	bl	8001e98 <EKF_CalculateGyroBias>
  SetQuaternionFromEuler(&q, 0, 0, 0);	// Angles on the starting position: roll=0, pitch=0, yaw=0
 800205c:	ed9f 1a49 	vldr	s2, [pc, #292]	@ 8002184 <main+0x16c>
 8002060:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8002184 <main+0x16c>
 8002064:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8002184 <main+0x16c>
 8002068:	4847      	ldr	r0, [pc, #284]	@ (8002188 <main+0x170>)
 800206a:	f7ff fb2d 	bl	80016c8 <SetQuaternionFromEuler>
  HAL_Delay(1000);
 800206e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002072:	f000 fcc3 	bl	80029fc <HAL_Delay>


  while (1)
  {

	if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB)
 8002076:	f000 fcb5 	bl	80029e4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	4b43      	ldr	r3, [pc, #268]	@ (800218c <main+0x174>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b09      	cmp	r3, #9
 8002084:	d9f7      	bls.n	8002076 <main+0x5e>
	{
		Take_IMU_Measurements(&imu);
 8002086:	483e      	ldr	r0, [pc, #248]	@ (8002180 <main+0x168>)
 8002088:	f7ff ff98 	bl	8001fbc <Take_IMU_Measurements>
		//EKF_FindAngles(acc, gyr, angles);

		float dt = (float)((float)(HAL_GetTick() - timerUSB)) / 1000;
 800208c:	f000 fcaa 	bl	80029e4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	4b3e      	ldr	r3, [pc, #248]	@ (800218c <main+0x174>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002190 <main+0x178>
 80020a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a8:	edc7 7a07 	vstr	s15, [r7, #28]
		timerUSB = HAL_GetTick();
 80020ac:	f000 fc9a 	bl	80029e4 <HAL_GetTick>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4a36      	ldr	r2, [pc, #216]	@ (800218c <main+0x174>)
 80020b4:	6013      	str	r3, [r2, #0]

		UpdateQuaternion(&q, gyr, dt);
 80020b6:	4b37      	ldr	r3, [pc, #220]	@ (8002194 <main+0x17c>)
 80020b8:	edd3 6a00 	vldr	s13, [r3]
 80020bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80020c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80020c4:	edd7 1a07 	vldr	s3, [r7, #28]
 80020c8:	eeb0 0a66 	vmov.f32	s0, s13
 80020cc:	eef0 0a47 	vmov.f32	s1, s14
 80020d0:	eeb0 1a67 	vmov.f32	s2, s15
 80020d4:	482c      	ldr	r0, [pc, #176]	@ (8002188 <main+0x170>)
 80020d6:	f7ff fc3b 	bl	8001950 <UpdateQuaternion>
		CorrectQuaternionWithAccel(&q, acc, 0.9);
 80020da:	4b2f      	ldr	r3, [pc, #188]	@ (8002198 <main+0x180>)
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80020e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80020e8:	eddf 1a2c 	vldr	s3, [pc, #176]	@ 800219c <main+0x184>
 80020ec:	eeb0 0a66 	vmov.f32	s0, s13
 80020f0:	eef0 0a47 	vmov.f32	s1, s14
 80020f4:	eeb0 1a67 	vmov.f32	s2, s15
 80020f8:	4823      	ldr	r0, [pc, #140]	@ (8002188 <main+0x170>)
 80020fa:	f7ff fcfd 	bl	8001af8 <CorrectQuaternionWithAccel>
		QuaternionToEuler(q, angles);
 80020fe:	4b22      	ldr	r3, [pc, #136]	@ (8002188 <main+0x170>)
 8002100:	ed93 6a00 	vldr	s12, [r3]
 8002104:	edd3 6a01 	vldr	s13, [r3, #4]
 8002108:	ed93 7a02 	vldr	s14, [r3, #8]
 800210c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002110:	4823      	ldr	r0, [pc, #140]	@ (80021a0 <main+0x188>)
 8002112:	eeb0 0a46 	vmov.f32	s0, s12
 8002116:	eef0 0a66 	vmov.f32	s1, s13
 800211a:	eeb0 1a47 	vmov.f32	s2, s14
 800211e:	eef0 1a67 	vmov.f32	s3, s15
 8002122:	f7ff fdb9 	bl	8001c98 <QuaternionToEuler>
//#endif //USE_API
//#ifdef USE_API
		else
		{
			//float angles[3] = {angle.roll, angle.pitch, angle.yaw};
			API_PrintAngles(1000*HAL_GetTick(), angles);
 8002126:	f000 fc5d 	bl	80029e4 <HAL_GetTick>
 800212a:	4603      	mov	r3, r0
 800212c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	491a      	ldr	r1, [pc, #104]	@ (80021a0 <main+0x188>)
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fefe 	bl	8000f38 <API_PrintAngles>
			//API_SendInertial(1000*HAL_GetTick(), gyr, acc);
			float gyrArr[3] = {gyr.x, gyr.y, gyr.z};
 800213c:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <main+0x17c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <main+0x17c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <main+0x17c>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	61bb      	str	r3, [r7, #24]
			float accArr[3] = {acc.x, acc.y, acc.z};
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <main+0x180>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <main+0x180>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <main+0x180>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	60fb      	str	r3, [r7, #12]
			API_SendInertial(HAL_GetTick(), gyrArr, accArr);
 8002160:	f000 fc40 	bl	80029e4 <HAL_GetTick>
 8002164:	1d3a      	adds	r2, r7, #4
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4619      	mov	r1, r3
 800216c:	f7fe ff24 	bl	8000fb8 <API_SendInertial>
	if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB)
 8002170:	e781      	b.n	8002076 <main+0x5e>
 8002172:	bf00      	nop
 8002174:	40020800 	.word	0x40020800
 8002178:	40020000 	.word	0x40020000
 800217c:	20000314 	.word	0x20000314
 8002180:	2000042c 	.word	0x2000042c
 8002184:	00000000 	.word	0x00000000
 8002188:	20000000 	.word	0x20000000
 800218c:	20000520 	.word	0x20000520
 8002190:	447a0000 	.word	0x447a0000
 8002194:	20000508 	.word	0x20000508
 8002198:	20000514 	.word	0x20000514
 800219c:	3f666666 	.word	0x3f666666
 80021a0:	200004fc 	.word	0x200004fc

080021a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b094      	sub	sp, #80	@ 0x50
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0320 	add.w	r3, r7, #32
 80021ae:	2230      	movs	r2, #48	@ 0x30
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f008 fef3 	bl	800af9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <SystemClock_Config+0xcc>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	4a27      	ldr	r2, [pc, #156]	@ (8002270 <SystemClock_Config+0xcc>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d8:	4b25      	ldr	r3, [pc, #148]	@ (8002270 <SystemClock_Config+0xcc>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <SystemClock_Config+0xd0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a21      	ldr	r2, [pc, #132]	@ (8002274 <SystemClock_Config+0xd0>)
 80021ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <SystemClock_Config+0xd0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002200:	2301      	movs	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002204:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220a:	2302      	movs	r3, #2
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800220e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002214:	2308      	movs	r3, #8
 8002216:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002218:	23a8      	movs	r3, #168	@ 0xa8
 800221a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800221c:	2302      	movs	r3, #2
 800221e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002220:	2307      	movs	r3, #7
 8002222:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	4618      	mov	r0, r3
 800222a:	f002 fccf 	bl	8004bcc <HAL_RCC_OscConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002234:	f000 f924 	bl	8002480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002238:	230f      	movs	r3, #15
 800223a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223c:	2302      	movs	r3, #2
 800223e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002244:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002248:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800224a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800224e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2105      	movs	r1, #5
 8002256:	4618      	mov	r0, r3
 8002258:	f002 ff30 	bl	80050bc <HAL_RCC_ClockConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002262:	f000 f90d 	bl	8002480 <Error_Handler>
  }
}
 8002266:	bf00      	nop
 8002268:	3750      	adds	r7, #80	@ 0x50
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000

08002278 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800227c:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <MX_SPI1_Init+0x64>)
 800227e:	4a18      	ldr	r2, [pc, #96]	@ (80022e0 <MX_SPI1_Init+0x68>)
 8002280:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002282:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <MX_SPI1_Init+0x64>)
 8002284:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002288:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800228a:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <MX_SPI1_Init+0x64>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <MX_SPI1_Init+0x64>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002296:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <MX_SPI1_Init+0x64>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800229c:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <MX_SPI1_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <MX_SPI1_Init+0x64>)
 80022a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <MX_SPI1_Init+0x64>)
 80022ac:	2210      	movs	r2, #16
 80022ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <MX_SPI1_Init+0x64>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <MX_SPI1_Init+0x64>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022bc:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <MX_SPI1_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <MX_SPI1_Init+0x64>)
 80022c4:	220a      	movs	r2, #10
 80022c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	@ (80022dc <MX_SPI1_Init+0x64>)
 80022ca:	f003 f8ed 	bl	80054a8 <HAL_SPI_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022d4:	f000 f8d4 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000314 	.word	0x20000314
 80022e0:	40013000 	.word	0x40013000

080022e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <MX_DMA_Init+0x4c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002330 <MX_DMA_Init+0x4c>)
 80022f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <MX_DMA_Init+0x4c>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2038      	movs	r0, #56	@ 0x38
 800230c:	f000 fc75 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002310:	2038      	movs	r0, #56	@ 0x38
 8002312:	f000 fc8e 	bl	8002c32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	203b      	movs	r0, #59	@ 0x3b
 800231c:	f000 fc6d 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002320:	203b      	movs	r0, #59	@ 0x3b
 8002322:	f000 fc86 	bl	8002c32 <HAL_NVIC_EnableIRQ>

}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	@ 0x28
 8002338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b48      	ldr	r3, [pc, #288]	@ (8002470 <MX_GPIO_Init+0x13c>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4a47      	ldr	r2, [pc, #284]	@ (8002470 <MX_GPIO_Init+0x13c>)
 8002354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4b45      	ldr	r3, [pc, #276]	@ (8002470 <MX_GPIO_Init+0x13c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b41      	ldr	r3, [pc, #260]	@ (8002470 <MX_GPIO_Init+0x13c>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a40      	ldr	r2, [pc, #256]	@ (8002470 <MX_GPIO_Init+0x13c>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b3e      	ldr	r3, [pc, #248]	@ (8002470 <MX_GPIO_Init+0x13c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <MX_GPIO_Init+0x13c>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4a39      	ldr	r2, [pc, #228]	@ (8002470 <MX_GPIO_Init+0x13c>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4b37      	ldr	r3, [pc, #220]	@ (8002470 <MX_GPIO_Init+0x13c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	4b33      	ldr	r3, [pc, #204]	@ (8002470 <MX_GPIO_Init+0x13c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a32      	ldr	r2, [pc, #200]	@ (8002470 <MX_GPIO_Init+0x13c>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b30      	ldr	r3, [pc, #192]	@ (8002470 <MX_GPIO_Init+0x13c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2110      	movs	r1, #16
 80023be:	482d      	ldr	r0, [pc, #180]	@ (8002474 <MX_GPIO_Init+0x140>)
 80023c0:	f001 f980 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2110      	movs	r1, #16
 80023c8:	482b      	ldr	r0, [pc, #172]	@ (8002478 <MX_GPIO_Init+0x144>)
 80023ca:	f001 f97b 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2110      	movs	r1, #16
 80023d2:	482a      	ldr	r0, [pc, #168]	@ (800247c <MX_GPIO_Init+0x148>)
 80023d4:	f001 f976 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 80023d8:	230c      	movs	r3, #12
 80023da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	4822      	ldr	r0, [pc, #136]	@ (8002478 <MX_GPIO_Init+0x144>)
 80023ee:	f000 ffcd 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 80023f2:	2310      	movs	r3, #16
 80023f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	481a      	ldr	r0, [pc, #104]	@ (8002474 <MX_GPIO_Init+0x140>)
 800240a:	f000 ffbf 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 800240e:	2310      	movs	r3, #16
 8002410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4814      	ldr	r0, [pc, #80]	@ (8002478 <MX_GPIO_Init+0x144>)
 8002426:	f000 ffb1 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800242a:	2310      	movs	r3, #16
 800242c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	480e      	ldr	r0, [pc, #56]	@ (800247c <MX_GPIO_Init+0x148>)
 8002442:	f000 ffa3 	bl	800338c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	2008      	movs	r0, #8
 800244c:	f000 fbd5 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002450:	2008      	movs	r0, #8
 8002452:	f000 fbee 	bl	8002c32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	2009      	movs	r0, #9
 800245c:	f000 fbcd 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002460:	2009      	movs	r0, #9
 8002462:	f000 fbe6 	bl	8002c32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	@ 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020800 	.word	0x40020800
 800247c:	40020400 	.word	0x40020400

08002480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002484:	b672      	cpsid	i
}
 8002486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <Error_Handler+0x8>

0800248c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <HAL_MspInit+0x4c>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	4a0f      	ldr	r2, [pc, #60]	@ (80024d8 <HAL_MspInit+0x4c>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024a2:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <HAL_MspInit+0x4c>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <HAL_MspInit+0x4c>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	4a08      	ldr	r2, [pc, #32]	@ (80024d8 <HAL_MspInit+0x4c>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_MspInit+0x4c>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800

080024dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a4c      	ldr	r2, [pc, #304]	@ (800262c <HAL_SPI_MspInit+0x150>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	f040 8092 	bne.w	8002624 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	4b4a      	ldr	r3, [pc, #296]	@ (8002630 <HAL_SPI_MspInit+0x154>)
 8002506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002508:	4a49      	ldr	r2, [pc, #292]	@ (8002630 <HAL_SPI_MspInit+0x154>)
 800250a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800250e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002510:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_SPI_MspInit+0x154>)
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	4b43      	ldr	r3, [pc, #268]	@ (8002630 <HAL_SPI_MspInit+0x154>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	4a42      	ldr	r2, [pc, #264]	@ (8002630 <HAL_SPI_MspInit+0x154>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6313      	str	r3, [r2, #48]	@ 0x30
 800252c:	4b40      	ldr	r3, [pc, #256]	@ (8002630 <HAL_SPI_MspInit+0x154>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002538:	23e0      	movs	r3, #224	@ 0xe0
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002548:	2305      	movs	r3, #5
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4619      	mov	r1, r3
 8002552:	4838      	ldr	r0, [pc, #224]	@ (8002634 <HAL_SPI_MspInit+0x158>)
 8002554:	f000 ff1a 	bl	800338c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002558:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 800255a:	4a38      	ldr	r2, [pc, #224]	@ (800263c <HAL_SPI_MspInit+0x160>)
 800255c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800255e:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 8002560:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002564:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002566:	4b34      	ldr	r3, [pc, #208]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800256c:	4b32      	ldr	r3, [pc, #200]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002572:	4b31      	ldr	r3, [pc, #196]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 8002574:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002578:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800257a:	4b2f      	ldr	r3, [pc, #188]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 800257c:	2200      	movs	r2, #0
 800257e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002580:	4b2d      	ldr	r3, [pc, #180]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002586:	4b2c      	ldr	r3, [pc, #176]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 8002588:	2200      	movs	r2, #0
 800258a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800258c:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 800258e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002592:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002594:	4b28      	ldr	r3, [pc, #160]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800259a:	4827      	ldr	r0, [pc, #156]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 800259c:	f000 fb64 	bl	8002c68 <HAL_DMA_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80025a6:	f7ff ff6b 	bl	8002480 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a22      	ldr	r2, [pc, #136]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 80025ae:	64da      	str	r2, [r3, #76]	@ 0x4c
 80025b0:	4a21      	ldr	r2, [pc, #132]	@ (8002638 <HAL_SPI_MspInit+0x15c>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80025b6:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025b8:	4a22      	ldr	r2, [pc, #136]	@ (8002644 <HAL_SPI_MspInit+0x168>)
 80025ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80025bc:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025be:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80025c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025c6:	2240      	movs	r2, #64	@ 0x40
 80025c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d8:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025da:	2200      	movs	r2, #0
 80025dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025de:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80025e4:	4b16      	ldr	r3, [pc, #88]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025f0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025f2:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80025f8:	4811      	ldr	r0, [pc, #68]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 80025fa:	f000 fb35 	bl	8002c68 <HAL_DMA_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8002604:	f7ff ff3c 	bl	8002480 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0d      	ldr	r2, [pc, #52]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 800260c:	649a      	str	r2, [r3, #72]	@ 0x48
 800260e:	4a0c      	ldr	r2, [pc, #48]	@ (8002640 <HAL_SPI_MspInit+0x164>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	2023      	movs	r0, #35	@ 0x23
 800261a:	f000 faee 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800261e:	2023      	movs	r0, #35	@ 0x23
 8002620:	f000 fb07 	bl	8002c32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002624:	bf00      	nop
 8002626:	3728      	adds	r7, #40	@ 0x28
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40013000 	.word	0x40013000
 8002630:	40023800 	.word	0x40023800
 8002634:	40020000 	.word	0x40020000
 8002638:	2000036c 	.word	0x2000036c
 800263c:	40026410 	.word	0x40026410
 8002640:	200003cc 	.word	0x200003cc
 8002644:	40026458 	.word	0x40026458

08002648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <NMI_Handler+0x4>

08002650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <HardFault_Handler+0x4>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <MemManage_Handler+0x4>

08002660 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <BusFault_Handler+0x4>

08002668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <UsageFault_Handler+0x4>

08002670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269e:	f000 f98d 	bl	80029bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 80026aa:	2004      	movs	r0, #4
 80026ac:	f001 f824 	bl	80036f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 80026b8:	2008      	movs	r0, #8
 80026ba:	f001 f81d 	bl	80036f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80026c8:	4802      	ldr	r0, [pc, #8]	@ (80026d4 <SPI1_IRQHandler+0x10>)
 80026ca:	f003 fb5f 	bl	8005d8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000314 	.word	0x20000314

080026d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <DMA2_Stream0_IRQHandler+0x10>)
 80026de:	f000 fbeb 	bl	8002eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000036c 	.word	0x2000036c

080026ec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80026f0:	4802      	ldr	r0, [pc, #8]	@ (80026fc <DMA2_Stream3_IRQHandler+0x10>)
 80026f2:	f000 fbe1 	bl	8002eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200003cc 	.word	0x200003cc

08002700 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002704:	4802      	ldr	r0, [pc, #8]	@ (8002710 <OTG_FS_IRQHandler+0x10>)
 8002706:	f001 f953 	bl	80039b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20001a0c 	.word	0x20001a0c

08002714 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return 1;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_kill>:

int _kill(int pid, int sig)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800272e:	f008 fc89 	bl	800b044 <__errno>
 8002732:	4603      	mov	r3, r0
 8002734:	2216      	movs	r2, #22
 8002736:	601a      	str	r2, [r3, #0]
  return -1;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_exit>:

void _exit (int status)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ffe7 	bl	8002724 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002756:	bf00      	nop
 8002758:	e7fd      	b.n	8002756 <_exit+0x12>

0800275a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e00a      	b.n	8002782 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800276c:	f3af 8000 	nop.w
 8002770:	4601      	mov	r1, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	60ba      	str	r2, [r7, #8]
 8002778:	b2ca      	uxtb	r2, r1
 800277a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3301      	adds	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	dbf0      	blt.n	800276c <_read+0x12>
  }

  return len;
 800278a:	687b      	ldr	r3, [r7, #4]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e009      	b.n	80027ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	60ba      	str	r2, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3301      	adds	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	dbf1      	blt.n	80027a6 <_write+0x12>
  }
  return len;
 80027c2:	687b      	ldr	r3, [r7, #4]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_close>:

int _close(int file)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027f4:	605a      	str	r2, [r3, #4]
  return 0;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_isatty>:

int _isatty(int file)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800283c:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <_sbrk+0x5c>)
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <_sbrk+0x60>)
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <_sbrk+0x64>)
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <_sbrk+0x68>)
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <_sbrk+0x64>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d207      	bcs.n	8002874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002864:	f008 fbee 	bl	800b044 <__errno>
 8002868:	4603      	mov	r3, r0
 800286a:	220c      	movs	r2, #12
 800286c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	e009      	b.n	8002888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002874:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800287a:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <_sbrk+0x64>)
 8002884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20020000 	.word	0x20020000
 8002894:	00000400 	.word	0x00000400
 8002898:	20000524 	.word	0x20000524
 800289c:	20002260 	.word	0x20002260

080028a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <SystemInit+0x20>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028aa:	4a05      	ldr	r2, [pc, #20]	@ (80028c0 <SystemInit+0x20>)
 80028ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028c8:	f7ff ffea 	bl	80028a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028cc:	480c      	ldr	r0, [pc, #48]	@ (8002900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ce:	490d      	ldr	r1, [pc, #52]	@ (8002904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d4:	e002      	b.n	80028dc <LoopCopyDataInit>

080028d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028da:	3304      	adds	r3, #4

080028dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e0:	d3f9      	bcc.n	80028d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e2:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e8:	e001      	b.n	80028ee <LoopFillZerobss>

080028ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ec:	3204      	adds	r2, #4

080028ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f0:	d3fb      	bcc.n	80028ea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80028f2:	f008 fbad 	bl	800b050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f6:	f7ff fb8f 	bl	8002018 <main>
  bx  lr    
 80028fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002904:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002908:	0800f028 	.word	0x0800f028
  ldr r2, =_sbss
 800290c:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002910:	2000225c 	.word	0x2000225c

08002914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002914:	e7fe      	b.n	8002914 <ADC_IRQHandler>
	...

08002918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800291c:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <HAL_Init+0x40>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0d      	ldr	r2, [pc, #52]	@ (8002958 <HAL_Init+0x40>)
 8002922:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_Init+0x40>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <HAL_Init+0x40>)
 800292e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002934:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a07      	ldr	r2, [pc, #28]	@ (8002958 <HAL_Init+0x40>)
 800293a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002940:	2003      	movs	r0, #3
 8002942:	f000 f94f 	bl	8002be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002946:	200f      	movs	r0, #15
 8002948:	f000 f808 	bl	800295c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800294c:	f7ff fd9e 	bl	800248c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023c00 	.word	0x40023c00

0800295c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002964:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <HAL_InitTick+0x54>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <HAL_InitTick+0x58>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	4619      	mov	r1, r3
 800296e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002972:	fbb3 f3f1 	udiv	r3, r3, r1
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f967 	bl	8002c4e <HAL_SYSTICK_Config>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e00e      	b.n	80029a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b0f      	cmp	r3, #15
 800298e:	d80a      	bhi.n	80029a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002990:	2200      	movs	r2, #0
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f000 f92f 	bl	8002bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800299c:	4a06      	ldr	r2, [pc, #24]	@ (80029b8 <HAL_InitTick+0x5c>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000010 	.word	0x20000010
 80029b4:	20000018 	.word	0x20000018
 80029b8:	20000014 	.word	0x20000014

080029bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c0:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_IncTick+0x20>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <HAL_IncTick+0x24>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <HAL_IncTick+0x24>)
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000018 	.word	0x20000018
 80029e0:	20000528 	.word	0x20000528

080029e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return uwTick;
 80029e8:	4b03      	ldr	r3, [pc, #12]	@ (80029f8 <HAL_GetTick+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000528 	.word	0x20000528

080029fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a04:	f7ff ffee 	bl	80029e4 <HAL_GetTick>
 8002a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d005      	beq.n	8002a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a16:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <HAL_Delay+0x44>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a22:	bf00      	nop
 8002a24:	f7ff ffde 	bl	80029e4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d8f7      	bhi.n	8002a24 <HAL_Delay+0x28>
  {
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000018 	.word	0x20000018

08002a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a54:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a60:	4013      	ands	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a76:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	60d3      	str	r3, [r2, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a90:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	f003 0307 	and.w	r3, r3, #7
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	db0b      	blt.n	8002ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4907      	ldr	r1, [pc, #28]	@ (8002ae0 <__NVIC_EnableIRQ+0x38>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2001      	movs	r0, #1
 8002aca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000e100 	.word	0xe000e100

08002ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	db0a      	blt.n	8002b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	490c      	ldr	r1, [pc, #48]	@ (8002b30 <__NVIC_SetPriority+0x4c>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	440b      	add	r3, r1
 8002b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b0c:	e00a      	b.n	8002b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4908      	ldr	r1, [pc, #32]	@ (8002b34 <__NVIC_SetPriority+0x50>)
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	3b04      	subs	r3, #4
 8002b1c:	0112      	lsls	r2, r2, #4
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	440b      	add	r3, r1
 8002b22:	761a      	strb	r2, [r3, #24]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000e100 	.word	0xe000e100
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b089      	sub	sp, #36	@ 0x24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f1c3 0307 	rsb	r3, r3, #7
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	bf28      	it	cs
 8002b56:	2304      	movcs	r3, #4
 8002b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d902      	bls.n	8002b68 <NVIC_EncodePriority+0x30>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3b03      	subs	r3, #3
 8002b66:	e000      	b.n	8002b6a <NVIC_EncodePriority+0x32>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	43d9      	mvns	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	4313      	orrs	r3, r2
         );
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3724      	adds	r7, #36	@ 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb0:	d301      	bcc.n	8002bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00f      	b.n	8002bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <SysTick_Config+0x40>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bbe:	210f      	movs	r1, #15
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f7ff ff8e 	bl	8002ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc8:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <SysTick_Config+0x40>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bce:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <SysTick_Config+0x40>)
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	e000e010 	.word	0xe000e010

08002be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff29 	bl	8002a44 <__NVIC_SetPriorityGrouping>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c0c:	f7ff ff3e 	bl	8002a8c <__NVIC_GetPriorityGrouping>
 8002c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	6978      	ldr	r0, [r7, #20]
 8002c18:	f7ff ff8e 	bl	8002b38 <NVIC_EncodePriority>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff5d 	bl	8002ae4 <__NVIC_SetPriority>
}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff31 	bl	8002aa8 <__NVIC_EnableIRQ>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ffa2 	bl	8002ba0 <SysTick_Config>
 8002c5c:	4603      	mov	r3, r0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff feb6 	bl	80029e4 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e099      	b.n	8002db8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca4:	e00f      	b.n	8002cc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca6:	f7ff fe9d 	bl	80029e4 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d908      	bls.n	8002cc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e078      	b.n	8002db8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e8      	bne.n	8002ca6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4b38      	ldr	r3, [pc, #224]	@ (8002dc0 <HAL_DMA_Init+0x158>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d107      	bne.n	8002d30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 0307 	bic.w	r3, r3, #7
 8002d46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d117      	bne.n	8002d8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fa91 	bl	8003294 <DMA_CheckFifoParam>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2240      	movs	r2, #64	@ 0x40
 8002d7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d86:	2301      	movs	r3, #1
 8002d88:	e016      	b.n	8002db8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa48 	bl	8003228 <DMA_CalcBaseAndBitshift>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	223f      	movs	r2, #63	@ 0x3f
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	f010803f 	.word	0xf010803f

08002dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_DMA_Start_IT+0x26>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e040      	b.n	8002e6c <HAL_DMA_Start_IT+0xa8>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d12f      	bne.n	8002e5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f9da 	bl	80031cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1c:	223f      	movs	r2, #63	@ 0x3f
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0216 	orr.w	r2, r2, #22
 8002e32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0208 	orr.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e005      	b.n	8002e6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d004      	beq.n	8002e92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2280      	movs	r2, #128	@ 0x80
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00c      	b.n	8002eac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2205      	movs	r2, #5
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ec4:	4b8e      	ldr	r3, [pc, #568]	@ (8003100 <HAL_DMA_IRQHandler+0x248>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a8e      	ldr	r2, [pc, #568]	@ (8003104 <HAL_DMA_IRQHandler+0x24c>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0a9b      	lsrs	r3, r3, #10
 8002ed0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01a      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f10:	2208      	movs	r2, #8
 8002f12:	409a      	lsls	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d012      	beq.n	8002f5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f46:	2201      	movs	r2, #1
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f52:	f043 0202 	orr.w	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	2204      	movs	r2, #4
 8002f60:	409a      	lsls	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f88:	f043 0204 	orr.w	r2, r3, #4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f94:	2210      	movs	r2, #16
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d043      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d03c      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	2210      	movs	r2, #16
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d018      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d024      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
 8002fe6:	e01f      	b.n	8003028 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01b      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
 8002ff8:	e016      	b.n	8003028 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0208 	bic.w	r2, r2, #8
 8003016:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302c:	2220      	movs	r2, #32
 800302e:	409a      	lsls	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 808f 	beq.w	8003158 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8087 	beq.w	8003158 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	2220      	movs	r2, #32
 8003050:	409a      	lsls	r2, r3
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b05      	cmp	r3, #5
 8003060:	d136      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0216 	bic.w	r2, r2, #22
 8003070:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003080:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d103      	bne.n	8003092 <HAL_DMA_IRQHandler+0x1da>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0208 	bic.w	r2, r2, #8
 80030a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a6:	223f      	movs	r2, #63	@ 0x3f
 80030a8:	409a      	lsls	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d07e      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
        }
        return;
 80030ce:	e079      	b.n	80031c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01d      	beq.n	800311a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10d      	bne.n	8003108 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d031      	beq.n	8003158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
 80030fc:	e02c      	b.n	8003158 <HAL_DMA_IRQHandler+0x2a0>
 80030fe:	bf00      	nop
 8003100:	20000010 	.word	0x20000010
 8003104:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d023      	beq.n	8003158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
 8003118:	e01e      	b.n	8003158 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10f      	bne.n	8003148 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0210 	bic.w	r2, r2, #16
 8003136:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315c:	2b00      	cmp	r3, #0
 800315e:	d032      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2205      	movs	r2, #5
 8003170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3301      	adds	r3, #1
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	d307      	bcc.n	80031a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f2      	bne.n	8003184 <HAL_DMA_IRQHandler+0x2cc>
 800319e:	e000      	b.n	80031a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4798      	blx	r3
 80031c2:	e000      	b.n	80031c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80031c4:	bf00      	nop
    }
  }
}
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b40      	cmp	r3, #64	@ 0x40
 80031f8:	d108      	bne.n	800320c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800320a:	e007      	b.n	800321c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	60da      	str	r2, [r3, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3b10      	subs	r3, #16
 8003238:	4a14      	ldr	r2, [pc, #80]	@ (800328c <DMA_CalcBaseAndBitshift+0x64>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003242:	4a13      	ldr	r2, [pc, #76]	@ (8003290 <DMA_CalcBaseAndBitshift+0x68>)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d909      	bls.n	800326a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	1d1a      	adds	r2, r3, #4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	659a      	str	r2, [r3, #88]	@ 0x58
 8003268:	e007      	b.n	800327a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	aaaaaaab 	.word	0xaaaaaaab
 8003290:	0800e860 	.word	0x0800e860

08003294 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11f      	bne.n	80032ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d856      	bhi.n	8003362 <DMA_CheckFifoParam+0xce>
 80032b4:	a201      	add	r2, pc, #4	@ (adr r2, 80032bc <DMA_CheckFifoParam+0x28>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032df 	.word	0x080032df
 80032c4:	080032cd 	.word	0x080032cd
 80032c8:	08003363 	.word	0x08003363
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d046      	beq.n	8003366 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032dc:	e043      	b.n	8003366 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032e6:	d140      	bne.n	800336a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ec:	e03d      	b.n	800336a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f6:	d121      	bne.n	800333c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d837      	bhi.n	800336e <DMA_CheckFifoParam+0xda>
 80032fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <DMA_CheckFifoParam+0x70>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003315 	.word	0x08003315
 8003308:	0800331b 	.word	0x0800331b
 800330c:	08003315 	.word	0x08003315
 8003310:	0800332d 	.word	0x0800332d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      break;
 8003318:	e030      	b.n	800337c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d025      	beq.n	8003372 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332a:	e022      	b.n	8003372 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003334:	d11f      	bne.n	8003376 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800333a:	e01c      	b.n	8003376 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d903      	bls.n	800334a <DMA_CheckFifoParam+0xb6>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d003      	beq.n	8003350 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003348:	e018      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
      break;
 800334e:	e015      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      break;
 8003360:	e00b      	b.n	800337a <DMA_CheckFifoParam+0xe6>
      break;
 8003362:	bf00      	nop
 8003364:	e00a      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e008      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e006      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e004      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e002      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;   
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 800337a:	bf00      	nop
    }
  } 
  
  return status; 
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	@ 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e16b      	b.n	8003680 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a8:	2201      	movs	r2, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	f040 815a 	bne.w	800367a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d005      	beq.n	80033de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d130      	bne.n	8003440 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	2203      	movs	r2, #3
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003414:	2201      	movs	r2, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 0201 	and.w	r2, r3, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b03      	cmp	r3, #3
 800344a:	d017      	beq.n	800347c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d123      	bne.n	80034d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	08da      	lsrs	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3208      	adds	r2, #8
 8003490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	220f      	movs	r2, #15
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	08da      	lsrs	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3208      	adds	r2, #8
 80034ca:	69b9      	ldr	r1, [r7, #24]
 80034cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0203 	and.w	r2, r3, #3
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80b4 	beq.w	800367a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b60      	ldr	r3, [pc, #384]	@ (8003698 <HAL_GPIO_Init+0x30c>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	4a5f      	ldr	r2, [pc, #380]	@ (8003698 <HAL_GPIO_Init+0x30c>)
 800351c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003520:	6453      	str	r3, [r2, #68]	@ 0x44
 8003522:	4b5d      	ldr	r3, [pc, #372]	@ (8003698 <HAL_GPIO_Init+0x30c>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352e:	4a5b      	ldr	r2, [pc, #364]	@ (800369c <HAL_GPIO_Init+0x310>)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3302      	adds	r3, #2
 8003536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	220f      	movs	r2, #15
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a52      	ldr	r2, [pc, #328]	@ (80036a0 <HAL_GPIO_Init+0x314>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d02b      	beq.n	80035b2 <HAL_GPIO_Init+0x226>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a51      	ldr	r2, [pc, #324]	@ (80036a4 <HAL_GPIO_Init+0x318>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d025      	beq.n	80035ae <HAL_GPIO_Init+0x222>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a50      	ldr	r2, [pc, #320]	@ (80036a8 <HAL_GPIO_Init+0x31c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01f      	beq.n	80035aa <HAL_GPIO_Init+0x21e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4f      	ldr	r2, [pc, #316]	@ (80036ac <HAL_GPIO_Init+0x320>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d019      	beq.n	80035a6 <HAL_GPIO_Init+0x21a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4e      	ldr	r2, [pc, #312]	@ (80036b0 <HAL_GPIO_Init+0x324>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_GPIO_Init+0x216>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4d      	ldr	r2, [pc, #308]	@ (80036b4 <HAL_GPIO_Init+0x328>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00d      	beq.n	800359e <HAL_GPIO_Init+0x212>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4c      	ldr	r2, [pc, #304]	@ (80036b8 <HAL_GPIO_Init+0x32c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_Init+0x20e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4b      	ldr	r2, [pc, #300]	@ (80036bc <HAL_GPIO_Init+0x330>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_GPIO_Init+0x20a>
 8003592:	2307      	movs	r3, #7
 8003594:	e00e      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 8003596:	2308      	movs	r3, #8
 8003598:	e00c      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 800359a:	2306      	movs	r3, #6
 800359c:	e00a      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 800359e:	2305      	movs	r3, #5
 80035a0:	e008      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 80035a2:	2304      	movs	r3, #4
 80035a4:	e006      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 80035a6:	2303      	movs	r3, #3
 80035a8:	e004      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e002      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 80035b2:	2300      	movs	r3, #0
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	f002 0203 	and.w	r2, r2, #3
 80035ba:	0092      	lsls	r2, r2, #2
 80035bc:	4093      	lsls	r3, r2
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c4:	4935      	ldr	r1, [pc, #212]	@ (800369c <HAL_GPIO_Init+0x310>)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	3302      	adds	r3, #2
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d2:	4b3b      	ldr	r3, [pc, #236]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035f6:	4a32      	ldr	r2, [pc, #200]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035fc:	4b30      	ldr	r3, [pc, #192]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003620:	4a27      	ldr	r2, [pc, #156]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003626:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364a:	4a1d      	ldr	r2, [pc, #116]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003650:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003674:	4a12      	ldr	r2, [pc, #72]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3301      	adds	r3, #1
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b0f      	cmp	r3, #15
 8003684:	f67f ae90 	bls.w	80033a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3724      	adds	r7, #36	@ 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40013800 	.word	0x40013800
 80036a0:	40020000 	.word	0x40020000
 80036a4:	40020400 	.word	0x40020400
 80036a8:	40020800 	.word	0x40020800
 80036ac:	40020c00 	.word	0x40020c00
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40021400 	.word	0x40021400
 80036b8:	40021800 	.word	0x40021800
 80036bc:	40021c00 	.word	0x40021c00
 80036c0:	40013c00 	.word	0x40013c00

080036c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
 80036d0:	4613      	mov	r3, r2
 80036d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d4:	787b      	ldrb	r3, [r7, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e0:	e003      	b.n	80036ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	041a      	lsls	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	619a      	str	r2, [r3, #24]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003702:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d006      	beq.n	800371c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800370e:	4a05      	ldr	r2, [pc, #20]	@ (8003724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fc18 	bl	8001f4c <HAL_GPIO_EXTI_Callback>
  }
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40013c00 	.word	0x40013c00

08003728 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af02      	add	r7, sp, #8
 800372e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e101      	b.n	800393e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f006 fb91 	bl	8009e7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2203      	movs	r2, #3
 800375e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003768:	d102      	bne.n	8003770 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f002 ff78 	bl	800666a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7c1a      	ldrb	r2, [r3, #16]
 8003782:	f88d 2000 	strb.w	r2, [sp]
 8003786:	3304      	adds	r3, #4
 8003788:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378a:	f002 fe57 	bl	800643c <USB_CoreInit>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0ce      	b.n	800393e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f002 ff70 	bl	800668c <USB_SetCurrentMode>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0bf      	b.n	800393e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	e04a      	b.n	800385a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	3315      	adds	r3, #21
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3314      	adds	r3, #20
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	b298      	uxth	r0, r3
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	332e      	adds	r3, #46	@ 0x2e
 8003800:	4602      	mov	r2, r0
 8003802:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	3318      	adds	r3, #24
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	331c      	adds	r3, #28
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3320      	adds	r3, #32
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3324      	adds	r3, #36	@ 0x24
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	3301      	adds	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	791b      	ldrb	r3, [r3, #4]
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	429a      	cmp	r2, r3
 8003862:	d3af      	bcc.n	80037c4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003864:	2300      	movs	r3, #0
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e044      	b.n	80038f4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	3301      	adds	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	791b      	ldrb	r3, [r3, #4]
 80038f8:	7bfa      	ldrb	r2, [r7, #15]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d3b5      	bcc.n	800386a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7c1a      	ldrb	r2, [r3, #16]
 8003906:	f88d 2000 	strb.w	r2, [sp]
 800390a:	3304      	adds	r3, #4
 800390c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800390e:	f002 ff09 	bl	8006724 <USB_DevInit>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e00c      	b.n	800393e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f003 ff53 	bl	80077e2 <USB_DevDisconnect>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_PCD_Start+0x1c>
 800395e:	2302      	movs	r3, #2
 8003960:	e022      	b.n	80039a8 <HAL_PCD_Start+0x62>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003982:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f002 fe5a 	bl	8006648 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f003 ff01 	bl	80077a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b08d      	sub	sp, #52	@ 0x34
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f003 ffbf 	bl	800794a <USB_GetMode>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 848c 	bne.w	80042ec <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 ff23 	bl	8007824 <USB_ReadInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8482 	beq.w	80042ea <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 ff10 	bl	8007824 <USB_ReadInterrupts>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d107      	bne.n	8003a1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f002 0202 	and.w	r2, r2, #2
 8003a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f003 fefe 	bl	8007824 <USB_ReadInterrupts>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d161      	bne.n	8003af6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0210 	bic.w	r2, r2, #16
 8003a40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f003 020f 	and.w	r2, r3, #15
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3304      	adds	r3, #4
 8003a60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	0c5b      	lsrs	r3, r3, #17
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d124      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d035      	beq.n	8003ae6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6a38      	ldr	r0, [r7, #32]
 8003a8e:	f003 fd35 	bl	80074fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a9e:	441a      	add	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	695a      	ldr	r2, [r3, #20]
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab0:	441a      	add	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	615a      	str	r2, [r3, #20]
 8003ab6:	e016      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	0c5b      	lsrs	r3, r3, #17
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	2b06      	cmp	r3, #6
 8003ac2:	d110      	bne.n	8003ae6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003aca:	2208      	movs	r2, #8
 8003acc:	4619      	mov	r1, r3
 8003ace:	6a38      	ldr	r0, [r7, #32]
 8003ad0:	f003 fd14 	bl	80074fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ae0:	441a      	add	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0210 	orr.w	r2, r2, #16
 8003af4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f003 fe92 	bl	8007824 <USB_ReadInterrupts>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b0a:	f040 80a7 	bne.w	8003c5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 fe97 	bl	800784a <USB_ReadDevAllOutEpInterrupt>
 8003b1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003b1e:	e099      	b.n	8003c54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 808e 	beq.w	8003c48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 febb 	bl	80078b2 <USB_ReadDevOutEPInterrupt>
 8003b3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b54:	461a      	mov	r2, r3
 8003b56:	2301      	movs	r3, #1
 8003b58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fea3 	bl	80048a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 ff79 	bl	8004a78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d030      	beq.n	8003c0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb4:	2b80      	cmp	r3, #128	@ 0x80
 8003bb6:	d109      	bne.n	8003bcc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d108      	bne.n	8003bfc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2200      	movs	r2, #0
 8003bee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f006 fa46 	bl	800a088 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c24:	461a      	mov	r2, r3
 8003c26:	2320      	movs	r3, #32
 8003c28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c40:	461a      	mov	r2, r3
 8003c42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f47f af62 	bne.w	8003b20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f003 fddf 	bl	8007824 <USB_ReadInterrupts>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c70:	f040 80db 	bne.w	8003e2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f003 fe00 	bl	800787e <USB_ReadDevAllInEpInterrupt>
 8003c7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003c84:	e0cd      	b.n	8003e22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80c2 	beq.w	8003e16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f003 fe26 	bl	80078ee <USB_ReadDevInEPInterrupt>
 8003ca2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d057      	beq.n	8003d5e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69f9      	ldr	r1, [r7, #28]
 8003cca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cce:	4013      	ands	r3, r2
 8003cd0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	799b      	ldrb	r3, [r3, #6]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d132      	bne.n	8003d52 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3320      	adds	r3, #32
 8003cfc:	6819      	ldr	r1, [r3, #0]
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4403      	add	r3, r0
 8003d0c:	331c      	adds	r3, #28
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4419      	add	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4403      	add	r3, r0
 8003d20:	3320      	adds	r3, #32
 8003d22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d113      	bne.n	8003d52 <HAL_PCD_IRQHandler+0x3a2>
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2e:	4613      	mov	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	3324      	adds	r3, #36	@ 0x24
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	f003 fe2d 	bl	80079ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f006 f910 	bl	8009f7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d74:	461a      	mov	r2, r3
 8003d76:	2308      	movs	r3, #8
 8003d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d90:	461a      	mov	r2, r3
 8003d92:	2310      	movs	r3, #16
 8003d94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dac:	461a      	mov	r2, r3
 8003dae:	2340      	movs	r3, #64	@ 0x40
 8003db0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d023      	beq.n	8003e04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003dbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dbe:	6a38      	ldr	r0, [r7, #32]
 8003dc0:	f002 fe14 	bl	80069ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	3310      	adds	r3, #16
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	78db      	ldrb	r3, [r3, #3]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d108      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2200      	movs	r2, #0
 8003de4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f006 f95d 	bl	800a0ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2302      	movs	r3, #2
 8003e02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fcbd 	bl	8004790 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	3301      	adds	r3, #1
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f47f af2e 	bne.w	8003c86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f003 fcf8 	bl	8007824 <USB_ReadInterrupts>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e3e:	d122      	bne.n	8003e86 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d108      	bne.n	8003e70 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e66:	2100      	movs	r1, #0
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fea3 	bl	8004bb4 <HAL_PCDEx_LPM_Callback>
 8003e6e:	e002      	b.n	8003e76 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f006 f8fb 	bl	800a06c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f003 fcca 	bl	8007824 <USB_ReadInterrupts>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e9a:	d112      	bne.n	8003ec2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f006 f8b7 	bl	800a020 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ec0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f003 fcac 	bl	8007824 <USB_ReadInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed6:	f040 80b7 	bne.w	8004048 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2110      	movs	r1, #16
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f002 fd79 	bl	80069ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003efe:	e046      	b.n	8003f8e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f24:	0151      	lsls	r1, r2, #5
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	440a      	add	r2, r1
 8003f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f40:	461a      	mov	r2, r3
 8003f42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f58:	0151      	lsls	r1, r2, #5
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	440a      	add	r2, r1
 8003f5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f78:	0151      	lsls	r1, r2, #5
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	791b      	ldrb	r3, [r3, #4]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d3b2      	bcc.n	8003f00 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fa8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003fac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7bdb      	ldrb	r3, [r3, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc6:	f043 030b 	orr.w	r3, r3, #11
 8003fca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fdc:	f043 030b 	orr.w	r3, r3, #11
 8003fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fe2:	e015      	b.n	8004010 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ff2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ff6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003ffa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800400a:	f043 030b 	orr.w	r3, r3, #11
 800400e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800401e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004022:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004032:	461a      	mov	r2, r3
 8004034:	f003 fcba 	bl	80079ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f003 fbe9 	bl	8007824 <USB_ReadInterrupts>
 8004052:	4603      	mov	r3, r0
 8004054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800405c:	d123      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f003 fc7f 	bl	8007966 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f002 fd36 	bl	8006ade <USB_GetDevSpeed>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681c      	ldr	r4, [r3, #0]
 800407e:	f001 fa07 	bl	8005490 <HAL_RCC_GetHCLKFreq>
 8004082:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004088:	461a      	mov	r2, r3
 800408a:	4620      	mov	r0, r4
 800408c:	f002 fa3a 	bl	8006504 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f005 ff9c 	bl	8009fce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80040a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f003 fbba 	bl	8007824 <USB_ReadInterrupts>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d10a      	bne.n	80040d0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f005 ff79 	bl	8009fb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f002 0208 	and.w	r2, r2, #8
 80040ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f003 fba5 	bl	8007824 <USB_ReadInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e0:	2b80      	cmp	r3, #128	@ 0x80
 80040e2:	d123      	bne.n	800412c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040f0:	2301      	movs	r3, #1
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f4:	e014      	b.n	8004120 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d105      	bne.n	800411a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fb0a 	bl	800472e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	3301      	adds	r3, #1
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	791b      	ldrb	r3, [r3, #4]
 8004124:	461a      	mov	r2, r3
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	4293      	cmp	r3, r2
 800412a:	d3e4      	bcc.n	80040f6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f003 fb77 	bl	8007824 <USB_ReadInterrupts>
 8004136:	4603      	mov	r3, r0
 8004138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800413c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004140:	d13c      	bne.n	80041bc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004142:	2301      	movs	r3, #1
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24
 8004146:	e02b      	b.n	80041a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3318      	adds	r3, #24
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d115      	bne.n	800419a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800416e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004170:	2b00      	cmp	r3, #0
 8004172:	da12      	bge.n	800419a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	3317      	adds	r3, #23
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004190:	b2db      	uxtb	r3, r3
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 faca 	bl	800472e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	3301      	adds	r3, #1
 800419e:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	791b      	ldrb	r3, [r3, #4]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d3cd      	bcc.n	8004148 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80041ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f003 fb2f 	bl	8007824 <USB_ReadInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041d0:	d156      	bne.n	8004280 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041d2:	2301      	movs	r3, #1
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d6:	e045      	b.n	8004264 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d12e      	bne.n	800425e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004200:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004202:	2b00      	cmp	r3, #0
 8004204:	da2b      	bge.n	800425e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004212:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004216:	429a      	cmp	r2, r3
 8004218:	d121      	bne.n	800425e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800422c:	2201      	movs	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800425a:	6053      	str	r3, [r2, #4]
            break;
 800425c:	e008      	b.n	8004270 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	3301      	adds	r3, #1
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	791b      	ldrb	r3, [r3, #4]
 8004268:	461a      	mov	r2, r3
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	4293      	cmp	r3, r2
 800426e:	d3b3      	bcc.n	80041d8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800427e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f003 facd 	bl	8007824 <USB_ReadInterrupts>
 800428a:	4603      	mov	r3, r0
 800428c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004294:	d10a      	bne.n	80042ac <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f005 ff1a 	bl	800a0d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80042aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f003 fab7 	bl	8007824 <USB_ReadInterrupts>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d115      	bne.n	80042ec <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f005 ff0a 	bl	800a0ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6859      	ldr	r1, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	e000      	b.n	80042ec <HAL_PCD_IRQHandler+0x93c>
      return;
 80042ea:	bf00      	nop
    }
  }
}
 80042ec:	3734      	adds	r7, #52	@ 0x34
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd90      	pop	{r4, r7, pc}

080042f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_PCD_SetAddress+0x1a>
 8004308:	2302      	movs	r3, #2
 800430a:	e012      	b.n	8004332 <HAL_PCD_SetAddress+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f003 fa16 	bl	8007754 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	4608      	mov	r0, r1
 8004344:	4611      	mov	r1, r2
 8004346:	461a      	mov	r2, r3
 8004348:	4603      	mov	r3, r0
 800434a:	70fb      	strb	r3, [r7, #3]
 800434c:	460b      	mov	r3, r1
 800434e:	803b      	strh	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800435c:	2b00      	cmp	r3, #0
 800435e:	da0f      	bge.n	8004380 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	f003 020f 	and.w	r2, r3, #15
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	3310      	adds	r3, #16
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	3304      	adds	r3, #4
 8004376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	705a      	strb	r2, [r3, #1]
 800437e:	e00f      	b.n	80043a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 020f 	and.w	r2, r3, #15
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4413      	add	r3, r2
 8004396:	3304      	adds	r3, #4
 8004398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80043ac:	883b      	ldrh	r3, [r7, #0]
 80043ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	78ba      	ldrb	r2, [r7, #2]
 80043ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043ce:	78bb      	ldrb	r3, [r7, #2]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d102      	bne.n	80043da <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_PCD_EP_Open+0xae>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e00e      	b.n	8004406 <HAL_PCD_EP_Open+0xcc>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68f9      	ldr	r1, [r7, #12]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f002 fb96 	bl	8006b28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004404:	7afb      	ldrb	r3, [r7, #11]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	460b      	mov	r3, r1
 8004418:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800441a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800441e:	2b00      	cmp	r3, #0
 8004420:	da0f      	bge.n	8004442 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	f003 020f 	and.w	r2, r3, #15
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	3310      	adds	r3, #16
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	3304      	adds	r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	705a      	strb	r2, [r3, #1]
 8004440:	e00f      	b.n	8004462 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	f003 020f 	and.w	r2, r3, #15
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4413      	add	r3, r2
 8004458:	3304      	adds	r3, #4
 800445a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	b2da      	uxtb	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_PCD_EP_Close+0x6e>
 8004478:	2302      	movs	r3, #2
 800447a:	e00e      	b.n	800449a <HAL_PCD_EP_Close+0x8c>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68f9      	ldr	r1, [r7, #12]
 800448a:	4618      	mov	r0, r3
 800448c:	f002 fbd4 	bl	8006c38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b086      	sub	sp, #24
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	460b      	mov	r3, r1
 80044b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044b2:	7afb      	ldrb	r3, [r7, #11]
 80044b4:	f003 020f 	and.w	r2, r3, #15
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4413      	add	r3, r2
 80044c8:	3304      	adds	r3, #4
 80044ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2200      	movs	r2, #0
 80044dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044e4:	7afb      	ldrb	r3, [r7, #11]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	799b      	ldrb	r3, [r3, #6]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d102      	bne.n	80044fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	799b      	ldrb	r3, [r3, #6]
 8004506:	461a      	mov	r2, r3
 8004508:	6979      	ldr	r1, [r7, #20]
 800450a:	f002 fc71 	bl	8006df0 <USB_EPStartXfer>

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	f003 020f 	and.w	r2, r3, #15
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	460b      	mov	r3, r1
 8004556:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004558:	7afb      	ldrb	r3, [r7, #11]
 800455a:	f003 020f 	and.w	r2, r3, #15
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	3310      	adds	r3, #16
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2200      	movs	r2, #0
 8004580:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2201      	movs	r2, #1
 8004586:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004588:	7afb      	ldrb	r3, [r7, #11]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	b2da      	uxtb	r2, r3
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	799b      	ldrb	r3, [r3, #6]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d102      	bne.n	80045a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	799b      	ldrb	r3, [r3, #6]
 80045aa:	461a      	mov	r2, r3
 80045ac:	6979      	ldr	r1, [r7, #20]
 80045ae:	f002 fc1f 	bl	8006df0 <USB_EPStartXfer>

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	7912      	ldrb	r2, [r2, #4]
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e04f      	b.n	800467a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	da0f      	bge.n	8004602 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	f003 020f 	and.w	r2, r3, #15
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	3310      	adds	r3, #16
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	3304      	adds	r3, #4
 80045f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	705a      	strb	r2, [r3, #1]
 8004600:	e00d      	b.n	800461e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	3304      	adds	r3, #4
 8004616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_PCD_EP_SetStall+0x82>
 800463a:	2302      	movs	r3, #2
 800463c:	e01d      	b.n	800467a <HAL_PCD_EP_SetStall+0xbe>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68f9      	ldr	r1, [r7, #12]
 800464c:	4618      	mov	r0, r3
 800464e:	f002 ffad 	bl	80075ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	7999      	ldrb	r1, [r3, #6]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800466a:	461a      	mov	r2, r3
 800466c:	f003 f99e 	bl	80079ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	460b      	mov	r3, r1
 800468c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	7912      	ldrb	r2, [r2, #4]
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e042      	b.n	8004726 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	da0f      	bge.n	80046c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	f003 020f 	and.w	r2, r3, #15
 80046ae:	4613      	mov	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	3310      	adds	r3, #16
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4413      	add	r3, r2
 80046bc:	3304      	adds	r3, #4
 80046be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	705a      	strb	r2, [r3, #1]
 80046c6:	e00f      	b.n	80046e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	f003 020f 	and.w	r2, r3, #15
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	3304      	adds	r3, #4
 80046e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_PCD_EP_ClrStall+0x86>
 8004704:	2302      	movs	r3, #2
 8004706:	e00e      	b.n	8004726 <HAL_PCD_EP_ClrStall+0xa4>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	4618      	mov	r0, r3
 8004718:	f002 ffb6 	bl	8007688 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800473a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800473e:	2b00      	cmp	r3, #0
 8004740:	da0c      	bge.n	800475c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	f003 020f 	and.w	r2, r3, #15
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	3310      	adds	r3, #16
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	3304      	adds	r3, #4
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	e00c      	b.n	8004776 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	f003 020f 	and.w	r2, r3, #15
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	3304      	adds	r3, #4
 8004774:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	4618      	mov	r0, r3
 800477e:	f002 fdd5 	bl	800732c <USB_EPStopXfer>
 8004782:	4603      	mov	r3, r0
 8004784:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004786:	7afb      	ldrb	r3, [r7, #11]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	@ 0x28
 8004794:	af02      	add	r7, sp, #8
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	3310      	adds	r3, #16
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	3304      	adds	r3, #4
 80047b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d901      	bls.n	80047c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e06b      	b.n	80048a0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d902      	bls.n	80047e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	3303      	adds	r3, #3
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047ec:	e02a      	b.n	8004844 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	429a      	cmp	r2, r3
 8004802:	d902      	bls.n	800480a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	3303      	adds	r3, #3
 800480e:	089b      	lsrs	r3, r3, #2
 8004810:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68d9      	ldr	r1, [r3, #12]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4603      	mov	r3, r0
 8004826:	6978      	ldr	r0, [r7, #20]
 8004828:	f002 fe2a 	bl	8007480 <USB_WritePacket>

    ep->xfer_buff  += len;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	441a      	add	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	441a      	add	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	429a      	cmp	r2, r3
 8004858:	d809      	bhi.n	800486e <PCD_WriteEmptyTxFifo+0xde>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004862:	429a      	cmp	r2, r3
 8004864:	d203      	bcs.n	800486e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1bf      	bne.n	80047ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	429a      	cmp	r2, r3
 8004878:	d811      	bhi.n	800489e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	2201      	movs	r2, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800488e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	43db      	mvns	r3, r3
 8004894:	6939      	ldr	r1, [r7, #16]
 8004896:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800489a:	4013      	ands	r3, r2
 800489c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	333c      	adds	r3, #60	@ 0x3c
 80048c0:	3304      	adds	r3, #4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	799b      	ldrb	r3, [r3, #6]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d17b      	bne.n	80049d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d015      	beq.n	8004914 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	4a61      	ldr	r2, [pc, #388]	@ (8004a70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	f240 80b9 	bls.w	8004a64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80b3 	beq.w	8004a64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800490a:	461a      	mov	r2, r3
 800490c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004910:	6093      	str	r3, [r2, #8]
 8004912:	e0a7      	b.n	8004a64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492a:	461a      	mov	r2, r3
 800492c:	2320      	movs	r3, #32
 800492e:	6093      	str	r3, [r2, #8]
 8004930:	e098      	b.n	8004a64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	f040 8093 	bne.w	8004a64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	4a4b      	ldr	r2, [pc, #300]	@ (8004a70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d90f      	bls.n	8004966 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495c:	461a      	mov	r2, r3
 800495e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004962:	6093      	str	r3, [r2, #8]
 8004964:	e07e      	b.n	8004a64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	3304      	adds	r3, #4
 800497a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1a      	ldr	r2, [r3, #32]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	0159      	lsls	r1, r3, #5
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	440b      	add	r3, r1
 8004988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004992:	1ad2      	subs	r2, r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d114      	bne.n	80049c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80049b0:	461a      	mov	r2, r3
 80049b2:	2101      	movs	r1, #1
 80049b4:	f002 fffa 	bl	80079ac <USB_EP0_OutStart>
 80049b8:	e006      	b.n	80049c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	441a      	add	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f005 faba 	bl	8009f48 <HAL_PCD_DataOutStageCallback>
 80049d4:	e046      	b.n	8004a64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	4a26      	ldr	r2, [pc, #152]	@ (8004a74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d124      	bne.n	8004a28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f4:	461a      	mov	r2, r3
 80049f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049fa:	6093      	str	r3, [r2, #8]
 80049fc:	e032      	b.n	8004a64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a14:	461a      	mov	r2, r3
 8004a16:	2320      	movs	r3, #32
 8004a18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f005 fa91 	bl	8009f48 <HAL_PCD_DataOutStageCallback>
 8004a26:	e01d      	b.n	8004a64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d114      	bne.n	8004a58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d108      	bne.n	8004a58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a50:	461a      	mov	r2, r3
 8004a52:	2100      	movs	r1, #0
 8004a54:	f002 ffaa 	bl	80079ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f005 fa72 	bl	8009f48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	4f54300a 	.word	0x4f54300a
 8004a74:	4f54310a 	.word	0x4f54310a

08004a78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	333c      	adds	r3, #60	@ 0x3c
 8004a90:	3304      	adds	r3, #4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a15      	ldr	r2, [pc, #84]	@ (8004b00 <PCD_EP_OutSetupPacket_int+0x88>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d90e      	bls.n	8004acc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d009      	beq.n	8004acc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f005 fa29 	bl	8009f24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8004b00 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d90c      	bls.n	8004af4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	799b      	ldrb	r3, [r3, #6]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d108      	bne.n	8004af4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004aec:	461a      	mov	r2, r3
 8004aee:	2101      	movs	r1, #1
 8004af0:	f002 ff5c 	bl	80079ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	4f54300a 	.word	0x4f54300a

08004b04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	70fb      	strb	r3, [r7, #3]
 8004b10:	4613      	mov	r3, r2
 8004b12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d107      	bne.n	8004b32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b22:	883b      	ldrh	r3, [r7, #0]
 8004b24:	0419      	lsls	r1, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b30:	e028      	b.n	8004b84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]
 8004b44:	e00d      	b.n	8004b62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	3340      	adds	r3, #64	@ 0x40
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	4413      	add	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
 8004b62:	7bfa      	ldrb	r2, [r7, #15]
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d3ec      	bcc.n	8004b46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b6c:	883b      	ldrh	r3, [r7, #0]
 8004b6e:	0418      	lsls	r0, r3, #16
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	4302      	orrs	r2, r0
 8004b7c:	3340      	adds	r3, #64	@ 0x40
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	887a      	ldrh	r2, [r7, #2]
 8004ba4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e267      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d075      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bea:	4b88      	ldr	r3, [pc, #544]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d00c      	beq.n	8004c10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf6:	4b85      	ldr	r3, [pc, #532]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d112      	bne.n	8004c28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c02:	4b82      	ldr	r3, [pc, #520]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c0e:	d10b      	bne.n	8004c28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c10:	4b7e      	ldr	r3, [pc, #504]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d05b      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x108>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d157      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e242      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c30:	d106      	bne.n	8004c40 <HAL_RCC_OscConfig+0x74>
 8004c32:	4b76      	ldr	r3, [pc, #472]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a75      	ldr	r2, [pc, #468]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e01d      	b.n	8004c7c <HAL_RCC_OscConfig+0xb0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCC_OscConfig+0x98>
 8004c4a:	4b70      	ldr	r3, [pc, #448]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a6f      	ldr	r2, [pc, #444]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b6d      	ldr	r3, [pc, #436]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e00b      	b.n	8004c7c <HAL_RCC_OscConfig+0xb0>
 8004c64:	4b69      	ldr	r3, [pc, #420]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a68      	ldr	r2, [pc, #416]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b66      	ldr	r3, [pc, #408]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a65      	ldr	r2, [pc, #404]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fd feae 	bl	80029e4 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7fd feaa 	bl	80029e4 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	@ 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e207      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0xc0>
 8004caa:	e014      	b.n	8004cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cac:	f7fd fe9a 	bl	80029e4 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7fd fe96 	bl	80029e4 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	@ 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e1f3      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc6:	4b51      	ldr	r3, [pc, #324]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0xe8>
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d063      	beq.n	8004daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cee:	4b47      	ldr	r3, [pc, #284]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d11c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cfa:	4b44      	ldr	r3, [pc, #272]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d116      	bne.n	8004d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d06:	4b41      	ldr	r3, [pc, #260]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_RCC_OscConfig+0x152>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d001      	beq.n	8004d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e1c7      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4937      	ldr	r1, [pc, #220]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d32:	e03a      	b.n	8004daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d020      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d3c:	4b34      	ldr	r3, [pc, #208]	@ (8004e10 <HAL_RCC_OscConfig+0x244>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d42:	f7fd fe4f 	bl	80029e4 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4a:	f7fd fe4b 	bl	80029e4 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e1a8      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d68:	4b28      	ldr	r3, [pc, #160]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4925      	ldr	r1, [pc, #148]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	600b      	str	r3, [r1, #0]
 8004d7c:	e015      	b.n	8004daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d7e:	4b24      	ldr	r3, [pc, #144]	@ (8004e10 <HAL_RCC_OscConfig+0x244>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fd fe2e 	bl	80029e4 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8c:	f7fd fe2a 	bl	80029e4 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e187      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d036      	beq.n	8004e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d016      	beq.n	8004dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dbe:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <HAL_RCC_OscConfig+0x248>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fd fe0e 	bl	80029e4 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dcc:	f7fd fe0a 	bl	80029e4 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e167      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dde:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <HAL_RCC_OscConfig+0x240>)
 8004de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0x200>
 8004dea:	e01b      	b.n	8004e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dec:	4b09      	ldr	r3, [pc, #36]	@ (8004e14 <HAL_RCC_OscConfig+0x248>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df2:	f7fd fdf7 	bl	80029e4 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df8:	e00e      	b.n	8004e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfa:	f7fd fdf3 	bl	80029e4 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d907      	bls.n	8004e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e150      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	42470000 	.word	0x42470000
 8004e14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e18:	4b88      	ldr	r3, [pc, #544]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1ea      	bne.n	8004dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8097 	beq.w	8004f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e32:	2300      	movs	r3, #0
 8004e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e36:	4b81      	ldr	r3, [pc, #516]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	4b7d      	ldr	r3, [pc, #500]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	4a7c      	ldr	r2, [pc, #496]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e52:	4b7a      	ldr	r3, [pc, #488]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e62:	4b77      	ldr	r3, [pc, #476]	@ (8005040 <HAL_RCC_OscConfig+0x474>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d118      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e6e:	4b74      	ldr	r3, [pc, #464]	@ (8005040 <HAL_RCC_OscConfig+0x474>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a73      	ldr	r2, [pc, #460]	@ (8005040 <HAL_RCC_OscConfig+0x474>)
 8004e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e7a:	f7fd fdb3 	bl	80029e4 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e82:	f7fd fdaf 	bl	80029e4 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e10c      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e94:	4b6a      	ldr	r3, [pc, #424]	@ (8005040 <HAL_RCC_OscConfig+0x474>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0f0      	beq.n	8004e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d106      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x2ea>
 8004ea8:	4b64      	ldr	r3, [pc, #400]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eac:	4a63      	ldr	r2, [pc, #396]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb4:	e01c      	b.n	8004ef0 <HAL_RCC_OscConfig+0x324>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x30c>
 8004ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004ec4:	f043 0304 	orr.w	r3, r3, #4
 8004ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eca:	4b5c      	ldr	r3, [pc, #368]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ece:	4a5b      	ldr	r2, [pc, #364]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0x324>
 8004ed8:	4b58      	ldr	r3, [pc, #352]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004edc:	4a57      	ldr	r2, [pc, #348]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee4:	4b55      	ldr	r3, [pc, #340]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee8:	4a54      	ldr	r2, [pc, #336]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004eea:	f023 0304 	bic.w	r3, r3, #4
 8004eee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d015      	beq.n	8004f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef8:	f7fd fd74 	bl	80029e4 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f00:	f7fd fd70 	bl	80029e4 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e0cb      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f16:	4b49      	ldr	r3, [pc, #292]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0ee      	beq.n	8004f00 <HAL_RCC_OscConfig+0x334>
 8004f22:	e014      	b.n	8004f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f24:	f7fd fd5e 	bl	80029e4 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2c:	f7fd fd5a 	bl	80029e4 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0b5      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f42:	4b3e      	ldr	r3, [pc, #248]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1ee      	bne.n	8004f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d105      	bne.n	8004f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f54:	4b39      	ldr	r3, [pc, #228]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	4a38      	ldr	r2, [pc, #224]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004f5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 80a1 	beq.w	80050ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f6a:	4b34      	ldr	r3, [pc, #208]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d05c      	beq.n	8005030 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d141      	bne.n	8005002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7e:	4b31      	ldr	r3, [pc, #196]	@ (8005044 <HAL_RCC_OscConfig+0x478>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f84:	f7fd fd2e 	bl	80029e4 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fd fd2a 	bl	80029e4 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e087      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9e:	4b27      	ldr	r3, [pc, #156]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69da      	ldr	r2, [r3, #28]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	019b      	lsls	r3, r3, #6
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	061b      	lsls	r3, r3, #24
 8004fce:	491b      	ldr	r1, [pc, #108]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005044 <HAL_RCC_OscConfig+0x478>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fda:	f7fd fd03 	bl	80029e4 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe2:	f7fd fcff 	bl	80029e4 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e05c      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff4:	4b11      	ldr	r3, [pc, #68]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x416>
 8005000:	e054      	b.n	80050ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005002:	4b10      	ldr	r3, [pc, #64]	@ (8005044 <HAL_RCC_OscConfig+0x478>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7fd fcec 	bl	80029e4 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005010:	f7fd fce8 	bl	80029e4 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e045      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	4b06      	ldr	r3, [pc, #24]	@ (800503c <HAL_RCC_OscConfig+0x470>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x444>
 800502e:	e03d      	b.n	80050ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d107      	bne.n	8005048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e038      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
 800503c:	40023800 	.word	0x40023800
 8005040:	40007000 	.word	0x40007000
 8005044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005048:	4b1b      	ldr	r3, [pc, #108]	@ (80050b8 <HAL_RCC_OscConfig+0x4ec>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d028      	beq.n	80050a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d121      	bne.n	80050a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d11a      	bne.n	80050a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005078:	4013      	ands	r3, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800507e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005080:	4293      	cmp	r3, r2
 8005082:	d111      	bne.n	80050a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	085b      	lsrs	r3, r3, #1
 8005090:	3b01      	subs	r3, #1
 8005092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d107      	bne.n	80050a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40023800 	.word	0x40023800

080050bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0cc      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050d0:	4b68      	ldr	r3, [pc, #416]	@ (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d90c      	bls.n	80050f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050de:	4b65      	ldr	r3, [pc, #404]	@ (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e6:	4b63      	ldr	r3, [pc, #396]	@ (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d001      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0b8      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d020      	beq.n	8005146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005110:	4b59      	ldr	r3, [pc, #356]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4a58      	ldr	r2, [pc, #352]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800511a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005128:	4b53      	ldr	r3, [pc, #332]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4a52      	ldr	r2, [pc, #328]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005134:	4b50      	ldr	r3, [pc, #320]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	494d      	ldr	r1, [pc, #308]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d044      	beq.n	80051dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d107      	bne.n	800516a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515a:	4b47      	ldr	r3, [pc, #284]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d119      	bne.n	800519a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e07f      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d003      	beq.n	800517a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005176:	2b03      	cmp	r3, #3
 8005178:	d107      	bne.n	800518a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800517a:	4b3f      	ldr	r3, [pc, #252]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e06f      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518a:	4b3b      	ldr	r3, [pc, #236]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e067      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800519a:	4b37      	ldr	r3, [pc, #220]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f023 0203 	bic.w	r2, r3, #3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	4934      	ldr	r1, [pc, #208]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051ac:	f7fd fc1a 	bl	80029e4 <HAL_GetTick>
 80051b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b4:	f7fd fc16 	bl	80029e4 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e04f      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 020c 	and.w	r2, r3, #12
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	429a      	cmp	r2, r3
 80051da:	d1eb      	bne.n	80051b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051dc:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d20c      	bcs.n	8005204 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ea:	4b22      	ldr	r3, [pc, #136]	@ (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f2:	4b20      	ldr	r3, [pc, #128]	@ (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e032      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005210:	4b19      	ldr	r3, [pc, #100]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4916      	ldr	r1, [pc, #88]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800522e:	4b12      	ldr	r3, [pc, #72]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	490e      	ldr	r1, [pc, #56]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005242:	f000 f821 	bl	8005288 <HAL_RCC_GetSysClockFreq>
 8005246:	4602      	mov	r2, r0
 8005248:	4b0b      	ldr	r3, [pc, #44]	@ (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	490a      	ldr	r1, [pc, #40]	@ (800527c <HAL_RCC_ClockConfig+0x1c0>)
 8005254:	5ccb      	ldrb	r3, [r1, r3]
 8005256:	fa22 f303 	lsr.w	r3, r2, r3
 800525a:	4a09      	ldr	r2, [pc, #36]	@ (8005280 <HAL_RCC_ClockConfig+0x1c4>)
 800525c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800525e:	4b09      	ldr	r3, [pc, #36]	@ (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7fd fb7a 	bl	800295c <HAL_InitTick>

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40023c00 	.word	0x40023c00
 8005278:	40023800 	.word	0x40023800
 800527c:	0800e850 	.word	0x0800e850
 8005280:	20000010 	.word	0x20000010
 8005284:	20000014 	.word	0x20000014

08005288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800528c:	b094      	sub	sp, #80	@ 0x50
 800528e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052a0:	4b79      	ldr	r3, [pc, #484]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 030c 	and.w	r3, r3, #12
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d00d      	beq.n	80052c8 <HAL_RCC_GetSysClockFreq+0x40>
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	f200 80e1 	bhi.w	8005474 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_RCC_GetSysClockFreq+0x34>
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d003      	beq.n	80052c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052ba:	e0db      	b.n	8005474 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052bc:	4b73      	ldr	r3, [pc, #460]	@ (800548c <HAL_RCC_GetSysClockFreq+0x204>)
 80052be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052c0:	e0db      	b.n	800547a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052c2:	4b72      	ldr	r3, [pc, #456]	@ (800548c <HAL_RCC_GetSysClockFreq+0x204>)
 80052c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052c6:	e0d8      	b.n	800547a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d063      	beq.n	80053a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052de:	4b6a      	ldr	r3, [pc, #424]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	2200      	movs	r2, #0
 80052e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052f2:	2300      	movs	r3, #0
 80052f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052fa:	4622      	mov	r2, r4
 80052fc:	462b      	mov	r3, r5
 80052fe:	f04f 0000 	mov.w	r0, #0
 8005302:	f04f 0100 	mov.w	r1, #0
 8005306:	0159      	lsls	r1, r3, #5
 8005308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800530c:	0150      	lsls	r0, r2, #5
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4621      	mov	r1, r4
 8005314:	1a51      	subs	r1, r2, r1
 8005316:	6139      	str	r1, [r7, #16]
 8005318:	4629      	mov	r1, r5
 800531a:	eb63 0301 	sbc.w	r3, r3, r1
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800532c:	4659      	mov	r1, fp
 800532e:	018b      	lsls	r3, r1, #6
 8005330:	4651      	mov	r1, sl
 8005332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005336:	4651      	mov	r1, sl
 8005338:	018a      	lsls	r2, r1, #6
 800533a:	4651      	mov	r1, sl
 800533c:	ebb2 0801 	subs.w	r8, r2, r1
 8005340:	4659      	mov	r1, fp
 8005342:	eb63 0901 	sbc.w	r9, r3, r1
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800535a:	4690      	mov	r8, r2
 800535c:	4699      	mov	r9, r3
 800535e:	4623      	mov	r3, r4
 8005360:	eb18 0303 	adds.w	r3, r8, r3
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	462b      	mov	r3, r5
 8005368:	eb49 0303 	adc.w	r3, r9, r3
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800537a:	4629      	mov	r1, r5
 800537c:	028b      	lsls	r3, r1, #10
 800537e:	4621      	mov	r1, r4
 8005380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005384:	4621      	mov	r1, r4
 8005386:	028a      	lsls	r2, r1, #10
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800538e:	2200      	movs	r2, #0
 8005390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005398:	f7fb fc56 	bl	8000c48 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4613      	mov	r3, r2
 80053a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a4:	e058      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a6:	4b38      	ldr	r3, [pc, #224]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	099b      	lsrs	r3, r3, #6
 80053ac:	2200      	movs	r2, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	4611      	mov	r1, r2
 80053b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053b6:	623b      	str	r3, [r7, #32]
 80053b8:	2300      	movs	r3, #0
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80053bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	f04f 0000 	mov.w	r0, #0
 80053c8:	f04f 0100 	mov.w	r1, #0
 80053cc:	0159      	lsls	r1, r3, #5
 80053ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053d2:	0150      	lsls	r0, r2, #5
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4641      	mov	r1, r8
 80053da:	ebb2 0a01 	subs.w	sl, r2, r1
 80053de:	4649      	mov	r1, r9
 80053e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053f8:	ebb2 040a 	subs.w	r4, r2, sl
 80053fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	00eb      	lsls	r3, r5, #3
 800540a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800540e:	00e2      	lsls	r2, r4, #3
 8005410:	4614      	mov	r4, r2
 8005412:	461d      	mov	r5, r3
 8005414:	4643      	mov	r3, r8
 8005416:	18e3      	adds	r3, r4, r3
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	464b      	mov	r3, r9
 800541c:	eb45 0303 	adc.w	r3, r5, r3
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800542e:	4629      	mov	r1, r5
 8005430:	028b      	lsls	r3, r1, #10
 8005432:	4621      	mov	r1, r4
 8005434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005438:	4621      	mov	r1, r4
 800543a:	028a      	lsls	r2, r1, #10
 800543c:	4610      	mov	r0, r2
 800543e:	4619      	mov	r1, r3
 8005440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005442:	2200      	movs	r2, #0
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	61fa      	str	r2, [r7, #28]
 8005448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800544c:	f7fb fbfc 	bl	8000c48 <__aeabi_uldivmod>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4613      	mov	r3, r2
 8005456:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005458:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x200>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	0c1b      	lsrs	r3, r3, #16
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	3301      	adds	r3, #1
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005468:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800546a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005472:	e002      	b.n	800547a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005474:	4b05      	ldr	r3, [pc, #20]	@ (800548c <HAL_RCC_GetSysClockFreq+0x204>)
 8005476:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800547a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800547c:	4618      	mov	r0, r3
 800547e:	3750      	adds	r7, #80	@ 0x50
 8005480:	46bd      	mov	sp, r7
 8005482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005486:	bf00      	nop
 8005488:	40023800 	.word	0x40023800
 800548c:	00f42400 	.word	0x00f42400

08005490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005494:	4b03      	ldr	r3, [pc, #12]	@ (80054a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005496:	681b      	ldr	r3, [r3, #0]
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000010 	.word	0x20000010

080054a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e07b      	b.n	80055b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d108      	bne.n	80054d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054ca:	d009      	beq.n	80054e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	61da      	str	r2, [r3, #28]
 80054d2:	e005      	b.n	80054e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fc ffee 	bl	80024dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005516:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005564:	ea42 0103 	orr.w	r1, r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	0c1b      	lsrs	r3, r3, #16
 800557e:	f003 0104 	and.w	r1, r3, #4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005586:	f003 0210 	and.w	r2, r3, #16
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b088      	sub	sp, #32
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ca:	f7fd fa0b 	bl	80029e4 <HAL_GetTick>
 80055ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d001      	beq.n	80055e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80055e0:	2302      	movs	r3, #2
 80055e2:	e12a      	b.n	800583a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_SPI_Transmit+0x36>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e122      	b.n	800583a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_SPI_Transmit+0x48>
 80055fe:	2302      	movs	r3, #2
 8005600:	e11b      	b.n	800583a <HAL_SPI_Transmit+0x280>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2203      	movs	r2, #3
 800560e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005650:	d10f      	bne.n	8005672 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005660:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005670:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567c:	2b40      	cmp	r3, #64	@ 0x40
 800567e:	d007      	beq.n	8005690 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800568e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005698:	d152      	bne.n	8005740 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_SPI_Transmit+0xee>
 80056a2:	8b7b      	ldrh	r3, [r7, #26]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d145      	bne.n	8005734 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ac:	881a      	ldrh	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	1c9a      	adds	r2, r3, #2
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056cc:	e032      	b.n	8005734 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d112      	bne.n	8005702 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ec:	1c9a      	adds	r2, r3, #2
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005700:	e018      	b.n	8005734 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005702:	f7fd f96f 	bl	80029e4 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d803      	bhi.n	800571a <HAL_SPI_Transmit+0x160>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005718:	d102      	bne.n	8005720 <HAL_SPI_Transmit+0x166>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e082      	b.n	800583a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1c7      	bne.n	80056ce <HAL_SPI_Transmit+0x114>
 800573e:	e053      	b.n	80057e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_SPI_Transmit+0x194>
 8005748:	8b7b      	ldrh	r3, [r7, #26]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d147      	bne.n	80057de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	7812      	ldrb	r2, [r2, #0]
 800575a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005774:	e033      	b.n	80057de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b02      	cmp	r3, #2
 8005782:	d113      	bne.n	80057ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	7812      	ldrb	r2, [r2, #0]
 8005790:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80057aa:	e018      	b.n	80057de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ac:	f7fd f91a 	bl	80029e4 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d803      	bhi.n	80057c4 <HAL_SPI_Transmit+0x20a>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d102      	bne.n	80057ca <HAL_SPI_Transmit+0x210>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e02d      	b.n	800583a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1c6      	bne.n	8005776 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fdd1 	bl	8006394 <SPI_EndRxTxTransaction>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005838:	2300      	movs	r3, #0
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	3720      	adds	r7, #32
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b08a      	sub	sp, #40	@ 0x28
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005850:	2301      	movs	r3, #1
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005854:	f7fd f8c6 	bl	80029e4 <HAL_GetTick>
 8005858:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005860:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005868:	887b      	ldrh	r3, [r7, #2]
 800586a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800586c:	7ffb      	ldrb	r3, [r7, #31]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d00c      	beq.n	800588c <HAL_SPI_TransmitReceive+0x4a>
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005878:	d106      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x46>
 8005882:	7ffb      	ldrb	r3, [r7, #31]
 8005884:	2b04      	cmp	r3, #4
 8005886:	d001      	beq.n	800588c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005888:	2302      	movs	r3, #2
 800588a:	e17f      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_SPI_TransmitReceive+0x5c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <HAL_SPI_TransmitReceive+0x5c>
 8005898:	887b      	ldrh	r3, [r7, #2]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e174      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_SPI_TransmitReceive+0x6e>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e16d      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x34a>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d003      	beq.n	80058cc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2205      	movs	r2, #5
 80058c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	887a      	ldrh	r2, [r7, #2]
 80058dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	887a      	ldrh	r2, [r7, #2]
 80058e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	887a      	ldrh	r2, [r7, #2]
 80058ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	887a      	ldrh	r2, [r7, #2]
 80058f4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b40      	cmp	r3, #64	@ 0x40
 800590e:	d007      	beq.n	8005920 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800591e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005928:	d17e      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_SPI_TransmitReceive+0xf6>
 8005932:	8afb      	ldrh	r3, [r7, #22]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d16c      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593c:	881a      	ldrh	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005948:	1c9a      	adds	r2, r3, #2
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800595c:	e059      	b.n	8005a12 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b02      	cmp	r3, #2
 800596a:	d11b      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x162>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <HAL_SPI_TransmitReceive+0x162>
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	2b01      	cmp	r3, #1
 800597a:	d113      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005980:	881a      	ldrh	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d119      	bne.n	80059e6 <HAL_SPI_TransmitReceive+0x1a4>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d014      	beq.n	80059e6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c6:	b292      	uxth	r2, r2
 80059c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ce:	1c9a      	adds	r2, r3, #2
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059e2:	2301      	movs	r3, #1
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059e6:	f7fc fffd 	bl	80029e4 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d80d      	bhi.n	8005a12 <HAL_SPI_TransmitReceive+0x1d0>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d009      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e0bc      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1a0      	bne.n	800595e <HAL_SPI_TransmitReceive+0x11c>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d19b      	bne.n	800595e <HAL_SPI_TransmitReceive+0x11c>
 8005a26:	e082      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_SPI_TransmitReceive+0x1f4>
 8005a30:	8afb      	ldrh	r3, [r7, #22]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d171      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	7812      	ldrb	r2, [r2, #0]
 8005a42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a5c:	e05d      	b.n	8005b1a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d11c      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0x264>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d017      	beq.n	8005aa6 <HAL_SPI_TransmitReceive+0x264>
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d114      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	7812      	ldrb	r2, [r2, #0]
 8005a88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d119      	bne.n	8005ae8 <HAL_SPI_TransmitReceive+0x2a6>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d014      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ae8:	f7fc ff7c 	bl	80029e4 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d803      	bhi.n	8005b00 <HAL_SPI_TransmitReceive+0x2be>
 8005af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afe:	d102      	bne.n	8005b06 <HAL_SPI_TransmitReceive+0x2c4>
 8005b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d109      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e038      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d19c      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x21c>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d197      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b2e:	6a3a      	ldr	r2, [r7, #32]
 8005b30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fc2e 	bl	8006394 <SPI_EndRxTxTransaction>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e01d      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
  }
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3728      	adds	r7, #40	@ 0x28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ba8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d00c      	beq.n	8005bd0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bbc:	d106      	bne.n	8005bcc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d102      	bne.n	8005bcc <HAL_SPI_TransmitReceive_DMA+0x38>
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d001      	beq.n	8005bd0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e0cf      	b.n	8005d70 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005bdc:	887b      	ldrh	r3, [r7, #2]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e0c4      	b.n	8005d70 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_SPI_TransmitReceive_DMA+0x60>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e0bd      	b.n	8005d70 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d003      	beq.n	8005c10 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2205      	movs	r2, #5
 8005c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	887a      	ldrh	r2, [r7, #2]
 8005c26:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	887a      	ldrh	r2, [r7, #2]
 8005c32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	887a      	ldrh	r2, [r7, #2]
 8005c38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d108      	bne.n	8005c64 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c56:	4a48      	ldr	r2, [pc, #288]	@ (8005d78 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005c58:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c5e:	4a47      	ldr	r2, [pc, #284]	@ (8005d7c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005c60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c62:	e007      	b.n	8005c74 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c68:	4a45      	ldr	r2, [pc, #276]	@ (8005d80 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005c6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c70:	4a44      	ldr	r2, [pc, #272]	@ (8005d84 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005c72:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c78:	4a43      	ldr	r2, [pc, #268]	@ (8005d88 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005c7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c80:	2200      	movs	r2, #0
 8005c82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	4619      	mov	r1, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c94:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c9a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c9c:	f7fd f892 	bl	8002dc4 <HAL_DMA_Start_IT>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00b      	beq.n	8005cbe <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	f043 0210 	orr.w	r2, r3, #16
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e058      	b.n	8005d70 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0201 	orr.w	r2, r2, #1
 8005ccc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cda:	2200      	movs	r2, #0
 8005cdc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cea:	2200      	movs	r2, #0
 8005cec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d04:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d06:	f7fd f85d 	bl	8002dc4 <HAL_DMA_Start_IT>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d14:	f043 0210 	orr.w	r2, r3, #16
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e023      	b.n	8005d70 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d32:	2b40      	cmp	r3, #64	@ 0x40
 8005d34:	d007      	beq.n	8005d46 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d44:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0220 	orr.w	r2, r2, #32
 8005d5c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0202 	orr.w	r2, r2, #2
 8005d6c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	08006119 	.word	0x08006119
 8005d7c:	08005fe1 	.word	0x08005fe1
 8005d80:	08006135 	.word	0x08006135
 8005d84:	08006089 	.word	0x08006089
 8005d88:	08006151 	.word	0x08006151

08005d8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10e      	bne.n	8005dcc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d009      	beq.n	8005dcc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d004      	beq.n	8005dcc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
    return;
 8005dca:	e0ce      	b.n	8005f6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <HAL_SPI_IRQHandler+0x5e>
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	4798      	blx	r3
    return;
 8005de8:	e0bf      	b.n	8005f6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <HAL_SPI_IRQHandler+0x7e>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d105      	bne.n	8005e0a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80b0 	beq.w	8005f6a <HAL_SPI_IRQHandler+0x1de>
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80aa 	beq.w	8005f6a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d023      	beq.n	8005e68 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d011      	beq.n	8005e50 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e30:	f043 0204 	orr.w	r2, r3, #4
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	e00b      	b.n	8005e68 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e50:	2300      	movs	r3, #0
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	693b      	ldr	r3, [r7, #16]
        return;
 8005e66:	e080      	b.n	8005f6a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d014      	beq.n	8005e9c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e76:	f043 0201 	orr.w	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00c      	beq.n	8005ec0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eaa:	f043 0208 	orr.w	r2, r3, #8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60bb      	str	r3, [r7, #8]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d04f      	beq.n	8005f68 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ed6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <HAL_SPI_IRQHandler+0x168>
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d034      	beq.n	8005f5e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0203 	bic.w	r2, r2, #3
 8005f02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d011      	beq.n	8005f30 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f10:	4a17      	ldr	r2, [pc, #92]	@ (8005f70 <HAL_SPI_IRQHandler+0x1e4>)
 8005f12:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fc ffab 	bl	8002e74 <HAL_DMA_Abort_IT>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d016      	beq.n	8005f66 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8005f70 <HAL_SPI_IRQHandler+0x1e4>)
 8005f3e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fc ff95 	bl	8002e74 <HAL_DMA_Abort_IT>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005f5c:	e003      	b.n	8005f66 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f826 	bl	8005fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f64:	e000      	b.n	8005f68 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005f66:	bf00      	nop
    return;
 8005f68:	bf00      	nop
  }
}
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	08006191 	.word	0x08006191

08005f74 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fd2:	b2db      	uxtb	r3, r3
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fee:	f7fc fcf9 	bl	80029e4 <HAL_GetTick>
 8005ff2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006002:	d03b      	beq.n	800607c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0220 	bic.w	r2, r2, #32
 8006012:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10d      	bne.n	8006038 <SPI_DMAReceiveCplt+0x58>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006024:	d108      	bne.n	8006038 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0203 	bic.w	r2, r2, #3
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	e007      	b.n	8006048 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0201 	bic.w	r2, r2, #1
 8006046:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	2164      	movs	r1, #100	@ 0x64
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f93b 	bl	80062c8 <SPI_EndRxTransaction>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff ff9b 	bl	8005fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800607a:	e002      	b.n	8006082 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7ff ff79 	bl	8005f74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006094:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006096:	f7fc fca5 	bl	80029e4 <HAL_GetTick>
 800609a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060aa:	d02f      	beq.n	800610c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0220 	bic.w	r2, r2, #32
 80060ba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	2164      	movs	r1, #100	@ 0x64
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f967 	bl	8006394 <SPI_EndRxTxTransaction>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d0:	f043 0220 	orr.w	r2, r3, #32
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0203 	bic.w	r2, r2, #3
 80060e6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff ff53 	bl	8005fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800610a:	e002      	b.n	8006112 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f7fb ff35 	bl	8001f7c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006124:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff ff2e 	bl	8005f88 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006140:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7ff ff2a 	bl	8005f9c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0203 	bic.w	r2, r2, #3
 800616c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006172:	f043 0210 	orr.w	r2, r3, #16
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff ff14 	bl	8005fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff ff00 	bl	8005fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061b0:	bf00      	nop
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061c8:	f7fc fc0c 	bl	80029e4 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	4413      	add	r3, r2
 80061d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061d8:	f7fc fc04 	bl	80029e4 <HAL_GetTick>
 80061dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061de:	4b39      	ldr	r3, [pc, #228]	@ (80062c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	015b      	lsls	r3, r3, #5
 80061e4:	0d1b      	lsrs	r3, r3, #20
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	fb02 f303 	mul.w	r3, r2, r3
 80061ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ee:	e054      	b.n	800629a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d050      	beq.n	800629a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061f8:	f7fc fbf4 	bl	80029e4 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	429a      	cmp	r2, r3
 8006206:	d902      	bls.n	800620e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d13d      	bne.n	800628a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800621c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006226:	d111      	bne.n	800624c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006230:	d004      	beq.n	800623c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800623a:	d107      	bne.n	800624c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800624a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006254:	d10f      	bne.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e017      	b.n	80062ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	3b01      	subs	r3, #1
 8006298:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	bf0c      	ite	eq
 80062aa:	2301      	moveq	r3, #1
 80062ac:	2300      	movne	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d19b      	bne.n	80061f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3720      	adds	r7, #32
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000010 	.word	0x20000010

080062c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062dc:	d111      	bne.n	8006302 <SPI_EndRxTransaction+0x3a>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e6:	d004      	beq.n	80062f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f0:	d107      	bne.n	8006302 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006300:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800630a:	d12a      	bne.n	8006362 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006314:	d012      	beq.n	800633c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	2180      	movs	r1, #128	@ 0x80
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff ff49 	bl	80061b8 <SPI_WaitFlagStateUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d02d      	beq.n	8006388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e026      	b.n	800638a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2200      	movs	r2, #0
 8006344:	2101      	movs	r1, #1
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff ff36 	bl	80061b8 <SPI_WaitFlagStateUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01a      	beq.n	8006388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e013      	b.n	800638a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2200      	movs	r2, #0
 800636a:	2101      	movs	r1, #1
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff ff23 	bl	80061b8 <SPI_WaitFlagStateUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637c:	f043 0220 	orr.w	r2, r3, #32
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e000      	b.n	800638a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2201      	movs	r2, #1
 80063a8:	2102      	movs	r1, #2
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff ff04 	bl	80061b8 <SPI_WaitFlagStateUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d007      	beq.n	80063c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ba:	f043 0220 	orr.w	r2, r3, #32
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e032      	b.n	800642c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006434 <SPI_EndRxTxTransaction+0xa0>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006438 <SPI_EndRxTxTransaction+0xa4>)
 80063cc:	fba2 2303 	umull	r2, r3, r2, r3
 80063d0:	0d5b      	lsrs	r3, r3, #21
 80063d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063d6:	fb02 f303 	mul.w	r3, r2, r3
 80063da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063e4:	d112      	bne.n	800640c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2200      	movs	r2, #0
 80063ee:	2180      	movs	r1, #128	@ 0x80
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f7ff fee1 	bl	80061b8 <SPI_WaitFlagStateUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d016      	beq.n	800642a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006400:	f043 0220 	orr.w	r2, r3, #32
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e00f      	b.n	800642c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	3b01      	subs	r3, #1
 8006416:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006422:	2b80      	cmp	r3, #128	@ 0x80
 8006424:	d0f2      	beq.n	800640c <SPI_EndRxTxTransaction+0x78>
 8006426:	e000      	b.n	800642a <SPI_EndRxTxTransaction+0x96>
        break;
 8006428:	bf00      	nop
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20000010 	.word	0x20000010
 8006438:	165e9f81 	.word	0x165e9f81

0800643c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800643c:	b084      	sub	sp, #16
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	f107 001c 	add.w	r0, r7, #28
 800644a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800644e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006452:	2b01      	cmp	r3, #1
 8006454:	d123      	bne.n	800649e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800646a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800647e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006482:	2b01      	cmp	r3, #1
 8006484:	d105      	bne.n	8006492 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 fae8 	bl	8007a68 <USB_CoreReset>
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
 800649c:	e01b      	b.n	80064d6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fadc 	bl	8007a68 <USB_CoreReset>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d106      	bne.n	80064ca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80064c8:	e005      	b.n	80064d6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064d6:	7fbb      	ldrb	r3, [r7, #30]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d10b      	bne.n	80064f4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f043 0206 	orr.w	r2, r3, #6
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f043 0220 	orr.w	r2, r3, #32
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006500:	b004      	add	sp, #16
 8006502:	4770      	bx	lr

08006504 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d165      	bne.n	80065e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4a41      	ldr	r2, [pc, #260]	@ (8006620 <USB_SetTurnaroundTime+0x11c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d906      	bls.n	800652e <USB_SetTurnaroundTime+0x2a>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4a40      	ldr	r2, [pc, #256]	@ (8006624 <USB_SetTurnaroundTime+0x120>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d202      	bcs.n	800652e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006528:	230f      	movs	r3, #15
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	e062      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4a3c      	ldr	r2, [pc, #240]	@ (8006624 <USB_SetTurnaroundTime+0x120>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d306      	bcc.n	8006544 <USB_SetTurnaroundTime+0x40>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4a3b      	ldr	r2, [pc, #236]	@ (8006628 <USB_SetTurnaroundTime+0x124>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d202      	bcs.n	8006544 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800653e:	230e      	movs	r3, #14
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	e057      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4a38      	ldr	r2, [pc, #224]	@ (8006628 <USB_SetTurnaroundTime+0x124>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d306      	bcc.n	800655a <USB_SetTurnaroundTime+0x56>
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4a37      	ldr	r2, [pc, #220]	@ (800662c <USB_SetTurnaroundTime+0x128>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d202      	bcs.n	800655a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006554:	230d      	movs	r3, #13
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	e04c      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4a33      	ldr	r2, [pc, #204]	@ (800662c <USB_SetTurnaroundTime+0x128>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d306      	bcc.n	8006570 <USB_SetTurnaroundTime+0x6c>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4a32      	ldr	r2, [pc, #200]	@ (8006630 <USB_SetTurnaroundTime+0x12c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d802      	bhi.n	8006570 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800656a:	230c      	movs	r3, #12
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e041      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4a2f      	ldr	r2, [pc, #188]	@ (8006630 <USB_SetTurnaroundTime+0x12c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d906      	bls.n	8006586 <USB_SetTurnaroundTime+0x82>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4a2e      	ldr	r2, [pc, #184]	@ (8006634 <USB_SetTurnaroundTime+0x130>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d802      	bhi.n	8006586 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006580:	230b      	movs	r3, #11
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e036      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4a2a      	ldr	r2, [pc, #168]	@ (8006634 <USB_SetTurnaroundTime+0x130>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d906      	bls.n	800659c <USB_SetTurnaroundTime+0x98>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	4a29      	ldr	r2, [pc, #164]	@ (8006638 <USB_SetTurnaroundTime+0x134>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d802      	bhi.n	800659c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006596:	230a      	movs	r3, #10
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	e02b      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4a26      	ldr	r2, [pc, #152]	@ (8006638 <USB_SetTurnaroundTime+0x134>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d906      	bls.n	80065b2 <USB_SetTurnaroundTime+0xae>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4a25      	ldr	r2, [pc, #148]	@ (800663c <USB_SetTurnaroundTime+0x138>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d202      	bcs.n	80065b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065ac:	2309      	movs	r3, #9
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	e020      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4a21      	ldr	r2, [pc, #132]	@ (800663c <USB_SetTurnaroundTime+0x138>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d306      	bcc.n	80065c8 <USB_SetTurnaroundTime+0xc4>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	4a20      	ldr	r2, [pc, #128]	@ (8006640 <USB_SetTurnaroundTime+0x13c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d802      	bhi.n	80065c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065c2:	2308      	movs	r3, #8
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	e015      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006640 <USB_SetTurnaroundTime+0x13c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d906      	bls.n	80065de <USB_SetTurnaroundTime+0xda>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006644 <USB_SetTurnaroundTime+0x140>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d202      	bcs.n	80065de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065d8:	2307      	movs	r3, #7
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	e00a      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065de:	2306      	movs	r3, #6
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	e007      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065ea:	2309      	movs	r3, #9
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e001      	b.n	80065f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065f0:	2309      	movs	r3, #9
 80065f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	029b      	lsls	r3, r3, #10
 8006608:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800660c:	431a      	orrs	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	00d8acbf 	.word	0x00d8acbf
 8006624:	00e4e1c0 	.word	0x00e4e1c0
 8006628:	00f42400 	.word	0x00f42400
 800662c:	01067380 	.word	0x01067380
 8006630:	011a499f 	.word	0x011a499f
 8006634:	01312cff 	.word	0x01312cff
 8006638:	014ca43f 	.word	0x014ca43f
 800663c:	016e3600 	.word	0x016e3600
 8006640:	01a6ab1f 	.word	0x01a6ab1f
 8006644:	01e84800 	.word	0x01e84800

08006648 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f043 0201 	orr.w	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f023 0201 	bic.w	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d115      	bne.n	80066da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066ba:	200a      	movs	r0, #10
 80066bc:	f7fc f99e 	bl	80029fc <HAL_Delay>
      ms += 10U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	330a      	adds	r3, #10
 80066c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 f93f 	bl	800794a <USB_GetMode>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d01e      	beq.n	8006710 <USB_SetCurrentMode+0x84>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80066d6:	d9f0      	bls.n	80066ba <USB_SetCurrentMode+0x2e>
 80066d8:	e01a      	b.n	8006710 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d115      	bne.n	800670c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066ec:	200a      	movs	r0, #10
 80066ee:	f7fc f985 	bl	80029fc <HAL_Delay>
      ms += 10U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	330a      	adds	r3, #10
 80066f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f001 f926 	bl	800794a <USB_GetMode>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <USB_SetCurrentMode+0x84>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2bc7      	cmp	r3, #199	@ 0xc7
 8006708:	d9f0      	bls.n	80066ec <USB_SetCurrentMode+0x60>
 800670a:	e001      	b.n	8006710 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e005      	b.n	800671c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2bc8      	cmp	r3, #200	@ 0xc8
 8006714:	d101      	bne.n	800671a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006724:	b084      	sub	sp, #16
 8006726:	b580      	push	{r7, lr}
 8006728:	b086      	sub	sp, #24
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800673e:	2300      	movs	r3, #0
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	e009      	b.n	8006758 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	3340      	adds	r3, #64	@ 0x40
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	2200      	movs	r2, #0
 8006750:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	3301      	adds	r3, #1
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b0e      	cmp	r3, #14
 800675c:	d9f2      	bls.n	8006744 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800675e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006762:	2b00      	cmp	r3, #0
 8006764:	d11c      	bne.n	80067a0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006774:	f043 0302 	orr.w	r3, r3, #2
 8006778:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	639a      	str	r2, [r3, #56]	@ 0x38
 800679e:	e00b      	b.n	80067b8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067be:	461a      	mov	r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d10d      	bne.n	80067e8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d104      	bne.n	80067de <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067d4:	2100      	movs	r1, #0
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f968 	bl	8006aac <USB_SetDevSpeed>
 80067dc:	e008      	b.n	80067f0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067de:	2101      	movs	r1, #1
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f963 	bl	8006aac <USB_SetDevSpeed>
 80067e6:	e003      	b.n	80067f0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067e8:	2103      	movs	r1, #3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f95e 	bl	8006aac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067f0:	2110      	movs	r1, #16
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f8fa 	bl	80069ec <USB_FlushTxFifo>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f924 	bl	8006a50 <USB_FlushRxFifo>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006818:	461a      	mov	r2, r3
 800681a:	2300      	movs	r3, #0
 800681c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006824:	461a      	mov	r2, r3
 8006826:	2300      	movs	r3, #0
 8006828:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006830:	461a      	mov	r2, r3
 8006832:	2300      	movs	r3, #0
 8006834:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	e043      	b.n	80068c4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800684e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006852:	d118      	bne.n	8006886 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006866:	461a      	mov	r2, r3
 8006868:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	e013      	b.n	8006898 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687c:	461a      	mov	r2, r3
 800687e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e008      	b.n	8006898 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006892:	461a      	mov	r2, r3
 8006894:	2300      	movs	r3, #0
 8006896:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a4:	461a      	mov	r2, r3
 80068a6:	2300      	movs	r3, #0
 80068a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b6:	461a      	mov	r2, r3
 80068b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	3301      	adds	r3, #1
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068c8:	461a      	mov	r2, r3
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d3b5      	bcc.n	800683c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d0:	2300      	movs	r3, #0
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	e043      	b.n	800695e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ec:	d118      	bne.n	8006920 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006900:	461a      	mov	r2, r3
 8006902:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	e013      	b.n	8006932 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006916:	461a      	mov	r2, r3
 8006918:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e008      	b.n	8006932 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800692c:	461a      	mov	r2, r3
 800692e:	2300      	movs	r3, #0
 8006930:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693e:	461a      	mov	r2, r3
 8006940:	2300      	movs	r3, #0
 8006942:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006950:	461a      	mov	r2, r3
 8006952:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006956:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	3301      	adds	r3, #1
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006962:	461a      	mov	r2, r3
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	4293      	cmp	r3, r2
 8006968:	d3b5      	bcc.n	80068d6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800697c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800698a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800698c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f043 0210 	orr.w	r2, r3, #16
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	4b10      	ldr	r3, [pc, #64]	@ (80069e8 <USB_DevInit+0x2c4>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f043 0208 	orr.w	r2, r3, #8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d107      	bne.n	80069d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069d0:	f043 0304 	orr.w	r3, r3, #4
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069e4:	b004      	add	sp, #16
 80069e6:	4770      	bx	lr
 80069e8:	803c3800 	.word	0x803c3800

080069ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a06:	d901      	bls.n	8006a0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e01b      	b.n	8006a44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	daf2      	bge.n	80069fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	019b      	lsls	r3, r3, #6
 8006a1c:	f043 0220 	orr.w	r2, r3, #32
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a30:	d901      	bls.n	8006a36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e006      	b.n	8006a44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	d0f0      	beq.n	8006a24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a68:	d901      	bls.n	8006a6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e018      	b.n	8006aa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	daf2      	bge.n	8006a5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2210      	movs	r2, #16
 8006a7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a8c:	d901      	bls.n	8006a92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e006      	b.n	8006aa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	d0f0      	beq.n	8006a80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	68f9      	ldr	r1, [r7, #12]
 8006ac8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006acc:	4313      	orrs	r3, r2
 8006ace:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b087      	sub	sp, #28
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 0306 	and.w	r3, r3, #6
 8006af6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]
 8006b02:	e00a      	b.n	8006b1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d002      	beq.n	8006b10 <USB_GetDevSpeed+0x32>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b06      	cmp	r3, #6
 8006b0e:	d102      	bne.n	8006b16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b10:	2302      	movs	r3, #2
 8006b12:	75fb      	strb	r3, [r7, #23]
 8006b14:	e001      	b.n	8006b1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b16:	230f      	movs	r3, #15
 8006b18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d13a      	bne.n	8006bba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b4a:	69da      	ldr	r2, [r3, #28]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	2101      	movs	r1, #1
 8006b56:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b62:	4313      	orrs	r3, r2
 8006b64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d155      	bne.n	8006c28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	791b      	ldrb	r3, [r3, #4]
 8006b96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	059b      	lsls	r3, r3, #22
 8006b9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	e036      	b.n	8006c28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc0:	69da      	ldr	r2, [r3, #28]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	2101      	movs	r1, #1
 8006bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd0:	041b      	lsls	r3, r3, #16
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d11a      	bne.n	8006c28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	791b      	ldrb	r3, [r3, #4]
 8006c0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	4313      	orrs	r3, r2
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	0151      	lsls	r1, r2, #5
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	440a      	add	r2, r1
 8006c1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d161      	bne.n	8006d18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c6a:	d11f      	bne.n	8006cac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ca6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006caa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ccc:	4013      	ands	r3, r2
 8006cce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	0159      	lsls	r1, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	440b      	add	r3, r1
 8006d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4b35      	ldr	r3, [pc, #212]	@ (8006de8 <USB_DeactivateEndpoint+0x1b0>)
 8006d12:	4013      	ands	r3, r2
 8006d14:	600b      	str	r3, [r1, #0]
 8006d16:	e060      	b.n	8006dda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d2e:	d11f      	bne.n	8006d70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	2101      	movs	r1, #1
 8006d82:	fa01 f303 	lsl.w	r3, r1, r3
 8006d86:	041b      	lsls	r3, r3, #16
 8006d88:	43db      	mvns	r3, r3
 8006d8a:	68f9      	ldr	r1, [r7, #12]
 8006d8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d90:	4013      	ands	r3, r2
 8006d92:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	2101      	movs	r1, #1
 8006da6:	fa01 f303 	lsl.w	r3, r1, r3
 8006daa:	041b      	lsls	r3, r3, #16
 8006dac:	43db      	mvns	r3, r3
 8006dae:	68f9      	ldr	r1, [r7, #12]
 8006db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006db4:	4013      	ands	r3, r2
 8006db6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	0159      	lsls	r1, r3, #5
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	440b      	add	r3, r1
 8006dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <USB_DeactivateEndpoint+0x1b4>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	ec337800 	.word	0xec337800
 8006dec:	eff37800 	.word	0xeff37800

08006df0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08a      	sub	sp, #40	@ 0x28
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	f040 817f 	bne.w	8007110 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d132      	bne.n	8006e80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	0151      	lsls	r1, r2, #5
 8006e2c:	69fa      	ldr	r2, [r7, #28]
 8006e2e:	440a      	add	r2, r1
 8006e30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e34:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e38:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e78:	0cdb      	lsrs	r3, r3, #19
 8006e7a:	04db      	lsls	r3, r3, #19
 8006e7c:	6113      	str	r3, [r2, #16]
 8006e7e:	e097      	b.n	8006fb0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	0151      	lsls	r1, r2, #5
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	440a      	add	r2, r1
 8006e96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e9a:	0cdb      	lsrs	r3, r3, #19
 8006e9c:	04db      	lsls	r3, r3, #19
 8006e9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ebe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ec2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d11a      	bne.n	8006f00 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d903      	bls.n	8006ede <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ef8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006efc:	6113      	str	r3, [r2, #16]
 8006efe:	e044      	b.n	8006f8a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	1e5a      	subs	r2, r3, #1
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	8afb      	ldrh	r3, [r7, #22]
 8006f26:	04d9      	lsls	r1, r3, #19
 8006f28:	4ba4      	ldr	r3, [pc, #656]	@ (80071bc <USB_EPStartXfer+0x3cc>)
 8006f2a:	400b      	ands	r3, r1
 8006f2c:	69b9      	ldr	r1, [r7, #24]
 8006f2e:	0148      	lsls	r0, r1, #5
 8006f30:	69f9      	ldr	r1, [r7, #28]
 8006f32:	4401      	add	r1, r0
 8006f34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	791b      	ldrb	r3, [r3, #4]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d122      	bne.n	8006f8a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f5e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006f62:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f70:	691a      	ldr	r2, [r3, #16]
 8006f72:	8afb      	ldrh	r3, [r7, #22]
 8006f74:	075b      	lsls	r3, r3, #29
 8006f76:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006f7a:	69b9      	ldr	r1, [r7, #24]
 8006f7c:	0148      	lsls	r0, r1, #5
 8006f7e:	69f9      	ldr	r1, [r7, #28]
 8006f80:	4401      	add	r1, r0
 8006f82:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f86:	4313      	orrs	r3, r2
 8006f88:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa0:	69b9      	ldr	r1, [r7, #24]
 8006fa2:	0148      	lsls	r0, r1, #5
 8006fa4:	69f9      	ldr	r1, [r7, #28]
 8006fa6:	4401      	add	r1, r0
 8006fa8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006fac:	4313      	orrs	r3, r2
 8006fae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d14b      	bne.n	800704e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d009      	beq.n	8006fd2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d128      	bne.n	800702c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d110      	bne.n	800700c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007004:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	e00f      	b.n	800702c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	440a      	add	r2, r1
 8007022:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800702a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007046:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	e166      	b.n	800731c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	0151      	lsls	r1, r2, #5
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	440a      	add	r2, r1
 8007064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007068:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800706c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	791b      	ldrb	r3, [r3, #4]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d015      	beq.n	80070a2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 814e 	beq.w	800731c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	f003 030f 	and.w	r3, r3, #15
 8007090:	2101      	movs	r1, #1
 8007092:	fa01 f303 	lsl.w	r3, r1, r3
 8007096:	69f9      	ldr	r1, [r7, #28]
 8007098:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800709c:	4313      	orrs	r3, r2
 800709e:	634b      	str	r3, [r1, #52]	@ 0x34
 80070a0:	e13c      	b.n	800731c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d110      	bne.n	80070d4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	0151      	lsls	r1, r2, #5
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	440a      	add	r2, r1
 80070c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	e00f      	b.n	80070f4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070f2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	68d9      	ldr	r1, [r3, #12]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	b298      	uxth	r0, r3
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4603      	mov	r3, r0
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 f9b9 	bl	8007480 <USB_WritePacket>
 800710e:	e105      	b.n	800731c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	440a      	add	r2, r1
 8007126:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800712a:	0cdb      	lsrs	r3, r3, #19
 800712c:	04db      	lsls	r3, r3, #19
 800712e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	0151      	lsls	r1, r2, #5
 8007142:	69fa      	ldr	r2, [r7, #28]
 8007144:	440a      	add	r2, r1
 8007146:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800714a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800714e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007152:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d132      	bne.n	80071c0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007188:	69b9      	ldr	r1, [r7, #24]
 800718a:	0148      	lsls	r0, r1, #5
 800718c:	69f9      	ldr	r1, [r7, #28]
 800718e:	4401      	add	r1, r0
 8007190:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007194:	4313      	orrs	r3, r2
 8007196:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071b6:	6113      	str	r3, [r2, #16]
 80071b8:	e062      	b.n	8007280 <USB_EPStartXfer+0x490>
 80071ba:	bf00      	nop
 80071bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d123      	bne.n	8007210 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071de:	69b9      	ldr	r1, [r7, #24]
 80071e0:	0148      	lsls	r0, r1, #5
 80071e2:	69f9      	ldr	r1, [r7, #28]
 80071e4:	4401      	add	r1, r0
 80071e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071ea:	4313      	orrs	r3, r2
 80071ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007208:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800720c:	6113      	str	r3, [r2, #16]
 800720e:	e037      	b.n	8007280 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	4413      	add	r3, r2
 800721a:	1e5a      	subs	r2, r3, #1
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	fbb2 f3f3 	udiv	r3, r2, r3
 8007224:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	8afa      	ldrh	r2, [r7, #22]
 800722c:	fb03 f202 	mul.w	r2, r3, r2
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007240:	691a      	ldr	r2, [r3, #16]
 8007242:	8afb      	ldrh	r3, [r7, #22]
 8007244:	04d9      	lsls	r1, r3, #19
 8007246:	4b38      	ldr	r3, [pc, #224]	@ (8007328 <USB_EPStartXfer+0x538>)
 8007248:	400b      	ands	r3, r1
 800724a:	69b9      	ldr	r1, [r7, #24]
 800724c:	0148      	lsls	r0, r1, #5
 800724e:	69f9      	ldr	r1, [r7, #28]
 8007250:	4401      	add	r1, r0
 8007252:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007256:	4313      	orrs	r3, r2
 8007258:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007266:	691a      	ldr	r2, [r3, #16]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007270:	69b9      	ldr	r1, [r7, #24]
 8007272:	0148      	lsls	r0, r1, #5
 8007274:	69f9      	ldr	r1, [r7, #28]
 8007276:	4401      	add	r1, r0
 8007278:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800727c:	4313      	orrs	r3, r2
 800727e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d10d      	bne.n	80072a2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d009      	beq.n	80072a2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	68d9      	ldr	r1, [r3, #12]
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729e:	460a      	mov	r2, r1
 80072a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	791b      	ldrb	r3, [r3, #4]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d128      	bne.n	80072fc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d110      	bne.n	80072dc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	0151      	lsls	r1, r2, #5
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	440a      	add	r2, r1
 80072d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	e00f      	b.n	80072fc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007316:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800731a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	1ff80000 	.word	0x1ff80000

0800732c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d14a      	bne.n	80073e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800735e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007362:	f040 8086 	bne.w	8007472 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	7812      	ldrb	r2, [r2, #0]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007384:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007388:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	7812      	ldrb	r2, [r2, #0]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3301      	adds	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d902      	bls.n	80073c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
          break;
 80073c2:	e056      	b.n	8007472 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073dc:	d0e7      	beq.n	80073ae <USB_EPStopXfer+0x82>
 80073de:	e048      	b.n	8007472 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073f8:	d13b      	bne.n	8007472 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	7812      	ldrb	r2, [r2, #0]
 800740e:	0151      	lsls	r1, r2, #5
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	440a      	add	r2, r1
 8007414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007418:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800741c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	7812      	ldrb	r2, [r2, #0]
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	440a      	add	r2, r1
 8007438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800743c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007440:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800744e:	4293      	cmp	r3, r2
 8007450:	d902      	bls.n	8007458 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	75fb      	strb	r3, [r7, #23]
          break;
 8007456:	e00c      	b.n	8007472 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800746c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007470:	d0e7      	beq.n	8007442 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007480:	b480      	push	{r7}
 8007482:	b089      	sub	sp, #36	@ 0x24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4611      	mov	r1, r2
 800748c:	461a      	mov	r2, r3
 800748e:	460b      	mov	r3, r1
 8007490:	71fb      	strb	r3, [r7, #7]
 8007492:	4613      	mov	r3, r2
 8007494:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800749e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d123      	bne.n	80074ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074a6:	88bb      	ldrh	r3, [r7, #4]
 80074a8:	3303      	adds	r3, #3
 80074aa:	089b      	lsrs	r3, r3, #2
 80074ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074ae:	2300      	movs	r3, #0
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	e018      	b.n	80074e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	031a      	lsls	r2, r3, #12
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074c0:	461a      	mov	r2, r3
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	3301      	adds	r3, #1
 80074cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	3301      	adds	r3, #1
 80074d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3301      	adds	r3, #1
 80074d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	3301      	adds	r3, #1
 80074de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	3301      	adds	r3, #1
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d3e2      	bcc.n	80074b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3724      	adds	r7, #36	@ 0x24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b08b      	sub	sp, #44	@ 0x2c
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	4613      	mov	r3, r2
 8007508:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	089b      	lsrs	r3, r3, #2
 8007516:	b29b      	uxth	r3, r3
 8007518:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007522:	2300      	movs	r3, #0
 8007524:	623b      	str	r3, [r7, #32]
 8007526:	e014      	b.n	8007552 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007532:	601a      	str	r2, [r3, #0]
    pDest++;
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	3301      	adds	r3, #1
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	3301      	adds	r3, #1
 800753e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	3301      	adds	r3, #1
 8007544:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	3301      	adds	r3, #1
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	3301      	adds	r3, #1
 8007550:	623b      	str	r3, [r7, #32]
 8007552:	6a3a      	ldr	r2, [r7, #32]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	429a      	cmp	r2, r3
 8007558:	d3e6      	bcc.n	8007528 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800755a:	8bfb      	ldrh	r3, [r7, #30]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01e      	beq.n	800759e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800756a:	461a      	mov	r2, r3
 800756c:	f107 0310 	add.w	r3, r7, #16
 8007570:	6812      	ldr	r2, [r2, #0]
 8007572:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	fa22 f303 	lsr.w	r3, r2, r3
 8007580:	b2da      	uxtb	r2, r3
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	701a      	strb	r2, [r3, #0]
      i++;
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	3301      	adds	r3, #1
 800758a:	623b      	str	r3, [r7, #32]
      pDest++;
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	3301      	adds	r3, #1
 8007590:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007592:	8bfb      	ldrh	r3, [r7, #30]
 8007594:	3b01      	subs	r3, #1
 8007596:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007598:	8bfb      	ldrh	r3, [r7, #30]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1ea      	bne.n	8007574 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	372c      	adds	r7, #44	@ 0x2c
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d12c      	bne.n	8007622 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	db12      	blt.n	8007600 <USB_EPSetStall+0x54>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00f      	beq.n	8007600 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	0151      	lsls	r1, r2, #5
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	440a      	add	r2, r1
 80075f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	440a      	add	r2, r1
 8007616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800761a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e02b      	b.n	800767a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	db12      	blt.n	800765a <USB_EPSetStall+0xae>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00f      	beq.n	800765a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007654:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007658:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	440a      	add	r2, r1
 8007670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007674:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007678:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	785b      	ldrb	r3, [r3, #1]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d128      	bne.n	80076f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	791b      	ldrb	r3, [r3, #4]
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d003      	beq.n	80076d4 <USB_EPClearStall+0x4c>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	791b      	ldrb	r3, [r3, #4]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d138      	bne.n	8007746 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	0151      	lsls	r1, r2, #5
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	440a      	add	r2, r1
 80076ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	e027      	b.n	8007746 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007710:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007714:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	791b      	ldrb	r3, [r3, #4]
 800771a:	2b03      	cmp	r3, #3
 800771c:	d003      	beq.n	8007726 <USB_EPClearStall+0x9e>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	791b      	ldrb	r3, [r3, #4]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d10f      	bne.n	8007746 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	0151      	lsls	r1, r2, #5
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	440a      	add	r2, r1
 800773c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007744:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007772:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007776:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007788:	68f9      	ldr	r1, [r7, #12]
 800778a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800778e:	4313      	orrs	r3, r2
 8007790:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077ba:	f023 0303 	bic.w	r3, r3, #3
 80077be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077ce:	f023 0302 	bic.w	r3, r3, #2
 80077d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b085      	sub	sp, #20
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077fc:	f023 0303 	bic.w	r3, r3, #3
 8007800:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007810:	f043 0302 	orr.w	r3, r3, #2
 8007814:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	4013      	ands	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800783c:	68fb      	ldr	r3, [r7, #12]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	4013      	ands	r3, r2
 800786c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	0c1b      	lsrs	r3, r3, #16
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	4013      	ands	r3, r2
 80078a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	b29b      	uxth	r3, r3
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4013      	ands	r3, r2
 80078de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078e0:	68bb      	ldr	r3, [r7, #8]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b087      	sub	sp, #28
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800790e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007910:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	fa22 f303 	lsr.w	r3, r2, r3
 800791e:	01db      	lsls	r3, r3, #7
 8007920:	b2db      	uxtb	r3, r3
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	4313      	orrs	r3, r2
 8007926:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4013      	ands	r3, r2
 800793a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800793c:	68bb      	ldr	r3, [r7, #8]
}
 800793e:	4618      	mov	r0, r3
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	f003 0301 	and.w	r3, r3, #1
}
 800795a:	4618      	mov	r0, r3
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007980:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007984:	f023 0307 	bic.w	r3, r3, #7
 8007988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800799c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	460b      	mov	r3, r1
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	333c      	adds	r3, #60	@ 0x3c
 80079c2:	3304      	adds	r3, #4
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	4a26      	ldr	r2, [pc, #152]	@ (8007a64 <USB_EP0_OutStart+0xb8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d90a      	bls.n	80079e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079e0:	d101      	bne.n	80079e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	e037      	b.n	8007a56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ec:	461a      	mov	r2, r3
 80079ee:	2300      	movs	r3, #0
 80079f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a14:	f043 0318 	orr.w	r3, r3, #24
 8007a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a28:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007a2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a2e:	7afb      	ldrb	r3, [r7, #11]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d10f      	bne.n	8007a54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a4e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007a52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	4f54300a 	.word	0x4f54300a

08007a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3301      	adds	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a80:	d901      	bls.n	8007a86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e01b      	b.n	8007abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	daf2      	bge.n	8007a74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f043 0201 	orr.w	r2, r3, #1
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aaa:	d901      	bls.n	8007ab0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e006      	b.n	8007abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d0f0      	beq.n	8007a9e <USB_CoreReset+0x36>

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ad8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007adc:	f002 fc9e 	bl	800a41c <USBD_static_malloc>
 8007ae0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d109      	bne.n	8007afc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	32b0      	adds	r2, #176	@ 0xb0
 8007af2:	2100      	movs	r1, #0
 8007af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007af8:	2302      	movs	r3, #2
 8007afa:	e0d4      	b.n	8007ca6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007afc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007b00:	2100      	movs	r1, #0
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f003 fa4b 	bl	800af9e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	32b0      	adds	r2, #176	@ 0xb0
 8007b12:	68f9      	ldr	r1, [r7, #12]
 8007b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	32b0      	adds	r2, #176	@ 0xb0
 8007b22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7c1b      	ldrb	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d138      	bne.n	8007ba6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b34:	4b5e      	ldr	r3, [pc, #376]	@ (8007cb0 <USBD_CDC_Init+0x1e4>)
 8007b36:	7819      	ldrb	r1, [r3, #0]
 8007b38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f002 fb49 	bl	800a1d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b44:	4b5a      	ldr	r3, [pc, #360]	@ (8007cb0 <USBD_CDC_Init+0x1e4>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	f003 020f 	and.w	r2, r3, #15
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	3324      	adds	r3, #36	@ 0x24
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b5e:	4b55      	ldr	r3, [pc, #340]	@ (8007cb4 <USBD_CDC_Init+0x1e8>)
 8007b60:	7819      	ldrb	r1, [r3, #0]
 8007b62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b66:	2202      	movs	r2, #2
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f002 fb34 	bl	800a1d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b6e:	4b51      	ldr	r3, [pc, #324]	@ (8007cb4 <USBD_CDC_Init+0x1e8>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	f003 020f 	and.w	r2, r3, #15
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b86:	2201      	movs	r2, #1
 8007b88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8007cb8 <USBD_CDC_Init+0x1ec>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	f003 020f 	and.w	r2, r3, #15
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	3326      	adds	r3, #38	@ 0x26
 8007ba0:	2210      	movs	r2, #16
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	e035      	b.n	8007c12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ba6:	4b42      	ldr	r3, [pc, #264]	@ (8007cb0 <USBD_CDC_Init+0x1e4>)
 8007ba8:	7819      	ldrb	r1, [r3, #0]
 8007baa:	2340      	movs	r3, #64	@ 0x40
 8007bac:	2202      	movs	r2, #2
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f002 fb11 	bl	800a1d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb0 <USBD_CDC_Init+0x1e4>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	f003 020f 	and.w	r2, r3, #15
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3324      	adds	r3, #36	@ 0x24
 8007bca:	2201      	movs	r2, #1
 8007bcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bce:	4b39      	ldr	r3, [pc, #228]	@ (8007cb4 <USBD_CDC_Init+0x1e8>)
 8007bd0:	7819      	ldrb	r1, [r3, #0]
 8007bd2:	2340      	movs	r3, #64	@ 0x40
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f002 fafd 	bl	800a1d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bdc:	4b35      	ldr	r3, [pc, #212]	@ (8007cb4 <USBD_CDC_Init+0x1e8>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	f003 020f 	and.w	r2, r3, #15
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	440b      	add	r3, r1
 8007bf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8007cb8 <USBD_CDC_Init+0x1ec>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	f003 020f 	and.w	r2, r3, #15
 8007c00:	6879      	ldr	r1, [r7, #4]
 8007c02:	4613      	mov	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	440b      	add	r3, r1
 8007c0c:	3326      	adds	r3, #38	@ 0x26
 8007c0e:	2210      	movs	r2, #16
 8007c10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c12:	4b29      	ldr	r3, [pc, #164]	@ (8007cb8 <USBD_CDC_Init+0x1ec>)
 8007c14:	7819      	ldrb	r1, [r3, #0]
 8007c16:	2308      	movs	r3, #8
 8007c18:	2203      	movs	r2, #3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f002 fadb 	bl	800a1d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c20:	4b25      	ldr	r3, [pc, #148]	@ (8007cb8 <USBD_CDC_Init+0x1ec>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f003 020f 	and.w	r2, r3, #15
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	440b      	add	r3, r1
 8007c34:	3324      	adds	r3, #36	@ 0x24
 8007c36:	2201      	movs	r2, #1
 8007c38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	33b0      	adds	r3, #176	@ 0xb0
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c70:	2302      	movs	r3, #2
 8007c72:	e018      	b.n	8007ca6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	7c1b      	ldrb	r3, [r3, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb4 <USBD_CDC_Init+0x1e8>)
 8007c7e:	7819      	ldrb	r1, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f002 fb92 	bl	800a3b4 <USBD_LL_PrepareReceive>
 8007c90:	e008      	b.n	8007ca4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c92:	4b08      	ldr	r3, [pc, #32]	@ (8007cb4 <USBD_CDC_Init+0x1e8>)
 8007c94:	7819      	ldrb	r1, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c9c:	2340      	movs	r3, #64	@ 0x40
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f002 fb88 	bl	800a3b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200000a3 	.word	0x200000a3
 8007cb4:	200000a4 	.word	0x200000a4
 8007cb8:	200000a5 	.word	0x200000a5

08007cbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8007db4 <USBD_CDC_DeInit+0xf8>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f002 faa7 	bl	800a222 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007cd4:	4b37      	ldr	r3, [pc, #220]	@ (8007db4 <USBD_CDC_DeInit+0xf8>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	f003 020f 	and.w	r2, r3, #15
 8007cdc:	6879      	ldr	r1, [r7, #4]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	3324      	adds	r3, #36	@ 0x24
 8007cea:	2200      	movs	r2, #0
 8007cec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cee:	4b32      	ldr	r3, [pc, #200]	@ (8007db8 <USBD_CDC_DeInit+0xfc>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f002 fa94 	bl	800a222 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8007db8 <USBD_CDC_DeInit+0xfc>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	f003 020f 	and.w	r2, r3, #15
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d12:	2200      	movs	r2, #0
 8007d14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d16:	4b29      	ldr	r3, [pc, #164]	@ (8007dbc <USBD_CDC_DeInit+0x100>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f002 fa80 	bl	800a222 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d22:	4b26      	ldr	r3, [pc, #152]	@ (8007dbc <USBD_CDC_DeInit+0x100>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	f003 020f 	and.w	r2, r3, #15
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	3324      	adds	r3, #36	@ 0x24
 8007d38:	2200      	movs	r2, #0
 8007d3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8007dbc <USBD_CDC_DeInit+0x100>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	3326      	adds	r3, #38	@ 0x26
 8007d52:	2200      	movs	r2, #0
 8007d54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	32b0      	adds	r2, #176	@ 0xb0
 8007d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01f      	beq.n	8007da8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	33b0      	adds	r3, #176	@ 0xb0
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	32b0      	adds	r2, #176	@ 0xb0
 8007d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f002 fb54 	bl	800a438 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	32b0      	adds	r2, #176	@ 0xb0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	200000a3 	.word	0x200000a3
 8007db8:	200000a4 	.word	0x200000a4
 8007dbc:	200000a5 	.word	0x200000a5

08007dc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	32b0      	adds	r2, #176	@ 0xb0
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e0bf      	b.n	8007f70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d050      	beq.n	8007e9e <USBD_CDC_Setup+0xde>
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	f040 80af 	bne.w	8007f60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	88db      	ldrh	r3, [r3, #6]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d03a      	beq.n	8007e80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	b25b      	sxtb	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	da1b      	bge.n	8007e4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	33b0      	adds	r3, #176	@ 0xb0
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	88d2      	ldrh	r2, [r2, #6]
 8007e30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	88db      	ldrh	r3, [r3, #6]
 8007e36:	2b07      	cmp	r3, #7
 8007e38:	bf28      	it	cs
 8007e3a:	2307      	movcs	r3, #7
 8007e3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	89fa      	ldrh	r2, [r7, #14]
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 fd93 	bl	8009970 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e4a:	e090      	b.n	8007f6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	785a      	ldrb	r2, [r3, #1]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	88db      	ldrh	r3, [r3, #6]
 8007e5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e5c:	d803      	bhi.n	8007e66 <USBD_CDC_Setup+0xa6>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	88db      	ldrh	r3, [r3, #6]
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	e000      	b.n	8007e68 <USBD_CDC_Setup+0xa8>
 8007e66:	2240      	movs	r2, #64	@ 0x40
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e6e:	6939      	ldr	r1, [r7, #16]
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007e76:	461a      	mov	r2, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fda5 	bl	80099c8 <USBD_CtlPrepareRx>
      break;
 8007e7e:	e076      	b.n	8007f6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	33b0      	adds	r3, #176	@ 0xb0
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	7850      	ldrb	r0, [r2, #1]
 8007e96:	2200      	movs	r2, #0
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	4798      	blx	r3
      break;
 8007e9c:	e067      	b.n	8007f6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	785b      	ldrb	r3, [r3, #1]
 8007ea2:	2b0b      	cmp	r3, #11
 8007ea4:	d851      	bhi.n	8007f4a <USBD_CDC_Setup+0x18a>
 8007ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eac <USBD_CDC_Setup+0xec>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007edd 	.word	0x08007edd
 8007eb0:	08007f59 	.word	0x08007f59
 8007eb4:	08007f4b 	.word	0x08007f4b
 8007eb8:	08007f4b 	.word	0x08007f4b
 8007ebc:	08007f4b 	.word	0x08007f4b
 8007ec0:	08007f4b 	.word	0x08007f4b
 8007ec4:	08007f4b 	.word	0x08007f4b
 8007ec8:	08007f4b 	.word	0x08007f4b
 8007ecc:	08007f4b 	.word	0x08007f4b
 8007ed0:	08007f4b 	.word	0x08007f4b
 8007ed4:	08007f07 	.word	0x08007f07
 8007ed8:	08007f31 	.word	0x08007f31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d107      	bne.n	8007ef8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ee8:	f107 030a 	add.w	r3, r7, #10
 8007eec:	2202      	movs	r2, #2
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f001 fd3d 	bl	8009970 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ef6:	e032      	b.n	8007f5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 fcbb 	bl	8009876 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f00:	2303      	movs	r3, #3
 8007f02:	75fb      	strb	r3, [r7, #23]
          break;
 8007f04:	e02b      	b.n	8007f5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d107      	bne.n	8007f22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f12:	f107 030d 	add.w	r3, r7, #13
 8007f16:	2201      	movs	r2, #1
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fd28 	bl	8009970 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f20:	e01d      	b.n	8007f5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 fca6 	bl	8009876 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f2e:	e016      	b.n	8007f5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d00f      	beq.n	8007f5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f001 fc99 	bl	8009876 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f44:	2303      	movs	r3, #3
 8007f46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f48:	e008      	b.n	8007f5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 fc92 	bl	8009876 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f52:	2303      	movs	r3, #3
 8007f54:	75fb      	strb	r3, [r7, #23]
          break;
 8007f56:	e002      	b.n	8007f5e <USBD_CDC_Setup+0x19e>
          break;
 8007f58:	bf00      	nop
 8007f5a:	e008      	b.n	8007f6e <USBD_CDC_Setup+0x1ae>
          break;
 8007f5c:	bf00      	nop
      }
      break;
 8007f5e:	e006      	b.n	8007f6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 fc87 	bl	8009876 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	32b0      	adds	r2, #176	@ 0xb0
 8007f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e065      	b.n	800806e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	32b0      	adds	r2, #176	@ 0xb0
 8007fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fb2:	78fb      	ldrb	r3, [r7, #3]
 8007fb4:	f003 020f 	and.w	r2, r3, #15
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	3318      	adds	r3, #24
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d02f      	beq.n	800802c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	f003 020f 	and.w	r2, r3, #15
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	3318      	adds	r3, #24
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	78fb      	ldrb	r3, [r7, #3]
 8007fe4:	f003 010f 	and.w	r1, r3, #15
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	460b      	mov	r3, r1
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	440b      	add	r3, r1
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4403      	add	r3, r0
 8007ff4:	331c      	adds	r3, #28
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ffc:	fb01 f303 	mul.w	r3, r1, r3
 8008000:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008002:	2b00      	cmp	r3, #0
 8008004:	d112      	bne.n	800802c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	f003 020f 	and.w	r2, r3, #15
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	440b      	add	r3, r1
 8008018:	3318      	adds	r3, #24
 800801a:	2200      	movs	r2, #0
 800801c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800801e:	78f9      	ldrb	r1, [r7, #3]
 8008020:	2300      	movs	r3, #0
 8008022:	2200      	movs	r2, #0
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f002 f9a4 	bl	800a372 <USBD_LL_Transmit>
 800802a:	e01f      	b.n	800806c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	33b0      	adds	r3, #176	@ 0xb0
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d010      	beq.n	800806c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	33b0      	adds	r3, #176	@ 0xb0
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008068:	78fa      	ldrb	r2, [r7, #3]
 800806a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	460b      	mov	r3, r1
 8008080:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	32b0      	adds	r2, #176	@ 0xb0
 800808c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008090:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	32b0      	adds	r2, #176	@ 0xb0
 800809c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e01a      	b.n	80080de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f002 f9a2 	bl	800a3f6 <USBD_LL_GetRxDataSize>
 80080b2:	4602      	mov	r2, r0
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	33b0      	adds	r3, #176	@ 0xb0
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80080d8:	4611      	mov	r1, r2
 80080da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	32b0      	adds	r2, #176	@ 0xb0
 80080f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008104:	2303      	movs	r3, #3
 8008106:	e024      	b.n	8008152 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	33b0      	adds	r3, #176	@ 0xb0
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d019      	beq.n	8008150 <USBD_CDC_EP0_RxReady+0x6a>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008122:	2bff      	cmp	r3, #255	@ 0xff
 8008124:	d014      	beq.n	8008150 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	33b0      	adds	r3, #176	@ 0xb0
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800813e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008146:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	22ff      	movs	r2, #255	@ 0xff
 800814c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008164:	2182      	movs	r1, #130	@ 0x82
 8008166:	4818      	ldr	r0, [pc, #96]	@ (80081c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008168:	f000 fd4f 	bl	8008c0a <USBD_GetEpDesc>
 800816c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800816e:	2101      	movs	r1, #1
 8008170:	4815      	ldr	r0, [pc, #84]	@ (80081c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008172:	f000 fd4a 	bl	8008c0a <USBD_GetEpDesc>
 8008176:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008178:	2181      	movs	r1, #129	@ 0x81
 800817a:	4813      	ldr	r0, [pc, #76]	@ (80081c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800817c:	f000 fd45 	bl	8008c0a <USBD_GetEpDesc>
 8008180:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2210      	movs	r2, #16
 800818c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d006      	beq.n	80081a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2200      	movs	r2, #0
 8008198:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800819c:	711a      	strb	r2, [r3, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d006      	beq.n	80081b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081b0:	711a      	strb	r2, [r3, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2243      	movs	r2, #67	@ 0x43
 80081ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081bc:	4b02      	ldr	r3, [pc, #8]	@ (80081c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20000060 	.word	0x20000060

080081cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081d4:	2182      	movs	r1, #130	@ 0x82
 80081d6:	4818      	ldr	r0, [pc, #96]	@ (8008238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081d8:	f000 fd17 	bl	8008c0a <USBD_GetEpDesc>
 80081dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081de:	2101      	movs	r1, #1
 80081e0:	4815      	ldr	r0, [pc, #84]	@ (8008238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081e2:	f000 fd12 	bl	8008c0a <USBD_GetEpDesc>
 80081e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081e8:	2181      	movs	r1, #129	@ 0x81
 80081ea:	4813      	ldr	r0, [pc, #76]	@ (8008238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081ec:	f000 fd0d 	bl	8008c0a <USBD_GetEpDesc>
 80081f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2210      	movs	r2, #16
 80081fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d006      	beq.n	8008212 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	2200      	movs	r2, #0
 8008208:	711a      	strb	r2, [r3, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f042 0202 	orr.w	r2, r2, #2
 8008210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d006      	beq.n	8008226 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	711a      	strb	r2, [r3, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f042 0202 	orr.w	r2, r2, #2
 8008224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2243      	movs	r2, #67	@ 0x43
 800822a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800822c:	4b02      	ldr	r3, [pc, #8]	@ (8008238 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000060 	.word	0x20000060

0800823c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008244:	2182      	movs	r1, #130	@ 0x82
 8008246:	4818      	ldr	r0, [pc, #96]	@ (80082a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008248:	f000 fcdf 	bl	8008c0a <USBD_GetEpDesc>
 800824c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800824e:	2101      	movs	r1, #1
 8008250:	4815      	ldr	r0, [pc, #84]	@ (80082a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008252:	f000 fcda 	bl	8008c0a <USBD_GetEpDesc>
 8008256:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008258:	2181      	movs	r1, #129	@ 0x81
 800825a:	4813      	ldr	r0, [pc, #76]	@ (80082a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800825c:	f000 fcd5 	bl	8008c0a <USBD_GetEpDesc>
 8008260:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2210      	movs	r2, #16
 800826c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d006      	beq.n	8008282 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2200      	movs	r2, #0
 8008278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800827c:	711a      	strb	r2, [r3, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d006      	beq.n	8008296 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008290:	711a      	strb	r2, [r3, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2243      	movs	r2, #67	@ 0x43
 800829a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800829c:	4b02      	ldr	r3, [pc, #8]	@ (80082a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000060 	.word	0x20000060

080082ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	220a      	movs	r2, #10
 80082b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082ba:	4b03      	ldr	r3, [pc, #12]	@ (80082c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	2000001c 	.word	0x2000001c

080082cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082dc:	2303      	movs	r3, #3
 80082de:	e009      	b.n	80082f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	33b0      	adds	r3, #176	@ 0xb0
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	32b0      	adds	r2, #176	@ 0xb0
 8008316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008322:	2303      	movs	r3, #3
 8008324:	e008      	b.n	8008338 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	32b0      	adds	r2, #176	@ 0xb0
 8008358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008364:	2303      	movs	r3, #3
 8008366:	e004      	b.n	8008372 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
	...

08008380 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	32b0      	adds	r2, #176	@ 0xb0
 8008392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008396:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008398:	2301      	movs	r3, #1
 800839a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e025      	b.n	80083f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11f      	bne.n	80083f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80083b8:	4b10      	ldr	r3, [pc, #64]	@ (80083fc <USBD_CDC_TransmitPacket+0x7c>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	f003 020f 	and.w	r2, r3, #15
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4613      	mov	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4403      	add	r3, r0
 80083d2:	3318      	adds	r3, #24
 80083d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80083d6:	4b09      	ldr	r3, [pc, #36]	@ (80083fc <USBD_CDC_TransmitPacket+0x7c>)
 80083d8:	7819      	ldrb	r1, [r3, #0]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 ffc3 	bl	800a372 <USBD_LL_Transmit>

    ret = USBD_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	200000a3 	.word	0x200000a3

08008400 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	32b0      	adds	r2, #176	@ 0xb0
 8008412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008416:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	32b0      	adds	r2, #176	@ 0xb0
 8008422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800842a:	2303      	movs	r3, #3
 800842c:	e018      	b.n	8008460 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	7c1b      	ldrb	r3, [r3, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10a      	bne.n	800844c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008436:	4b0c      	ldr	r3, [pc, #48]	@ (8008468 <USBD_CDC_ReceivePacket+0x68>)
 8008438:	7819      	ldrb	r1, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008440:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 ffb5 	bl	800a3b4 <USBD_LL_PrepareReceive>
 800844a:	e008      	b.n	800845e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800844c:	4b06      	ldr	r3, [pc, #24]	@ (8008468 <USBD_CDC_ReceivePacket+0x68>)
 800844e:	7819      	ldrb	r1, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008456:	2340      	movs	r3, #64	@ 0x40
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 ffab 	bl	800a3b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	200000a4 	.word	0x200000a4

0800846c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008480:	2303      	movs	r3, #3
 8008482:	e01f      	b.n	80084c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	79fa      	ldrb	r2, [r7, #7]
 80084b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f001 fe25 	bl	800a108 <USBD_LL_Init>
 80084be:	4603      	mov	r3, r0
 80084c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e025      	b.n	8008530 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	32ae      	adds	r2, #174	@ 0xae
 80084f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00f      	beq.n	8008520 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	32ae      	adds	r2, #174	@ 0xae
 800850a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008510:	f107 020e 	add.w	r2, r7, #14
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	4602      	mov	r2, r0
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 fe2d 	bl	800a1a0 <USBD_LL_Start>
 8008546:	4603      	mov	r3, r0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800857c:	2b00      	cmp	r3, #0
 800857e:	d009      	beq.n	8008594 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	78fa      	ldrb	r2, [r7, #3]
 800858a:	4611      	mov	r1, r2
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	78fa      	ldrb	r2, [r7, #3]
 80085b8:	4611      	mov	r1, r2
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085c4:	2303      	movs	r3, #3
 80085c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 f90c 	bl	8009802 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80085f8:	461a      	mov	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008606:	f003 031f 	and.w	r3, r3, #31
 800860a:	2b02      	cmp	r3, #2
 800860c:	d01a      	beq.n	8008644 <USBD_LL_SetupStage+0x72>
 800860e:	2b02      	cmp	r3, #2
 8008610:	d822      	bhi.n	8008658 <USBD_LL_SetupStage+0x86>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <USBD_LL_SetupStage+0x4a>
 8008616:	2b01      	cmp	r3, #1
 8008618:	d00a      	beq.n	8008630 <USBD_LL_SetupStage+0x5e>
 800861a:	e01d      	b.n	8008658 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fb63 	bl	8008cf0 <USBD_StdDevReq>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
      break;
 800862e:	e020      	b.n	8008672 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fbcb 	bl	8008dd4 <USBD_StdItfReq>
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]
      break;
 8008642:	e016      	b.n	8008672 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fc2d 	bl	8008eac <USBD_StdEPReq>
 8008652:	4603      	mov	r3, r0
 8008654:	73fb      	strb	r3, [r7, #15]
      break;
 8008656:	e00c      	b.n	8008672 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800865e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008662:	b2db      	uxtb	r3, r3
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 fdfa 	bl	800a260 <USBD_LL_StallEP>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
      break;
 8008670:	bf00      	nop
  }

  return ret;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	460b      	mov	r3, r1
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800868e:	7afb      	ldrb	r3, [r7, #11]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d16e      	bne.n	8008772 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800869a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	f040 8098 	bne.w	80087d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d913      	bls.n	80086dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	1ad2      	subs	r2, r2, r3
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	68da      	ldr	r2, [r3, #12]
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	4293      	cmp	r3, r2
 80086cc:	bf28      	it	cs
 80086ce:	4613      	movcs	r3, r2
 80086d0:	461a      	mov	r2, r3
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f001 f994 	bl	8009a02 <USBD_CtlContinueRx>
 80086da:	e07d      	b.n	80087d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086e2:	f003 031f 	and.w	r3, r3, #31
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d014      	beq.n	8008714 <USBD_LL_DataOutStage+0x98>
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d81d      	bhi.n	800872a <USBD_LL_DataOutStage+0xae>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d002      	beq.n	80086f8 <USBD_LL_DataOutStage+0x7c>
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d003      	beq.n	80086fe <USBD_LL_DataOutStage+0x82>
 80086f6:	e018      	b.n	800872a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	75bb      	strb	r3, [r7, #22]
            break;
 80086fc:	e018      	b.n	8008730 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008704:	b2db      	uxtb	r3, r3
 8008706:	4619      	mov	r1, r3
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 fa64 	bl	8008bd6 <USBD_CoreFindIF>
 800870e:	4603      	mov	r3, r0
 8008710:	75bb      	strb	r3, [r7, #22]
            break;
 8008712:	e00d      	b.n	8008730 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800871a:	b2db      	uxtb	r3, r3
 800871c:	4619      	mov	r1, r3
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 fa66 	bl	8008bf0 <USBD_CoreFindEP>
 8008724:	4603      	mov	r3, r0
 8008726:	75bb      	strb	r3, [r7, #22]
            break;
 8008728:	e002      	b.n	8008730 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	75bb      	strb	r3, [r7, #22]
            break;
 800872e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008730:	7dbb      	ldrb	r3, [r7, #22]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d119      	bne.n	800876a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b03      	cmp	r3, #3
 8008740:	d113      	bne.n	800876a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008742:	7dba      	ldrb	r2, [r7, #22]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	32ae      	adds	r2, #174	@ 0xae
 8008748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00b      	beq.n	800876a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008752:	7dba      	ldrb	r2, [r7, #22]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800875a:	7dba      	ldrb	r2, [r7, #22]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	32ae      	adds	r2, #174	@ 0xae
 8008760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f001 f95a 	bl	8009a24 <USBD_CtlSendStatus>
 8008770:	e032      	b.n	80087d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008778:	b2db      	uxtb	r3, r3
 800877a:	4619      	mov	r1, r3
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fa37 	bl	8008bf0 <USBD_CoreFindEP>
 8008782:	4603      	mov	r3, r0
 8008784:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008786:	7dbb      	ldrb	r3, [r7, #22]
 8008788:	2bff      	cmp	r3, #255	@ 0xff
 800878a:	d025      	beq.n	80087d8 <USBD_LL_DataOutStage+0x15c>
 800878c:	7dbb      	ldrb	r3, [r7, #22]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d122      	bne.n	80087d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b03      	cmp	r3, #3
 800879c:	d117      	bne.n	80087ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800879e:	7dba      	ldrb	r2, [r7, #22]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	32ae      	adds	r2, #174	@ 0xae
 80087a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00f      	beq.n	80087ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087ae:	7dba      	ldrb	r2, [r7, #22]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087b6:	7dba      	ldrb	r2, [r7, #22]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	32ae      	adds	r2, #174	@ 0xae
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	7afa      	ldrb	r2, [r7, #11]
 80087c4:	4611      	mov	r1, r2
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	4798      	blx	r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
 80087d6:	e000      	b.n	80087da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b086      	sub	sp, #24
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	460b      	mov	r3, r1
 80087ec:	607a      	str	r2, [r7, #4]
 80087ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087f0:	7afb      	ldrb	r3, [r7, #11]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d16f      	bne.n	80088d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3314      	adds	r3, #20
 80087fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008802:	2b02      	cmp	r3, #2
 8008804:	d15a      	bne.n	80088bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	429a      	cmp	r2, r3
 8008810:	d914      	bls.n	800883c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	461a      	mov	r2, r3
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f001 f8bc 	bl	80099a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800882e:	2300      	movs	r3, #0
 8008830:	2200      	movs	r2, #0
 8008832:	2100      	movs	r1, #0
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f001 fdbd 	bl	800a3b4 <USBD_LL_PrepareReceive>
 800883a:	e03f      	b.n	80088bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	68da      	ldr	r2, [r3, #12]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	429a      	cmp	r2, r3
 8008846:	d11c      	bne.n	8008882 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008850:	429a      	cmp	r2, r3
 8008852:	d316      	bcc.n	8008882 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800885e:	429a      	cmp	r2, r3
 8008860:	d20f      	bcs.n	8008882 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008862:	2200      	movs	r2, #0
 8008864:	2100      	movs	r1, #0
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f001 f89d 	bl	80099a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008874:	2300      	movs	r3, #0
 8008876:	2200      	movs	r2, #0
 8008878:	2100      	movs	r1, #0
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f001 fd9a 	bl	800a3b4 <USBD_LL_PrepareReceive>
 8008880:	e01c      	b.n	80088bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b03      	cmp	r3, #3
 800888c:	d10f      	bne.n	80088ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d009      	beq.n	80088ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ae:	2180      	movs	r1, #128	@ 0x80
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f001 fcd5 	bl	800a260 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f001 f8c7 	bl	8009a4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d03a      	beq.n	800893c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff fe42 	bl	8008550 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80088d4:	e032      	b.n	800893c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088d6:	7afb      	ldrb	r3, [r7, #11]
 80088d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	4619      	mov	r1, r3
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f985 	bl	8008bf0 <USBD_CoreFindEP>
 80088e6:	4603      	mov	r3, r0
 80088e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	2bff      	cmp	r3, #255	@ 0xff
 80088ee:	d025      	beq.n	800893c <USBD_LL_DataInStage+0x15a>
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d122      	bne.n	800893c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d11c      	bne.n	800893c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008902:	7dfa      	ldrb	r2, [r7, #23]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	32ae      	adds	r2, #174	@ 0xae
 8008908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d014      	beq.n	800893c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008912:	7dfa      	ldrb	r2, [r7, #23]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800891a:	7dfa      	ldrb	r2, [r7, #23]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	32ae      	adds	r2, #174	@ 0xae
 8008920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	7afa      	ldrb	r2, [r7, #11]
 8008928:	4611      	mov	r1, r2
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	4798      	blx	r3
 800892e:	4603      	mov	r3, r0
 8008930:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008932:	7dbb      	ldrb	r3, [r7, #22]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008938:	7dbb      	ldrb	r3, [r7, #22]
 800893a:	e000      	b.n	800893e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d014      	beq.n	80089ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00e      	beq.n	80089ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6852      	ldr	r2, [r2, #4]
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	4611      	mov	r1, r2
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089a8:	2303      	movs	r3, #3
 80089aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089ac:	2340      	movs	r3, #64	@ 0x40
 80089ae:	2200      	movs	r2, #0
 80089b0:	2100      	movs	r1, #0
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 fc0f 	bl	800a1d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2240      	movs	r2, #64	@ 0x40
 80089c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089c8:	2340      	movs	r3, #64	@ 0x40
 80089ca:	2200      	movs	r2, #0
 80089cc:	2180      	movs	r1, #128	@ 0x80
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 fc01 	bl	800a1d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2240      	movs	r2, #64	@ 0x40
 80089de:	621a      	str	r2, [r3, #32]

  return ret;
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	78fa      	ldrb	r2, [r7, #3]
 80089fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b04      	cmp	r3, #4
 8008a1c:	d006      	beq.n	8008a2c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2204      	movs	r2, #4
 8008a30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d106      	bne.n	8008a64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d110      	bne.n	8008aa8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	32ae      	adds	r2, #174	@ 0xae
 8008ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e01c      	b.n	8008b0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d115      	bne.n	8008b0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	32ae      	adds	r2, #174	@ 0xae
 8008aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	32ae      	adds	r2, #174	@ 0xae
 8008afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	78fa      	ldrb	r2, [r7, #3]
 8008b06:	4611      	mov	r1, r2
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	32ae      	adds	r2, #174	@ 0xae
 8008b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e01c      	b.n	8008b72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d115      	bne.n	8008b70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	32ae      	adds	r2, #174	@ 0xae
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00b      	beq.n	8008b70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	32ae      	adds	r2, #174	@ 0xae
 8008b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00e      	beq.n	8008bcc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6852      	ldr	r2, [r2, #4]
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008be2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bfc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b086      	sub	sp, #24
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	460b      	mov	r3, r1
 8008c14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	885b      	ldrh	r3, [r3, #2]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	7812      	ldrb	r2, [r2, #0]
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d91f      	bls.n	8008c70 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c36:	e013      	b.n	8008c60 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c38:	f107 030a 	add.w	r3, r7, #10
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6978      	ldr	r0, [r7, #20]
 8008c40:	f000 f81b 	bl	8008c7a <USBD_GetNextDesc>
 8008c44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	785b      	ldrb	r3, [r3, #1]
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	d108      	bne.n	8008c60 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	789b      	ldrb	r3, [r3, #2]
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d008      	beq.n	8008c6e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	885b      	ldrh	r3, [r3, #2]
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	897b      	ldrh	r3, [r7, #10]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d8e5      	bhi.n	8008c38 <USBD_GetEpDesc+0x2e>
 8008c6c:	e000      	b.n	8008c70 <USBD_GetEpDesc+0x66>
          break;
 8008c6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c70:	693b      	ldr	r3, [r7, #16]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	7812      	ldrb	r2, [r2, #0]
 8008c90:	4413      	add	r3, r2
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b087      	sub	sp, #28
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cd0:	8a3b      	ldrh	r3, [r7, #16]
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	b21a      	sxth	r2, r3
 8008cd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	b21b      	sxth	r3, r3
 8008cde:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ce0:	89fb      	ldrh	r3, [r7, #14]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d06:	2b40      	cmp	r3, #64	@ 0x40
 8008d08:	d005      	beq.n	8008d16 <USBD_StdDevReq+0x26>
 8008d0a:	2b40      	cmp	r3, #64	@ 0x40
 8008d0c:	d857      	bhi.n	8008dbe <USBD_StdDevReq+0xce>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00f      	beq.n	8008d32 <USBD_StdDevReq+0x42>
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	d153      	bne.n	8008dbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	32ae      	adds	r2, #174	@ 0xae
 8008d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	4798      	blx	r3
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d30:	e04a      	b.n	8008dc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	785b      	ldrb	r3, [r3, #1]
 8008d36:	2b09      	cmp	r3, #9
 8008d38:	d83b      	bhi.n	8008db2 <USBD_StdDevReq+0xc2>
 8008d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d40 <USBD_StdDevReq+0x50>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008da9 	.word	0x08008da9
 8008d48:	08008db3 	.word	0x08008db3
 8008d4c:	08008d9f 	.word	0x08008d9f
 8008d50:	08008db3 	.word	0x08008db3
 8008d54:	08008d73 	.word	0x08008d73
 8008d58:	08008d69 	.word	0x08008d69
 8008d5c:	08008db3 	.word	0x08008db3
 8008d60:	08008d8b 	.word	0x08008d8b
 8008d64:	08008d7d 	.word	0x08008d7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa3c 	bl	80091e8 <USBD_GetDescriptor>
          break;
 8008d70:	e024      	b.n	8008dbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fba1 	bl	80094bc <USBD_SetAddress>
          break;
 8008d7a:	e01f      	b.n	8008dbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fbe0 	bl	8009544 <USBD_SetConfig>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]
          break;
 8008d88:	e018      	b.n	8008dbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fc83 	bl	8009698 <USBD_GetConfig>
          break;
 8008d92:	e013      	b.n	8008dbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fcb4 	bl	8009704 <USBD_GetStatus>
          break;
 8008d9c:	e00e      	b.n	8008dbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fce3 	bl	800976c <USBD_SetFeature>
          break;
 8008da6:	e009      	b.n	8008dbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fd07 	bl	80097be <USBD_ClrFeature>
          break;
 8008db0:	e004      	b.n	8008dbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fd5e 	bl	8009876 <USBD_CtlError>
          break;
 8008dba:	bf00      	nop
      }
      break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fd58 	bl	8009876 <USBD_CtlError>
      break;
 8008dc6:	bf00      	nop
  }

  return ret;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop

08008dd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dea:	2b40      	cmp	r3, #64	@ 0x40
 8008dec:	d005      	beq.n	8008dfa <USBD_StdItfReq+0x26>
 8008dee:	2b40      	cmp	r3, #64	@ 0x40
 8008df0:	d852      	bhi.n	8008e98 <USBD_StdItfReq+0xc4>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <USBD_StdItfReq+0x26>
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	d14e      	bne.n	8008e98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	3b01      	subs	r3, #1
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d840      	bhi.n	8008e8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	889b      	ldrh	r3, [r3, #4]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d836      	bhi.n	8008e80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	889b      	ldrh	r3, [r3, #4]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff fedb 	bl	8008bd6 <USBD_CoreFindIF>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	2bff      	cmp	r3, #255	@ 0xff
 8008e28:	d01d      	beq.n	8008e66 <USBD_StdItfReq+0x92>
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d11a      	bne.n	8008e66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e30:	7bba      	ldrb	r2, [r7, #14]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	32ae      	adds	r2, #174	@ 0xae
 8008e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00f      	beq.n	8008e60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e40:	7bba      	ldrb	r2, [r7, #14]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e48:	7bba      	ldrb	r2, [r7, #14]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	32ae      	adds	r2, #174	@ 0xae
 8008e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	4798      	blx	r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e5e:	e004      	b.n	8008e6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e60:	2303      	movs	r3, #3
 8008e62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e64:	e001      	b.n	8008e6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e66:	2303      	movs	r3, #3
 8008e68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88db      	ldrh	r3, [r3, #6]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d110      	bne.n	8008e94 <USBD_StdItfReq+0xc0>
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10d      	bne.n	8008e94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fdd3 	bl	8009a24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e7e:	e009      	b.n	8008e94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fcf7 	bl	8009876 <USBD_CtlError>
          break;
 8008e88:	e004      	b.n	8008e94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fcf2 	bl	8009876 <USBD_CtlError>
          break;
 8008e92:	e000      	b.n	8008e96 <USBD_StdItfReq+0xc2>
          break;
 8008e94:	bf00      	nop
      }
      break;
 8008e96:	e004      	b.n	8008ea2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fceb 	bl	8009876 <USBD_CtlError>
      break;
 8008ea0:	bf00      	nop
  }

  return ret;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	889b      	ldrh	r3, [r3, #4]
 8008ebe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ec8:	2b40      	cmp	r3, #64	@ 0x40
 8008eca:	d007      	beq.n	8008edc <USBD_StdEPReq+0x30>
 8008ecc:	2b40      	cmp	r3, #64	@ 0x40
 8008ece:	f200 817f 	bhi.w	80091d0 <USBD_StdEPReq+0x324>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d02a      	beq.n	8008f2c <USBD_StdEPReq+0x80>
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	f040 817a 	bne.w	80091d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff fe85 	bl	8008bf0 <USBD_CoreFindEP>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eea:	7b7b      	ldrb	r3, [r7, #13]
 8008eec:	2bff      	cmp	r3, #255	@ 0xff
 8008eee:	f000 8174 	beq.w	80091da <USBD_StdEPReq+0x32e>
 8008ef2:	7b7b      	ldrb	r3, [r7, #13]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f040 8170 	bne.w	80091da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008efa:	7b7a      	ldrb	r2, [r7, #13]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f02:	7b7a      	ldrb	r2, [r7, #13]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	32ae      	adds	r2, #174	@ 0xae
 8008f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 8163 	beq.w	80091da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f14:	7b7a      	ldrb	r2, [r7, #13]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	32ae      	adds	r2, #174	@ 0xae
 8008f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	4798      	blx	r3
 8008f26:	4603      	mov	r3, r0
 8008f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f2a:	e156      	b.n	80091da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	785b      	ldrb	r3, [r3, #1]
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d008      	beq.n	8008f46 <USBD_StdEPReq+0x9a>
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	f300 8145 	bgt.w	80091c4 <USBD_StdEPReq+0x318>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 809b 	beq.w	8009076 <USBD_StdEPReq+0x1ca>
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d03c      	beq.n	8008fbe <USBD_StdEPReq+0x112>
 8008f44:	e13e      	b.n	80091c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d002      	beq.n	8008f58 <USBD_StdEPReq+0xac>
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d016      	beq.n	8008f84 <USBD_StdEPReq+0xd8>
 8008f56:	e02c      	b.n	8008fb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f58:	7bbb      	ldrb	r3, [r7, #14]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00d      	beq.n	8008f7a <USBD_StdEPReq+0xce>
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	2b80      	cmp	r3, #128	@ 0x80
 8008f62:	d00a      	beq.n	8008f7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 f979 	bl	800a260 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f6e:	2180      	movs	r1, #128	@ 0x80
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 f975 	bl	800a260 <USBD_LL_StallEP>
 8008f76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f78:	e020      	b.n	8008fbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fc7a 	bl	8009876 <USBD_CtlError>
              break;
 8008f82:	e01b      	b.n	8008fbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	885b      	ldrh	r3, [r3, #2]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10e      	bne.n	8008faa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00b      	beq.n	8008faa <USBD_StdEPReq+0xfe>
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
 8008f94:	2b80      	cmp	r3, #128	@ 0x80
 8008f96:	d008      	beq.n	8008faa <USBD_StdEPReq+0xfe>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	88db      	ldrh	r3, [r3, #6]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d104      	bne.n	8008faa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 f95b 	bl	800a260 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fd3a 	bl	8009a24 <USBD_CtlSendStatus>

              break;
 8008fb0:	e004      	b.n	8008fbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fc5e 	bl	8009876 <USBD_CtlError>
              break;
 8008fba:	bf00      	nop
          }
          break;
 8008fbc:	e107      	b.n	80091ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d002      	beq.n	8008fd0 <USBD_StdEPReq+0x124>
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d016      	beq.n	8008ffc <USBD_StdEPReq+0x150>
 8008fce:	e04b      	b.n	8009068 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00d      	beq.n	8008ff2 <USBD_StdEPReq+0x146>
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	2b80      	cmp	r3, #128	@ 0x80
 8008fda:	d00a      	beq.n	8008ff2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 f93d 	bl	800a260 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fe6:	2180      	movs	r1, #128	@ 0x80
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 f939 	bl	800a260 <USBD_LL_StallEP>
 8008fee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ff0:	e040      	b.n	8009074 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fc3e 	bl	8009876 <USBD_CtlError>
              break;
 8008ffa:	e03b      	b.n	8009074 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	885b      	ldrh	r3, [r3, #2]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d136      	bne.n	8009072 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 f943 	bl	800a29e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fd03 	bl	8009a24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff fde4 	bl	8008bf0 <USBD_CoreFindEP>
 8009028:	4603      	mov	r3, r0
 800902a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800902c:	7b7b      	ldrb	r3, [r7, #13]
 800902e:	2bff      	cmp	r3, #255	@ 0xff
 8009030:	d01f      	beq.n	8009072 <USBD_StdEPReq+0x1c6>
 8009032:	7b7b      	ldrb	r3, [r7, #13]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d11c      	bne.n	8009072 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009038:	7b7a      	ldrb	r2, [r7, #13]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009040:	7b7a      	ldrb	r2, [r7, #13]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	32ae      	adds	r2, #174	@ 0xae
 8009046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d010      	beq.n	8009072 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009050:	7b7a      	ldrb	r2, [r7, #13]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	32ae      	adds	r2, #174	@ 0xae
 8009056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	4798      	blx	r3
 8009062:	4603      	mov	r3, r0
 8009064:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009066:	e004      	b.n	8009072 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fc03 	bl	8009876 <USBD_CtlError>
              break;
 8009070:	e000      	b.n	8009074 <USBD_StdEPReq+0x1c8>
              break;
 8009072:	bf00      	nop
          }
          break;
 8009074:	e0ab      	b.n	80091ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b02      	cmp	r3, #2
 8009080:	d002      	beq.n	8009088 <USBD_StdEPReq+0x1dc>
 8009082:	2b03      	cmp	r3, #3
 8009084:	d032      	beq.n	80090ec <USBD_StdEPReq+0x240>
 8009086:	e097      	b.n	80091b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d007      	beq.n	800909e <USBD_StdEPReq+0x1f2>
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	2b80      	cmp	r3, #128	@ 0x80
 8009092:	d004      	beq.n	800909e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fbed 	bl	8009876 <USBD_CtlError>
                break;
 800909c:	e091      	b.n	80091c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800909e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	da0b      	bge.n	80090be <USBD_StdEPReq+0x212>
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090ac:	4613      	mov	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	3310      	adds	r3, #16
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	4413      	add	r3, r2
 80090ba:	3304      	adds	r3, #4
 80090bc:	e00b      	b.n	80090d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	4413      	add	r3, r2
 80090d4:	3304      	adds	r3, #4
 80090d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2202      	movs	r2, #2
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fc43 	bl	8009970 <USBD_CtlSendData>
              break;
 80090ea:	e06a      	b.n	80091c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	da11      	bge.n	8009118 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	f003 020f 	and.w	r2, r3, #15
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	440b      	add	r3, r1
 8009106:	3324      	adds	r3, #36	@ 0x24
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d117      	bne.n	800913e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fbb0 	bl	8009876 <USBD_CtlError>
                  break;
 8009116:	e054      	b.n	80091c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	f003 020f 	and.w	r2, r3, #15
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d104      	bne.n	800913e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fb9d 	bl	8009876 <USBD_CtlError>
                  break;
 800913c:	e041      	b.n	80091c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800913e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009142:	2b00      	cmp	r3, #0
 8009144:	da0b      	bge.n	800915e <USBD_StdEPReq+0x2b2>
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	3310      	adds	r3, #16
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	4413      	add	r3, r2
 800915a:	3304      	adds	r3, #4
 800915c:	e00b      	b.n	8009176 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009164:	4613      	mov	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	4413      	add	r3, r2
 8009174:	3304      	adds	r3, #4
 8009176:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <USBD_StdEPReq+0x2d8>
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	2b80      	cmp	r3, #128	@ 0x80
 8009182:	d103      	bne.n	800918c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2200      	movs	r2, #0
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	e00e      	b.n	80091aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 f8a3 	bl	800a2dc <USBD_LL_IsStallEP>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2201      	movs	r2, #1
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	e002      	b.n	80091aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2202      	movs	r2, #2
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fbdd 	bl	8009970 <USBD_CtlSendData>
              break;
 80091b6:	e004      	b.n	80091c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fb5b 	bl	8009876 <USBD_CtlError>
              break;
 80091c0:	bf00      	nop
          }
          break;
 80091c2:	e004      	b.n	80091ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fb55 	bl	8009876 <USBD_CtlError>
          break;
 80091cc:	bf00      	nop
      }
      break;
 80091ce:	e005      	b.n	80091dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fb4f 	bl	8009876 <USBD_CtlError>
      break;
 80091d8:	e000      	b.n	80091dc <USBD_StdEPReq+0x330>
      break;
 80091da:	bf00      	nop
  }

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091f2:	2300      	movs	r3, #0
 80091f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	885b      	ldrh	r3, [r3, #2]
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	b29b      	uxth	r3, r3
 8009206:	3b01      	subs	r3, #1
 8009208:	2b06      	cmp	r3, #6
 800920a:	f200 8128 	bhi.w	800945e <USBD_GetDescriptor+0x276>
 800920e:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <USBD_GetDescriptor+0x2c>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	08009231 	.word	0x08009231
 8009218:	08009249 	.word	0x08009249
 800921c:	08009289 	.word	0x08009289
 8009220:	0800945f 	.word	0x0800945f
 8009224:	0800945f 	.word	0x0800945f
 8009228:	080093ff 	.word	0x080093ff
 800922c:	0800942b 	.word	0x0800942b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	7c12      	ldrb	r2, [r2, #16]
 800923c:	f107 0108 	add.w	r1, r7, #8
 8009240:	4610      	mov	r0, r2
 8009242:	4798      	blx	r3
 8009244:	60f8      	str	r0, [r7, #12]
      break;
 8009246:	e112      	b.n	800946e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	7c1b      	ldrb	r3, [r3, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10d      	bne.n	800926c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009258:	f107 0208 	add.w	r2, r7, #8
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3301      	adds	r3, #1
 8009266:	2202      	movs	r2, #2
 8009268:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800926a:	e100      	b.n	800946e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009274:	f107 0208 	add.w	r2, r7, #8
 8009278:	4610      	mov	r0, r2
 800927a:	4798      	blx	r3
 800927c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3301      	adds	r3, #1
 8009282:	2202      	movs	r2, #2
 8009284:	701a      	strb	r2, [r3, #0]
      break;
 8009286:	e0f2      	b.n	800946e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	885b      	ldrh	r3, [r3, #2]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b05      	cmp	r3, #5
 8009290:	f200 80ac 	bhi.w	80093ec <USBD_GetDescriptor+0x204>
 8009294:	a201      	add	r2, pc, #4	@ (adr r2, 800929c <USBD_GetDescriptor+0xb4>)
 8009296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929a:	bf00      	nop
 800929c:	080092b5 	.word	0x080092b5
 80092a0:	080092e9 	.word	0x080092e9
 80092a4:	0800931d 	.word	0x0800931d
 80092a8:	08009351 	.word	0x08009351
 80092ac:	08009385 	.word	0x08009385
 80092b0:	080093b9 	.word	0x080093b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00b      	beq.n	80092d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	7c12      	ldrb	r2, [r2, #16]
 80092cc:	f107 0108 	add.w	r1, r7, #8
 80092d0:	4610      	mov	r0, r2
 80092d2:	4798      	blx	r3
 80092d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092d6:	e091      	b.n	80093fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 facb 	bl	8009876 <USBD_CtlError>
            err++;
 80092e0:	7afb      	ldrb	r3, [r7, #11]
 80092e2:	3301      	adds	r3, #1
 80092e4:	72fb      	strb	r3, [r7, #11]
          break;
 80092e6:	e089      	b.n	80093fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00b      	beq.n	800930c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	7c12      	ldrb	r2, [r2, #16]
 8009300:	f107 0108 	add.w	r1, r7, #8
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
 8009308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800930a:	e077      	b.n	80093fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fab1 	bl	8009876 <USBD_CtlError>
            err++;
 8009314:	7afb      	ldrb	r3, [r7, #11]
 8009316:	3301      	adds	r3, #1
 8009318:	72fb      	strb	r3, [r7, #11]
          break;
 800931a:	e06f      	b.n	80093fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00b      	beq.n	8009340 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	7c12      	ldrb	r2, [r2, #16]
 8009334:	f107 0108 	add.w	r1, r7, #8
 8009338:	4610      	mov	r0, r2
 800933a:	4798      	blx	r3
 800933c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800933e:	e05d      	b.n	80093fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fa97 	bl	8009876 <USBD_CtlError>
            err++;
 8009348:	7afb      	ldrb	r3, [r7, #11]
 800934a:	3301      	adds	r3, #1
 800934c:	72fb      	strb	r3, [r7, #11]
          break;
 800934e:	e055      	b.n	80093fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00b      	beq.n	8009374 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	7c12      	ldrb	r2, [r2, #16]
 8009368:	f107 0108 	add.w	r1, r7, #8
 800936c:	4610      	mov	r0, r2
 800936e:	4798      	blx	r3
 8009370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009372:	e043      	b.n	80093fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fa7d 	bl	8009876 <USBD_CtlError>
            err++;
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	3301      	adds	r3, #1
 8009380:	72fb      	strb	r3, [r7, #11]
          break;
 8009382:	e03b      	b.n	80093fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00b      	beq.n	80093a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	7c12      	ldrb	r2, [r2, #16]
 800939c:	f107 0108 	add.w	r1, r7, #8
 80093a0:	4610      	mov	r0, r2
 80093a2:	4798      	blx	r3
 80093a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093a6:	e029      	b.n	80093fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fa63 	bl	8009876 <USBD_CtlError>
            err++;
 80093b0:	7afb      	ldrb	r3, [r7, #11]
 80093b2:	3301      	adds	r3, #1
 80093b4:	72fb      	strb	r3, [r7, #11]
          break;
 80093b6:	e021      	b.n	80093fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00b      	beq.n	80093dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	7c12      	ldrb	r2, [r2, #16]
 80093d0:	f107 0108 	add.w	r1, r7, #8
 80093d4:	4610      	mov	r0, r2
 80093d6:	4798      	blx	r3
 80093d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093da:	e00f      	b.n	80093fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fa49 	bl	8009876 <USBD_CtlError>
            err++;
 80093e4:	7afb      	ldrb	r3, [r7, #11]
 80093e6:	3301      	adds	r3, #1
 80093e8:	72fb      	strb	r3, [r7, #11]
          break;
 80093ea:	e007      	b.n	80093fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa41 	bl	8009876 <USBD_CtlError>
          err++;
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	3301      	adds	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80093fa:	bf00      	nop
      }
      break;
 80093fc:	e037      	b.n	800946e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	7c1b      	ldrb	r3, [r3, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d109      	bne.n	800941a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800940c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800940e:	f107 0208 	add.w	r2, r7, #8
 8009412:	4610      	mov	r0, r2
 8009414:	4798      	blx	r3
 8009416:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009418:	e029      	b.n	800946e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fa2a 	bl	8009876 <USBD_CtlError>
        err++;
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	3301      	adds	r3, #1
 8009426:	72fb      	strb	r3, [r7, #11]
      break;
 8009428:	e021      	b.n	800946e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	7c1b      	ldrb	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10d      	bne.n	800944e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800943a:	f107 0208 	add.w	r2, r7, #8
 800943e:	4610      	mov	r0, r2
 8009440:	4798      	blx	r3
 8009442:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3301      	adds	r3, #1
 8009448:	2207      	movs	r2, #7
 800944a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800944c:	e00f      	b.n	800946e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fa10 	bl	8009876 <USBD_CtlError>
        err++;
 8009456:	7afb      	ldrb	r3, [r7, #11]
 8009458:	3301      	adds	r3, #1
 800945a:	72fb      	strb	r3, [r7, #11]
      break;
 800945c:	e007      	b.n	800946e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa08 	bl	8009876 <USBD_CtlError>
      err++;
 8009466:	7afb      	ldrb	r3, [r7, #11]
 8009468:	3301      	adds	r3, #1
 800946a:	72fb      	strb	r3, [r7, #11]
      break;
 800946c:	bf00      	nop
  }

  if (err != 0U)
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d11e      	bne.n	80094b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	88db      	ldrh	r3, [r3, #6]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d016      	beq.n	80094aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800947c:	893b      	ldrh	r3, [r7, #8]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00e      	beq.n	80094a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	88da      	ldrh	r2, [r3, #6]
 8009486:	893b      	ldrh	r3, [r7, #8]
 8009488:	4293      	cmp	r3, r2
 800948a:	bf28      	it	cs
 800948c:	4613      	movcs	r3, r2
 800948e:	b29b      	uxth	r3, r3
 8009490:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009492:	893b      	ldrh	r3, [r7, #8]
 8009494:	461a      	mov	r2, r3
 8009496:	68f9      	ldr	r1, [r7, #12]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fa69 	bl	8009970 <USBD_CtlSendData>
 800949e:	e009      	b.n	80094b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f9e7 	bl	8009876 <USBD_CtlError>
 80094a8:	e004      	b.n	80094b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 faba 	bl	8009a24 <USBD_CtlSendStatus>
 80094b0:	e000      	b.n	80094b4 <USBD_GetDescriptor+0x2cc>
    return;
 80094b2:	bf00      	nop
  }
}
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop

080094bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	889b      	ldrh	r3, [r3, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d131      	bne.n	8009532 <USBD_SetAddress+0x76>
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	88db      	ldrh	r3, [r3, #6]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d12d      	bne.n	8009532 <USBD_SetAddress+0x76>
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	885b      	ldrh	r3, [r3, #2]
 80094da:	2b7f      	cmp	r3, #127	@ 0x7f
 80094dc:	d829      	bhi.n	8009532 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	885b      	ldrh	r3, [r3, #2]
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d104      	bne.n	8009500 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f9bc 	bl	8009876 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094fe:	e01d      	b.n	800953c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	7bfa      	ldrb	r2, [r7, #15]
 8009504:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 ff11 	bl	800a334 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa86 	bl	8009a24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d004      	beq.n	8009528 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2202      	movs	r2, #2
 8009522:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009526:	e009      	b.n	800953c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009530:	e004      	b.n	800953c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f99e 	bl	8009876 <USBD_CtlError>
  }
}
 800953a:	bf00      	nop
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	885b      	ldrh	r3, [r3, #2]
 8009556:	b2da      	uxtb	r2, r3
 8009558:	4b4e      	ldr	r3, [pc, #312]	@ (8009694 <USBD_SetConfig+0x150>)
 800955a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800955c:	4b4d      	ldr	r3, [pc, #308]	@ (8009694 <USBD_SetConfig+0x150>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d905      	bls.n	8009570 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f985 	bl	8009876 <USBD_CtlError>
    return USBD_FAIL;
 800956c:	2303      	movs	r3, #3
 800956e:	e08c      	b.n	800968a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b02      	cmp	r3, #2
 800957a:	d002      	beq.n	8009582 <USBD_SetConfig+0x3e>
 800957c:	2b03      	cmp	r3, #3
 800957e:	d029      	beq.n	80095d4 <USBD_SetConfig+0x90>
 8009580:	e075      	b.n	800966e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009582:	4b44      	ldr	r3, [pc, #272]	@ (8009694 <USBD_SetConfig+0x150>)
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d020      	beq.n	80095cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800958a:	4b42      	ldr	r3, [pc, #264]	@ (8009694 <USBD_SetConfig+0x150>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009594:	4b3f      	ldr	r3, [pc, #252]	@ (8009694 <USBD_SetConfig+0x150>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7fe ffe3 	bl	8008566 <USBD_SetClassConfig>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d008      	beq.n	80095bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f962 	bl	8009876 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2202      	movs	r2, #2
 80095b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095ba:	e065      	b.n	8009688 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fa31 	bl	8009a24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2203      	movs	r2, #3
 80095c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80095ca:	e05d      	b.n	8009688 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fa29 	bl	8009a24 <USBD_CtlSendStatus>
      break;
 80095d2:	e059      	b.n	8009688 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095d4:	4b2f      	ldr	r3, [pc, #188]	@ (8009694 <USBD_SetConfig+0x150>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d112      	bne.n	8009602 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80095e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009694 <USBD_SetConfig+0x150>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	461a      	mov	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095ee:	4b29      	ldr	r3, [pc, #164]	@ (8009694 <USBD_SetConfig+0x150>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7fe ffd2 	bl	800859e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fa12 	bl	8009a24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009600:	e042      	b.n	8009688 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009602:	4b24      	ldr	r3, [pc, #144]	@ (8009694 <USBD_SetConfig+0x150>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	461a      	mov	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	429a      	cmp	r2, r3
 800960e:	d02a      	beq.n	8009666 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	b2db      	uxtb	r3, r3
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7fe ffc0 	bl	800859e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800961e:	4b1d      	ldr	r3, [pc, #116]	@ (8009694 <USBD_SetConfig+0x150>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009628:	4b1a      	ldr	r3, [pc, #104]	@ (8009694 <USBD_SetConfig+0x150>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7fe ff99 	bl	8008566 <USBD_SetClassConfig>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00f      	beq.n	800965e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f918 	bl	8009876 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	b2db      	uxtb	r3, r3
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7fe ffa5 	bl	800859e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800965c:	e014      	b.n	8009688 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f9e0 	bl	8009a24 <USBD_CtlSendStatus>
      break;
 8009664:	e010      	b.n	8009688 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f9dc 	bl	8009a24 <USBD_CtlSendStatus>
      break;
 800966c:	e00c      	b.n	8009688 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f900 	bl	8009876 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009676:	4b07      	ldr	r3, [pc, #28]	@ (8009694 <USBD_SetConfig+0x150>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7fe ff8e 	bl	800859e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009682:	2303      	movs	r3, #3
 8009684:	73fb      	strb	r3, [r7, #15]
      break;
 8009686:	bf00      	nop
  }

  return ret;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	2000052c 	.word	0x2000052c

08009698 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	88db      	ldrh	r3, [r3, #6]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d004      	beq.n	80096b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f8e2 	bl	8009876 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096b2:	e023      	b.n	80096fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	2b02      	cmp	r3, #2
 80096be:	dc02      	bgt.n	80096c6 <USBD_GetConfig+0x2e>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dc03      	bgt.n	80096cc <USBD_GetConfig+0x34>
 80096c4:	e015      	b.n	80096f2 <USBD_GetConfig+0x5a>
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d00b      	beq.n	80096e2 <USBD_GetConfig+0x4a>
 80096ca:	e012      	b.n	80096f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3308      	adds	r3, #8
 80096d6:	2201      	movs	r2, #1
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f948 	bl	8009970 <USBD_CtlSendData>
        break;
 80096e0:	e00c      	b.n	80096fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3304      	adds	r3, #4
 80096e6:	2201      	movs	r2, #1
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f940 	bl	8009970 <USBD_CtlSendData>
        break;
 80096f0:	e004      	b.n	80096fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f8be 	bl	8009876 <USBD_CtlError>
        break;
 80096fa:	bf00      	nop
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009714:	b2db      	uxtb	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	2b02      	cmp	r3, #2
 800971a:	d81e      	bhi.n	800975a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	88db      	ldrh	r3, [r3, #6]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d004      	beq.n	800972e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f8a5 	bl	8009876 <USBD_CtlError>
        break;
 800972c:	e01a      	b.n	8009764 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800973a:	2b00      	cmp	r3, #0
 800973c:	d005      	beq.n	800974a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	f043 0202 	orr.w	r2, r3, #2
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	330c      	adds	r3, #12
 800974e:	2202      	movs	r2, #2
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f90c 	bl	8009970 <USBD_CtlSendData>
      break;
 8009758:	e004      	b.n	8009764 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f88a 	bl	8009876 <USBD_CtlError>
      break;
 8009762:	bf00      	nop
  }
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	885b      	ldrh	r3, [r3, #2]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d107      	bne.n	800978e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f94c 	bl	8009a24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800978c:	e013      	b.n	80097b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	885b      	ldrh	r3, [r3, #2]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d10b      	bne.n	80097ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	889b      	ldrh	r3, [r3, #4]
 800979a:	0a1b      	lsrs	r3, r3, #8
 800979c:	b29b      	uxth	r3, r3
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f93c 	bl	8009a24 <USBD_CtlSendStatus>
}
 80097ac:	e003      	b.n	80097b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f860 	bl	8009876 <USBD_CtlError>
}
 80097b6:	bf00      	nop
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	3b01      	subs	r3, #1
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d80b      	bhi.n	80097ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	885b      	ldrh	r3, [r3, #2]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d10c      	bne.n	80097f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f91c 	bl	8009a24 <USBD_CtlSendStatus>
      }
      break;
 80097ec:	e004      	b.n	80097f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f840 	bl	8009876 <USBD_CtlError>
      break;
 80097f6:	e000      	b.n	80097fa <USBD_ClrFeature+0x3c>
      break;
 80097f8:	bf00      	nop
  }
}
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	781a      	ldrb	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3301      	adds	r3, #1
 800981c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	781a      	ldrb	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7ff fa40 	bl	8008cb2 <SWAPBYTE>
 8009832:	4603      	mov	r3, r0
 8009834:	461a      	mov	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3301      	adds	r3, #1
 8009844:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff fa33 	bl	8008cb2 <SWAPBYTE>
 800984c:	4603      	mov	r3, r0
 800984e:	461a      	mov	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3301      	adds	r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f7ff fa26 	bl	8008cb2 <SWAPBYTE>
 8009866:	4603      	mov	r3, r0
 8009868:	461a      	mov	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	80da      	strh	r2, [r3, #6]
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009880:	2180      	movs	r1, #128	@ 0x80
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fcec 	bl	800a260 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009888:	2100      	movs	r1, #0
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fce8 	bl	800a260 <USBD_LL_StallEP>
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d042      	beq.n	8009934 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80098b2:	6938      	ldr	r0, [r7, #16]
 80098b4:	f000 f842 	bl	800993c <USBD_GetLen>
 80098b8:	4603      	mov	r3, r0
 80098ba:	3301      	adds	r3, #1
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098c2:	d808      	bhi.n	80098d6 <USBD_GetString+0x3e>
 80098c4:	6938      	ldr	r0, [r7, #16]
 80098c6:	f000 f839 	bl	800993c <USBD_GetLen>
 80098ca:	4603      	mov	r3, r0
 80098cc:	3301      	adds	r3, #1
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	005b      	lsls	r3, r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	e001      	b.n	80098da <USBD_GetString+0x42>
 80098d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	4413      	add	r3, r2
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	7812      	ldrb	r2, [r2, #0]
 80098e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	3301      	adds	r3, #1
 80098ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	4413      	add	r3, r2
 80098f6:	2203      	movs	r2, #3
 80098f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80098fa:	7dfb      	ldrb	r3, [r7, #23]
 80098fc:	3301      	adds	r3, #1
 80098fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009900:	e013      	b.n	800992a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009902:	7dfb      	ldrb	r3, [r7, #23]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	4413      	add	r3, r2
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	7812      	ldrb	r2, [r2, #0]
 800990c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	3301      	adds	r3, #1
 8009912:	613b      	str	r3, [r7, #16]
    idx++;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	3301      	adds	r3, #1
 8009918:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	4413      	add	r3, r2
 8009920:	2200      	movs	r2, #0
 8009922:	701a      	strb	r2, [r3, #0]
    idx++;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	3301      	adds	r3, #1
 8009928:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e7      	bne.n	8009902 <USBD_GetString+0x6a>
 8009932:	e000      	b.n	8009936 <USBD_GetString+0x9e>
    return;
 8009934:	bf00      	nop
  }
}
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009944:	2300      	movs	r3, #0
 8009946:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800994c:	e005      	b.n	800995a <USBD_GetLen+0x1e>
  {
    len++;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	3301      	adds	r3, #1
 8009952:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	3301      	adds	r3, #1
 8009958:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1f5      	bne.n	800994e <USBD_GetLen+0x12>
  }

  return len;
 8009962:	7bfb      	ldrb	r3, [r7, #15]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2202      	movs	r2, #2
 8009980:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	2100      	movs	r1, #0
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 fceb 	bl	800a372 <USBD_LL_Transmit>

  return USBD_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	2100      	movs	r1, #0
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 fcda 	bl	800a372 <USBD_LL_Transmit>

  return USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2203      	movs	r2, #3
 80099d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	2100      	movs	r1, #0
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 fcde 	bl	800a3b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	2100      	movs	r1, #0
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 fccd 	bl	800a3b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2204      	movs	r2, #4
 8009a30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a34:	2300      	movs	r3, #0
 8009a36:	2200      	movs	r2, #0
 8009a38:	2100      	movs	r1, #0
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fc99 	bl	800a372 <USBD_LL_Transmit>

  return USBD_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2205      	movs	r2, #5
 8009a56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	2100      	movs	r1, #0
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fca7 	bl	800a3b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a74:	2200      	movs	r2, #0
 8009a76:	4912      	ldr	r1, [pc, #72]	@ (8009ac0 <MX_USB_DEVICE_Init+0x50>)
 8009a78:	4812      	ldr	r0, [pc, #72]	@ (8009ac4 <MX_USB_DEVICE_Init+0x54>)
 8009a7a:	f7fe fcf7 	bl	800846c <USBD_Init>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a84:	f7f8 fcfc 	bl	8002480 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a88:	490f      	ldr	r1, [pc, #60]	@ (8009ac8 <MX_USB_DEVICE_Init+0x58>)
 8009a8a:	480e      	ldr	r0, [pc, #56]	@ (8009ac4 <MX_USB_DEVICE_Init+0x54>)
 8009a8c:	f7fe fd1e 	bl	80084cc <USBD_RegisterClass>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a96:	f7f8 fcf3 	bl	8002480 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a9a:	490c      	ldr	r1, [pc, #48]	@ (8009acc <MX_USB_DEVICE_Init+0x5c>)
 8009a9c:	4809      	ldr	r0, [pc, #36]	@ (8009ac4 <MX_USB_DEVICE_Init+0x54>)
 8009a9e:	f7fe fc15 	bl	80082cc <USBD_CDC_RegisterInterface>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d001      	beq.n	8009aac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009aa8:	f7f8 fcea 	bl	8002480 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009aac:	4805      	ldr	r0, [pc, #20]	@ (8009ac4 <MX_USB_DEVICE_Init+0x54>)
 8009aae:	f7fe fd43 	bl	8008538 <USBD_Start>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ab8:	f7f8 fce2 	bl	8002480 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009abc:	bf00      	nop
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	200000bc 	.word	0x200000bc
 8009ac4:	20000530 	.word	0x20000530
 8009ac8:	20000028 	.word	0x20000028
 8009acc:	200000a8 	.word	0x200000a8

08009ad0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	4905      	ldr	r1, [pc, #20]	@ (8009aec <CDC_Init_FS+0x1c>)
 8009ad8:	4805      	ldr	r0, [pc, #20]	@ (8009af0 <CDC_Init_FS+0x20>)
 8009ada:	f7fe fc11 	bl	8008300 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ade:	4905      	ldr	r1, [pc, #20]	@ (8009af4 <CDC_Init_FS+0x24>)
 8009ae0:	4803      	ldr	r0, [pc, #12]	@ (8009af0 <CDC_Init_FS+0x20>)
 8009ae2:	f7fe fc2f 	bl	8008344 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009ae6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	2000100c 	.word	0x2000100c
 8009af0:	20000530 	.word	0x20000530
 8009af4:	2000080c 	.word	0x2000080c

08009af8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009afc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	6039      	str	r1, [r7, #0]
 8009b12:	71fb      	strb	r3, [r7, #7]
 8009b14:	4613      	mov	r3, r2
 8009b16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b18:	79fb      	ldrb	r3, [r7, #7]
 8009b1a:	2b23      	cmp	r3, #35	@ 0x23
 8009b1c:	d84a      	bhi.n	8009bb4 <CDC_Control_FS+0xac>
 8009b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b24 <CDC_Control_FS+0x1c>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009bb5 	.word	0x08009bb5
 8009b28:	08009bb5 	.word	0x08009bb5
 8009b2c:	08009bb5 	.word	0x08009bb5
 8009b30:	08009bb5 	.word	0x08009bb5
 8009b34:	08009bb5 	.word	0x08009bb5
 8009b38:	08009bb5 	.word	0x08009bb5
 8009b3c:	08009bb5 	.word	0x08009bb5
 8009b40:	08009bb5 	.word	0x08009bb5
 8009b44:	08009bb5 	.word	0x08009bb5
 8009b48:	08009bb5 	.word	0x08009bb5
 8009b4c:	08009bb5 	.word	0x08009bb5
 8009b50:	08009bb5 	.word	0x08009bb5
 8009b54:	08009bb5 	.word	0x08009bb5
 8009b58:	08009bb5 	.word	0x08009bb5
 8009b5c:	08009bb5 	.word	0x08009bb5
 8009b60:	08009bb5 	.word	0x08009bb5
 8009b64:	08009bb5 	.word	0x08009bb5
 8009b68:	08009bb5 	.word	0x08009bb5
 8009b6c:	08009bb5 	.word	0x08009bb5
 8009b70:	08009bb5 	.word	0x08009bb5
 8009b74:	08009bb5 	.word	0x08009bb5
 8009b78:	08009bb5 	.word	0x08009bb5
 8009b7c:	08009bb5 	.word	0x08009bb5
 8009b80:	08009bb5 	.word	0x08009bb5
 8009b84:	08009bb5 	.word	0x08009bb5
 8009b88:	08009bb5 	.word	0x08009bb5
 8009b8c:	08009bb5 	.word	0x08009bb5
 8009b90:	08009bb5 	.word	0x08009bb5
 8009b94:	08009bb5 	.word	0x08009bb5
 8009b98:	08009bb5 	.word	0x08009bb5
 8009b9c:	08009bb5 	.word	0x08009bb5
 8009ba0:	08009bb5 	.word	0x08009bb5
 8009ba4:	08009bb5 	.word	0x08009bb5
 8009ba8:	08009bb5 	.word	0x08009bb5
 8009bac:	08009bb5 	.word	0x08009bb5
 8009bb0:	08009bb5 	.word	0x08009bb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009bb4:	bf00      	nop
  }

  return (USBD_OK);
 8009bb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009bce:	6879      	ldr	r1, [r7, #4]
 8009bd0:	4805      	ldr	r0, [pc, #20]	@ (8009be8 <CDC_Receive_FS+0x24>)
 8009bd2:	f7fe fbb7 	bl	8008344 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009bd6:	4804      	ldr	r0, [pc, #16]	@ (8009be8 <CDC_Receive_FS+0x24>)
 8009bd8:	f7fe fc12 	bl	8008400 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009bdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20000530 	.word	0x20000530

08009bec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8009c34 <CDC_Transmit_FS+0x48>)
 8009bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e00b      	b.n	8009c2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009c12:	887b      	ldrh	r3, [r7, #2]
 8009c14:	461a      	mov	r2, r3
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	4806      	ldr	r0, [pc, #24]	@ (8009c34 <CDC_Transmit_FS+0x48>)
 8009c1a:	f7fe fb71 	bl	8008300 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009c1e:	4805      	ldr	r0, [pc, #20]	@ (8009c34 <CDC_Transmit_FS+0x48>)
 8009c20:	f7fe fbae 	bl	8008380 <USBD_CDC_TransmitPacket>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	20000530 	.word	0x20000530

08009c38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	4613      	mov	r3, r2
 8009c44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	371c      	adds	r7, #28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
	...

08009c5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	6039      	str	r1, [r7, #0]
 8009c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2212      	movs	r2, #18
 8009c6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c6e:	4b03      	ldr	r3, [pc, #12]	@ (8009c7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	200000d8 	.word	0x200000d8

08009c80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	4603      	mov	r3, r0
 8009c88:	6039      	str	r1, [r7, #0]
 8009c8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2204      	movs	r2, #4
 8009c90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c92:	4b03      	ldr	r3, [pc, #12]	@ (8009ca0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	200000ec 	.word	0x200000ec

08009ca4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	4603      	mov	r3, r0
 8009cac:	6039      	str	r1, [r7, #0]
 8009cae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cb0:	79fb      	ldrb	r3, [r7, #7]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d105      	bne.n	8009cc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	4907      	ldr	r1, [pc, #28]	@ (8009cd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cba:	4808      	ldr	r0, [pc, #32]	@ (8009cdc <USBD_FS_ProductStrDescriptor+0x38>)
 8009cbc:	f7ff fdec 	bl	8009898 <USBD_GetString>
 8009cc0:	e004      	b.n	8009ccc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	4904      	ldr	r1, [pc, #16]	@ (8009cd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cc6:	4805      	ldr	r0, [pc, #20]	@ (8009cdc <USBD_FS_ProductStrDescriptor+0x38>)
 8009cc8:	f7ff fde6 	bl	8009898 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ccc:	4b02      	ldr	r3, [pc, #8]	@ (8009cd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	2000180c 	.word	0x2000180c
 8009cdc:	0800e808 	.word	0x0800e808

08009ce0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	6039      	str	r1, [r7, #0]
 8009cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	4904      	ldr	r1, [pc, #16]	@ (8009d00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009cf0:	4804      	ldr	r0, [pc, #16]	@ (8009d04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009cf2:	f7ff fdd1 	bl	8009898 <USBD_GetString>
  return USBD_StrDesc;
 8009cf6:	4b02      	ldr	r3, [pc, #8]	@ (8009d00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	2000180c 	.word	0x2000180c
 8009d04:	0800e820 	.word	0x0800e820

08009d08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	6039      	str	r1, [r7, #0]
 8009d12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	221a      	movs	r2, #26
 8009d18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d1a:	f000 f843 	bl	8009da4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d1e:	4b02      	ldr	r3, [pc, #8]	@ (8009d28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	200000f0 	.word	0x200000f0

08009d2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	6039      	str	r1, [r7, #0]
 8009d36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d38:	79fb      	ldrb	r3, [r7, #7]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d105      	bne.n	8009d4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	4907      	ldr	r1, [pc, #28]	@ (8009d60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d42:	4808      	ldr	r0, [pc, #32]	@ (8009d64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d44:	f7ff fda8 	bl	8009898 <USBD_GetString>
 8009d48:	e004      	b.n	8009d54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	4904      	ldr	r1, [pc, #16]	@ (8009d60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d4e:	4805      	ldr	r0, [pc, #20]	@ (8009d64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d50:	f7ff fda2 	bl	8009898 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d54:	4b02      	ldr	r3, [pc, #8]	@ (8009d60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	2000180c 	.word	0x2000180c
 8009d64:	0800e834 	.word	0x0800e834

08009d68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	4603      	mov	r3, r0
 8009d70:	6039      	str	r1, [r7, #0]
 8009d72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d74:	79fb      	ldrb	r3, [r7, #7]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d105      	bne.n	8009d86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	4907      	ldr	r1, [pc, #28]	@ (8009d9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d7e:	4808      	ldr	r0, [pc, #32]	@ (8009da0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d80:	f7ff fd8a 	bl	8009898 <USBD_GetString>
 8009d84:	e004      	b.n	8009d90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	4904      	ldr	r1, [pc, #16]	@ (8009d9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d8a:	4805      	ldr	r0, [pc, #20]	@ (8009da0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d8c:	f7ff fd84 	bl	8009898 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d90:	4b02      	ldr	r3, [pc, #8]	@ (8009d9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	2000180c 	.word	0x2000180c
 8009da0:	0800e840 	.word	0x0800e840

08009da4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009daa:	4b0f      	ldr	r3, [pc, #60]	@ (8009de8 <Get_SerialNum+0x44>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009db0:	4b0e      	ldr	r3, [pc, #56]	@ (8009dec <Get_SerialNum+0x48>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009db6:	4b0e      	ldr	r3, [pc, #56]	@ (8009df0 <Get_SerialNum+0x4c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009dca:	2208      	movs	r2, #8
 8009dcc:	4909      	ldr	r1, [pc, #36]	@ (8009df4 <Get_SerialNum+0x50>)
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 f814 	bl	8009dfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009dd4:	2204      	movs	r2, #4
 8009dd6:	4908      	ldr	r1, [pc, #32]	@ (8009df8 <Get_SerialNum+0x54>)
 8009dd8:	68b8      	ldr	r0, [r7, #8]
 8009dda:	f000 f80f 	bl	8009dfc <IntToUnicode>
  }
}
 8009dde:	bf00      	nop
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	1fff7a10 	.word	0x1fff7a10
 8009dec:	1fff7a14 	.word	0x1fff7a14
 8009df0:	1fff7a18 	.word	0x1fff7a18
 8009df4:	200000f2 	.word	0x200000f2
 8009df8:	20000102 	.word	0x20000102

08009dfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]
 8009e12:	e027      	b.n	8009e64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	0f1b      	lsrs	r3, r3, #28
 8009e18:	2b09      	cmp	r3, #9
 8009e1a:	d80b      	bhi.n	8009e34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	0f1b      	lsrs	r3, r3, #28
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	4619      	mov	r1, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	440b      	add	r3, r1
 8009e2c:	3230      	adds	r2, #48	@ 0x30
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	701a      	strb	r2, [r3, #0]
 8009e32:	e00a      	b.n	8009e4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	0f1b      	lsrs	r3, r3, #28
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	4619      	mov	r1, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	440b      	add	r3, r1
 8009e44:	3237      	adds	r2, #55	@ 0x37
 8009e46:	b2d2      	uxtb	r2, r2
 8009e48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	3301      	adds	r3, #1
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	4413      	add	r3, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	3301      	adds	r3, #1
 8009e62:	75fb      	strb	r3, [r7, #23]
 8009e64:	7dfa      	ldrb	r2, [r7, #23]
 8009e66:	79fb      	ldrb	r3, [r7, #7]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d3d3      	bcc.n	8009e14 <IntToUnicode+0x18>
  }
}
 8009e6c:	bf00      	nop
 8009e6e:	bf00      	nop
 8009e70:	371c      	adds	r7, #28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
	...

08009e7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08a      	sub	sp, #40	@ 0x28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e84:	f107 0314 	add.w	r3, r7, #20
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	609a      	str	r2, [r3, #8]
 8009e90:	60da      	str	r2, [r3, #12]
 8009e92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e9c:	d13a      	bne.n	8009f14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	613b      	str	r3, [r7, #16]
 8009ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8009f1c <HAL_PCD_MspInit+0xa0>)
 8009ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8009f1c <HAL_PCD_MspInit+0xa0>)
 8009ea8:	f043 0301 	orr.w	r3, r3, #1
 8009eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8009eae:	4b1b      	ldr	r3, [pc, #108]	@ (8009f1c <HAL_PCD_MspInit+0xa0>)
 8009eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	613b      	str	r3, [r7, #16]
 8009eb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009eba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ecc:	230a      	movs	r3, #10
 8009ece:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ed0:	f107 0314 	add.w	r3, r7, #20
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4812      	ldr	r0, [pc, #72]	@ (8009f20 <HAL_PCD_MspInit+0xa4>)
 8009ed8:	f7f9 fa58 	bl	800338c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009edc:	4b0f      	ldr	r3, [pc, #60]	@ (8009f1c <HAL_PCD_MspInit+0xa0>)
 8009ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8009f1c <HAL_PCD_MspInit+0xa0>)
 8009ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ee6:	6353      	str	r3, [r2, #52]	@ 0x34
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	4b0b      	ldr	r3, [pc, #44]	@ (8009f1c <HAL_PCD_MspInit+0xa0>)
 8009eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8009f1c <HAL_PCD_MspInit+0xa0>)
 8009ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ef6:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ef8:	4b08      	ldr	r3, [pc, #32]	@ (8009f1c <HAL_PCD_MspInit+0xa0>)
 8009efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f00:	60fb      	str	r3, [r7, #12]
 8009f02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f04:	2200      	movs	r2, #0
 8009f06:	2100      	movs	r1, #0
 8009f08:	2043      	movs	r0, #67	@ 0x43
 8009f0a:	f7f8 fe76 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f0e:	2043      	movs	r0, #67	@ 0x43
 8009f10:	f7f8 fe8f 	bl	8002c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f14:	bf00      	nop
 8009f16:	3728      	adds	r7, #40	@ 0x28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	40023800 	.word	0x40023800
 8009f20:	40020000 	.word	0x40020000

08009f24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f38:	4619      	mov	r1, r3
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	f7fe fb49 	bl	80085d2 <USBD_LL_SetupStage>
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009f5a:	78fa      	ldrb	r2, [r7, #3]
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	440b      	add	r3, r1
 8009f68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	4619      	mov	r1, r3
 8009f72:	f7fe fb83 	bl	800867c <USBD_LL_DataOutStage>
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b082      	sub	sp, #8
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	460b      	mov	r3, r1
 8009f88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009f90:	78fa      	ldrb	r2, [r7, #3]
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	4613      	mov	r3, r2
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	4413      	add	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	440b      	add	r3, r1
 8009f9e:	3320      	adds	r3, #32
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	78fb      	ldrb	r3, [r7, #3]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	f7fe fc1c 	bl	80087e2 <USBD_LL_DataInStage>
}
 8009faa:	bf00      	nop
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fe fd56 	bl	8008a72 <USBD_LL_SOF>
}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	79db      	ldrb	r3, [r3, #7]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d102      	bne.n	8009fe8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73fb      	strb	r3, [r7, #15]
 8009fe6:	e008      	b.n	8009ffa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	79db      	ldrb	r3, [r3, #7]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d102      	bne.n	8009ff6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	73fb      	strb	r3, [r7, #15]
 8009ff4:	e001      	b.n	8009ffa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ff6:	f7f8 fa43 	bl	8002480 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a000:	7bfa      	ldrb	r2, [r7, #15]
 800a002:	4611      	mov	r1, r2
 800a004:	4618      	mov	r0, r3
 800a006:	f7fe fcf0 	bl	80089ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a010:	4618      	mov	r0, r3
 800a012:	f7fe fc98 	bl	8008946 <USBD_LL_Reset>
}
 800a016:	bf00      	nop
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe fceb 	bl	8008a0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	6812      	ldr	r2, [r2, #0]
 800a042:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a046:	f043 0301 	orr.w	r3, r3, #1
 800a04a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	7adb      	ldrb	r3, [r3, #11]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d005      	beq.n	800a060 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a054:	4b04      	ldr	r3, [pc, #16]	@ (800a068 <HAL_PCD_SuspendCallback+0x48>)
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	4a03      	ldr	r2, [pc, #12]	@ (800a068 <HAL_PCD_SuspendCallback+0x48>)
 800a05a:	f043 0306 	orr.w	r3, r3, #6
 800a05e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a060:	bf00      	nop
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	e000ed00 	.word	0xe000ed00

0800a06c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe fce1 	bl	8008a42 <USBD_LL_Resume>
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a09a:	78fa      	ldrb	r2, [r7, #3]
 800a09c:	4611      	mov	r1, r2
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe fd39 	bl	8008b16 <USBD_LL_IsoOUTIncomplete>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0be:	78fa      	ldrb	r2, [r7, #3]
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe fcf5 	bl	8008ab2 <USBD_LL_IsoINIncomplete>
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fd4b 	bl	8008b7a <USBD_LL_DevConnected>
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe fd48 	bl	8008b90 <USBD_LL_DevDisconnected>
}
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d13c      	bne.n	800a192 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a118:	4a20      	ldr	r2, [pc, #128]	@ (800a19c <USBD_LL_Init+0x94>)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a1e      	ldr	r2, [pc, #120]	@ (800a19c <USBD_LL_Init+0x94>)
 800a124:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a128:	4b1c      	ldr	r3, [pc, #112]	@ (800a19c <USBD_LL_Init+0x94>)
 800a12a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a12e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a130:	4b1a      	ldr	r3, [pc, #104]	@ (800a19c <USBD_LL_Init+0x94>)
 800a132:	2204      	movs	r2, #4
 800a134:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a136:	4b19      	ldr	r3, [pc, #100]	@ (800a19c <USBD_LL_Init+0x94>)
 800a138:	2202      	movs	r2, #2
 800a13a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a13c:	4b17      	ldr	r3, [pc, #92]	@ (800a19c <USBD_LL_Init+0x94>)
 800a13e:	2200      	movs	r2, #0
 800a140:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a142:	4b16      	ldr	r3, [pc, #88]	@ (800a19c <USBD_LL_Init+0x94>)
 800a144:	2202      	movs	r2, #2
 800a146:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a148:	4b14      	ldr	r3, [pc, #80]	@ (800a19c <USBD_LL_Init+0x94>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a14e:	4b13      	ldr	r3, [pc, #76]	@ (800a19c <USBD_LL_Init+0x94>)
 800a150:	2200      	movs	r2, #0
 800a152:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a154:	4b11      	ldr	r3, [pc, #68]	@ (800a19c <USBD_LL_Init+0x94>)
 800a156:	2200      	movs	r2, #0
 800a158:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a15a:	4b10      	ldr	r3, [pc, #64]	@ (800a19c <USBD_LL_Init+0x94>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a160:	4b0e      	ldr	r3, [pc, #56]	@ (800a19c <USBD_LL_Init+0x94>)
 800a162:	2200      	movs	r2, #0
 800a164:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a166:	480d      	ldr	r0, [pc, #52]	@ (800a19c <USBD_LL_Init+0x94>)
 800a168:	f7f9 fade 	bl	8003728 <HAL_PCD_Init>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a172:	f7f8 f985 	bl	8002480 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a176:	2180      	movs	r1, #128	@ 0x80
 800a178:	4808      	ldr	r0, [pc, #32]	@ (800a19c <USBD_LL_Init+0x94>)
 800a17a:	f7fa fd0a 	bl	8004b92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a17e:	2240      	movs	r2, #64	@ 0x40
 800a180:	2100      	movs	r1, #0
 800a182:	4806      	ldr	r0, [pc, #24]	@ (800a19c <USBD_LL_Init+0x94>)
 800a184:	f7fa fcbe 	bl	8004b04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a188:	2280      	movs	r2, #128	@ 0x80
 800a18a:	2101      	movs	r1, #1
 800a18c:	4803      	ldr	r0, [pc, #12]	@ (800a19c <USBD_LL_Init+0x94>)
 800a18e:	f7fa fcb9 	bl	8004b04 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20001a0c 	.word	0x20001a0c

0800a1a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7f9 fbc5 	bl	8003946 <HAL_PCD_Start>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 f942 	bl	800a44c <USBD_Get_USB_Status>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	4608      	mov	r0, r1
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	70fb      	strb	r3, [r7, #3]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	70bb      	strb	r3, [r7, #2]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a1fe:	78bb      	ldrb	r3, [r7, #2]
 800a200:	883a      	ldrh	r2, [r7, #0]
 800a202:	78f9      	ldrb	r1, [r7, #3]
 800a204:	f7fa f899 	bl	800433a <HAL_PCD_EP_Open>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f91c 	bl	800a44c <USBD_Get_USB_Status>
 800a214:	4603      	mov	r3, r0
 800a216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a218:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	460b      	mov	r3, r1
 800a22c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a23c:	78fa      	ldrb	r2, [r7, #3]
 800a23e:	4611      	mov	r1, r2
 800a240:	4618      	mov	r0, r3
 800a242:	f7fa f8e4 	bl	800440e <HAL_PCD_EP_Close>
 800a246:	4603      	mov	r3, r0
 800a248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 f8fd 	bl	800a44c <USBD_Get_USB_Status>
 800a252:	4603      	mov	r3, r0
 800a254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a256:	7bbb      	ldrb	r3, [r7, #14]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	460b      	mov	r3, r1
 800a26a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a27a:	78fa      	ldrb	r2, [r7, #3]
 800a27c:	4611      	mov	r1, r2
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fa f99c 	bl	80045bc <HAL_PCD_EP_SetStall>
 800a284:	4603      	mov	r3, r0
 800a286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 f8de 	bl	800a44c <USBD_Get_USB_Status>
 800a290:	4603      	mov	r3, r0
 800a292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a294:	7bbb      	ldrb	r3, [r7, #14]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2b8:	78fa      	ldrb	r2, [r7, #3]
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fa f9e0 	bl	8004682 <HAL_PCD_EP_ClrStall>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 f8bf 	bl	800a44c <USBD_Get_USB_Status>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	da0b      	bge.n	800a310 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2f8:	78fb      	ldrb	r3, [r7, #3]
 800a2fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2fe:	68f9      	ldr	r1, [r7, #12]
 800a300:	4613      	mov	r3, r2
 800a302:	00db      	lsls	r3, r3, #3
 800a304:	4413      	add	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	440b      	add	r3, r1
 800a30a:	3316      	adds	r3, #22
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	e00b      	b.n	800a328 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a316:	68f9      	ldr	r1, [r7, #12]
 800a318:	4613      	mov	r3, r2
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	4413      	add	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	440b      	add	r3, r1
 800a322:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a326:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a34e:	78fa      	ldrb	r2, [r7, #3]
 800a350:	4611      	mov	r1, r2
 800a352:	4618      	mov	r0, r3
 800a354:	f7f9 ffcd 	bl	80042f2 <HAL_PCD_SetAddress>
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 f874 	bl	800a44c <USBD_Get_USB_Status>
 800a364:	4603      	mov	r3, r0
 800a366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a368:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b086      	sub	sp, #24
 800a376:	af00      	add	r7, sp, #0
 800a378:	60f8      	str	r0, [r7, #12]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
 800a37e:	460b      	mov	r3, r1
 800a380:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a390:	7af9      	ldrb	r1, [r7, #11]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	f7fa f8d7 	bl	8004548 <HAL_PCD_EP_Transmit>
 800a39a:	4603      	mov	r3, r0
 800a39c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 f853 	bl	800a44c <USBD_Get_USB_Status>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	607a      	str	r2, [r7, #4]
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3d2:	7af9      	ldrb	r1, [r7, #11]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	f7fa f863 	bl	80044a2 <HAL_PCD_EP_Receive>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3e0:	7dfb      	ldrb	r3, [r7, #23]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 f832 	bl	800a44c <USBD_Get_USB_Status>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3718      	adds	r7, #24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	460b      	mov	r3, r1
 800a400:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a408:	78fa      	ldrb	r2, [r7, #3]
 800a40a:	4611      	mov	r1, r2
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fa f883 	bl	8004518 <HAL_PCD_EP_GetRxCount>
 800a412:	4603      	mov	r3, r0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a424:	4b03      	ldr	r3, [pc, #12]	@ (800a434 <USBD_static_malloc+0x18>)
}
 800a426:	4618      	mov	r0, r3
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	20001ef0 	.word	0x20001ef0

0800a438 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]

}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	4603      	mov	r3, r0
 800a454:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a45a:	79fb      	ldrb	r3, [r7, #7]
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	d817      	bhi.n	800a490 <USBD_Get_USB_Status+0x44>
 800a460:	a201      	add	r2, pc, #4	@ (adr r2, 800a468 <USBD_Get_USB_Status+0x1c>)
 800a462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a466:	bf00      	nop
 800a468:	0800a479 	.word	0x0800a479
 800a46c:	0800a47f 	.word	0x0800a47f
 800a470:	0800a485 	.word	0x0800a485
 800a474:	0800a48b 	.word	0x0800a48b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	73fb      	strb	r3, [r7, #15]
    break;
 800a47c:	e00b      	b.n	800a496 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a47e:	2303      	movs	r3, #3
 800a480:	73fb      	strb	r3, [r7, #15]
    break;
 800a482:	e008      	b.n	800a496 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a484:	2301      	movs	r3, #1
 800a486:	73fb      	strb	r3, [r7, #15]
    break;
 800a488:	e005      	b.n	800a496 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a48a:	2303      	movs	r3, #3
 800a48c:	73fb      	strb	r3, [r7, #15]
    break;
 800a48e:	e002      	b.n	800a496 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a490:	2303      	movs	r3, #3
 800a492:	73fb      	strb	r3, [r7, #15]
    break;
 800a494:	bf00      	nop
  }
  return usb_status;
 800a496:	7bfb      	ldrb	r3, [r7, #15]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <__cvt>:
 800a4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	ec57 6b10 	vmov	r6, r7, d0
 800a4ac:	2f00      	cmp	r7, #0
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	463b      	mov	r3, r7
 800a4b4:	bfbb      	ittet	lt
 800a4b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a4ba:	461f      	movlt	r7, r3
 800a4bc:	2300      	movge	r3, #0
 800a4be:	232d      	movlt	r3, #45	@ 0x2d
 800a4c0:	700b      	strb	r3, [r1, #0]
 800a4c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a4c8:	4691      	mov	r9, r2
 800a4ca:	f023 0820 	bic.w	r8, r3, #32
 800a4ce:	bfbc      	itt	lt
 800a4d0:	4632      	movlt	r2, r6
 800a4d2:	4616      	movlt	r6, r2
 800a4d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4d8:	d005      	beq.n	800a4e6 <__cvt+0x42>
 800a4da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a4de:	d100      	bne.n	800a4e2 <__cvt+0x3e>
 800a4e0:	3401      	adds	r4, #1
 800a4e2:	2102      	movs	r1, #2
 800a4e4:	e000      	b.n	800a4e8 <__cvt+0x44>
 800a4e6:	2103      	movs	r1, #3
 800a4e8:	ab03      	add	r3, sp, #12
 800a4ea:	9301      	str	r3, [sp, #4]
 800a4ec:	ab02      	add	r3, sp, #8
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	ec47 6b10 	vmov	d0, r6, r7
 800a4f4:	4653      	mov	r3, sl
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	f000 fe6a 	bl	800b1d0 <_dtoa_r>
 800a4fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a500:	4605      	mov	r5, r0
 800a502:	d119      	bne.n	800a538 <__cvt+0x94>
 800a504:	f019 0f01 	tst.w	r9, #1
 800a508:	d00e      	beq.n	800a528 <__cvt+0x84>
 800a50a:	eb00 0904 	add.w	r9, r0, r4
 800a50e:	2200      	movs	r2, #0
 800a510:	2300      	movs	r3, #0
 800a512:	4630      	mov	r0, r6
 800a514:	4639      	mov	r1, r7
 800a516:	f7f6 fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a51a:	b108      	cbz	r0, 800a520 <__cvt+0x7c>
 800a51c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a520:	2230      	movs	r2, #48	@ 0x30
 800a522:	9b03      	ldr	r3, [sp, #12]
 800a524:	454b      	cmp	r3, r9
 800a526:	d31e      	bcc.n	800a566 <__cvt+0xc2>
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a52c:	1b5b      	subs	r3, r3, r5
 800a52e:	4628      	mov	r0, r5
 800a530:	6013      	str	r3, [r2, #0]
 800a532:	b004      	add	sp, #16
 800a534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a538:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a53c:	eb00 0904 	add.w	r9, r0, r4
 800a540:	d1e5      	bne.n	800a50e <__cvt+0x6a>
 800a542:	7803      	ldrb	r3, [r0, #0]
 800a544:	2b30      	cmp	r3, #48	@ 0x30
 800a546:	d10a      	bne.n	800a55e <__cvt+0xba>
 800a548:	2200      	movs	r2, #0
 800a54a:	2300      	movs	r3, #0
 800a54c:	4630      	mov	r0, r6
 800a54e:	4639      	mov	r1, r7
 800a550:	f7f6 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 800a554:	b918      	cbnz	r0, 800a55e <__cvt+0xba>
 800a556:	f1c4 0401 	rsb	r4, r4, #1
 800a55a:	f8ca 4000 	str.w	r4, [sl]
 800a55e:	f8da 3000 	ldr.w	r3, [sl]
 800a562:	4499      	add	r9, r3
 800a564:	e7d3      	b.n	800a50e <__cvt+0x6a>
 800a566:	1c59      	adds	r1, r3, #1
 800a568:	9103      	str	r1, [sp, #12]
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	e7d9      	b.n	800a522 <__cvt+0x7e>

0800a56e <__exponent>:
 800a56e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a570:	2900      	cmp	r1, #0
 800a572:	bfba      	itte	lt
 800a574:	4249      	neglt	r1, r1
 800a576:	232d      	movlt	r3, #45	@ 0x2d
 800a578:	232b      	movge	r3, #43	@ 0x2b
 800a57a:	2909      	cmp	r1, #9
 800a57c:	7002      	strb	r2, [r0, #0]
 800a57e:	7043      	strb	r3, [r0, #1]
 800a580:	dd29      	ble.n	800a5d6 <__exponent+0x68>
 800a582:	f10d 0307 	add.w	r3, sp, #7
 800a586:	461d      	mov	r5, r3
 800a588:	270a      	movs	r7, #10
 800a58a:	461a      	mov	r2, r3
 800a58c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a590:	fb07 1416 	mls	r4, r7, r6, r1
 800a594:	3430      	adds	r4, #48	@ 0x30
 800a596:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a59a:	460c      	mov	r4, r1
 800a59c:	2c63      	cmp	r4, #99	@ 0x63
 800a59e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	dcf1      	bgt.n	800a58a <__exponent+0x1c>
 800a5a6:	3130      	adds	r1, #48	@ 0x30
 800a5a8:	1e94      	subs	r4, r2, #2
 800a5aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a5ae:	1c41      	adds	r1, r0, #1
 800a5b0:	4623      	mov	r3, r4
 800a5b2:	42ab      	cmp	r3, r5
 800a5b4:	d30a      	bcc.n	800a5cc <__exponent+0x5e>
 800a5b6:	f10d 0309 	add.w	r3, sp, #9
 800a5ba:	1a9b      	subs	r3, r3, r2
 800a5bc:	42ac      	cmp	r4, r5
 800a5be:	bf88      	it	hi
 800a5c0:	2300      	movhi	r3, #0
 800a5c2:	3302      	adds	r3, #2
 800a5c4:	4403      	add	r3, r0
 800a5c6:	1a18      	subs	r0, r3, r0
 800a5c8:	b003      	add	sp, #12
 800a5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a5d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a5d4:	e7ed      	b.n	800a5b2 <__exponent+0x44>
 800a5d6:	2330      	movs	r3, #48	@ 0x30
 800a5d8:	3130      	adds	r1, #48	@ 0x30
 800a5da:	7083      	strb	r3, [r0, #2]
 800a5dc:	70c1      	strb	r1, [r0, #3]
 800a5de:	1d03      	adds	r3, r0, #4
 800a5e0:	e7f1      	b.n	800a5c6 <__exponent+0x58>
	...

0800a5e4 <_printf_float>:
 800a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e8:	b08d      	sub	sp, #52	@ 0x34
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a5f0:	4616      	mov	r6, r2
 800a5f2:	461f      	mov	r7, r3
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	f000 fcdb 	bl	800afb0 <_localeconv_r>
 800a5fa:	6803      	ldr	r3, [r0, #0]
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7f5 fe36 	bl	8000270 <strlen>
 800a604:	2300      	movs	r3, #0
 800a606:	930a      	str	r3, [sp, #40]	@ 0x28
 800a608:	f8d8 3000 	ldr.w	r3, [r8]
 800a60c:	9005      	str	r0, [sp, #20]
 800a60e:	3307      	adds	r3, #7
 800a610:	f023 0307 	bic.w	r3, r3, #7
 800a614:	f103 0208 	add.w	r2, r3, #8
 800a618:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a61c:	f8d4 b000 	ldr.w	fp, [r4]
 800a620:	f8c8 2000 	str.w	r2, [r8]
 800a624:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a628:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a62c:	9307      	str	r3, [sp, #28]
 800a62e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a632:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a63a:	4b9c      	ldr	r3, [pc, #624]	@ (800a8ac <_printf_float+0x2c8>)
 800a63c:	f04f 32ff 	mov.w	r2, #4294967295
 800a640:	f7f6 fa74 	bl	8000b2c <__aeabi_dcmpun>
 800a644:	bb70      	cbnz	r0, 800a6a4 <_printf_float+0xc0>
 800a646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a64a:	4b98      	ldr	r3, [pc, #608]	@ (800a8ac <_printf_float+0x2c8>)
 800a64c:	f04f 32ff 	mov.w	r2, #4294967295
 800a650:	f7f6 fa4e 	bl	8000af0 <__aeabi_dcmple>
 800a654:	bb30      	cbnz	r0, 800a6a4 <_printf_float+0xc0>
 800a656:	2200      	movs	r2, #0
 800a658:	2300      	movs	r3, #0
 800a65a:	4640      	mov	r0, r8
 800a65c:	4649      	mov	r1, r9
 800a65e:	f7f6 fa3d 	bl	8000adc <__aeabi_dcmplt>
 800a662:	b110      	cbz	r0, 800a66a <_printf_float+0x86>
 800a664:	232d      	movs	r3, #45	@ 0x2d
 800a666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a66a:	4a91      	ldr	r2, [pc, #580]	@ (800a8b0 <_printf_float+0x2cc>)
 800a66c:	4b91      	ldr	r3, [pc, #580]	@ (800a8b4 <_printf_float+0x2d0>)
 800a66e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a672:	bf94      	ite	ls
 800a674:	4690      	movls	r8, r2
 800a676:	4698      	movhi	r8, r3
 800a678:	2303      	movs	r3, #3
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	f02b 0304 	bic.w	r3, fp, #4
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	f04f 0900 	mov.w	r9, #0
 800a686:	9700      	str	r7, [sp, #0]
 800a688:	4633      	mov	r3, r6
 800a68a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a68c:	4621      	mov	r1, r4
 800a68e:	4628      	mov	r0, r5
 800a690:	f000 f9d2 	bl	800aa38 <_printf_common>
 800a694:	3001      	adds	r0, #1
 800a696:	f040 808d 	bne.w	800a7b4 <_printf_float+0x1d0>
 800a69a:	f04f 30ff 	mov.w	r0, #4294967295
 800a69e:	b00d      	add	sp, #52	@ 0x34
 800a6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	4640      	mov	r0, r8
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	f7f6 fa3e 	bl	8000b2c <__aeabi_dcmpun>
 800a6b0:	b140      	cbz	r0, 800a6c4 <_printf_float+0xe0>
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	bfbc      	itt	lt
 800a6b8:	232d      	movlt	r3, #45	@ 0x2d
 800a6ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a6be:	4a7e      	ldr	r2, [pc, #504]	@ (800a8b8 <_printf_float+0x2d4>)
 800a6c0:	4b7e      	ldr	r3, [pc, #504]	@ (800a8bc <_printf_float+0x2d8>)
 800a6c2:	e7d4      	b.n	800a66e <_printf_float+0x8a>
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a6ca:	9206      	str	r2, [sp, #24]
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	d13b      	bne.n	800a748 <_printf_float+0x164>
 800a6d0:	2306      	movs	r3, #6
 800a6d2:	6063      	str	r3, [r4, #4]
 800a6d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a6d8:	2300      	movs	r3, #0
 800a6da:	6022      	str	r2, [r4, #0]
 800a6dc:	9303      	str	r3, [sp, #12]
 800a6de:	ab0a      	add	r3, sp, #40	@ 0x28
 800a6e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a6e4:	ab09      	add	r3, sp, #36	@ 0x24
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	6861      	ldr	r1, [r4, #4]
 800a6ea:	ec49 8b10 	vmov	d0, r8, r9
 800a6ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f7ff fed6 	bl	800a4a4 <__cvt>
 800a6f8:	9b06      	ldr	r3, [sp, #24]
 800a6fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6fc:	2b47      	cmp	r3, #71	@ 0x47
 800a6fe:	4680      	mov	r8, r0
 800a700:	d129      	bne.n	800a756 <_printf_float+0x172>
 800a702:	1cc8      	adds	r0, r1, #3
 800a704:	db02      	blt.n	800a70c <_printf_float+0x128>
 800a706:	6863      	ldr	r3, [r4, #4]
 800a708:	4299      	cmp	r1, r3
 800a70a:	dd41      	ble.n	800a790 <_printf_float+0x1ac>
 800a70c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a710:	fa5f fa8a 	uxtb.w	sl, sl
 800a714:	3901      	subs	r1, #1
 800a716:	4652      	mov	r2, sl
 800a718:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a71c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a71e:	f7ff ff26 	bl	800a56e <__exponent>
 800a722:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a724:	1813      	adds	r3, r2, r0
 800a726:	2a01      	cmp	r2, #1
 800a728:	4681      	mov	r9, r0
 800a72a:	6123      	str	r3, [r4, #16]
 800a72c:	dc02      	bgt.n	800a734 <_printf_float+0x150>
 800a72e:	6822      	ldr	r2, [r4, #0]
 800a730:	07d2      	lsls	r2, r2, #31
 800a732:	d501      	bpl.n	800a738 <_printf_float+0x154>
 800a734:	3301      	adds	r3, #1
 800a736:	6123      	str	r3, [r4, #16]
 800a738:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d0a2      	beq.n	800a686 <_printf_float+0xa2>
 800a740:	232d      	movs	r3, #45	@ 0x2d
 800a742:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a746:	e79e      	b.n	800a686 <_printf_float+0xa2>
 800a748:	9a06      	ldr	r2, [sp, #24]
 800a74a:	2a47      	cmp	r2, #71	@ 0x47
 800a74c:	d1c2      	bne.n	800a6d4 <_printf_float+0xf0>
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1c0      	bne.n	800a6d4 <_printf_float+0xf0>
 800a752:	2301      	movs	r3, #1
 800a754:	e7bd      	b.n	800a6d2 <_printf_float+0xee>
 800a756:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a75a:	d9db      	bls.n	800a714 <_printf_float+0x130>
 800a75c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a760:	d118      	bne.n	800a794 <_printf_float+0x1b0>
 800a762:	2900      	cmp	r1, #0
 800a764:	6863      	ldr	r3, [r4, #4]
 800a766:	dd0b      	ble.n	800a780 <_printf_float+0x19c>
 800a768:	6121      	str	r1, [r4, #16]
 800a76a:	b913      	cbnz	r3, 800a772 <_printf_float+0x18e>
 800a76c:	6822      	ldr	r2, [r4, #0]
 800a76e:	07d0      	lsls	r0, r2, #31
 800a770:	d502      	bpl.n	800a778 <_printf_float+0x194>
 800a772:	3301      	adds	r3, #1
 800a774:	440b      	add	r3, r1
 800a776:	6123      	str	r3, [r4, #16]
 800a778:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a77a:	f04f 0900 	mov.w	r9, #0
 800a77e:	e7db      	b.n	800a738 <_printf_float+0x154>
 800a780:	b913      	cbnz	r3, 800a788 <_printf_float+0x1a4>
 800a782:	6822      	ldr	r2, [r4, #0]
 800a784:	07d2      	lsls	r2, r2, #31
 800a786:	d501      	bpl.n	800a78c <_printf_float+0x1a8>
 800a788:	3302      	adds	r3, #2
 800a78a:	e7f4      	b.n	800a776 <_printf_float+0x192>
 800a78c:	2301      	movs	r3, #1
 800a78e:	e7f2      	b.n	800a776 <_printf_float+0x192>
 800a790:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a796:	4299      	cmp	r1, r3
 800a798:	db05      	blt.n	800a7a6 <_printf_float+0x1c2>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	6121      	str	r1, [r4, #16]
 800a79e:	07d8      	lsls	r0, r3, #31
 800a7a0:	d5ea      	bpl.n	800a778 <_printf_float+0x194>
 800a7a2:	1c4b      	adds	r3, r1, #1
 800a7a4:	e7e7      	b.n	800a776 <_printf_float+0x192>
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	bfd4      	ite	le
 800a7aa:	f1c1 0202 	rsble	r2, r1, #2
 800a7ae:	2201      	movgt	r2, #1
 800a7b0:	4413      	add	r3, r2
 800a7b2:	e7e0      	b.n	800a776 <_printf_float+0x192>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	055a      	lsls	r2, r3, #21
 800a7b8:	d407      	bmi.n	800a7ca <_printf_float+0x1e6>
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	4642      	mov	r2, r8
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	47b8      	blx	r7
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d12b      	bne.n	800a820 <_printf_float+0x23c>
 800a7c8:	e767      	b.n	800a69a <_printf_float+0xb6>
 800a7ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7ce:	f240 80dd 	bls.w	800a98c <_printf_float+0x3a8>
 800a7d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f7f6 f975 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d033      	beq.n	800a84a <_printf_float+0x266>
 800a7e2:	4a37      	ldr	r2, [pc, #220]	@ (800a8c0 <_printf_float+0x2dc>)
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	47b8      	blx	r7
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	f43f af54 	beq.w	800a69a <_printf_float+0xb6>
 800a7f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a7f6:	4543      	cmp	r3, r8
 800a7f8:	db02      	blt.n	800a800 <_printf_float+0x21c>
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	07d8      	lsls	r0, r3, #31
 800a7fe:	d50f      	bpl.n	800a820 <_printf_float+0x23c>
 800a800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a804:	4631      	mov	r1, r6
 800a806:	4628      	mov	r0, r5
 800a808:	47b8      	blx	r7
 800a80a:	3001      	adds	r0, #1
 800a80c:	f43f af45 	beq.w	800a69a <_printf_float+0xb6>
 800a810:	f04f 0900 	mov.w	r9, #0
 800a814:	f108 38ff 	add.w	r8, r8, #4294967295
 800a818:	f104 0a1a 	add.w	sl, r4, #26
 800a81c:	45c8      	cmp	r8, r9
 800a81e:	dc09      	bgt.n	800a834 <_printf_float+0x250>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	079b      	lsls	r3, r3, #30
 800a824:	f100 8103 	bmi.w	800aa2e <_printf_float+0x44a>
 800a828:	68e0      	ldr	r0, [r4, #12]
 800a82a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a82c:	4298      	cmp	r0, r3
 800a82e:	bfb8      	it	lt
 800a830:	4618      	movlt	r0, r3
 800a832:	e734      	b.n	800a69e <_printf_float+0xba>
 800a834:	2301      	movs	r3, #1
 800a836:	4652      	mov	r2, sl
 800a838:	4631      	mov	r1, r6
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b8      	blx	r7
 800a83e:	3001      	adds	r0, #1
 800a840:	f43f af2b 	beq.w	800a69a <_printf_float+0xb6>
 800a844:	f109 0901 	add.w	r9, r9, #1
 800a848:	e7e8      	b.n	800a81c <_printf_float+0x238>
 800a84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	dc39      	bgt.n	800a8c4 <_printf_float+0x2e0>
 800a850:	4a1b      	ldr	r2, [pc, #108]	@ (800a8c0 <_printf_float+0x2dc>)
 800a852:	2301      	movs	r3, #1
 800a854:	4631      	mov	r1, r6
 800a856:	4628      	mov	r0, r5
 800a858:	47b8      	blx	r7
 800a85a:	3001      	adds	r0, #1
 800a85c:	f43f af1d 	beq.w	800a69a <_printf_float+0xb6>
 800a860:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a864:	ea59 0303 	orrs.w	r3, r9, r3
 800a868:	d102      	bne.n	800a870 <_printf_float+0x28c>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	07d9      	lsls	r1, r3, #31
 800a86e:	d5d7      	bpl.n	800a820 <_printf_float+0x23c>
 800a870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a874:	4631      	mov	r1, r6
 800a876:	4628      	mov	r0, r5
 800a878:	47b8      	blx	r7
 800a87a:	3001      	adds	r0, #1
 800a87c:	f43f af0d 	beq.w	800a69a <_printf_float+0xb6>
 800a880:	f04f 0a00 	mov.w	sl, #0
 800a884:	f104 0b1a 	add.w	fp, r4, #26
 800a888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88a:	425b      	negs	r3, r3
 800a88c:	4553      	cmp	r3, sl
 800a88e:	dc01      	bgt.n	800a894 <_printf_float+0x2b0>
 800a890:	464b      	mov	r3, r9
 800a892:	e793      	b.n	800a7bc <_printf_float+0x1d8>
 800a894:	2301      	movs	r3, #1
 800a896:	465a      	mov	r2, fp
 800a898:	4631      	mov	r1, r6
 800a89a:	4628      	mov	r0, r5
 800a89c:	47b8      	blx	r7
 800a89e:	3001      	adds	r0, #1
 800a8a0:	f43f aefb 	beq.w	800a69a <_printf_float+0xb6>
 800a8a4:	f10a 0a01 	add.w	sl, sl, #1
 800a8a8:	e7ee      	b.n	800a888 <_printf_float+0x2a4>
 800a8aa:	bf00      	nop
 800a8ac:	7fefffff 	.word	0x7fefffff
 800a8b0:	0800e868 	.word	0x0800e868
 800a8b4:	0800e86c 	.word	0x0800e86c
 800a8b8:	0800e870 	.word	0x0800e870
 800a8bc:	0800e874 	.word	0x0800e874
 800a8c0:	0800e878 	.word	0x0800e878
 800a8c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a8ca:	4553      	cmp	r3, sl
 800a8cc:	bfa8      	it	ge
 800a8ce:	4653      	movge	r3, sl
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	4699      	mov	r9, r3
 800a8d4:	dc36      	bgt.n	800a944 <_printf_float+0x360>
 800a8d6:	f04f 0b00 	mov.w	fp, #0
 800a8da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8de:	f104 021a 	add.w	r2, r4, #26
 800a8e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8e4:	9306      	str	r3, [sp, #24]
 800a8e6:	eba3 0309 	sub.w	r3, r3, r9
 800a8ea:	455b      	cmp	r3, fp
 800a8ec:	dc31      	bgt.n	800a952 <_printf_float+0x36e>
 800a8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f0:	459a      	cmp	sl, r3
 800a8f2:	dc3a      	bgt.n	800a96a <_printf_float+0x386>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	07da      	lsls	r2, r3, #31
 800a8f8:	d437      	bmi.n	800a96a <_printf_float+0x386>
 800a8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8fc:	ebaa 0903 	sub.w	r9, sl, r3
 800a900:	9b06      	ldr	r3, [sp, #24]
 800a902:	ebaa 0303 	sub.w	r3, sl, r3
 800a906:	4599      	cmp	r9, r3
 800a908:	bfa8      	it	ge
 800a90a:	4699      	movge	r9, r3
 800a90c:	f1b9 0f00 	cmp.w	r9, #0
 800a910:	dc33      	bgt.n	800a97a <_printf_float+0x396>
 800a912:	f04f 0800 	mov.w	r8, #0
 800a916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a91a:	f104 0b1a 	add.w	fp, r4, #26
 800a91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a920:	ebaa 0303 	sub.w	r3, sl, r3
 800a924:	eba3 0309 	sub.w	r3, r3, r9
 800a928:	4543      	cmp	r3, r8
 800a92a:	f77f af79 	ble.w	800a820 <_printf_float+0x23c>
 800a92e:	2301      	movs	r3, #1
 800a930:	465a      	mov	r2, fp
 800a932:	4631      	mov	r1, r6
 800a934:	4628      	mov	r0, r5
 800a936:	47b8      	blx	r7
 800a938:	3001      	adds	r0, #1
 800a93a:	f43f aeae 	beq.w	800a69a <_printf_float+0xb6>
 800a93e:	f108 0801 	add.w	r8, r8, #1
 800a942:	e7ec      	b.n	800a91e <_printf_float+0x33a>
 800a944:	4642      	mov	r2, r8
 800a946:	4631      	mov	r1, r6
 800a948:	4628      	mov	r0, r5
 800a94a:	47b8      	blx	r7
 800a94c:	3001      	adds	r0, #1
 800a94e:	d1c2      	bne.n	800a8d6 <_printf_float+0x2f2>
 800a950:	e6a3      	b.n	800a69a <_printf_float+0xb6>
 800a952:	2301      	movs	r3, #1
 800a954:	4631      	mov	r1, r6
 800a956:	4628      	mov	r0, r5
 800a958:	9206      	str	r2, [sp, #24]
 800a95a:	47b8      	blx	r7
 800a95c:	3001      	adds	r0, #1
 800a95e:	f43f ae9c 	beq.w	800a69a <_printf_float+0xb6>
 800a962:	9a06      	ldr	r2, [sp, #24]
 800a964:	f10b 0b01 	add.w	fp, fp, #1
 800a968:	e7bb      	b.n	800a8e2 <_printf_float+0x2fe>
 800a96a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	d1c0      	bne.n	800a8fa <_printf_float+0x316>
 800a978:	e68f      	b.n	800a69a <_printf_float+0xb6>
 800a97a:	9a06      	ldr	r2, [sp, #24]
 800a97c:	464b      	mov	r3, r9
 800a97e:	4442      	add	r2, r8
 800a980:	4631      	mov	r1, r6
 800a982:	4628      	mov	r0, r5
 800a984:	47b8      	blx	r7
 800a986:	3001      	adds	r0, #1
 800a988:	d1c3      	bne.n	800a912 <_printf_float+0x32e>
 800a98a:	e686      	b.n	800a69a <_printf_float+0xb6>
 800a98c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a990:	f1ba 0f01 	cmp.w	sl, #1
 800a994:	dc01      	bgt.n	800a99a <_printf_float+0x3b6>
 800a996:	07db      	lsls	r3, r3, #31
 800a998:	d536      	bpl.n	800aa08 <_printf_float+0x424>
 800a99a:	2301      	movs	r3, #1
 800a99c:	4642      	mov	r2, r8
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	f43f ae78 	beq.w	800a69a <_printf_float+0xb6>
 800a9aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	47b8      	blx	r7
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	f43f ae70 	beq.w	800a69a <_printf_float+0xb6>
 800a9ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9c6:	f7f6 f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9ca:	b9c0      	cbnz	r0, 800a9fe <_printf_float+0x41a>
 800a9cc:	4653      	mov	r3, sl
 800a9ce:	f108 0201 	add.w	r2, r8, #1
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	47b8      	blx	r7
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d10c      	bne.n	800a9f6 <_printf_float+0x412>
 800a9dc:	e65d      	b.n	800a69a <_printf_float+0xb6>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	465a      	mov	r2, fp
 800a9e2:	4631      	mov	r1, r6
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	47b8      	blx	r7
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	f43f ae56 	beq.w	800a69a <_printf_float+0xb6>
 800a9ee:	f108 0801 	add.w	r8, r8, #1
 800a9f2:	45d0      	cmp	r8, sl
 800a9f4:	dbf3      	blt.n	800a9de <_printf_float+0x3fa>
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a9fc:	e6df      	b.n	800a7be <_printf_float+0x1da>
 800a9fe:	f04f 0800 	mov.w	r8, #0
 800aa02:	f104 0b1a 	add.w	fp, r4, #26
 800aa06:	e7f4      	b.n	800a9f2 <_printf_float+0x40e>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	4642      	mov	r2, r8
 800aa0c:	e7e1      	b.n	800a9d2 <_printf_float+0x3ee>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	464a      	mov	r2, r9
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b8      	blx	r7
 800aa18:	3001      	adds	r0, #1
 800aa1a:	f43f ae3e 	beq.w	800a69a <_printf_float+0xb6>
 800aa1e:	f108 0801 	add.w	r8, r8, #1
 800aa22:	68e3      	ldr	r3, [r4, #12]
 800aa24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa26:	1a5b      	subs	r3, r3, r1
 800aa28:	4543      	cmp	r3, r8
 800aa2a:	dcf0      	bgt.n	800aa0e <_printf_float+0x42a>
 800aa2c:	e6fc      	b.n	800a828 <_printf_float+0x244>
 800aa2e:	f04f 0800 	mov.w	r8, #0
 800aa32:	f104 0919 	add.w	r9, r4, #25
 800aa36:	e7f4      	b.n	800aa22 <_printf_float+0x43e>

0800aa38 <_printf_common>:
 800aa38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa3c:	4616      	mov	r6, r2
 800aa3e:	4698      	mov	r8, r3
 800aa40:	688a      	ldr	r2, [r1, #8]
 800aa42:	690b      	ldr	r3, [r1, #16]
 800aa44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	bfb8      	it	lt
 800aa4c:	4613      	movlt	r3, r2
 800aa4e:	6033      	str	r3, [r6, #0]
 800aa50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa54:	4607      	mov	r7, r0
 800aa56:	460c      	mov	r4, r1
 800aa58:	b10a      	cbz	r2, 800aa5e <_printf_common+0x26>
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	6033      	str	r3, [r6, #0]
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	0699      	lsls	r1, r3, #26
 800aa62:	bf42      	ittt	mi
 800aa64:	6833      	ldrmi	r3, [r6, #0]
 800aa66:	3302      	addmi	r3, #2
 800aa68:	6033      	strmi	r3, [r6, #0]
 800aa6a:	6825      	ldr	r5, [r4, #0]
 800aa6c:	f015 0506 	ands.w	r5, r5, #6
 800aa70:	d106      	bne.n	800aa80 <_printf_common+0x48>
 800aa72:	f104 0a19 	add.w	sl, r4, #25
 800aa76:	68e3      	ldr	r3, [r4, #12]
 800aa78:	6832      	ldr	r2, [r6, #0]
 800aa7a:	1a9b      	subs	r3, r3, r2
 800aa7c:	42ab      	cmp	r3, r5
 800aa7e:	dc26      	bgt.n	800aace <_printf_common+0x96>
 800aa80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa84:	6822      	ldr	r2, [r4, #0]
 800aa86:	3b00      	subs	r3, #0
 800aa88:	bf18      	it	ne
 800aa8a:	2301      	movne	r3, #1
 800aa8c:	0692      	lsls	r2, r2, #26
 800aa8e:	d42b      	bmi.n	800aae8 <_printf_common+0xb0>
 800aa90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa94:	4641      	mov	r1, r8
 800aa96:	4638      	mov	r0, r7
 800aa98:	47c8      	blx	r9
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	d01e      	beq.n	800aadc <_printf_common+0xa4>
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	6922      	ldr	r2, [r4, #16]
 800aaa2:	f003 0306 	and.w	r3, r3, #6
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	bf02      	ittt	eq
 800aaaa:	68e5      	ldreq	r5, [r4, #12]
 800aaac:	6833      	ldreq	r3, [r6, #0]
 800aaae:	1aed      	subeq	r5, r5, r3
 800aab0:	68a3      	ldr	r3, [r4, #8]
 800aab2:	bf0c      	ite	eq
 800aab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aab8:	2500      	movne	r5, #0
 800aaba:	4293      	cmp	r3, r2
 800aabc:	bfc4      	itt	gt
 800aabe:	1a9b      	subgt	r3, r3, r2
 800aac0:	18ed      	addgt	r5, r5, r3
 800aac2:	2600      	movs	r6, #0
 800aac4:	341a      	adds	r4, #26
 800aac6:	42b5      	cmp	r5, r6
 800aac8:	d11a      	bne.n	800ab00 <_printf_common+0xc8>
 800aaca:	2000      	movs	r0, #0
 800aacc:	e008      	b.n	800aae0 <_printf_common+0xa8>
 800aace:	2301      	movs	r3, #1
 800aad0:	4652      	mov	r2, sl
 800aad2:	4641      	mov	r1, r8
 800aad4:	4638      	mov	r0, r7
 800aad6:	47c8      	blx	r9
 800aad8:	3001      	adds	r0, #1
 800aada:	d103      	bne.n	800aae4 <_printf_common+0xac>
 800aadc:	f04f 30ff 	mov.w	r0, #4294967295
 800aae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae4:	3501      	adds	r5, #1
 800aae6:	e7c6      	b.n	800aa76 <_printf_common+0x3e>
 800aae8:	18e1      	adds	r1, r4, r3
 800aaea:	1c5a      	adds	r2, r3, #1
 800aaec:	2030      	movs	r0, #48	@ 0x30
 800aaee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aaf2:	4422      	add	r2, r4
 800aaf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aaf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aafc:	3302      	adds	r3, #2
 800aafe:	e7c7      	b.n	800aa90 <_printf_common+0x58>
 800ab00:	2301      	movs	r3, #1
 800ab02:	4622      	mov	r2, r4
 800ab04:	4641      	mov	r1, r8
 800ab06:	4638      	mov	r0, r7
 800ab08:	47c8      	blx	r9
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	d0e6      	beq.n	800aadc <_printf_common+0xa4>
 800ab0e:	3601      	adds	r6, #1
 800ab10:	e7d9      	b.n	800aac6 <_printf_common+0x8e>
	...

0800ab14 <_printf_i>:
 800ab14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab18:	7e0f      	ldrb	r7, [r1, #24]
 800ab1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab1c:	2f78      	cmp	r7, #120	@ 0x78
 800ab1e:	4691      	mov	r9, r2
 800ab20:	4680      	mov	r8, r0
 800ab22:	460c      	mov	r4, r1
 800ab24:	469a      	mov	sl, r3
 800ab26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab2a:	d807      	bhi.n	800ab3c <_printf_i+0x28>
 800ab2c:	2f62      	cmp	r7, #98	@ 0x62
 800ab2e:	d80a      	bhi.n	800ab46 <_printf_i+0x32>
 800ab30:	2f00      	cmp	r7, #0
 800ab32:	f000 80d2 	beq.w	800acda <_printf_i+0x1c6>
 800ab36:	2f58      	cmp	r7, #88	@ 0x58
 800ab38:	f000 80b9 	beq.w	800acae <_printf_i+0x19a>
 800ab3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab44:	e03a      	b.n	800abbc <_printf_i+0xa8>
 800ab46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab4a:	2b15      	cmp	r3, #21
 800ab4c:	d8f6      	bhi.n	800ab3c <_printf_i+0x28>
 800ab4e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab54 <_printf_i+0x40>)
 800ab50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab54:	0800abad 	.word	0x0800abad
 800ab58:	0800abc1 	.word	0x0800abc1
 800ab5c:	0800ab3d 	.word	0x0800ab3d
 800ab60:	0800ab3d 	.word	0x0800ab3d
 800ab64:	0800ab3d 	.word	0x0800ab3d
 800ab68:	0800ab3d 	.word	0x0800ab3d
 800ab6c:	0800abc1 	.word	0x0800abc1
 800ab70:	0800ab3d 	.word	0x0800ab3d
 800ab74:	0800ab3d 	.word	0x0800ab3d
 800ab78:	0800ab3d 	.word	0x0800ab3d
 800ab7c:	0800ab3d 	.word	0x0800ab3d
 800ab80:	0800acc1 	.word	0x0800acc1
 800ab84:	0800abeb 	.word	0x0800abeb
 800ab88:	0800ac7b 	.word	0x0800ac7b
 800ab8c:	0800ab3d 	.word	0x0800ab3d
 800ab90:	0800ab3d 	.word	0x0800ab3d
 800ab94:	0800ace3 	.word	0x0800ace3
 800ab98:	0800ab3d 	.word	0x0800ab3d
 800ab9c:	0800abeb 	.word	0x0800abeb
 800aba0:	0800ab3d 	.word	0x0800ab3d
 800aba4:	0800ab3d 	.word	0x0800ab3d
 800aba8:	0800ac83 	.word	0x0800ac83
 800abac:	6833      	ldr	r3, [r6, #0]
 800abae:	1d1a      	adds	r2, r3, #4
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6032      	str	r2, [r6, #0]
 800abb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abbc:	2301      	movs	r3, #1
 800abbe:	e09d      	b.n	800acfc <_printf_i+0x1e8>
 800abc0:	6833      	ldr	r3, [r6, #0]
 800abc2:	6820      	ldr	r0, [r4, #0]
 800abc4:	1d19      	adds	r1, r3, #4
 800abc6:	6031      	str	r1, [r6, #0]
 800abc8:	0606      	lsls	r6, r0, #24
 800abca:	d501      	bpl.n	800abd0 <_printf_i+0xbc>
 800abcc:	681d      	ldr	r5, [r3, #0]
 800abce:	e003      	b.n	800abd8 <_printf_i+0xc4>
 800abd0:	0645      	lsls	r5, r0, #25
 800abd2:	d5fb      	bpl.n	800abcc <_printf_i+0xb8>
 800abd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800abd8:	2d00      	cmp	r5, #0
 800abda:	da03      	bge.n	800abe4 <_printf_i+0xd0>
 800abdc:	232d      	movs	r3, #45	@ 0x2d
 800abde:	426d      	negs	r5, r5
 800abe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abe4:	4859      	ldr	r0, [pc, #356]	@ (800ad4c <_printf_i+0x238>)
 800abe6:	230a      	movs	r3, #10
 800abe8:	e011      	b.n	800ac0e <_printf_i+0xfa>
 800abea:	6821      	ldr	r1, [r4, #0]
 800abec:	6833      	ldr	r3, [r6, #0]
 800abee:	0608      	lsls	r0, r1, #24
 800abf0:	f853 5b04 	ldr.w	r5, [r3], #4
 800abf4:	d402      	bmi.n	800abfc <_printf_i+0xe8>
 800abf6:	0649      	lsls	r1, r1, #25
 800abf8:	bf48      	it	mi
 800abfa:	b2ad      	uxthmi	r5, r5
 800abfc:	2f6f      	cmp	r7, #111	@ 0x6f
 800abfe:	4853      	ldr	r0, [pc, #332]	@ (800ad4c <_printf_i+0x238>)
 800ac00:	6033      	str	r3, [r6, #0]
 800ac02:	bf14      	ite	ne
 800ac04:	230a      	movne	r3, #10
 800ac06:	2308      	moveq	r3, #8
 800ac08:	2100      	movs	r1, #0
 800ac0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac0e:	6866      	ldr	r6, [r4, #4]
 800ac10:	60a6      	str	r6, [r4, #8]
 800ac12:	2e00      	cmp	r6, #0
 800ac14:	bfa2      	ittt	ge
 800ac16:	6821      	ldrge	r1, [r4, #0]
 800ac18:	f021 0104 	bicge.w	r1, r1, #4
 800ac1c:	6021      	strge	r1, [r4, #0]
 800ac1e:	b90d      	cbnz	r5, 800ac24 <_printf_i+0x110>
 800ac20:	2e00      	cmp	r6, #0
 800ac22:	d04b      	beq.n	800acbc <_printf_i+0x1a8>
 800ac24:	4616      	mov	r6, r2
 800ac26:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac2a:	fb03 5711 	mls	r7, r3, r1, r5
 800ac2e:	5dc7      	ldrb	r7, [r0, r7]
 800ac30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac34:	462f      	mov	r7, r5
 800ac36:	42bb      	cmp	r3, r7
 800ac38:	460d      	mov	r5, r1
 800ac3a:	d9f4      	bls.n	800ac26 <_printf_i+0x112>
 800ac3c:	2b08      	cmp	r3, #8
 800ac3e:	d10b      	bne.n	800ac58 <_printf_i+0x144>
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	07df      	lsls	r7, r3, #31
 800ac44:	d508      	bpl.n	800ac58 <_printf_i+0x144>
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	6861      	ldr	r1, [r4, #4]
 800ac4a:	4299      	cmp	r1, r3
 800ac4c:	bfde      	ittt	le
 800ac4e:	2330      	movle	r3, #48	@ 0x30
 800ac50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac58:	1b92      	subs	r2, r2, r6
 800ac5a:	6122      	str	r2, [r4, #16]
 800ac5c:	f8cd a000 	str.w	sl, [sp]
 800ac60:	464b      	mov	r3, r9
 800ac62:	aa03      	add	r2, sp, #12
 800ac64:	4621      	mov	r1, r4
 800ac66:	4640      	mov	r0, r8
 800ac68:	f7ff fee6 	bl	800aa38 <_printf_common>
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	d14a      	bne.n	800ad06 <_printf_i+0x1f2>
 800ac70:	f04f 30ff 	mov.w	r0, #4294967295
 800ac74:	b004      	add	sp, #16
 800ac76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	f043 0320 	orr.w	r3, r3, #32
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	4833      	ldr	r0, [pc, #204]	@ (800ad50 <_printf_i+0x23c>)
 800ac84:	2778      	movs	r7, #120	@ 0x78
 800ac86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	6831      	ldr	r1, [r6, #0]
 800ac8e:	061f      	lsls	r7, r3, #24
 800ac90:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac94:	d402      	bmi.n	800ac9c <_printf_i+0x188>
 800ac96:	065f      	lsls	r7, r3, #25
 800ac98:	bf48      	it	mi
 800ac9a:	b2ad      	uxthmi	r5, r5
 800ac9c:	6031      	str	r1, [r6, #0]
 800ac9e:	07d9      	lsls	r1, r3, #31
 800aca0:	bf44      	itt	mi
 800aca2:	f043 0320 	orrmi.w	r3, r3, #32
 800aca6:	6023      	strmi	r3, [r4, #0]
 800aca8:	b11d      	cbz	r5, 800acb2 <_printf_i+0x19e>
 800acaa:	2310      	movs	r3, #16
 800acac:	e7ac      	b.n	800ac08 <_printf_i+0xf4>
 800acae:	4827      	ldr	r0, [pc, #156]	@ (800ad4c <_printf_i+0x238>)
 800acb0:	e7e9      	b.n	800ac86 <_printf_i+0x172>
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	f023 0320 	bic.w	r3, r3, #32
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	e7f6      	b.n	800acaa <_printf_i+0x196>
 800acbc:	4616      	mov	r6, r2
 800acbe:	e7bd      	b.n	800ac3c <_printf_i+0x128>
 800acc0:	6833      	ldr	r3, [r6, #0]
 800acc2:	6825      	ldr	r5, [r4, #0]
 800acc4:	6961      	ldr	r1, [r4, #20]
 800acc6:	1d18      	adds	r0, r3, #4
 800acc8:	6030      	str	r0, [r6, #0]
 800acca:	062e      	lsls	r6, r5, #24
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	d501      	bpl.n	800acd4 <_printf_i+0x1c0>
 800acd0:	6019      	str	r1, [r3, #0]
 800acd2:	e002      	b.n	800acda <_printf_i+0x1c6>
 800acd4:	0668      	lsls	r0, r5, #25
 800acd6:	d5fb      	bpl.n	800acd0 <_printf_i+0x1bc>
 800acd8:	8019      	strh	r1, [r3, #0]
 800acda:	2300      	movs	r3, #0
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	4616      	mov	r6, r2
 800ace0:	e7bc      	b.n	800ac5c <_printf_i+0x148>
 800ace2:	6833      	ldr	r3, [r6, #0]
 800ace4:	1d1a      	adds	r2, r3, #4
 800ace6:	6032      	str	r2, [r6, #0]
 800ace8:	681e      	ldr	r6, [r3, #0]
 800acea:	6862      	ldr	r2, [r4, #4]
 800acec:	2100      	movs	r1, #0
 800acee:	4630      	mov	r0, r6
 800acf0:	f7f5 fa6e 	bl	80001d0 <memchr>
 800acf4:	b108      	cbz	r0, 800acfa <_printf_i+0x1e6>
 800acf6:	1b80      	subs	r0, r0, r6
 800acf8:	6060      	str	r0, [r4, #4]
 800acfa:	6863      	ldr	r3, [r4, #4]
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	2300      	movs	r3, #0
 800ad00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad04:	e7aa      	b.n	800ac5c <_printf_i+0x148>
 800ad06:	6923      	ldr	r3, [r4, #16]
 800ad08:	4632      	mov	r2, r6
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	47d0      	blx	sl
 800ad10:	3001      	adds	r0, #1
 800ad12:	d0ad      	beq.n	800ac70 <_printf_i+0x15c>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	079b      	lsls	r3, r3, #30
 800ad18:	d413      	bmi.n	800ad42 <_printf_i+0x22e>
 800ad1a:	68e0      	ldr	r0, [r4, #12]
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	4298      	cmp	r0, r3
 800ad20:	bfb8      	it	lt
 800ad22:	4618      	movlt	r0, r3
 800ad24:	e7a6      	b.n	800ac74 <_printf_i+0x160>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4632      	mov	r2, r6
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	47d0      	blx	sl
 800ad30:	3001      	adds	r0, #1
 800ad32:	d09d      	beq.n	800ac70 <_printf_i+0x15c>
 800ad34:	3501      	adds	r5, #1
 800ad36:	68e3      	ldr	r3, [r4, #12]
 800ad38:	9903      	ldr	r1, [sp, #12]
 800ad3a:	1a5b      	subs	r3, r3, r1
 800ad3c:	42ab      	cmp	r3, r5
 800ad3e:	dcf2      	bgt.n	800ad26 <_printf_i+0x212>
 800ad40:	e7eb      	b.n	800ad1a <_printf_i+0x206>
 800ad42:	2500      	movs	r5, #0
 800ad44:	f104 0619 	add.w	r6, r4, #25
 800ad48:	e7f5      	b.n	800ad36 <_printf_i+0x222>
 800ad4a:	bf00      	nop
 800ad4c:	0800e87a 	.word	0x0800e87a
 800ad50:	0800e88b 	.word	0x0800e88b

0800ad54 <std>:
 800ad54:	2300      	movs	r3, #0
 800ad56:	b510      	push	{r4, lr}
 800ad58:	4604      	mov	r4, r0
 800ad5a:	e9c0 3300 	strd	r3, r3, [r0]
 800ad5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad62:	6083      	str	r3, [r0, #8]
 800ad64:	8181      	strh	r1, [r0, #12]
 800ad66:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad68:	81c2      	strh	r2, [r0, #14]
 800ad6a:	6183      	str	r3, [r0, #24]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	2208      	movs	r2, #8
 800ad70:	305c      	adds	r0, #92	@ 0x5c
 800ad72:	f000 f914 	bl	800af9e <memset>
 800ad76:	4b0d      	ldr	r3, [pc, #52]	@ (800adac <std+0x58>)
 800ad78:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad7a:	4b0d      	ldr	r3, [pc, #52]	@ (800adb0 <std+0x5c>)
 800ad7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad7e:	4b0d      	ldr	r3, [pc, #52]	@ (800adb4 <std+0x60>)
 800ad80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad82:	4b0d      	ldr	r3, [pc, #52]	@ (800adb8 <std+0x64>)
 800ad84:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad86:	4b0d      	ldr	r3, [pc, #52]	@ (800adbc <std+0x68>)
 800ad88:	6224      	str	r4, [r4, #32]
 800ad8a:	429c      	cmp	r4, r3
 800ad8c:	d006      	beq.n	800ad9c <std+0x48>
 800ad8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad92:	4294      	cmp	r4, r2
 800ad94:	d002      	beq.n	800ad9c <std+0x48>
 800ad96:	33d0      	adds	r3, #208	@ 0xd0
 800ad98:	429c      	cmp	r4, r3
 800ad9a:	d105      	bne.n	800ada8 <std+0x54>
 800ad9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ada0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ada4:	f000 b978 	b.w	800b098 <__retarget_lock_init_recursive>
 800ada8:	bd10      	pop	{r4, pc}
 800adaa:	bf00      	nop
 800adac:	0800af19 	.word	0x0800af19
 800adb0:	0800af3b 	.word	0x0800af3b
 800adb4:	0800af73 	.word	0x0800af73
 800adb8:	0800af97 	.word	0x0800af97
 800adbc:	20002110 	.word	0x20002110

0800adc0 <stdio_exit_handler>:
 800adc0:	4a02      	ldr	r2, [pc, #8]	@ (800adcc <stdio_exit_handler+0xc>)
 800adc2:	4903      	ldr	r1, [pc, #12]	@ (800add0 <stdio_exit_handler+0x10>)
 800adc4:	4803      	ldr	r0, [pc, #12]	@ (800add4 <stdio_exit_handler+0x14>)
 800adc6:	f000 b869 	b.w	800ae9c <_fwalk_sglue>
 800adca:	bf00      	nop
 800adcc:	2000010c 	.word	0x2000010c
 800add0:	0800ca15 	.word	0x0800ca15
 800add4:	2000011c 	.word	0x2000011c

0800add8 <cleanup_stdio>:
 800add8:	6841      	ldr	r1, [r0, #4]
 800adda:	4b0c      	ldr	r3, [pc, #48]	@ (800ae0c <cleanup_stdio+0x34>)
 800addc:	4299      	cmp	r1, r3
 800adde:	b510      	push	{r4, lr}
 800ade0:	4604      	mov	r4, r0
 800ade2:	d001      	beq.n	800ade8 <cleanup_stdio+0x10>
 800ade4:	f001 fe16 	bl	800ca14 <_fflush_r>
 800ade8:	68a1      	ldr	r1, [r4, #8]
 800adea:	4b09      	ldr	r3, [pc, #36]	@ (800ae10 <cleanup_stdio+0x38>)
 800adec:	4299      	cmp	r1, r3
 800adee:	d002      	beq.n	800adf6 <cleanup_stdio+0x1e>
 800adf0:	4620      	mov	r0, r4
 800adf2:	f001 fe0f 	bl	800ca14 <_fflush_r>
 800adf6:	68e1      	ldr	r1, [r4, #12]
 800adf8:	4b06      	ldr	r3, [pc, #24]	@ (800ae14 <cleanup_stdio+0x3c>)
 800adfa:	4299      	cmp	r1, r3
 800adfc:	d004      	beq.n	800ae08 <cleanup_stdio+0x30>
 800adfe:	4620      	mov	r0, r4
 800ae00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae04:	f001 be06 	b.w	800ca14 <_fflush_r>
 800ae08:	bd10      	pop	{r4, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20002110 	.word	0x20002110
 800ae10:	20002178 	.word	0x20002178
 800ae14:	200021e0 	.word	0x200021e0

0800ae18 <global_stdio_init.part.0>:
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae48 <global_stdio_init.part.0+0x30>)
 800ae1c:	4c0b      	ldr	r4, [pc, #44]	@ (800ae4c <global_stdio_init.part.0+0x34>)
 800ae1e:	4a0c      	ldr	r2, [pc, #48]	@ (800ae50 <global_stdio_init.part.0+0x38>)
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	4620      	mov	r0, r4
 800ae24:	2200      	movs	r2, #0
 800ae26:	2104      	movs	r1, #4
 800ae28:	f7ff ff94 	bl	800ad54 <std>
 800ae2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae30:	2201      	movs	r2, #1
 800ae32:	2109      	movs	r1, #9
 800ae34:	f7ff ff8e 	bl	800ad54 <std>
 800ae38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae3c:	2202      	movs	r2, #2
 800ae3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae42:	2112      	movs	r1, #18
 800ae44:	f7ff bf86 	b.w	800ad54 <std>
 800ae48:	20002248 	.word	0x20002248
 800ae4c:	20002110 	.word	0x20002110
 800ae50:	0800adc1 	.word	0x0800adc1

0800ae54 <__sfp_lock_acquire>:
 800ae54:	4801      	ldr	r0, [pc, #4]	@ (800ae5c <__sfp_lock_acquire+0x8>)
 800ae56:	f000 b920 	b.w	800b09a <__retarget_lock_acquire_recursive>
 800ae5a:	bf00      	nop
 800ae5c:	20002251 	.word	0x20002251

0800ae60 <__sfp_lock_release>:
 800ae60:	4801      	ldr	r0, [pc, #4]	@ (800ae68 <__sfp_lock_release+0x8>)
 800ae62:	f000 b91b 	b.w	800b09c <__retarget_lock_release_recursive>
 800ae66:	bf00      	nop
 800ae68:	20002251 	.word	0x20002251

0800ae6c <__sinit>:
 800ae6c:	b510      	push	{r4, lr}
 800ae6e:	4604      	mov	r4, r0
 800ae70:	f7ff fff0 	bl	800ae54 <__sfp_lock_acquire>
 800ae74:	6a23      	ldr	r3, [r4, #32]
 800ae76:	b11b      	cbz	r3, 800ae80 <__sinit+0x14>
 800ae78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae7c:	f7ff bff0 	b.w	800ae60 <__sfp_lock_release>
 800ae80:	4b04      	ldr	r3, [pc, #16]	@ (800ae94 <__sinit+0x28>)
 800ae82:	6223      	str	r3, [r4, #32]
 800ae84:	4b04      	ldr	r3, [pc, #16]	@ (800ae98 <__sinit+0x2c>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1f5      	bne.n	800ae78 <__sinit+0xc>
 800ae8c:	f7ff ffc4 	bl	800ae18 <global_stdio_init.part.0>
 800ae90:	e7f2      	b.n	800ae78 <__sinit+0xc>
 800ae92:	bf00      	nop
 800ae94:	0800add9 	.word	0x0800add9
 800ae98:	20002248 	.word	0x20002248

0800ae9c <_fwalk_sglue>:
 800ae9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea0:	4607      	mov	r7, r0
 800aea2:	4688      	mov	r8, r1
 800aea4:	4614      	mov	r4, r2
 800aea6:	2600      	movs	r6, #0
 800aea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aeac:	f1b9 0901 	subs.w	r9, r9, #1
 800aeb0:	d505      	bpl.n	800aebe <_fwalk_sglue+0x22>
 800aeb2:	6824      	ldr	r4, [r4, #0]
 800aeb4:	2c00      	cmp	r4, #0
 800aeb6:	d1f7      	bne.n	800aea8 <_fwalk_sglue+0xc>
 800aeb8:	4630      	mov	r0, r6
 800aeba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aebe:	89ab      	ldrh	r3, [r5, #12]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d907      	bls.n	800aed4 <_fwalk_sglue+0x38>
 800aec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aec8:	3301      	adds	r3, #1
 800aeca:	d003      	beq.n	800aed4 <_fwalk_sglue+0x38>
 800aecc:	4629      	mov	r1, r5
 800aece:	4638      	mov	r0, r7
 800aed0:	47c0      	blx	r8
 800aed2:	4306      	orrs	r6, r0
 800aed4:	3568      	adds	r5, #104	@ 0x68
 800aed6:	e7e9      	b.n	800aeac <_fwalk_sglue+0x10>

0800aed8 <siprintf>:
 800aed8:	b40e      	push	{r1, r2, r3}
 800aeda:	b500      	push	{lr}
 800aedc:	b09c      	sub	sp, #112	@ 0x70
 800aede:	ab1d      	add	r3, sp, #116	@ 0x74
 800aee0:	9002      	str	r0, [sp, #8]
 800aee2:	9006      	str	r0, [sp, #24]
 800aee4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aee8:	4809      	ldr	r0, [pc, #36]	@ (800af10 <siprintf+0x38>)
 800aeea:	9107      	str	r1, [sp, #28]
 800aeec:	9104      	str	r1, [sp, #16]
 800aeee:	4909      	ldr	r1, [pc, #36]	@ (800af14 <siprintf+0x3c>)
 800aef0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef4:	9105      	str	r1, [sp, #20]
 800aef6:	6800      	ldr	r0, [r0, #0]
 800aef8:	9301      	str	r3, [sp, #4]
 800aefa:	a902      	add	r1, sp, #8
 800aefc:	f001 fc0a 	bl	800c714 <_svfiprintf_r>
 800af00:	9b02      	ldr	r3, [sp, #8]
 800af02:	2200      	movs	r2, #0
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	b01c      	add	sp, #112	@ 0x70
 800af08:	f85d eb04 	ldr.w	lr, [sp], #4
 800af0c:	b003      	add	sp, #12
 800af0e:	4770      	bx	lr
 800af10:	20000118 	.word	0x20000118
 800af14:	ffff0208 	.word	0xffff0208

0800af18 <__sread>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	460c      	mov	r4, r1
 800af1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af20:	f000 f86c 	bl	800affc <_read_r>
 800af24:	2800      	cmp	r0, #0
 800af26:	bfab      	itete	ge
 800af28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af2a:	89a3      	ldrhlt	r3, [r4, #12]
 800af2c:	181b      	addge	r3, r3, r0
 800af2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af32:	bfac      	ite	ge
 800af34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af36:	81a3      	strhlt	r3, [r4, #12]
 800af38:	bd10      	pop	{r4, pc}

0800af3a <__swrite>:
 800af3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	461f      	mov	r7, r3
 800af40:	898b      	ldrh	r3, [r1, #12]
 800af42:	05db      	lsls	r3, r3, #23
 800af44:	4605      	mov	r5, r0
 800af46:	460c      	mov	r4, r1
 800af48:	4616      	mov	r6, r2
 800af4a:	d505      	bpl.n	800af58 <__swrite+0x1e>
 800af4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af50:	2302      	movs	r3, #2
 800af52:	2200      	movs	r2, #0
 800af54:	f000 f840 	bl	800afd8 <_lseek_r>
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af62:	81a3      	strh	r3, [r4, #12]
 800af64:	4632      	mov	r2, r6
 800af66:	463b      	mov	r3, r7
 800af68:	4628      	mov	r0, r5
 800af6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af6e:	f000 b857 	b.w	800b020 <_write_r>

0800af72 <__sseek>:
 800af72:	b510      	push	{r4, lr}
 800af74:	460c      	mov	r4, r1
 800af76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af7a:	f000 f82d 	bl	800afd8 <_lseek_r>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	bf15      	itete	ne
 800af84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af8e:	81a3      	strheq	r3, [r4, #12]
 800af90:	bf18      	it	ne
 800af92:	81a3      	strhne	r3, [r4, #12]
 800af94:	bd10      	pop	{r4, pc}

0800af96 <__sclose>:
 800af96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9a:	f000 b80d 	b.w	800afb8 <_close_r>

0800af9e <memset>:
 800af9e:	4402      	add	r2, r0
 800afa0:	4603      	mov	r3, r0
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d100      	bne.n	800afa8 <memset+0xa>
 800afa6:	4770      	bx	lr
 800afa8:	f803 1b01 	strb.w	r1, [r3], #1
 800afac:	e7f9      	b.n	800afa2 <memset+0x4>
	...

0800afb0 <_localeconv_r>:
 800afb0:	4800      	ldr	r0, [pc, #0]	@ (800afb4 <_localeconv_r+0x4>)
 800afb2:	4770      	bx	lr
 800afb4:	20000258 	.word	0x20000258

0800afb8 <_close_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4d06      	ldr	r5, [pc, #24]	@ (800afd4 <_close_r+0x1c>)
 800afbc:	2300      	movs	r3, #0
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	602b      	str	r3, [r5, #0]
 800afc4:	f7f7 fc02 	bl	80027cc <_close>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d102      	bne.n	800afd2 <_close_r+0x1a>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	b103      	cbz	r3, 800afd2 <_close_r+0x1a>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	2000224c 	.word	0x2000224c

0800afd8 <_lseek_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	@ (800aff8 <_lseek_r+0x20>)
 800afdc:	4604      	mov	r4, r0
 800afde:	4608      	mov	r0, r1
 800afe0:	4611      	mov	r1, r2
 800afe2:	2200      	movs	r2, #0
 800afe4:	602a      	str	r2, [r5, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f7f7 fc17 	bl	800281a <_lseek>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_lseek_r+0x1e>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_lseek_r+0x1e>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	2000224c 	.word	0x2000224c

0800affc <_read_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4d07      	ldr	r5, [pc, #28]	@ (800b01c <_read_r+0x20>)
 800b000:	4604      	mov	r4, r0
 800b002:	4608      	mov	r0, r1
 800b004:	4611      	mov	r1, r2
 800b006:	2200      	movs	r2, #0
 800b008:	602a      	str	r2, [r5, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f7f7 fba5 	bl	800275a <_read>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_read_r+0x1e>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_read_r+0x1e>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	2000224c 	.word	0x2000224c

0800b020 <_write_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4d07      	ldr	r5, [pc, #28]	@ (800b040 <_write_r+0x20>)
 800b024:	4604      	mov	r4, r0
 800b026:	4608      	mov	r0, r1
 800b028:	4611      	mov	r1, r2
 800b02a:	2200      	movs	r2, #0
 800b02c:	602a      	str	r2, [r5, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	f7f7 fbb0 	bl	8002794 <_write>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d102      	bne.n	800b03e <_write_r+0x1e>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	b103      	cbz	r3, 800b03e <_write_r+0x1e>
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	2000224c 	.word	0x2000224c

0800b044 <__errno>:
 800b044:	4b01      	ldr	r3, [pc, #4]	@ (800b04c <__errno+0x8>)
 800b046:	6818      	ldr	r0, [r3, #0]
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	20000118 	.word	0x20000118

0800b050 <__libc_init_array>:
 800b050:	b570      	push	{r4, r5, r6, lr}
 800b052:	4d0d      	ldr	r5, [pc, #52]	@ (800b088 <__libc_init_array+0x38>)
 800b054:	4c0d      	ldr	r4, [pc, #52]	@ (800b08c <__libc_init_array+0x3c>)
 800b056:	1b64      	subs	r4, r4, r5
 800b058:	10a4      	asrs	r4, r4, #2
 800b05a:	2600      	movs	r6, #0
 800b05c:	42a6      	cmp	r6, r4
 800b05e:	d109      	bne.n	800b074 <__libc_init_array+0x24>
 800b060:	4d0b      	ldr	r5, [pc, #44]	@ (800b090 <__libc_init_array+0x40>)
 800b062:	4c0c      	ldr	r4, [pc, #48]	@ (800b094 <__libc_init_array+0x44>)
 800b064:	f003 fba4 	bl	800e7b0 <_init>
 800b068:	1b64      	subs	r4, r4, r5
 800b06a:	10a4      	asrs	r4, r4, #2
 800b06c:	2600      	movs	r6, #0
 800b06e:	42a6      	cmp	r6, r4
 800b070:	d105      	bne.n	800b07e <__libc_init_array+0x2e>
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	f855 3b04 	ldr.w	r3, [r5], #4
 800b078:	4798      	blx	r3
 800b07a:	3601      	adds	r6, #1
 800b07c:	e7ee      	b.n	800b05c <__libc_init_array+0xc>
 800b07e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b082:	4798      	blx	r3
 800b084:	3601      	adds	r6, #1
 800b086:	e7f2      	b.n	800b06e <__libc_init_array+0x1e>
 800b088:	0800f020 	.word	0x0800f020
 800b08c:	0800f020 	.word	0x0800f020
 800b090:	0800f020 	.word	0x0800f020
 800b094:	0800f024 	.word	0x0800f024

0800b098 <__retarget_lock_init_recursive>:
 800b098:	4770      	bx	lr

0800b09a <__retarget_lock_acquire_recursive>:
 800b09a:	4770      	bx	lr

0800b09c <__retarget_lock_release_recursive>:
 800b09c:	4770      	bx	lr

0800b09e <copysign>:
 800b09e:	b082      	sub	sp, #8
 800b0a0:	ec51 0b10 	vmov	r0, r1, d0
 800b0a4:	ed8d 1b00 	vstr	d1, [sp]
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800b0ae:	9901      	ldr	r1, [sp, #4]
 800b0b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800b0b4:	ea40 0301 	orr.w	r3, r0, r1
 800b0b8:	ec43 2b10 	vmov	d0, r2, r3
 800b0bc:	b002      	add	sp, #8
 800b0be:	4770      	bx	lr

0800b0c0 <quorem>:
 800b0c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	6903      	ldr	r3, [r0, #16]
 800b0c6:	690c      	ldr	r4, [r1, #16]
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	4607      	mov	r7, r0
 800b0cc:	db7e      	blt.n	800b1cc <quorem+0x10c>
 800b0ce:	3c01      	subs	r4, #1
 800b0d0:	f101 0814 	add.w	r8, r1, #20
 800b0d4:	00a3      	lsls	r3, r4, #2
 800b0d6:	f100 0514 	add.w	r5, r0, #20
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0e0:	9301      	str	r3, [sp, #4]
 800b0e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0f6:	d32e      	bcc.n	800b156 <quorem+0x96>
 800b0f8:	f04f 0a00 	mov.w	sl, #0
 800b0fc:	46c4      	mov	ip, r8
 800b0fe:	46ae      	mov	lr, r5
 800b100:	46d3      	mov	fp, sl
 800b102:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b106:	b298      	uxth	r0, r3
 800b108:	fb06 a000 	mla	r0, r6, r0, sl
 800b10c:	0c02      	lsrs	r2, r0, #16
 800b10e:	0c1b      	lsrs	r3, r3, #16
 800b110:	fb06 2303 	mla	r3, r6, r3, r2
 800b114:	f8de 2000 	ldr.w	r2, [lr]
 800b118:	b280      	uxth	r0, r0
 800b11a:	b292      	uxth	r2, r2
 800b11c:	1a12      	subs	r2, r2, r0
 800b11e:	445a      	add	r2, fp
 800b120:	f8de 0000 	ldr.w	r0, [lr]
 800b124:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b128:	b29b      	uxth	r3, r3
 800b12a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b12e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b132:	b292      	uxth	r2, r2
 800b134:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b138:	45e1      	cmp	r9, ip
 800b13a:	f84e 2b04 	str.w	r2, [lr], #4
 800b13e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b142:	d2de      	bcs.n	800b102 <quorem+0x42>
 800b144:	9b00      	ldr	r3, [sp, #0]
 800b146:	58eb      	ldr	r3, [r5, r3]
 800b148:	b92b      	cbnz	r3, 800b156 <quorem+0x96>
 800b14a:	9b01      	ldr	r3, [sp, #4]
 800b14c:	3b04      	subs	r3, #4
 800b14e:	429d      	cmp	r5, r3
 800b150:	461a      	mov	r2, r3
 800b152:	d32f      	bcc.n	800b1b4 <quorem+0xf4>
 800b154:	613c      	str	r4, [r7, #16]
 800b156:	4638      	mov	r0, r7
 800b158:	f001 f978 	bl	800c44c <__mcmp>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	db25      	blt.n	800b1ac <quorem+0xec>
 800b160:	4629      	mov	r1, r5
 800b162:	2000      	movs	r0, #0
 800b164:	f858 2b04 	ldr.w	r2, [r8], #4
 800b168:	f8d1 c000 	ldr.w	ip, [r1]
 800b16c:	fa1f fe82 	uxth.w	lr, r2
 800b170:	fa1f f38c 	uxth.w	r3, ip
 800b174:	eba3 030e 	sub.w	r3, r3, lr
 800b178:	4403      	add	r3, r0
 800b17a:	0c12      	lsrs	r2, r2, #16
 800b17c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b180:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b184:	b29b      	uxth	r3, r3
 800b186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b18a:	45c1      	cmp	r9, r8
 800b18c:	f841 3b04 	str.w	r3, [r1], #4
 800b190:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b194:	d2e6      	bcs.n	800b164 <quorem+0xa4>
 800b196:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b19a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b19e:	b922      	cbnz	r2, 800b1aa <quorem+0xea>
 800b1a0:	3b04      	subs	r3, #4
 800b1a2:	429d      	cmp	r5, r3
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	d30b      	bcc.n	800b1c0 <quorem+0x100>
 800b1a8:	613c      	str	r4, [r7, #16]
 800b1aa:	3601      	adds	r6, #1
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	b003      	add	sp, #12
 800b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b4:	6812      	ldr	r2, [r2, #0]
 800b1b6:	3b04      	subs	r3, #4
 800b1b8:	2a00      	cmp	r2, #0
 800b1ba:	d1cb      	bne.n	800b154 <quorem+0x94>
 800b1bc:	3c01      	subs	r4, #1
 800b1be:	e7c6      	b.n	800b14e <quorem+0x8e>
 800b1c0:	6812      	ldr	r2, [r2, #0]
 800b1c2:	3b04      	subs	r3, #4
 800b1c4:	2a00      	cmp	r2, #0
 800b1c6:	d1ef      	bne.n	800b1a8 <quorem+0xe8>
 800b1c8:	3c01      	subs	r4, #1
 800b1ca:	e7ea      	b.n	800b1a2 <quorem+0xe2>
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e7ee      	b.n	800b1ae <quorem+0xee>

0800b1d0 <_dtoa_r>:
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	69c7      	ldr	r7, [r0, #28]
 800b1d6:	b099      	sub	sp, #100	@ 0x64
 800b1d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b1dc:	ec55 4b10 	vmov	r4, r5, d0
 800b1e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b1e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1e4:	4683      	mov	fp, r0
 800b1e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1ea:	b97f      	cbnz	r7, 800b20c <_dtoa_r+0x3c>
 800b1ec:	2010      	movs	r0, #16
 800b1ee:	f000 fdfd 	bl	800bdec <malloc>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b1f8:	b920      	cbnz	r0, 800b204 <_dtoa_r+0x34>
 800b1fa:	4ba7      	ldr	r3, [pc, #668]	@ (800b498 <_dtoa_r+0x2c8>)
 800b1fc:	21ef      	movs	r1, #239	@ 0xef
 800b1fe:	48a7      	ldr	r0, [pc, #668]	@ (800b49c <_dtoa_r+0x2cc>)
 800b200:	f001 fc68 	bl	800cad4 <__assert_func>
 800b204:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b208:	6007      	str	r7, [r0, #0]
 800b20a:	60c7      	str	r7, [r0, #12]
 800b20c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b210:	6819      	ldr	r1, [r3, #0]
 800b212:	b159      	cbz	r1, 800b22c <_dtoa_r+0x5c>
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	604a      	str	r2, [r1, #4]
 800b218:	2301      	movs	r3, #1
 800b21a:	4093      	lsls	r3, r2
 800b21c:	608b      	str	r3, [r1, #8]
 800b21e:	4658      	mov	r0, fp
 800b220:	f000 feda 	bl	800bfd8 <_Bfree>
 800b224:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	1e2b      	subs	r3, r5, #0
 800b22e:	bfb9      	ittee	lt
 800b230:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b234:	9303      	strlt	r3, [sp, #12]
 800b236:	2300      	movge	r3, #0
 800b238:	6033      	strge	r3, [r6, #0]
 800b23a:	9f03      	ldr	r7, [sp, #12]
 800b23c:	4b98      	ldr	r3, [pc, #608]	@ (800b4a0 <_dtoa_r+0x2d0>)
 800b23e:	bfbc      	itt	lt
 800b240:	2201      	movlt	r2, #1
 800b242:	6032      	strlt	r2, [r6, #0]
 800b244:	43bb      	bics	r3, r7
 800b246:	d112      	bne.n	800b26e <_dtoa_r+0x9e>
 800b248:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b24a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b254:	4323      	orrs	r3, r4
 800b256:	f000 854d 	beq.w	800bcf4 <_dtoa_r+0xb24>
 800b25a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b25c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b4b4 <_dtoa_r+0x2e4>
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 854f 	beq.w	800bd04 <_dtoa_r+0xb34>
 800b266:	f10a 0303 	add.w	r3, sl, #3
 800b26a:	f000 bd49 	b.w	800bd00 <_dtoa_r+0xb30>
 800b26e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b272:	2200      	movs	r2, #0
 800b274:	ec51 0b17 	vmov	r0, r1, d7
 800b278:	2300      	movs	r3, #0
 800b27a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b27e:	f7f5 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 800b282:	4680      	mov	r8, r0
 800b284:	b158      	cbz	r0, 800b29e <_dtoa_r+0xce>
 800b286:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b288:	2301      	movs	r3, #1
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b28e:	b113      	cbz	r3, 800b296 <_dtoa_r+0xc6>
 800b290:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b292:	4b84      	ldr	r3, [pc, #528]	@ (800b4a4 <_dtoa_r+0x2d4>)
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b4b8 <_dtoa_r+0x2e8>
 800b29a:	f000 bd33 	b.w	800bd04 <_dtoa_r+0xb34>
 800b29e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b2a2:	aa16      	add	r2, sp, #88	@ 0x58
 800b2a4:	a917      	add	r1, sp, #92	@ 0x5c
 800b2a6:	4658      	mov	r0, fp
 800b2a8:	f001 f980 	bl	800c5ac <__d2b>
 800b2ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b2b0:	4681      	mov	r9, r0
 800b2b2:	2e00      	cmp	r6, #0
 800b2b4:	d077      	beq.n	800b3a6 <_dtoa_r+0x1d6>
 800b2b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b2bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	4b74      	ldr	r3, [pc, #464]	@ (800b4a8 <_dtoa_r+0x2d8>)
 800b2d6:	f7f4 ffd7 	bl	8000288 <__aeabi_dsub>
 800b2da:	a369      	add	r3, pc, #420	@ (adr r3, 800b480 <_dtoa_r+0x2b0>)
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f7f5 f98a 	bl	80005f8 <__aeabi_dmul>
 800b2e4:	a368      	add	r3, pc, #416	@ (adr r3, 800b488 <_dtoa_r+0x2b8>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f7f4 ffcf 	bl	800028c <__adddf3>
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	f7f5 f916 	bl	8000524 <__aeabi_i2d>
 800b2f8:	a365      	add	r3, pc, #404	@ (adr r3, 800b490 <_dtoa_r+0x2c0>)
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	f7f5 f97b 	bl	80005f8 <__aeabi_dmul>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4620      	mov	r0, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f4 ffbf 	bl	800028c <__adddf3>
 800b30e:	4604      	mov	r4, r0
 800b310:	460d      	mov	r5, r1
 800b312:	f7f5 fc21 	bl	8000b58 <__aeabi_d2iz>
 800b316:	2200      	movs	r2, #0
 800b318:	4607      	mov	r7, r0
 800b31a:	2300      	movs	r3, #0
 800b31c:	4620      	mov	r0, r4
 800b31e:	4629      	mov	r1, r5
 800b320:	f7f5 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800b324:	b140      	cbz	r0, 800b338 <_dtoa_r+0x168>
 800b326:	4638      	mov	r0, r7
 800b328:	f7f5 f8fc 	bl	8000524 <__aeabi_i2d>
 800b32c:	4622      	mov	r2, r4
 800b32e:	462b      	mov	r3, r5
 800b330:	f7f5 fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 800b334:	b900      	cbnz	r0, 800b338 <_dtoa_r+0x168>
 800b336:	3f01      	subs	r7, #1
 800b338:	2f16      	cmp	r7, #22
 800b33a:	d851      	bhi.n	800b3e0 <_dtoa_r+0x210>
 800b33c:	4b5b      	ldr	r3, [pc, #364]	@ (800b4ac <_dtoa_r+0x2dc>)
 800b33e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b34a:	f7f5 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800b34e:	2800      	cmp	r0, #0
 800b350:	d048      	beq.n	800b3e4 <_dtoa_r+0x214>
 800b352:	3f01      	subs	r7, #1
 800b354:	2300      	movs	r3, #0
 800b356:	9312      	str	r3, [sp, #72]	@ 0x48
 800b358:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b35a:	1b9b      	subs	r3, r3, r6
 800b35c:	1e5a      	subs	r2, r3, #1
 800b35e:	bf44      	itt	mi
 800b360:	f1c3 0801 	rsbmi	r8, r3, #1
 800b364:	2300      	movmi	r3, #0
 800b366:	9208      	str	r2, [sp, #32]
 800b368:	bf54      	ite	pl
 800b36a:	f04f 0800 	movpl.w	r8, #0
 800b36e:	9308      	strmi	r3, [sp, #32]
 800b370:	2f00      	cmp	r7, #0
 800b372:	db39      	blt.n	800b3e8 <_dtoa_r+0x218>
 800b374:	9b08      	ldr	r3, [sp, #32]
 800b376:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b378:	443b      	add	r3, r7
 800b37a:	9308      	str	r3, [sp, #32]
 800b37c:	2300      	movs	r3, #0
 800b37e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b382:	2b09      	cmp	r3, #9
 800b384:	d864      	bhi.n	800b450 <_dtoa_r+0x280>
 800b386:	2b05      	cmp	r3, #5
 800b388:	bfc4      	itt	gt
 800b38a:	3b04      	subgt	r3, #4
 800b38c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b390:	f1a3 0302 	sub.w	r3, r3, #2
 800b394:	bfcc      	ite	gt
 800b396:	2400      	movgt	r4, #0
 800b398:	2401      	movle	r4, #1
 800b39a:	2b03      	cmp	r3, #3
 800b39c:	d863      	bhi.n	800b466 <_dtoa_r+0x296>
 800b39e:	e8df f003 	tbb	[pc, r3]
 800b3a2:	372a      	.short	0x372a
 800b3a4:	5535      	.short	0x5535
 800b3a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b3aa:	441e      	add	r6, r3
 800b3ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b3b0:	2b20      	cmp	r3, #32
 800b3b2:	bfc1      	itttt	gt
 800b3b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3b8:	409f      	lslgt	r7, r3
 800b3ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3be:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3c2:	bfd6      	itet	le
 800b3c4:	f1c3 0320 	rsble	r3, r3, #32
 800b3c8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3cc:	fa04 f003 	lslle.w	r0, r4, r3
 800b3d0:	f7f5 f898 	bl	8000504 <__aeabi_ui2d>
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b3da:	3e01      	subs	r6, #1
 800b3dc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b3de:	e777      	b.n	800b2d0 <_dtoa_r+0x100>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e7b8      	b.n	800b356 <_dtoa_r+0x186>
 800b3e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b3e6:	e7b7      	b.n	800b358 <_dtoa_r+0x188>
 800b3e8:	427b      	negs	r3, r7
 800b3ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	eba8 0807 	sub.w	r8, r8, r7
 800b3f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3f4:	e7c4      	b.n	800b380 <_dtoa_r+0x1b0>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	dc35      	bgt.n	800b46c <_dtoa_r+0x29c>
 800b400:	2301      	movs	r3, #1
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	9307      	str	r3, [sp, #28]
 800b406:	461a      	mov	r2, r3
 800b408:	920e      	str	r2, [sp, #56]	@ 0x38
 800b40a:	e00b      	b.n	800b424 <_dtoa_r+0x254>
 800b40c:	2301      	movs	r3, #1
 800b40e:	e7f3      	b.n	800b3f8 <_dtoa_r+0x228>
 800b410:	2300      	movs	r3, #0
 800b412:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b416:	18fb      	adds	r3, r7, r3
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	9307      	str	r3, [sp, #28]
 800b420:	bfb8      	it	lt
 800b422:	2301      	movlt	r3, #1
 800b424:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b428:	2100      	movs	r1, #0
 800b42a:	2204      	movs	r2, #4
 800b42c:	f102 0514 	add.w	r5, r2, #20
 800b430:	429d      	cmp	r5, r3
 800b432:	d91f      	bls.n	800b474 <_dtoa_r+0x2a4>
 800b434:	6041      	str	r1, [r0, #4]
 800b436:	4658      	mov	r0, fp
 800b438:	f000 fd8e 	bl	800bf58 <_Balloc>
 800b43c:	4682      	mov	sl, r0
 800b43e:	2800      	cmp	r0, #0
 800b440:	d13c      	bne.n	800b4bc <_dtoa_r+0x2ec>
 800b442:	4b1b      	ldr	r3, [pc, #108]	@ (800b4b0 <_dtoa_r+0x2e0>)
 800b444:	4602      	mov	r2, r0
 800b446:	f240 11af 	movw	r1, #431	@ 0x1af
 800b44a:	e6d8      	b.n	800b1fe <_dtoa_r+0x2e>
 800b44c:	2301      	movs	r3, #1
 800b44e:	e7e0      	b.n	800b412 <_dtoa_r+0x242>
 800b450:	2401      	movs	r4, #1
 800b452:	2300      	movs	r3, #0
 800b454:	9309      	str	r3, [sp, #36]	@ 0x24
 800b456:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	9307      	str	r3, [sp, #28]
 800b460:	2200      	movs	r2, #0
 800b462:	2312      	movs	r3, #18
 800b464:	e7d0      	b.n	800b408 <_dtoa_r+0x238>
 800b466:	2301      	movs	r3, #1
 800b468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b46a:	e7f5      	b.n	800b458 <_dtoa_r+0x288>
 800b46c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	9307      	str	r3, [sp, #28]
 800b472:	e7d7      	b.n	800b424 <_dtoa_r+0x254>
 800b474:	3101      	adds	r1, #1
 800b476:	0052      	lsls	r2, r2, #1
 800b478:	e7d8      	b.n	800b42c <_dtoa_r+0x25c>
 800b47a:	bf00      	nop
 800b47c:	f3af 8000 	nop.w
 800b480:	636f4361 	.word	0x636f4361
 800b484:	3fd287a7 	.word	0x3fd287a7
 800b488:	8b60c8b3 	.word	0x8b60c8b3
 800b48c:	3fc68a28 	.word	0x3fc68a28
 800b490:	509f79fb 	.word	0x509f79fb
 800b494:	3fd34413 	.word	0x3fd34413
 800b498:	0800e8a9 	.word	0x0800e8a9
 800b49c:	0800e8c0 	.word	0x0800e8c0
 800b4a0:	7ff00000 	.word	0x7ff00000
 800b4a4:	0800e879 	.word	0x0800e879
 800b4a8:	3ff80000 	.word	0x3ff80000
 800b4ac:	0800e9b8 	.word	0x0800e9b8
 800b4b0:	0800e918 	.word	0x0800e918
 800b4b4:	0800e8a5 	.word	0x0800e8a5
 800b4b8:	0800e878 	.word	0x0800e878
 800b4bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4c0:	6018      	str	r0, [r3, #0]
 800b4c2:	9b07      	ldr	r3, [sp, #28]
 800b4c4:	2b0e      	cmp	r3, #14
 800b4c6:	f200 80a4 	bhi.w	800b612 <_dtoa_r+0x442>
 800b4ca:	2c00      	cmp	r4, #0
 800b4cc:	f000 80a1 	beq.w	800b612 <_dtoa_r+0x442>
 800b4d0:	2f00      	cmp	r7, #0
 800b4d2:	dd33      	ble.n	800b53c <_dtoa_r+0x36c>
 800b4d4:	4bad      	ldr	r3, [pc, #692]	@ (800b78c <_dtoa_r+0x5bc>)
 800b4d6:	f007 020f 	and.w	r2, r7, #15
 800b4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4de:	ed93 7b00 	vldr	d7, [r3]
 800b4e2:	05f8      	lsls	r0, r7, #23
 800b4e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b4e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b4ec:	d516      	bpl.n	800b51c <_dtoa_r+0x34c>
 800b4ee:	4ba8      	ldr	r3, [pc, #672]	@ (800b790 <_dtoa_r+0x5c0>)
 800b4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4f8:	f7f5 f9a8 	bl	800084c <__aeabi_ddiv>
 800b4fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b500:	f004 040f 	and.w	r4, r4, #15
 800b504:	2603      	movs	r6, #3
 800b506:	4da2      	ldr	r5, [pc, #648]	@ (800b790 <_dtoa_r+0x5c0>)
 800b508:	b954      	cbnz	r4, 800b520 <_dtoa_r+0x350>
 800b50a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b512:	f7f5 f99b 	bl	800084c <__aeabi_ddiv>
 800b516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b51a:	e028      	b.n	800b56e <_dtoa_r+0x39e>
 800b51c:	2602      	movs	r6, #2
 800b51e:	e7f2      	b.n	800b506 <_dtoa_r+0x336>
 800b520:	07e1      	lsls	r1, r4, #31
 800b522:	d508      	bpl.n	800b536 <_dtoa_r+0x366>
 800b524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b528:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b52c:	f7f5 f864 	bl	80005f8 <__aeabi_dmul>
 800b530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b534:	3601      	adds	r6, #1
 800b536:	1064      	asrs	r4, r4, #1
 800b538:	3508      	adds	r5, #8
 800b53a:	e7e5      	b.n	800b508 <_dtoa_r+0x338>
 800b53c:	f000 80d2 	beq.w	800b6e4 <_dtoa_r+0x514>
 800b540:	427c      	negs	r4, r7
 800b542:	4b92      	ldr	r3, [pc, #584]	@ (800b78c <_dtoa_r+0x5bc>)
 800b544:	4d92      	ldr	r5, [pc, #584]	@ (800b790 <_dtoa_r+0x5c0>)
 800b546:	f004 020f 	and.w	r2, r4, #15
 800b54a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b552:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b556:	f7f5 f84f 	bl	80005f8 <__aeabi_dmul>
 800b55a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b55e:	1124      	asrs	r4, r4, #4
 800b560:	2300      	movs	r3, #0
 800b562:	2602      	movs	r6, #2
 800b564:	2c00      	cmp	r4, #0
 800b566:	f040 80b2 	bne.w	800b6ce <_dtoa_r+0x4fe>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1d3      	bne.n	800b516 <_dtoa_r+0x346>
 800b56e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b570:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80b7 	beq.w	800b6e8 <_dtoa_r+0x518>
 800b57a:	4b86      	ldr	r3, [pc, #536]	@ (800b794 <_dtoa_r+0x5c4>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	4620      	mov	r0, r4
 800b580:	4629      	mov	r1, r5
 800b582:	f7f5 faab 	bl	8000adc <__aeabi_dcmplt>
 800b586:	2800      	cmp	r0, #0
 800b588:	f000 80ae 	beq.w	800b6e8 <_dtoa_r+0x518>
 800b58c:	9b07      	ldr	r3, [sp, #28]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f000 80aa 	beq.w	800b6e8 <_dtoa_r+0x518>
 800b594:	9b00      	ldr	r3, [sp, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	dd37      	ble.n	800b60a <_dtoa_r+0x43a>
 800b59a:	1e7b      	subs	r3, r7, #1
 800b59c:	9304      	str	r3, [sp, #16]
 800b59e:	4620      	mov	r0, r4
 800b5a0:	4b7d      	ldr	r3, [pc, #500]	@ (800b798 <_dtoa_r+0x5c8>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	f7f5 f827 	bl	80005f8 <__aeabi_dmul>
 800b5aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5ae:	9c00      	ldr	r4, [sp, #0]
 800b5b0:	3601      	adds	r6, #1
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7f4 ffb6 	bl	8000524 <__aeabi_i2d>
 800b5b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5bc:	f7f5 f81c 	bl	80005f8 <__aeabi_dmul>
 800b5c0:	4b76      	ldr	r3, [pc, #472]	@ (800b79c <_dtoa_r+0x5cc>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f7f4 fe62 	bl	800028c <__adddf3>
 800b5c8:	4605      	mov	r5, r0
 800b5ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b5ce:	2c00      	cmp	r4, #0
 800b5d0:	f040 808d 	bne.w	800b6ee <_dtoa_r+0x51e>
 800b5d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5d8:	4b71      	ldr	r3, [pc, #452]	@ (800b7a0 <_dtoa_r+0x5d0>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f7f4 fe54 	bl	8000288 <__aeabi_dsub>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5e8:	462a      	mov	r2, r5
 800b5ea:	4633      	mov	r3, r6
 800b5ec:	f7f5 fa94 	bl	8000b18 <__aeabi_dcmpgt>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	f040 828b 	bne.w	800bb0c <_dtoa_r+0x93c>
 800b5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b600:	f7f5 fa6c 	bl	8000adc <__aeabi_dcmplt>
 800b604:	2800      	cmp	r0, #0
 800b606:	f040 8128 	bne.w	800b85a <_dtoa_r+0x68a>
 800b60a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b60e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b612:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b614:	2b00      	cmp	r3, #0
 800b616:	f2c0 815a 	blt.w	800b8ce <_dtoa_r+0x6fe>
 800b61a:	2f0e      	cmp	r7, #14
 800b61c:	f300 8157 	bgt.w	800b8ce <_dtoa_r+0x6fe>
 800b620:	4b5a      	ldr	r3, [pc, #360]	@ (800b78c <_dtoa_r+0x5bc>)
 800b622:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b626:	ed93 7b00 	vldr	d7, [r3]
 800b62a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	ed8d 7b00 	vstr	d7, [sp]
 800b632:	da03      	bge.n	800b63c <_dtoa_r+0x46c>
 800b634:	9b07      	ldr	r3, [sp, #28]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f340 8101 	ble.w	800b83e <_dtoa_r+0x66e>
 800b63c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b640:	4656      	mov	r6, sl
 800b642:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b646:	4620      	mov	r0, r4
 800b648:	4629      	mov	r1, r5
 800b64a:	f7f5 f8ff 	bl	800084c <__aeabi_ddiv>
 800b64e:	f7f5 fa83 	bl	8000b58 <__aeabi_d2iz>
 800b652:	4680      	mov	r8, r0
 800b654:	f7f4 ff66 	bl	8000524 <__aeabi_i2d>
 800b658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b65c:	f7f4 ffcc 	bl	80005f8 <__aeabi_dmul>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	4620      	mov	r0, r4
 800b666:	4629      	mov	r1, r5
 800b668:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b66c:	f7f4 fe0c 	bl	8000288 <__aeabi_dsub>
 800b670:	f806 4b01 	strb.w	r4, [r6], #1
 800b674:	9d07      	ldr	r5, [sp, #28]
 800b676:	eba6 040a 	sub.w	r4, r6, sl
 800b67a:	42a5      	cmp	r5, r4
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	f040 8117 	bne.w	800b8b2 <_dtoa_r+0x6e2>
 800b684:	f7f4 fe02 	bl	800028c <__adddf3>
 800b688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b68c:	4604      	mov	r4, r0
 800b68e:	460d      	mov	r5, r1
 800b690:	f7f5 fa42 	bl	8000b18 <__aeabi_dcmpgt>
 800b694:	2800      	cmp	r0, #0
 800b696:	f040 80f9 	bne.w	800b88c <_dtoa_r+0x6bc>
 800b69a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	f7f5 fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6a6:	b118      	cbz	r0, 800b6b0 <_dtoa_r+0x4e0>
 800b6a8:	f018 0f01 	tst.w	r8, #1
 800b6ac:	f040 80ee 	bne.w	800b88c <_dtoa_r+0x6bc>
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	4658      	mov	r0, fp
 800b6b4:	f000 fc90 	bl	800bfd8 <_Bfree>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	7033      	strb	r3, [r6, #0]
 800b6bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6be:	3701      	adds	r7, #1
 800b6c0:	601f      	str	r7, [r3, #0]
 800b6c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 831d 	beq.w	800bd04 <_dtoa_r+0xb34>
 800b6ca:	601e      	str	r6, [r3, #0]
 800b6cc:	e31a      	b.n	800bd04 <_dtoa_r+0xb34>
 800b6ce:	07e2      	lsls	r2, r4, #31
 800b6d0:	d505      	bpl.n	800b6de <_dtoa_r+0x50e>
 800b6d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6d6:	f7f4 ff8f 	bl	80005f8 <__aeabi_dmul>
 800b6da:	3601      	adds	r6, #1
 800b6dc:	2301      	movs	r3, #1
 800b6de:	1064      	asrs	r4, r4, #1
 800b6e0:	3508      	adds	r5, #8
 800b6e2:	e73f      	b.n	800b564 <_dtoa_r+0x394>
 800b6e4:	2602      	movs	r6, #2
 800b6e6:	e742      	b.n	800b56e <_dtoa_r+0x39e>
 800b6e8:	9c07      	ldr	r4, [sp, #28]
 800b6ea:	9704      	str	r7, [sp, #16]
 800b6ec:	e761      	b.n	800b5b2 <_dtoa_r+0x3e2>
 800b6ee:	4b27      	ldr	r3, [pc, #156]	@ (800b78c <_dtoa_r+0x5bc>)
 800b6f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6fa:	4454      	add	r4, sl
 800b6fc:	2900      	cmp	r1, #0
 800b6fe:	d053      	beq.n	800b7a8 <_dtoa_r+0x5d8>
 800b700:	4928      	ldr	r1, [pc, #160]	@ (800b7a4 <_dtoa_r+0x5d4>)
 800b702:	2000      	movs	r0, #0
 800b704:	f7f5 f8a2 	bl	800084c <__aeabi_ddiv>
 800b708:	4633      	mov	r3, r6
 800b70a:	462a      	mov	r2, r5
 800b70c:	f7f4 fdbc 	bl	8000288 <__aeabi_dsub>
 800b710:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b714:	4656      	mov	r6, sl
 800b716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b71a:	f7f5 fa1d 	bl	8000b58 <__aeabi_d2iz>
 800b71e:	4605      	mov	r5, r0
 800b720:	f7f4 ff00 	bl	8000524 <__aeabi_i2d>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b72c:	f7f4 fdac 	bl	8000288 <__aeabi_dsub>
 800b730:	3530      	adds	r5, #48	@ 0x30
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b73a:	f806 5b01 	strb.w	r5, [r6], #1
 800b73e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b742:	f7f5 f9cb 	bl	8000adc <__aeabi_dcmplt>
 800b746:	2800      	cmp	r0, #0
 800b748:	d171      	bne.n	800b82e <_dtoa_r+0x65e>
 800b74a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b74e:	4911      	ldr	r1, [pc, #68]	@ (800b794 <_dtoa_r+0x5c4>)
 800b750:	2000      	movs	r0, #0
 800b752:	f7f4 fd99 	bl	8000288 <__aeabi_dsub>
 800b756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b75a:	f7f5 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800b75e:	2800      	cmp	r0, #0
 800b760:	f040 8095 	bne.w	800b88e <_dtoa_r+0x6be>
 800b764:	42a6      	cmp	r6, r4
 800b766:	f43f af50 	beq.w	800b60a <_dtoa_r+0x43a>
 800b76a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b76e:	4b0a      	ldr	r3, [pc, #40]	@ (800b798 <_dtoa_r+0x5c8>)
 800b770:	2200      	movs	r2, #0
 800b772:	f7f4 ff41 	bl	80005f8 <__aeabi_dmul>
 800b776:	4b08      	ldr	r3, [pc, #32]	@ (800b798 <_dtoa_r+0x5c8>)
 800b778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b77c:	2200      	movs	r2, #0
 800b77e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b782:	f7f4 ff39 	bl	80005f8 <__aeabi_dmul>
 800b786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b78a:	e7c4      	b.n	800b716 <_dtoa_r+0x546>
 800b78c:	0800e9b8 	.word	0x0800e9b8
 800b790:	0800e990 	.word	0x0800e990
 800b794:	3ff00000 	.word	0x3ff00000
 800b798:	40240000 	.word	0x40240000
 800b79c:	401c0000 	.word	0x401c0000
 800b7a0:	40140000 	.word	0x40140000
 800b7a4:	3fe00000 	.word	0x3fe00000
 800b7a8:	4631      	mov	r1, r6
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f7f4 ff24 	bl	80005f8 <__aeabi_dmul>
 800b7b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b7b6:	4656      	mov	r6, sl
 800b7b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7bc:	f7f5 f9cc 	bl	8000b58 <__aeabi_d2iz>
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	f7f4 feaf 	bl	8000524 <__aeabi_i2d>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ce:	f7f4 fd5b 	bl	8000288 <__aeabi_dsub>
 800b7d2:	3530      	adds	r5, #48	@ 0x30
 800b7d4:	f806 5b01 	strb.w	r5, [r6], #1
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	42a6      	cmp	r6, r4
 800b7de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7e2:	f04f 0200 	mov.w	r2, #0
 800b7e6:	d124      	bne.n	800b832 <_dtoa_r+0x662>
 800b7e8:	4bac      	ldr	r3, [pc, #688]	@ (800ba9c <_dtoa_r+0x8cc>)
 800b7ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b7ee:	f7f4 fd4d 	bl	800028c <__adddf3>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fa:	f7f5 f98d 	bl	8000b18 <__aeabi_dcmpgt>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d145      	bne.n	800b88e <_dtoa_r+0x6be>
 800b802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b806:	49a5      	ldr	r1, [pc, #660]	@ (800ba9c <_dtoa_r+0x8cc>)
 800b808:	2000      	movs	r0, #0
 800b80a:	f7f4 fd3d 	bl	8000288 <__aeabi_dsub>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b816:	f7f5 f961 	bl	8000adc <__aeabi_dcmplt>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	f43f aef5 	beq.w	800b60a <_dtoa_r+0x43a>
 800b820:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b822:	1e73      	subs	r3, r6, #1
 800b824:	9315      	str	r3, [sp, #84]	@ 0x54
 800b826:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b82a:	2b30      	cmp	r3, #48	@ 0x30
 800b82c:	d0f8      	beq.n	800b820 <_dtoa_r+0x650>
 800b82e:	9f04      	ldr	r7, [sp, #16]
 800b830:	e73e      	b.n	800b6b0 <_dtoa_r+0x4e0>
 800b832:	4b9b      	ldr	r3, [pc, #620]	@ (800baa0 <_dtoa_r+0x8d0>)
 800b834:	f7f4 fee0 	bl	80005f8 <__aeabi_dmul>
 800b838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b83c:	e7bc      	b.n	800b7b8 <_dtoa_r+0x5e8>
 800b83e:	d10c      	bne.n	800b85a <_dtoa_r+0x68a>
 800b840:	4b98      	ldr	r3, [pc, #608]	@ (800baa4 <_dtoa_r+0x8d4>)
 800b842:	2200      	movs	r2, #0
 800b844:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b850:	f7f5 f958 	bl	8000b04 <__aeabi_dcmpge>
 800b854:	2800      	cmp	r0, #0
 800b856:	f000 8157 	beq.w	800bb08 <_dtoa_r+0x938>
 800b85a:	2400      	movs	r4, #0
 800b85c:	4625      	mov	r5, r4
 800b85e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b860:	43db      	mvns	r3, r3
 800b862:	9304      	str	r3, [sp, #16]
 800b864:	4656      	mov	r6, sl
 800b866:	2700      	movs	r7, #0
 800b868:	4621      	mov	r1, r4
 800b86a:	4658      	mov	r0, fp
 800b86c:	f000 fbb4 	bl	800bfd8 <_Bfree>
 800b870:	2d00      	cmp	r5, #0
 800b872:	d0dc      	beq.n	800b82e <_dtoa_r+0x65e>
 800b874:	b12f      	cbz	r7, 800b882 <_dtoa_r+0x6b2>
 800b876:	42af      	cmp	r7, r5
 800b878:	d003      	beq.n	800b882 <_dtoa_r+0x6b2>
 800b87a:	4639      	mov	r1, r7
 800b87c:	4658      	mov	r0, fp
 800b87e:	f000 fbab 	bl	800bfd8 <_Bfree>
 800b882:	4629      	mov	r1, r5
 800b884:	4658      	mov	r0, fp
 800b886:	f000 fba7 	bl	800bfd8 <_Bfree>
 800b88a:	e7d0      	b.n	800b82e <_dtoa_r+0x65e>
 800b88c:	9704      	str	r7, [sp, #16]
 800b88e:	4633      	mov	r3, r6
 800b890:	461e      	mov	r6, r3
 800b892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b896:	2a39      	cmp	r2, #57	@ 0x39
 800b898:	d107      	bne.n	800b8aa <_dtoa_r+0x6da>
 800b89a:	459a      	cmp	sl, r3
 800b89c:	d1f8      	bne.n	800b890 <_dtoa_r+0x6c0>
 800b89e:	9a04      	ldr	r2, [sp, #16]
 800b8a0:	3201      	adds	r2, #1
 800b8a2:	9204      	str	r2, [sp, #16]
 800b8a4:	2230      	movs	r2, #48	@ 0x30
 800b8a6:	f88a 2000 	strb.w	r2, [sl]
 800b8aa:	781a      	ldrb	r2, [r3, #0]
 800b8ac:	3201      	adds	r2, #1
 800b8ae:	701a      	strb	r2, [r3, #0]
 800b8b0:	e7bd      	b.n	800b82e <_dtoa_r+0x65e>
 800b8b2:	4b7b      	ldr	r3, [pc, #492]	@ (800baa0 <_dtoa_r+0x8d0>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f7f4 fe9f 	bl	80005f8 <__aeabi_dmul>
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	f7f5 f901 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	f43f aebb 	beq.w	800b642 <_dtoa_r+0x472>
 800b8cc:	e6f0      	b.n	800b6b0 <_dtoa_r+0x4e0>
 800b8ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b8d0:	2a00      	cmp	r2, #0
 800b8d2:	f000 80db 	beq.w	800ba8c <_dtoa_r+0x8bc>
 800b8d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8d8:	2a01      	cmp	r2, #1
 800b8da:	f300 80bf 	bgt.w	800ba5c <_dtoa_r+0x88c>
 800b8de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b8e0:	2a00      	cmp	r2, #0
 800b8e2:	f000 80b7 	beq.w	800ba54 <_dtoa_r+0x884>
 800b8e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b8ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8ec:	4646      	mov	r6, r8
 800b8ee:	9a08      	ldr	r2, [sp, #32]
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	441a      	add	r2, r3
 800b8f4:	4658      	mov	r0, fp
 800b8f6:	4498      	add	r8, r3
 800b8f8:	9208      	str	r2, [sp, #32]
 800b8fa:	f000 fc21 	bl	800c140 <__i2b>
 800b8fe:	4605      	mov	r5, r0
 800b900:	b15e      	cbz	r6, 800b91a <_dtoa_r+0x74a>
 800b902:	9b08      	ldr	r3, [sp, #32]
 800b904:	2b00      	cmp	r3, #0
 800b906:	dd08      	ble.n	800b91a <_dtoa_r+0x74a>
 800b908:	42b3      	cmp	r3, r6
 800b90a:	9a08      	ldr	r2, [sp, #32]
 800b90c:	bfa8      	it	ge
 800b90e:	4633      	movge	r3, r6
 800b910:	eba8 0803 	sub.w	r8, r8, r3
 800b914:	1af6      	subs	r6, r6, r3
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	9308      	str	r3, [sp, #32]
 800b91a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b91c:	b1f3      	cbz	r3, 800b95c <_dtoa_r+0x78c>
 800b91e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 80b7 	beq.w	800ba94 <_dtoa_r+0x8c4>
 800b926:	b18c      	cbz	r4, 800b94c <_dtoa_r+0x77c>
 800b928:	4629      	mov	r1, r5
 800b92a:	4622      	mov	r2, r4
 800b92c:	4658      	mov	r0, fp
 800b92e:	f000 fcc7 	bl	800c2c0 <__pow5mult>
 800b932:	464a      	mov	r2, r9
 800b934:	4601      	mov	r1, r0
 800b936:	4605      	mov	r5, r0
 800b938:	4658      	mov	r0, fp
 800b93a:	f000 fc17 	bl	800c16c <__multiply>
 800b93e:	4649      	mov	r1, r9
 800b940:	9004      	str	r0, [sp, #16]
 800b942:	4658      	mov	r0, fp
 800b944:	f000 fb48 	bl	800bfd8 <_Bfree>
 800b948:	9b04      	ldr	r3, [sp, #16]
 800b94a:	4699      	mov	r9, r3
 800b94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b94e:	1b1a      	subs	r2, r3, r4
 800b950:	d004      	beq.n	800b95c <_dtoa_r+0x78c>
 800b952:	4649      	mov	r1, r9
 800b954:	4658      	mov	r0, fp
 800b956:	f000 fcb3 	bl	800c2c0 <__pow5mult>
 800b95a:	4681      	mov	r9, r0
 800b95c:	2101      	movs	r1, #1
 800b95e:	4658      	mov	r0, fp
 800b960:	f000 fbee 	bl	800c140 <__i2b>
 800b964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b966:	4604      	mov	r4, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 81cf 	beq.w	800bd0c <_dtoa_r+0xb3c>
 800b96e:	461a      	mov	r2, r3
 800b970:	4601      	mov	r1, r0
 800b972:	4658      	mov	r0, fp
 800b974:	f000 fca4 	bl	800c2c0 <__pow5mult>
 800b978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	4604      	mov	r4, r0
 800b97e:	f300 8095 	bgt.w	800baac <_dtoa_r+0x8dc>
 800b982:	9b02      	ldr	r3, [sp, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	f040 8087 	bne.w	800ba98 <_dtoa_r+0x8c8>
 800b98a:	9b03      	ldr	r3, [sp, #12]
 800b98c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 8089 	bne.w	800baa8 <_dtoa_r+0x8d8>
 800b996:	9b03      	ldr	r3, [sp, #12]
 800b998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b99c:	0d1b      	lsrs	r3, r3, #20
 800b99e:	051b      	lsls	r3, r3, #20
 800b9a0:	b12b      	cbz	r3, 800b9ae <_dtoa_r+0x7de>
 800b9a2:	9b08      	ldr	r3, [sp, #32]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	9308      	str	r3, [sp, #32]
 800b9a8:	f108 0801 	add.w	r8, r8, #1
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 81b0 	beq.w	800bd18 <_dtoa_r+0xb48>
 800b9b8:	6923      	ldr	r3, [r4, #16]
 800b9ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9be:	6918      	ldr	r0, [r3, #16]
 800b9c0:	f000 fb72 	bl	800c0a8 <__hi0bits>
 800b9c4:	f1c0 0020 	rsb	r0, r0, #32
 800b9c8:	9b08      	ldr	r3, [sp, #32]
 800b9ca:	4418      	add	r0, r3
 800b9cc:	f010 001f 	ands.w	r0, r0, #31
 800b9d0:	d077      	beq.n	800bac2 <_dtoa_r+0x8f2>
 800b9d2:	f1c0 0320 	rsb	r3, r0, #32
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	dd6b      	ble.n	800bab2 <_dtoa_r+0x8e2>
 800b9da:	9b08      	ldr	r3, [sp, #32]
 800b9dc:	f1c0 001c 	rsb	r0, r0, #28
 800b9e0:	4403      	add	r3, r0
 800b9e2:	4480      	add	r8, r0
 800b9e4:	4406      	add	r6, r0
 800b9e6:	9308      	str	r3, [sp, #32]
 800b9e8:	f1b8 0f00 	cmp.w	r8, #0
 800b9ec:	dd05      	ble.n	800b9fa <_dtoa_r+0x82a>
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	4658      	mov	r0, fp
 800b9f4:	f000 fcbe 	bl	800c374 <__lshift>
 800b9f8:	4681      	mov	r9, r0
 800b9fa:	9b08      	ldr	r3, [sp, #32]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dd05      	ble.n	800ba0c <_dtoa_r+0x83c>
 800ba00:	4621      	mov	r1, r4
 800ba02:	461a      	mov	r2, r3
 800ba04:	4658      	mov	r0, fp
 800ba06:	f000 fcb5 	bl	800c374 <__lshift>
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d059      	beq.n	800bac6 <_dtoa_r+0x8f6>
 800ba12:	4621      	mov	r1, r4
 800ba14:	4648      	mov	r0, r9
 800ba16:	f000 fd19 	bl	800c44c <__mcmp>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	da53      	bge.n	800bac6 <_dtoa_r+0x8f6>
 800ba1e:	1e7b      	subs	r3, r7, #1
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	4649      	mov	r1, r9
 800ba24:	2300      	movs	r3, #0
 800ba26:	220a      	movs	r2, #10
 800ba28:	4658      	mov	r0, fp
 800ba2a:	f000 faf7 	bl	800c01c <__multadd>
 800ba2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba30:	4681      	mov	r9, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f000 8172 	beq.w	800bd1c <_dtoa_r+0xb4c>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	4658      	mov	r0, fp
 800ba40:	f000 faec 	bl	800c01c <__multadd>
 800ba44:	9b00      	ldr	r3, [sp, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	4605      	mov	r5, r0
 800ba4a:	dc67      	bgt.n	800bb1c <_dtoa_r+0x94c>
 800ba4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	dc41      	bgt.n	800bad6 <_dtoa_r+0x906>
 800ba52:	e063      	b.n	800bb1c <_dtoa_r+0x94c>
 800ba54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba5a:	e746      	b.n	800b8ea <_dtoa_r+0x71a>
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	1e5c      	subs	r4, r3, #1
 800ba60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba62:	42a3      	cmp	r3, r4
 800ba64:	bfbf      	itttt	lt
 800ba66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba6c:	1ae3      	sublt	r3, r4, r3
 800ba6e:	bfb4      	ite	lt
 800ba70:	18d2      	addlt	r2, r2, r3
 800ba72:	1b1c      	subge	r4, r3, r4
 800ba74:	9b07      	ldr	r3, [sp, #28]
 800ba76:	bfbc      	itt	lt
 800ba78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba7a:	2400      	movlt	r4, #0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	bfb5      	itete	lt
 800ba80:	eba8 0603 	sublt.w	r6, r8, r3
 800ba84:	9b07      	ldrge	r3, [sp, #28]
 800ba86:	2300      	movlt	r3, #0
 800ba88:	4646      	movge	r6, r8
 800ba8a:	e730      	b.n	800b8ee <_dtoa_r+0x71e>
 800ba8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba90:	4646      	mov	r6, r8
 800ba92:	e735      	b.n	800b900 <_dtoa_r+0x730>
 800ba94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba96:	e75c      	b.n	800b952 <_dtoa_r+0x782>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e788      	b.n	800b9ae <_dtoa_r+0x7de>
 800ba9c:	3fe00000 	.word	0x3fe00000
 800baa0:	40240000 	.word	0x40240000
 800baa4:	40140000 	.word	0x40140000
 800baa8:	9b02      	ldr	r3, [sp, #8]
 800baaa:	e780      	b.n	800b9ae <_dtoa_r+0x7de>
 800baac:	2300      	movs	r3, #0
 800baae:	930a      	str	r3, [sp, #40]	@ 0x28
 800bab0:	e782      	b.n	800b9b8 <_dtoa_r+0x7e8>
 800bab2:	d099      	beq.n	800b9e8 <_dtoa_r+0x818>
 800bab4:	9a08      	ldr	r2, [sp, #32]
 800bab6:	331c      	adds	r3, #28
 800bab8:	441a      	add	r2, r3
 800baba:	4498      	add	r8, r3
 800babc:	441e      	add	r6, r3
 800babe:	9208      	str	r2, [sp, #32]
 800bac0:	e792      	b.n	800b9e8 <_dtoa_r+0x818>
 800bac2:	4603      	mov	r3, r0
 800bac4:	e7f6      	b.n	800bab4 <_dtoa_r+0x8e4>
 800bac6:	9b07      	ldr	r3, [sp, #28]
 800bac8:	9704      	str	r7, [sp, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dc20      	bgt.n	800bb10 <_dtoa_r+0x940>
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	dd1e      	ble.n	800bb14 <_dtoa_r+0x944>
 800bad6:	9b00      	ldr	r3, [sp, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f47f aec0 	bne.w	800b85e <_dtoa_r+0x68e>
 800bade:	4621      	mov	r1, r4
 800bae0:	2205      	movs	r2, #5
 800bae2:	4658      	mov	r0, fp
 800bae4:	f000 fa9a 	bl	800c01c <__multadd>
 800bae8:	4601      	mov	r1, r0
 800baea:	4604      	mov	r4, r0
 800baec:	4648      	mov	r0, r9
 800baee:	f000 fcad 	bl	800c44c <__mcmp>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	f77f aeb3 	ble.w	800b85e <_dtoa_r+0x68e>
 800baf8:	4656      	mov	r6, sl
 800bafa:	2331      	movs	r3, #49	@ 0x31
 800bafc:	f806 3b01 	strb.w	r3, [r6], #1
 800bb00:	9b04      	ldr	r3, [sp, #16]
 800bb02:	3301      	adds	r3, #1
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	e6ae      	b.n	800b866 <_dtoa_r+0x696>
 800bb08:	9c07      	ldr	r4, [sp, #28]
 800bb0a:	9704      	str	r7, [sp, #16]
 800bb0c:	4625      	mov	r5, r4
 800bb0e:	e7f3      	b.n	800baf8 <_dtoa_r+0x928>
 800bb10:	9b07      	ldr	r3, [sp, #28]
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f000 8104 	beq.w	800bd24 <_dtoa_r+0xb54>
 800bb1c:	2e00      	cmp	r6, #0
 800bb1e:	dd05      	ble.n	800bb2c <_dtoa_r+0x95c>
 800bb20:	4629      	mov	r1, r5
 800bb22:	4632      	mov	r2, r6
 800bb24:	4658      	mov	r0, fp
 800bb26:	f000 fc25 	bl	800c374 <__lshift>
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d05a      	beq.n	800bbe8 <_dtoa_r+0xa18>
 800bb32:	6869      	ldr	r1, [r5, #4]
 800bb34:	4658      	mov	r0, fp
 800bb36:	f000 fa0f 	bl	800bf58 <_Balloc>
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	b928      	cbnz	r0, 800bb4a <_dtoa_r+0x97a>
 800bb3e:	4b84      	ldr	r3, [pc, #528]	@ (800bd50 <_dtoa_r+0xb80>)
 800bb40:	4602      	mov	r2, r0
 800bb42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb46:	f7ff bb5a 	b.w	800b1fe <_dtoa_r+0x2e>
 800bb4a:	692a      	ldr	r2, [r5, #16]
 800bb4c:	3202      	adds	r2, #2
 800bb4e:	0092      	lsls	r2, r2, #2
 800bb50:	f105 010c 	add.w	r1, r5, #12
 800bb54:	300c      	adds	r0, #12
 800bb56:	f000 ffaf 	bl	800cab8 <memcpy>
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4658      	mov	r0, fp
 800bb60:	f000 fc08 	bl	800c374 <__lshift>
 800bb64:	f10a 0301 	add.w	r3, sl, #1
 800bb68:	9307      	str	r3, [sp, #28]
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	4453      	add	r3, sl
 800bb6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	462f      	mov	r7, r5
 800bb78:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	9b07      	ldr	r3, [sp, #28]
 800bb7e:	4621      	mov	r1, r4
 800bb80:	3b01      	subs	r3, #1
 800bb82:	4648      	mov	r0, r9
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	f7ff fa9b 	bl	800b0c0 <quorem>
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	9002      	str	r0, [sp, #8]
 800bb8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb92:	4648      	mov	r0, r9
 800bb94:	f000 fc5a 	bl	800c44c <__mcmp>
 800bb98:	462a      	mov	r2, r5
 800bb9a:	9008      	str	r0, [sp, #32]
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	4658      	mov	r0, fp
 800bba0:	f000 fc70 	bl	800c484 <__mdiff>
 800bba4:	68c2      	ldr	r2, [r0, #12]
 800bba6:	4606      	mov	r6, r0
 800bba8:	bb02      	cbnz	r2, 800bbec <_dtoa_r+0xa1c>
 800bbaa:	4601      	mov	r1, r0
 800bbac:	4648      	mov	r0, r9
 800bbae:	f000 fc4d 	bl	800c44c <__mcmp>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	4658      	mov	r0, fp
 800bbb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbba:	f000 fa0d 	bl	800bfd8 <_Bfree>
 800bbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbc2:	9e07      	ldr	r6, [sp, #28]
 800bbc4:	ea43 0102 	orr.w	r1, r3, r2
 800bbc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbca:	4319      	orrs	r1, r3
 800bbcc:	d110      	bne.n	800bbf0 <_dtoa_r+0xa20>
 800bbce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbd2:	d029      	beq.n	800bc28 <_dtoa_r+0xa58>
 800bbd4:	9b08      	ldr	r3, [sp, #32]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	dd02      	ble.n	800bbe0 <_dtoa_r+0xa10>
 800bbda:	9b02      	ldr	r3, [sp, #8]
 800bbdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bbe0:	9b00      	ldr	r3, [sp, #0]
 800bbe2:	f883 8000 	strb.w	r8, [r3]
 800bbe6:	e63f      	b.n	800b868 <_dtoa_r+0x698>
 800bbe8:	4628      	mov	r0, r5
 800bbea:	e7bb      	b.n	800bb64 <_dtoa_r+0x994>
 800bbec:	2201      	movs	r2, #1
 800bbee:	e7e1      	b.n	800bbb4 <_dtoa_r+0x9e4>
 800bbf0:	9b08      	ldr	r3, [sp, #32]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	db04      	blt.n	800bc00 <_dtoa_r+0xa30>
 800bbf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbf8:	430b      	orrs	r3, r1
 800bbfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbfc:	430b      	orrs	r3, r1
 800bbfe:	d120      	bne.n	800bc42 <_dtoa_r+0xa72>
 800bc00:	2a00      	cmp	r2, #0
 800bc02:	dded      	ble.n	800bbe0 <_dtoa_r+0xa10>
 800bc04:	4649      	mov	r1, r9
 800bc06:	2201      	movs	r2, #1
 800bc08:	4658      	mov	r0, fp
 800bc0a:	f000 fbb3 	bl	800c374 <__lshift>
 800bc0e:	4621      	mov	r1, r4
 800bc10:	4681      	mov	r9, r0
 800bc12:	f000 fc1b 	bl	800c44c <__mcmp>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	dc03      	bgt.n	800bc22 <_dtoa_r+0xa52>
 800bc1a:	d1e1      	bne.n	800bbe0 <_dtoa_r+0xa10>
 800bc1c:	f018 0f01 	tst.w	r8, #1
 800bc20:	d0de      	beq.n	800bbe0 <_dtoa_r+0xa10>
 800bc22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc26:	d1d8      	bne.n	800bbda <_dtoa_r+0xa0a>
 800bc28:	9a00      	ldr	r2, [sp, #0]
 800bc2a:	2339      	movs	r3, #57	@ 0x39
 800bc2c:	7013      	strb	r3, [r2, #0]
 800bc2e:	4633      	mov	r3, r6
 800bc30:	461e      	mov	r6, r3
 800bc32:	3b01      	subs	r3, #1
 800bc34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc38:	2a39      	cmp	r2, #57	@ 0x39
 800bc3a:	d052      	beq.n	800bce2 <_dtoa_r+0xb12>
 800bc3c:	3201      	adds	r2, #1
 800bc3e:	701a      	strb	r2, [r3, #0]
 800bc40:	e612      	b.n	800b868 <_dtoa_r+0x698>
 800bc42:	2a00      	cmp	r2, #0
 800bc44:	dd07      	ble.n	800bc56 <_dtoa_r+0xa86>
 800bc46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc4a:	d0ed      	beq.n	800bc28 <_dtoa_r+0xa58>
 800bc4c:	9a00      	ldr	r2, [sp, #0]
 800bc4e:	f108 0301 	add.w	r3, r8, #1
 800bc52:	7013      	strb	r3, [r2, #0]
 800bc54:	e608      	b.n	800b868 <_dtoa_r+0x698>
 800bc56:	9b07      	ldr	r3, [sp, #28]
 800bc58:	9a07      	ldr	r2, [sp, #28]
 800bc5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d028      	beq.n	800bcb6 <_dtoa_r+0xae6>
 800bc64:	4649      	mov	r1, r9
 800bc66:	2300      	movs	r3, #0
 800bc68:	220a      	movs	r2, #10
 800bc6a:	4658      	mov	r0, fp
 800bc6c:	f000 f9d6 	bl	800c01c <__multadd>
 800bc70:	42af      	cmp	r7, r5
 800bc72:	4681      	mov	r9, r0
 800bc74:	f04f 0300 	mov.w	r3, #0
 800bc78:	f04f 020a 	mov.w	r2, #10
 800bc7c:	4639      	mov	r1, r7
 800bc7e:	4658      	mov	r0, fp
 800bc80:	d107      	bne.n	800bc92 <_dtoa_r+0xac2>
 800bc82:	f000 f9cb 	bl	800c01c <__multadd>
 800bc86:	4607      	mov	r7, r0
 800bc88:	4605      	mov	r5, r0
 800bc8a:	9b07      	ldr	r3, [sp, #28]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	9307      	str	r3, [sp, #28]
 800bc90:	e774      	b.n	800bb7c <_dtoa_r+0x9ac>
 800bc92:	f000 f9c3 	bl	800c01c <__multadd>
 800bc96:	4629      	mov	r1, r5
 800bc98:	4607      	mov	r7, r0
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	220a      	movs	r2, #10
 800bc9e:	4658      	mov	r0, fp
 800bca0:	f000 f9bc 	bl	800c01c <__multadd>
 800bca4:	4605      	mov	r5, r0
 800bca6:	e7f0      	b.n	800bc8a <_dtoa_r+0xaba>
 800bca8:	9b00      	ldr	r3, [sp, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	bfcc      	ite	gt
 800bcae:	461e      	movgt	r6, r3
 800bcb0:	2601      	movle	r6, #1
 800bcb2:	4456      	add	r6, sl
 800bcb4:	2700      	movs	r7, #0
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	2201      	movs	r2, #1
 800bcba:	4658      	mov	r0, fp
 800bcbc:	f000 fb5a 	bl	800c374 <__lshift>
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	4681      	mov	r9, r0
 800bcc4:	f000 fbc2 	bl	800c44c <__mcmp>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	dcb0      	bgt.n	800bc2e <_dtoa_r+0xa5e>
 800bccc:	d102      	bne.n	800bcd4 <_dtoa_r+0xb04>
 800bcce:	f018 0f01 	tst.w	r8, #1
 800bcd2:	d1ac      	bne.n	800bc2e <_dtoa_r+0xa5e>
 800bcd4:	4633      	mov	r3, r6
 800bcd6:	461e      	mov	r6, r3
 800bcd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcdc:	2a30      	cmp	r2, #48	@ 0x30
 800bcde:	d0fa      	beq.n	800bcd6 <_dtoa_r+0xb06>
 800bce0:	e5c2      	b.n	800b868 <_dtoa_r+0x698>
 800bce2:	459a      	cmp	sl, r3
 800bce4:	d1a4      	bne.n	800bc30 <_dtoa_r+0xa60>
 800bce6:	9b04      	ldr	r3, [sp, #16]
 800bce8:	3301      	adds	r3, #1
 800bcea:	9304      	str	r3, [sp, #16]
 800bcec:	2331      	movs	r3, #49	@ 0x31
 800bcee:	f88a 3000 	strb.w	r3, [sl]
 800bcf2:	e5b9      	b.n	800b868 <_dtoa_r+0x698>
 800bcf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd54 <_dtoa_r+0xb84>
 800bcfa:	b11b      	cbz	r3, 800bd04 <_dtoa_r+0xb34>
 800bcfc:	f10a 0308 	add.w	r3, sl, #8
 800bd00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	4650      	mov	r0, sl
 800bd06:	b019      	add	sp, #100	@ 0x64
 800bd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	f77f ae37 	ble.w	800b982 <_dtoa_r+0x7b2>
 800bd14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd16:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd18:	2001      	movs	r0, #1
 800bd1a:	e655      	b.n	800b9c8 <_dtoa_r+0x7f8>
 800bd1c:	9b00      	ldr	r3, [sp, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f77f aed6 	ble.w	800bad0 <_dtoa_r+0x900>
 800bd24:	4656      	mov	r6, sl
 800bd26:	4621      	mov	r1, r4
 800bd28:	4648      	mov	r0, r9
 800bd2a:	f7ff f9c9 	bl	800b0c0 <quorem>
 800bd2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd32:	f806 8b01 	strb.w	r8, [r6], #1
 800bd36:	9b00      	ldr	r3, [sp, #0]
 800bd38:	eba6 020a 	sub.w	r2, r6, sl
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	ddb3      	ble.n	800bca8 <_dtoa_r+0xad8>
 800bd40:	4649      	mov	r1, r9
 800bd42:	2300      	movs	r3, #0
 800bd44:	220a      	movs	r2, #10
 800bd46:	4658      	mov	r0, fp
 800bd48:	f000 f968 	bl	800c01c <__multadd>
 800bd4c:	4681      	mov	r9, r0
 800bd4e:	e7ea      	b.n	800bd26 <_dtoa_r+0xb56>
 800bd50:	0800e918 	.word	0x0800e918
 800bd54:	0800e89c 	.word	0x0800e89c

0800bd58 <_free_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	2900      	cmp	r1, #0
 800bd5e:	d041      	beq.n	800bde4 <_free_r+0x8c>
 800bd60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd64:	1f0c      	subs	r4, r1, #4
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	bfb8      	it	lt
 800bd6a:	18e4      	addlt	r4, r4, r3
 800bd6c:	f000 f8e8 	bl	800bf40 <__malloc_lock>
 800bd70:	4a1d      	ldr	r2, [pc, #116]	@ (800bde8 <_free_r+0x90>)
 800bd72:	6813      	ldr	r3, [r2, #0]
 800bd74:	b933      	cbnz	r3, 800bd84 <_free_r+0x2c>
 800bd76:	6063      	str	r3, [r4, #4]
 800bd78:	6014      	str	r4, [r2, #0]
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd80:	f000 b8e4 	b.w	800bf4c <__malloc_unlock>
 800bd84:	42a3      	cmp	r3, r4
 800bd86:	d908      	bls.n	800bd9a <_free_r+0x42>
 800bd88:	6820      	ldr	r0, [r4, #0]
 800bd8a:	1821      	adds	r1, r4, r0
 800bd8c:	428b      	cmp	r3, r1
 800bd8e:	bf01      	itttt	eq
 800bd90:	6819      	ldreq	r1, [r3, #0]
 800bd92:	685b      	ldreq	r3, [r3, #4]
 800bd94:	1809      	addeq	r1, r1, r0
 800bd96:	6021      	streq	r1, [r4, #0]
 800bd98:	e7ed      	b.n	800bd76 <_free_r+0x1e>
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	b10b      	cbz	r3, 800bda4 <_free_r+0x4c>
 800bda0:	42a3      	cmp	r3, r4
 800bda2:	d9fa      	bls.n	800bd9a <_free_r+0x42>
 800bda4:	6811      	ldr	r1, [r2, #0]
 800bda6:	1850      	adds	r0, r2, r1
 800bda8:	42a0      	cmp	r0, r4
 800bdaa:	d10b      	bne.n	800bdc4 <_free_r+0x6c>
 800bdac:	6820      	ldr	r0, [r4, #0]
 800bdae:	4401      	add	r1, r0
 800bdb0:	1850      	adds	r0, r2, r1
 800bdb2:	4283      	cmp	r3, r0
 800bdb4:	6011      	str	r1, [r2, #0]
 800bdb6:	d1e0      	bne.n	800bd7a <_free_r+0x22>
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	6053      	str	r3, [r2, #4]
 800bdbe:	4408      	add	r0, r1
 800bdc0:	6010      	str	r0, [r2, #0]
 800bdc2:	e7da      	b.n	800bd7a <_free_r+0x22>
 800bdc4:	d902      	bls.n	800bdcc <_free_r+0x74>
 800bdc6:	230c      	movs	r3, #12
 800bdc8:	602b      	str	r3, [r5, #0]
 800bdca:	e7d6      	b.n	800bd7a <_free_r+0x22>
 800bdcc:	6820      	ldr	r0, [r4, #0]
 800bdce:	1821      	adds	r1, r4, r0
 800bdd0:	428b      	cmp	r3, r1
 800bdd2:	bf04      	itt	eq
 800bdd4:	6819      	ldreq	r1, [r3, #0]
 800bdd6:	685b      	ldreq	r3, [r3, #4]
 800bdd8:	6063      	str	r3, [r4, #4]
 800bdda:	bf04      	itt	eq
 800bddc:	1809      	addeq	r1, r1, r0
 800bdde:	6021      	streq	r1, [r4, #0]
 800bde0:	6054      	str	r4, [r2, #4]
 800bde2:	e7ca      	b.n	800bd7a <_free_r+0x22>
 800bde4:	bd38      	pop	{r3, r4, r5, pc}
 800bde6:	bf00      	nop
 800bde8:	20002258 	.word	0x20002258

0800bdec <malloc>:
 800bdec:	4b02      	ldr	r3, [pc, #8]	@ (800bdf8 <malloc+0xc>)
 800bdee:	4601      	mov	r1, r0
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	f000 b825 	b.w	800be40 <_malloc_r>
 800bdf6:	bf00      	nop
 800bdf8:	20000118 	.word	0x20000118

0800bdfc <sbrk_aligned>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	4e0f      	ldr	r6, [pc, #60]	@ (800be3c <sbrk_aligned+0x40>)
 800be00:	460c      	mov	r4, r1
 800be02:	6831      	ldr	r1, [r6, #0]
 800be04:	4605      	mov	r5, r0
 800be06:	b911      	cbnz	r1, 800be0e <sbrk_aligned+0x12>
 800be08:	f000 fe46 	bl	800ca98 <_sbrk_r>
 800be0c:	6030      	str	r0, [r6, #0]
 800be0e:	4621      	mov	r1, r4
 800be10:	4628      	mov	r0, r5
 800be12:	f000 fe41 	bl	800ca98 <_sbrk_r>
 800be16:	1c43      	adds	r3, r0, #1
 800be18:	d103      	bne.n	800be22 <sbrk_aligned+0x26>
 800be1a:	f04f 34ff 	mov.w	r4, #4294967295
 800be1e:	4620      	mov	r0, r4
 800be20:	bd70      	pop	{r4, r5, r6, pc}
 800be22:	1cc4      	adds	r4, r0, #3
 800be24:	f024 0403 	bic.w	r4, r4, #3
 800be28:	42a0      	cmp	r0, r4
 800be2a:	d0f8      	beq.n	800be1e <sbrk_aligned+0x22>
 800be2c:	1a21      	subs	r1, r4, r0
 800be2e:	4628      	mov	r0, r5
 800be30:	f000 fe32 	bl	800ca98 <_sbrk_r>
 800be34:	3001      	adds	r0, #1
 800be36:	d1f2      	bne.n	800be1e <sbrk_aligned+0x22>
 800be38:	e7ef      	b.n	800be1a <sbrk_aligned+0x1e>
 800be3a:	bf00      	nop
 800be3c:	20002254 	.word	0x20002254

0800be40 <_malloc_r>:
 800be40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be44:	1ccd      	adds	r5, r1, #3
 800be46:	f025 0503 	bic.w	r5, r5, #3
 800be4a:	3508      	adds	r5, #8
 800be4c:	2d0c      	cmp	r5, #12
 800be4e:	bf38      	it	cc
 800be50:	250c      	movcc	r5, #12
 800be52:	2d00      	cmp	r5, #0
 800be54:	4606      	mov	r6, r0
 800be56:	db01      	blt.n	800be5c <_malloc_r+0x1c>
 800be58:	42a9      	cmp	r1, r5
 800be5a:	d904      	bls.n	800be66 <_malloc_r+0x26>
 800be5c:	230c      	movs	r3, #12
 800be5e:	6033      	str	r3, [r6, #0]
 800be60:	2000      	movs	r0, #0
 800be62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf3c <_malloc_r+0xfc>
 800be6a:	f000 f869 	bl	800bf40 <__malloc_lock>
 800be6e:	f8d8 3000 	ldr.w	r3, [r8]
 800be72:	461c      	mov	r4, r3
 800be74:	bb44      	cbnz	r4, 800bec8 <_malloc_r+0x88>
 800be76:	4629      	mov	r1, r5
 800be78:	4630      	mov	r0, r6
 800be7a:	f7ff ffbf 	bl	800bdfc <sbrk_aligned>
 800be7e:	1c43      	adds	r3, r0, #1
 800be80:	4604      	mov	r4, r0
 800be82:	d158      	bne.n	800bf36 <_malloc_r+0xf6>
 800be84:	f8d8 4000 	ldr.w	r4, [r8]
 800be88:	4627      	mov	r7, r4
 800be8a:	2f00      	cmp	r7, #0
 800be8c:	d143      	bne.n	800bf16 <_malloc_r+0xd6>
 800be8e:	2c00      	cmp	r4, #0
 800be90:	d04b      	beq.n	800bf2a <_malloc_r+0xea>
 800be92:	6823      	ldr	r3, [r4, #0]
 800be94:	4639      	mov	r1, r7
 800be96:	4630      	mov	r0, r6
 800be98:	eb04 0903 	add.w	r9, r4, r3
 800be9c:	f000 fdfc 	bl	800ca98 <_sbrk_r>
 800bea0:	4581      	cmp	r9, r0
 800bea2:	d142      	bne.n	800bf2a <_malloc_r+0xea>
 800bea4:	6821      	ldr	r1, [r4, #0]
 800bea6:	1a6d      	subs	r5, r5, r1
 800bea8:	4629      	mov	r1, r5
 800beaa:	4630      	mov	r0, r6
 800beac:	f7ff ffa6 	bl	800bdfc <sbrk_aligned>
 800beb0:	3001      	adds	r0, #1
 800beb2:	d03a      	beq.n	800bf2a <_malloc_r+0xea>
 800beb4:	6823      	ldr	r3, [r4, #0]
 800beb6:	442b      	add	r3, r5
 800beb8:	6023      	str	r3, [r4, #0]
 800beba:	f8d8 3000 	ldr.w	r3, [r8]
 800bebe:	685a      	ldr	r2, [r3, #4]
 800bec0:	bb62      	cbnz	r2, 800bf1c <_malloc_r+0xdc>
 800bec2:	f8c8 7000 	str.w	r7, [r8]
 800bec6:	e00f      	b.n	800bee8 <_malloc_r+0xa8>
 800bec8:	6822      	ldr	r2, [r4, #0]
 800beca:	1b52      	subs	r2, r2, r5
 800becc:	d420      	bmi.n	800bf10 <_malloc_r+0xd0>
 800bece:	2a0b      	cmp	r2, #11
 800bed0:	d917      	bls.n	800bf02 <_malloc_r+0xc2>
 800bed2:	1961      	adds	r1, r4, r5
 800bed4:	42a3      	cmp	r3, r4
 800bed6:	6025      	str	r5, [r4, #0]
 800bed8:	bf18      	it	ne
 800beda:	6059      	strne	r1, [r3, #4]
 800bedc:	6863      	ldr	r3, [r4, #4]
 800bede:	bf08      	it	eq
 800bee0:	f8c8 1000 	streq.w	r1, [r8]
 800bee4:	5162      	str	r2, [r4, r5]
 800bee6:	604b      	str	r3, [r1, #4]
 800bee8:	4630      	mov	r0, r6
 800beea:	f000 f82f 	bl	800bf4c <__malloc_unlock>
 800beee:	f104 000b 	add.w	r0, r4, #11
 800bef2:	1d23      	adds	r3, r4, #4
 800bef4:	f020 0007 	bic.w	r0, r0, #7
 800bef8:	1ac2      	subs	r2, r0, r3
 800befa:	bf1c      	itt	ne
 800befc:	1a1b      	subne	r3, r3, r0
 800befe:	50a3      	strne	r3, [r4, r2]
 800bf00:	e7af      	b.n	800be62 <_malloc_r+0x22>
 800bf02:	6862      	ldr	r2, [r4, #4]
 800bf04:	42a3      	cmp	r3, r4
 800bf06:	bf0c      	ite	eq
 800bf08:	f8c8 2000 	streq.w	r2, [r8]
 800bf0c:	605a      	strne	r2, [r3, #4]
 800bf0e:	e7eb      	b.n	800bee8 <_malloc_r+0xa8>
 800bf10:	4623      	mov	r3, r4
 800bf12:	6864      	ldr	r4, [r4, #4]
 800bf14:	e7ae      	b.n	800be74 <_malloc_r+0x34>
 800bf16:	463c      	mov	r4, r7
 800bf18:	687f      	ldr	r7, [r7, #4]
 800bf1a:	e7b6      	b.n	800be8a <_malloc_r+0x4a>
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	42a3      	cmp	r3, r4
 800bf22:	d1fb      	bne.n	800bf1c <_malloc_r+0xdc>
 800bf24:	2300      	movs	r3, #0
 800bf26:	6053      	str	r3, [r2, #4]
 800bf28:	e7de      	b.n	800bee8 <_malloc_r+0xa8>
 800bf2a:	230c      	movs	r3, #12
 800bf2c:	6033      	str	r3, [r6, #0]
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f000 f80c 	bl	800bf4c <__malloc_unlock>
 800bf34:	e794      	b.n	800be60 <_malloc_r+0x20>
 800bf36:	6005      	str	r5, [r0, #0]
 800bf38:	e7d6      	b.n	800bee8 <_malloc_r+0xa8>
 800bf3a:	bf00      	nop
 800bf3c:	20002258 	.word	0x20002258

0800bf40 <__malloc_lock>:
 800bf40:	4801      	ldr	r0, [pc, #4]	@ (800bf48 <__malloc_lock+0x8>)
 800bf42:	f7ff b8aa 	b.w	800b09a <__retarget_lock_acquire_recursive>
 800bf46:	bf00      	nop
 800bf48:	20002250 	.word	0x20002250

0800bf4c <__malloc_unlock>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	@ (800bf54 <__malloc_unlock+0x8>)
 800bf4e:	f7ff b8a5 	b.w	800b09c <__retarget_lock_release_recursive>
 800bf52:	bf00      	nop
 800bf54:	20002250 	.word	0x20002250

0800bf58 <_Balloc>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	69c6      	ldr	r6, [r0, #28]
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	460d      	mov	r5, r1
 800bf60:	b976      	cbnz	r6, 800bf80 <_Balloc+0x28>
 800bf62:	2010      	movs	r0, #16
 800bf64:	f7ff ff42 	bl	800bdec <malloc>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	61e0      	str	r0, [r4, #28]
 800bf6c:	b920      	cbnz	r0, 800bf78 <_Balloc+0x20>
 800bf6e:	4b18      	ldr	r3, [pc, #96]	@ (800bfd0 <_Balloc+0x78>)
 800bf70:	4818      	ldr	r0, [pc, #96]	@ (800bfd4 <_Balloc+0x7c>)
 800bf72:	216b      	movs	r1, #107	@ 0x6b
 800bf74:	f000 fdae 	bl	800cad4 <__assert_func>
 800bf78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf7c:	6006      	str	r6, [r0, #0]
 800bf7e:	60c6      	str	r6, [r0, #12]
 800bf80:	69e6      	ldr	r6, [r4, #28]
 800bf82:	68f3      	ldr	r3, [r6, #12]
 800bf84:	b183      	cbz	r3, 800bfa8 <_Balloc+0x50>
 800bf86:	69e3      	ldr	r3, [r4, #28]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf8e:	b9b8      	cbnz	r0, 800bfc0 <_Balloc+0x68>
 800bf90:	2101      	movs	r1, #1
 800bf92:	fa01 f605 	lsl.w	r6, r1, r5
 800bf96:	1d72      	adds	r2, r6, #5
 800bf98:	0092      	lsls	r2, r2, #2
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 fdb8 	bl	800cb10 <_calloc_r>
 800bfa0:	b160      	cbz	r0, 800bfbc <_Balloc+0x64>
 800bfa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfa6:	e00e      	b.n	800bfc6 <_Balloc+0x6e>
 800bfa8:	2221      	movs	r2, #33	@ 0x21
 800bfaa:	2104      	movs	r1, #4
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fdaf 	bl	800cb10 <_calloc_r>
 800bfb2:	69e3      	ldr	r3, [r4, #28]
 800bfb4:	60f0      	str	r0, [r6, #12]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e4      	bne.n	800bf86 <_Balloc+0x2e>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	bd70      	pop	{r4, r5, r6, pc}
 800bfc0:	6802      	ldr	r2, [r0, #0]
 800bfc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfcc:	e7f7      	b.n	800bfbe <_Balloc+0x66>
 800bfce:	bf00      	nop
 800bfd0:	0800e8a9 	.word	0x0800e8a9
 800bfd4:	0800e929 	.word	0x0800e929

0800bfd8 <_Bfree>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	69c6      	ldr	r6, [r0, #28]
 800bfdc:	4605      	mov	r5, r0
 800bfde:	460c      	mov	r4, r1
 800bfe0:	b976      	cbnz	r6, 800c000 <_Bfree+0x28>
 800bfe2:	2010      	movs	r0, #16
 800bfe4:	f7ff ff02 	bl	800bdec <malloc>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	61e8      	str	r0, [r5, #28]
 800bfec:	b920      	cbnz	r0, 800bff8 <_Bfree+0x20>
 800bfee:	4b09      	ldr	r3, [pc, #36]	@ (800c014 <_Bfree+0x3c>)
 800bff0:	4809      	ldr	r0, [pc, #36]	@ (800c018 <_Bfree+0x40>)
 800bff2:	218f      	movs	r1, #143	@ 0x8f
 800bff4:	f000 fd6e 	bl	800cad4 <__assert_func>
 800bff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bffc:	6006      	str	r6, [r0, #0]
 800bffe:	60c6      	str	r6, [r0, #12]
 800c000:	b13c      	cbz	r4, 800c012 <_Bfree+0x3a>
 800c002:	69eb      	ldr	r3, [r5, #28]
 800c004:	6862      	ldr	r2, [r4, #4]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c00c:	6021      	str	r1, [r4, #0]
 800c00e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c012:	bd70      	pop	{r4, r5, r6, pc}
 800c014:	0800e8a9 	.word	0x0800e8a9
 800c018:	0800e929 	.word	0x0800e929

0800c01c <__multadd>:
 800c01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c020:	690d      	ldr	r5, [r1, #16]
 800c022:	4607      	mov	r7, r0
 800c024:	460c      	mov	r4, r1
 800c026:	461e      	mov	r6, r3
 800c028:	f101 0c14 	add.w	ip, r1, #20
 800c02c:	2000      	movs	r0, #0
 800c02e:	f8dc 3000 	ldr.w	r3, [ip]
 800c032:	b299      	uxth	r1, r3
 800c034:	fb02 6101 	mla	r1, r2, r1, r6
 800c038:	0c1e      	lsrs	r6, r3, #16
 800c03a:	0c0b      	lsrs	r3, r1, #16
 800c03c:	fb02 3306 	mla	r3, r2, r6, r3
 800c040:	b289      	uxth	r1, r1
 800c042:	3001      	adds	r0, #1
 800c044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c048:	4285      	cmp	r5, r0
 800c04a:	f84c 1b04 	str.w	r1, [ip], #4
 800c04e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c052:	dcec      	bgt.n	800c02e <__multadd+0x12>
 800c054:	b30e      	cbz	r6, 800c09a <__multadd+0x7e>
 800c056:	68a3      	ldr	r3, [r4, #8]
 800c058:	42ab      	cmp	r3, r5
 800c05a:	dc19      	bgt.n	800c090 <__multadd+0x74>
 800c05c:	6861      	ldr	r1, [r4, #4]
 800c05e:	4638      	mov	r0, r7
 800c060:	3101      	adds	r1, #1
 800c062:	f7ff ff79 	bl	800bf58 <_Balloc>
 800c066:	4680      	mov	r8, r0
 800c068:	b928      	cbnz	r0, 800c076 <__multadd+0x5a>
 800c06a:	4602      	mov	r2, r0
 800c06c:	4b0c      	ldr	r3, [pc, #48]	@ (800c0a0 <__multadd+0x84>)
 800c06e:	480d      	ldr	r0, [pc, #52]	@ (800c0a4 <__multadd+0x88>)
 800c070:	21ba      	movs	r1, #186	@ 0xba
 800c072:	f000 fd2f 	bl	800cad4 <__assert_func>
 800c076:	6922      	ldr	r2, [r4, #16]
 800c078:	3202      	adds	r2, #2
 800c07a:	f104 010c 	add.w	r1, r4, #12
 800c07e:	0092      	lsls	r2, r2, #2
 800c080:	300c      	adds	r0, #12
 800c082:	f000 fd19 	bl	800cab8 <memcpy>
 800c086:	4621      	mov	r1, r4
 800c088:	4638      	mov	r0, r7
 800c08a:	f7ff ffa5 	bl	800bfd8 <_Bfree>
 800c08e:	4644      	mov	r4, r8
 800c090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c094:	3501      	adds	r5, #1
 800c096:	615e      	str	r6, [r3, #20]
 800c098:	6125      	str	r5, [r4, #16]
 800c09a:	4620      	mov	r0, r4
 800c09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0a0:	0800e918 	.word	0x0800e918
 800c0a4:	0800e929 	.word	0x0800e929

0800c0a8 <__hi0bits>:
 800c0a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	bf36      	itet	cc
 800c0b0:	0403      	lslcc	r3, r0, #16
 800c0b2:	2000      	movcs	r0, #0
 800c0b4:	2010      	movcc	r0, #16
 800c0b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0ba:	bf3c      	itt	cc
 800c0bc:	021b      	lslcc	r3, r3, #8
 800c0be:	3008      	addcc	r0, #8
 800c0c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0c4:	bf3c      	itt	cc
 800c0c6:	011b      	lslcc	r3, r3, #4
 800c0c8:	3004      	addcc	r0, #4
 800c0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ce:	bf3c      	itt	cc
 800c0d0:	009b      	lslcc	r3, r3, #2
 800c0d2:	3002      	addcc	r0, #2
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	db05      	blt.n	800c0e4 <__hi0bits+0x3c>
 800c0d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0dc:	f100 0001 	add.w	r0, r0, #1
 800c0e0:	bf08      	it	eq
 800c0e2:	2020      	moveq	r0, #32
 800c0e4:	4770      	bx	lr

0800c0e6 <__lo0bits>:
 800c0e6:	6803      	ldr	r3, [r0, #0]
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	f013 0007 	ands.w	r0, r3, #7
 800c0ee:	d00b      	beq.n	800c108 <__lo0bits+0x22>
 800c0f0:	07d9      	lsls	r1, r3, #31
 800c0f2:	d421      	bmi.n	800c138 <__lo0bits+0x52>
 800c0f4:	0798      	lsls	r0, r3, #30
 800c0f6:	bf49      	itett	mi
 800c0f8:	085b      	lsrmi	r3, r3, #1
 800c0fa:	089b      	lsrpl	r3, r3, #2
 800c0fc:	2001      	movmi	r0, #1
 800c0fe:	6013      	strmi	r3, [r2, #0]
 800c100:	bf5c      	itt	pl
 800c102:	6013      	strpl	r3, [r2, #0]
 800c104:	2002      	movpl	r0, #2
 800c106:	4770      	bx	lr
 800c108:	b299      	uxth	r1, r3
 800c10a:	b909      	cbnz	r1, 800c110 <__lo0bits+0x2a>
 800c10c:	0c1b      	lsrs	r3, r3, #16
 800c10e:	2010      	movs	r0, #16
 800c110:	b2d9      	uxtb	r1, r3
 800c112:	b909      	cbnz	r1, 800c118 <__lo0bits+0x32>
 800c114:	3008      	adds	r0, #8
 800c116:	0a1b      	lsrs	r3, r3, #8
 800c118:	0719      	lsls	r1, r3, #28
 800c11a:	bf04      	itt	eq
 800c11c:	091b      	lsreq	r3, r3, #4
 800c11e:	3004      	addeq	r0, #4
 800c120:	0799      	lsls	r1, r3, #30
 800c122:	bf04      	itt	eq
 800c124:	089b      	lsreq	r3, r3, #2
 800c126:	3002      	addeq	r0, #2
 800c128:	07d9      	lsls	r1, r3, #31
 800c12a:	d403      	bmi.n	800c134 <__lo0bits+0x4e>
 800c12c:	085b      	lsrs	r3, r3, #1
 800c12e:	f100 0001 	add.w	r0, r0, #1
 800c132:	d003      	beq.n	800c13c <__lo0bits+0x56>
 800c134:	6013      	str	r3, [r2, #0]
 800c136:	4770      	bx	lr
 800c138:	2000      	movs	r0, #0
 800c13a:	4770      	bx	lr
 800c13c:	2020      	movs	r0, #32
 800c13e:	4770      	bx	lr

0800c140 <__i2b>:
 800c140:	b510      	push	{r4, lr}
 800c142:	460c      	mov	r4, r1
 800c144:	2101      	movs	r1, #1
 800c146:	f7ff ff07 	bl	800bf58 <_Balloc>
 800c14a:	4602      	mov	r2, r0
 800c14c:	b928      	cbnz	r0, 800c15a <__i2b+0x1a>
 800c14e:	4b05      	ldr	r3, [pc, #20]	@ (800c164 <__i2b+0x24>)
 800c150:	4805      	ldr	r0, [pc, #20]	@ (800c168 <__i2b+0x28>)
 800c152:	f240 1145 	movw	r1, #325	@ 0x145
 800c156:	f000 fcbd 	bl	800cad4 <__assert_func>
 800c15a:	2301      	movs	r3, #1
 800c15c:	6144      	str	r4, [r0, #20]
 800c15e:	6103      	str	r3, [r0, #16]
 800c160:	bd10      	pop	{r4, pc}
 800c162:	bf00      	nop
 800c164:	0800e918 	.word	0x0800e918
 800c168:	0800e929 	.word	0x0800e929

0800c16c <__multiply>:
 800c16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	4614      	mov	r4, r2
 800c172:	690a      	ldr	r2, [r1, #16]
 800c174:	6923      	ldr	r3, [r4, #16]
 800c176:	429a      	cmp	r2, r3
 800c178:	bfa8      	it	ge
 800c17a:	4623      	movge	r3, r4
 800c17c:	460f      	mov	r7, r1
 800c17e:	bfa4      	itt	ge
 800c180:	460c      	movge	r4, r1
 800c182:	461f      	movge	r7, r3
 800c184:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c188:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c18c:	68a3      	ldr	r3, [r4, #8]
 800c18e:	6861      	ldr	r1, [r4, #4]
 800c190:	eb0a 0609 	add.w	r6, sl, r9
 800c194:	42b3      	cmp	r3, r6
 800c196:	b085      	sub	sp, #20
 800c198:	bfb8      	it	lt
 800c19a:	3101      	addlt	r1, #1
 800c19c:	f7ff fedc 	bl	800bf58 <_Balloc>
 800c1a0:	b930      	cbnz	r0, 800c1b0 <__multiply+0x44>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	4b44      	ldr	r3, [pc, #272]	@ (800c2b8 <__multiply+0x14c>)
 800c1a6:	4845      	ldr	r0, [pc, #276]	@ (800c2bc <__multiply+0x150>)
 800c1a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1ac:	f000 fc92 	bl	800cad4 <__assert_func>
 800c1b0:	f100 0514 	add.w	r5, r0, #20
 800c1b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1b8:	462b      	mov	r3, r5
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	4543      	cmp	r3, r8
 800c1be:	d321      	bcc.n	800c204 <__multiply+0x98>
 800c1c0:	f107 0114 	add.w	r1, r7, #20
 800c1c4:	f104 0214 	add.w	r2, r4, #20
 800c1c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c1cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c1d0:	9302      	str	r3, [sp, #8]
 800c1d2:	1b13      	subs	r3, r2, r4
 800c1d4:	3b15      	subs	r3, #21
 800c1d6:	f023 0303 	bic.w	r3, r3, #3
 800c1da:	3304      	adds	r3, #4
 800c1dc:	f104 0715 	add.w	r7, r4, #21
 800c1e0:	42ba      	cmp	r2, r7
 800c1e2:	bf38      	it	cc
 800c1e4:	2304      	movcc	r3, #4
 800c1e6:	9301      	str	r3, [sp, #4]
 800c1e8:	9b02      	ldr	r3, [sp, #8]
 800c1ea:	9103      	str	r1, [sp, #12]
 800c1ec:	428b      	cmp	r3, r1
 800c1ee:	d80c      	bhi.n	800c20a <__multiply+0x9e>
 800c1f0:	2e00      	cmp	r6, #0
 800c1f2:	dd03      	ble.n	800c1fc <__multiply+0x90>
 800c1f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d05b      	beq.n	800c2b4 <__multiply+0x148>
 800c1fc:	6106      	str	r6, [r0, #16]
 800c1fe:	b005      	add	sp, #20
 800c200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c204:	f843 2b04 	str.w	r2, [r3], #4
 800c208:	e7d8      	b.n	800c1bc <__multiply+0x50>
 800c20a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c20e:	f1ba 0f00 	cmp.w	sl, #0
 800c212:	d024      	beq.n	800c25e <__multiply+0xf2>
 800c214:	f104 0e14 	add.w	lr, r4, #20
 800c218:	46a9      	mov	r9, r5
 800c21a:	f04f 0c00 	mov.w	ip, #0
 800c21e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c222:	f8d9 3000 	ldr.w	r3, [r9]
 800c226:	fa1f fb87 	uxth.w	fp, r7
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c230:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c234:	f8d9 7000 	ldr.w	r7, [r9]
 800c238:	4463      	add	r3, ip
 800c23a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c23e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c242:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c246:	b29b      	uxth	r3, r3
 800c248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c24c:	4572      	cmp	r2, lr
 800c24e:	f849 3b04 	str.w	r3, [r9], #4
 800c252:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c256:	d8e2      	bhi.n	800c21e <__multiply+0xb2>
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	f845 c003 	str.w	ip, [r5, r3]
 800c25e:	9b03      	ldr	r3, [sp, #12]
 800c260:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c264:	3104      	adds	r1, #4
 800c266:	f1b9 0f00 	cmp.w	r9, #0
 800c26a:	d021      	beq.n	800c2b0 <__multiply+0x144>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	f104 0c14 	add.w	ip, r4, #20
 800c272:	46ae      	mov	lr, r5
 800c274:	f04f 0a00 	mov.w	sl, #0
 800c278:	f8bc b000 	ldrh.w	fp, [ip]
 800c27c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c280:	fb09 770b 	mla	r7, r9, fp, r7
 800c284:	4457      	add	r7, sl
 800c286:	b29b      	uxth	r3, r3
 800c288:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c28c:	f84e 3b04 	str.w	r3, [lr], #4
 800c290:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c298:	f8be 3000 	ldrh.w	r3, [lr]
 800c29c:	fb09 330a 	mla	r3, r9, sl, r3
 800c2a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c2a4:	4562      	cmp	r2, ip
 800c2a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2aa:	d8e5      	bhi.n	800c278 <__multiply+0x10c>
 800c2ac:	9f01      	ldr	r7, [sp, #4]
 800c2ae:	51eb      	str	r3, [r5, r7]
 800c2b0:	3504      	adds	r5, #4
 800c2b2:	e799      	b.n	800c1e8 <__multiply+0x7c>
 800c2b4:	3e01      	subs	r6, #1
 800c2b6:	e79b      	b.n	800c1f0 <__multiply+0x84>
 800c2b8:	0800e918 	.word	0x0800e918
 800c2bc:	0800e929 	.word	0x0800e929

0800c2c0 <__pow5mult>:
 800c2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	4615      	mov	r5, r2
 800c2c6:	f012 0203 	ands.w	r2, r2, #3
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	460e      	mov	r6, r1
 800c2ce:	d007      	beq.n	800c2e0 <__pow5mult+0x20>
 800c2d0:	4c25      	ldr	r4, [pc, #148]	@ (800c368 <__pow5mult+0xa8>)
 800c2d2:	3a01      	subs	r2, #1
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2da:	f7ff fe9f 	bl	800c01c <__multadd>
 800c2de:	4606      	mov	r6, r0
 800c2e0:	10ad      	asrs	r5, r5, #2
 800c2e2:	d03d      	beq.n	800c360 <__pow5mult+0xa0>
 800c2e4:	69fc      	ldr	r4, [r7, #28]
 800c2e6:	b97c      	cbnz	r4, 800c308 <__pow5mult+0x48>
 800c2e8:	2010      	movs	r0, #16
 800c2ea:	f7ff fd7f 	bl	800bdec <malloc>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	61f8      	str	r0, [r7, #28]
 800c2f2:	b928      	cbnz	r0, 800c300 <__pow5mult+0x40>
 800c2f4:	4b1d      	ldr	r3, [pc, #116]	@ (800c36c <__pow5mult+0xac>)
 800c2f6:	481e      	ldr	r0, [pc, #120]	@ (800c370 <__pow5mult+0xb0>)
 800c2f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2fc:	f000 fbea 	bl	800cad4 <__assert_func>
 800c300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c304:	6004      	str	r4, [r0, #0]
 800c306:	60c4      	str	r4, [r0, #12]
 800c308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c30c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c310:	b94c      	cbnz	r4, 800c326 <__pow5mult+0x66>
 800c312:	f240 2171 	movw	r1, #625	@ 0x271
 800c316:	4638      	mov	r0, r7
 800c318:	f7ff ff12 	bl	800c140 <__i2b>
 800c31c:	2300      	movs	r3, #0
 800c31e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c322:	4604      	mov	r4, r0
 800c324:	6003      	str	r3, [r0, #0]
 800c326:	f04f 0900 	mov.w	r9, #0
 800c32a:	07eb      	lsls	r3, r5, #31
 800c32c:	d50a      	bpl.n	800c344 <__pow5mult+0x84>
 800c32e:	4631      	mov	r1, r6
 800c330:	4622      	mov	r2, r4
 800c332:	4638      	mov	r0, r7
 800c334:	f7ff ff1a 	bl	800c16c <__multiply>
 800c338:	4631      	mov	r1, r6
 800c33a:	4680      	mov	r8, r0
 800c33c:	4638      	mov	r0, r7
 800c33e:	f7ff fe4b 	bl	800bfd8 <_Bfree>
 800c342:	4646      	mov	r6, r8
 800c344:	106d      	asrs	r5, r5, #1
 800c346:	d00b      	beq.n	800c360 <__pow5mult+0xa0>
 800c348:	6820      	ldr	r0, [r4, #0]
 800c34a:	b938      	cbnz	r0, 800c35c <__pow5mult+0x9c>
 800c34c:	4622      	mov	r2, r4
 800c34e:	4621      	mov	r1, r4
 800c350:	4638      	mov	r0, r7
 800c352:	f7ff ff0b 	bl	800c16c <__multiply>
 800c356:	6020      	str	r0, [r4, #0]
 800c358:	f8c0 9000 	str.w	r9, [r0]
 800c35c:	4604      	mov	r4, r0
 800c35e:	e7e4      	b.n	800c32a <__pow5mult+0x6a>
 800c360:	4630      	mov	r0, r6
 800c362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c366:	bf00      	nop
 800c368:	0800e984 	.word	0x0800e984
 800c36c:	0800e8a9 	.word	0x0800e8a9
 800c370:	0800e929 	.word	0x0800e929

0800c374 <__lshift>:
 800c374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c378:	460c      	mov	r4, r1
 800c37a:	6849      	ldr	r1, [r1, #4]
 800c37c:	6923      	ldr	r3, [r4, #16]
 800c37e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c382:	68a3      	ldr	r3, [r4, #8]
 800c384:	4607      	mov	r7, r0
 800c386:	4691      	mov	r9, r2
 800c388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c38c:	f108 0601 	add.w	r6, r8, #1
 800c390:	42b3      	cmp	r3, r6
 800c392:	db0b      	blt.n	800c3ac <__lshift+0x38>
 800c394:	4638      	mov	r0, r7
 800c396:	f7ff fddf 	bl	800bf58 <_Balloc>
 800c39a:	4605      	mov	r5, r0
 800c39c:	b948      	cbnz	r0, 800c3b2 <__lshift+0x3e>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	4b28      	ldr	r3, [pc, #160]	@ (800c444 <__lshift+0xd0>)
 800c3a2:	4829      	ldr	r0, [pc, #164]	@ (800c448 <__lshift+0xd4>)
 800c3a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c3a8:	f000 fb94 	bl	800cad4 <__assert_func>
 800c3ac:	3101      	adds	r1, #1
 800c3ae:	005b      	lsls	r3, r3, #1
 800c3b0:	e7ee      	b.n	800c390 <__lshift+0x1c>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f100 0114 	add.w	r1, r0, #20
 800c3b8:	f100 0210 	add.w	r2, r0, #16
 800c3bc:	4618      	mov	r0, r3
 800c3be:	4553      	cmp	r3, sl
 800c3c0:	db33      	blt.n	800c42a <__lshift+0xb6>
 800c3c2:	6920      	ldr	r0, [r4, #16]
 800c3c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3c8:	f104 0314 	add.w	r3, r4, #20
 800c3cc:	f019 091f 	ands.w	r9, r9, #31
 800c3d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3d8:	d02b      	beq.n	800c432 <__lshift+0xbe>
 800c3da:	f1c9 0e20 	rsb	lr, r9, #32
 800c3de:	468a      	mov	sl, r1
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	6818      	ldr	r0, [r3, #0]
 800c3e4:	fa00 f009 	lsl.w	r0, r0, r9
 800c3e8:	4310      	orrs	r0, r2
 800c3ea:	f84a 0b04 	str.w	r0, [sl], #4
 800c3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f2:	459c      	cmp	ip, r3
 800c3f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3f8:	d8f3      	bhi.n	800c3e2 <__lshift+0x6e>
 800c3fa:	ebac 0304 	sub.w	r3, ip, r4
 800c3fe:	3b15      	subs	r3, #21
 800c400:	f023 0303 	bic.w	r3, r3, #3
 800c404:	3304      	adds	r3, #4
 800c406:	f104 0015 	add.w	r0, r4, #21
 800c40a:	4584      	cmp	ip, r0
 800c40c:	bf38      	it	cc
 800c40e:	2304      	movcc	r3, #4
 800c410:	50ca      	str	r2, [r1, r3]
 800c412:	b10a      	cbz	r2, 800c418 <__lshift+0xa4>
 800c414:	f108 0602 	add.w	r6, r8, #2
 800c418:	3e01      	subs	r6, #1
 800c41a:	4638      	mov	r0, r7
 800c41c:	612e      	str	r6, [r5, #16]
 800c41e:	4621      	mov	r1, r4
 800c420:	f7ff fdda 	bl	800bfd8 <_Bfree>
 800c424:	4628      	mov	r0, r5
 800c426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c42e:	3301      	adds	r3, #1
 800c430:	e7c5      	b.n	800c3be <__lshift+0x4a>
 800c432:	3904      	subs	r1, #4
 800c434:	f853 2b04 	ldr.w	r2, [r3], #4
 800c438:	f841 2f04 	str.w	r2, [r1, #4]!
 800c43c:	459c      	cmp	ip, r3
 800c43e:	d8f9      	bhi.n	800c434 <__lshift+0xc0>
 800c440:	e7ea      	b.n	800c418 <__lshift+0xa4>
 800c442:	bf00      	nop
 800c444:	0800e918 	.word	0x0800e918
 800c448:	0800e929 	.word	0x0800e929

0800c44c <__mcmp>:
 800c44c:	690a      	ldr	r2, [r1, #16]
 800c44e:	4603      	mov	r3, r0
 800c450:	6900      	ldr	r0, [r0, #16]
 800c452:	1a80      	subs	r0, r0, r2
 800c454:	b530      	push	{r4, r5, lr}
 800c456:	d10e      	bne.n	800c476 <__mcmp+0x2a>
 800c458:	3314      	adds	r3, #20
 800c45a:	3114      	adds	r1, #20
 800c45c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c46c:	4295      	cmp	r5, r2
 800c46e:	d003      	beq.n	800c478 <__mcmp+0x2c>
 800c470:	d205      	bcs.n	800c47e <__mcmp+0x32>
 800c472:	f04f 30ff 	mov.w	r0, #4294967295
 800c476:	bd30      	pop	{r4, r5, pc}
 800c478:	42a3      	cmp	r3, r4
 800c47a:	d3f3      	bcc.n	800c464 <__mcmp+0x18>
 800c47c:	e7fb      	b.n	800c476 <__mcmp+0x2a>
 800c47e:	2001      	movs	r0, #1
 800c480:	e7f9      	b.n	800c476 <__mcmp+0x2a>
	...

0800c484 <__mdiff>:
 800c484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	4689      	mov	r9, r1
 800c48a:	4606      	mov	r6, r0
 800c48c:	4611      	mov	r1, r2
 800c48e:	4648      	mov	r0, r9
 800c490:	4614      	mov	r4, r2
 800c492:	f7ff ffdb 	bl	800c44c <__mcmp>
 800c496:	1e05      	subs	r5, r0, #0
 800c498:	d112      	bne.n	800c4c0 <__mdiff+0x3c>
 800c49a:	4629      	mov	r1, r5
 800c49c:	4630      	mov	r0, r6
 800c49e:	f7ff fd5b 	bl	800bf58 <_Balloc>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	b928      	cbnz	r0, 800c4b2 <__mdiff+0x2e>
 800c4a6:	4b3f      	ldr	r3, [pc, #252]	@ (800c5a4 <__mdiff+0x120>)
 800c4a8:	f240 2137 	movw	r1, #567	@ 0x237
 800c4ac:	483e      	ldr	r0, [pc, #248]	@ (800c5a8 <__mdiff+0x124>)
 800c4ae:	f000 fb11 	bl	800cad4 <__assert_func>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	b003      	add	sp, #12
 800c4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c0:	bfbc      	itt	lt
 800c4c2:	464b      	movlt	r3, r9
 800c4c4:	46a1      	movlt	r9, r4
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4cc:	bfba      	itte	lt
 800c4ce:	461c      	movlt	r4, r3
 800c4d0:	2501      	movlt	r5, #1
 800c4d2:	2500      	movge	r5, #0
 800c4d4:	f7ff fd40 	bl	800bf58 <_Balloc>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	b918      	cbnz	r0, 800c4e4 <__mdiff+0x60>
 800c4dc:	4b31      	ldr	r3, [pc, #196]	@ (800c5a4 <__mdiff+0x120>)
 800c4de:	f240 2145 	movw	r1, #581	@ 0x245
 800c4e2:	e7e3      	b.n	800c4ac <__mdiff+0x28>
 800c4e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4e8:	6926      	ldr	r6, [r4, #16]
 800c4ea:	60c5      	str	r5, [r0, #12]
 800c4ec:	f109 0310 	add.w	r3, r9, #16
 800c4f0:	f109 0514 	add.w	r5, r9, #20
 800c4f4:	f104 0e14 	add.w	lr, r4, #20
 800c4f8:	f100 0b14 	add.w	fp, r0, #20
 800c4fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c500:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c504:	9301      	str	r3, [sp, #4]
 800c506:	46d9      	mov	r9, fp
 800c508:	f04f 0c00 	mov.w	ip, #0
 800c50c:	9b01      	ldr	r3, [sp, #4]
 800c50e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c512:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c516:	9301      	str	r3, [sp, #4]
 800c518:	fa1f f38a 	uxth.w	r3, sl
 800c51c:	4619      	mov	r1, r3
 800c51e:	b283      	uxth	r3, r0
 800c520:	1acb      	subs	r3, r1, r3
 800c522:	0c00      	lsrs	r0, r0, #16
 800c524:	4463      	add	r3, ip
 800c526:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c52a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c52e:	b29b      	uxth	r3, r3
 800c530:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c534:	4576      	cmp	r6, lr
 800c536:	f849 3b04 	str.w	r3, [r9], #4
 800c53a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c53e:	d8e5      	bhi.n	800c50c <__mdiff+0x88>
 800c540:	1b33      	subs	r3, r6, r4
 800c542:	3b15      	subs	r3, #21
 800c544:	f023 0303 	bic.w	r3, r3, #3
 800c548:	3415      	adds	r4, #21
 800c54a:	3304      	adds	r3, #4
 800c54c:	42a6      	cmp	r6, r4
 800c54e:	bf38      	it	cc
 800c550:	2304      	movcc	r3, #4
 800c552:	441d      	add	r5, r3
 800c554:	445b      	add	r3, fp
 800c556:	461e      	mov	r6, r3
 800c558:	462c      	mov	r4, r5
 800c55a:	4544      	cmp	r4, r8
 800c55c:	d30e      	bcc.n	800c57c <__mdiff+0xf8>
 800c55e:	f108 0103 	add.w	r1, r8, #3
 800c562:	1b49      	subs	r1, r1, r5
 800c564:	f021 0103 	bic.w	r1, r1, #3
 800c568:	3d03      	subs	r5, #3
 800c56a:	45a8      	cmp	r8, r5
 800c56c:	bf38      	it	cc
 800c56e:	2100      	movcc	r1, #0
 800c570:	440b      	add	r3, r1
 800c572:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c576:	b191      	cbz	r1, 800c59e <__mdiff+0x11a>
 800c578:	6117      	str	r7, [r2, #16]
 800c57a:	e79d      	b.n	800c4b8 <__mdiff+0x34>
 800c57c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c580:	46e6      	mov	lr, ip
 800c582:	0c08      	lsrs	r0, r1, #16
 800c584:	fa1c fc81 	uxtah	ip, ip, r1
 800c588:	4471      	add	r1, lr
 800c58a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c58e:	b289      	uxth	r1, r1
 800c590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c594:	f846 1b04 	str.w	r1, [r6], #4
 800c598:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c59c:	e7dd      	b.n	800c55a <__mdiff+0xd6>
 800c59e:	3f01      	subs	r7, #1
 800c5a0:	e7e7      	b.n	800c572 <__mdiff+0xee>
 800c5a2:	bf00      	nop
 800c5a4:	0800e918 	.word	0x0800e918
 800c5a8:	0800e929 	.word	0x0800e929

0800c5ac <__d2b>:
 800c5ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5b0:	460f      	mov	r7, r1
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	ec59 8b10 	vmov	r8, r9, d0
 800c5b8:	4616      	mov	r6, r2
 800c5ba:	f7ff fccd 	bl	800bf58 <_Balloc>
 800c5be:	4604      	mov	r4, r0
 800c5c0:	b930      	cbnz	r0, 800c5d0 <__d2b+0x24>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4b23      	ldr	r3, [pc, #140]	@ (800c654 <__d2b+0xa8>)
 800c5c6:	4824      	ldr	r0, [pc, #144]	@ (800c658 <__d2b+0xac>)
 800c5c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c5cc:	f000 fa82 	bl	800cad4 <__assert_func>
 800c5d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c5d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5d8:	b10d      	cbz	r5, 800c5de <__d2b+0x32>
 800c5da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	f1b8 0300 	subs.w	r3, r8, #0
 800c5e4:	d023      	beq.n	800c62e <__d2b+0x82>
 800c5e6:	4668      	mov	r0, sp
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	f7ff fd7c 	bl	800c0e6 <__lo0bits>
 800c5ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5f2:	b1d0      	cbz	r0, 800c62a <__d2b+0x7e>
 800c5f4:	f1c0 0320 	rsb	r3, r0, #32
 800c5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	40c2      	lsrs	r2, r0
 800c600:	6163      	str	r3, [r4, #20]
 800c602:	9201      	str	r2, [sp, #4]
 800c604:	9b01      	ldr	r3, [sp, #4]
 800c606:	61a3      	str	r3, [r4, #24]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	bf0c      	ite	eq
 800c60c:	2201      	moveq	r2, #1
 800c60e:	2202      	movne	r2, #2
 800c610:	6122      	str	r2, [r4, #16]
 800c612:	b1a5      	cbz	r5, 800c63e <__d2b+0x92>
 800c614:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c618:	4405      	add	r5, r0
 800c61a:	603d      	str	r5, [r7, #0]
 800c61c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c620:	6030      	str	r0, [r6, #0]
 800c622:	4620      	mov	r0, r4
 800c624:	b003      	add	sp, #12
 800c626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c62a:	6161      	str	r1, [r4, #20]
 800c62c:	e7ea      	b.n	800c604 <__d2b+0x58>
 800c62e:	a801      	add	r0, sp, #4
 800c630:	f7ff fd59 	bl	800c0e6 <__lo0bits>
 800c634:	9b01      	ldr	r3, [sp, #4]
 800c636:	6163      	str	r3, [r4, #20]
 800c638:	3020      	adds	r0, #32
 800c63a:	2201      	movs	r2, #1
 800c63c:	e7e8      	b.n	800c610 <__d2b+0x64>
 800c63e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c642:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c646:	6038      	str	r0, [r7, #0]
 800c648:	6918      	ldr	r0, [r3, #16]
 800c64a:	f7ff fd2d 	bl	800c0a8 <__hi0bits>
 800c64e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c652:	e7e5      	b.n	800c620 <__d2b+0x74>
 800c654:	0800e918 	.word	0x0800e918
 800c658:	0800e929 	.word	0x0800e929

0800c65c <__ssputs_r>:
 800c65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	688e      	ldr	r6, [r1, #8]
 800c662:	461f      	mov	r7, r3
 800c664:	42be      	cmp	r6, r7
 800c666:	680b      	ldr	r3, [r1, #0]
 800c668:	4682      	mov	sl, r0
 800c66a:	460c      	mov	r4, r1
 800c66c:	4690      	mov	r8, r2
 800c66e:	d82d      	bhi.n	800c6cc <__ssputs_r+0x70>
 800c670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c678:	d026      	beq.n	800c6c8 <__ssputs_r+0x6c>
 800c67a:	6965      	ldr	r5, [r4, #20]
 800c67c:	6909      	ldr	r1, [r1, #16]
 800c67e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c682:	eba3 0901 	sub.w	r9, r3, r1
 800c686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c68a:	1c7b      	adds	r3, r7, #1
 800c68c:	444b      	add	r3, r9
 800c68e:	106d      	asrs	r5, r5, #1
 800c690:	429d      	cmp	r5, r3
 800c692:	bf38      	it	cc
 800c694:	461d      	movcc	r5, r3
 800c696:	0553      	lsls	r3, r2, #21
 800c698:	d527      	bpl.n	800c6ea <__ssputs_r+0x8e>
 800c69a:	4629      	mov	r1, r5
 800c69c:	f7ff fbd0 	bl	800be40 <_malloc_r>
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	b360      	cbz	r0, 800c6fe <__ssputs_r+0xa2>
 800c6a4:	6921      	ldr	r1, [r4, #16]
 800c6a6:	464a      	mov	r2, r9
 800c6a8:	f000 fa06 	bl	800cab8 <memcpy>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	6126      	str	r6, [r4, #16]
 800c6ba:	6165      	str	r5, [r4, #20]
 800c6bc:	444e      	add	r6, r9
 800c6be:	eba5 0509 	sub.w	r5, r5, r9
 800c6c2:	6026      	str	r6, [r4, #0]
 800c6c4:	60a5      	str	r5, [r4, #8]
 800c6c6:	463e      	mov	r6, r7
 800c6c8:	42be      	cmp	r6, r7
 800c6ca:	d900      	bls.n	800c6ce <__ssputs_r+0x72>
 800c6cc:	463e      	mov	r6, r7
 800c6ce:	6820      	ldr	r0, [r4, #0]
 800c6d0:	4632      	mov	r2, r6
 800c6d2:	4641      	mov	r1, r8
 800c6d4:	f000 f9c6 	bl	800ca64 <memmove>
 800c6d8:	68a3      	ldr	r3, [r4, #8]
 800c6da:	1b9b      	subs	r3, r3, r6
 800c6dc:	60a3      	str	r3, [r4, #8]
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	4433      	add	r3, r6
 800c6e2:	6023      	str	r3, [r4, #0]
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	f000 fa36 	bl	800cb5c <_realloc_r>
 800c6f0:	4606      	mov	r6, r0
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d1e0      	bne.n	800c6b8 <__ssputs_r+0x5c>
 800c6f6:	6921      	ldr	r1, [r4, #16]
 800c6f8:	4650      	mov	r0, sl
 800c6fa:	f7ff fb2d 	bl	800bd58 <_free_r>
 800c6fe:	230c      	movs	r3, #12
 800c700:	f8ca 3000 	str.w	r3, [sl]
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c70a:	81a3      	strh	r3, [r4, #12]
 800c70c:	f04f 30ff 	mov.w	r0, #4294967295
 800c710:	e7e9      	b.n	800c6e6 <__ssputs_r+0x8a>
	...

0800c714 <_svfiprintf_r>:
 800c714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c718:	4698      	mov	r8, r3
 800c71a:	898b      	ldrh	r3, [r1, #12]
 800c71c:	061b      	lsls	r3, r3, #24
 800c71e:	b09d      	sub	sp, #116	@ 0x74
 800c720:	4607      	mov	r7, r0
 800c722:	460d      	mov	r5, r1
 800c724:	4614      	mov	r4, r2
 800c726:	d510      	bpl.n	800c74a <_svfiprintf_r+0x36>
 800c728:	690b      	ldr	r3, [r1, #16]
 800c72a:	b973      	cbnz	r3, 800c74a <_svfiprintf_r+0x36>
 800c72c:	2140      	movs	r1, #64	@ 0x40
 800c72e:	f7ff fb87 	bl	800be40 <_malloc_r>
 800c732:	6028      	str	r0, [r5, #0]
 800c734:	6128      	str	r0, [r5, #16]
 800c736:	b930      	cbnz	r0, 800c746 <_svfiprintf_r+0x32>
 800c738:	230c      	movs	r3, #12
 800c73a:	603b      	str	r3, [r7, #0]
 800c73c:	f04f 30ff 	mov.w	r0, #4294967295
 800c740:	b01d      	add	sp, #116	@ 0x74
 800c742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c746:	2340      	movs	r3, #64	@ 0x40
 800c748:	616b      	str	r3, [r5, #20]
 800c74a:	2300      	movs	r3, #0
 800c74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c74e:	2320      	movs	r3, #32
 800c750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c754:	f8cd 800c 	str.w	r8, [sp, #12]
 800c758:	2330      	movs	r3, #48	@ 0x30
 800c75a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8f8 <_svfiprintf_r+0x1e4>
 800c75e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c762:	f04f 0901 	mov.w	r9, #1
 800c766:	4623      	mov	r3, r4
 800c768:	469a      	mov	sl, r3
 800c76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c76e:	b10a      	cbz	r2, 800c774 <_svfiprintf_r+0x60>
 800c770:	2a25      	cmp	r2, #37	@ 0x25
 800c772:	d1f9      	bne.n	800c768 <_svfiprintf_r+0x54>
 800c774:	ebba 0b04 	subs.w	fp, sl, r4
 800c778:	d00b      	beq.n	800c792 <_svfiprintf_r+0x7e>
 800c77a:	465b      	mov	r3, fp
 800c77c:	4622      	mov	r2, r4
 800c77e:	4629      	mov	r1, r5
 800c780:	4638      	mov	r0, r7
 800c782:	f7ff ff6b 	bl	800c65c <__ssputs_r>
 800c786:	3001      	adds	r0, #1
 800c788:	f000 80a7 	beq.w	800c8da <_svfiprintf_r+0x1c6>
 800c78c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c78e:	445a      	add	r2, fp
 800c790:	9209      	str	r2, [sp, #36]	@ 0x24
 800c792:	f89a 3000 	ldrb.w	r3, [sl]
 800c796:	2b00      	cmp	r3, #0
 800c798:	f000 809f 	beq.w	800c8da <_svfiprintf_r+0x1c6>
 800c79c:	2300      	movs	r3, #0
 800c79e:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7a6:	f10a 0a01 	add.w	sl, sl, #1
 800c7aa:	9304      	str	r3, [sp, #16]
 800c7ac:	9307      	str	r3, [sp, #28]
 800c7ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7b4:	4654      	mov	r4, sl
 800c7b6:	2205      	movs	r2, #5
 800c7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7bc:	484e      	ldr	r0, [pc, #312]	@ (800c8f8 <_svfiprintf_r+0x1e4>)
 800c7be:	f7f3 fd07 	bl	80001d0 <memchr>
 800c7c2:	9a04      	ldr	r2, [sp, #16]
 800c7c4:	b9d8      	cbnz	r0, 800c7fe <_svfiprintf_r+0xea>
 800c7c6:	06d0      	lsls	r0, r2, #27
 800c7c8:	bf44      	itt	mi
 800c7ca:	2320      	movmi	r3, #32
 800c7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7d0:	0711      	lsls	r1, r2, #28
 800c7d2:	bf44      	itt	mi
 800c7d4:	232b      	movmi	r3, #43	@ 0x2b
 800c7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7da:	f89a 3000 	ldrb.w	r3, [sl]
 800c7de:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7e0:	d015      	beq.n	800c80e <_svfiprintf_r+0xfa>
 800c7e2:	9a07      	ldr	r2, [sp, #28]
 800c7e4:	4654      	mov	r4, sl
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	f04f 0c0a 	mov.w	ip, #10
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7f2:	3b30      	subs	r3, #48	@ 0x30
 800c7f4:	2b09      	cmp	r3, #9
 800c7f6:	d94b      	bls.n	800c890 <_svfiprintf_r+0x17c>
 800c7f8:	b1b0      	cbz	r0, 800c828 <_svfiprintf_r+0x114>
 800c7fa:	9207      	str	r2, [sp, #28]
 800c7fc:	e014      	b.n	800c828 <_svfiprintf_r+0x114>
 800c7fe:	eba0 0308 	sub.w	r3, r0, r8
 800c802:	fa09 f303 	lsl.w	r3, r9, r3
 800c806:	4313      	orrs	r3, r2
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	46a2      	mov	sl, r4
 800c80c:	e7d2      	b.n	800c7b4 <_svfiprintf_r+0xa0>
 800c80e:	9b03      	ldr	r3, [sp, #12]
 800c810:	1d19      	adds	r1, r3, #4
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	9103      	str	r1, [sp, #12]
 800c816:	2b00      	cmp	r3, #0
 800c818:	bfbb      	ittet	lt
 800c81a:	425b      	neglt	r3, r3
 800c81c:	f042 0202 	orrlt.w	r2, r2, #2
 800c820:	9307      	strge	r3, [sp, #28]
 800c822:	9307      	strlt	r3, [sp, #28]
 800c824:	bfb8      	it	lt
 800c826:	9204      	strlt	r2, [sp, #16]
 800c828:	7823      	ldrb	r3, [r4, #0]
 800c82a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c82c:	d10a      	bne.n	800c844 <_svfiprintf_r+0x130>
 800c82e:	7863      	ldrb	r3, [r4, #1]
 800c830:	2b2a      	cmp	r3, #42	@ 0x2a
 800c832:	d132      	bne.n	800c89a <_svfiprintf_r+0x186>
 800c834:	9b03      	ldr	r3, [sp, #12]
 800c836:	1d1a      	adds	r2, r3, #4
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	9203      	str	r2, [sp, #12]
 800c83c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c840:	3402      	adds	r4, #2
 800c842:	9305      	str	r3, [sp, #20]
 800c844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c908 <_svfiprintf_r+0x1f4>
 800c848:	7821      	ldrb	r1, [r4, #0]
 800c84a:	2203      	movs	r2, #3
 800c84c:	4650      	mov	r0, sl
 800c84e:	f7f3 fcbf 	bl	80001d0 <memchr>
 800c852:	b138      	cbz	r0, 800c864 <_svfiprintf_r+0x150>
 800c854:	9b04      	ldr	r3, [sp, #16]
 800c856:	eba0 000a 	sub.w	r0, r0, sl
 800c85a:	2240      	movs	r2, #64	@ 0x40
 800c85c:	4082      	lsls	r2, r0
 800c85e:	4313      	orrs	r3, r2
 800c860:	3401      	adds	r4, #1
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c868:	4824      	ldr	r0, [pc, #144]	@ (800c8fc <_svfiprintf_r+0x1e8>)
 800c86a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c86e:	2206      	movs	r2, #6
 800c870:	f7f3 fcae 	bl	80001d0 <memchr>
 800c874:	2800      	cmp	r0, #0
 800c876:	d036      	beq.n	800c8e6 <_svfiprintf_r+0x1d2>
 800c878:	4b21      	ldr	r3, [pc, #132]	@ (800c900 <_svfiprintf_r+0x1ec>)
 800c87a:	bb1b      	cbnz	r3, 800c8c4 <_svfiprintf_r+0x1b0>
 800c87c:	9b03      	ldr	r3, [sp, #12]
 800c87e:	3307      	adds	r3, #7
 800c880:	f023 0307 	bic.w	r3, r3, #7
 800c884:	3308      	adds	r3, #8
 800c886:	9303      	str	r3, [sp, #12]
 800c888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c88a:	4433      	add	r3, r6
 800c88c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c88e:	e76a      	b.n	800c766 <_svfiprintf_r+0x52>
 800c890:	fb0c 3202 	mla	r2, ip, r2, r3
 800c894:	460c      	mov	r4, r1
 800c896:	2001      	movs	r0, #1
 800c898:	e7a8      	b.n	800c7ec <_svfiprintf_r+0xd8>
 800c89a:	2300      	movs	r3, #0
 800c89c:	3401      	adds	r4, #1
 800c89e:	9305      	str	r3, [sp, #20]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f04f 0c0a 	mov.w	ip, #10
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ac:	3a30      	subs	r2, #48	@ 0x30
 800c8ae:	2a09      	cmp	r2, #9
 800c8b0:	d903      	bls.n	800c8ba <_svfiprintf_r+0x1a6>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d0c6      	beq.n	800c844 <_svfiprintf_r+0x130>
 800c8b6:	9105      	str	r1, [sp, #20]
 800c8b8:	e7c4      	b.n	800c844 <_svfiprintf_r+0x130>
 800c8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8be:	4604      	mov	r4, r0
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e7f0      	b.n	800c8a6 <_svfiprintf_r+0x192>
 800c8c4:	ab03      	add	r3, sp, #12
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	462a      	mov	r2, r5
 800c8ca:	4b0e      	ldr	r3, [pc, #56]	@ (800c904 <_svfiprintf_r+0x1f0>)
 800c8cc:	a904      	add	r1, sp, #16
 800c8ce:	4638      	mov	r0, r7
 800c8d0:	f7fd fe88 	bl	800a5e4 <_printf_float>
 800c8d4:	1c42      	adds	r2, r0, #1
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	d1d6      	bne.n	800c888 <_svfiprintf_r+0x174>
 800c8da:	89ab      	ldrh	r3, [r5, #12]
 800c8dc:	065b      	lsls	r3, r3, #25
 800c8de:	f53f af2d 	bmi.w	800c73c <_svfiprintf_r+0x28>
 800c8e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8e4:	e72c      	b.n	800c740 <_svfiprintf_r+0x2c>
 800c8e6:	ab03      	add	r3, sp, #12
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	462a      	mov	r2, r5
 800c8ec:	4b05      	ldr	r3, [pc, #20]	@ (800c904 <_svfiprintf_r+0x1f0>)
 800c8ee:	a904      	add	r1, sp, #16
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	f7fe f90f 	bl	800ab14 <_printf_i>
 800c8f6:	e7ed      	b.n	800c8d4 <_svfiprintf_r+0x1c0>
 800c8f8:	0800ea80 	.word	0x0800ea80
 800c8fc:	0800ea8a 	.word	0x0800ea8a
 800c900:	0800a5e5 	.word	0x0800a5e5
 800c904:	0800c65d 	.word	0x0800c65d
 800c908:	0800ea86 	.word	0x0800ea86

0800c90c <__sflush_r>:
 800c90c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c914:	0716      	lsls	r6, r2, #28
 800c916:	4605      	mov	r5, r0
 800c918:	460c      	mov	r4, r1
 800c91a:	d454      	bmi.n	800c9c6 <__sflush_r+0xba>
 800c91c:	684b      	ldr	r3, [r1, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	dc02      	bgt.n	800c928 <__sflush_r+0x1c>
 800c922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c924:	2b00      	cmp	r3, #0
 800c926:	dd48      	ble.n	800c9ba <__sflush_r+0xae>
 800c928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c92a:	2e00      	cmp	r6, #0
 800c92c:	d045      	beq.n	800c9ba <__sflush_r+0xae>
 800c92e:	2300      	movs	r3, #0
 800c930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c934:	682f      	ldr	r7, [r5, #0]
 800c936:	6a21      	ldr	r1, [r4, #32]
 800c938:	602b      	str	r3, [r5, #0]
 800c93a:	d030      	beq.n	800c99e <__sflush_r+0x92>
 800c93c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c93e:	89a3      	ldrh	r3, [r4, #12]
 800c940:	0759      	lsls	r1, r3, #29
 800c942:	d505      	bpl.n	800c950 <__sflush_r+0x44>
 800c944:	6863      	ldr	r3, [r4, #4]
 800c946:	1ad2      	subs	r2, r2, r3
 800c948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c94a:	b10b      	cbz	r3, 800c950 <__sflush_r+0x44>
 800c94c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c94e:	1ad2      	subs	r2, r2, r3
 800c950:	2300      	movs	r3, #0
 800c952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c954:	6a21      	ldr	r1, [r4, #32]
 800c956:	4628      	mov	r0, r5
 800c958:	47b0      	blx	r6
 800c95a:	1c43      	adds	r3, r0, #1
 800c95c:	89a3      	ldrh	r3, [r4, #12]
 800c95e:	d106      	bne.n	800c96e <__sflush_r+0x62>
 800c960:	6829      	ldr	r1, [r5, #0]
 800c962:	291d      	cmp	r1, #29
 800c964:	d82b      	bhi.n	800c9be <__sflush_r+0xb2>
 800c966:	4a2a      	ldr	r2, [pc, #168]	@ (800ca10 <__sflush_r+0x104>)
 800c968:	410a      	asrs	r2, r1
 800c96a:	07d6      	lsls	r6, r2, #31
 800c96c:	d427      	bmi.n	800c9be <__sflush_r+0xb2>
 800c96e:	2200      	movs	r2, #0
 800c970:	6062      	str	r2, [r4, #4]
 800c972:	04d9      	lsls	r1, r3, #19
 800c974:	6922      	ldr	r2, [r4, #16]
 800c976:	6022      	str	r2, [r4, #0]
 800c978:	d504      	bpl.n	800c984 <__sflush_r+0x78>
 800c97a:	1c42      	adds	r2, r0, #1
 800c97c:	d101      	bne.n	800c982 <__sflush_r+0x76>
 800c97e:	682b      	ldr	r3, [r5, #0]
 800c980:	b903      	cbnz	r3, 800c984 <__sflush_r+0x78>
 800c982:	6560      	str	r0, [r4, #84]	@ 0x54
 800c984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c986:	602f      	str	r7, [r5, #0]
 800c988:	b1b9      	cbz	r1, 800c9ba <__sflush_r+0xae>
 800c98a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c98e:	4299      	cmp	r1, r3
 800c990:	d002      	beq.n	800c998 <__sflush_r+0x8c>
 800c992:	4628      	mov	r0, r5
 800c994:	f7ff f9e0 	bl	800bd58 <_free_r>
 800c998:	2300      	movs	r3, #0
 800c99a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c99c:	e00d      	b.n	800c9ba <__sflush_r+0xae>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	47b0      	blx	r6
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	1c50      	adds	r0, r2, #1
 800c9a8:	d1c9      	bne.n	800c93e <__sflush_r+0x32>
 800c9aa:	682b      	ldr	r3, [r5, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d0c6      	beq.n	800c93e <__sflush_r+0x32>
 800c9b0:	2b1d      	cmp	r3, #29
 800c9b2:	d001      	beq.n	800c9b8 <__sflush_r+0xac>
 800c9b4:	2b16      	cmp	r3, #22
 800c9b6:	d11e      	bne.n	800c9f6 <__sflush_r+0xea>
 800c9b8:	602f      	str	r7, [r5, #0]
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	e022      	b.n	800ca04 <__sflush_r+0xf8>
 800c9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9c2:	b21b      	sxth	r3, r3
 800c9c4:	e01b      	b.n	800c9fe <__sflush_r+0xf2>
 800c9c6:	690f      	ldr	r7, [r1, #16]
 800c9c8:	2f00      	cmp	r7, #0
 800c9ca:	d0f6      	beq.n	800c9ba <__sflush_r+0xae>
 800c9cc:	0793      	lsls	r3, r2, #30
 800c9ce:	680e      	ldr	r6, [r1, #0]
 800c9d0:	bf08      	it	eq
 800c9d2:	694b      	ldreq	r3, [r1, #20]
 800c9d4:	600f      	str	r7, [r1, #0]
 800c9d6:	bf18      	it	ne
 800c9d8:	2300      	movne	r3, #0
 800c9da:	eba6 0807 	sub.w	r8, r6, r7
 800c9de:	608b      	str	r3, [r1, #8]
 800c9e0:	f1b8 0f00 	cmp.w	r8, #0
 800c9e4:	dde9      	ble.n	800c9ba <__sflush_r+0xae>
 800c9e6:	6a21      	ldr	r1, [r4, #32]
 800c9e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c9ea:	4643      	mov	r3, r8
 800c9ec:	463a      	mov	r2, r7
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	47b0      	blx	r6
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	dc08      	bgt.n	800ca08 <__sflush_r+0xfc>
 800c9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9fe:	81a3      	strh	r3, [r4, #12]
 800ca00:	f04f 30ff 	mov.w	r0, #4294967295
 800ca04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca08:	4407      	add	r7, r0
 800ca0a:	eba8 0800 	sub.w	r8, r8, r0
 800ca0e:	e7e7      	b.n	800c9e0 <__sflush_r+0xd4>
 800ca10:	dfbffffe 	.word	0xdfbffffe

0800ca14 <_fflush_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	690b      	ldr	r3, [r1, #16]
 800ca18:	4605      	mov	r5, r0
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	b913      	cbnz	r3, 800ca24 <_fflush_r+0x10>
 800ca1e:	2500      	movs	r5, #0
 800ca20:	4628      	mov	r0, r5
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	b118      	cbz	r0, 800ca2e <_fflush_r+0x1a>
 800ca26:	6a03      	ldr	r3, [r0, #32]
 800ca28:	b90b      	cbnz	r3, 800ca2e <_fflush_r+0x1a>
 800ca2a:	f7fe fa1f 	bl	800ae6c <__sinit>
 800ca2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d0f3      	beq.n	800ca1e <_fflush_r+0xa>
 800ca36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca38:	07d0      	lsls	r0, r2, #31
 800ca3a:	d404      	bmi.n	800ca46 <_fflush_r+0x32>
 800ca3c:	0599      	lsls	r1, r3, #22
 800ca3e:	d402      	bmi.n	800ca46 <_fflush_r+0x32>
 800ca40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca42:	f7fe fb2a 	bl	800b09a <__retarget_lock_acquire_recursive>
 800ca46:	4628      	mov	r0, r5
 800ca48:	4621      	mov	r1, r4
 800ca4a:	f7ff ff5f 	bl	800c90c <__sflush_r>
 800ca4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca50:	07da      	lsls	r2, r3, #31
 800ca52:	4605      	mov	r5, r0
 800ca54:	d4e4      	bmi.n	800ca20 <_fflush_r+0xc>
 800ca56:	89a3      	ldrh	r3, [r4, #12]
 800ca58:	059b      	lsls	r3, r3, #22
 800ca5a:	d4e1      	bmi.n	800ca20 <_fflush_r+0xc>
 800ca5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca5e:	f7fe fb1d 	bl	800b09c <__retarget_lock_release_recursive>
 800ca62:	e7dd      	b.n	800ca20 <_fflush_r+0xc>

0800ca64 <memmove>:
 800ca64:	4288      	cmp	r0, r1
 800ca66:	b510      	push	{r4, lr}
 800ca68:	eb01 0402 	add.w	r4, r1, r2
 800ca6c:	d902      	bls.n	800ca74 <memmove+0x10>
 800ca6e:	4284      	cmp	r4, r0
 800ca70:	4623      	mov	r3, r4
 800ca72:	d807      	bhi.n	800ca84 <memmove+0x20>
 800ca74:	1e43      	subs	r3, r0, #1
 800ca76:	42a1      	cmp	r1, r4
 800ca78:	d008      	beq.n	800ca8c <memmove+0x28>
 800ca7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca82:	e7f8      	b.n	800ca76 <memmove+0x12>
 800ca84:	4402      	add	r2, r0
 800ca86:	4601      	mov	r1, r0
 800ca88:	428a      	cmp	r2, r1
 800ca8a:	d100      	bne.n	800ca8e <memmove+0x2a>
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca96:	e7f7      	b.n	800ca88 <memmove+0x24>

0800ca98 <_sbrk_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	4d06      	ldr	r5, [pc, #24]	@ (800cab4 <_sbrk_r+0x1c>)
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	4604      	mov	r4, r0
 800caa0:	4608      	mov	r0, r1
 800caa2:	602b      	str	r3, [r5, #0]
 800caa4:	f7f5 fec6 	bl	8002834 <_sbrk>
 800caa8:	1c43      	adds	r3, r0, #1
 800caaa:	d102      	bne.n	800cab2 <_sbrk_r+0x1a>
 800caac:	682b      	ldr	r3, [r5, #0]
 800caae:	b103      	cbz	r3, 800cab2 <_sbrk_r+0x1a>
 800cab0:	6023      	str	r3, [r4, #0]
 800cab2:	bd38      	pop	{r3, r4, r5, pc}
 800cab4:	2000224c 	.word	0x2000224c

0800cab8 <memcpy>:
 800cab8:	440a      	add	r2, r1
 800caba:	4291      	cmp	r1, r2
 800cabc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cac0:	d100      	bne.n	800cac4 <memcpy+0xc>
 800cac2:	4770      	bx	lr
 800cac4:	b510      	push	{r4, lr}
 800cac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cace:	4291      	cmp	r1, r2
 800cad0:	d1f9      	bne.n	800cac6 <memcpy+0xe>
 800cad2:	bd10      	pop	{r4, pc}

0800cad4 <__assert_func>:
 800cad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cad6:	4614      	mov	r4, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	4b09      	ldr	r3, [pc, #36]	@ (800cb00 <__assert_func+0x2c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4605      	mov	r5, r0
 800cae0:	68d8      	ldr	r0, [r3, #12]
 800cae2:	b954      	cbnz	r4, 800cafa <__assert_func+0x26>
 800cae4:	4b07      	ldr	r3, [pc, #28]	@ (800cb04 <__assert_func+0x30>)
 800cae6:	461c      	mov	r4, r3
 800cae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800caec:	9100      	str	r1, [sp, #0]
 800caee:	462b      	mov	r3, r5
 800caf0:	4905      	ldr	r1, [pc, #20]	@ (800cb08 <__assert_func+0x34>)
 800caf2:	f000 f86f 	bl	800cbd4 <fiprintf>
 800caf6:	f000 f87f 	bl	800cbf8 <abort>
 800cafa:	4b04      	ldr	r3, [pc, #16]	@ (800cb0c <__assert_func+0x38>)
 800cafc:	e7f4      	b.n	800cae8 <__assert_func+0x14>
 800cafe:	bf00      	nop
 800cb00:	20000118 	.word	0x20000118
 800cb04:	0800ead6 	.word	0x0800ead6
 800cb08:	0800eaa8 	.word	0x0800eaa8
 800cb0c:	0800ea9b 	.word	0x0800ea9b

0800cb10 <_calloc_r>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	fba1 5402 	umull	r5, r4, r1, r2
 800cb16:	b93c      	cbnz	r4, 800cb28 <_calloc_r+0x18>
 800cb18:	4629      	mov	r1, r5
 800cb1a:	f7ff f991 	bl	800be40 <_malloc_r>
 800cb1e:	4606      	mov	r6, r0
 800cb20:	b928      	cbnz	r0, 800cb2e <_calloc_r+0x1e>
 800cb22:	2600      	movs	r6, #0
 800cb24:	4630      	mov	r0, r6
 800cb26:	bd70      	pop	{r4, r5, r6, pc}
 800cb28:	220c      	movs	r2, #12
 800cb2a:	6002      	str	r2, [r0, #0]
 800cb2c:	e7f9      	b.n	800cb22 <_calloc_r+0x12>
 800cb2e:	462a      	mov	r2, r5
 800cb30:	4621      	mov	r1, r4
 800cb32:	f7fe fa34 	bl	800af9e <memset>
 800cb36:	e7f5      	b.n	800cb24 <_calloc_r+0x14>

0800cb38 <__ascii_mbtowc>:
 800cb38:	b082      	sub	sp, #8
 800cb3a:	b901      	cbnz	r1, 800cb3e <__ascii_mbtowc+0x6>
 800cb3c:	a901      	add	r1, sp, #4
 800cb3e:	b142      	cbz	r2, 800cb52 <__ascii_mbtowc+0x1a>
 800cb40:	b14b      	cbz	r3, 800cb56 <__ascii_mbtowc+0x1e>
 800cb42:	7813      	ldrb	r3, [r2, #0]
 800cb44:	600b      	str	r3, [r1, #0]
 800cb46:	7812      	ldrb	r2, [r2, #0]
 800cb48:	1e10      	subs	r0, r2, #0
 800cb4a:	bf18      	it	ne
 800cb4c:	2001      	movne	r0, #1
 800cb4e:	b002      	add	sp, #8
 800cb50:	4770      	bx	lr
 800cb52:	4610      	mov	r0, r2
 800cb54:	e7fb      	b.n	800cb4e <__ascii_mbtowc+0x16>
 800cb56:	f06f 0001 	mvn.w	r0, #1
 800cb5a:	e7f8      	b.n	800cb4e <__ascii_mbtowc+0x16>

0800cb5c <_realloc_r>:
 800cb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb60:	4680      	mov	r8, r0
 800cb62:	4615      	mov	r5, r2
 800cb64:	460c      	mov	r4, r1
 800cb66:	b921      	cbnz	r1, 800cb72 <_realloc_r+0x16>
 800cb68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	f7ff b967 	b.w	800be40 <_malloc_r>
 800cb72:	b92a      	cbnz	r2, 800cb80 <_realloc_r+0x24>
 800cb74:	f7ff f8f0 	bl	800bd58 <_free_r>
 800cb78:	2400      	movs	r4, #0
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb80:	f000 f841 	bl	800cc06 <_malloc_usable_size_r>
 800cb84:	4285      	cmp	r5, r0
 800cb86:	4606      	mov	r6, r0
 800cb88:	d802      	bhi.n	800cb90 <_realloc_r+0x34>
 800cb8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cb8e:	d8f4      	bhi.n	800cb7a <_realloc_r+0x1e>
 800cb90:	4629      	mov	r1, r5
 800cb92:	4640      	mov	r0, r8
 800cb94:	f7ff f954 	bl	800be40 <_malloc_r>
 800cb98:	4607      	mov	r7, r0
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d0ec      	beq.n	800cb78 <_realloc_r+0x1c>
 800cb9e:	42b5      	cmp	r5, r6
 800cba0:	462a      	mov	r2, r5
 800cba2:	4621      	mov	r1, r4
 800cba4:	bf28      	it	cs
 800cba6:	4632      	movcs	r2, r6
 800cba8:	f7ff ff86 	bl	800cab8 <memcpy>
 800cbac:	4621      	mov	r1, r4
 800cbae:	4640      	mov	r0, r8
 800cbb0:	f7ff f8d2 	bl	800bd58 <_free_r>
 800cbb4:	463c      	mov	r4, r7
 800cbb6:	e7e0      	b.n	800cb7a <_realloc_r+0x1e>

0800cbb8 <__ascii_wctomb>:
 800cbb8:	4603      	mov	r3, r0
 800cbba:	4608      	mov	r0, r1
 800cbbc:	b141      	cbz	r1, 800cbd0 <__ascii_wctomb+0x18>
 800cbbe:	2aff      	cmp	r2, #255	@ 0xff
 800cbc0:	d904      	bls.n	800cbcc <__ascii_wctomb+0x14>
 800cbc2:	228a      	movs	r2, #138	@ 0x8a
 800cbc4:	601a      	str	r2, [r3, #0]
 800cbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbca:	4770      	bx	lr
 800cbcc:	700a      	strb	r2, [r1, #0]
 800cbce:	2001      	movs	r0, #1
 800cbd0:	4770      	bx	lr
	...

0800cbd4 <fiprintf>:
 800cbd4:	b40e      	push	{r1, r2, r3}
 800cbd6:	b503      	push	{r0, r1, lr}
 800cbd8:	4601      	mov	r1, r0
 800cbda:	ab03      	add	r3, sp, #12
 800cbdc:	4805      	ldr	r0, [pc, #20]	@ (800cbf4 <fiprintf+0x20>)
 800cbde:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe2:	6800      	ldr	r0, [r0, #0]
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	f000 f83f 	bl	800cc68 <_vfiprintf_r>
 800cbea:	b002      	add	sp, #8
 800cbec:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbf0:	b003      	add	sp, #12
 800cbf2:	4770      	bx	lr
 800cbf4:	20000118 	.word	0x20000118

0800cbf8 <abort>:
 800cbf8:	b508      	push	{r3, lr}
 800cbfa:	2006      	movs	r0, #6
 800cbfc:	f000 fa08 	bl	800d010 <raise>
 800cc00:	2001      	movs	r0, #1
 800cc02:	f7f5 fd9f 	bl	8002744 <_exit>

0800cc06 <_malloc_usable_size_r>:
 800cc06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc0a:	1f18      	subs	r0, r3, #4
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bfbc      	itt	lt
 800cc10:	580b      	ldrlt	r3, [r1, r0]
 800cc12:	18c0      	addlt	r0, r0, r3
 800cc14:	4770      	bx	lr

0800cc16 <__sfputc_r>:
 800cc16:	6893      	ldr	r3, [r2, #8]
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	b410      	push	{r4}
 800cc1e:	6093      	str	r3, [r2, #8]
 800cc20:	da08      	bge.n	800cc34 <__sfputc_r+0x1e>
 800cc22:	6994      	ldr	r4, [r2, #24]
 800cc24:	42a3      	cmp	r3, r4
 800cc26:	db01      	blt.n	800cc2c <__sfputc_r+0x16>
 800cc28:	290a      	cmp	r1, #10
 800cc2a:	d103      	bne.n	800cc34 <__sfputc_r+0x1e>
 800cc2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc30:	f000 b932 	b.w	800ce98 <__swbuf_r>
 800cc34:	6813      	ldr	r3, [r2, #0]
 800cc36:	1c58      	adds	r0, r3, #1
 800cc38:	6010      	str	r0, [r2, #0]
 800cc3a:	7019      	strb	r1, [r3, #0]
 800cc3c:	4608      	mov	r0, r1
 800cc3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <__sfputs_r>:
 800cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc46:	4606      	mov	r6, r0
 800cc48:	460f      	mov	r7, r1
 800cc4a:	4614      	mov	r4, r2
 800cc4c:	18d5      	adds	r5, r2, r3
 800cc4e:	42ac      	cmp	r4, r5
 800cc50:	d101      	bne.n	800cc56 <__sfputs_r+0x12>
 800cc52:	2000      	movs	r0, #0
 800cc54:	e007      	b.n	800cc66 <__sfputs_r+0x22>
 800cc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc5a:	463a      	mov	r2, r7
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f7ff ffda 	bl	800cc16 <__sfputc_r>
 800cc62:	1c43      	adds	r3, r0, #1
 800cc64:	d1f3      	bne.n	800cc4e <__sfputs_r+0xa>
 800cc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc68 <_vfiprintf_r>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	b09d      	sub	sp, #116	@ 0x74
 800cc70:	4614      	mov	r4, r2
 800cc72:	4698      	mov	r8, r3
 800cc74:	4606      	mov	r6, r0
 800cc76:	b118      	cbz	r0, 800cc80 <_vfiprintf_r+0x18>
 800cc78:	6a03      	ldr	r3, [r0, #32]
 800cc7a:	b90b      	cbnz	r3, 800cc80 <_vfiprintf_r+0x18>
 800cc7c:	f7fe f8f6 	bl	800ae6c <__sinit>
 800cc80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc82:	07d9      	lsls	r1, r3, #31
 800cc84:	d405      	bmi.n	800cc92 <_vfiprintf_r+0x2a>
 800cc86:	89ab      	ldrh	r3, [r5, #12]
 800cc88:	059a      	lsls	r2, r3, #22
 800cc8a:	d402      	bmi.n	800cc92 <_vfiprintf_r+0x2a>
 800cc8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc8e:	f7fe fa04 	bl	800b09a <__retarget_lock_acquire_recursive>
 800cc92:	89ab      	ldrh	r3, [r5, #12]
 800cc94:	071b      	lsls	r3, r3, #28
 800cc96:	d501      	bpl.n	800cc9c <_vfiprintf_r+0x34>
 800cc98:	692b      	ldr	r3, [r5, #16]
 800cc9a:	b99b      	cbnz	r3, 800ccc4 <_vfiprintf_r+0x5c>
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	4630      	mov	r0, r6
 800cca0:	f000 f938 	bl	800cf14 <__swsetup_r>
 800cca4:	b170      	cbz	r0, 800ccc4 <_vfiprintf_r+0x5c>
 800cca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cca8:	07dc      	lsls	r4, r3, #31
 800ccaa:	d504      	bpl.n	800ccb6 <_vfiprintf_r+0x4e>
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb0:	b01d      	add	sp, #116	@ 0x74
 800ccb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb6:	89ab      	ldrh	r3, [r5, #12]
 800ccb8:	0598      	lsls	r0, r3, #22
 800ccba:	d4f7      	bmi.n	800ccac <_vfiprintf_r+0x44>
 800ccbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccbe:	f7fe f9ed 	bl	800b09c <__retarget_lock_release_recursive>
 800ccc2:	e7f3      	b.n	800ccac <_vfiprintf_r+0x44>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccc8:	2320      	movs	r3, #32
 800ccca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccce:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccd2:	2330      	movs	r3, #48	@ 0x30
 800ccd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce84 <_vfiprintf_r+0x21c>
 800ccd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccdc:	f04f 0901 	mov.w	r9, #1
 800cce0:	4623      	mov	r3, r4
 800cce2:	469a      	mov	sl, r3
 800cce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cce8:	b10a      	cbz	r2, 800ccee <_vfiprintf_r+0x86>
 800ccea:	2a25      	cmp	r2, #37	@ 0x25
 800ccec:	d1f9      	bne.n	800cce2 <_vfiprintf_r+0x7a>
 800ccee:	ebba 0b04 	subs.w	fp, sl, r4
 800ccf2:	d00b      	beq.n	800cd0c <_vfiprintf_r+0xa4>
 800ccf4:	465b      	mov	r3, fp
 800ccf6:	4622      	mov	r2, r4
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	f7ff ffa2 	bl	800cc44 <__sfputs_r>
 800cd00:	3001      	adds	r0, #1
 800cd02:	f000 80a7 	beq.w	800ce54 <_vfiprintf_r+0x1ec>
 800cd06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd08:	445a      	add	r2, fp
 800cd0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd0c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f000 809f 	beq.w	800ce54 <_vfiprintf_r+0x1ec>
 800cd16:	2300      	movs	r3, #0
 800cd18:	f04f 32ff 	mov.w	r2, #4294967295
 800cd1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd20:	f10a 0a01 	add.w	sl, sl, #1
 800cd24:	9304      	str	r3, [sp, #16]
 800cd26:	9307      	str	r3, [sp, #28]
 800cd28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd2e:	4654      	mov	r4, sl
 800cd30:	2205      	movs	r2, #5
 800cd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd36:	4853      	ldr	r0, [pc, #332]	@ (800ce84 <_vfiprintf_r+0x21c>)
 800cd38:	f7f3 fa4a 	bl	80001d0 <memchr>
 800cd3c:	9a04      	ldr	r2, [sp, #16]
 800cd3e:	b9d8      	cbnz	r0, 800cd78 <_vfiprintf_r+0x110>
 800cd40:	06d1      	lsls	r1, r2, #27
 800cd42:	bf44      	itt	mi
 800cd44:	2320      	movmi	r3, #32
 800cd46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd4a:	0713      	lsls	r3, r2, #28
 800cd4c:	bf44      	itt	mi
 800cd4e:	232b      	movmi	r3, #43	@ 0x2b
 800cd50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd54:	f89a 3000 	ldrb.w	r3, [sl]
 800cd58:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd5a:	d015      	beq.n	800cd88 <_vfiprintf_r+0x120>
 800cd5c:	9a07      	ldr	r2, [sp, #28]
 800cd5e:	4654      	mov	r4, sl
 800cd60:	2000      	movs	r0, #0
 800cd62:	f04f 0c0a 	mov.w	ip, #10
 800cd66:	4621      	mov	r1, r4
 800cd68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd6c:	3b30      	subs	r3, #48	@ 0x30
 800cd6e:	2b09      	cmp	r3, #9
 800cd70:	d94b      	bls.n	800ce0a <_vfiprintf_r+0x1a2>
 800cd72:	b1b0      	cbz	r0, 800cda2 <_vfiprintf_r+0x13a>
 800cd74:	9207      	str	r2, [sp, #28]
 800cd76:	e014      	b.n	800cda2 <_vfiprintf_r+0x13a>
 800cd78:	eba0 0308 	sub.w	r3, r0, r8
 800cd7c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd80:	4313      	orrs	r3, r2
 800cd82:	9304      	str	r3, [sp, #16]
 800cd84:	46a2      	mov	sl, r4
 800cd86:	e7d2      	b.n	800cd2e <_vfiprintf_r+0xc6>
 800cd88:	9b03      	ldr	r3, [sp, #12]
 800cd8a:	1d19      	adds	r1, r3, #4
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	9103      	str	r1, [sp, #12]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	bfbb      	ittet	lt
 800cd94:	425b      	neglt	r3, r3
 800cd96:	f042 0202 	orrlt.w	r2, r2, #2
 800cd9a:	9307      	strge	r3, [sp, #28]
 800cd9c:	9307      	strlt	r3, [sp, #28]
 800cd9e:	bfb8      	it	lt
 800cda0:	9204      	strlt	r2, [sp, #16]
 800cda2:	7823      	ldrb	r3, [r4, #0]
 800cda4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cda6:	d10a      	bne.n	800cdbe <_vfiprintf_r+0x156>
 800cda8:	7863      	ldrb	r3, [r4, #1]
 800cdaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdac:	d132      	bne.n	800ce14 <_vfiprintf_r+0x1ac>
 800cdae:	9b03      	ldr	r3, [sp, #12]
 800cdb0:	1d1a      	adds	r2, r3, #4
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	9203      	str	r2, [sp, #12]
 800cdb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdba:	3402      	adds	r4, #2
 800cdbc:	9305      	str	r3, [sp, #20]
 800cdbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce94 <_vfiprintf_r+0x22c>
 800cdc2:	7821      	ldrb	r1, [r4, #0]
 800cdc4:	2203      	movs	r2, #3
 800cdc6:	4650      	mov	r0, sl
 800cdc8:	f7f3 fa02 	bl	80001d0 <memchr>
 800cdcc:	b138      	cbz	r0, 800cdde <_vfiprintf_r+0x176>
 800cdce:	9b04      	ldr	r3, [sp, #16]
 800cdd0:	eba0 000a 	sub.w	r0, r0, sl
 800cdd4:	2240      	movs	r2, #64	@ 0x40
 800cdd6:	4082      	lsls	r2, r0
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	3401      	adds	r4, #1
 800cddc:	9304      	str	r3, [sp, #16]
 800cdde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cde2:	4829      	ldr	r0, [pc, #164]	@ (800ce88 <_vfiprintf_r+0x220>)
 800cde4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cde8:	2206      	movs	r2, #6
 800cdea:	f7f3 f9f1 	bl	80001d0 <memchr>
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d03f      	beq.n	800ce72 <_vfiprintf_r+0x20a>
 800cdf2:	4b26      	ldr	r3, [pc, #152]	@ (800ce8c <_vfiprintf_r+0x224>)
 800cdf4:	bb1b      	cbnz	r3, 800ce3e <_vfiprintf_r+0x1d6>
 800cdf6:	9b03      	ldr	r3, [sp, #12]
 800cdf8:	3307      	adds	r3, #7
 800cdfa:	f023 0307 	bic.w	r3, r3, #7
 800cdfe:	3308      	adds	r3, #8
 800ce00:	9303      	str	r3, [sp, #12]
 800ce02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce04:	443b      	add	r3, r7
 800ce06:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce08:	e76a      	b.n	800cce0 <_vfiprintf_r+0x78>
 800ce0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce0e:	460c      	mov	r4, r1
 800ce10:	2001      	movs	r0, #1
 800ce12:	e7a8      	b.n	800cd66 <_vfiprintf_r+0xfe>
 800ce14:	2300      	movs	r3, #0
 800ce16:	3401      	adds	r4, #1
 800ce18:	9305      	str	r3, [sp, #20]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	f04f 0c0a 	mov.w	ip, #10
 800ce20:	4620      	mov	r0, r4
 800ce22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce26:	3a30      	subs	r2, #48	@ 0x30
 800ce28:	2a09      	cmp	r2, #9
 800ce2a:	d903      	bls.n	800ce34 <_vfiprintf_r+0x1cc>
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d0c6      	beq.n	800cdbe <_vfiprintf_r+0x156>
 800ce30:	9105      	str	r1, [sp, #20]
 800ce32:	e7c4      	b.n	800cdbe <_vfiprintf_r+0x156>
 800ce34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce38:	4604      	mov	r4, r0
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e7f0      	b.n	800ce20 <_vfiprintf_r+0x1b8>
 800ce3e:	ab03      	add	r3, sp, #12
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	462a      	mov	r2, r5
 800ce44:	4b12      	ldr	r3, [pc, #72]	@ (800ce90 <_vfiprintf_r+0x228>)
 800ce46:	a904      	add	r1, sp, #16
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f7fd fbcb 	bl	800a5e4 <_printf_float>
 800ce4e:	4607      	mov	r7, r0
 800ce50:	1c78      	adds	r0, r7, #1
 800ce52:	d1d6      	bne.n	800ce02 <_vfiprintf_r+0x19a>
 800ce54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce56:	07d9      	lsls	r1, r3, #31
 800ce58:	d405      	bmi.n	800ce66 <_vfiprintf_r+0x1fe>
 800ce5a:	89ab      	ldrh	r3, [r5, #12]
 800ce5c:	059a      	lsls	r2, r3, #22
 800ce5e:	d402      	bmi.n	800ce66 <_vfiprintf_r+0x1fe>
 800ce60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce62:	f7fe f91b 	bl	800b09c <__retarget_lock_release_recursive>
 800ce66:	89ab      	ldrh	r3, [r5, #12]
 800ce68:	065b      	lsls	r3, r3, #25
 800ce6a:	f53f af1f 	bmi.w	800ccac <_vfiprintf_r+0x44>
 800ce6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce70:	e71e      	b.n	800ccb0 <_vfiprintf_r+0x48>
 800ce72:	ab03      	add	r3, sp, #12
 800ce74:	9300      	str	r3, [sp, #0]
 800ce76:	462a      	mov	r2, r5
 800ce78:	4b05      	ldr	r3, [pc, #20]	@ (800ce90 <_vfiprintf_r+0x228>)
 800ce7a:	a904      	add	r1, sp, #16
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f7fd fe49 	bl	800ab14 <_printf_i>
 800ce82:	e7e4      	b.n	800ce4e <_vfiprintf_r+0x1e6>
 800ce84:	0800ea80 	.word	0x0800ea80
 800ce88:	0800ea8a 	.word	0x0800ea8a
 800ce8c:	0800a5e5 	.word	0x0800a5e5
 800ce90:	0800cc45 	.word	0x0800cc45
 800ce94:	0800ea86 	.word	0x0800ea86

0800ce98 <__swbuf_r>:
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9a:	460e      	mov	r6, r1
 800ce9c:	4614      	mov	r4, r2
 800ce9e:	4605      	mov	r5, r0
 800cea0:	b118      	cbz	r0, 800ceaa <__swbuf_r+0x12>
 800cea2:	6a03      	ldr	r3, [r0, #32]
 800cea4:	b90b      	cbnz	r3, 800ceaa <__swbuf_r+0x12>
 800cea6:	f7fd ffe1 	bl	800ae6c <__sinit>
 800ceaa:	69a3      	ldr	r3, [r4, #24]
 800ceac:	60a3      	str	r3, [r4, #8]
 800ceae:	89a3      	ldrh	r3, [r4, #12]
 800ceb0:	071a      	lsls	r2, r3, #28
 800ceb2:	d501      	bpl.n	800ceb8 <__swbuf_r+0x20>
 800ceb4:	6923      	ldr	r3, [r4, #16]
 800ceb6:	b943      	cbnz	r3, 800ceca <__swbuf_r+0x32>
 800ceb8:	4621      	mov	r1, r4
 800ceba:	4628      	mov	r0, r5
 800cebc:	f000 f82a 	bl	800cf14 <__swsetup_r>
 800cec0:	b118      	cbz	r0, 800ceca <__swbuf_r+0x32>
 800cec2:	f04f 37ff 	mov.w	r7, #4294967295
 800cec6:	4638      	mov	r0, r7
 800cec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	6922      	ldr	r2, [r4, #16]
 800cece:	1a98      	subs	r0, r3, r2
 800ced0:	6963      	ldr	r3, [r4, #20]
 800ced2:	b2f6      	uxtb	r6, r6
 800ced4:	4283      	cmp	r3, r0
 800ced6:	4637      	mov	r7, r6
 800ced8:	dc05      	bgt.n	800cee6 <__swbuf_r+0x4e>
 800ceda:	4621      	mov	r1, r4
 800cedc:	4628      	mov	r0, r5
 800cede:	f7ff fd99 	bl	800ca14 <_fflush_r>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d1ed      	bne.n	800cec2 <__swbuf_r+0x2a>
 800cee6:	68a3      	ldr	r3, [r4, #8]
 800cee8:	3b01      	subs	r3, #1
 800ceea:	60a3      	str	r3, [r4, #8]
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	1c5a      	adds	r2, r3, #1
 800cef0:	6022      	str	r2, [r4, #0]
 800cef2:	701e      	strb	r6, [r3, #0]
 800cef4:	6962      	ldr	r2, [r4, #20]
 800cef6:	1c43      	adds	r3, r0, #1
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d004      	beq.n	800cf06 <__swbuf_r+0x6e>
 800cefc:	89a3      	ldrh	r3, [r4, #12]
 800cefe:	07db      	lsls	r3, r3, #31
 800cf00:	d5e1      	bpl.n	800cec6 <__swbuf_r+0x2e>
 800cf02:	2e0a      	cmp	r6, #10
 800cf04:	d1df      	bne.n	800cec6 <__swbuf_r+0x2e>
 800cf06:	4621      	mov	r1, r4
 800cf08:	4628      	mov	r0, r5
 800cf0a:	f7ff fd83 	bl	800ca14 <_fflush_r>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d0d9      	beq.n	800cec6 <__swbuf_r+0x2e>
 800cf12:	e7d6      	b.n	800cec2 <__swbuf_r+0x2a>

0800cf14 <__swsetup_r>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4b29      	ldr	r3, [pc, #164]	@ (800cfbc <__swsetup_r+0xa8>)
 800cf18:	4605      	mov	r5, r0
 800cf1a:	6818      	ldr	r0, [r3, #0]
 800cf1c:	460c      	mov	r4, r1
 800cf1e:	b118      	cbz	r0, 800cf28 <__swsetup_r+0x14>
 800cf20:	6a03      	ldr	r3, [r0, #32]
 800cf22:	b90b      	cbnz	r3, 800cf28 <__swsetup_r+0x14>
 800cf24:	f7fd ffa2 	bl	800ae6c <__sinit>
 800cf28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf2c:	0719      	lsls	r1, r3, #28
 800cf2e:	d422      	bmi.n	800cf76 <__swsetup_r+0x62>
 800cf30:	06da      	lsls	r2, r3, #27
 800cf32:	d407      	bmi.n	800cf44 <__swsetup_r+0x30>
 800cf34:	2209      	movs	r2, #9
 800cf36:	602a      	str	r2, [r5, #0]
 800cf38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf3c:	81a3      	strh	r3, [r4, #12]
 800cf3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf42:	e033      	b.n	800cfac <__swsetup_r+0x98>
 800cf44:	0758      	lsls	r0, r3, #29
 800cf46:	d512      	bpl.n	800cf6e <__swsetup_r+0x5a>
 800cf48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf4a:	b141      	cbz	r1, 800cf5e <__swsetup_r+0x4a>
 800cf4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf50:	4299      	cmp	r1, r3
 800cf52:	d002      	beq.n	800cf5a <__swsetup_r+0x46>
 800cf54:	4628      	mov	r0, r5
 800cf56:	f7fe feff 	bl	800bd58 <_free_r>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf64:	81a3      	strh	r3, [r4, #12]
 800cf66:	2300      	movs	r3, #0
 800cf68:	6063      	str	r3, [r4, #4]
 800cf6a:	6923      	ldr	r3, [r4, #16]
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	89a3      	ldrh	r3, [r4, #12]
 800cf70:	f043 0308 	orr.w	r3, r3, #8
 800cf74:	81a3      	strh	r3, [r4, #12]
 800cf76:	6923      	ldr	r3, [r4, #16]
 800cf78:	b94b      	cbnz	r3, 800cf8e <__swsetup_r+0x7a>
 800cf7a:	89a3      	ldrh	r3, [r4, #12]
 800cf7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf84:	d003      	beq.n	800cf8e <__swsetup_r+0x7a>
 800cf86:	4621      	mov	r1, r4
 800cf88:	4628      	mov	r0, r5
 800cf8a:	f000 f883 	bl	800d094 <__smakebuf_r>
 800cf8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf92:	f013 0201 	ands.w	r2, r3, #1
 800cf96:	d00a      	beq.n	800cfae <__swsetup_r+0x9a>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	60a2      	str	r2, [r4, #8]
 800cf9c:	6962      	ldr	r2, [r4, #20]
 800cf9e:	4252      	negs	r2, r2
 800cfa0:	61a2      	str	r2, [r4, #24]
 800cfa2:	6922      	ldr	r2, [r4, #16]
 800cfa4:	b942      	cbnz	r2, 800cfb8 <__swsetup_r+0xa4>
 800cfa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cfaa:	d1c5      	bne.n	800cf38 <__swsetup_r+0x24>
 800cfac:	bd38      	pop	{r3, r4, r5, pc}
 800cfae:	0799      	lsls	r1, r3, #30
 800cfb0:	bf58      	it	pl
 800cfb2:	6962      	ldrpl	r2, [r4, #20]
 800cfb4:	60a2      	str	r2, [r4, #8]
 800cfb6:	e7f4      	b.n	800cfa2 <__swsetup_r+0x8e>
 800cfb8:	2000      	movs	r0, #0
 800cfba:	e7f7      	b.n	800cfac <__swsetup_r+0x98>
 800cfbc:	20000118 	.word	0x20000118

0800cfc0 <_raise_r>:
 800cfc0:	291f      	cmp	r1, #31
 800cfc2:	b538      	push	{r3, r4, r5, lr}
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	d904      	bls.n	800cfd4 <_raise_r+0x14>
 800cfca:	2316      	movs	r3, #22
 800cfcc:	6003      	str	r3, [r0, #0]
 800cfce:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd2:	bd38      	pop	{r3, r4, r5, pc}
 800cfd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfd6:	b112      	cbz	r2, 800cfde <_raise_r+0x1e>
 800cfd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfdc:	b94b      	cbnz	r3, 800cff2 <_raise_r+0x32>
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f000 f830 	bl	800d044 <_getpid_r>
 800cfe4:	4622      	mov	r2, r4
 800cfe6:	4601      	mov	r1, r0
 800cfe8:	4628      	mov	r0, r5
 800cfea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfee:	f000 b817 	b.w	800d020 <_kill_r>
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d00a      	beq.n	800d00c <_raise_r+0x4c>
 800cff6:	1c59      	adds	r1, r3, #1
 800cff8:	d103      	bne.n	800d002 <_raise_r+0x42>
 800cffa:	2316      	movs	r3, #22
 800cffc:	6003      	str	r3, [r0, #0]
 800cffe:	2001      	movs	r0, #1
 800d000:	e7e7      	b.n	800cfd2 <_raise_r+0x12>
 800d002:	2100      	movs	r1, #0
 800d004:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d008:	4620      	mov	r0, r4
 800d00a:	4798      	blx	r3
 800d00c:	2000      	movs	r0, #0
 800d00e:	e7e0      	b.n	800cfd2 <_raise_r+0x12>

0800d010 <raise>:
 800d010:	4b02      	ldr	r3, [pc, #8]	@ (800d01c <raise+0xc>)
 800d012:	4601      	mov	r1, r0
 800d014:	6818      	ldr	r0, [r3, #0]
 800d016:	f7ff bfd3 	b.w	800cfc0 <_raise_r>
 800d01a:	bf00      	nop
 800d01c:	20000118 	.word	0x20000118

0800d020 <_kill_r>:
 800d020:	b538      	push	{r3, r4, r5, lr}
 800d022:	4d07      	ldr	r5, [pc, #28]	@ (800d040 <_kill_r+0x20>)
 800d024:	2300      	movs	r3, #0
 800d026:	4604      	mov	r4, r0
 800d028:	4608      	mov	r0, r1
 800d02a:	4611      	mov	r1, r2
 800d02c:	602b      	str	r3, [r5, #0]
 800d02e:	f7f5 fb79 	bl	8002724 <_kill>
 800d032:	1c43      	adds	r3, r0, #1
 800d034:	d102      	bne.n	800d03c <_kill_r+0x1c>
 800d036:	682b      	ldr	r3, [r5, #0]
 800d038:	b103      	cbz	r3, 800d03c <_kill_r+0x1c>
 800d03a:	6023      	str	r3, [r4, #0]
 800d03c:	bd38      	pop	{r3, r4, r5, pc}
 800d03e:	bf00      	nop
 800d040:	2000224c 	.word	0x2000224c

0800d044 <_getpid_r>:
 800d044:	f7f5 bb66 	b.w	8002714 <_getpid>

0800d048 <__swhatbuf_r>:
 800d048:	b570      	push	{r4, r5, r6, lr}
 800d04a:	460c      	mov	r4, r1
 800d04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d050:	2900      	cmp	r1, #0
 800d052:	b096      	sub	sp, #88	@ 0x58
 800d054:	4615      	mov	r5, r2
 800d056:	461e      	mov	r6, r3
 800d058:	da0d      	bge.n	800d076 <__swhatbuf_r+0x2e>
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d060:	f04f 0100 	mov.w	r1, #0
 800d064:	bf14      	ite	ne
 800d066:	2340      	movne	r3, #64	@ 0x40
 800d068:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d06c:	2000      	movs	r0, #0
 800d06e:	6031      	str	r1, [r6, #0]
 800d070:	602b      	str	r3, [r5, #0]
 800d072:	b016      	add	sp, #88	@ 0x58
 800d074:	bd70      	pop	{r4, r5, r6, pc}
 800d076:	466a      	mov	r2, sp
 800d078:	f000 f848 	bl	800d10c <_fstat_r>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	dbec      	blt.n	800d05a <__swhatbuf_r+0x12>
 800d080:	9901      	ldr	r1, [sp, #4]
 800d082:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d086:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d08a:	4259      	negs	r1, r3
 800d08c:	4159      	adcs	r1, r3
 800d08e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d092:	e7eb      	b.n	800d06c <__swhatbuf_r+0x24>

0800d094 <__smakebuf_r>:
 800d094:	898b      	ldrh	r3, [r1, #12]
 800d096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d098:	079d      	lsls	r5, r3, #30
 800d09a:	4606      	mov	r6, r0
 800d09c:	460c      	mov	r4, r1
 800d09e:	d507      	bpl.n	800d0b0 <__smakebuf_r+0x1c>
 800d0a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0a4:	6023      	str	r3, [r4, #0]
 800d0a6:	6123      	str	r3, [r4, #16]
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	6163      	str	r3, [r4, #20]
 800d0ac:	b003      	add	sp, #12
 800d0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b0:	ab01      	add	r3, sp, #4
 800d0b2:	466a      	mov	r2, sp
 800d0b4:	f7ff ffc8 	bl	800d048 <__swhatbuf_r>
 800d0b8:	9f00      	ldr	r7, [sp, #0]
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	4639      	mov	r1, r7
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f7fe febe 	bl	800be40 <_malloc_r>
 800d0c4:	b948      	cbnz	r0, 800d0da <__smakebuf_r+0x46>
 800d0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ca:	059a      	lsls	r2, r3, #22
 800d0cc:	d4ee      	bmi.n	800d0ac <__smakebuf_r+0x18>
 800d0ce:	f023 0303 	bic.w	r3, r3, #3
 800d0d2:	f043 0302 	orr.w	r3, r3, #2
 800d0d6:	81a3      	strh	r3, [r4, #12]
 800d0d8:	e7e2      	b.n	800d0a0 <__smakebuf_r+0xc>
 800d0da:	89a3      	ldrh	r3, [r4, #12]
 800d0dc:	6020      	str	r0, [r4, #0]
 800d0de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0e2:	81a3      	strh	r3, [r4, #12]
 800d0e4:	9b01      	ldr	r3, [sp, #4]
 800d0e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d0ea:	b15b      	cbz	r3, 800d104 <__smakebuf_r+0x70>
 800d0ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	f000 f81d 	bl	800d130 <_isatty_r>
 800d0f6:	b128      	cbz	r0, 800d104 <__smakebuf_r+0x70>
 800d0f8:	89a3      	ldrh	r3, [r4, #12]
 800d0fa:	f023 0303 	bic.w	r3, r3, #3
 800d0fe:	f043 0301 	orr.w	r3, r3, #1
 800d102:	81a3      	strh	r3, [r4, #12]
 800d104:	89a3      	ldrh	r3, [r4, #12]
 800d106:	431d      	orrs	r5, r3
 800d108:	81a5      	strh	r5, [r4, #12]
 800d10a:	e7cf      	b.n	800d0ac <__smakebuf_r+0x18>

0800d10c <_fstat_r>:
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	4d07      	ldr	r5, [pc, #28]	@ (800d12c <_fstat_r+0x20>)
 800d110:	2300      	movs	r3, #0
 800d112:	4604      	mov	r4, r0
 800d114:	4608      	mov	r0, r1
 800d116:	4611      	mov	r1, r2
 800d118:	602b      	str	r3, [r5, #0]
 800d11a:	f7f5 fb63 	bl	80027e4 <_fstat>
 800d11e:	1c43      	adds	r3, r0, #1
 800d120:	d102      	bne.n	800d128 <_fstat_r+0x1c>
 800d122:	682b      	ldr	r3, [r5, #0]
 800d124:	b103      	cbz	r3, 800d128 <_fstat_r+0x1c>
 800d126:	6023      	str	r3, [r4, #0]
 800d128:	bd38      	pop	{r3, r4, r5, pc}
 800d12a:	bf00      	nop
 800d12c:	2000224c 	.word	0x2000224c

0800d130 <_isatty_r>:
 800d130:	b538      	push	{r3, r4, r5, lr}
 800d132:	4d06      	ldr	r5, [pc, #24]	@ (800d14c <_isatty_r+0x1c>)
 800d134:	2300      	movs	r3, #0
 800d136:	4604      	mov	r4, r0
 800d138:	4608      	mov	r0, r1
 800d13a:	602b      	str	r3, [r5, #0]
 800d13c:	f7f5 fb62 	bl	8002804 <_isatty>
 800d140:	1c43      	adds	r3, r0, #1
 800d142:	d102      	bne.n	800d14a <_isatty_r+0x1a>
 800d144:	682b      	ldr	r3, [r5, #0]
 800d146:	b103      	cbz	r3, 800d14a <_isatty_r+0x1a>
 800d148:	6023      	str	r3, [r4, #0]
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
 800d14c:	2000224c 	.word	0x2000224c

0800d150 <asin>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	ed2d 8b02 	vpush	{d8}
 800d156:	ec55 4b10 	vmov	r4, r5, d0
 800d15a:	f000 f9d9 	bl	800d510 <__ieee754_asin>
 800d15e:	4622      	mov	r2, r4
 800d160:	462b      	mov	r3, r5
 800d162:	4620      	mov	r0, r4
 800d164:	4629      	mov	r1, r5
 800d166:	eeb0 8a40 	vmov.f32	s16, s0
 800d16a:	eef0 8a60 	vmov.f32	s17, s1
 800d16e:	f7f3 fcdd 	bl	8000b2c <__aeabi_dcmpun>
 800d172:	b9a8      	cbnz	r0, 800d1a0 <asin+0x50>
 800d174:	ec45 4b10 	vmov	d0, r4, r5
 800d178:	f000 f84c 	bl	800d214 <fabs>
 800d17c:	4b0c      	ldr	r3, [pc, #48]	@ (800d1b0 <asin+0x60>)
 800d17e:	ec51 0b10 	vmov	r0, r1, d0
 800d182:	2200      	movs	r2, #0
 800d184:	f7f3 fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 800d188:	b150      	cbz	r0, 800d1a0 <asin+0x50>
 800d18a:	f7fd ff5b 	bl	800b044 <__errno>
 800d18e:	ecbd 8b02 	vpop	{d8}
 800d192:	2321      	movs	r3, #33	@ 0x21
 800d194:	6003      	str	r3, [r0, #0]
 800d196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d19a:	4806      	ldr	r0, [pc, #24]	@ (800d1b4 <asin+0x64>)
 800d19c:	f000 b8d4 	b.w	800d348 <nan>
 800d1a0:	eeb0 0a48 	vmov.f32	s0, s16
 800d1a4:	eef0 0a68 	vmov.f32	s1, s17
 800d1a8:	ecbd 8b02 	vpop	{d8}
 800d1ac:	bd38      	pop	{r3, r4, r5, pc}
 800d1ae:	bf00      	nop
 800d1b0:	3ff00000 	.word	0x3ff00000
 800d1b4:	0800ead6 	.word	0x0800ead6

0800d1b8 <atan2>:
 800d1b8:	f000 bbae 	b.w	800d918 <__ieee754_atan2>

0800d1bc <sqrt>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	ed2d 8b02 	vpush	{d8}
 800d1c2:	ec55 4b10 	vmov	r4, r5, d0
 800d1c6:	f000 f8c7 	bl	800d358 <__ieee754_sqrt>
 800d1ca:	4622      	mov	r2, r4
 800d1cc:	462b      	mov	r3, r5
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	eeb0 8a40 	vmov.f32	s16, s0
 800d1d6:	eef0 8a60 	vmov.f32	s17, s1
 800d1da:	f7f3 fca7 	bl	8000b2c <__aeabi_dcmpun>
 800d1de:	b990      	cbnz	r0, 800d206 <sqrt+0x4a>
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	f7f3 fc78 	bl	8000adc <__aeabi_dcmplt>
 800d1ec:	b158      	cbz	r0, 800d206 <sqrt+0x4a>
 800d1ee:	f7fd ff29 	bl	800b044 <__errno>
 800d1f2:	2321      	movs	r3, #33	@ 0x21
 800d1f4:	6003      	str	r3, [r0, #0]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	f7f3 fb25 	bl	800084c <__aeabi_ddiv>
 800d202:	ec41 0b18 	vmov	d8, r0, r1
 800d206:	eeb0 0a48 	vmov.f32	s0, s16
 800d20a:	eef0 0a68 	vmov.f32	s1, s17
 800d20e:	ecbd 8b02 	vpop	{d8}
 800d212:	bd38      	pop	{r3, r4, r5, pc}

0800d214 <fabs>:
 800d214:	ec51 0b10 	vmov	r0, r1, d0
 800d218:	4602      	mov	r2, r0
 800d21a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d21e:	ec43 2b10 	vmov	d0, r2, r3
 800d222:	4770      	bx	lr

0800d224 <cosf>:
 800d224:	ee10 3a10 	vmov	r3, s0
 800d228:	b507      	push	{r0, r1, r2, lr}
 800d22a:	4a1e      	ldr	r2, [pc, #120]	@ (800d2a4 <cosf+0x80>)
 800d22c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d230:	4293      	cmp	r3, r2
 800d232:	d806      	bhi.n	800d242 <cosf+0x1e>
 800d234:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800d2a8 <cosf+0x84>
 800d238:	b003      	add	sp, #12
 800d23a:	f85d eb04 	ldr.w	lr, [sp], #4
 800d23e:	f000 bdcb 	b.w	800ddd8 <__kernel_cosf>
 800d242:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d246:	d304      	bcc.n	800d252 <cosf+0x2e>
 800d248:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d24c:	b003      	add	sp, #12
 800d24e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d252:	4668      	mov	r0, sp
 800d254:	f000 fe60 	bl	800df18 <__ieee754_rem_pio2f>
 800d258:	f000 0003 	and.w	r0, r0, #3
 800d25c:	2801      	cmp	r0, #1
 800d25e:	d009      	beq.n	800d274 <cosf+0x50>
 800d260:	2802      	cmp	r0, #2
 800d262:	d010      	beq.n	800d286 <cosf+0x62>
 800d264:	b9b0      	cbnz	r0, 800d294 <cosf+0x70>
 800d266:	eddd 0a01 	vldr	s1, [sp, #4]
 800d26a:	ed9d 0a00 	vldr	s0, [sp]
 800d26e:	f000 fdb3 	bl	800ddd8 <__kernel_cosf>
 800d272:	e7eb      	b.n	800d24c <cosf+0x28>
 800d274:	eddd 0a01 	vldr	s1, [sp, #4]
 800d278:	ed9d 0a00 	vldr	s0, [sp]
 800d27c:	f000 fe04 	bl	800de88 <__kernel_sinf>
 800d280:	eeb1 0a40 	vneg.f32	s0, s0
 800d284:	e7e2      	b.n	800d24c <cosf+0x28>
 800d286:	eddd 0a01 	vldr	s1, [sp, #4]
 800d28a:	ed9d 0a00 	vldr	s0, [sp]
 800d28e:	f000 fda3 	bl	800ddd8 <__kernel_cosf>
 800d292:	e7f5      	b.n	800d280 <cosf+0x5c>
 800d294:	eddd 0a01 	vldr	s1, [sp, #4]
 800d298:	ed9d 0a00 	vldr	s0, [sp]
 800d29c:	2001      	movs	r0, #1
 800d29e:	f000 fdf3 	bl	800de88 <__kernel_sinf>
 800d2a2:	e7d3      	b.n	800d24c <cosf+0x28>
 800d2a4:	3f490fd8 	.word	0x3f490fd8
 800d2a8:	00000000 	.word	0x00000000

0800d2ac <fabsf>:
 800d2ac:	ee10 3a10 	vmov	r3, s0
 800d2b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2b4:	ee00 3a10 	vmov	s0, r3
 800d2b8:	4770      	bx	lr
	...

0800d2bc <sinf>:
 800d2bc:	ee10 3a10 	vmov	r3, s0
 800d2c0:	b507      	push	{r0, r1, r2, lr}
 800d2c2:	4a1f      	ldr	r2, [pc, #124]	@ (800d340 <sinf+0x84>)
 800d2c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d807      	bhi.n	800d2dc <sinf+0x20>
 800d2cc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d344 <sinf+0x88>
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	b003      	add	sp, #12
 800d2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d8:	f000 bdd6 	b.w	800de88 <__kernel_sinf>
 800d2dc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d2e0:	d304      	bcc.n	800d2ec <sinf+0x30>
 800d2e2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d2e6:	b003      	add	sp, #12
 800d2e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2ec:	4668      	mov	r0, sp
 800d2ee:	f000 fe13 	bl	800df18 <__ieee754_rem_pio2f>
 800d2f2:	f000 0003 	and.w	r0, r0, #3
 800d2f6:	2801      	cmp	r0, #1
 800d2f8:	d00a      	beq.n	800d310 <sinf+0x54>
 800d2fa:	2802      	cmp	r0, #2
 800d2fc:	d00f      	beq.n	800d31e <sinf+0x62>
 800d2fe:	b9c0      	cbnz	r0, 800d332 <sinf+0x76>
 800d300:	eddd 0a01 	vldr	s1, [sp, #4]
 800d304:	ed9d 0a00 	vldr	s0, [sp]
 800d308:	2001      	movs	r0, #1
 800d30a:	f000 fdbd 	bl	800de88 <__kernel_sinf>
 800d30e:	e7ea      	b.n	800d2e6 <sinf+0x2a>
 800d310:	eddd 0a01 	vldr	s1, [sp, #4]
 800d314:	ed9d 0a00 	vldr	s0, [sp]
 800d318:	f000 fd5e 	bl	800ddd8 <__kernel_cosf>
 800d31c:	e7e3      	b.n	800d2e6 <sinf+0x2a>
 800d31e:	eddd 0a01 	vldr	s1, [sp, #4]
 800d322:	ed9d 0a00 	vldr	s0, [sp]
 800d326:	2001      	movs	r0, #1
 800d328:	f000 fdae 	bl	800de88 <__kernel_sinf>
 800d32c:	eeb1 0a40 	vneg.f32	s0, s0
 800d330:	e7d9      	b.n	800d2e6 <sinf+0x2a>
 800d332:	eddd 0a01 	vldr	s1, [sp, #4]
 800d336:	ed9d 0a00 	vldr	s0, [sp]
 800d33a:	f000 fd4d 	bl	800ddd8 <__kernel_cosf>
 800d33e:	e7f5      	b.n	800d32c <sinf+0x70>
 800d340:	3f490fd8 	.word	0x3f490fd8
 800d344:	00000000 	.word	0x00000000

0800d348 <nan>:
 800d348:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d350 <nan+0x8>
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	00000000 	.word	0x00000000
 800d354:	7ff80000 	.word	0x7ff80000

0800d358 <__ieee754_sqrt>:
 800d358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35c:	4a68      	ldr	r2, [pc, #416]	@ (800d500 <__ieee754_sqrt+0x1a8>)
 800d35e:	ec55 4b10 	vmov	r4, r5, d0
 800d362:	43aa      	bics	r2, r5
 800d364:	462b      	mov	r3, r5
 800d366:	4621      	mov	r1, r4
 800d368:	d110      	bne.n	800d38c <__ieee754_sqrt+0x34>
 800d36a:	4622      	mov	r2, r4
 800d36c:	4620      	mov	r0, r4
 800d36e:	4629      	mov	r1, r5
 800d370:	f7f3 f942 	bl	80005f8 <__aeabi_dmul>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	4620      	mov	r0, r4
 800d37a:	4629      	mov	r1, r5
 800d37c:	f7f2 ff86 	bl	800028c <__adddf3>
 800d380:	4604      	mov	r4, r0
 800d382:	460d      	mov	r5, r1
 800d384:	ec45 4b10 	vmov	d0, r4, r5
 800d388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38c:	2d00      	cmp	r5, #0
 800d38e:	dc0e      	bgt.n	800d3ae <__ieee754_sqrt+0x56>
 800d390:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d394:	4322      	orrs	r2, r4
 800d396:	d0f5      	beq.n	800d384 <__ieee754_sqrt+0x2c>
 800d398:	b19d      	cbz	r5, 800d3c2 <__ieee754_sqrt+0x6a>
 800d39a:	4622      	mov	r2, r4
 800d39c:	4620      	mov	r0, r4
 800d39e:	4629      	mov	r1, r5
 800d3a0:	f7f2 ff72 	bl	8000288 <__aeabi_dsub>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	f7f3 fa50 	bl	800084c <__aeabi_ddiv>
 800d3ac:	e7e8      	b.n	800d380 <__ieee754_sqrt+0x28>
 800d3ae:	152a      	asrs	r2, r5, #20
 800d3b0:	d115      	bne.n	800d3de <__ieee754_sqrt+0x86>
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	e009      	b.n	800d3ca <__ieee754_sqrt+0x72>
 800d3b6:	0acb      	lsrs	r3, r1, #11
 800d3b8:	3a15      	subs	r2, #21
 800d3ba:	0549      	lsls	r1, r1, #21
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d0fa      	beq.n	800d3b6 <__ieee754_sqrt+0x5e>
 800d3c0:	e7f7      	b.n	800d3b2 <__ieee754_sqrt+0x5a>
 800d3c2:	462a      	mov	r2, r5
 800d3c4:	e7fa      	b.n	800d3bc <__ieee754_sqrt+0x64>
 800d3c6:	005b      	lsls	r3, r3, #1
 800d3c8:	3001      	adds	r0, #1
 800d3ca:	02dc      	lsls	r4, r3, #11
 800d3cc:	d5fb      	bpl.n	800d3c6 <__ieee754_sqrt+0x6e>
 800d3ce:	1e44      	subs	r4, r0, #1
 800d3d0:	1b12      	subs	r2, r2, r4
 800d3d2:	f1c0 0420 	rsb	r4, r0, #32
 800d3d6:	fa21 f404 	lsr.w	r4, r1, r4
 800d3da:	4323      	orrs	r3, r4
 800d3dc:	4081      	lsls	r1, r0
 800d3de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d3e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d3ea:	07d2      	lsls	r2, r2, #31
 800d3ec:	bf5c      	itt	pl
 800d3ee:	005b      	lslpl	r3, r3, #1
 800d3f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d3f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3f8:	bf58      	it	pl
 800d3fa:	0049      	lslpl	r1, r1, #1
 800d3fc:	2600      	movs	r6, #0
 800d3fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d402:	106d      	asrs	r5, r5, #1
 800d404:	0049      	lsls	r1, r1, #1
 800d406:	2016      	movs	r0, #22
 800d408:	4632      	mov	r2, r6
 800d40a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d40e:	1917      	adds	r7, r2, r4
 800d410:	429f      	cmp	r7, r3
 800d412:	bfde      	ittt	le
 800d414:	193a      	addle	r2, r7, r4
 800d416:	1bdb      	suble	r3, r3, r7
 800d418:	1936      	addle	r6, r6, r4
 800d41a:	0fcf      	lsrs	r7, r1, #31
 800d41c:	3801      	subs	r0, #1
 800d41e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d422:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d426:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d42a:	d1f0      	bne.n	800d40e <__ieee754_sqrt+0xb6>
 800d42c:	4604      	mov	r4, r0
 800d42e:	2720      	movs	r7, #32
 800d430:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d434:	429a      	cmp	r2, r3
 800d436:	eb00 0e0c 	add.w	lr, r0, ip
 800d43a:	db02      	blt.n	800d442 <__ieee754_sqrt+0xea>
 800d43c:	d113      	bne.n	800d466 <__ieee754_sqrt+0x10e>
 800d43e:	458e      	cmp	lr, r1
 800d440:	d811      	bhi.n	800d466 <__ieee754_sqrt+0x10e>
 800d442:	f1be 0f00 	cmp.w	lr, #0
 800d446:	eb0e 000c 	add.w	r0, lr, ip
 800d44a:	da42      	bge.n	800d4d2 <__ieee754_sqrt+0x17a>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	db40      	blt.n	800d4d2 <__ieee754_sqrt+0x17a>
 800d450:	f102 0801 	add.w	r8, r2, #1
 800d454:	1a9b      	subs	r3, r3, r2
 800d456:	458e      	cmp	lr, r1
 800d458:	bf88      	it	hi
 800d45a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d45e:	eba1 010e 	sub.w	r1, r1, lr
 800d462:	4464      	add	r4, ip
 800d464:	4642      	mov	r2, r8
 800d466:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d46a:	3f01      	subs	r7, #1
 800d46c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d470:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d474:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d478:	d1dc      	bne.n	800d434 <__ieee754_sqrt+0xdc>
 800d47a:	4319      	orrs	r1, r3
 800d47c:	d01b      	beq.n	800d4b6 <__ieee754_sqrt+0x15e>
 800d47e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d504 <__ieee754_sqrt+0x1ac>
 800d482:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d508 <__ieee754_sqrt+0x1b0>
 800d486:	e9da 0100 	ldrd	r0, r1, [sl]
 800d48a:	e9db 2300 	ldrd	r2, r3, [fp]
 800d48e:	f7f2 fefb 	bl	8000288 <__aeabi_dsub>
 800d492:	e9da 8900 	ldrd	r8, r9, [sl]
 800d496:	4602      	mov	r2, r0
 800d498:	460b      	mov	r3, r1
 800d49a:	4640      	mov	r0, r8
 800d49c:	4649      	mov	r1, r9
 800d49e:	f7f3 fb27 	bl	8000af0 <__aeabi_dcmple>
 800d4a2:	b140      	cbz	r0, 800d4b6 <__ieee754_sqrt+0x15e>
 800d4a4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d4a8:	e9da 0100 	ldrd	r0, r1, [sl]
 800d4ac:	e9db 2300 	ldrd	r2, r3, [fp]
 800d4b0:	d111      	bne.n	800d4d6 <__ieee754_sqrt+0x17e>
 800d4b2:	3601      	adds	r6, #1
 800d4b4:	463c      	mov	r4, r7
 800d4b6:	1072      	asrs	r2, r6, #1
 800d4b8:	0863      	lsrs	r3, r4, #1
 800d4ba:	07f1      	lsls	r1, r6, #31
 800d4bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d4c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d4c4:	bf48      	it	mi
 800d4c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d4ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	e756      	b.n	800d380 <__ieee754_sqrt+0x28>
 800d4d2:	4690      	mov	r8, r2
 800d4d4:	e7be      	b.n	800d454 <__ieee754_sqrt+0xfc>
 800d4d6:	f7f2 fed9 	bl	800028c <__adddf3>
 800d4da:	e9da 8900 	ldrd	r8, r9, [sl]
 800d4de:	4602      	mov	r2, r0
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	4649      	mov	r1, r9
 800d4e6:	f7f3 faf9 	bl	8000adc <__aeabi_dcmplt>
 800d4ea:	b120      	cbz	r0, 800d4f6 <__ieee754_sqrt+0x19e>
 800d4ec:	1ca0      	adds	r0, r4, #2
 800d4ee:	bf08      	it	eq
 800d4f0:	3601      	addeq	r6, #1
 800d4f2:	3402      	adds	r4, #2
 800d4f4:	e7df      	b.n	800d4b6 <__ieee754_sqrt+0x15e>
 800d4f6:	1c63      	adds	r3, r4, #1
 800d4f8:	f023 0401 	bic.w	r4, r3, #1
 800d4fc:	e7db      	b.n	800d4b6 <__ieee754_sqrt+0x15e>
 800d4fe:	bf00      	nop
 800d500:	7ff00000 	.word	0x7ff00000
 800d504:	200002e0 	.word	0x200002e0
 800d508:	200002d8 	.word	0x200002d8
 800d50c:	00000000 	.word	0x00000000

0800d510 <__ieee754_asin>:
 800d510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	ec55 4b10 	vmov	r4, r5, d0
 800d518:	4bc7      	ldr	r3, [pc, #796]	@ (800d838 <__ieee754_asin+0x328>)
 800d51a:	b087      	sub	sp, #28
 800d51c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d520:	429e      	cmp	r6, r3
 800d522:	9501      	str	r5, [sp, #4]
 800d524:	d92d      	bls.n	800d582 <__ieee754_asin+0x72>
 800d526:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800d52a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800d52e:	4326      	orrs	r6, r4
 800d530:	d116      	bne.n	800d560 <__ieee754_asin+0x50>
 800d532:	a3a7      	add	r3, pc, #668	@ (adr r3, 800d7d0 <__ieee754_asin+0x2c0>)
 800d534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d538:	4620      	mov	r0, r4
 800d53a:	4629      	mov	r1, r5
 800d53c:	f7f3 f85c 	bl	80005f8 <__aeabi_dmul>
 800d540:	a3a5      	add	r3, pc, #660	@ (adr r3, 800d7d8 <__ieee754_asin+0x2c8>)
 800d542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d546:	4606      	mov	r6, r0
 800d548:	460f      	mov	r7, r1
 800d54a:	4620      	mov	r0, r4
 800d54c:	4629      	mov	r1, r5
 800d54e:	f7f3 f853 	bl	80005f8 <__aeabi_dmul>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	4630      	mov	r0, r6
 800d558:	4639      	mov	r1, r7
 800d55a:	f7f2 fe97 	bl	800028c <__adddf3>
 800d55e:	e009      	b.n	800d574 <__ieee754_asin+0x64>
 800d560:	4622      	mov	r2, r4
 800d562:	462b      	mov	r3, r5
 800d564:	4620      	mov	r0, r4
 800d566:	4629      	mov	r1, r5
 800d568:	f7f2 fe8e 	bl	8000288 <__aeabi_dsub>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	f7f3 f96c 	bl	800084c <__aeabi_ddiv>
 800d574:	4604      	mov	r4, r0
 800d576:	460d      	mov	r5, r1
 800d578:	ec45 4b10 	vmov	d0, r4, r5
 800d57c:	b007      	add	sp, #28
 800d57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d582:	4bae      	ldr	r3, [pc, #696]	@ (800d83c <__ieee754_asin+0x32c>)
 800d584:	429e      	cmp	r6, r3
 800d586:	d810      	bhi.n	800d5aa <__ieee754_asin+0x9a>
 800d588:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800d58c:	f080 80ad 	bcs.w	800d6ea <__ieee754_asin+0x1da>
 800d590:	a393      	add	r3, pc, #588	@ (adr r3, 800d7e0 <__ieee754_asin+0x2d0>)
 800d592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d596:	4620      	mov	r0, r4
 800d598:	4629      	mov	r1, r5
 800d59a:	f7f2 fe77 	bl	800028c <__adddf3>
 800d59e:	4ba8      	ldr	r3, [pc, #672]	@ (800d840 <__ieee754_asin+0x330>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f7f3 fab9 	bl	8000b18 <__aeabi_dcmpgt>
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d1e6      	bne.n	800d578 <__ieee754_asin+0x68>
 800d5aa:	ec45 4b10 	vmov	d0, r4, r5
 800d5ae:	f7ff fe31 	bl	800d214 <fabs>
 800d5b2:	49a3      	ldr	r1, [pc, #652]	@ (800d840 <__ieee754_asin+0x330>)
 800d5b4:	ec53 2b10 	vmov	r2, r3, d0
 800d5b8:	2000      	movs	r0, #0
 800d5ba:	f7f2 fe65 	bl	8000288 <__aeabi_dsub>
 800d5be:	4ba1      	ldr	r3, [pc, #644]	@ (800d844 <__ieee754_asin+0x334>)
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f7f3 f819 	bl	80005f8 <__aeabi_dmul>
 800d5c6:	a388      	add	r3, pc, #544	@ (adr r3, 800d7e8 <__ieee754_asin+0x2d8>)
 800d5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	f7f3 f812 	bl	80005f8 <__aeabi_dmul>
 800d5d4:	a386      	add	r3, pc, #536	@ (adr r3, 800d7f0 <__ieee754_asin+0x2e0>)
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	f7f2 fe57 	bl	800028c <__adddf3>
 800d5de:	4622      	mov	r2, r4
 800d5e0:	462b      	mov	r3, r5
 800d5e2:	f7f3 f809 	bl	80005f8 <__aeabi_dmul>
 800d5e6:	a384      	add	r3, pc, #528	@ (adr r3, 800d7f8 <__ieee754_asin+0x2e8>)
 800d5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ec:	f7f2 fe4c 	bl	8000288 <__aeabi_dsub>
 800d5f0:	4622      	mov	r2, r4
 800d5f2:	462b      	mov	r3, r5
 800d5f4:	f7f3 f800 	bl	80005f8 <__aeabi_dmul>
 800d5f8:	a381      	add	r3, pc, #516	@ (adr r3, 800d800 <__ieee754_asin+0x2f0>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f2 fe45 	bl	800028c <__adddf3>
 800d602:	4622      	mov	r2, r4
 800d604:	462b      	mov	r3, r5
 800d606:	f7f2 fff7 	bl	80005f8 <__aeabi_dmul>
 800d60a:	a37f      	add	r3, pc, #508	@ (adr r3, 800d808 <__ieee754_asin+0x2f8>)
 800d60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d610:	f7f2 fe3a 	bl	8000288 <__aeabi_dsub>
 800d614:	4622      	mov	r2, r4
 800d616:	462b      	mov	r3, r5
 800d618:	f7f2 ffee 	bl	80005f8 <__aeabi_dmul>
 800d61c:	a37c      	add	r3, pc, #496	@ (adr r3, 800d810 <__ieee754_asin+0x300>)
 800d61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d622:	f7f2 fe33 	bl	800028c <__adddf3>
 800d626:	4622      	mov	r2, r4
 800d628:	462b      	mov	r3, r5
 800d62a:	f7f2 ffe5 	bl	80005f8 <__aeabi_dmul>
 800d62e:	a37a      	add	r3, pc, #488	@ (adr r3, 800d818 <__ieee754_asin+0x308>)
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d638:	4620      	mov	r0, r4
 800d63a:	4629      	mov	r1, r5
 800d63c:	f7f2 ffdc 	bl	80005f8 <__aeabi_dmul>
 800d640:	a377      	add	r3, pc, #476	@ (adr r3, 800d820 <__ieee754_asin+0x310>)
 800d642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d646:	f7f2 fe1f 	bl	8000288 <__aeabi_dsub>
 800d64a:	4622      	mov	r2, r4
 800d64c:	462b      	mov	r3, r5
 800d64e:	f7f2 ffd3 	bl	80005f8 <__aeabi_dmul>
 800d652:	a375      	add	r3, pc, #468	@ (adr r3, 800d828 <__ieee754_asin+0x318>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	f7f2 fe18 	bl	800028c <__adddf3>
 800d65c:	4622      	mov	r2, r4
 800d65e:	462b      	mov	r3, r5
 800d660:	f7f2 ffca 	bl	80005f8 <__aeabi_dmul>
 800d664:	a372      	add	r3, pc, #456	@ (adr r3, 800d830 <__ieee754_asin+0x320>)
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	f7f2 fe0d 	bl	8000288 <__aeabi_dsub>
 800d66e:	4622      	mov	r2, r4
 800d670:	462b      	mov	r3, r5
 800d672:	f7f2 ffc1 	bl	80005f8 <__aeabi_dmul>
 800d676:	4b72      	ldr	r3, [pc, #456]	@ (800d840 <__ieee754_asin+0x330>)
 800d678:	2200      	movs	r2, #0
 800d67a:	f7f2 fe07 	bl	800028c <__adddf3>
 800d67e:	ec45 4b10 	vmov	d0, r4, r5
 800d682:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d686:	f7ff fe67 	bl	800d358 <__ieee754_sqrt>
 800d68a:	4b6f      	ldr	r3, [pc, #444]	@ (800d848 <__ieee754_asin+0x338>)
 800d68c:	429e      	cmp	r6, r3
 800d68e:	ec5b ab10 	vmov	sl, fp, d0
 800d692:	f240 80db 	bls.w	800d84c <__ieee754_asin+0x33c>
 800d696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d69e:	f7f3 f8d5 	bl	800084c <__aeabi_ddiv>
 800d6a2:	4652      	mov	r2, sl
 800d6a4:	465b      	mov	r3, fp
 800d6a6:	f7f2 ffa7 	bl	80005f8 <__aeabi_dmul>
 800d6aa:	4652      	mov	r2, sl
 800d6ac:	465b      	mov	r3, fp
 800d6ae:	f7f2 fded 	bl	800028c <__adddf3>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	f7f2 fde9 	bl	800028c <__adddf3>
 800d6ba:	a347      	add	r3, pc, #284	@ (adr r3, 800d7d8 <__ieee754_asin+0x2c8>)
 800d6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c0:	f7f2 fde2 	bl	8000288 <__aeabi_dsub>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	a141      	add	r1, pc, #260	@ (adr r1, 800d7d0 <__ieee754_asin+0x2c0>)
 800d6ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ce:	f7f2 fddb 	bl	8000288 <__aeabi_dsub>
 800d6d2:	9b01      	ldr	r3, [sp, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	bfdc      	itt	le
 800d6d8:	4602      	movle	r2, r0
 800d6da:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800d6de:	4604      	mov	r4, r0
 800d6e0:	460d      	mov	r5, r1
 800d6e2:	bfdc      	itt	le
 800d6e4:	4614      	movle	r4, r2
 800d6e6:	461d      	movle	r5, r3
 800d6e8:	e746      	b.n	800d578 <__ieee754_asin+0x68>
 800d6ea:	4622      	mov	r2, r4
 800d6ec:	462b      	mov	r3, r5
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	f7f2 ff81 	bl	80005f8 <__aeabi_dmul>
 800d6f6:	a33c      	add	r3, pc, #240	@ (adr r3, 800d7e8 <__ieee754_asin+0x2d8>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	4606      	mov	r6, r0
 800d6fe:	460f      	mov	r7, r1
 800d700:	f7f2 ff7a 	bl	80005f8 <__aeabi_dmul>
 800d704:	a33a      	add	r3, pc, #232	@ (adr r3, 800d7f0 <__ieee754_asin+0x2e0>)
 800d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70a:	f7f2 fdbf 	bl	800028c <__adddf3>
 800d70e:	4632      	mov	r2, r6
 800d710:	463b      	mov	r3, r7
 800d712:	f7f2 ff71 	bl	80005f8 <__aeabi_dmul>
 800d716:	a338      	add	r3, pc, #224	@ (adr r3, 800d7f8 <__ieee754_asin+0x2e8>)
 800d718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71c:	f7f2 fdb4 	bl	8000288 <__aeabi_dsub>
 800d720:	4632      	mov	r2, r6
 800d722:	463b      	mov	r3, r7
 800d724:	f7f2 ff68 	bl	80005f8 <__aeabi_dmul>
 800d728:	a335      	add	r3, pc, #212	@ (adr r3, 800d800 <__ieee754_asin+0x2f0>)
 800d72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72e:	f7f2 fdad 	bl	800028c <__adddf3>
 800d732:	4632      	mov	r2, r6
 800d734:	463b      	mov	r3, r7
 800d736:	f7f2 ff5f 	bl	80005f8 <__aeabi_dmul>
 800d73a:	a333      	add	r3, pc, #204	@ (adr r3, 800d808 <__ieee754_asin+0x2f8>)
 800d73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d740:	f7f2 fda2 	bl	8000288 <__aeabi_dsub>
 800d744:	4632      	mov	r2, r6
 800d746:	463b      	mov	r3, r7
 800d748:	f7f2 ff56 	bl	80005f8 <__aeabi_dmul>
 800d74c:	a330      	add	r3, pc, #192	@ (adr r3, 800d810 <__ieee754_asin+0x300>)
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	f7f2 fd9b 	bl	800028c <__adddf3>
 800d756:	4632      	mov	r2, r6
 800d758:	463b      	mov	r3, r7
 800d75a:	f7f2 ff4d 	bl	80005f8 <__aeabi_dmul>
 800d75e:	a32e      	add	r3, pc, #184	@ (adr r3, 800d818 <__ieee754_asin+0x308>)
 800d760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d764:	4680      	mov	r8, r0
 800d766:	4689      	mov	r9, r1
 800d768:	4630      	mov	r0, r6
 800d76a:	4639      	mov	r1, r7
 800d76c:	f7f2 ff44 	bl	80005f8 <__aeabi_dmul>
 800d770:	a32b      	add	r3, pc, #172	@ (adr r3, 800d820 <__ieee754_asin+0x310>)
 800d772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d776:	f7f2 fd87 	bl	8000288 <__aeabi_dsub>
 800d77a:	4632      	mov	r2, r6
 800d77c:	463b      	mov	r3, r7
 800d77e:	f7f2 ff3b 	bl	80005f8 <__aeabi_dmul>
 800d782:	a329      	add	r3, pc, #164	@ (adr r3, 800d828 <__ieee754_asin+0x318>)
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	f7f2 fd80 	bl	800028c <__adddf3>
 800d78c:	4632      	mov	r2, r6
 800d78e:	463b      	mov	r3, r7
 800d790:	f7f2 ff32 	bl	80005f8 <__aeabi_dmul>
 800d794:	a326      	add	r3, pc, #152	@ (adr r3, 800d830 <__ieee754_asin+0x320>)
 800d796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79a:	f7f2 fd75 	bl	8000288 <__aeabi_dsub>
 800d79e:	4632      	mov	r2, r6
 800d7a0:	463b      	mov	r3, r7
 800d7a2:	f7f2 ff29 	bl	80005f8 <__aeabi_dmul>
 800d7a6:	4b26      	ldr	r3, [pc, #152]	@ (800d840 <__ieee754_asin+0x330>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f7f2 fd6f 	bl	800028c <__adddf3>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	4649      	mov	r1, r9
 800d7b6:	f7f3 f849 	bl	800084c <__aeabi_ddiv>
 800d7ba:	4622      	mov	r2, r4
 800d7bc:	462b      	mov	r3, r5
 800d7be:	f7f2 ff1b 	bl	80005f8 <__aeabi_dmul>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	e6c6      	b.n	800d55a <__ieee754_asin+0x4a>
 800d7cc:	f3af 8000 	nop.w
 800d7d0:	54442d18 	.word	0x54442d18
 800d7d4:	3ff921fb 	.word	0x3ff921fb
 800d7d8:	33145c07 	.word	0x33145c07
 800d7dc:	3c91a626 	.word	0x3c91a626
 800d7e0:	8800759c 	.word	0x8800759c
 800d7e4:	7e37e43c 	.word	0x7e37e43c
 800d7e8:	0dfdf709 	.word	0x0dfdf709
 800d7ec:	3f023de1 	.word	0x3f023de1
 800d7f0:	7501b288 	.word	0x7501b288
 800d7f4:	3f49efe0 	.word	0x3f49efe0
 800d7f8:	b5688f3b 	.word	0xb5688f3b
 800d7fc:	3fa48228 	.word	0x3fa48228
 800d800:	0e884455 	.word	0x0e884455
 800d804:	3fc9c155 	.word	0x3fc9c155
 800d808:	03eb6f7d 	.word	0x03eb6f7d
 800d80c:	3fd4d612 	.word	0x3fd4d612
 800d810:	55555555 	.word	0x55555555
 800d814:	3fc55555 	.word	0x3fc55555
 800d818:	b12e9282 	.word	0xb12e9282
 800d81c:	3fb3b8c5 	.word	0x3fb3b8c5
 800d820:	1b8d0159 	.word	0x1b8d0159
 800d824:	3fe6066c 	.word	0x3fe6066c
 800d828:	9c598ac8 	.word	0x9c598ac8
 800d82c:	40002ae5 	.word	0x40002ae5
 800d830:	1c8a2d4b 	.word	0x1c8a2d4b
 800d834:	40033a27 	.word	0x40033a27
 800d838:	3fefffff 	.word	0x3fefffff
 800d83c:	3fdfffff 	.word	0x3fdfffff
 800d840:	3ff00000 	.word	0x3ff00000
 800d844:	3fe00000 	.word	0x3fe00000
 800d848:	3fef3332 	.word	0x3fef3332
 800d84c:	4652      	mov	r2, sl
 800d84e:	465b      	mov	r3, fp
 800d850:	4650      	mov	r0, sl
 800d852:	4659      	mov	r1, fp
 800d854:	f7f2 fd1a 	bl	800028c <__adddf3>
 800d858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d85c:	4606      	mov	r6, r0
 800d85e:	460f      	mov	r7, r1
 800d860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d864:	f7f2 fff2 	bl	800084c <__aeabi_ddiv>
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	4630      	mov	r0, r6
 800d86e:	4639      	mov	r1, r7
 800d870:	f7f2 fec2 	bl	80005f8 <__aeabi_dmul>
 800d874:	f04f 0800 	mov.w	r8, #0
 800d878:	4606      	mov	r6, r0
 800d87a:	460f      	mov	r7, r1
 800d87c:	4642      	mov	r2, r8
 800d87e:	465b      	mov	r3, fp
 800d880:	4640      	mov	r0, r8
 800d882:	4659      	mov	r1, fp
 800d884:	f7f2 feb8 	bl	80005f8 <__aeabi_dmul>
 800d888:	4602      	mov	r2, r0
 800d88a:	460b      	mov	r3, r1
 800d88c:	4620      	mov	r0, r4
 800d88e:	4629      	mov	r1, r5
 800d890:	f7f2 fcfa 	bl	8000288 <__aeabi_dsub>
 800d894:	4642      	mov	r2, r8
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1
 800d89a:	465b      	mov	r3, fp
 800d89c:	4650      	mov	r0, sl
 800d89e:	4659      	mov	r1, fp
 800d8a0:	f7f2 fcf4 	bl	800028c <__adddf3>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	f7f2 ffce 	bl	800084c <__aeabi_ddiv>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	f7f2 fcea 	bl	800028c <__adddf3>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	a112      	add	r1, pc, #72	@ (adr r1, 800d908 <__ieee754_asin+0x3f8>)
 800d8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8c2:	f7f2 fce1 	bl	8000288 <__aeabi_dsub>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	f7f2 fcdb 	bl	8000288 <__aeabi_dsub>
 800d8d2:	4642      	mov	r2, r8
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	460d      	mov	r5, r1
 800d8d8:	465b      	mov	r3, fp
 800d8da:	4640      	mov	r0, r8
 800d8dc:	4659      	mov	r1, fp
 800d8de:	f7f2 fcd5 	bl	800028c <__adddf3>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	a10a      	add	r1, pc, #40	@ (adr r1, 800d910 <__ieee754_asin+0x400>)
 800d8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ec:	f7f2 fccc 	bl	8000288 <__aeabi_dsub>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f7f2 fcc6 	bl	8000288 <__aeabi_dsub>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	a103      	add	r1, pc, #12	@ (adr r1, 800d910 <__ieee754_asin+0x400>)
 800d902:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d906:	e6e2      	b.n	800d6ce <__ieee754_asin+0x1be>
 800d908:	33145c07 	.word	0x33145c07
 800d90c:	3c91a626 	.word	0x3c91a626
 800d910:	54442d18 	.word	0x54442d18
 800d914:	3fe921fb 	.word	0x3fe921fb

0800d918 <__ieee754_atan2>:
 800d918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d91c:	ec57 6b11 	vmov	r6, r7, d1
 800d920:	4273      	negs	r3, r6
 800d922:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800daa0 <__ieee754_atan2+0x188>
 800d926:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800d92a:	4333      	orrs	r3, r6
 800d92c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d930:	4543      	cmp	r3, r8
 800d932:	ec51 0b10 	vmov	r0, r1, d0
 800d936:	4635      	mov	r5, r6
 800d938:	d809      	bhi.n	800d94e <__ieee754_atan2+0x36>
 800d93a:	4244      	negs	r4, r0
 800d93c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d940:	4304      	orrs	r4, r0
 800d942:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d946:	4544      	cmp	r4, r8
 800d948:	468e      	mov	lr, r1
 800d94a:	4681      	mov	r9, r0
 800d94c:	d907      	bls.n	800d95e <__ieee754_atan2+0x46>
 800d94e:	4632      	mov	r2, r6
 800d950:	463b      	mov	r3, r7
 800d952:	f7f2 fc9b 	bl	800028c <__adddf3>
 800d956:	ec41 0b10 	vmov	d0, r0, r1
 800d95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d95e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800d962:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800d966:	4334      	orrs	r4, r6
 800d968:	d103      	bne.n	800d972 <__ieee754_atan2+0x5a>
 800d96a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d96e:	f000 b89b 	b.w	800daa8 <atan>
 800d972:	17bc      	asrs	r4, r7, #30
 800d974:	f004 0402 	and.w	r4, r4, #2
 800d978:	ea53 0909 	orrs.w	r9, r3, r9
 800d97c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d980:	d107      	bne.n	800d992 <__ieee754_atan2+0x7a>
 800d982:	2c02      	cmp	r4, #2
 800d984:	d05f      	beq.n	800da46 <__ieee754_atan2+0x12e>
 800d986:	2c03      	cmp	r4, #3
 800d988:	d1e5      	bne.n	800d956 <__ieee754_atan2+0x3e>
 800d98a:	a141      	add	r1, pc, #260	@ (adr r1, 800da90 <__ieee754_atan2+0x178>)
 800d98c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d990:	e7e1      	b.n	800d956 <__ieee754_atan2+0x3e>
 800d992:	4315      	orrs	r5, r2
 800d994:	d106      	bne.n	800d9a4 <__ieee754_atan2+0x8c>
 800d996:	f1be 0f00 	cmp.w	lr, #0
 800d99a:	da5f      	bge.n	800da5c <__ieee754_atan2+0x144>
 800d99c:	a13e      	add	r1, pc, #248	@ (adr r1, 800da98 <__ieee754_atan2+0x180>)
 800d99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9a2:	e7d8      	b.n	800d956 <__ieee754_atan2+0x3e>
 800d9a4:	4542      	cmp	r2, r8
 800d9a6:	d10f      	bne.n	800d9c8 <__ieee754_atan2+0xb0>
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800d9ae:	d107      	bne.n	800d9c0 <__ieee754_atan2+0xa8>
 800d9b0:	2c02      	cmp	r4, #2
 800d9b2:	d84c      	bhi.n	800da4e <__ieee754_atan2+0x136>
 800d9b4:	4b34      	ldr	r3, [pc, #208]	@ (800da88 <__ieee754_atan2+0x170>)
 800d9b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9be:	e7ca      	b.n	800d956 <__ieee754_atan2+0x3e>
 800d9c0:	2c02      	cmp	r4, #2
 800d9c2:	d848      	bhi.n	800da56 <__ieee754_atan2+0x13e>
 800d9c4:	4b31      	ldr	r3, [pc, #196]	@ (800da8c <__ieee754_atan2+0x174>)
 800d9c6:	e7f6      	b.n	800d9b6 <__ieee754_atan2+0x9e>
 800d9c8:	4543      	cmp	r3, r8
 800d9ca:	d0e4      	beq.n	800d996 <__ieee754_atan2+0x7e>
 800d9cc:	1a9b      	subs	r3, r3, r2
 800d9ce:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d9d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d9d6:	da1e      	bge.n	800da16 <__ieee754_atan2+0xfe>
 800d9d8:	2f00      	cmp	r7, #0
 800d9da:	da01      	bge.n	800d9e0 <__ieee754_atan2+0xc8>
 800d9dc:	323c      	adds	r2, #60	@ 0x3c
 800d9de:	db1e      	blt.n	800da1e <__ieee754_atan2+0x106>
 800d9e0:	4632      	mov	r2, r6
 800d9e2:	463b      	mov	r3, r7
 800d9e4:	f7f2 ff32 	bl	800084c <__aeabi_ddiv>
 800d9e8:	ec41 0b10 	vmov	d0, r0, r1
 800d9ec:	f7ff fc12 	bl	800d214 <fabs>
 800d9f0:	f000 f85a 	bl	800daa8 <atan>
 800d9f4:	ec51 0b10 	vmov	r0, r1, d0
 800d9f8:	2c01      	cmp	r4, #1
 800d9fa:	d013      	beq.n	800da24 <__ieee754_atan2+0x10c>
 800d9fc:	2c02      	cmp	r4, #2
 800d9fe:	d015      	beq.n	800da2c <__ieee754_atan2+0x114>
 800da00:	2c00      	cmp	r4, #0
 800da02:	d0a8      	beq.n	800d956 <__ieee754_atan2+0x3e>
 800da04:	a318      	add	r3, pc, #96	@ (adr r3, 800da68 <__ieee754_atan2+0x150>)
 800da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0a:	f7f2 fc3d 	bl	8000288 <__aeabi_dsub>
 800da0e:	a318      	add	r3, pc, #96	@ (adr r3, 800da70 <__ieee754_atan2+0x158>)
 800da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da14:	e014      	b.n	800da40 <__ieee754_atan2+0x128>
 800da16:	a118      	add	r1, pc, #96	@ (adr r1, 800da78 <__ieee754_atan2+0x160>)
 800da18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da1c:	e7ec      	b.n	800d9f8 <__ieee754_atan2+0xe0>
 800da1e:	2000      	movs	r0, #0
 800da20:	2100      	movs	r1, #0
 800da22:	e7e9      	b.n	800d9f8 <__ieee754_atan2+0xe0>
 800da24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da28:	4619      	mov	r1, r3
 800da2a:	e794      	b.n	800d956 <__ieee754_atan2+0x3e>
 800da2c:	a30e      	add	r3, pc, #56	@ (adr r3, 800da68 <__ieee754_atan2+0x150>)
 800da2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da32:	f7f2 fc29 	bl	8000288 <__aeabi_dsub>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	a10d      	add	r1, pc, #52	@ (adr r1, 800da70 <__ieee754_atan2+0x158>)
 800da3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da40:	f7f2 fc22 	bl	8000288 <__aeabi_dsub>
 800da44:	e787      	b.n	800d956 <__ieee754_atan2+0x3e>
 800da46:	a10a      	add	r1, pc, #40	@ (adr r1, 800da70 <__ieee754_atan2+0x158>)
 800da48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da4c:	e783      	b.n	800d956 <__ieee754_atan2+0x3e>
 800da4e:	a10c      	add	r1, pc, #48	@ (adr r1, 800da80 <__ieee754_atan2+0x168>)
 800da50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da54:	e77f      	b.n	800d956 <__ieee754_atan2+0x3e>
 800da56:	2000      	movs	r0, #0
 800da58:	2100      	movs	r1, #0
 800da5a:	e77c      	b.n	800d956 <__ieee754_atan2+0x3e>
 800da5c:	a106      	add	r1, pc, #24	@ (adr r1, 800da78 <__ieee754_atan2+0x160>)
 800da5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da62:	e778      	b.n	800d956 <__ieee754_atan2+0x3e>
 800da64:	f3af 8000 	nop.w
 800da68:	33145c07 	.word	0x33145c07
 800da6c:	3ca1a626 	.word	0x3ca1a626
 800da70:	54442d18 	.word	0x54442d18
 800da74:	400921fb 	.word	0x400921fb
 800da78:	54442d18 	.word	0x54442d18
 800da7c:	3ff921fb 	.word	0x3ff921fb
 800da80:	54442d18 	.word	0x54442d18
 800da84:	3fe921fb 	.word	0x3fe921fb
 800da88:	0800ebf0 	.word	0x0800ebf0
 800da8c:	0800ebd8 	.word	0x0800ebd8
 800da90:	54442d18 	.word	0x54442d18
 800da94:	c00921fb 	.word	0xc00921fb
 800da98:	54442d18 	.word	0x54442d18
 800da9c:	bff921fb 	.word	0xbff921fb
 800daa0:	7ff00000 	.word	0x7ff00000
 800daa4:	00000000 	.word	0x00000000

0800daa8 <atan>:
 800daa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daac:	ec55 4b10 	vmov	r4, r5, d0
 800dab0:	4bbf      	ldr	r3, [pc, #764]	@ (800ddb0 <atan+0x308>)
 800dab2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800dab6:	429e      	cmp	r6, r3
 800dab8:	46ab      	mov	fp, r5
 800daba:	d918      	bls.n	800daee <atan+0x46>
 800dabc:	4bbd      	ldr	r3, [pc, #756]	@ (800ddb4 <atan+0x30c>)
 800dabe:	429e      	cmp	r6, r3
 800dac0:	d801      	bhi.n	800dac6 <atan+0x1e>
 800dac2:	d109      	bne.n	800dad8 <atan+0x30>
 800dac4:	b144      	cbz	r4, 800dad8 <atan+0x30>
 800dac6:	4622      	mov	r2, r4
 800dac8:	462b      	mov	r3, r5
 800daca:	4620      	mov	r0, r4
 800dacc:	4629      	mov	r1, r5
 800dace:	f7f2 fbdd 	bl	800028c <__adddf3>
 800dad2:	4604      	mov	r4, r0
 800dad4:	460d      	mov	r5, r1
 800dad6:	e006      	b.n	800dae6 <atan+0x3e>
 800dad8:	f1bb 0f00 	cmp.w	fp, #0
 800dadc:	f340 812b 	ble.w	800dd36 <atan+0x28e>
 800dae0:	a597      	add	r5, pc, #604	@ (adr r5, 800dd40 <atan+0x298>)
 800dae2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dae6:	ec45 4b10 	vmov	d0, r4, r5
 800daea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daee:	4bb2      	ldr	r3, [pc, #712]	@ (800ddb8 <atan+0x310>)
 800daf0:	429e      	cmp	r6, r3
 800daf2:	d813      	bhi.n	800db1c <atan+0x74>
 800daf4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800daf8:	429e      	cmp	r6, r3
 800dafa:	d80c      	bhi.n	800db16 <atan+0x6e>
 800dafc:	a392      	add	r3, pc, #584	@ (adr r3, 800dd48 <atan+0x2a0>)
 800dafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db02:	4620      	mov	r0, r4
 800db04:	4629      	mov	r1, r5
 800db06:	f7f2 fbc1 	bl	800028c <__adddf3>
 800db0a:	4bac      	ldr	r3, [pc, #688]	@ (800ddbc <atan+0x314>)
 800db0c:	2200      	movs	r2, #0
 800db0e:	f7f3 f803 	bl	8000b18 <__aeabi_dcmpgt>
 800db12:	2800      	cmp	r0, #0
 800db14:	d1e7      	bne.n	800dae6 <atan+0x3e>
 800db16:	f04f 3aff 	mov.w	sl, #4294967295
 800db1a:	e029      	b.n	800db70 <atan+0xc8>
 800db1c:	f7ff fb7a 	bl	800d214 <fabs>
 800db20:	4ba7      	ldr	r3, [pc, #668]	@ (800ddc0 <atan+0x318>)
 800db22:	429e      	cmp	r6, r3
 800db24:	ec55 4b10 	vmov	r4, r5, d0
 800db28:	f200 80bc 	bhi.w	800dca4 <atan+0x1fc>
 800db2c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800db30:	429e      	cmp	r6, r3
 800db32:	f200 809e 	bhi.w	800dc72 <atan+0x1ca>
 800db36:	4622      	mov	r2, r4
 800db38:	462b      	mov	r3, r5
 800db3a:	4620      	mov	r0, r4
 800db3c:	4629      	mov	r1, r5
 800db3e:	f7f2 fba5 	bl	800028c <__adddf3>
 800db42:	4b9e      	ldr	r3, [pc, #632]	@ (800ddbc <atan+0x314>)
 800db44:	2200      	movs	r2, #0
 800db46:	f7f2 fb9f 	bl	8000288 <__aeabi_dsub>
 800db4a:	2200      	movs	r2, #0
 800db4c:	4606      	mov	r6, r0
 800db4e:	460f      	mov	r7, r1
 800db50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800db54:	4620      	mov	r0, r4
 800db56:	4629      	mov	r1, r5
 800db58:	f7f2 fb98 	bl	800028c <__adddf3>
 800db5c:	4602      	mov	r2, r0
 800db5e:	460b      	mov	r3, r1
 800db60:	4630      	mov	r0, r6
 800db62:	4639      	mov	r1, r7
 800db64:	f7f2 fe72 	bl	800084c <__aeabi_ddiv>
 800db68:	f04f 0a00 	mov.w	sl, #0
 800db6c:	4604      	mov	r4, r0
 800db6e:	460d      	mov	r5, r1
 800db70:	4622      	mov	r2, r4
 800db72:	462b      	mov	r3, r5
 800db74:	4620      	mov	r0, r4
 800db76:	4629      	mov	r1, r5
 800db78:	f7f2 fd3e 	bl	80005f8 <__aeabi_dmul>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4680      	mov	r8, r0
 800db82:	4689      	mov	r9, r1
 800db84:	f7f2 fd38 	bl	80005f8 <__aeabi_dmul>
 800db88:	a371      	add	r3, pc, #452	@ (adr r3, 800dd50 <atan+0x2a8>)
 800db8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8e:	4606      	mov	r6, r0
 800db90:	460f      	mov	r7, r1
 800db92:	f7f2 fd31 	bl	80005f8 <__aeabi_dmul>
 800db96:	a370      	add	r3, pc, #448	@ (adr r3, 800dd58 <atan+0x2b0>)
 800db98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9c:	f7f2 fb76 	bl	800028c <__adddf3>
 800dba0:	4632      	mov	r2, r6
 800dba2:	463b      	mov	r3, r7
 800dba4:	f7f2 fd28 	bl	80005f8 <__aeabi_dmul>
 800dba8:	a36d      	add	r3, pc, #436	@ (adr r3, 800dd60 <atan+0x2b8>)
 800dbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbae:	f7f2 fb6d 	bl	800028c <__adddf3>
 800dbb2:	4632      	mov	r2, r6
 800dbb4:	463b      	mov	r3, r7
 800dbb6:	f7f2 fd1f 	bl	80005f8 <__aeabi_dmul>
 800dbba:	a36b      	add	r3, pc, #428	@ (adr r3, 800dd68 <atan+0x2c0>)
 800dbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc0:	f7f2 fb64 	bl	800028c <__adddf3>
 800dbc4:	4632      	mov	r2, r6
 800dbc6:	463b      	mov	r3, r7
 800dbc8:	f7f2 fd16 	bl	80005f8 <__aeabi_dmul>
 800dbcc:	a368      	add	r3, pc, #416	@ (adr r3, 800dd70 <atan+0x2c8>)
 800dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd2:	f7f2 fb5b 	bl	800028c <__adddf3>
 800dbd6:	4632      	mov	r2, r6
 800dbd8:	463b      	mov	r3, r7
 800dbda:	f7f2 fd0d 	bl	80005f8 <__aeabi_dmul>
 800dbde:	a366      	add	r3, pc, #408	@ (adr r3, 800dd78 <atan+0x2d0>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	f7f2 fb52 	bl	800028c <__adddf3>
 800dbe8:	4642      	mov	r2, r8
 800dbea:	464b      	mov	r3, r9
 800dbec:	f7f2 fd04 	bl	80005f8 <__aeabi_dmul>
 800dbf0:	a363      	add	r3, pc, #396	@ (adr r3, 800dd80 <atan+0x2d8>)
 800dbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf6:	4680      	mov	r8, r0
 800dbf8:	4689      	mov	r9, r1
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	4639      	mov	r1, r7
 800dbfe:	f7f2 fcfb 	bl	80005f8 <__aeabi_dmul>
 800dc02:	a361      	add	r3, pc, #388	@ (adr r3, 800dd88 <atan+0x2e0>)
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	f7f2 fb3e 	bl	8000288 <__aeabi_dsub>
 800dc0c:	4632      	mov	r2, r6
 800dc0e:	463b      	mov	r3, r7
 800dc10:	f7f2 fcf2 	bl	80005f8 <__aeabi_dmul>
 800dc14:	a35e      	add	r3, pc, #376	@ (adr r3, 800dd90 <atan+0x2e8>)
 800dc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1a:	f7f2 fb35 	bl	8000288 <__aeabi_dsub>
 800dc1e:	4632      	mov	r2, r6
 800dc20:	463b      	mov	r3, r7
 800dc22:	f7f2 fce9 	bl	80005f8 <__aeabi_dmul>
 800dc26:	a35c      	add	r3, pc, #368	@ (adr r3, 800dd98 <atan+0x2f0>)
 800dc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2c:	f7f2 fb2c 	bl	8000288 <__aeabi_dsub>
 800dc30:	4632      	mov	r2, r6
 800dc32:	463b      	mov	r3, r7
 800dc34:	f7f2 fce0 	bl	80005f8 <__aeabi_dmul>
 800dc38:	a359      	add	r3, pc, #356	@ (adr r3, 800dda0 <atan+0x2f8>)
 800dc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3e:	f7f2 fb23 	bl	8000288 <__aeabi_dsub>
 800dc42:	4632      	mov	r2, r6
 800dc44:	463b      	mov	r3, r7
 800dc46:	f7f2 fcd7 	bl	80005f8 <__aeabi_dmul>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	4640      	mov	r0, r8
 800dc50:	4649      	mov	r1, r9
 800dc52:	f7f2 fb1b 	bl	800028c <__adddf3>
 800dc56:	4622      	mov	r2, r4
 800dc58:	462b      	mov	r3, r5
 800dc5a:	f7f2 fccd 	bl	80005f8 <__aeabi_dmul>
 800dc5e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dc62:	4602      	mov	r2, r0
 800dc64:	460b      	mov	r3, r1
 800dc66:	d148      	bne.n	800dcfa <atan+0x252>
 800dc68:	4620      	mov	r0, r4
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	f7f2 fb0c 	bl	8000288 <__aeabi_dsub>
 800dc70:	e72f      	b.n	800dad2 <atan+0x2a>
 800dc72:	4b52      	ldr	r3, [pc, #328]	@ (800ddbc <atan+0x314>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	4620      	mov	r0, r4
 800dc78:	4629      	mov	r1, r5
 800dc7a:	f7f2 fb05 	bl	8000288 <__aeabi_dsub>
 800dc7e:	4b4f      	ldr	r3, [pc, #316]	@ (800ddbc <atan+0x314>)
 800dc80:	4606      	mov	r6, r0
 800dc82:	460f      	mov	r7, r1
 800dc84:	2200      	movs	r2, #0
 800dc86:	4620      	mov	r0, r4
 800dc88:	4629      	mov	r1, r5
 800dc8a:	f7f2 faff 	bl	800028c <__adddf3>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	460b      	mov	r3, r1
 800dc92:	4630      	mov	r0, r6
 800dc94:	4639      	mov	r1, r7
 800dc96:	f7f2 fdd9 	bl	800084c <__aeabi_ddiv>
 800dc9a:	f04f 0a01 	mov.w	sl, #1
 800dc9e:	4604      	mov	r4, r0
 800dca0:	460d      	mov	r5, r1
 800dca2:	e765      	b.n	800db70 <atan+0xc8>
 800dca4:	4b47      	ldr	r3, [pc, #284]	@ (800ddc4 <atan+0x31c>)
 800dca6:	429e      	cmp	r6, r3
 800dca8:	d21c      	bcs.n	800dce4 <atan+0x23c>
 800dcaa:	4b47      	ldr	r3, [pc, #284]	@ (800ddc8 <atan+0x320>)
 800dcac:	2200      	movs	r2, #0
 800dcae:	4620      	mov	r0, r4
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	f7f2 fae9 	bl	8000288 <__aeabi_dsub>
 800dcb6:	4b44      	ldr	r3, [pc, #272]	@ (800ddc8 <atan+0x320>)
 800dcb8:	4606      	mov	r6, r0
 800dcba:	460f      	mov	r7, r1
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	4629      	mov	r1, r5
 800dcc2:	f7f2 fc99 	bl	80005f8 <__aeabi_dmul>
 800dcc6:	4b3d      	ldr	r3, [pc, #244]	@ (800ddbc <atan+0x314>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f7f2 fadf 	bl	800028c <__adddf3>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	f7f2 fdb9 	bl	800084c <__aeabi_ddiv>
 800dcda:	f04f 0a02 	mov.w	sl, #2
 800dcde:	4604      	mov	r4, r0
 800dce0:	460d      	mov	r5, r1
 800dce2:	e745      	b.n	800db70 <atan+0xc8>
 800dce4:	4622      	mov	r2, r4
 800dce6:	462b      	mov	r3, r5
 800dce8:	4938      	ldr	r1, [pc, #224]	@ (800ddcc <atan+0x324>)
 800dcea:	2000      	movs	r0, #0
 800dcec:	f7f2 fdae 	bl	800084c <__aeabi_ddiv>
 800dcf0:	f04f 0a03 	mov.w	sl, #3
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	460d      	mov	r5, r1
 800dcf8:	e73a      	b.n	800db70 <atan+0xc8>
 800dcfa:	4b35      	ldr	r3, [pc, #212]	@ (800ddd0 <atan+0x328>)
 800dcfc:	4e35      	ldr	r6, [pc, #212]	@ (800ddd4 <atan+0x32c>)
 800dcfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	f7f2 fabf 	bl	8000288 <__aeabi_dsub>
 800dd0a:	4622      	mov	r2, r4
 800dd0c:	462b      	mov	r3, r5
 800dd0e:	f7f2 fabb 	bl	8000288 <__aeabi_dsub>
 800dd12:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dd16:	4602      	mov	r2, r0
 800dd18:	460b      	mov	r3, r1
 800dd1a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dd1e:	f7f2 fab3 	bl	8000288 <__aeabi_dsub>
 800dd22:	f1bb 0f00 	cmp.w	fp, #0
 800dd26:	4604      	mov	r4, r0
 800dd28:	460d      	mov	r5, r1
 800dd2a:	f6bf aedc 	bge.w	800dae6 <atan+0x3e>
 800dd2e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd32:	461d      	mov	r5, r3
 800dd34:	e6d7      	b.n	800dae6 <atan+0x3e>
 800dd36:	a51c      	add	r5, pc, #112	@ (adr r5, 800dda8 <atan+0x300>)
 800dd38:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd3c:	e6d3      	b.n	800dae6 <atan+0x3e>
 800dd3e:	bf00      	nop
 800dd40:	54442d18 	.word	0x54442d18
 800dd44:	3ff921fb 	.word	0x3ff921fb
 800dd48:	8800759c 	.word	0x8800759c
 800dd4c:	7e37e43c 	.word	0x7e37e43c
 800dd50:	e322da11 	.word	0xe322da11
 800dd54:	3f90ad3a 	.word	0x3f90ad3a
 800dd58:	24760deb 	.word	0x24760deb
 800dd5c:	3fa97b4b 	.word	0x3fa97b4b
 800dd60:	a0d03d51 	.word	0xa0d03d51
 800dd64:	3fb10d66 	.word	0x3fb10d66
 800dd68:	c54c206e 	.word	0xc54c206e
 800dd6c:	3fb745cd 	.word	0x3fb745cd
 800dd70:	920083ff 	.word	0x920083ff
 800dd74:	3fc24924 	.word	0x3fc24924
 800dd78:	5555550d 	.word	0x5555550d
 800dd7c:	3fd55555 	.word	0x3fd55555
 800dd80:	2c6a6c2f 	.word	0x2c6a6c2f
 800dd84:	bfa2b444 	.word	0xbfa2b444
 800dd88:	52defd9a 	.word	0x52defd9a
 800dd8c:	3fadde2d 	.word	0x3fadde2d
 800dd90:	af749a6d 	.word	0xaf749a6d
 800dd94:	3fb3b0f2 	.word	0x3fb3b0f2
 800dd98:	fe231671 	.word	0xfe231671
 800dd9c:	3fbc71c6 	.word	0x3fbc71c6
 800dda0:	9998ebc4 	.word	0x9998ebc4
 800dda4:	3fc99999 	.word	0x3fc99999
 800dda8:	54442d18 	.word	0x54442d18
 800ddac:	bff921fb 	.word	0xbff921fb
 800ddb0:	440fffff 	.word	0x440fffff
 800ddb4:	7ff00000 	.word	0x7ff00000
 800ddb8:	3fdbffff 	.word	0x3fdbffff
 800ddbc:	3ff00000 	.word	0x3ff00000
 800ddc0:	3ff2ffff 	.word	0x3ff2ffff
 800ddc4:	40038000 	.word	0x40038000
 800ddc8:	3ff80000 	.word	0x3ff80000
 800ddcc:	bff00000 	.word	0xbff00000
 800ddd0:	0800ec08 	.word	0x0800ec08
 800ddd4:	0800ec28 	.word	0x0800ec28

0800ddd8 <__kernel_cosf>:
 800ddd8:	ee10 3a10 	vmov	r3, s0
 800dddc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dde0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800dde4:	eef0 6a40 	vmov.f32	s13, s0
 800dde8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ddec:	d204      	bcs.n	800ddf8 <__kernel_cosf+0x20>
 800ddee:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ddf2:	ee17 2a90 	vmov	r2, s15
 800ddf6:	b342      	cbz	r2, 800de4a <__kernel_cosf+0x72>
 800ddf8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ddfc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800de68 <__kernel_cosf+0x90>
 800de00:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800de6c <__kernel_cosf+0x94>
 800de04:	4a1a      	ldr	r2, [pc, #104]	@ (800de70 <__kernel_cosf+0x98>)
 800de06:	eea7 6a27 	vfma.f32	s12, s14, s15
 800de0a:	4293      	cmp	r3, r2
 800de0c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800de74 <__kernel_cosf+0x9c>
 800de10:	eee6 7a07 	vfma.f32	s15, s12, s14
 800de14:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800de78 <__kernel_cosf+0xa0>
 800de18:	eea7 6a87 	vfma.f32	s12, s15, s14
 800de1c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800de7c <__kernel_cosf+0xa4>
 800de20:	eee6 7a07 	vfma.f32	s15, s12, s14
 800de24:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800de80 <__kernel_cosf+0xa8>
 800de28:	eea7 6a87 	vfma.f32	s12, s15, s14
 800de2c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800de30:	ee26 6a07 	vmul.f32	s12, s12, s14
 800de34:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800de38:	eee7 0a06 	vfma.f32	s1, s14, s12
 800de3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de40:	d804      	bhi.n	800de4c <__kernel_cosf+0x74>
 800de42:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800de46:	ee30 0a67 	vsub.f32	s0, s0, s15
 800de4a:	4770      	bx	lr
 800de4c:	4a0d      	ldr	r2, [pc, #52]	@ (800de84 <__kernel_cosf+0xac>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	bf9a      	itte	ls
 800de52:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800de56:	ee07 3a10 	vmovls	s14, r3
 800de5a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800de5e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800de62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de66:	e7ec      	b.n	800de42 <__kernel_cosf+0x6a>
 800de68:	ad47d74e 	.word	0xad47d74e
 800de6c:	310f74f6 	.word	0x310f74f6
 800de70:	3e999999 	.word	0x3e999999
 800de74:	b493f27c 	.word	0xb493f27c
 800de78:	37d00d01 	.word	0x37d00d01
 800de7c:	bab60b61 	.word	0xbab60b61
 800de80:	3d2aaaab 	.word	0x3d2aaaab
 800de84:	3f480000 	.word	0x3f480000

0800de88 <__kernel_sinf>:
 800de88:	ee10 3a10 	vmov	r3, s0
 800de8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800de90:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800de94:	d204      	bcs.n	800dea0 <__kernel_sinf+0x18>
 800de96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800de9a:	ee17 3a90 	vmov	r3, s15
 800de9e:	b35b      	cbz	r3, 800def8 <__kernel_sinf+0x70>
 800dea0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dea4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800defc <__kernel_sinf+0x74>
 800dea8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800df00 <__kernel_sinf+0x78>
 800deac:	eea7 6a27 	vfma.f32	s12, s14, s15
 800deb0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800df04 <__kernel_sinf+0x7c>
 800deb4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800deb8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800df08 <__kernel_sinf+0x80>
 800debc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dec0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800df0c <__kernel_sinf+0x84>
 800dec4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800dec8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800decc:	b930      	cbnz	r0, 800dedc <__kernel_sinf+0x54>
 800dece:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800df10 <__kernel_sinf+0x88>
 800ded2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ded6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800deda:	4770      	bx	lr
 800dedc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dee0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800dee4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dee8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800deec:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800df14 <__kernel_sinf+0x8c>
 800def0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800def4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	2f2ec9d3 	.word	0x2f2ec9d3
 800df00:	b2d72f34 	.word	0xb2d72f34
 800df04:	3638ef1b 	.word	0x3638ef1b
 800df08:	b9500d01 	.word	0xb9500d01
 800df0c:	3c088889 	.word	0x3c088889
 800df10:	be2aaaab 	.word	0xbe2aaaab
 800df14:	3e2aaaab 	.word	0x3e2aaaab

0800df18 <__ieee754_rem_pio2f>:
 800df18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df1a:	ee10 6a10 	vmov	r6, s0
 800df1e:	4b88      	ldr	r3, [pc, #544]	@ (800e140 <__ieee754_rem_pio2f+0x228>)
 800df20:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800df24:	429d      	cmp	r5, r3
 800df26:	b087      	sub	sp, #28
 800df28:	4604      	mov	r4, r0
 800df2a:	d805      	bhi.n	800df38 <__ieee754_rem_pio2f+0x20>
 800df2c:	2300      	movs	r3, #0
 800df2e:	ed80 0a00 	vstr	s0, [r0]
 800df32:	6043      	str	r3, [r0, #4]
 800df34:	2000      	movs	r0, #0
 800df36:	e022      	b.n	800df7e <__ieee754_rem_pio2f+0x66>
 800df38:	4b82      	ldr	r3, [pc, #520]	@ (800e144 <__ieee754_rem_pio2f+0x22c>)
 800df3a:	429d      	cmp	r5, r3
 800df3c:	d83a      	bhi.n	800dfb4 <__ieee754_rem_pio2f+0x9c>
 800df3e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800df42:	2e00      	cmp	r6, #0
 800df44:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800e148 <__ieee754_rem_pio2f+0x230>
 800df48:	4a80      	ldr	r2, [pc, #512]	@ (800e14c <__ieee754_rem_pio2f+0x234>)
 800df4a:	f023 030f 	bic.w	r3, r3, #15
 800df4e:	dd18      	ble.n	800df82 <__ieee754_rem_pio2f+0x6a>
 800df50:	4293      	cmp	r3, r2
 800df52:	ee70 7a47 	vsub.f32	s15, s0, s14
 800df56:	bf09      	itett	eq
 800df58:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800e150 <__ieee754_rem_pio2f+0x238>
 800df5c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800e154 <__ieee754_rem_pio2f+0x23c>
 800df60:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800e158 <__ieee754_rem_pio2f+0x240>
 800df64:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800df68:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800df6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df70:	ed80 7a00 	vstr	s14, [r0]
 800df74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800df78:	edc0 7a01 	vstr	s15, [r0, #4]
 800df7c:	2001      	movs	r0, #1
 800df7e:	b007      	add	sp, #28
 800df80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df82:	4293      	cmp	r3, r2
 800df84:	ee70 7a07 	vadd.f32	s15, s0, s14
 800df88:	bf09      	itett	eq
 800df8a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800e150 <__ieee754_rem_pio2f+0x238>
 800df8e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800e154 <__ieee754_rem_pio2f+0x23c>
 800df92:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800e158 <__ieee754_rem_pio2f+0x240>
 800df96:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800df9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800df9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfa2:	ed80 7a00 	vstr	s14, [r0]
 800dfa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfaa:	edc0 7a01 	vstr	s15, [r0, #4]
 800dfae:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb2:	e7e4      	b.n	800df7e <__ieee754_rem_pio2f+0x66>
 800dfb4:	4b69      	ldr	r3, [pc, #420]	@ (800e15c <__ieee754_rem_pio2f+0x244>)
 800dfb6:	429d      	cmp	r5, r3
 800dfb8:	d873      	bhi.n	800e0a2 <__ieee754_rem_pio2f+0x18a>
 800dfba:	f7ff f977 	bl	800d2ac <fabsf>
 800dfbe:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800e160 <__ieee754_rem_pio2f+0x248>
 800dfc2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dfc6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dfca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dfce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dfd2:	ee17 0a90 	vmov	r0, s15
 800dfd6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e148 <__ieee754_rem_pio2f+0x230>
 800dfda:	eea7 0a67 	vfms.f32	s0, s14, s15
 800dfde:	281f      	cmp	r0, #31
 800dfe0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e154 <__ieee754_rem_pio2f+0x23c>
 800dfe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfe8:	eeb1 6a47 	vneg.f32	s12, s14
 800dfec:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dff0:	ee16 1a90 	vmov	r1, s13
 800dff4:	dc09      	bgt.n	800e00a <__ieee754_rem_pio2f+0xf2>
 800dff6:	4a5b      	ldr	r2, [pc, #364]	@ (800e164 <__ieee754_rem_pio2f+0x24c>)
 800dff8:	1e47      	subs	r7, r0, #1
 800dffa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800dffe:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800e002:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e006:	4293      	cmp	r3, r2
 800e008:	d107      	bne.n	800e01a <__ieee754_rem_pio2f+0x102>
 800e00a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800e00e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800e012:	2a08      	cmp	r2, #8
 800e014:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e018:	dc14      	bgt.n	800e044 <__ieee754_rem_pio2f+0x12c>
 800e01a:	6021      	str	r1, [r4, #0]
 800e01c:	ed94 7a00 	vldr	s14, [r4]
 800e020:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e024:	2e00      	cmp	r6, #0
 800e026:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e02a:	ed84 0a01 	vstr	s0, [r4, #4]
 800e02e:	daa6      	bge.n	800df7e <__ieee754_rem_pio2f+0x66>
 800e030:	eeb1 7a47 	vneg.f32	s14, s14
 800e034:	eeb1 0a40 	vneg.f32	s0, s0
 800e038:	ed84 7a00 	vstr	s14, [r4]
 800e03c:	ed84 0a01 	vstr	s0, [r4, #4]
 800e040:	4240      	negs	r0, r0
 800e042:	e79c      	b.n	800df7e <__ieee754_rem_pio2f+0x66>
 800e044:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800e150 <__ieee754_rem_pio2f+0x238>
 800e048:	eef0 6a40 	vmov.f32	s13, s0
 800e04c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e050:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e054:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e058:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e158 <__ieee754_rem_pio2f+0x240>
 800e05c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e060:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e064:	ee15 2a90 	vmov	r2, s11
 800e068:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e06c:	1a5b      	subs	r3, r3, r1
 800e06e:	2b19      	cmp	r3, #25
 800e070:	dc04      	bgt.n	800e07c <__ieee754_rem_pio2f+0x164>
 800e072:	edc4 5a00 	vstr	s11, [r4]
 800e076:	eeb0 0a66 	vmov.f32	s0, s13
 800e07a:	e7cf      	b.n	800e01c <__ieee754_rem_pio2f+0x104>
 800e07c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800e168 <__ieee754_rem_pio2f+0x250>
 800e080:	eeb0 0a66 	vmov.f32	s0, s13
 800e084:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e088:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e08c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800e16c <__ieee754_rem_pio2f+0x254>
 800e090:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e094:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e098:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e09c:	ed84 7a00 	vstr	s14, [r4]
 800e0a0:	e7bc      	b.n	800e01c <__ieee754_rem_pio2f+0x104>
 800e0a2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e0a6:	d306      	bcc.n	800e0b6 <__ieee754_rem_pio2f+0x19e>
 800e0a8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e0ac:	edc0 7a01 	vstr	s15, [r0, #4]
 800e0b0:	edc0 7a00 	vstr	s15, [r0]
 800e0b4:	e73e      	b.n	800df34 <__ieee754_rem_pio2f+0x1c>
 800e0b6:	15ea      	asrs	r2, r5, #23
 800e0b8:	3a86      	subs	r2, #134	@ 0x86
 800e0ba:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e0be:	ee07 3a90 	vmov	s15, r3
 800e0c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e0c6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800e170 <__ieee754_rem_pio2f+0x258>
 800e0ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e0ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0d2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e0d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e0da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e0de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e0e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0e6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e0ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e0ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f6:	edcd 7a05 	vstr	s15, [sp, #20]
 800e0fa:	d11e      	bne.n	800e13a <__ieee754_rem_pio2f+0x222>
 800e0fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e104:	bf0c      	ite	eq
 800e106:	2301      	moveq	r3, #1
 800e108:	2302      	movne	r3, #2
 800e10a:	491a      	ldr	r1, [pc, #104]	@ (800e174 <__ieee754_rem_pio2f+0x25c>)
 800e10c:	9101      	str	r1, [sp, #4]
 800e10e:	2102      	movs	r1, #2
 800e110:	9100      	str	r1, [sp, #0]
 800e112:	a803      	add	r0, sp, #12
 800e114:	4621      	mov	r1, r4
 800e116:	f000 f895 	bl	800e244 <__kernel_rem_pio2f>
 800e11a:	2e00      	cmp	r6, #0
 800e11c:	f6bf af2f 	bge.w	800df7e <__ieee754_rem_pio2f+0x66>
 800e120:	edd4 7a00 	vldr	s15, [r4]
 800e124:	eef1 7a67 	vneg.f32	s15, s15
 800e128:	edc4 7a00 	vstr	s15, [r4]
 800e12c:	edd4 7a01 	vldr	s15, [r4, #4]
 800e130:	eef1 7a67 	vneg.f32	s15, s15
 800e134:	edc4 7a01 	vstr	s15, [r4, #4]
 800e138:	e782      	b.n	800e040 <__ieee754_rem_pio2f+0x128>
 800e13a:	2303      	movs	r3, #3
 800e13c:	e7e5      	b.n	800e10a <__ieee754_rem_pio2f+0x1f2>
 800e13e:	bf00      	nop
 800e140:	3f490fd8 	.word	0x3f490fd8
 800e144:	4016cbe3 	.word	0x4016cbe3
 800e148:	3fc90f80 	.word	0x3fc90f80
 800e14c:	3fc90fd0 	.word	0x3fc90fd0
 800e150:	37354400 	.word	0x37354400
 800e154:	37354443 	.word	0x37354443
 800e158:	2e85a308 	.word	0x2e85a308
 800e15c:	43490f80 	.word	0x43490f80
 800e160:	3f22f984 	.word	0x3f22f984
 800e164:	0800ec48 	.word	0x0800ec48
 800e168:	2e85a300 	.word	0x2e85a300
 800e16c:	248d3132 	.word	0x248d3132
 800e170:	43800000 	.word	0x43800000
 800e174:	0800ecc8 	.word	0x0800ecc8

0800e178 <scalbnf>:
 800e178:	ee10 3a10 	vmov	r3, s0
 800e17c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e180:	d02b      	beq.n	800e1da <scalbnf+0x62>
 800e182:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e186:	d302      	bcc.n	800e18e <scalbnf+0x16>
 800e188:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e18c:	4770      	bx	lr
 800e18e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e192:	d123      	bne.n	800e1dc <scalbnf+0x64>
 800e194:	4b24      	ldr	r3, [pc, #144]	@ (800e228 <scalbnf+0xb0>)
 800e196:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800e22c <scalbnf+0xb4>
 800e19a:	4298      	cmp	r0, r3
 800e19c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e1a0:	db17      	blt.n	800e1d2 <scalbnf+0x5a>
 800e1a2:	ee10 3a10 	vmov	r3, s0
 800e1a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e1aa:	3a19      	subs	r2, #25
 800e1ac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e1b0:	4288      	cmp	r0, r1
 800e1b2:	dd15      	ble.n	800e1e0 <scalbnf+0x68>
 800e1b4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800e230 <scalbnf+0xb8>
 800e1b8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800e234 <scalbnf+0xbc>
 800e1bc:	ee10 3a10 	vmov	r3, s0
 800e1c0:	eeb0 7a67 	vmov.f32	s14, s15
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	bfb8      	it	lt
 800e1c8:	eef0 7a66 	vmovlt.f32	s15, s13
 800e1cc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e1d0:	4770      	bx	lr
 800e1d2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e238 <scalbnf+0xc0>
 800e1d6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e1da:	4770      	bx	lr
 800e1dc:	0dd2      	lsrs	r2, r2, #23
 800e1de:	e7e5      	b.n	800e1ac <scalbnf+0x34>
 800e1e0:	4410      	add	r0, r2
 800e1e2:	28fe      	cmp	r0, #254	@ 0xfe
 800e1e4:	dce6      	bgt.n	800e1b4 <scalbnf+0x3c>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	dd06      	ble.n	800e1f8 <scalbnf+0x80>
 800e1ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e1ee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e1f2:	ee00 3a10 	vmov	s0, r3
 800e1f6:	4770      	bx	lr
 800e1f8:	f110 0f16 	cmn.w	r0, #22
 800e1fc:	da09      	bge.n	800e212 <scalbnf+0x9a>
 800e1fe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800e238 <scalbnf+0xc0>
 800e202:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e23c <scalbnf+0xc4>
 800e206:	ee10 3a10 	vmov	r3, s0
 800e20a:	eeb0 7a67 	vmov.f32	s14, s15
 800e20e:	2b00      	cmp	r3, #0
 800e210:	e7d9      	b.n	800e1c6 <scalbnf+0x4e>
 800e212:	3019      	adds	r0, #25
 800e214:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e218:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e21c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e240 <scalbnf+0xc8>
 800e220:	ee07 3a90 	vmov	s15, r3
 800e224:	e7d7      	b.n	800e1d6 <scalbnf+0x5e>
 800e226:	bf00      	nop
 800e228:	ffff3cb0 	.word	0xffff3cb0
 800e22c:	4c000000 	.word	0x4c000000
 800e230:	7149f2ca 	.word	0x7149f2ca
 800e234:	f149f2ca 	.word	0xf149f2ca
 800e238:	0da24260 	.word	0x0da24260
 800e23c:	8da24260 	.word	0x8da24260
 800e240:	33000000 	.word	0x33000000

0800e244 <__kernel_rem_pio2f>:
 800e244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e248:	ed2d 8b04 	vpush	{d8-d9}
 800e24c:	b0d9      	sub	sp, #356	@ 0x164
 800e24e:	4690      	mov	r8, r2
 800e250:	9001      	str	r0, [sp, #4]
 800e252:	4ab9      	ldr	r2, [pc, #740]	@ (800e538 <__kernel_rem_pio2f+0x2f4>)
 800e254:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800e256:	f118 0f04 	cmn.w	r8, #4
 800e25a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800e25e:	460f      	mov	r7, r1
 800e260:	f103 3bff 	add.w	fp, r3, #4294967295
 800e264:	db27      	blt.n	800e2b6 <__kernel_rem_pio2f+0x72>
 800e266:	f1b8 0203 	subs.w	r2, r8, #3
 800e26a:	bf48      	it	mi
 800e26c:	f108 0204 	addmi.w	r2, r8, #4
 800e270:	10d2      	asrs	r2, r2, #3
 800e272:	1c55      	adds	r5, r2, #1
 800e274:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e276:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800e548 <__kernel_rem_pio2f+0x304>
 800e27a:	00e8      	lsls	r0, r5, #3
 800e27c:	eba2 060b 	sub.w	r6, r2, fp
 800e280:	9002      	str	r0, [sp, #8]
 800e282:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800e286:	eb0a 0c0b 	add.w	ip, sl, fp
 800e28a:	ac1c      	add	r4, sp, #112	@ 0x70
 800e28c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800e290:	2000      	movs	r0, #0
 800e292:	4560      	cmp	r0, ip
 800e294:	dd11      	ble.n	800e2ba <__kernel_rem_pio2f+0x76>
 800e296:	a91c      	add	r1, sp, #112	@ 0x70
 800e298:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800e29c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800e2a0:	f04f 0c00 	mov.w	ip, #0
 800e2a4:	45d4      	cmp	ip, sl
 800e2a6:	dc27      	bgt.n	800e2f8 <__kernel_rem_pio2f+0xb4>
 800e2a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e2ac:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800e548 <__kernel_rem_pio2f+0x304>
 800e2b0:	4606      	mov	r6, r0
 800e2b2:	2400      	movs	r4, #0
 800e2b4:	e016      	b.n	800e2e4 <__kernel_rem_pio2f+0xa0>
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	e7db      	b.n	800e272 <__kernel_rem_pio2f+0x2e>
 800e2ba:	42c6      	cmn	r6, r0
 800e2bc:	bf5d      	ittte	pl
 800e2be:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800e2c2:	ee07 1a90 	vmovpl	s15, r1
 800e2c6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e2ca:	eef0 7a47 	vmovmi.f32	s15, s14
 800e2ce:	ece4 7a01 	vstmia	r4!, {s15}
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	e7dd      	b.n	800e292 <__kernel_rem_pio2f+0x4e>
 800e2d6:	ecfe 6a01 	vldmia	lr!, {s13}
 800e2da:	ed96 7a00 	vldr	s14, [r6]
 800e2de:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e2e2:	3401      	adds	r4, #1
 800e2e4:	455c      	cmp	r4, fp
 800e2e6:	f1a6 0604 	sub.w	r6, r6, #4
 800e2ea:	ddf4      	ble.n	800e2d6 <__kernel_rem_pio2f+0x92>
 800e2ec:	ece9 7a01 	vstmia	r9!, {s15}
 800e2f0:	f10c 0c01 	add.w	ip, ip, #1
 800e2f4:	3004      	adds	r0, #4
 800e2f6:	e7d5      	b.n	800e2a4 <__kernel_rem_pio2f+0x60>
 800e2f8:	a908      	add	r1, sp, #32
 800e2fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2fe:	9104      	str	r1, [sp, #16]
 800e300:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e302:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800e544 <__kernel_rem_pio2f+0x300>
 800e306:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800e540 <__kernel_rem_pio2f+0x2fc>
 800e30a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e30e:	9203      	str	r2, [sp, #12]
 800e310:	4654      	mov	r4, sl
 800e312:	00a2      	lsls	r2, r4, #2
 800e314:	9205      	str	r2, [sp, #20]
 800e316:	aa58      	add	r2, sp, #352	@ 0x160
 800e318:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e31c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800e320:	a944      	add	r1, sp, #272	@ 0x110
 800e322:	aa08      	add	r2, sp, #32
 800e324:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800e328:	4694      	mov	ip, r2
 800e32a:	4626      	mov	r6, r4
 800e32c:	2e00      	cmp	r6, #0
 800e32e:	f1a0 0004 	sub.w	r0, r0, #4
 800e332:	dc4c      	bgt.n	800e3ce <__kernel_rem_pio2f+0x18a>
 800e334:	4628      	mov	r0, r5
 800e336:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e33a:	f7ff ff1d 	bl	800e178 <scalbnf>
 800e33e:	eeb0 8a40 	vmov.f32	s16, s0
 800e342:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800e346:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e34a:	f000 f9ed 	bl	800e728 <floorf>
 800e34e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800e352:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e356:	2d00      	cmp	r5, #0
 800e358:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e35c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e360:	ee17 9a90 	vmov	r9, s15
 800e364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e368:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e36c:	dd41      	ble.n	800e3f2 <__kernel_rem_pio2f+0x1ae>
 800e36e:	f104 3cff 	add.w	ip, r4, #4294967295
 800e372:	a908      	add	r1, sp, #32
 800e374:	f1c5 0e08 	rsb	lr, r5, #8
 800e378:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800e37c:	fa46 f00e 	asr.w	r0, r6, lr
 800e380:	4481      	add	r9, r0
 800e382:	fa00 f00e 	lsl.w	r0, r0, lr
 800e386:	1a36      	subs	r6, r6, r0
 800e388:	f1c5 0007 	rsb	r0, r5, #7
 800e38c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800e390:	4106      	asrs	r6, r0
 800e392:	2e00      	cmp	r6, #0
 800e394:	dd3c      	ble.n	800e410 <__kernel_rem_pio2f+0x1cc>
 800e396:	f04f 0e00 	mov.w	lr, #0
 800e39a:	f109 0901 	add.w	r9, r9, #1
 800e39e:	4670      	mov	r0, lr
 800e3a0:	4574      	cmp	r4, lr
 800e3a2:	dc68      	bgt.n	800e476 <__kernel_rem_pio2f+0x232>
 800e3a4:	2d00      	cmp	r5, #0
 800e3a6:	dd03      	ble.n	800e3b0 <__kernel_rem_pio2f+0x16c>
 800e3a8:	2d01      	cmp	r5, #1
 800e3aa:	d074      	beq.n	800e496 <__kernel_rem_pio2f+0x252>
 800e3ac:	2d02      	cmp	r5, #2
 800e3ae:	d07d      	beq.n	800e4ac <__kernel_rem_pio2f+0x268>
 800e3b0:	2e02      	cmp	r6, #2
 800e3b2:	d12d      	bne.n	800e410 <__kernel_rem_pio2f+0x1cc>
 800e3b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e3b8:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e3bc:	b340      	cbz	r0, 800e410 <__kernel_rem_pio2f+0x1cc>
 800e3be:	4628      	mov	r0, r5
 800e3c0:	9306      	str	r3, [sp, #24]
 800e3c2:	f7ff fed9 	bl	800e178 <scalbnf>
 800e3c6:	9b06      	ldr	r3, [sp, #24]
 800e3c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e3cc:	e020      	b.n	800e410 <__kernel_rem_pio2f+0x1cc>
 800e3ce:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e3d2:	3e01      	subs	r6, #1
 800e3d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3dc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e3e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e3e4:	ecac 0a01 	vstmia	ip!, {s0}
 800e3e8:	ed90 0a00 	vldr	s0, [r0]
 800e3ec:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e3f0:	e79c      	b.n	800e32c <__kernel_rem_pio2f+0xe8>
 800e3f2:	d105      	bne.n	800e400 <__kernel_rem_pio2f+0x1bc>
 800e3f4:	1e60      	subs	r0, r4, #1
 800e3f6:	a908      	add	r1, sp, #32
 800e3f8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800e3fc:	11f6      	asrs	r6, r6, #7
 800e3fe:	e7c8      	b.n	800e392 <__kernel_rem_pio2f+0x14e>
 800e400:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e404:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40c:	da31      	bge.n	800e472 <__kernel_rem_pio2f+0x22e>
 800e40e:	2600      	movs	r6, #0
 800e410:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e418:	f040 8098 	bne.w	800e54c <__kernel_rem_pio2f+0x308>
 800e41c:	1e60      	subs	r0, r4, #1
 800e41e:	2200      	movs	r2, #0
 800e420:	4550      	cmp	r0, sl
 800e422:	da4b      	bge.n	800e4bc <__kernel_rem_pio2f+0x278>
 800e424:	2a00      	cmp	r2, #0
 800e426:	d065      	beq.n	800e4f4 <__kernel_rem_pio2f+0x2b0>
 800e428:	3c01      	subs	r4, #1
 800e42a:	ab08      	add	r3, sp, #32
 800e42c:	3d08      	subs	r5, #8
 800e42e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d0f8      	beq.n	800e428 <__kernel_rem_pio2f+0x1e4>
 800e436:	4628      	mov	r0, r5
 800e438:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e43c:	f7ff fe9c 	bl	800e178 <scalbnf>
 800e440:	1c63      	adds	r3, r4, #1
 800e442:	aa44      	add	r2, sp, #272	@ 0x110
 800e444:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800e544 <__kernel_rem_pio2f+0x300>
 800e448:	0099      	lsls	r1, r3, #2
 800e44a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e44e:	4623      	mov	r3, r4
 800e450:	2b00      	cmp	r3, #0
 800e452:	f280 80a9 	bge.w	800e5a8 <__kernel_rem_pio2f+0x364>
 800e456:	4623      	mov	r3, r4
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f2c0 80c7 	blt.w	800e5ec <__kernel_rem_pio2f+0x3a8>
 800e45e:	aa44      	add	r2, sp, #272	@ 0x110
 800e460:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e464:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800e53c <__kernel_rem_pio2f+0x2f8>
 800e468:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800e548 <__kernel_rem_pio2f+0x304>
 800e46c:	2000      	movs	r0, #0
 800e46e:	1ae2      	subs	r2, r4, r3
 800e470:	e0b1      	b.n	800e5d6 <__kernel_rem_pio2f+0x392>
 800e472:	2602      	movs	r6, #2
 800e474:	e78f      	b.n	800e396 <__kernel_rem_pio2f+0x152>
 800e476:	f852 1b04 	ldr.w	r1, [r2], #4
 800e47a:	b948      	cbnz	r0, 800e490 <__kernel_rem_pio2f+0x24c>
 800e47c:	b121      	cbz	r1, 800e488 <__kernel_rem_pio2f+0x244>
 800e47e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800e482:	f842 1c04 	str.w	r1, [r2, #-4]
 800e486:	2101      	movs	r1, #1
 800e488:	f10e 0e01 	add.w	lr, lr, #1
 800e48c:	4608      	mov	r0, r1
 800e48e:	e787      	b.n	800e3a0 <__kernel_rem_pio2f+0x15c>
 800e490:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800e494:	e7f5      	b.n	800e482 <__kernel_rem_pio2f+0x23e>
 800e496:	f104 3cff 	add.w	ip, r4, #4294967295
 800e49a:	aa08      	add	r2, sp, #32
 800e49c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e4a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e4a4:	a908      	add	r1, sp, #32
 800e4a6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800e4aa:	e781      	b.n	800e3b0 <__kernel_rem_pio2f+0x16c>
 800e4ac:	f104 3cff 	add.w	ip, r4, #4294967295
 800e4b0:	aa08      	add	r2, sp, #32
 800e4b2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e4b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e4ba:	e7f3      	b.n	800e4a4 <__kernel_rem_pio2f+0x260>
 800e4bc:	a908      	add	r1, sp, #32
 800e4be:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e4c2:	3801      	subs	r0, #1
 800e4c4:	430a      	orrs	r2, r1
 800e4c6:	e7ab      	b.n	800e420 <__kernel_rem_pio2f+0x1dc>
 800e4c8:	3201      	adds	r2, #1
 800e4ca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800e4ce:	2e00      	cmp	r6, #0
 800e4d0:	d0fa      	beq.n	800e4c8 <__kernel_rem_pio2f+0x284>
 800e4d2:	9905      	ldr	r1, [sp, #20]
 800e4d4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800e4d8:	eb0d 0001 	add.w	r0, sp, r1
 800e4dc:	18e6      	adds	r6, r4, r3
 800e4de:	a91c      	add	r1, sp, #112	@ 0x70
 800e4e0:	f104 0c01 	add.w	ip, r4, #1
 800e4e4:	384c      	subs	r0, #76	@ 0x4c
 800e4e6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800e4ea:	4422      	add	r2, r4
 800e4ec:	4562      	cmp	r2, ip
 800e4ee:	da04      	bge.n	800e4fa <__kernel_rem_pio2f+0x2b6>
 800e4f0:	4614      	mov	r4, r2
 800e4f2:	e70e      	b.n	800e312 <__kernel_rem_pio2f+0xce>
 800e4f4:	9804      	ldr	r0, [sp, #16]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	e7e7      	b.n	800e4ca <__kernel_rem_pio2f+0x286>
 800e4fa:	9903      	ldr	r1, [sp, #12]
 800e4fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e500:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800e504:	9105      	str	r1, [sp, #20]
 800e506:	ee07 1a90 	vmov	s15, r1
 800e50a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e50e:	2400      	movs	r4, #0
 800e510:	ece6 7a01 	vstmia	r6!, {s15}
 800e514:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800e548 <__kernel_rem_pio2f+0x304>
 800e518:	46b1      	mov	r9, r6
 800e51a:	455c      	cmp	r4, fp
 800e51c:	dd04      	ble.n	800e528 <__kernel_rem_pio2f+0x2e4>
 800e51e:	ece0 7a01 	vstmia	r0!, {s15}
 800e522:	f10c 0c01 	add.w	ip, ip, #1
 800e526:	e7e1      	b.n	800e4ec <__kernel_rem_pio2f+0x2a8>
 800e528:	ecfe 6a01 	vldmia	lr!, {s13}
 800e52c:	ed39 7a01 	vldmdb	r9!, {s14}
 800e530:	3401      	adds	r4, #1
 800e532:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e536:	e7f0      	b.n	800e51a <__kernel_rem_pio2f+0x2d6>
 800e538:	0800f00c 	.word	0x0800f00c
 800e53c:	0800efe0 	.word	0x0800efe0
 800e540:	43800000 	.word	0x43800000
 800e544:	3b800000 	.word	0x3b800000
 800e548:	00000000 	.word	0x00000000
 800e54c:	9b02      	ldr	r3, [sp, #8]
 800e54e:	eeb0 0a48 	vmov.f32	s0, s16
 800e552:	eba3 0008 	sub.w	r0, r3, r8
 800e556:	f7ff fe0f 	bl	800e178 <scalbnf>
 800e55a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800e540 <__kernel_rem_pio2f+0x2fc>
 800e55e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e566:	db19      	blt.n	800e59c <__kernel_rem_pio2f+0x358>
 800e568:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800e544 <__kernel_rem_pio2f+0x300>
 800e56c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e570:	aa08      	add	r2, sp, #32
 800e572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e576:	3508      	adds	r5, #8
 800e578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e57c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e584:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e588:	ee10 3a10 	vmov	r3, s0
 800e58c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e590:	ee17 3a90 	vmov	r3, s15
 800e594:	3401      	adds	r4, #1
 800e596:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e59a:	e74c      	b.n	800e436 <__kernel_rem_pio2f+0x1f2>
 800e59c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e5a0:	aa08      	add	r2, sp, #32
 800e5a2:	ee10 3a10 	vmov	r3, s0
 800e5a6:	e7f6      	b.n	800e596 <__kernel_rem_pio2f+0x352>
 800e5a8:	a808      	add	r0, sp, #32
 800e5aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e5ae:	9001      	str	r0, [sp, #4]
 800e5b0:	ee07 0a90 	vmov	s15, r0
 800e5b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e5be:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e5c2:	ed62 7a01 	vstmdb	r2!, {s15}
 800e5c6:	e743      	b.n	800e450 <__kernel_rem_pio2f+0x20c>
 800e5c8:	ecfc 6a01 	vldmia	ip!, {s13}
 800e5cc:	ecb5 7a01 	vldmia	r5!, {s14}
 800e5d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	4550      	cmp	r0, sl
 800e5d8:	dc01      	bgt.n	800e5de <__kernel_rem_pio2f+0x39a>
 800e5da:	4282      	cmp	r2, r0
 800e5dc:	daf4      	bge.n	800e5c8 <__kernel_rem_pio2f+0x384>
 800e5de:	a858      	add	r0, sp, #352	@ 0x160
 800e5e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e5e4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800e5e8:	3b01      	subs	r3, #1
 800e5ea:	e735      	b.n	800e458 <__kernel_rem_pio2f+0x214>
 800e5ec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	dc09      	bgt.n	800e606 <__kernel_rem_pio2f+0x3c2>
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	dc2b      	bgt.n	800e64e <__kernel_rem_pio2f+0x40a>
 800e5f6:	d044      	beq.n	800e682 <__kernel_rem_pio2f+0x43e>
 800e5f8:	f009 0007 	and.w	r0, r9, #7
 800e5fc:	b059      	add	sp, #356	@ 0x164
 800e5fe:	ecbd 8b04 	vpop	{d8-d9}
 800e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e606:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e608:	2b03      	cmp	r3, #3
 800e60a:	d1f5      	bne.n	800e5f8 <__kernel_rem_pio2f+0x3b4>
 800e60c:	aa30      	add	r2, sp, #192	@ 0xc0
 800e60e:	1f0b      	subs	r3, r1, #4
 800e610:	4413      	add	r3, r2
 800e612:	461a      	mov	r2, r3
 800e614:	4620      	mov	r0, r4
 800e616:	2800      	cmp	r0, #0
 800e618:	f1a2 0204 	sub.w	r2, r2, #4
 800e61c:	dc52      	bgt.n	800e6c4 <__kernel_rem_pio2f+0x480>
 800e61e:	4622      	mov	r2, r4
 800e620:	2a01      	cmp	r2, #1
 800e622:	f1a3 0304 	sub.w	r3, r3, #4
 800e626:	dc5d      	bgt.n	800e6e4 <__kernel_rem_pio2f+0x4a0>
 800e628:	ab30      	add	r3, sp, #192	@ 0xc0
 800e62a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800e548 <__kernel_rem_pio2f+0x304>
 800e62e:	440b      	add	r3, r1
 800e630:	2c01      	cmp	r4, #1
 800e632:	dc67      	bgt.n	800e704 <__kernel_rem_pio2f+0x4c0>
 800e634:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e638:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e63c:	2e00      	cmp	r6, #0
 800e63e:	d167      	bne.n	800e710 <__kernel_rem_pio2f+0x4cc>
 800e640:	edc7 6a00 	vstr	s13, [r7]
 800e644:	ed87 7a01 	vstr	s14, [r7, #4]
 800e648:	edc7 7a02 	vstr	s15, [r7, #8]
 800e64c:	e7d4      	b.n	800e5f8 <__kernel_rem_pio2f+0x3b4>
 800e64e:	ab30      	add	r3, sp, #192	@ 0xc0
 800e650:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800e548 <__kernel_rem_pio2f+0x304>
 800e654:	440b      	add	r3, r1
 800e656:	4622      	mov	r2, r4
 800e658:	2a00      	cmp	r2, #0
 800e65a:	da24      	bge.n	800e6a6 <__kernel_rem_pio2f+0x462>
 800e65c:	b34e      	cbz	r6, 800e6b2 <__kernel_rem_pio2f+0x46e>
 800e65e:	eef1 7a47 	vneg.f32	s15, s14
 800e662:	edc7 7a00 	vstr	s15, [r7]
 800e666:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e66a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e66e:	aa31      	add	r2, sp, #196	@ 0xc4
 800e670:	2301      	movs	r3, #1
 800e672:	429c      	cmp	r4, r3
 800e674:	da20      	bge.n	800e6b8 <__kernel_rem_pio2f+0x474>
 800e676:	b10e      	cbz	r6, 800e67c <__kernel_rem_pio2f+0x438>
 800e678:	eef1 7a67 	vneg.f32	s15, s15
 800e67c:	edc7 7a01 	vstr	s15, [r7, #4]
 800e680:	e7ba      	b.n	800e5f8 <__kernel_rem_pio2f+0x3b4>
 800e682:	ab30      	add	r3, sp, #192	@ 0xc0
 800e684:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800e548 <__kernel_rem_pio2f+0x304>
 800e688:	440b      	add	r3, r1
 800e68a:	2c00      	cmp	r4, #0
 800e68c:	da05      	bge.n	800e69a <__kernel_rem_pio2f+0x456>
 800e68e:	b10e      	cbz	r6, 800e694 <__kernel_rem_pio2f+0x450>
 800e690:	eef1 7a67 	vneg.f32	s15, s15
 800e694:	edc7 7a00 	vstr	s15, [r7]
 800e698:	e7ae      	b.n	800e5f8 <__kernel_rem_pio2f+0x3b4>
 800e69a:	ed33 7a01 	vldmdb	r3!, {s14}
 800e69e:	3c01      	subs	r4, #1
 800e6a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6a4:	e7f1      	b.n	800e68a <__kernel_rem_pio2f+0x446>
 800e6a6:	ed73 7a01 	vldmdb	r3!, {s15}
 800e6aa:	3a01      	subs	r2, #1
 800e6ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6b0:	e7d2      	b.n	800e658 <__kernel_rem_pio2f+0x414>
 800e6b2:	eef0 7a47 	vmov.f32	s15, s14
 800e6b6:	e7d4      	b.n	800e662 <__kernel_rem_pio2f+0x41e>
 800e6b8:	ecb2 7a01 	vldmia	r2!, {s14}
 800e6bc:	3301      	adds	r3, #1
 800e6be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6c2:	e7d6      	b.n	800e672 <__kernel_rem_pio2f+0x42e>
 800e6c4:	edd2 7a00 	vldr	s15, [r2]
 800e6c8:	edd2 6a01 	vldr	s13, [r2, #4]
 800e6cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e6d0:	3801      	subs	r0, #1
 800e6d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e6d6:	ed82 7a00 	vstr	s14, [r2]
 800e6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6de:	edc2 7a01 	vstr	s15, [r2, #4]
 800e6e2:	e798      	b.n	800e616 <__kernel_rem_pio2f+0x3d2>
 800e6e4:	edd3 7a00 	vldr	s15, [r3]
 800e6e8:	edd3 6a01 	vldr	s13, [r3, #4]
 800e6ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e6f0:	3a01      	subs	r2, #1
 800e6f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e6f6:	ed83 7a00 	vstr	s14, [r3]
 800e6fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6fe:	edc3 7a01 	vstr	s15, [r3, #4]
 800e702:	e78d      	b.n	800e620 <__kernel_rem_pio2f+0x3dc>
 800e704:	ed33 7a01 	vldmdb	r3!, {s14}
 800e708:	3c01      	subs	r4, #1
 800e70a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e70e:	e78f      	b.n	800e630 <__kernel_rem_pio2f+0x3ec>
 800e710:	eef1 6a66 	vneg.f32	s13, s13
 800e714:	eeb1 7a47 	vneg.f32	s14, s14
 800e718:	edc7 6a00 	vstr	s13, [r7]
 800e71c:	ed87 7a01 	vstr	s14, [r7, #4]
 800e720:	eef1 7a67 	vneg.f32	s15, s15
 800e724:	e790      	b.n	800e648 <__kernel_rem_pio2f+0x404>
 800e726:	bf00      	nop

0800e728 <floorf>:
 800e728:	ee10 3a10 	vmov	r3, s0
 800e72c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e730:	3a7f      	subs	r2, #127	@ 0x7f
 800e732:	2a16      	cmp	r2, #22
 800e734:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e738:	dc2b      	bgt.n	800e792 <floorf+0x6a>
 800e73a:	2a00      	cmp	r2, #0
 800e73c:	da12      	bge.n	800e764 <floorf+0x3c>
 800e73e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e7a4 <floorf+0x7c>
 800e742:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e746:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e74e:	dd06      	ble.n	800e75e <floorf+0x36>
 800e750:	2b00      	cmp	r3, #0
 800e752:	da24      	bge.n	800e79e <floorf+0x76>
 800e754:	2900      	cmp	r1, #0
 800e756:	4b14      	ldr	r3, [pc, #80]	@ (800e7a8 <floorf+0x80>)
 800e758:	bf08      	it	eq
 800e75a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e75e:	ee00 3a10 	vmov	s0, r3
 800e762:	4770      	bx	lr
 800e764:	4911      	ldr	r1, [pc, #68]	@ (800e7ac <floorf+0x84>)
 800e766:	4111      	asrs	r1, r2
 800e768:	420b      	tst	r3, r1
 800e76a:	d0fa      	beq.n	800e762 <floorf+0x3a>
 800e76c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e7a4 <floorf+0x7c>
 800e770:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e774:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e77c:	ddef      	ble.n	800e75e <floorf+0x36>
 800e77e:	2b00      	cmp	r3, #0
 800e780:	bfbe      	ittt	lt
 800e782:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e786:	fa40 f202 	asrlt.w	r2, r0, r2
 800e78a:	189b      	addlt	r3, r3, r2
 800e78c:	ea23 0301 	bic.w	r3, r3, r1
 800e790:	e7e5      	b.n	800e75e <floorf+0x36>
 800e792:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e796:	d3e4      	bcc.n	800e762 <floorf+0x3a>
 800e798:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e79c:	4770      	bx	lr
 800e79e:	2300      	movs	r3, #0
 800e7a0:	e7dd      	b.n	800e75e <floorf+0x36>
 800e7a2:	bf00      	nop
 800e7a4:	7149f2ca 	.word	0x7149f2ca
 800e7a8:	bf800000 	.word	0xbf800000
 800e7ac:	007fffff 	.word	0x007fffff

0800e7b0 <_init>:
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b2:	bf00      	nop
 800e7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7b6:	bc08      	pop	{r3}
 800e7b8:	469e      	mov	lr, r3
 800e7ba:	4770      	bx	lr

0800e7bc <_fini>:
 800e7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7be:	bf00      	nop
 800e7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7c2:	bc08      	pop	{r3}
 800e7c4:	469e      	mov	lr, r3
 800e7c6:	4770      	bx	lr
