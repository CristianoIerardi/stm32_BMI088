
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c498  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800c628  0800c628  0000d628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca30  0800ca30  0000e2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca30  0800ca30  0000da30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca38  0800ca38  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca38  0800ca38  0000da38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca3c  0800ca3c  0000da3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800ca40  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e2c4  2**0
                  CONTENTS
 10 .bss          00001f3c  200002c4  200002c4  0000e2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002200  20002200  0000e2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012060  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000354c  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  000238a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b57  00000000  00000000  000247e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022351  00000000  00000000  00025337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f9f  00000000  00000000  00047688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd835  00000000  00000000  0005b627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118e5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e9c  00000000  00000000  00118ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0011dd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c610 	.word	0x0800c610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800c610 	.word	0x0800c610

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6a3a      	ldr	r2, [r7, #32]
 8000ebc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000ec2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6858      	ldr	r0, [r3, #4]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	899b      	ldrh	r3, [r3, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f001 fe46 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f000 ffdf 	bl	8001ea8 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6858      	ldr	r0, [r3, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	899b      	ldrh	r3, [r3, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f001 fe3b 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000efa:	2032      	movs	r0, #50	@ 0x32
 8000efc:	f000 ffd4 	bl	8001ea8 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000f00:	22b6      	movs	r2, #182	@ 0xb6
 8000f02:	217e      	movs	r1, #126	@ 0x7e
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 f959 	bl	80011bc <BMI088_WriteAccRegister>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	4413      	add	r3, r2
 8000f12:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000f14:	2032      	movs	r0, #50	@ 0x32
 8000f16:	f000 ffc7 	bl	8001ea8 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8000f1a:	f107 0316 	add.w	r3, r7, #22
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 f8d0 	bl	80010c8 <BMI088_ReadAccRegister>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	4413      	add	r3, r2
 8000f30:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000f32:	200a      	movs	r0, #10
 8000f34:	f000 ffb8 	bl	8001ea8 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000f38:	22a8      	movs	r2, #168	@ 0xa8
 8000f3a:	2140      	movs	r1, #64	@ 0x40
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f000 f93d 	bl	80011bc <BMI088_WriteAccRegister>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	4413      	add	r3, r2
 8000f4a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f000 ffab 	bl	8001ea8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8000f52:	2200      	movs	r2, #0
 8000f54:	2141      	movs	r1, #65	@ 0x41
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f000 f930 	bl	80011bc <BMI088_WriteAccRegister>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	4413      	add	r3, r2
 8000f64:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f000 ff9e 	bl	8001ea8 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	2153      	movs	r1, #83	@ 0x53
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 f923 	bl	80011bc <BMI088_WriteAccRegister>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f000 ff91 	bl	8001ea8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000f86:	2204      	movs	r2, #4
 8000f88:	2158      	movs	r1, #88	@ 0x58
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 f916 	bl	80011bc <BMI088_WriteAccRegister>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	4413      	add	r3, r2
 8000f98:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f000 ff84 	bl	8001ea8 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	217c      	movs	r1, #124	@ 0x7c
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f909 	bl	80011bc <BMI088_WriteAccRegister>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f000 ff77 	bl	8001ea8 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000fba:	2204      	movs	r2, #4
 8000fbc:	217d      	movs	r1, #125	@ 0x7d
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f8fc 	bl	80011bc <BMI088_WriteAccRegister>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	4413      	add	r3, r2
 8000fcc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f000 ff6a 	bl	8001ea8 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4a3a      	ldr	r2, [pc, #232]	@ (80010c0 <BMI088_Init+0x228>)
 8000fd8:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2292      	movs	r2, #146	@ 0x92
 8000fde:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6898      	ldr	r0, [r3, #8]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	89db      	ldrh	r3, [r3, #14]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	f001 fdc0 	bl	8002b70 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8000ff0:	22b6      	movs	r2, #182	@ 0xb6
 8000ff2:	2114      	movs	r1, #20
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f91b 	bl	8001230 <BMI088_WriteGyrRegister>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	4413      	add	r3, r2
 8001002:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8001004:	20fa      	movs	r0, #250	@ 0xfa
 8001006:	f000 ff4f 	bl	8001ea8 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 800100a:	f107 0316 	add.w	r3, r7, #22
 800100e:	461a      	mov	r2, r3
 8001010:	2100      	movs	r1, #0
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 f896 	bl	8001144 <BMI088_ReadGyrRegister>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	4413      	add	r3, r2
 8001020:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 8001022:	200a      	movs	r0, #10
 8001024:	f000 ff40 	bl	8001ea8 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8001028:	2201      	movs	r2, #1
 800102a:	210f      	movs	r1, #15
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f8ff 	bl	8001230 <BMI088_WriteGyrRegister>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	4413      	add	r3, r2
 800103a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800103c:	200a      	movs	r0, #10
 800103e:	f000 ff33 	bl	8001ea8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 8001042:	2207      	movs	r2, #7
 8001044:	2110      	movs	r1, #16
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f000 f8f2 	bl	8001230 <BMI088_WriteGyrRegister>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	4413      	add	r3, r2
 8001054:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001056:	200a      	movs	r0, #10
 8001058:	f000 ff26 	bl	8001ea8 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 800105c:	2280      	movs	r2, #128	@ 0x80
 800105e:	2115      	movs	r1, #21
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f8e5 	bl	8001230 <BMI088_WriteGyrRegister>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	4413      	add	r3, r2
 800106e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f000 ff19 	bl	8001ea8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001076:	2201      	movs	r2, #1
 8001078:	2116      	movs	r1, #22
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 f8d8 	bl	8001230 <BMI088_WriteGyrRegister>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	4413      	add	r3, r2
 8001088:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800108a:	200a      	movs	r0, #10
 800108c:	f000 ff0c 	bl	8001ea8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001090:	2201      	movs	r2, #1
 8001092:	2118      	movs	r1, #24
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f8cb 	bl	8001230 <BMI088_WriteGyrRegister>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	4413      	add	r3, r2
 80010a2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 feff 	bl	8001ea8 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <BMI088_Init+0x22c>)
 80010ae:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2282      	movs	r2, #130	@ 0x82
 80010b4:	769a      	strb	r2, [r3, #26]

	return status;
 80010b6:	7dfb      	ldrb	r3, [r7, #23]

}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	3a6b70a4 	.word	0x3a6b70a4
 80010c4:	3a0ba058 	.word	0x3a0ba058

080010c8 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	460b      	mov	r3, r1
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	753b      	strb	r3, [r7, #20]
 80010e0:	2300      	movs	r3, #0
 80010e2:	757b      	strb	r3, [r7, #21]
 80010e4:	2300      	movs	r3, #0
 80010e6:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6858      	ldr	r0, [r3, #4]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	899b      	ldrh	r3, [r3, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	4619      	mov	r1, r3
 80010f4:	f001 fd3c 	bl	8002b70 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	f107 0210 	add.w	r2, r7, #16
 8001100:	f107 0114 	add.w	r1, r7, #20
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2303      	movs	r3, #3
 800110c:	f003 fe09 	bl	8004d22 <HAL_SPI_TransmitReceive>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6858      	ldr	r0, [r3, #4]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	899b      	ldrh	r3, [r3, #12]
 8001126:	2201      	movs	r2, #1
 8001128:	4619      	mov	r1, r3
 800112a:	f001 fd21 	bl	8002b70 <HAL_GPIO_WritePin>

	if (status == 1) {
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8001134:	7cba      	ldrb	r2, [r7, #18]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800113a:	7dfb      	ldrb	r3, [r7, #23]

}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af02      	add	r7, sp, #8
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	460b      	mov	r3, r1
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001158:	b2db      	uxtb	r3, r3
 800115a:	753b      	strb	r3, [r7, #20]
 800115c:	2300      	movs	r3, #0
 800115e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6898      	ldr	r0, [r3, #8]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	89db      	ldrh	r3, [r3, #14]
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	f001 fd00 	bl	8002b70 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	f107 0210 	add.w	r2, r7, #16
 8001178:	f107 0114 	add.w	r1, r7, #20
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2302      	movs	r3, #2
 8001184:	f003 fdcd 	bl	8004d22 <HAL_SPI_TransmitReceive>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6898      	ldr	r0, [r3, #8]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	89db      	ldrh	r3, [r3, #14]
 800119e:	2201      	movs	r2, #1
 80011a0:	4619      	mov	r1, r3
 80011a2:	f001 fce5 	bl	8002b70 <HAL_GPIO_WritePin>

	if (status == 1) {
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d102      	bne.n	80011b2 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80011ac:	7c7a      	ldrb	r2, [r7, #17]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80011b2:	7dfb      	ldrb	r3, [r7, #23]

}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
 80011c8:	4613      	mov	r3, r2
 80011ca:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	733b      	strb	r3, [r7, #12]
 80011d0:	78bb      	ldrb	r3, [r7, #2]
 80011d2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6858      	ldr	r0, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	899b      	ldrh	r3, [r3, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	f001 fcc6 	bl	8002b70 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	f107 010c 	add.w	r1, r7, #12
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	2202      	movs	r2, #2
 80011f2:	f003 fc52 	bl	8004a9a <HAL_SPI_Transmit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001204:	bf00      	nop
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f004 f94a 	bl	80054a4 <HAL_SPI_GetState>
 8001210:	4603      	mov	r3, r0
 8001212:	2b01      	cmp	r3, #1
 8001214:	d1f7      	bne.n	8001206 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6858      	ldr	r0, [r3, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	899b      	ldrh	r3, [r3, #12]
 800121e:	2201      	movs	r2, #1
 8001220:	4619      	mov	r1, r3
 8001222:	f001 fca5 	bl	8002b70 <HAL_GPIO_WritePin>

	return status;
 8001226:	7bfb      	ldrb	r3, [r7, #15]

}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
 800123c:	4613      	mov	r3, r2
 800123e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	733b      	strb	r3, [r7, #12]
 8001244:	78bb      	ldrb	r3, [r7, #2]
 8001246:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6898      	ldr	r0, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	89db      	ldrh	r3, [r3, #14]
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	f001 fc8c 	bl	8002b70 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f107 010c 	add.w	r1, r7, #12
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	2202      	movs	r2, #2
 8001266:	f003 fc18 	bl	8004a9a <HAL_SPI_Transmit>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001278:	bf00      	nop
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f004 f910 	bl	80054a4 <HAL_SPI_GetState>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d1f7      	bne.n	800127a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6898      	ldr	r0, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	89db      	ldrh	r3, [r3, #14]
 8001292:	2201      	movs	r2, #1
 8001294:	4619      	mov	r1, r3
 8001296:	f001 fc6b 	bl	8002b70 <HAL_GPIO_WritePin>

	return status;
 800129a:	7bfb      	ldrb	r3, [r7, #15]

}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6858      	ldr	r0, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	899b      	ldrh	r3, [r3, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	f001 fc5a 	bl	8002b70 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f103 0112 	add.w	r1, r3, #18
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80012cc:	2308      	movs	r3, #8
 80012ce:	f003 fed1 	bl	8005074 <HAL_SPI_TransmitReceive_DMA>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d104      	bne.n	80012e2 <BMI088_ReadAccelerometerDMA+0x3e>

		imu->readingAcc = 1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	741a      	strb	r2, [r3, #16]
		return 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	e008      	b.n	80012f4 <BMI088_ReadAccelerometerDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6858      	ldr	r0, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	899b      	ldrh	r3, [r3, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	f001 fc3f 	bl	8002b70 <HAL_GPIO_WritePin>
		return 0;
 80012f2:	2300      	movs	r3, #0

	}

}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6858      	ldr	r0, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	899b      	ldrh	r3, [r3, #12]
 800130c:	2201      	movs	r2, #1
 800130e:	4619      	mov	r1, r3
 8001310:	f001 fc2e 	bl	8002b70 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001320:	b2db      	uxtb	r3, r3
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800133a:	b2db      	uxtb	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001346:	b2db      	uxtb	r3, r3
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001354:	b2db      	uxtb	r3, r3
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001360:	b2db      	uxtb	r3, r3
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800136e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800138a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80013a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6898      	ldr	r0, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	89db      	ldrh	r3, [r3, #14]
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	f001 fbca 	bl	8002b70 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f103 011a 	add.w	r1, r3, #26
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80013ec:	2307      	movs	r3, #7
 80013ee:	f003 fe41 	bl	8005074 <HAL_SPI_TransmitReceive_DMA>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d104      	bne.n	8001402 <BMI088_ReadGyroscopeDMA+0x3e>

		imu->readingGyr = 1;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	745a      	strb	r2, [r3, #17]
		return 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	e008      	b.n	8001414 <BMI088_ReadGyroscopeDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6898      	ldr	r0, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	89db      	ldrh	r3, [r3, #14]
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	f001 fbaf 	bl	8002b70 <HAL_GPIO_WritePin>
		return 0;
 8001412:	2300      	movs	r3, #0

	}

}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6898      	ldr	r0, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	89db      	ldrh	r3, [r3, #14]
 800142c:	2201      	movs	r2, #1
 800142e:	4619      	mov	r1, r3
 8001430:	f001 fb9e 	bl	8002b70 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001440:	b2db      	uxtb	r3, r3
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800144c:	b2db      	uxtb	r3, r3
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800145a:	b2db      	uxtb	r3, r3
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001466:	b2db      	uxtb	r3, r3
 8001468:	b21b      	sxth	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001474:	b2db      	uxtb	r3, r3
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b21a      	sxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001480:	b2db      	uxtb	r3, r3
 8001482:	b21b      	sxth	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800148e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char logBuf[128];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d103      	bne.n	80014fc <HAL_GPIO_EXTI_Callback+0x18>
	{
		// we check if the interrupt pin is the accelerometer one
		BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 80014f4:	4806      	ldr	r0, [pc, #24]	@ (8001510 <HAL_GPIO_EXTI_Callback+0x2c>)
 80014f6:	f7ff fed5 	bl	80012a4 <BMI088_ReadAccelerometerDMA>
	else if(GPIO_Pin == INT_GYR_Pin)
	{
		// we check if the interrupt pin is the gyroscope one
		BMI088_ReadGyroscopeDMA(&imu);
	}
}
 80014fa:	e005      	b.n	8001508 <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == INT_GYR_Pin)
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d102      	bne.n	8001508 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 8001502:	4803      	ldr	r0, [pc, #12]	@ (8001510 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001504:	f7ff ff5e 	bl	80013c4 <BMI088_ReadGyroscopeDMA>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200003f8 	.word	0x200003f8

08001514 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <HAL_SPI_TxRxCpltCallback+0x38>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10d      	bne.n	8001542 <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001528:	7c1b      	ldrb	r3, [r3, #16]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 800152e:	4808      	ldr	r0, [pc, #32]	@ (8001550 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001530:	f7ff fee4 	bl	80012fc <BMI088_ReadAccelerometerDMA_Complete>
		}

		if (imu.readingGyr)
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001536:	7c5b      	ldrb	r3, [r3, #17]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 800153c:	4804      	ldr	r0, [pc, #16]	@ (8001550 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800153e:	f7ff ff6d 	bl	800141c <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40013000 	.word	0x40013000
 8001550:	200003f8 	.word	0x200003f8

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001558:	b090      	sub	sp, #64	@ 0x40
 800155a:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155c:	f000 fc32 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001560:	f000 f876 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001564:	f000 f93c 	bl	80017e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001568:	f000 f912 	bl	8001790 <MX_DMA_Init>
  MX_SPI1_Init();
 800156c:	f000 f8da 	bl	8001724 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001570:	f007 fcee 	bl	8008f50 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //Init_BMI088();


  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 8001574:	2310      	movs	r3, #16
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <main+0xe0>)
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2310      	movs	r3, #16
 800157e:	4a2e      	ldr	r2, [pc, #184]	@ (8001638 <main+0xe4>)
 8001580:	492e      	ldr	r1, [pc, #184]	@ (800163c <main+0xe8>)
 8001582:	482f      	ldr	r0, [pc, #188]	@ (8001640 <main+0xec>)
 8001584:	f7ff fc88 	bl	8000e98 <BMI088_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Timers:
  uint32_t timerUSB = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  while (1)
  {


  /* Log data via USB */
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 800158c:	f000 fc80 	bl	8001e90 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b09      	cmp	r3, #9
 8001598:	d9f8      	bls.n	800158c <main+0x38>
		  /* Print via USB */
		 // sprintf(logBuf, "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", rollEstimate_rad * RAD_TO_DEG, pitchEstimate_rad * RAD_TO_DEG,
		//		  	  	  	  	  	  	 	 	 	 rollAcc_rad * RAD_TO_DEG, pitchAcc_rad * RAD_TO_DEG,
		//											 rollGyr_rad * RAD_TO_DEG, pitchGyr_rad * RAD_TO_DEG);

		  sprintf(logBuf, "aX=%.3f,\taY=%.3f,\taZ=%.3f,\tgX=%.3f,\tgY=%.3f,\tgZ=%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 800159a:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <main+0xec>)
 800159c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ffd2 	bl	8000548 <__aeabi_f2d>
 80015a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80015a8:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <main+0xec>)
 80015aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffcb 	bl	8000548 <__aeabi_f2d>
 80015b2:	4604      	mov	r4, r0
 80015b4:	460d      	mov	r5, r1
 80015b6:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <main+0xec>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ffc4 	bl	8000548 <__aeabi_f2d>
 80015c0:	4680      	mov	r8, r0
 80015c2:	4689      	mov	r9, r1
															   imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]);
 80015c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <main+0xec>)
 80015c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
		  sprintf(logBuf, "aX=%.3f,\taY=%.3f,\taZ=%.3f,\tgX=%.3f,\tgY=%.3f,\tgZ=%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffbd 	bl	8000548 <__aeabi_f2d>
 80015ce:	4682      	mov	sl, r0
 80015d0:	468b      	mov	fp, r1
															   imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]);
 80015d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <main+0xec>)
 80015d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
		  sprintf(logBuf, "aX=%.3f,\taY=%.3f,\taZ=%.3f,\tgX=%.3f,\tgY=%.3f,\tgZ=%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffb6 	bl	8000548 <__aeabi_f2d>
 80015dc:	e9c7 0100 	strd	r0, r1, [r7]
															   imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]);
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <main+0xec>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		  sprintf(logBuf, "aX=%.3f,\taY=%.3f,\taZ=%.3f,\tgX=%.3f,\tgY=%.3f,\tgZ=%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffaf 	bl	8000548 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80015f2:	ed97 7b00 	vldr	d7, [r7]
 80015f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80015fa:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80015fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001602:	e9cd 4500 	strd	r4, r5, [sp]
 8001606:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800160a:	490e      	ldr	r1, [pc, #56]	@ (8001644 <main+0xf0>)
 800160c:	480e      	ldr	r0, [pc, #56]	@ (8001648 <main+0xf4>)
 800160e:	f008 fed3 	bl	800a3b8 <siprintf>

		  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 8001612:	480d      	ldr	r0, [pc, #52]	@ (8001648 <main+0xf4>)
 8001614:	f7fe fe2c 	bl	8000270 <strlen>
 8001618:	4603      	mov	r3, r0
 800161a:	b29b      	uxth	r3, r3
 800161c:	4619      	mov	r1, r3
 800161e:	480a      	ldr	r0, [pc, #40]	@ (8001648 <main+0xf4>)
 8001620:	f007 fd54 	bl	80090cc <CDC_Transmit_FS>

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001624:	2110      	movs	r1, #16
 8001626:	4809      	ldr	r0, [pc, #36]	@ (800164c <main+0xf8>)
 8001628:	f001 fabb 	bl	8002ba2 <HAL_GPIO_TogglePin>

		  timerUSB = HAL_GetTick();
 800162c:	f000 fc30 	bl	8001e90 <HAL_GetTick>
 8001630:	6178      	str	r0, [r7, #20]
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 8001632:	e7ab      	b.n	800158c <main+0x38>
 8001634:	40020800 	.word	0x40020800
 8001638:	40020000 	.word	0x40020000
 800163c:	200002e0 	.word	0x200002e0
 8001640:	200003f8 	.word	0x200003f8
 8001644:	0800c628 	.word	0x0800c628
 8001648:	20000448 	.word	0x20000448
 800164c:	40020400 	.word	0x40020400

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	@ 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2230      	movs	r2, #48	@ 0x30
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f008 ff0d 	bl	800a47e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b28      	ldr	r3, [pc, #160]	@ (800171c <SystemClock_Config+0xcc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	4a27      	ldr	r2, [pc, #156]	@ (800171c <SystemClock_Config+0xcc>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	@ 0x40
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <SystemClock_Config+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <SystemClock_Config+0xd0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a21      	ldr	r2, [pc, #132]	@ (8001720 <SystemClock_Config+0xd0>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <SystemClock_Config+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b6:	2302      	movs	r3, #2
 80016b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016c0:	2308      	movs	r3, #8
 80016c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016c4:	23a8      	movs	r3, #168	@ 0xa8
 80016c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016cc:	2307      	movs	r3, #7
 80016ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fce9 	bl	80040ac <HAL_RCC_OscConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016e0:	f000 f924 	bl	800192c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e4:	230f      	movs	r3, #15
 80016e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e8:	2302      	movs	r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2105      	movs	r1, #5
 8001702:	4618      	mov	r0, r3
 8001704:	f002 ff4a 	bl	800459c <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800170e:	f000 f90d 	bl	800192c <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3750      	adds	r7, #80	@ 0x50
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000

08001724 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001728:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <MX_SPI1_Init+0x64>)
 800172a:	4a18      	ldr	r2, [pc, #96]	@ (800178c <MX_SPI1_Init+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800172e:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <MX_SPI1_Init+0x64>)
 8001730:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001734:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001736:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <MX_SPI1_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800173c:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_SPI1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001748:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <MX_SPI1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <MX_SPI1_Init+0x64>)
 8001750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001754:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <MX_SPI1_Init+0x64>)
 8001758:	2210      	movs	r2, #16
 800175a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <MX_SPI1_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <MX_SPI1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001768:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <MX_SPI1_Init+0x64>)
 8001770:	220a      	movs	r2, #10
 8001772:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001774:	4804      	ldr	r0, [pc, #16]	@ (8001788 <MX_SPI1_Init+0x64>)
 8001776:	f003 f907 	bl	8004988 <HAL_SPI_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001780:	f000 f8d4 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200002e0 	.word	0x200002e0
 800178c:	40013000 	.word	0x40013000

08001790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <MX_DMA_Init+0x4c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a0f      	ldr	r2, [pc, #60]	@ (80017dc <MX_DMA_Init+0x4c>)
 80017a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <MX_DMA_Init+0x4c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2038      	movs	r0, #56	@ 0x38
 80017b8:	f000 fc75 	bl	80020a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017bc:	2038      	movs	r0, #56	@ 0x38
 80017be:	f000 fc8e 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	203b      	movs	r0, #59	@ 0x3b
 80017c8:	f000 fc6d 	bl	80020a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80017cc:	203b      	movs	r0, #59	@ 0x3b
 80017ce:	f000 fc86 	bl	80020de <HAL_NVIC_EnableIRQ>

}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b48      	ldr	r3, [pc, #288]	@ (800191c <MX_GPIO_Init+0x13c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a47      	ldr	r2, [pc, #284]	@ (800191c <MX_GPIO_Init+0x13c>)
 8001800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b45      	ldr	r3, [pc, #276]	@ (800191c <MX_GPIO_Init+0x13c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b41      	ldr	r3, [pc, #260]	@ (800191c <MX_GPIO_Init+0x13c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a40      	ldr	r2, [pc, #256]	@ (800191c <MX_GPIO_Init+0x13c>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <MX_GPIO_Init+0x13c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b3a      	ldr	r3, [pc, #232]	@ (800191c <MX_GPIO_Init+0x13c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a39      	ldr	r2, [pc, #228]	@ (800191c <MX_GPIO_Init+0x13c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b37      	ldr	r3, [pc, #220]	@ (800191c <MX_GPIO_Init+0x13c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b33      	ldr	r3, [pc, #204]	@ (800191c <MX_GPIO_Init+0x13c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a32      	ldr	r2, [pc, #200]	@ (800191c <MX_GPIO_Init+0x13c>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b30      	ldr	r3, [pc, #192]	@ (800191c <MX_GPIO_Init+0x13c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2110      	movs	r1, #16
 800186a:	482d      	ldr	r0, [pc, #180]	@ (8001920 <MX_GPIO_Init+0x140>)
 800186c:	f001 f980 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	2110      	movs	r1, #16
 8001874:	482b      	ldr	r0, [pc, #172]	@ (8001924 <MX_GPIO_Init+0x144>)
 8001876:	f001 f97b 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2110      	movs	r1, #16
 800187e:	482a      	ldr	r0, [pc, #168]	@ (8001928 <MX_GPIO_Init+0x148>)
 8001880:	f001 f976 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8001884:	230c      	movs	r3, #12
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001888:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4822      	ldr	r0, [pc, #136]	@ (8001924 <MX_GPIO_Init+0x144>)
 800189a:	f000 ffcd 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 800189e:	2310      	movs	r3, #16
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	481a      	ldr	r0, [pc, #104]	@ (8001920 <MX_GPIO_Init+0x140>)
 80018b6:	f000 ffbf 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 80018ba:	2310      	movs	r3, #16
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4814      	ldr	r0, [pc, #80]	@ (8001924 <MX_GPIO_Init+0x144>)
 80018d2:	f000 ffb1 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018d6:	2310      	movs	r3, #16
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	480e      	ldr	r0, [pc, #56]	@ (8001928 <MX_GPIO_Init+0x148>)
 80018ee:	f000 ffa3 	bl	8002838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2008      	movs	r0, #8
 80018f8:	f000 fbd5 	bl	80020a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018fc:	2008      	movs	r0, #8
 80018fe:	f000 fbee 	bl	80020de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2009      	movs	r0, #9
 8001908:	f000 fbcd 	bl	80020a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800190c:	2009      	movs	r0, #9
 800190e:	f000 fbe6 	bl	80020de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000
 8001924:	40020800 	.word	0x40020800
 8001928:	40020400 	.word	0x40020400

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <Error_Handler+0x8>

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <HAL_MspInit+0x4c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <HAL_MspInit+0x4c>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_MspInit+0x4c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_MspInit+0x4c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <HAL_MspInit+0x4c>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	@ 0x40
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad8 <HAL_SPI_MspInit+0x150>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	f040 8092 	bne.w	8001ad0 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	4b4a      	ldr	r3, [pc, #296]	@ (8001adc <HAL_SPI_MspInit+0x154>)
 80019b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b4:	4a49      	ldr	r2, [pc, #292]	@ (8001adc <HAL_SPI_MspInit+0x154>)
 80019b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80019bc:	4b47      	ldr	r3, [pc, #284]	@ (8001adc <HAL_SPI_MspInit+0x154>)
 80019be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	4b43      	ldr	r3, [pc, #268]	@ (8001adc <HAL_SPI_MspInit+0x154>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	4a42      	ldr	r2, [pc, #264]	@ (8001adc <HAL_SPI_MspInit+0x154>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d8:	4b40      	ldr	r3, [pc, #256]	@ (8001adc <HAL_SPI_MspInit+0x154>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019e4:	23e0      	movs	r3, #224	@ 0xe0
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019f4:	2305      	movs	r3, #5
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4838      	ldr	r0, [pc, #224]	@ (8001ae0 <HAL_SPI_MspInit+0x158>)
 8001a00:	f000 ff1a 	bl	8002838 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001a04:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a06:	4a38      	ldr	r2, [pc, #224]	@ (8001ae8 <HAL_SPI_MspInit+0x160>)
 8001a08:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001a0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a0c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001a10:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a12:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b32      	ldr	r3, [pc, #200]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a24:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a26:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001a32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a3e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a40:	4b28      	ldr	r3, [pc, #160]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001a46:	4827      	ldr	r0, [pc, #156]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a48:	f000 fb64 	bl	8002114 <HAL_DMA_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001a52:	f7ff ff6b 	bl	800192c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a5a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a5c:	4a21      	ldr	r2, [pc, #132]	@ (8001ae4 <HAL_SPI_MspInit+0x15c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001a62:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001a64:	4a22      	ldr	r2, [pc, #136]	@ (8001af0 <HAL_SPI_MspInit+0x168>)
 8001a66:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001a68:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001a6a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001a6e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a70:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001a72:	2240      	movs	r2, #64	@ 0x40
 8001a74:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001a7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a82:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a84:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a90:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001a98:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a9c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001aa4:	4811      	ldr	r0, [pc, #68]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001aa6:	f000 fb35 	bl	8002114 <HAL_DMA_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001ab0:	f7ff ff3c 	bl	800192c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001ab8:	649a      	str	r2, [r3, #72]	@ 0x48
 8001aba:	4a0c      	ldr	r2, [pc, #48]	@ (8001aec <HAL_SPI_MspInit+0x164>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2023      	movs	r0, #35	@ 0x23
 8001ac6:	f000 faee 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001aca:	2023      	movs	r0, #35	@ 0x23
 8001acc:	f000 fb07 	bl	80020de <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	@ 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40013000 	.word	0x40013000
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	20000338 	.word	0x20000338
 8001ae8:	40026410 	.word	0x40026410
 8001aec:	20000398 	.word	0x20000398
 8001af0:	40026458 	.word	0x40026458

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <NMI_Handler+0x4>

08001afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4a:	f000 f98d 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8001b56:	2004      	movs	r0, #4
 8001b58:	f001 f83e 	bl	8002bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 8001b64:	2008      	movs	r0, #8
 8001b66:	f001 f837 	bl	8002bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <SPI1_IRQHandler+0x10>)
 8001b76:	f003 fb79 	bl	800526c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200002e0 	.word	0x200002e0

08001b84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x10>)
 8001b8a:	f000 fbeb 	bl	8002364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000338 	.word	0x20000338

08001b98 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <DMA2_Stream3_IRQHandler+0x10>)
 8001b9e:	f000 fbe1 	bl	8002364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000398 	.word	0x20000398

08001bac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <OTG_FS_IRQHandler+0x10>)
 8001bb2:	f001 f96d 	bl	8002e90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200019b0 	.word	0x200019b0

08001bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return 1;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_kill>:

int _kill(int pid, int sig)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bda:	f008 fca3 	bl	800a524 <__errno>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2216      	movs	r2, #22
 8001be2:	601a      	str	r2, [r3, #0]
  return -1;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_exit>:

void _exit (int status)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffe7 	bl	8001bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c02:	bf00      	nop
 8001c04:	e7fd      	b.n	8001c02 <_exit+0x12>

08001c06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e00a      	b.n	8001c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c18:	f3af 8000 	nop.w
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	60ba      	str	r2, [r7, #8]
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbf0      	blt.n	8001c18 <_read+0x12>
  }

  return len;
 8001c36:	687b      	ldr	r3, [r7, #4]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e009      	b.n	8001c66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	60ba      	str	r2, [r7, #8]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbf1      	blt.n	8001c52 <_write+0x12>
  }
  return len;
 8001c6e:	687b      	ldr	r3, [r7, #4]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_close>:

int _close(int file)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_isatty>:

int _isatty(int file)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f008 fc08 	bl	800a524 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20020000 	.word	0x20020000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	200004c8 	.word	0x200004c8
 8001d48:	20002200 	.word	0x20002200

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <SystemInit+0x20>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <SystemInit+0x20>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d74:	f7ff ffea 	bl	8001d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7a:	490d      	ldr	r1, [pc, #52]	@ (8001db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d90:	4c0a      	ldr	r4, [pc, #40]	@ (8001dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f008 fbc7 	bl	800a530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7ff fbd7 	bl	8001554 <main>
  bx  lr    
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001db4:	0800ca40 	.word	0x0800ca40
  ldr r2, =_sbss
 8001db8:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001dbc:	20002200 	.word	0x20002200

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <HAL_Init+0x40>)
 8001dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <HAL_Init+0x40>)
 8001dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	@ (8001e04 <HAL_Init+0x40>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f94f 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	200f      	movs	r0, #15
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7ff fd9e 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f967 	bl	80020fa <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f000 f92f 	bl	80020a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	@ (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	200004cc 	.word	0x200004cc

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	200004cc 	.word	0x200004cc

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff ffee 	bl	8001e90 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_Delay+0x44>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000008 	.word	0x20000008

08001ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f22:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <__NVIC_GetPriorityGrouping+0x18>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f003 0307 	and.w	r3, r3, #7
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db0b      	blt.n	8001f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4907      	ldr	r1, [pc, #28]	@ (8001f8c <__NVIC_EnableIRQ+0x38>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db0a      	blt.n	8001fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	490c      	ldr	r1, [pc, #48]	@ (8001fdc <__NVIC_SetPriority+0x4c>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb8:	e00a      	b.n	8001fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4908      	ldr	r1, [pc, #32]	@ (8001fe0 <__NVIC_SetPriority+0x50>)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	761a      	strb	r2, [r3, #24]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000e100 	.word	0xe000e100
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	@ 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f1c3 0307 	rsb	r3, r3, #7
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	bf28      	it	cs
 8002002:	2304      	movcs	r3, #4
 8002004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3304      	adds	r3, #4
 800200a:	2b06      	cmp	r3, #6
 800200c:	d902      	bls.n	8002014 <NVIC_EncodePriority+0x30>
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3b03      	subs	r3, #3
 8002012:	e000      	b.n	8002016 <NVIC_EncodePriority+0x32>
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	f04f 32ff 	mov.w	r2, #4294967295
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43d9      	mvns	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	4313      	orrs	r3, r2
         );
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	@ 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800205c:	d301      	bcc.n	8002062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205e:	2301      	movs	r3, #1
 8002060:	e00f      	b.n	8002082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <SysTick_Config+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206a:	210f      	movs	r1, #15
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f7ff ff8e 	bl	8001f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	@ (800208c <SysTick_Config+0x40>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	@ (800208c <SysTick_Config+0x40>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff29 	bl	8001ef0 <__NVIC_SetPriorityGrouping>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b8:	f7ff ff3e 	bl	8001f38 <__NVIC_GetPriorityGrouping>
 80020bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff8e 	bl	8001fe4 <NVIC_EncodePriority>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff5d 	bl	8001f90 <__NVIC_SetPriority>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff31 	bl	8001f54 <__NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffa2 	bl	800204c <SysTick_Config>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff feb6 	bl	8001e90 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e099      	b.n	8002264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002150:	e00f      	b.n	8002172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002152:	f7ff fe9d 	bl	8001e90 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b05      	cmp	r3, #5
 800215e:	d908      	bls.n	8002172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2203      	movs	r2, #3
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e078      	b.n	8002264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1e8      	bne.n	8002152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4b38      	ldr	r3, [pc, #224]	@ (800226c <HAL_DMA_Init+0x158>)
 800218c:	4013      	ands	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d107      	bne.n	80021dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	4313      	orrs	r3, r2
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f023 0307 	bic.w	r3, r3, #7
 80021f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	2b04      	cmp	r3, #4
 8002204:	d117      	bne.n	8002236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00e      	beq.n	8002236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fa91 	bl	8002740 <DMA_CheckFifoParam>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2240      	movs	r2, #64	@ 0x40
 8002228:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002232:	2301      	movs	r3, #1
 8002234:	e016      	b.n	8002264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fa48 	bl	80026d4 <DMA_CalcBaseAndBitshift>
 8002244:	4603      	mov	r3, r0
 8002246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224c:	223f      	movs	r2, #63	@ 0x3f
 800224e:	409a      	lsls	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	f010803f 	.word	0xf010803f

08002270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_DMA_Start_IT+0x26>
 8002292:	2302      	movs	r3, #2
 8002294:	e040      	b.n	8002318 <HAL_DMA_Start_IT+0xa8>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d12f      	bne.n	800230a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f9da 	bl	8002678 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	223f      	movs	r2, #63	@ 0x3f
 80022ca:	409a      	lsls	r2, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0216 	orr.w	r2, r2, #22
 80022de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0208 	orr.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e005      	b.n	8002316 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002312:	2302      	movs	r3, #2
 8002314:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002316:	7dfb      	ldrb	r3, [r7, #23]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d004      	beq.n	800233e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2280      	movs	r2, #128	@ 0x80
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00c      	b.n	8002358 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2205      	movs	r2, #5
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002370:	4b8e      	ldr	r3, [pc, #568]	@ (80025ac <HAL_DMA_IRQHandler+0x248>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a8e      	ldr	r2, [pc, #568]	@ (80025b0 <HAL_DMA_IRQHandler+0x24c>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0a9b      	lsrs	r3, r3, #10
 800237c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002382:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238e:	2208      	movs	r2, #8
 8002390:	409a      	lsls	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01a      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0204 	bic.w	r2, r2, #4
 80023b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023bc:	2208      	movs	r2, #8
 80023be:	409a      	lsls	r2, r3
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d4:	2201      	movs	r2, #1
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d012      	beq.n	8002406 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f2:	2201      	movs	r2, #1
 80023f4:	409a      	lsls	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240a:	2204      	movs	r2, #4
 800240c:	409a      	lsls	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d012      	beq.n	800243c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00b      	beq.n	800243c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002428:	2204      	movs	r2, #4
 800242a:	409a      	lsls	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002434:	f043 0204 	orr.w	r2, r3, #4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002440:	2210      	movs	r2, #16
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d043      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d03c      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245e:	2210      	movs	r2, #16
 8002460:	409a      	lsls	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d018      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d108      	bne.n	8002494 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d024      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
 8002492:	e01f      	b.n	80024d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	4798      	blx	r3
 80024a4:	e016      	b.n	80024d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0208 	bic.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	2220      	movs	r2, #32
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 808f 	beq.w	8002604 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8087 	beq.w	8002604 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	2220      	movs	r2, #32
 80024fc:	409a      	lsls	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b05      	cmp	r3, #5
 800250c:	d136      	bne.n	800257c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0216 	bic.w	r2, r2, #22
 800251c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800252c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_DMA_IRQHandler+0x1da>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0208 	bic.w	r2, r2, #8
 800254c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002552:	223f      	movs	r2, #63	@ 0x3f
 8002554:	409a      	lsls	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256e:	2b00      	cmp	r3, #0
 8002570:	d07e      	beq.n	8002670 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
        }
        return;
 800257a:	e079      	b.n	8002670 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01d      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10d      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259c:	2b00      	cmp	r3, #0
 800259e:	d031      	beq.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
 80025a8:	e02c      	b.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
 80025aa:	bf00      	nop
 80025ac:	20000000 	.word	0x20000000
 80025b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d023      	beq.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
 80025c4:	e01e      	b.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0210 	bic.w	r2, r2, #16
 80025e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	2b00      	cmp	r3, #0
 800260a:	d032      	beq.n	8002672 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d022      	beq.n	800265e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2205      	movs	r2, #5
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	3301      	adds	r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	d307      	bcc.n	800264c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f2      	bne.n	8002630 <HAL_DMA_IRQHandler+0x2cc>
 800264a:	e000      	b.n	800264e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800264c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
 800266e:	e000      	b.n	8002672 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002670:	bf00      	nop
    }
  }
}
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002694:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b40      	cmp	r3, #64	@ 0x40
 80026a4:	d108      	bne.n	80026b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026b6:	e007      	b.n	80026c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	60da      	str	r2, [r3, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3b10      	subs	r3, #16
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <DMA_CalcBaseAndBitshift+0x64>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ee:	4a13      	ldr	r2, [pc, #76]	@ (800273c <DMA_CalcBaseAndBitshift+0x68>)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d909      	bls.n	8002716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	1d1a      	adds	r2, r3, #4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	659a      	str	r2, [r3, #88]	@ 0x58
 8002714:	e007      	b.n	8002726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	aaaaaaab 	.word	0xaaaaaaab
 800273c:	0800c6b8 	.word	0x0800c6b8

08002740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11f      	bne.n	800279a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d856      	bhi.n	800280e <DMA_CheckFifoParam+0xce>
 8002760:	a201      	add	r2, pc, #4	@ (adr r2, 8002768 <DMA_CheckFifoParam+0x28>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002779 	.word	0x08002779
 800276c:	0800278b 	.word	0x0800278b
 8002770:	08002779 	.word	0x08002779
 8002774:	0800280f 	.word	0x0800280f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d046      	beq.n	8002812 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e043      	b.n	8002812 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002792:	d140      	bne.n	8002816 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002798:	e03d      	b.n	8002816 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027a2:	d121      	bne.n	80027e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d837      	bhi.n	800281a <DMA_CheckFifoParam+0xda>
 80027aa:	a201      	add	r2, pc, #4	@ (adr r2, 80027b0 <DMA_CheckFifoParam+0x70>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027c1 	.word	0x080027c1
 80027b4:	080027c7 	.word	0x080027c7
 80027b8:	080027c1 	.word	0x080027c1
 80027bc:	080027d9 	.word	0x080027d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e030      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d025      	beq.n	800281e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d6:	e022      	b.n	800281e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027e0:	d11f      	bne.n	8002822 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027e6:	e01c      	b.n	8002822 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d903      	bls.n	80027f6 <DMA_CheckFifoParam+0xb6>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d003      	beq.n	80027fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027f4:	e018      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
      break;
 80027fa:	e015      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00e      	beq.n	8002826 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	e00b      	b.n	8002826 <DMA_CheckFifoParam+0xe6>
      break;
 800280e:	bf00      	nop
 8002810:	e00a      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e008      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
 8002818:	e006      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
 800281c:	e004      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 800281e:	bf00      	nop
 8002820:	e002      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;   
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
    }
  } 
  
  return status; 
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	@ 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e16b      	b.n	8002b2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 815a 	bne.w	8002b26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d005      	beq.n	800288a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002886:	2b02      	cmp	r3, #2
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d017      	beq.n	8002928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80b4 	beq.w	8002b26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b60      	ldr	r3, [pc, #384]	@ (8002b44 <HAL_GPIO_Init+0x30c>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4a5f      	ldr	r2, [pc, #380]	@ (8002b44 <HAL_GPIO_Init+0x30c>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002b44 <HAL_GPIO_Init+0x30c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029da:	4a5b      	ldr	r2, [pc, #364]	@ (8002b48 <HAL_GPIO_Init+0x310>)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a52      	ldr	r2, [pc, #328]	@ (8002b4c <HAL_GPIO_Init+0x314>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d02b      	beq.n	8002a5e <HAL_GPIO_Init+0x226>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a51      	ldr	r2, [pc, #324]	@ (8002b50 <HAL_GPIO_Init+0x318>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d025      	beq.n	8002a5a <HAL_GPIO_Init+0x222>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a50      	ldr	r2, [pc, #320]	@ (8002b54 <HAL_GPIO_Init+0x31c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01f      	beq.n	8002a56 <HAL_GPIO_Init+0x21e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4f      	ldr	r2, [pc, #316]	@ (8002b58 <HAL_GPIO_Init+0x320>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d019      	beq.n	8002a52 <HAL_GPIO_Init+0x21a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4e      	ldr	r2, [pc, #312]	@ (8002b5c <HAL_GPIO_Init+0x324>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_GPIO_Init+0x216>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4d      	ldr	r2, [pc, #308]	@ (8002b60 <HAL_GPIO_Init+0x328>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00d      	beq.n	8002a4a <HAL_GPIO_Init+0x212>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4c      	ldr	r2, [pc, #304]	@ (8002b64 <HAL_GPIO_Init+0x32c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <HAL_GPIO_Init+0x20e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4b      	ldr	r2, [pc, #300]	@ (8002b68 <HAL_GPIO_Init+0x330>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_GPIO_Init+0x20a>
 8002a3e:	2307      	movs	r3, #7
 8002a40:	e00e      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a42:	2308      	movs	r3, #8
 8002a44:	e00c      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a46:	2306      	movs	r3, #6
 8002a48:	e00a      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a4a:	2305      	movs	r3, #5
 8002a4c:	e008      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a4e:	2304      	movs	r3, #4
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a52:	2303      	movs	r3, #3
 8002a54:	e004      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	f002 0203 	and.w	r2, r2, #3
 8002a66:	0092      	lsls	r2, r2, #2
 8002a68:	4093      	lsls	r3, r2
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a70:	4935      	ldr	r1, [pc, #212]	@ (8002b48 <HAL_GPIO_Init+0x310>)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3302      	adds	r3, #2
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa2:	4a32      	ldr	r2, [pc, #200]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa8:	4b30      	ldr	r3, [pc, #192]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002acc:	4a27      	ldr	r2, [pc, #156]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad2:	4b26      	ldr	r3, [pc, #152]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b20:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b0f      	cmp	r3, #15
 8002b30:	f67f ae90 	bls.w	8002854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3724      	adds	r7, #36	@ 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	40020000 	.word	0x40020000
 8002b50:	40020400 	.word	0x40020400
 8002b54:	40020800 	.word	0x40020800
 8002b58:	40020c00 	.word	0x40020c00
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40021400 	.word	0x40021400
 8002b64:	40021800 	.word	0x40021800
 8002b68:	40021c00 	.word	0x40021c00
 8002b6c:	40013c00 	.word	0x40013c00

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb4:	887a      	ldrh	r2, [r7, #2]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	041a      	lsls	r2, r3, #16
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43d9      	mvns	r1, r3
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	400b      	ands	r3, r1
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	619a      	str	r2, [r3, #24]
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bee:	4a05      	ldr	r2, [pc, #20]	@ (8002c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fc74 	bl	80014e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40013c00 	.word	0x40013c00

08002c08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e101      	b.n	8002e1e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f006 fb91 	bl	800935c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c48:	d102      	bne.n	8002c50 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 ff78 	bl	8005b4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7c1a      	ldrb	r2, [r3, #16]
 8002c62:	f88d 2000 	strb.w	r2, [sp]
 8002c66:	3304      	adds	r3, #4
 8002c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6a:	f002 fe57 	bl	800591c <USB_CoreInit>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0ce      	b.n	8002e1e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 ff70 	bl	8005b6c <USB_SetCurrentMode>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0bf      	b.n	8002e1e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	e04a      	b.n	8002d3a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3315      	adds	r3, #21
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3314      	adds	r3, #20
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	b298      	uxth	r0, r3
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	332e      	adds	r3, #46	@ 0x2e
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3318      	adds	r3, #24
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	331c      	adds	r3, #28
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3320      	adds	r3, #32
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3324      	adds	r3, #36	@ 0x24
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	3301      	adds	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	791b      	ldrb	r3, [r3, #4]
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d3af      	bcc.n	8002ca4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	e044      	b.n	8002dd4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	791b      	ldrb	r3, [r3, #4]
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d3b5      	bcc.n	8002d4a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7c1a      	ldrb	r2, [r3, #16]
 8002de6:	f88d 2000 	strb.w	r2, [sp]
 8002dea:	3304      	adds	r3, #4
 8002dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dee:	f002 ff09 	bl	8005c04 <USB_DevInit>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e00c      	b.n	8002e1e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 ff53 	bl	8006cc2 <USB_DevDisconnect>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_PCD_Start+0x1c>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e022      	b.n	8002e88 <HAL_PCD_Start+0x62>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d105      	bne.n	8002e6a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e62:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 fe5a 	bl	8005b28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 ff01 	bl	8006c80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b08d      	sub	sp, #52	@ 0x34
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 ffbf 	bl	8006e2a <USB_GetMode>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 848c 	bne.w	80037cc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 ff23 	bl	8006d04 <USB_ReadInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8482 	beq.w	80037ca <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 ff10 	bl	8006d04 <USB_ReadInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d107      	bne.n	8002efe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f002 0202 	and.w	r2, r2, #2
 8002efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fefe 	bl	8006d04 <USB_ReadInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d161      	bne.n	8002fd6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0210 	bic.w	r2, r2, #16
 8002f20:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	f003 020f 	and.w	r2, r3, #15
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3304      	adds	r3, #4
 8002f40:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	0c5b      	lsrs	r3, r3, #17
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d124      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d035      	beq.n	8002fc6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	6a38      	ldr	r0, [r7, #32]
 8002f6e:	f003 fd35 	bl	80069dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f7e:	441a      	add	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f90:	441a      	add	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	615a      	str	r2, [r3, #20]
 8002f96:	e016      	b.n	8002fc6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	0c5b      	lsrs	r3, r3, #17
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	2b06      	cmp	r3, #6
 8002fa2:	d110      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002faa:	2208      	movs	r2, #8
 8002fac:	4619      	mov	r1, r3
 8002fae:	6a38      	ldr	r0, [r7, #32]
 8002fb0:	f003 fd14 	bl	80069dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc0:	441a      	add	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699a      	ldr	r2, [r3, #24]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0210 	orr.w	r2, r2, #16
 8002fd4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 fe92 	bl	8006d04 <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fe6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fea:	f040 80a7 	bne.w	800313c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 fe97 	bl	8006d2a <USB_ReadDevAllOutEpInterrupt>
 8002ffc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002ffe:	e099      	b.n	8003134 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 808e 	beq.w	8003128 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f003 febb 	bl	8006d92 <USB_ReadDevOutEPInterrupt>
 800301c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00c      	beq.n	8003042 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003034:	461a      	mov	r2, r3
 8003036:	2301      	movs	r3, #1
 8003038:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800303a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fea3 	bl	8003d88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003058:	461a      	mov	r2, r3
 800305a:	2308      	movs	r3, #8
 800305c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800305e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 ff79 	bl	8003f58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800307c:	461a      	mov	r2, r3
 800307e:	2310      	movs	r3, #16
 8003080:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d030      	beq.n	80030ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003094:	2b80      	cmp	r3, #128	@ 0x80
 8003096:	d109      	bne.n	80030ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80030ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	3304      	adds	r3, #4
 80030c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	78db      	ldrb	r3, [r3, #3]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d108      	bne.n	80030dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	4619      	mov	r1, r3
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f006 fa46 	bl	8009568 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e8:	461a      	mov	r2, r3
 80030ea:	2302      	movs	r3, #2
 80030ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003104:	461a      	mov	r2, r3
 8003106:	2320      	movs	r3, #32
 8003108:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d009      	beq.n	8003128 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	4413      	add	r3, r2
 800311c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003120:	461a      	mov	r2, r3
 8003122:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003126:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	3301      	adds	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800312e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003136:	2b00      	cmp	r3, #0
 8003138:	f47f af62 	bne.w	8003000 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f003 fddf 	bl	8006d04 <USB_ReadInterrupts>
 8003146:	4603      	mov	r3, r0
 8003148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800314c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003150:	f040 80db 	bne.w	800330a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f003 fe00 	bl	8006d5e <USB_ReadDevAllInEpInterrupt>
 800315e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003164:	e0cd      	b.n	8003302 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80c2 	beq.w	80032f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f003 fe26 	bl	8006dce <USB_ReadDevInEPInterrupt>
 8003182:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d057      	beq.n	800323e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	2201      	movs	r2, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69f9      	ldr	r1, [r7, #28]
 80031aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031ae:	4013      	ands	r3, r2
 80031b0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031be:	461a      	mov	r2, r3
 80031c0:	2301      	movs	r3, #1
 80031c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	799b      	ldrb	r3, [r3, #6]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d132      	bne.n	8003232 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	3320      	adds	r3, #32
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4403      	add	r3, r0
 80031ec:	331c      	adds	r3, #28
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4419      	add	r1, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4403      	add	r3, r0
 8003200:	3320      	adds	r3, #32
 8003202:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	2b00      	cmp	r3, #0
 8003208:	d113      	bne.n	8003232 <HAL_PCD_IRQHandler+0x3a2>
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3324      	adds	r3, #36	@ 0x24
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d108      	bne.n	8003232 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800322a:	461a      	mov	r2, r3
 800322c:	2101      	movs	r1, #1
 800322e:	f003 fe2d 	bl	8006e8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f006 f910 	bl	800945e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003254:	461a      	mov	r2, r3
 8003256:	2308      	movs	r3, #8
 8003258:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003270:	461a      	mov	r2, r3
 8003272:	2310      	movs	r3, #16
 8003274:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800328c:	461a      	mov	r2, r3
 800328e:	2340      	movs	r3, #64	@ 0x40
 8003290:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d023      	beq.n	80032e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800329c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800329e:	6a38      	ldr	r0, [r7, #32]
 80032a0:	f002 fe14 	bl	8005ecc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80032a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	3310      	adds	r3, #16
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	3304      	adds	r3, #4
 80032b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	78db      	ldrb	r3, [r3, #3]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d108      	bne.n	80032d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2200      	movs	r2, #0
 80032c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f006 f95d 	bl	800958c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032de:	461a      	mov	r2, r3
 80032e0:	2302      	movs	r3, #2
 80032e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fcbd 	bl	8003c70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	3301      	adds	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80032fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	f47f af2e 	bne.w	8003166 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 fcf8 	bl	8006d04 <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800331a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800331e:	d122      	bne.n	8003366 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800333a:	2b01      	cmp	r3, #1
 800333c:	d108      	bne.n	8003350 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003346:	2100      	movs	r1, #0
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fea3 	bl	8004094 <HAL_PCDEx_LPM_Callback>
 800334e:	e002      	b.n	8003356 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f006 f8fb 	bl	800954c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003364:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f003 fcca 	bl	8006d04 <USB_ReadInterrupts>
 8003370:	4603      	mov	r3, r0
 8003372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003376:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800337a:	d112      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d102      	bne.n	8003392 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f006 f8b7 	bl	8009500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80033a0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 fcac 	bl	8006d04 <USB_ReadInterrupts>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b6:	f040 80b7 	bne.w	8003528 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2110      	movs	r1, #16
 80033d4:	4618      	mov	r0, r3
 80033d6:	f002 fd79 	bl	8005ecc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033de:	e046      	b.n	800346e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ec:	461a      	mov	r2, r3
 80033ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	440a      	add	r2, r1
 800340a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800340e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003412:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003420:	461a      	mov	r2, r3
 8003422:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003426:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003438:	0151      	lsls	r1, r2, #5
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	440a      	add	r2, r1
 800343e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003442:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003446:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003458:	0151      	lsls	r1, r2, #5
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	440a      	add	r2, r1
 800345e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003462:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003466:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	3301      	adds	r3, #1
 800346c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	791b      	ldrb	r3, [r3, #4]
 8003472:	461a      	mov	r2, r3
 8003474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003476:	4293      	cmp	r3, r2
 8003478:	d3b2      	bcc.n	80033e0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003488:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800348c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7bdb      	ldrb	r3, [r3, #15]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800349c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034a6:	f043 030b 	orr.w	r3, r3, #11
 80034aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034bc:	f043 030b 	orr.w	r3, r3, #11
 80034c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034c2:	e015      	b.n	80034f0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034d6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80034da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034ea:	f043 030b 	orr.w	r3, r3, #11
 80034ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003502:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003512:	461a      	mov	r2, r3
 8003514:	f003 fcba 	bl	8006e8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f003 fbe9 	bl	8006d04 <USB_ReadInterrupts>
 8003532:	4603      	mov	r3, r0
 8003534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800353c:	d123      	bne.n	8003586 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f003 fc7f 	bl	8006e46 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f002 fd36 	bl	8005fbe <USB_GetDevSpeed>
 8003552:	4603      	mov	r3, r0
 8003554:	461a      	mov	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681c      	ldr	r4, [r3, #0]
 800355e:	f001 fa07 	bl	8004970 <HAL_RCC_GetHCLKFreq>
 8003562:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003568:	461a      	mov	r2, r3
 800356a:	4620      	mov	r0, r4
 800356c:	f002 fa3a 	bl	80059e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f005 ff9c 	bl	80094ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003584:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f003 fbba 	bl	8006d04 <USB_ReadInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b08      	cmp	r3, #8
 8003598:	d10a      	bne.n	80035b0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f005 ff79 	bl	8009492 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f002 0208 	and.w	r2, r2, #8
 80035ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f003 fba5 	bl	8006d04 <USB_ReadInterrupts>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c0:	2b80      	cmp	r3, #128	@ 0x80
 80035c2:	d123      	bne.n	800360c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035d0:	2301      	movs	r3, #1
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d4:	e014      	b.n	8003600 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fb0a 	bl	8003c0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	3301      	adds	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	791b      	ldrb	r3, [r3, #4]
 8003604:	461a      	mov	r2, r3
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	4293      	cmp	r3, r2
 800360a:	d3e4      	bcc.n	80035d6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f003 fb77 	bl	8006d04 <USB_ReadInterrupts>
 8003616:	4603      	mov	r3, r0
 8003618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800361c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003620:	d13c      	bne.n	800369c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003622:	2301      	movs	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
 8003626:	e02b      	b.n	8003680 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3318      	adds	r3, #24
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d115      	bne.n	800367a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800364e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003650:	2b00      	cmp	r3, #0
 8003652:	da12      	bge.n	800367a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3317      	adds	r3, #23
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 faca 	bl	8003c0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	3301      	adds	r3, #1
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	791b      	ldrb	r3, [r3, #4]
 8003684:	461a      	mov	r2, r3
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	4293      	cmp	r3, r2
 800368a:	d3cd      	bcc.n	8003628 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800369a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 fb2f 	bl	8006d04 <USB_ReadInterrupts>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036b0:	d156      	bne.n	8003760 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036b2:	2301      	movs	r3, #1
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b6:	e045      	b.n	8003744 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d12e      	bne.n	800373e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	da2b      	bge.n	800373e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80036f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d121      	bne.n	800373e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800373a:	6053      	str	r3, [r2, #4]
            break;
 800373c:	e008      	b.n	8003750 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	3301      	adds	r3, #1
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	791b      	ldrb	r3, [r3, #4]
 8003748:	461a      	mov	r2, r3
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	4293      	cmp	r3, r2
 800374e:	d3b3      	bcc.n	80036b8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800375e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f003 facd 	bl	8006d04 <USB_ReadInterrupts>
 800376a:	4603      	mov	r3, r0
 800376c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003774:	d10a      	bne.n	800378c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f005 ff1a 	bl	80095b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800378a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f003 fab7 	bl	8006d04 <USB_ReadInterrupts>
 8003796:	4603      	mov	r3, r0
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d115      	bne.n	80037cc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f005 ff0a 	bl	80095cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	e000      	b.n	80037cc <HAL_PCD_IRQHandler+0x93c>
      return;
 80037ca:	bf00      	nop
    }
  }
}
 80037cc:	3734      	adds	r7, #52	@ 0x34
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd90      	pop	{r4, r7, pc}

080037d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_PCD_SetAddress+0x1a>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e012      	b.n	8003812 <HAL_PCD_SetAddress+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f003 fa16 	bl	8006c34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	4608      	mov	r0, r1
 8003824:	4611      	mov	r1, r2
 8003826:	461a      	mov	r2, r3
 8003828:	4603      	mov	r3, r0
 800382a:	70fb      	strb	r3, [r7, #3]
 800382c:	460b      	mov	r3, r1
 800382e:	803b      	strh	r3, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800383c:	2b00      	cmp	r3, #0
 800383e:	da0f      	bge.n	8003860 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	f003 020f 	and.w	r2, r3, #15
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	3310      	adds	r3, #16
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	705a      	strb	r2, [r3, #1]
 800385e:	e00f      	b.n	8003880 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	f003 020f 	and.w	r2, r3, #15
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800388c:	883b      	ldrh	r3, [r7, #0]
 800388e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	78ba      	ldrb	r2, [r7, #2]
 800389a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038ae:	78bb      	ldrb	r3, [r7, #2]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d102      	bne.n	80038ba <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_PCD_EP_Open+0xae>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e00e      	b.n	80038e6 <HAL_PCD_EP_Open+0xcc>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68f9      	ldr	r1, [r7, #12]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f002 fb96 	bl	8006008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80038e4:	7afb      	ldrb	r3, [r7, #11]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	da0f      	bge.n	8003922 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	f003 020f 	and.w	r2, r3, #15
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	3310      	adds	r3, #16
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	3304      	adds	r3, #4
 8003918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	705a      	strb	r2, [r3, #1]
 8003920:	e00f      	b.n	8003942 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	3304      	adds	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_PCD_EP_Close+0x6e>
 8003958:	2302      	movs	r3, #2
 800395a:	e00e      	b.n	800397a <HAL_PCD_EP_Close+0x8c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68f9      	ldr	r1, [r7, #12]
 800396a:	4618      	mov	r0, r3
 800396c:	f002 fbd4 	bl	8006118 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	460b      	mov	r3, r1
 8003990:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003992:	7afb      	ldrb	r3, [r7, #11]
 8003994:	f003 020f 	and.w	r2, r3, #15
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	3304      	adds	r3, #4
 80039aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2200      	movs	r2, #0
 80039bc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2200      	movs	r2, #0
 80039c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c4:	7afb      	ldrb	r3, [r7, #11]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	799b      	ldrb	r3, [r3, #6]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	799b      	ldrb	r3, [r3, #6]
 80039e6:	461a      	mov	r2, r3
 80039e8:	6979      	ldr	r1, [r7, #20]
 80039ea:	f002 fc71 	bl	80062d0 <USB_EPStartXfer>

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	f003 020f 	and.w	r2, r3, #15
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003a1a:	681b      	ldr	r3, [r3, #0]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	460b      	mov	r3, r1
 8003a36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a38:	7afb      	ldrb	r3, [r7, #11]
 8003a3a:	f003 020f 	and.w	r2, r3, #15
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	3310      	adds	r3, #16
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2201      	movs	r2, #1
 8003a66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a68:	7afb      	ldrb	r3, [r7, #11]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	799b      	ldrb	r3, [r3, #6]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d102      	bne.n	8003a82 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	799b      	ldrb	r3, [r3, #6]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6979      	ldr	r1, [r7, #20]
 8003a8e:	f002 fc1f 	bl	80062d0 <USB_EPStartXfer>

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	7912      	ldrb	r2, [r2, #4]
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e04f      	b.n	8003b5a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	da0f      	bge.n	8003ae2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	f003 020f 	and.w	r2, r3, #15
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	3310      	adds	r3, #16
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	705a      	strb	r2, [r3, #1]
 8003ae0:	e00d      	b.n	8003afe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_PCD_EP_SetStall+0x82>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e01d      	b.n	8003b5a <HAL_PCD_EP_SetStall+0xbe>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 ffad 	bl	8006a8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7999      	ldrb	r1, [r3, #6]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f003 f99e 	bl	8006e8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	7912      	ldrb	r2, [r2, #4]
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e042      	b.n	8003c06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	da0f      	bge.n	8003ba8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	f003 020f 	and.w	r2, r3, #15
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	3310      	adds	r3, #16
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	705a      	strb	r2, [r3, #1]
 8003ba6:	e00f      	b.n	8003bc8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_PCD_EP_ClrStall+0x86>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e00e      	b.n	8003c06 <HAL_PCD_EP_ClrStall+0xa4>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68f9      	ldr	r1, [r7, #12]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f002 ffb6 	bl	8006b68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da0c      	bge.n	8003c3c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	f003 020f 	and.w	r2, r3, #15
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	3310      	adds	r3, #16
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	3304      	adds	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e00c      	b.n	8003c56 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 020f 	and.w	r2, r3, #15
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	3304      	adds	r3, #4
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f002 fdd5 	bl	800680c <USB_EPStopXfer>
 8003c62:	4603      	mov	r3, r0
 8003c64:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c66:	7afb      	ldrb	r3, [r7, #11]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	@ 0x28
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	4613      	mov	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	3310      	adds	r3, #16
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	3304      	adds	r3, #4
 8003c96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d901      	bls.n	8003ca8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e06b      	b.n	8003d80 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d902      	bls.n	8003cc4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	3303      	adds	r3, #3
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ccc:	e02a      	b.n	8003d24 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d902      	bls.n	8003cea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3303      	adds	r3, #3
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	68d9      	ldr	r1, [r3, #12]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	4603      	mov	r3, r0
 8003d06:	6978      	ldr	r0, [r7, #20]
 8003d08:	f002 fe2a 	bl	8006960 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	441a      	add	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	441a      	add	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d809      	bhi.n	8003d4e <PCD_WriteEmptyTxFifo+0xde>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d203      	bcs.n	8003d4e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1bf      	bne.n	8003cce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d811      	bhi.n	8003d7e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	2201      	movs	r2, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	6939      	ldr	r1, [r7, #16]
 8003d76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	333c      	adds	r3, #60	@ 0x3c
 8003da0:	3304      	adds	r3, #4
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	799b      	ldrb	r3, [r3, #6]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d17b      	bne.n	8003eb6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d015      	beq.n	8003df4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4a61      	ldr	r2, [pc, #388]	@ (8003f50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f240 80b9 	bls.w	8003f44 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80b3 	beq.w	8003f44 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dea:	461a      	mov	r2, r3
 8003dec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003df0:	6093      	str	r3, [r2, #8]
 8003df2:	e0a7      	b.n	8003f44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	6093      	str	r3, [r2, #8]
 8003e10:	e098      	b.n	8003f44 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f040 8093 	bne.w	8003f44 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	4a4b      	ldr	r2, [pc, #300]	@ (8003f50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d90f      	bls.n	8003e46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	e07e      	b.n	8003f44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	3304      	adds	r3, #4
 8003e5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	0159      	lsls	r1, r3, #5
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	440b      	add	r3, r1
 8003e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e72:	1ad2      	subs	r2, r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d114      	bne.n	8003ea8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e90:	461a      	mov	r2, r3
 8003e92:	2101      	movs	r1, #1
 8003e94:	f002 fffa 	bl	8006e8c <USB_EP0_OutStart>
 8003e98:	e006      	b.n	8003ea8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	441a      	add	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f005 faba 	bl	8009428 <HAL_PCD_DataOutStageCallback>
 8003eb4:	e046      	b.n	8003f44 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	4a26      	ldr	r2, [pc, #152]	@ (8003f54 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d124      	bne.n	8003f08 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eda:	6093      	str	r3, [r2, #8]
 8003edc:	e032      	b.n	8003f44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2320      	movs	r3, #32
 8003ef8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f005 fa91 	bl	8009428 <HAL_PCD_DataOutStageCallback>
 8003f06:	e01d      	b.n	8003f44 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d114      	bne.n	8003f38 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d108      	bne.n	8003f38 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f30:	461a      	mov	r2, r3
 8003f32:	2100      	movs	r1, #0
 8003f34:	f002 ffaa 	bl	8006e8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f005 fa72 	bl	8009428 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	4f54300a 	.word	0x4f54300a
 8003f54:	4f54310a 	.word	0x4f54310a

08003f58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	333c      	adds	r3, #60	@ 0x3c
 8003f70:	3304      	adds	r3, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a15      	ldr	r2, [pc, #84]	@ (8003fe0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d90e      	bls.n	8003fac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003faa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f005 fa29 	bl	8009404 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d90c      	bls.n	8003fd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	799b      	ldrb	r3, [r3, #6]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d108      	bne.n	8003fd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2101      	movs	r1, #1
 8003fd0:	f002 ff5c 	bl	8006e8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	4f54300a 	.word	0x4f54300a

08003fe4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004002:	883b      	ldrh	r3, [r7, #0]
 8004004:	0419      	lsls	r1, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	430a      	orrs	r2, r1
 800400e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004010:	e028      	b.n	8004064 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	4413      	add	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e00d      	b.n	8004042 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	3340      	adds	r3, #64	@ 0x40
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	4413      	add	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	3301      	adds	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	3b01      	subs	r3, #1
 8004048:	429a      	cmp	r2, r3
 800404a:	d3ec      	bcc.n	8004026 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800404c:	883b      	ldrh	r3, [r7, #0]
 800404e:	0418      	lsls	r0, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	3b01      	subs	r3, #1
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	4302      	orrs	r2, r0
 800405c:	3340      	adds	r3, #64	@ 0x40
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	887a      	ldrh	r2, [r7, #2]
 8004084:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e267      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d075      	beq.n	80041b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040ca:	4b88      	ldr	r3, [pc, #544]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d00c      	beq.n	80040f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d6:	4b85      	ldr	r3, [pc, #532]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d112      	bne.n	8004108 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e2:	4b82      	ldr	r3, [pc, #520]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ee:	d10b      	bne.n	8004108 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f0:	4b7e      	ldr	r3, [pc, #504]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d05b      	beq.n	80041b4 <HAL_RCC_OscConfig+0x108>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d157      	bne.n	80041b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e242      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004110:	d106      	bne.n	8004120 <HAL_RCC_OscConfig+0x74>
 8004112:	4b76      	ldr	r3, [pc, #472]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a75      	ldr	r2, [pc, #468]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e01d      	b.n	800415c <HAL_RCC_OscConfig+0xb0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0x98>
 800412a:	4b70      	ldr	r3, [pc, #448]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a6f      	ldr	r2, [pc, #444]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b6d      	ldr	r3, [pc, #436]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a6c      	ldr	r2, [pc, #432]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0xb0>
 8004144:	4b69      	ldr	r3, [pc, #420]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a68      	ldr	r2, [pc, #416]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 800414a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b66      	ldr	r3, [pc, #408]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a65      	ldr	r2, [pc, #404]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800415a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7fd fe94 	bl	8001e90 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416c:	f7fd fe90 	bl	8001e90 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	@ 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e207      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b5b      	ldr	r3, [pc, #364]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0xc0>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fd fe80 	bl	8001e90 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fd fe7c 	bl	8001e90 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	@ 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e1f3      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	4b51      	ldr	r3, [pc, #324]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0xe8>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d063      	beq.n	800428a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041c2:	4b4a      	ldr	r3, [pc, #296]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b47      	ldr	r3, [pc, #284]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d11c      	bne.n	8004214 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041da:	4b44      	ldr	r3, [pc, #272]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d116      	bne.n	8004214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	4b41      	ldr	r3, [pc, #260]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_RCC_OscConfig+0x152>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d001      	beq.n	80041fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e1c7      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fe:	4b3b      	ldr	r3, [pc, #236]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4937      	ldr	r1, [pc, #220]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004212:	e03a      	b.n	800428a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d020      	beq.n	800425e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800421c:	4b34      	ldr	r3, [pc, #208]	@ (80042f0 <HAL_RCC_OscConfig+0x244>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004222:	f7fd fe35 	bl	8001e90 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800422a:	f7fd fe31 	bl	8001e90 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e1a8      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423c:	4b2b      	ldr	r3, [pc, #172]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004248:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4925      	ldr	r1, [pc, #148]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]
 800425c:	e015      	b.n	800428a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800425e:	4b24      	ldr	r3, [pc, #144]	@ (80042f0 <HAL_RCC_OscConfig+0x244>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd fe14 	bl	8001e90 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426c:	f7fd fe10 	bl	8001e90 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e187      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d036      	beq.n	8004304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d016      	beq.n	80042cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800429e:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <HAL_RCC_OscConfig+0x248>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7fd fdf4 	bl	8001e90 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ac:	f7fd fdf0 	bl	8001e90 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e167      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042be:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <HAL_RCC_OscConfig+0x240>)
 80042c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x200>
 80042ca:	e01b      	b.n	8004304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042cc:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <HAL_RCC_OscConfig+0x248>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d2:	f7fd fddd 	bl	8001e90 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d8:	e00e      	b.n	80042f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042da:	f7fd fdd9 	bl	8001e90 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d907      	bls.n	80042f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e150      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
 80042ec:	40023800 	.word	0x40023800
 80042f0:	42470000 	.word	0x42470000
 80042f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f8:	4b88      	ldr	r3, [pc, #544]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80042fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1ea      	bne.n	80042da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8097 	beq.w	8004440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004312:	2300      	movs	r3, #0
 8004314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004316:	4b81      	ldr	r3, [pc, #516]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	4b7d      	ldr	r3, [pc, #500]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	4a7c      	ldr	r2, [pc, #496]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004330:	6413      	str	r3, [r2, #64]	@ 0x40
 8004332:	4b7a      	ldr	r3, [pc, #488]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433e:	2301      	movs	r3, #1
 8004340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004342:	4b77      	ldr	r3, [pc, #476]	@ (8004520 <HAL_RCC_OscConfig+0x474>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d118      	bne.n	8004380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434e:	4b74      	ldr	r3, [pc, #464]	@ (8004520 <HAL_RCC_OscConfig+0x474>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a73      	ldr	r2, [pc, #460]	@ (8004520 <HAL_RCC_OscConfig+0x474>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435a:	f7fd fd99 	bl	8001e90 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004362:	f7fd fd95 	bl	8001e90 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e10c      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004374:	4b6a      	ldr	r3, [pc, #424]	@ (8004520 <HAL_RCC_OscConfig+0x474>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d106      	bne.n	8004396 <HAL_RCC_OscConfig+0x2ea>
 8004388:	4b64      	ldr	r3, [pc, #400]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	4a63      	ldr	r2, [pc, #396]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6713      	str	r3, [r2, #112]	@ 0x70
 8004394:	e01c      	b.n	80043d0 <HAL_RCC_OscConfig+0x324>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b05      	cmp	r3, #5
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x30c>
 800439e:	4b5f      	ldr	r3, [pc, #380]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a2:	4a5e      	ldr	r2, [pc, #376]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80043a4:	f043 0304 	orr.w	r3, r3, #4
 80043a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043aa:	4b5c      	ldr	r3, [pc, #368]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	4a5b      	ldr	r2, [pc, #364]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0x324>
 80043b8:	4b58      	ldr	r3, [pc, #352]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043bc:	4a57      	ldr	r2, [pc, #348]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c4:	4b55      	ldr	r3, [pc, #340]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c8:	4a54      	ldr	r2, [pc, #336]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80043ca:	f023 0304 	bic.w	r3, r3, #4
 80043ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fd fd5a 	bl	8001e90 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fd fd56 	bl	8001e90 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e0cb      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f6:	4b49      	ldr	r3, [pc, #292]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0ee      	beq.n	80043e0 <HAL_RCC_OscConfig+0x334>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004404:	f7fd fd44 	bl	8001e90 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440a:	e00a      	b.n	8004422 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440c:	f7fd fd40 	bl	8001e90 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e0b5      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004422:	4b3e      	ldr	r3, [pc, #248]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ee      	bne.n	800440c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004434:	4b39      	ldr	r3, [pc, #228]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	4a38      	ldr	r2, [pc, #224]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 800443a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800443e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a1 	beq.w	800458c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800444a:	4b34      	ldr	r3, [pc, #208]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b08      	cmp	r3, #8
 8004454:	d05c      	beq.n	8004510 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d141      	bne.n	80044e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445e:	4b31      	ldr	r3, [pc, #196]	@ (8004524 <HAL_RCC_OscConfig+0x478>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fd fd14 	bl	8001e90 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446c:	f7fd fd10 	bl	8001e90 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e087      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	4b27      	ldr	r3, [pc, #156]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	019b      	lsls	r3, r3, #6
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	3b01      	subs	r3, #1
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	491b      	ldr	r1, [pc, #108]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <HAL_RCC_OscConfig+0x478>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fd fce9 	bl	8001e90 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fd fce5 	bl	8001e90 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e05c      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d4:	4b11      	ldr	r3, [pc, #68]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x416>
 80044e0:	e054      	b.n	800458c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <HAL_RCC_OscConfig+0x478>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fd fcd2 	bl	8001e90 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd fcce 	bl	8001e90 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e045      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004502:	4b06      	ldr	r3, [pc, #24]	@ (800451c <HAL_RCC_OscConfig+0x470>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x444>
 800450e:	e03d      	b.n	800458c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e038      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
 800451c:	40023800 	.word	0x40023800
 8004520:	40007000 	.word	0x40007000
 8004524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004528:	4b1b      	ldr	r3, [pc, #108]	@ (8004598 <HAL_RCC_OscConfig+0x4ec>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d028      	beq.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d121      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d11a      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004558:	4013      	ands	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800455e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004560:	4293      	cmp	r3, r2
 8004562:	d111      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	3b01      	subs	r3, #1
 8004572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800

0800459c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0cc      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b0:	4b68      	ldr	r3, [pc, #416]	@ (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d90c      	bls.n	80045d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b65      	ldr	r3, [pc, #404]	@ (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c6:	4b63      	ldr	r3, [pc, #396]	@ (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d001      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0b8      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d020      	beq.n	8004626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f0:	4b59      	ldr	r3, [pc, #356]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4a58      	ldr	r2, [pc, #352]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004608:	4b53      	ldr	r3, [pc, #332]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a52      	ldr	r2, [pc, #328]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004614:	4b50      	ldr	r3, [pc, #320]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	494d      	ldr	r1, [pc, #308]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d044      	beq.n	80046bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463a:	4b47      	ldr	r3, [pc, #284]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d119      	bne.n	800467a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e07f      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d003      	beq.n	800465a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004656:	2b03      	cmp	r3, #3
 8004658:	d107      	bne.n	800466a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465a:	4b3f      	ldr	r3, [pc, #252]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e06f      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466a:	4b3b      	ldr	r3, [pc, #236]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e067      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467a:	4b37      	ldr	r3, [pc, #220]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f023 0203 	bic.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	4934      	ldr	r1, [pc, #208]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800468c:	f7fd fc00 	bl	8001e90 <HAL_GetTick>
 8004690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	e00a      	b.n	80046aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7fd fbfc 	bl	8001e90 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e04f      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 020c 	and.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d1eb      	bne.n	8004694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046bc:	4b25      	ldr	r3, [pc, #148]	@ (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d20c      	bcs.n	80046e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b22      	ldr	r3, [pc, #136]	@ (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b20      	ldr	r3, [pc, #128]	@ (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e032      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f0:	4b19      	ldr	r3, [pc, #100]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4916      	ldr	r1, [pc, #88]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800470e:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	490e      	ldr	r1, [pc, #56]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004722:	f000 f821 	bl	8004768 <HAL_RCC_GetSysClockFreq>
 8004726:	4602      	mov	r2, r0
 8004728:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	490a      	ldr	r1, [pc, #40]	@ (800475c <HAL_RCC_ClockConfig+0x1c0>)
 8004734:	5ccb      	ldrb	r3, [r1, r3]
 8004736:	fa22 f303 	lsr.w	r3, r2, r3
 800473a:	4a09      	ldr	r2, [pc, #36]	@ (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800473e:	4b09      	ldr	r3, [pc, #36]	@ (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fd fb60 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40023c00 	.word	0x40023c00
 8004758:	40023800 	.word	0x40023800
 800475c:	0800c6a8 	.word	0x0800c6a8
 8004760:	20000000 	.word	0x20000000
 8004764:	20000004 	.word	0x20000004

08004768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800476c:	b094      	sub	sp, #80	@ 0x50
 800476e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004780:	4b79      	ldr	r3, [pc, #484]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 030c 	and.w	r3, r3, #12
 8004788:	2b08      	cmp	r3, #8
 800478a:	d00d      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0x40>
 800478c:	2b08      	cmp	r3, #8
 800478e:	f200 80e1 	bhi.w	8004954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0x34>
 8004796:	2b04      	cmp	r3, #4
 8004798:	d003      	beq.n	80047a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800479a:	e0db      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800479c:	4b73      	ldr	r3, [pc, #460]	@ (800496c <HAL_RCC_GetSysClockFreq+0x204>)
 800479e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047a0:	e0db      	b.n	800495a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047a2:	4b72      	ldr	r3, [pc, #456]	@ (800496c <HAL_RCC_GetSysClockFreq+0x204>)
 80047a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047a6:	e0d8      	b.n	800495a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d063      	beq.n	8004886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047be:	4b6a      	ldr	r3, [pc, #424]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	099b      	lsrs	r3, r3, #6
 80047c4:	2200      	movs	r2, #0
 80047c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047d2:	2300      	movs	r3, #0
 80047d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047da:	4622      	mov	r2, r4
 80047dc:	462b      	mov	r3, r5
 80047de:	f04f 0000 	mov.w	r0, #0
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	0159      	lsls	r1, r3, #5
 80047e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ec:	0150      	lsls	r0, r2, #5
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4621      	mov	r1, r4
 80047f4:	1a51      	subs	r1, r2, r1
 80047f6:	6139      	str	r1, [r7, #16]
 80047f8:	4629      	mov	r1, r5
 80047fa:	eb63 0301 	sbc.w	r3, r3, r1
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800480c:	4659      	mov	r1, fp
 800480e:	018b      	lsls	r3, r1, #6
 8004810:	4651      	mov	r1, sl
 8004812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004816:	4651      	mov	r1, sl
 8004818:	018a      	lsls	r2, r1, #6
 800481a:	4651      	mov	r1, sl
 800481c:	ebb2 0801 	subs.w	r8, r2, r1
 8004820:	4659      	mov	r1, fp
 8004822:	eb63 0901 	sbc.w	r9, r3, r1
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800483a:	4690      	mov	r8, r2
 800483c:	4699      	mov	r9, r3
 800483e:	4623      	mov	r3, r4
 8004840:	eb18 0303 	adds.w	r3, r8, r3
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	462b      	mov	r3, r5
 8004848:	eb49 0303 	adc.w	r3, r9, r3
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800485a:	4629      	mov	r1, r5
 800485c:	028b      	lsls	r3, r1, #10
 800485e:	4621      	mov	r1, r4
 8004860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004864:	4621      	mov	r1, r4
 8004866:	028a      	lsls	r2, r1, #10
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800486e:	2200      	movs	r2, #0
 8004870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004878:	f7fc f996 	bl	8000ba8 <__aeabi_uldivmod>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4613      	mov	r3, r2
 8004882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004884:	e058      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004886:	4b38      	ldr	r3, [pc, #224]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	099b      	lsrs	r3, r3, #6
 800488c:	2200      	movs	r2, #0
 800488e:	4618      	mov	r0, r3
 8004890:	4611      	mov	r1, r2
 8004892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004896:	623b      	str	r3, [r7, #32]
 8004898:	2300      	movs	r3, #0
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24
 800489c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048a0:	4642      	mov	r2, r8
 80048a2:	464b      	mov	r3, r9
 80048a4:	f04f 0000 	mov.w	r0, #0
 80048a8:	f04f 0100 	mov.w	r1, #0
 80048ac:	0159      	lsls	r1, r3, #5
 80048ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b2:	0150      	lsls	r0, r2, #5
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4641      	mov	r1, r8
 80048ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80048be:	4649      	mov	r1, r9
 80048c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048d8:	ebb2 040a 	subs.w	r4, r2, sl
 80048dc:	eb63 050b 	sbc.w	r5, r3, fp
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	00eb      	lsls	r3, r5, #3
 80048ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ee:	00e2      	lsls	r2, r4, #3
 80048f0:	4614      	mov	r4, r2
 80048f2:	461d      	mov	r5, r3
 80048f4:	4643      	mov	r3, r8
 80048f6:	18e3      	adds	r3, r4, r3
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	464b      	mov	r3, r9
 80048fc:	eb45 0303 	adc.w	r3, r5, r3
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800490e:	4629      	mov	r1, r5
 8004910:	028b      	lsls	r3, r1, #10
 8004912:	4621      	mov	r1, r4
 8004914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004918:	4621      	mov	r1, r4
 800491a:	028a      	lsls	r2, r1, #10
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004922:	2200      	movs	r2, #0
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	61fa      	str	r2, [r7, #28]
 8004928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800492c:	f7fc f93c 	bl	8000ba8 <__aeabi_uldivmod>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4613      	mov	r3, r2
 8004936:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004938:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	3301      	adds	r3, #1
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004948:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800494a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004952:	e002      	b.n	800495a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004954:	4b05      	ldr	r3, [pc, #20]	@ (800496c <HAL_RCC_GetSysClockFreq+0x204>)
 8004956:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800495a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800495c:	4618      	mov	r0, r3
 800495e:	3750      	adds	r7, #80	@ 0x50
 8004960:	46bd      	mov	sp, r7
 8004962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800
 800496c:	00f42400 	.word	0x00f42400

08004970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004974:	4b03      	ldr	r3, [pc, #12]	@ (8004984 <HAL_RCC_GetHCLKFreq+0x14>)
 8004976:	681b      	ldr	r3, [r3, #0]
}
 8004978:	4618      	mov	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000000 	.word	0x20000000

08004988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e07b      	b.n	8004a92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d108      	bne.n	80049b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049aa:	d009      	beq.n	80049c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	61da      	str	r2, [r3, #28]
 80049b2:	e005      	b.n	80049c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fc ffd4 	bl	8001988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a44:	ea42 0103 	orr.w	r1, r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	f003 0104 	and.w	r1, r3, #4
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a66:	f003 0210 	and.w	r2, r3, #16
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b088      	sub	sp, #32
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aaa:	f7fd f9f1 	bl	8001e90 <HAL_GetTick>
 8004aae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d001      	beq.n	8004ac4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e12a      	b.n	8004d1a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_SPI_Transmit+0x36>
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e122      	b.n	8004d1a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_SPI_Transmit+0x48>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e11b      	b.n	8004d1a <HAL_SPI_Transmit+0x280>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2203      	movs	r2, #3
 8004aee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	88fa      	ldrh	r2, [r7, #6]
 8004b02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	88fa      	ldrh	r2, [r7, #6]
 8004b08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b30:	d10f      	bne.n	8004b52 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5c:	2b40      	cmp	r3, #64	@ 0x40
 8004b5e:	d007      	beq.n	8004b70 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b78:	d152      	bne.n	8004c20 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_SPI_Transmit+0xee>
 8004b82:	8b7b      	ldrh	r3, [r7, #26]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d145      	bne.n	8004c14 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8c:	881a      	ldrh	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b98:	1c9a      	adds	r2, r3, #2
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bac:	e032      	b.n	8004c14 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d112      	bne.n	8004be2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc0:	881a      	ldrh	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004be0:	e018      	b.n	8004c14 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004be2:	f7fd f955 	bl	8001e90 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d803      	bhi.n	8004bfa <HAL_SPI_Transmit+0x160>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d102      	bne.n	8004c00 <HAL_SPI_Transmit+0x166>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e082      	b.n	8004d1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1c7      	bne.n	8004bae <HAL_SPI_Transmit+0x114>
 8004c1e:	e053      	b.n	8004cc8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_SPI_Transmit+0x194>
 8004c28:	8b7b      	ldrh	r3, [r7, #26]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d147      	bne.n	8004cbe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	7812      	ldrb	r2, [r2, #0]
 8004c3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c54:	e033      	b.n	8004cbe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d113      	bne.n	8004c8c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	7812      	ldrb	r2, [r2, #0]
 8004c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c8a:	e018      	b.n	8004cbe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c8c:	f7fd f900 	bl	8001e90 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d803      	bhi.n	8004ca4 <HAL_SPI_Transmit+0x20a>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d102      	bne.n	8004caa <HAL_SPI_Transmit+0x210>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e02d      	b.n	8004d1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1c6      	bne.n	8004c56 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fdd1 	bl	8005874 <SPI_EndRxTxTransaction>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3720      	adds	r7, #32
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b08a      	sub	sp, #40	@ 0x28
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d30:	2301      	movs	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d34:	f7fd f8ac 	bl	8001e90 <HAL_GetTick>
 8004d38:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d40:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d48:	887b      	ldrh	r3, [r7, #2]
 8004d4a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d4c:	7ffb      	ldrb	r3, [r7, #31]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d00c      	beq.n	8004d6c <HAL_SPI_TransmitReceive+0x4a>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d58:	d106      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x46>
 8004d62:	7ffb      	ldrb	r3, [r7, #31]
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d001      	beq.n	8004d6c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e17f      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x5c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x5c>
 8004d78:	887b      	ldrh	r3, [r7, #2]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e174      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x6e>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e16d      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d003      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2205      	movs	r2, #5
 8004da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	887a      	ldrh	r2, [r7, #2]
 8004dc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	887a      	ldrh	r2, [r7, #2]
 8004dce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	887a      	ldrh	r2, [r7, #2]
 8004dd4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dec:	2b40      	cmp	r3, #64	@ 0x40
 8004dee:	d007      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e08:	d17e      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0xf6>
 8004e12:	8afb      	ldrh	r3, [r7, #22]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d16c      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	881a      	ldrh	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e28:	1c9a      	adds	r2, r3, #2
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e3c:	e059      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d11b      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x162>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d016      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x162>
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d113      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	881a      	ldrh	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	1c9a      	adds	r2, r3, #2
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d119      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x1a4>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d014      	beq.n	8004ec6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea6:	b292      	uxth	r2, r2
 8004ea8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eae:	1c9a      	adds	r2, r3, #2
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ec6:	f7fc ffe3 	bl	8001e90 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d80d      	bhi.n	8004ef2 <HAL_SPI_TransmitReceive+0x1d0>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d009      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e0bc      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1a0      	bne.n	8004e3e <HAL_SPI_TransmitReceive+0x11c>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d19b      	bne.n	8004e3e <HAL_SPI_TransmitReceive+0x11c>
 8004f06:	e082      	b.n	800500e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x1f4>
 8004f10:	8afb      	ldrh	r3, [r7, #22]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d171      	bne.n	8004ffa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	330c      	adds	r3, #12
 8004f20:	7812      	ldrb	r2, [r2, #0]
 8004f22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f3c:	e05d      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d11c      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x264>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d017      	beq.n	8004f86 <HAL_SPI_TransmitReceive+0x264>
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d114      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	7812      	ldrb	r2, [r2, #0]
 8004f68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d119      	bne.n	8004fc8 <HAL_SPI_TransmitReceive+0x2a6>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d014      	beq.n	8004fc8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fc8:	f7fc ff62 	bl	8001e90 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d803      	bhi.n	8004fe0 <HAL_SPI_TransmitReceive+0x2be>
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d102      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x2c4>
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e038      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d19c      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x21c>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d197      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800500e:	6a3a      	ldr	r2, [r7, #32]
 8005010:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fc2e 	bl	8005874 <SPI_EndRxTxTransaction>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d008      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e01d      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800506a:	2300      	movs	r3, #0
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	@ 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005088:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005090:	7dfb      	ldrb	r3, [r7, #23]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d00c      	beq.n	80050b0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800509c:	d106      	bne.n	80050ac <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <HAL_SPI_TransmitReceive_DMA+0x38>
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d001      	beq.n	80050b0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80050ac:	2302      	movs	r3, #2
 80050ae:	e0cf      	b.n	8005250 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80050bc:	887b      	ldrh	r3, [r7, #2]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0c4      	b.n	8005250 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_SPI_TransmitReceive_DMA+0x60>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e0bd      	b.n	8005250 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d003      	beq.n	80050f0 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2205      	movs	r2, #5
 80050ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	887a      	ldrh	r2, [r7, #2]
 8005100:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	887a      	ldrh	r2, [r7, #2]
 8005106:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	887a      	ldrh	r2, [r7, #2]
 8005112:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b04      	cmp	r3, #4
 8005130:	d108      	bne.n	8005144 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005136:	4a48      	ldr	r2, [pc, #288]	@ (8005258 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005138:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800513e:	4a47      	ldr	r2, [pc, #284]	@ (800525c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005140:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005142:	e007      	b.n	8005154 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005148:	4a45      	ldr	r2, [pc, #276]	@ (8005260 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800514a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005150:	4a44      	ldr	r2, [pc, #272]	@ (8005264 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005152:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005158:	4a43      	ldr	r2, [pc, #268]	@ (8005268 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800515a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005160:	2200      	movs	r2, #0
 8005162:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	4619      	mov	r1, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800517a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800517c:	f7fd f878 	bl	8002270 <HAL_DMA_Start_IT>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518a:	f043 0210 	orr.w	r2, r3, #16
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e058      	b.n	8005250 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b2:	2200      	movs	r2, #0
 80051b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ba:	2200      	movs	r2, #0
 80051bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051c2:	2200      	movs	r2, #0
 80051c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ca:	2200      	movs	r2, #0
 80051cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d6:	4619      	mov	r1, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80051e6:	f7fd f843 	bl	8002270 <HAL_DMA_Start_IT>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f4:	f043 0210 	orr.w	r2, r3, #16
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e023      	b.n	8005250 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d007      	beq.n	8005226 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005224:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0220 	orr.w	r2, r2, #32
 800523c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0202 	orr.w	r2, r2, #2
 800524c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	080055f9 	.word	0x080055f9
 800525c:	080054c1 	.word	0x080054c1
 8005260:	08005615 	.word	0x08005615
 8005264:	08005569 	.word	0x08005569
 8005268:	08005631 	.word	0x08005631

0800526c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10e      	bne.n	80052ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005294:	2b00      	cmp	r3, #0
 8005296:	d009      	beq.n	80052ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
    return;
 80052aa:	e0ce      	b.n	800544a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <HAL_SPI_IRQHandler+0x5e>
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
    return;
 80052c8:	e0bf      	b.n	800544a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <HAL_SPI_IRQHandler+0x7e>
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d105      	bne.n	80052ea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80b0 	beq.w	800544a <HAL_SPI_IRQHandler+0x1de>
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80aa 	beq.w	800544a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d023      	beq.n	8005348 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b03      	cmp	r3, #3
 800530a:	d011      	beq.n	8005330 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005310:	f043 0204 	orr.w	r2, r3, #4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	e00b      	b.n	8005348 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	693b      	ldr	r3, [r7, #16]
        return;
 8005346:	e080      	b.n	800544a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d014      	beq.n	800537c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005356:	f043 0201 	orr.w	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00c      	beq.n	80053a0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538a:	f043 0208 	orr.w	r2, r3, #8
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d04f      	beq.n	8005448 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053b6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <HAL_SPI_IRQHandler+0x168>
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d034      	beq.n	800543e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0203 	bic.w	r2, r2, #3
 80053e2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d011      	beq.n	8005410 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f0:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <HAL_SPI_IRQHandler+0x1e4>)
 80053f2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fc ff91 	bl	8002320 <HAL_DMA_Abort_IT>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005408:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005414:	2b00      	cmp	r3, #0
 8005416:	d016      	beq.n	8005446 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800541c:	4a0c      	ldr	r2, [pc, #48]	@ (8005450 <HAL_SPI_IRQHandler+0x1e4>)
 800541e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005424:	4618      	mov	r0, r3
 8005426:	f7fc ff7b 	bl	8002320 <HAL_DMA_Abort_IT>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005434:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800543c:	e003      	b.n	8005446 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f826 	bl	8005490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005444:	e000      	b.n	8005448 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005446:	bf00      	nop
    return;
 8005448:	bf00      	nop
  }
}
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	08005671 	.word	0x08005671

08005454 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054b2:	b2db      	uxtb	r3, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054cc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ce:	f7fc fcdf 	bl	8001e90 <HAL_GetTick>
 80054d2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e2:	d03b      	beq.n	800555c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0220 	bic.w	r2, r2, #32
 80054f2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10d      	bne.n	8005518 <SPI_DMAReceiveCplt+0x58>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005504:	d108      	bne.n	8005518 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0203 	bic.w	r2, r2, #3
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	e007      	b.n	8005528 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	2164      	movs	r1, #100	@ 0x64
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f93b 	bl	80057a8 <SPI_EndRxTransaction>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7ff ff9b 	bl	8005490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800555a:	e002      	b.n	8005562 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff ff79 	bl	8005454 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005574:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005576:	f7fc fc8b 	bl	8001e90 <HAL_GetTick>
 800557a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800558a:	d02f      	beq.n	80055ec <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0220 	bic.w	r2, r2, #32
 800559a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	2164      	movs	r1, #100	@ 0x64
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f967 	bl	8005874 <SPI_EndRxTxTransaction>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b0:	f043 0220 	orr.w	r2, r3, #32
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0203 	bic.w	r2, r2, #3
 80055c6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff ff53 	bl	8005490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80055ea:	e002      	b.n	80055f2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7fb ff91 	bl	8001514 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005604:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff ff2e 	bl	8005468 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7ff ff2a 	bl	800547c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0203 	bic.w	r2, r2, #3
 800564c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005652:	f043 0210 	orr.w	r2, r3, #16
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff ff14 	bl	8005490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7ff ff00 	bl	8005490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4613      	mov	r3, r2
 80056a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056a8:	f7fc fbf2 	bl	8001e90 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056b8:	f7fc fbea 	bl	8001e90 <HAL_GetTick>
 80056bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056be:	4b39      	ldr	r3, [pc, #228]	@ (80057a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	015b      	lsls	r3, r3, #5
 80056c4:	0d1b      	lsrs	r3, r3, #20
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ce:	e054      	b.n	800577a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d050      	beq.n	800577a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056d8:	f7fc fbda 	bl	8001e90 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d902      	bls.n	80056ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d13d      	bne.n	800576a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005706:	d111      	bne.n	800572c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005710:	d004      	beq.n	800571c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800571a:	d107      	bne.n	800572c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800572a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005734:	d10f      	bne.n	8005756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e017      	b.n	800579a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3b01      	subs	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	bf0c      	ite	eq
 800578a:	2301      	moveq	r3, #1
 800578c:	2300      	movne	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	429a      	cmp	r2, r3
 8005796:	d19b      	bne.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000000 	.word	0x20000000

080057a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057bc:	d111      	bne.n	80057e2 <SPI_EndRxTransaction+0x3a>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c6:	d004      	beq.n	80057d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d0:	d107      	bne.n	80057e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ea:	d12a      	bne.n	8005842 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f4:	d012      	beq.n	800581c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2200      	movs	r2, #0
 80057fe:	2180      	movs	r1, #128	@ 0x80
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff ff49 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d02d      	beq.n	8005868 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005810:	f043 0220 	orr.w	r2, r3, #32
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e026      	b.n	800586a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	2101      	movs	r1, #1
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff ff36 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01a      	beq.n	8005868 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e013      	b.n	800586a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2200      	movs	r2, #0
 800584a:	2101      	movs	r1, #1
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ff23 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e000      	b.n	800586a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2201      	movs	r2, #1
 8005888:	2102      	movs	r1, #2
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff ff04 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e032      	b.n	800590c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005914 <SPI_EndRxTxTransaction+0xa0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005918 <SPI_EndRxTxTransaction+0xa4>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	0d5b      	lsrs	r3, r3, #21
 80058b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80058b6:	fb02 f303 	mul.w	r3, r2, r3
 80058ba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058c4:	d112      	bne.n	80058ec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2200      	movs	r2, #0
 80058ce:	2180      	movs	r1, #128	@ 0x80
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff fee1 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d016      	beq.n	800590a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e00f      	b.n	800590c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b80      	cmp	r3, #128	@ 0x80
 8005904:	d0f2      	beq.n	80058ec <SPI_EndRxTxTransaction+0x78>
 8005906:	e000      	b.n	800590a <SPI_EndRxTxTransaction+0x96>
        break;
 8005908:	bf00      	nop
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000000 	.word	0x20000000
 8005918:	165e9f81 	.word	0x165e9f81

0800591c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800591c:	b084      	sub	sp, #16
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	f107 001c 	add.w	r0, r7, #28
 800592a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800592e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005932:	2b01      	cmp	r3, #1
 8005934:	d123      	bne.n	800597e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800594a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800595e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005962:	2b01      	cmp	r3, #1
 8005964:	d105      	bne.n	8005972 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 fae8 	bl	8006f48 <USB_CoreReset>
 8005978:	4603      	mov	r3, r0
 800597a:	73fb      	strb	r3, [r7, #15]
 800597c:	e01b      	b.n	80059b6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 fadc 	bl	8006f48 <USB_CoreReset>
 8005990:	4603      	mov	r3, r0
 8005992:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005994:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80059a8:	e005      	b.n	80059b6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059b6:	7fbb      	ldrb	r3, [r7, #30]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d10b      	bne.n	80059d4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f043 0206 	orr.w	r2, r3, #6
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f043 0220 	orr.w	r2, r3, #32
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059e0:	b004      	add	sp, #16
 80059e2:	4770      	bx	lr

080059e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	4613      	mov	r3, r2
 80059f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d165      	bne.n	8005ac4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4a41      	ldr	r2, [pc, #260]	@ (8005b00 <USB_SetTurnaroundTime+0x11c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d906      	bls.n	8005a0e <USB_SetTurnaroundTime+0x2a>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4a40      	ldr	r2, [pc, #256]	@ (8005b04 <USB_SetTurnaroundTime+0x120>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d202      	bcs.n	8005a0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a08:	230f      	movs	r3, #15
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e062      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4a3c      	ldr	r2, [pc, #240]	@ (8005b04 <USB_SetTurnaroundTime+0x120>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d306      	bcc.n	8005a24 <USB_SetTurnaroundTime+0x40>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	4a3b      	ldr	r2, [pc, #236]	@ (8005b08 <USB_SetTurnaroundTime+0x124>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d202      	bcs.n	8005a24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a1e:	230e      	movs	r3, #14
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e057      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4a38      	ldr	r2, [pc, #224]	@ (8005b08 <USB_SetTurnaroundTime+0x124>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d306      	bcc.n	8005a3a <USB_SetTurnaroundTime+0x56>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4a37      	ldr	r2, [pc, #220]	@ (8005b0c <USB_SetTurnaroundTime+0x128>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d202      	bcs.n	8005a3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a34:	230d      	movs	r3, #13
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	e04c      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4a33      	ldr	r2, [pc, #204]	@ (8005b0c <USB_SetTurnaroundTime+0x128>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d306      	bcc.n	8005a50 <USB_SetTurnaroundTime+0x6c>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4a32      	ldr	r2, [pc, #200]	@ (8005b10 <USB_SetTurnaroundTime+0x12c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d802      	bhi.n	8005a50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e041      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4a2f      	ldr	r2, [pc, #188]	@ (8005b10 <USB_SetTurnaroundTime+0x12c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d906      	bls.n	8005a66 <USB_SetTurnaroundTime+0x82>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b14 <USB_SetTurnaroundTime+0x130>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d802      	bhi.n	8005a66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a60:	230b      	movs	r3, #11
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e036      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4a2a      	ldr	r2, [pc, #168]	@ (8005b14 <USB_SetTurnaroundTime+0x130>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d906      	bls.n	8005a7c <USB_SetTurnaroundTime+0x98>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4a29      	ldr	r2, [pc, #164]	@ (8005b18 <USB_SetTurnaroundTime+0x134>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d802      	bhi.n	8005a7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a76:	230a      	movs	r3, #10
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	e02b      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4a26      	ldr	r2, [pc, #152]	@ (8005b18 <USB_SetTurnaroundTime+0x134>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d906      	bls.n	8005a92 <USB_SetTurnaroundTime+0xae>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4a25      	ldr	r2, [pc, #148]	@ (8005b1c <USB_SetTurnaroundTime+0x138>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d202      	bcs.n	8005a92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a8c:	2309      	movs	r3, #9
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	e020      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	4a21      	ldr	r2, [pc, #132]	@ (8005b1c <USB_SetTurnaroundTime+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d306      	bcc.n	8005aa8 <USB_SetTurnaroundTime+0xc4>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4a20      	ldr	r2, [pc, #128]	@ (8005b20 <USB_SetTurnaroundTime+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d802      	bhi.n	8005aa8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	e015      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8005b20 <USB_SetTurnaroundTime+0x13c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d906      	bls.n	8005abe <USB_SetTurnaroundTime+0xda>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b24 <USB_SetTurnaroundTime+0x140>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d202      	bcs.n	8005abe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ab8:	2307      	movs	r3, #7
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e00a      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005abe:	2306      	movs	r3, #6
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	e007      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005aca:	2309      	movs	r3, #9
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e001      	b.n	8005ad4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ad0:	2309      	movs	r3, #9
 8005ad2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	029b      	lsls	r3, r3, #10
 8005ae8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005aec:	431a      	orrs	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	00d8acbf 	.word	0x00d8acbf
 8005b04:	00e4e1c0 	.word	0x00e4e1c0
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	01067380 	.word	0x01067380
 8005b10:	011a499f 	.word	0x011a499f
 8005b14:	01312cff 	.word	0x01312cff
 8005b18:	014ca43f 	.word	0x014ca43f
 8005b1c:	016e3600 	.word	0x016e3600
 8005b20:	01a6ab1f 	.word	0x01a6ab1f
 8005b24:	01e84800 	.word	0x01e84800

08005b28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f043 0201 	orr.w	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f023 0201 	bic.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d115      	bne.n	8005bba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b9a:	200a      	movs	r0, #10
 8005b9c:	f7fc f984 	bl	8001ea8 <HAL_Delay>
      ms += 10U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	330a      	adds	r3, #10
 8005ba4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 f93f 	bl	8006e2a <USB_GetMode>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d01e      	beq.n	8005bf0 <USB_SetCurrentMode+0x84>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2bc7      	cmp	r3, #199	@ 0xc7
 8005bb6:	d9f0      	bls.n	8005b9a <USB_SetCurrentMode+0x2e>
 8005bb8:	e01a      	b.n	8005bf0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d115      	bne.n	8005bec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005bcc:	200a      	movs	r0, #10
 8005bce:	f7fc f96b 	bl	8001ea8 <HAL_Delay>
      ms += 10U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	330a      	adds	r3, #10
 8005bd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 f926 	bl	8006e2a <USB_GetMode>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <USB_SetCurrentMode+0x84>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2bc7      	cmp	r3, #199	@ 0xc7
 8005be8:	d9f0      	bls.n	8005bcc <USB_SetCurrentMode+0x60>
 8005bea:	e001      	b.n	8005bf0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e005      	b.n	8005bfc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2bc8      	cmp	r3, #200	@ 0xc8
 8005bf4:	d101      	bne.n	8005bfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c04:	b084      	sub	sp, #16
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b086      	sub	sp, #24
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	e009      	b.n	8005c38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	3340      	adds	r3, #64	@ 0x40
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	2200      	movs	r2, #0
 8005c30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	3301      	adds	r3, #1
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b0e      	cmp	r3, #14
 8005c3c:	d9f2      	bls.n	8005c24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d11c      	bne.n	8005c80 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c54:	f043 0302 	orr.w	r3, r3, #2
 8005c58:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c76:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c7e:	e00b      	b.n	8005c98 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c84:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c90:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ca4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d10d      	bne.n	8005cc8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f968 	bl	8005f8c <USB_SetDevSpeed>
 8005cbc:	e008      	b.n	8005cd0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f963 	bl	8005f8c <USB_SetDevSpeed>
 8005cc6:	e003      	b.n	8005cd0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cc8:	2103      	movs	r1, #3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f95e 	bl	8005f8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cd0:	2110      	movs	r1, #16
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f8fa 	bl	8005ecc <USB_FlushTxFifo>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f924 	bl	8005f30 <USB_FlushRxFifo>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d04:	461a      	mov	r2, r3
 8005d06:	2300      	movs	r3, #0
 8005d08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d10:	461a      	mov	r2, r3
 8005d12:	2300      	movs	r3, #0
 8005d14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d16:	2300      	movs	r3, #0
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	e043      	b.n	8005da4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d32:	d118      	bne.n	8005d66 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d46:	461a      	mov	r2, r3
 8005d48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	e013      	b.n	8005d78 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	e008      	b.n	8005d78 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d72:	461a      	mov	r2, r3
 8005d74:	2300      	movs	r3, #0
 8005d76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d84:	461a      	mov	r2, r3
 8005d86:	2300      	movs	r3, #0
 8005d88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d96:	461a      	mov	r2, r3
 8005d98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	3301      	adds	r3, #1
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005da8:	461a      	mov	r2, r3
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d3b5      	bcc.n	8005d1c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	e043      	b.n	8005e3e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dcc:	d118      	bne.n	8005e00 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de0:	461a      	mov	r2, r3
 8005de2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e013      	b.n	8005e12 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df6:	461a      	mov	r2, r3
 8005df8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e008      	b.n	8005e12 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1e:	461a      	mov	r2, r3
 8005e20:	2300      	movs	r3, #0
 8005e22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e30:	461a      	mov	r2, r3
 8005e32:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e42:	461a      	mov	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d3b5      	bcc.n	8005db6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e5c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005e6a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f043 0210 	orr.w	r2, r3, #16
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	4b10      	ldr	r3, [pc, #64]	@ (8005ec8 <USB_DevInit+0x2c4>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	f043 0208 	orr.w	r2, r3, #8
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ea0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d107      	bne.n	8005eb8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005eb0:	f043 0304 	orr.w	r3, r3, #4
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ec4:	b004      	add	sp, #16
 8005ec6:	4770      	bx	lr
 8005ec8:	803c3800 	.word	0x803c3800

08005ecc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3301      	adds	r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ee6:	d901      	bls.n	8005eec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e01b      	b.n	8005f24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	daf2      	bge.n	8005eda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	019b      	lsls	r3, r3, #6
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f10:	d901      	bls.n	8005f16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e006      	b.n	8005f24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d0f0      	beq.n	8005f04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f48:	d901      	bls.n	8005f4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e018      	b.n	8005f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	daf2      	bge.n	8005f3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f6c:	d901      	bls.n	8005f72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e006      	b.n	8005f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b10      	cmp	r3, #16
 8005f7c:	d0f0      	beq.n	8005f60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fac:	4313      	orrs	r3, r2
 8005fae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b087      	sub	sp, #28
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 0306 	and.w	r3, r3, #6
 8005fd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d102      	bne.n	8005fe4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]
 8005fe2:	e00a      	b.n	8005ffa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d002      	beq.n	8005ff0 <USB_GetDevSpeed+0x32>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b06      	cmp	r3, #6
 8005fee:	d102      	bne.n	8005ff6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	75fb      	strb	r3, [r7, #23]
 8005ff4:	e001      	b.n	8005ffa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ff6:	230f      	movs	r3, #15
 8005ff8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d13a      	bne.n	800609a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	2101      	movs	r1, #1
 8006036:	fa01 f303 	lsl.w	r3, r1, r3
 800603a:	b29b      	uxth	r3, r3
 800603c:	68f9      	ldr	r1, [r7, #12]
 800603e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006042:	4313      	orrs	r3, r2
 8006044:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d155      	bne.n	8006108 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	791b      	ldrb	r3, [r3, #4]
 8006076:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006078:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	059b      	lsls	r3, r3, #22
 800607e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006080:	4313      	orrs	r3, r2
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	440a      	add	r2, r1
 800608a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	e036      	b.n	8006108 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a0:	69da      	ldr	r2, [r3, #28]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	2101      	movs	r1, #1
 80060ac:	fa01 f303 	lsl.w	r3, r1, r3
 80060b0:	041b      	lsls	r3, r3, #16
 80060b2:	68f9      	ldr	r1, [r7, #12]
 80060b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060b8:	4313      	orrs	r3, r2
 80060ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d11a      	bne.n	8006108 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	791b      	ldrb	r3, [r3, #4]
 80060ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060ee:	430b      	orrs	r3, r1
 80060f0:	4313      	orrs	r3, r2
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006106:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d161      	bne.n	80061f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006146:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800614a:	d11f      	bne.n	800618c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006166:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800616a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	440a      	add	r2, r1
 8006182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006186:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800618a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006192:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	2101      	movs	r1, #1
 800619e:	fa01 f303 	lsl.w	r3, r1, r3
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	43db      	mvns	r3, r3
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061ac:	4013      	ands	r3, r2
 80061ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	2101      	movs	r1, #1
 80061c2:	fa01 f303 	lsl.w	r3, r1, r3
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	43db      	mvns	r3, r3
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061d0:	4013      	ands	r3, r2
 80061d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	0159      	lsls	r1, r3, #5
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	440b      	add	r3, r1
 80061ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ee:	4619      	mov	r1, r3
 80061f0:	4b35      	ldr	r3, [pc, #212]	@ (80062c8 <USB_DeactivateEndpoint+0x1b0>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	600b      	str	r3, [r1, #0]
 80061f6:	e060      	b.n	80062ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800620a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800620e:	d11f      	bne.n	8006250 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	440a      	add	r2, r1
 8006226:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800622a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800622e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	440a      	add	r2, r1
 8006246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800624a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800624e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	2101      	movs	r1, #1
 8006262:	fa01 f303 	lsl.w	r3, r1, r3
 8006266:	041b      	lsls	r3, r3, #16
 8006268:	43db      	mvns	r3, r3
 800626a:	68f9      	ldr	r1, [r7, #12]
 800626c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006270:	4013      	ands	r3, r2
 8006272:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	2101      	movs	r1, #1
 8006286:	fa01 f303 	lsl.w	r3, r1, r3
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	43db      	mvns	r3, r3
 800628e:	68f9      	ldr	r1, [r7, #12]
 8006290:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006294:	4013      	ands	r3, r2
 8006296:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	0159      	lsls	r1, r3, #5
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	440b      	add	r3, r1
 80062ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b2:	4619      	mov	r1, r3
 80062b4:	4b05      	ldr	r3, [pc, #20]	@ (80062cc <USB_DeactivateEndpoint+0x1b4>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	ec337800 	.word	0xec337800
 80062cc:	eff37800 	.word	0xeff37800

080062d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	@ 0x28
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	f040 817f 	bne.w	80065f0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d132      	bne.n	8006360 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006314:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006318:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800631c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006338:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800633c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006358:	0cdb      	lsrs	r3, r3, #19
 800635a:	04db      	lsls	r3, r3, #19
 800635c:	6113      	str	r3, [r2, #16]
 800635e:	e097      	b.n	8006490 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800637a:	0cdb      	lsrs	r3, r3, #19
 800637c:	04db      	lsls	r3, r3, #19
 800637e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800639a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800639e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80063a2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11a      	bne.n	80063e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d903      	bls.n	80063be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063dc:	6113      	str	r3, [r2, #16]
 80063de:	e044      	b.n	800646a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	4413      	add	r3, r2
 80063ea:	1e5a      	subs	r2, r3, #1
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	8afb      	ldrh	r3, [r7, #22]
 8006406:	04d9      	lsls	r1, r3, #19
 8006408:	4ba4      	ldr	r3, [pc, #656]	@ (800669c <USB_EPStartXfer+0x3cc>)
 800640a:	400b      	ands	r3, r1
 800640c:	69b9      	ldr	r1, [r7, #24]
 800640e:	0148      	lsls	r0, r1, #5
 8006410:	69f9      	ldr	r1, [r7, #28]
 8006412:	4401      	add	r1, r0
 8006414:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006418:	4313      	orrs	r3, r2
 800641a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	791b      	ldrb	r3, [r3, #4]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d122      	bne.n	800646a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	440a      	add	r2, r1
 800643a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800643e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006442:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	8afb      	ldrh	r3, [r7, #22]
 8006454:	075b      	lsls	r3, r3, #29
 8006456:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800645a:	69b9      	ldr	r1, [r7, #24]
 800645c:	0148      	lsls	r0, r1, #5
 800645e:	69f9      	ldr	r1, [r7, #28]
 8006460:	4401      	add	r1, r0
 8006462:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006466:	4313      	orrs	r3, r2
 8006468:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006480:	69b9      	ldr	r1, [r7, #24]
 8006482:	0148      	lsls	r0, r1, #5
 8006484:	69f9      	ldr	r1, [r7, #28]
 8006486:	4401      	add	r1, r0
 8006488:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800648c:	4313      	orrs	r3, r2
 800648e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d14b      	bne.n	800652e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064aa:	461a      	mov	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	791b      	ldrb	r3, [r3, #4]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d128      	bne.n	800650c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d110      	bne.n	80064ec <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	e00f      	b.n	800650c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	440a      	add	r2, r1
 8006502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800650a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006526:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	e166      	b.n	80067fc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006548:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800654c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	791b      	ldrb	r3, [r3, #4]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d015      	beq.n	8006582 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 814e 	beq.w	80067fc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	2101      	movs	r1, #1
 8006572:	fa01 f303 	lsl.w	r3, r1, r3
 8006576:	69f9      	ldr	r1, [r7, #28]
 8006578:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800657c:	4313      	orrs	r3, r2
 800657e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006580:	e13c      	b.n	80067fc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800658e:	2b00      	cmp	r3, #0
 8006590:	d110      	bne.n	80065b4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	e00f      	b.n	80065d4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065d2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	68d9      	ldr	r1, [r3, #12]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	781a      	ldrb	r2, [r3, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	b298      	uxth	r0, r3
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	4603      	mov	r3, r0
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f9b9 	bl	8006960 <USB_WritePacket>
 80065ee:	e105      	b.n	80067fc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800660a:	0cdb      	lsrs	r3, r3, #19
 800660c:	04db      	lsls	r3, r3, #19
 800660e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	440a      	add	r2, r1
 8006626:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800662a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800662e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006632:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d132      	bne.n	80066a0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006668:	69b9      	ldr	r1, [r7, #24]
 800666a:	0148      	lsls	r0, r1, #5
 800666c:	69f9      	ldr	r1, [r7, #28]
 800666e:	4401      	add	r1, r0
 8006670:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006674:	4313      	orrs	r3, r2
 8006676:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	0151      	lsls	r1, r2, #5
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	440a      	add	r2, r1
 800668e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006692:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006696:	6113      	str	r3, [r2, #16]
 8006698:	e062      	b.n	8006760 <USB_EPStartXfer+0x490>
 800669a:	bf00      	nop
 800669c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d123      	bne.n	80066f0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066be:	69b9      	ldr	r1, [r7, #24]
 80066c0:	0148      	lsls	r0, r1, #5
 80066c2:	69f9      	ldr	r1, [r7, #28]
 80066c4:	4401      	add	r1, r0
 80066c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80066ca:	4313      	orrs	r3, r2
 80066cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066ec:	6113      	str	r3, [r2, #16]
 80066ee:	e037      	b.n	8006760 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	4413      	add	r3, r2
 80066fa:	1e5a      	subs	r2, r3, #1
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	8afa      	ldrh	r2, [r7, #22]
 800670c:	fb03 f202 	mul.w	r2, r3, r2
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	8afb      	ldrh	r3, [r7, #22]
 8006724:	04d9      	lsls	r1, r3, #19
 8006726:	4b38      	ldr	r3, [pc, #224]	@ (8006808 <USB_EPStartXfer+0x538>)
 8006728:	400b      	ands	r3, r1
 800672a:	69b9      	ldr	r1, [r7, #24]
 800672c:	0148      	lsls	r0, r1, #5
 800672e:	69f9      	ldr	r1, [r7, #28]
 8006730:	4401      	add	r1, r0
 8006732:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006736:	4313      	orrs	r3, r2
 8006738:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	0148      	lsls	r0, r1, #5
 8006754:	69f9      	ldr	r1, [r7, #28]
 8006756:	4401      	add	r1, r0
 8006758:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800675c:	4313      	orrs	r3, r2
 800675e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d10d      	bne.n	8006782 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	68d9      	ldr	r1, [r3, #12]
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677e:	460a      	mov	r2, r1
 8006780:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	791b      	ldrb	r3, [r3, #4]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d128      	bne.n	80067dc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006796:	2b00      	cmp	r3, #0
 8006798:	d110      	bne.n	80067bc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	0151      	lsls	r1, r2, #5
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	440a      	add	r2, r1
 80067b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	e00f      	b.n	80067dc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80067fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	1ff80000 	.word	0x1ff80000

0800680c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d14a      	bne.n	80068c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800683e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006842:	f040 8086 	bne.w	8006952 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	7812      	ldrb	r2, [r2, #0]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006864:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006868:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	7812      	ldrb	r2, [r2, #0]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	440a      	add	r2, r1
 8006884:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006888:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800688c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3301      	adds	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f242 7210 	movw	r2, #10000	@ 0x2710
 800689a:	4293      	cmp	r3, r2
 800689c:	d902      	bls.n	80068a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	75fb      	strb	r3, [r7, #23]
          break;
 80068a2:	e056      	b.n	8006952 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068bc:	d0e7      	beq.n	800688e <USB_EPStopXfer+0x82>
 80068be:	e048      	b.n	8006952 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068d8:	d13b      	bne.n	8006952 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	7812      	ldrb	r2, [r2, #0]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	7812      	ldrb	r2, [r2, #0]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800691c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006920:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800692e:	4293      	cmp	r3, r2
 8006930:	d902      	bls.n	8006938 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	75fb      	strb	r3, [r7, #23]
          break;
 8006936:	e00c      	b.n	8006952 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800694c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006950:	d0e7      	beq.n	8006922 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
}
 8006954:	4618      	mov	r0, r3
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006960:	b480      	push	{r7}
 8006962:	b089      	sub	sp, #36	@ 0x24
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	4611      	mov	r1, r2
 800696c:	461a      	mov	r2, r3
 800696e:	460b      	mov	r3, r1
 8006970:	71fb      	strb	r3, [r7, #7]
 8006972:	4613      	mov	r3, r2
 8006974:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800697e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006982:	2b00      	cmp	r3, #0
 8006984:	d123      	bne.n	80069ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006986:	88bb      	ldrh	r3, [r7, #4]
 8006988:	3303      	adds	r3, #3
 800698a:	089b      	lsrs	r3, r3, #2
 800698c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800698e:	2300      	movs	r3, #0
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	e018      	b.n	80069c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	031a      	lsls	r2, r3, #12
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	4413      	add	r3, r2
 800699c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069a0:	461a      	mov	r2, r3
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	3301      	adds	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	3301      	adds	r3, #1
 80069b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	3301      	adds	r3, #1
 80069b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	3301      	adds	r3, #1
 80069be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	3301      	adds	r3, #1
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d3e2      	bcc.n	8006994 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3724      	adds	r7, #36	@ 0x24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069dc:	b480      	push	{r7}
 80069de:	b08b      	sub	sp, #44	@ 0x2c
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069f2:	88fb      	ldrh	r3, [r7, #6]
 80069f4:	089b      	lsrs	r3, r3, #2
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a02:	2300      	movs	r3, #0
 8006a04:	623b      	str	r3, [r7, #32]
 8006a06:	e014      	b.n	8006a32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	3301      	adds	r3, #1
 8006a18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	3301      	adds	r3, #1
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	3301      	adds	r3, #1
 8006a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	623b      	str	r3, [r7, #32]
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d3e6      	bcc.n	8006a08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a3a:	8bfb      	ldrh	r3, [r7, #30]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01e      	beq.n	8006a7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f107 0310 	add.w	r3, r7, #16
 8006a50:	6812      	ldr	r2, [r2, #0]
 8006a52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	701a      	strb	r2, [r3, #0]
      i++;
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	3301      	adds	r3, #1
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006a72:	8bfb      	ldrh	r3, [r7, #30]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a78:	8bfb      	ldrh	r3, [r7, #30]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1ea      	bne.n	8006a54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	372c      	adds	r7, #44	@ 0x2c
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d12c      	bne.n	8006b02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	db12      	blt.n	8006ae0 <USB_EPSetStall+0x54>
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00f      	beq.n	8006ae0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ada:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ade:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	0151      	lsls	r1, r2, #5
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	440a      	add	r2, r1
 8006af6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006afa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	e02b      	b.n	8006b5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	db12      	blt.n	8006b3a <USB_EPSetStall+0xae>
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00f      	beq.n	8006b3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d128      	bne.n	8006bd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ba2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	791b      	ldrb	r3, [r3, #4]
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d003      	beq.n	8006bb4 <USB_EPClearStall+0x4c>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	791b      	ldrb	r3, [r3, #4]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d138      	bne.n	8006c26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	e027      	b.n	8006c26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bf0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006bf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	791b      	ldrb	r3, [r3, #4]
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d003      	beq.n	8006c06 <USB_EPClearStall+0x9e>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	791b      	ldrb	r3, [r3, #4]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d10f      	bne.n	8006c26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	0151      	lsls	r1, r2, #5
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	440a      	add	r2, r1
 8006c1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006c56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006c68:	68f9      	ldr	r1, [r7, #12]
 8006c6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c9a:	f023 0303 	bic.w	r3, r3, #3
 8006c9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cae:	f023 0302 	bic.w	r3, r3, #2
 8006cb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006cdc:	f023 0303 	bic.w	r3, r3, #3
 8006ce0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cf0:	f043 0302 	orr.w	r3, r3, #2
 8006cf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	0c1b      	lsrs	r3, r3, #16
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	b29b      	uxth	r3, r3
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b087      	sub	sp, #28
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfe:	01db      	lsls	r3, r3, #7
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0301 	and.w	r3, r3, #1
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e60:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006e64:	f023 0307 	bic.w	r3, r3, #7
 8006e68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	460b      	mov	r3, r1
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	333c      	adds	r3, #60	@ 0x3c
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	4a26      	ldr	r2, [pc, #152]	@ (8006f44 <USB_EP0_OutStart+0xb8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d90a      	bls.n	8006ec6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ec0:	d101      	bne.n	8006ec6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e037      	b.n	8006f36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ecc:	461a      	mov	r2, r3
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ee0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ee4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ef4:	f043 0318 	orr.w	r3, r3, #24
 8006ef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f08:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006f0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d10f      	bne.n	8006f34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f2e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006f32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	4f54300a 	.word	0x4f54300a

08006f48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f60:	d901      	bls.n	8006f66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e01b      	b.n	8006f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	daf2      	bge.n	8006f54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f043 0201 	orr.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f8a:	d901      	bls.n	8006f90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e006      	b.n	8006f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d0f0      	beq.n	8006f7e <USB_CoreReset+0x36>

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
	...

08006fac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fb8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006fbc:	f002 fc9e 	bl	80098fc <USBD_static_malloc>
 8006fc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d109      	bne.n	8006fdc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	32b0      	adds	r2, #176	@ 0xb0
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e0d4      	b.n	8007186 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006fdc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f003 fa4b 	bl	800a47e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	32b0      	adds	r2, #176	@ 0xb0
 8006ff2:	68f9      	ldr	r1, [r7, #12]
 8006ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	32b0      	adds	r2, #176	@ 0xb0
 8007002:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7c1b      	ldrb	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d138      	bne.n	8007086 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007014:	4b5e      	ldr	r3, [pc, #376]	@ (8007190 <USBD_CDC_Init+0x1e4>)
 8007016:	7819      	ldrb	r1, [r3, #0]
 8007018:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800701c:	2202      	movs	r2, #2
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f002 fb49 	bl	80096b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007024:	4b5a      	ldr	r3, [pc, #360]	@ (8007190 <USBD_CDC_Init+0x1e4>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	f003 020f 	and.w	r2, r3, #15
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3324      	adds	r3, #36	@ 0x24
 800703a:	2201      	movs	r2, #1
 800703c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800703e:	4b55      	ldr	r3, [pc, #340]	@ (8007194 <USBD_CDC_Init+0x1e8>)
 8007040:	7819      	ldrb	r1, [r3, #0]
 8007042:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007046:	2202      	movs	r2, #2
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f002 fb34 	bl	80096b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800704e:	4b51      	ldr	r3, [pc, #324]	@ (8007194 <USBD_CDC_Init+0x1e8>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	f003 020f 	and.w	r2, r3, #15
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007066:	2201      	movs	r2, #1
 8007068:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800706a:	4b4b      	ldr	r3, [pc, #300]	@ (8007198 <USBD_CDC_Init+0x1ec>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	f003 020f 	and.w	r2, r3, #15
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	3326      	adds	r3, #38	@ 0x26
 8007080:	2210      	movs	r2, #16
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	e035      	b.n	80070f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007086:	4b42      	ldr	r3, [pc, #264]	@ (8007190 <USBD_CDC_Init+0x1e4>)
 8007088:	7819      	ldrb	r1, [r3, #0]
 800708a:	2340      	movs	r3, #64	@ 0x40
 800708c:	2202      	movs	r2, #2
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f002 fb11 	bl	80096b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007094:	4b3e      	ldr	r3, [pc, #248]	@ (8007190 <USBD_CDC_Init+0x1e4>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f003 020f 	and.w	r2, r3, #15
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	440b      	add	r3, r1
 80070a8:	3324      	adds	r3, #36	@ 0x24
 80070aa:	2201      	movs	r2, #1
 80070ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80070ae:	4b39      	ldr	r3, [pc, #228]	@ (8007194 <USBD_CDC_Init+0x1e8>)
 80070b0:	7819      	ldrb	r1, [r3, #0]
 80070b2:	2340      	movs	r3, #64	@ 0x40
 80070b4:	2202      	movs	r2, #2
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f002 fafd 	bl	80096b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070bc:	4b35      	ldr	r3, [pc, #212]	@ (8007194 <USBD_CDC_Init+0x1e8>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	f003 020f 	and.w	r2, r3, #15
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80070d4:	2201      	movs	r2, #1
 80070d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80070d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007198 <USBD_CDC_Init+0x1ec>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	f003 020f 	and.w	r2, r3, #15
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	440b      	add	r3, r1
 80070ec:	3326      	adds	r3, #38	@ 0x26
 80070ee:	2210      	movs	r2, #16
 80070f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070f2:	4b29      	ldr	r3, [pc, #164]	@ (8007198 <USBD_CDC_Init+0x1ec>)
 80070f4:	7819      	ldrb	r1, [r3, #0]
 80070f6:	2308      	movs	r3, #8
 80070f8:	2203      	movs	r2, #3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f002 fadb 	bl	80096b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007100:	4b25      	ldr	r3, [pc, #148]	@ (8007198 <USBD_CDC_Init+0x1ec>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	f003 020f 	and.w	r2, r3, #15
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	3324      	adds	r3, #36	@ 0x24
 8007116:	2201      	movs	r2, #1
 8007118:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	33b0      	adds	r3, #176	@ 0xb0
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007150:	2302      	movs	r3, #2
 8007152:	e018      	b.n	8007186 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7c1b      	ldrb	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800715c:	4b0d      	ldr	r3, [pc, #52]	@ (8007194 <USBD_CDC_Init+0x1e8>)
 800715e:	7819      	ldrb	r1, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007166:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f002 fb92 	bl	8009894 <USBD_LL_PrepareReceive>
 8007170:	e008      	b.n	8007184 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007172:	4b08      	ldr	r3, [pc, #32]	@ (8007194 <USBD_CDC_Init+0x1e8>)
 8007174:	7819      	ldrb	r1, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800717c:	2340      	movs	r3, #64	@ 0x40
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f002 fb88 	bl	8009894 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000093 	.word	0x20000093
 8007194:	20000094 	.word	0x20000094
 8007198:	20000095 	.word	0x20000095

0800719c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80071a8:	4b3a      	ldr	r3, [pc, #232]	@ (8007294 <USBD_CDC_DeInit+0xf8>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f002 faa7 	bl	8009702 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80071b4:	4b37      	ldr	r3, [pc, #220]	@ (8007294 <USBD_CDC_DeInit+0xf8>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	f003 020f 	and.w	r2, r3, #15
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	3324      	adds	r3, #36	@ 0x24
 80071ca:	2200      	movs	r2, #0
 80071cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80071ce:	4b32      	ldr	r3, [pc, #200]	@ (8007298 <USBD_CDC_DeInit+0xfc>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f002 fa94 	bl	8009702 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80071da:	4b2f      	ldr	r3, [pc, #188]	@ (8007298 <USBD_CDC_DeInit+0xfc>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	f003 020f 	and.w	r2, r3, #15
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80071f2:	2200      	movs	r2, #0
 80071f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80071f6:	4b29      	ldr	r3, [pc, #164]	@ (800729c <USBD_CDC_DeInit+0x100>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f002 fa80 	bl	8009702 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007202:	4b26      	ldr	r3, [pc, #152]	@ (800729c <USBD_CDC_DeInit+0x100>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	f003 020f 	and.w	r2, r3, #15
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	3324      	adds	r3, #36	@ 0x24
 8007218:	2200      	movs	r2, #0
 800721a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800721c:	4b1f      	ldr	r3, [pc, #124]	@ (800729c <USBD_CDC_DeInit+0x100>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	f003 020f 	and.w	r2, r3, #15
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	3326      	adds	r3, #38	@ 0x26
 8007232:	2200      	movs	r2, #0
 8007234:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	32b0      	adds	r2, #176	@ 0xb0
 8007240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01f      	beq.n	8007288 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	33b0      	adds	r3, #176	@ 0xb0
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	32b0      	adds	r2, #176	@ 0xb0
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	4618      	mov	r0, r3
 800726c:	f002 fb54 	bl	8009918 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	32b0      	adds	r2, #176	@ 0xb0
 800727a:	2100      	movs	r1, #0
 800727c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000093 	.word	0x20000093
 8007298:	20000094 	.word	0x20000094
 800729c:	20000095 	.word	0x20000095

080072a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	32b0      	adds	r2, #176	@ 0xb0
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e0bf      	b.n	8007450 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d050      	beq.n	800737e <USBD_CDC_Setup+0xde>
 80072dc:	2b20      	cmp	r3, #32
 80072de:	f040 80af 	bne.w	8007440 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	88db      	ldrh	r3, [r3, #6]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d03a      	beq.n	8007360 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	b25b      	sxtb	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	da1b      	bge.n	800732c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	33b0      	adds	r3, #176	@ 0xb0
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800730a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	88d2      	ldrh	r2, [r2, #6]
 8007310:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	88db      	ldrh	r3, [r3, #6]
 8007316:	2b07      	cmp	r3, #7
 8007318:	bf28      	it	cs
 800731a:	2307      	movcs	r3, #7
 800731c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	89fa      	ldrh	r2, [r7, #14]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fd93 	bl	8008e50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800732a:	e090      	b.n	800744e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	785a      	ldrb	r2, [r3, #1]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	88db      	ldrh	r3, [r3, #6]
 800733a:	2b3f      	cmp	r3, #63	@ 0x3f
 800733c:	d803      	bhi.n	8007346 <USBD_CDC_Setup+0xa6>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	88db      	ldrh	r3, [r3, #6]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	e000      	b.n	8007348 <USBD_CDC_Setup+0xa8>
 8007346:	2240      	movs	r2, #64	@ 0x40
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800734e:	6939      	ldr	r1, [r7, #16]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007356:	461a      	mov	r2, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f001 fda5 	bl	8008ea8 <USBD_CtlPrepareRx>
      break;
 800735e:	e076      	b.n	800744e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	33b0      	adds	r3, #176	@ 0xb0
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	7850      	ldrb	r0, [r2, #1]
 8007376:	2200      	movs	r2, #0
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	4798      	blx	r3
      break;
 800737c:	e067      	b.n	800744e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	2b0b      	cmp	r3, #11
 8007384:	d851      	bhi.n	800742a <USBD_CDC_Setup+0x18a>
 8007386:	a201      	add	r2, pc, #4	@ (adr r2, 800738c <USBD_CDC_Setup+0xec>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	080073bd 	.word	0x080073bd
 8007390:	08007439 	.word	0x08007439
 8007394:	0800742b 	.word	0x0800742b
 8007398:	0800742b 	.word	0x0800742b
 800739c:	0800742b 	.word	0x0800742b
 80073a0:	0800742b 	.word	0x0800742b
 80073a4:	0800742b 	.word	0x0800742b
 80073a8:	0800742b 	.word	0x0800742b
 80073ac:	0800742b 	.word	0x0800742b
 80073b0:	0800742b 	.word	0x0800742b
 80073b4:	080073e7 	.word	0x080073e7
 80073b8:	08007411 	.word	0x08007411
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d107      	bne.n	80073d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80073c8:	f107 030a 	add.w	r3, r7, #10
 80073cc:	2202      	movs	r2, #2
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fd3d 	bl	8008e50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073d6:	e032      	b.n	800743e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 fcbb 	bl	8008d56 <USBD_CtlError>
            ret = USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	75fb      	strb	r3, [r7, #23]
          break;
 80073e4:	e02b      	b.n	800743e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d107      	bne.n	8007402 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073f2:	f107 030d 	add.w	r3, r7, #13
 80073f6:	2201      	movs	r2, #1
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 fd28 	bl	8008e50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007400:	e01d      	b.n	800743e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 fca6 	bl	8008d56 <USBD_CtlError>
            ret = USBD_FAIL;
 800740a:	2303      	movs	r3, #3
 800740c:	75fb      	strb	r3, [r7, #23]
          break;
 800740e:	e016      	b.n	800743e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b03      	cmp	r3, #3
 800741a:	d00f      	beq.n	800743c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 fc99 	bl	8008d56 <USBD_CtlError>
            ret = USBD_FAIL;
 8007424:	2303      	movs	r3, #3
 8007426:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007428:	e008      	b.n	800743c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 fc92 	bl	8008d56 <USBD_CtlError>
          ret = USBD_FAIL;
 8007432:	2303      	movs	r3, #3
 8007434:	75fb      	strb	r3, [r7, #23]
          break;
 8007436:	e002      	b.n	800743e <USBD_CDC_Setup+0x19e>
          break;
 8007438:	bf00      	nop
 800743a:	e008      	b.n	800744e <USBD_CDC_Setup+0x1ae>
          break;
 800743c:	bf00      	nop
      }
      break;
 800743e:	e006      	b.n	800744e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 fc87 	bl	8008d56 <USBD_CtlError>
      ret = USBD_FAIL;
 8007448:	2303      	movs	r3, #3
 800744a:	75fb      	strb	r3, [r7, #23]
      break;
 800744c:	bf00      	nop
  }

  return (uint8_t)ret;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800746a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32b0      	adds	r2, #176	@ 0xb0
 8007476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800747e:	2303      	movs	r3, #3
 8007480:	e065      	b.n	800754e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	32b0      	adds	r2, #176	@ 0xb0
 800748c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007490:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	f003 020f 	and.w	r2, r3, #15
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	3318      	adds	r3, #24
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d02f      	beq.n	800750c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	f003 020f 	and.w	r2, r3, #15
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	3318      	adds	r3, #24
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	f003 010f 	and.w	r1, r3, #15
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	460b      	mov	r3, r1
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	440b      	add	r3, r1
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4403      	add	r3, r0
 80074d4:	331c      	adds	r3, #28
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d112      	bne.n	800750c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	f003 020f 	and.w	r2, r3, #15
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	3318      	adds	r3, #24
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074fe:	78f9      	ldrb	r1, [r7, #3]
 8007500:	2300      	movs	r3, #0
 8007502:	2200      	movs	r2, #0
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f002 f9a4 	bl	8009852 <USBD_LL_Transmit>
 800750a:	e01f      	b.n	800754c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	33b0      	adds	r3, #176	@ 0xb0
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d010      	beq.n	800754c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	33b0      	adds	r3, #176	@ 0xb0
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	32b0      	adds	r2, #176	@ 0xb0
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	32b0      	adds	r2, #176	@ 0xb0
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007584:	2303      	movs	r3, #3
 8007586:	e01a      	b.n	80075be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f002 f9a2 	bl	80098d6 <USBD_LL_GetRxDataSize>
 8007592:	4602      	mov	r2, r0
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	33b0      	adds	r3, #176	@ 0xb0
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80075b8:	4611      	mov	r1, r2
 80075ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	32b0      	adds	r2, #176	@ 0xb0
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e024      	b.n	8007632 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	33b0      	adds	r3, #176	@ 0xb0
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d019      	beq.n	8007630 <USBD_CDC_EP0_RxReady+0x6a>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007602:	2bff      	cmp	r3, #255	@ 0xff
 8007604:	d014      	beq.n	8007630 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	33b0      	adds	r3, #176	@ 0xb0
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800761e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007626:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	22ff      	movs	r2, #255	@ 0xff
 800762c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007644:	2182      	movs	r1, #130	@ 0x82
 8007646:	4818      	ldr	r0, [pc, #96]	@ (80076a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007648:	f000 fd4f 	bl	80080ea <USBD_GetEpDesc>
 800764c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800764e:	2101      	movs	r1, #1
 8007650:	4815      	ldr	r0, [pc, #84]	@ (80076a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007652:	f000 fd4a 	bl	80080ea <USBD_GetEpDesc>
 8007656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007658:	2181      	movs	r1, #129	@ 0x81
 800765a:	4813      	ldr	r0, [pc, #76]	@ (80076a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800765c:	f000 fd45 	bl	80080ea <USBD_GetEpDesc>
 8007660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2210      	movs	r2, #16
 800766c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d006      	beq.n	8007682 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	2200      	movs	r2, #0
 8007678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800767c:	711a      	strb	r2, [r3, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d006      	beq.n	8007696 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007690:	711a      	strb	r2, [r3, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2243      	movs	r2, #67	@ 0x43
 800769a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800769c:	4b02      	ldr	r3, [pc, #8]	@ (80076a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000050 	.word	0x20000050

080076ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076b4:	2182      	movs	r1, #130	@ 0x82
 80076b6:	4818      	ldr	r0, [pc, #96]	@ (8007718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076b8:	f000 fd17 	bl	80080ea <USBD_GetEpDesc>
 80076bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076be:	2101      	movs	r1, #1
 80076c0:	4815      	ldr	r0, [pc, #84]	@ (8007718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076c2:	f000 fd12 	bl	80080ea <USBD_GetEpDesc>
 80076c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076c8:	2181      	movs	r1, #129	@ 0x81
 80076ca:	4813      	ldr	r0, [pc, #76]	@ (8007718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076cc:	f000 fd0d 	bl	80080ea <USBD_GetEpDesc>
 80076d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2210      	movs	r2, #16
 80076dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2200      	movs	r2, #0
 80076e8:	711a      	strb	r2, [r3, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f042 0202 	orr.w	r2, r2, #2
 80076f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	711a      	strb	r2, [r3, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f042 0202 	orr.w	r2, r2, #2
 8007704:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2243      	movs	r2, #67	@ 0x43
 800770a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800770c:	4b02      	ldr	r3, [pc, #8]	@ (8007718 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000050 	.word	0x20000050

0800771c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007724:	2182      	movs	r1, #130	@ 0x82
 8007726:	4818      	ldr	r0, [pc, #96]	@ (8007788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007728:	f000 fcdf 	bl	80080ea <USBD_GetEpDesc>
 800772c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800772e:	2101      	movs	r1, #1
 8007730:	4815      	ldr	r0, [pc, #84]	@ (8007788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007732:	f000 fcda 	bl	80080ea <USBD_GetEpDesc>
 8007736:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007738:	2181      	movs	r1, #129	@ 0x81
 800773a:	4813      	ldr	r0, [pc, #76]	@ (8007788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800773c:	f000 fcd5 	bl	80080ea <USBD_GetEpDesc>
 8007740:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	2210      	movs	r2, #16
 800774c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d006      	beq.n	8007762 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2200      	movs	r2, #0
 8007758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800775c:	711a      	strb	r2, [r3, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d006      	beq.n	8007776 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007770:	711a      	strb	r2, [r3, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2243      	movs	r2, #67	@ 0x43
 800777a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800777c:	4b02      	ldr	r3, [pc, #8]	@ (8007788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000050 	.word	0x20000050

0800778c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	220a      	movs	r2, #10
 8007798:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800779a:	4b03      	ldr	r3, [pc, #12]	@ (80077a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800779c:	4618      	mov	r0, r3
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	2000000c 	.word	0x2000000c

080077ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	e009      	b.n	80077d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	33b0      	adds	r3, #176	@ 0xb0
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	32b0      	adds	r2, #176	@ 0xb0
 80077f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	e008      	b.n	8007818 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	32b0      	adds	r2, #176	@ 0xb0
 8007838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	e004      	b.n	8007852 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
	...

08007860 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	32b0      	adds	r2, #176	@ 0xb0
 8007872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007876:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007878:	2301      	movs	r3, #1
 800787a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007882:	2303      	movs	r3, #3
 8007884:	e025      	b.n	80078d2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800788c:	2b00      	cmp	r3, #0
 800788e:	d11f      	bne.n	80078d0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2201      	movs	r2, #1
 8007894:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007898:	4b10      	ldr	r3, [pc, #64]	@ (80078dc <USBD_CDC_TransmitPacket+0x7c>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f003 020f 	and.w	r2, r3, #15
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4403      	add	r3, r0
 80078b2:	3318      	adds	r3, #24
 80078b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80078b6:	4b09      	ldr	r3, [pc, #36]	@ (80078dc <USBD_CDC_TransmitPacket+0x7c>)
 80078b8:	7819      	ldrb	r1, [r3, #0]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 ffc3 	bl	8009852 <USBD_LL_Transmit>

    ret = USBD_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000093 	.word	0x20000093

080078e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32b0      	adds	r2, #176	@ 0xb0
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	32b0      	adds	r2, #176	@ 0xb0
 8007902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800790a:	2303      	movs	r3, #3
 800790c:	e018      	b.n	8007940 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	7c1b      	ldrb	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10a      	bne.n	800792c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007916:	4b0c      	ldr	r3, [pc, #48]	@ (8007948 <USBD_CDC_ReceivePacket+0x68>)
 8007918:	7819      	ldrb	r1, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 ffb5 	bl	8009894 <USBD_LL_PrepareReceive>
 800792a:	e008      	b.n	800793e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800792c:	4b06      	ldr	r3, [pc, #24]	@ (8007948 <USBD_CDC_ReceivePacket+0x68>)
 800792e:	7819      	ldrb	r1, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007936:	2340      	movs	r3, #64	@ 0x40
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 ffab 	bl	8009894 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	20000094 	.word	0x20000094

0800794c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007960:	2303      	movs	r3, #3
 8007962:	e01f      	b.n	80079a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	79fa      	ldrb	r2, [r7, #7]
 8007996:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f001 fe25 	bl	80095e8 <USBD_LL_Init>
 800799e:	4603      	mov	r3, r0
 80079a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e025      	b.n	8007a10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	32ae      	adds	r2, #174	@ 0xae
 80079d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00f      	beq.n	8007a00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32ae      	adds	r2, #174	@ 0xae
 80079ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f0:	f107 020e 	add.w	r2, r7, #14
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	4602      	mov	r2, r0
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 fe2d 	bl	8009680 <USBD_LL_Start>
 8007a26:	4603      	mov	r3, r0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	78fa      	ldrb	r2, [r7, #3]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	460b      	mov	r3, r1
 8007a88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	78fa      	ldrb	r2, [r7, #3]
 8007a98:	4611      	mov	r1, r2
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 f90c 	bl	8008ce2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007ad8:	461a      	mov	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007ae6:	f003 031f 	and.w	r3, r3, #31
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d01a      	beq.n	8007b24 <USBD_LL_SetupStage+0x72>
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d822      	bhi.n	8007b38 <USBD_LL_SetupStage+0x86>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <USBD_LL_SetupStage+0x4a>
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d00a      	beq.n	8007b10 <USBD_LL_SetupStage+0x5e>
 8007afa:	e01d      	b.n	8007b38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fb63 	bl	80081d0 <USBD_StdDevReq>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0e:	e020      	b.n	8007b52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fbcb 	bl	80082b4 <USBD_StdItfReq>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
      break;
 8007b22:	e016      	b.n	8007b52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fc2d 	bl	800838c <USBD_StdEPReq>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]
      break;
 8007b36:	e00c      	b.n	8007b52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b3e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fdfa 	bl	8009740 <USBD_LL_StallEP>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b50:	bf00      	nop
  }

  return ret;
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	460b      	mov	r3, r1
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d16e      	bne.n	8007c52 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007b7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	f040 8098 	bne.w	8007cb8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d913      	bls.n	8007bbc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	1ad2      	subs	r2, r2, r3
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	4293      	cmp	r3, r2
 8007bac:	bf28      	it	cs
 8007bae:	4613      	movcs	r3, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f001 f994 	bl	8008ee2 <USBD_CtlContinueRx>
 8007bba:	e07d      	b.n	8007cb8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d014      	beq.n	8007bf4 <USBD_LL_DataOutStage+0x98>
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d81d      	bhi.n	8007c0a <USBD_LL_DataOutStage+0xae>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <USBD_LL_DataOutStage+0x7c>
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d003      	beq.n	8007bde <USBD_LL_DataOutStage+0x82>
 8007bd6:	e018      	b.n	8007c0a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	75bb      	strb	r3, [r7, #22]
            break;
 8007bdc:	e018      	b.n	8007c10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	4619      	mov	r1, r3
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 fa64 	bl	80080b6 <USBD_CoreFindIF>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	75bb      	strb	r3, [r7, #22]
            break;
 8007bf2:	e00d      	b.n	8007c10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 fa66 	bl	80080d0 <USBD_CoreFindEP>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75bb      	strb	r3, [r7, #22]
            break;
 8007c08:	e002      	b.n	8007c10 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	75bb      	strb	r3, [r7, #22]
            break;
 8007c0e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007c10:	7dbb      	ldrb	r3, [r7, #22]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d119      	bne.n	8007c4a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d113      	bne.n	8007c4a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007c22:	7dba      	ldrb	r2, [r7, #22]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	32ae      	adds	r2, #174	@ 0xae
 8007c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00b      	beq.n	8007c4a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007c32:	7dba      	ldrb	r2, [r7, #22]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007c3a:	7dba      	ldrb	r2, [r7, #22]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	32ae      	adds	r2, #174	@ 0xae
 8007c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f001 f95a 	bl	8008f04 <USBD_CtlSendStatus>
 8007c50:	e032      	b.n	8007cb8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007c52:	7afb      	ldrb	r3, [r7, #11]
 8007c54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 fa37 	bl	80080d0 <USBD_CoreFindEP>
 8007c62:	4603      	mov	r3, r0
 8007c64:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c66:	7dbb      	ldrb	r3, [r7, #22]
 8007c68:	2bff      	cmp	r3, #255	@ 0xff
 8007c6a:	d025      	beq.n	8007cb8 <USBD_LL_DataOutStage+0x15c>
 8007c6c:	7dbb      	ldrb	r3, [r7, #22]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d122      	bne.n	8007cb8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d117      	bne.n	8007cae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007c7e:	7dba      	ldrb	r2, [r7, #22]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	32ae      	adds	r2, #174	@ 0xae
 8007c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00f      	beq.n	8007cae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007c8e:	7dba      	ldrb	r2, [r7, #22]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c96:	7dba      	ldrb	r2, [r7, #22]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	32ae      	adds	r2, #174	@ 0xae
 8007c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	7afa      	ldrb	r2, [r7, #11]
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	e000      	b.n	8007cba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b086      	sub	sp, #24
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	607a      	str	r2, [r7, #4]
 8007cce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007cd0:	7afb      	ldrb	r3, [r7, #11]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d16f      	bne.n	8007db6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3314      	adds	r3, #20
 8007cda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d15a      	bne.n	8007d9c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d914      	bls.n	8007d1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	1ad2      	subs	r2, r2, r3
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f001 f8bc 	bl	8008e86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d0e:	2300      	movs	r3, #0
 8007d10:	2200      	movs	r2, #0
 8007d12:	2100      	movs	r1, #0
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f001 fdbd 	bl	8009894 <USBD_LL_PrepareReceive>
 8007d1a:	e03f      	b.n	8007d9c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d11c      	bne.n	8007d62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d316      	bcc.n	8007d62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d20f      	bcs.n	8007d62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d42:	2200      	movs	r2, #0
 8007d44:	2100      	movs	r1, #0
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f001 f89d 	bl	8008e86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d54:	2300      	movs	r3, #0
 8007d56:	2200      	movs	r2, #0
 8007d58:	2100      	movs	r1, #0
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f001 fd9a 	bl	8009894 <USBD_LL_PrepareReceive>
 8007d60:	e01c      	b.n	8007d9c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d10f      	bne.n	8007d8e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d8e:	2180      	movs	r1, #128	@ 0x80
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f001 fcd5 	bl	8009740 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f001 f8c7 	bl	8008f2a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d03a      	beq.n	8007e1c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff fe42 	bl	8007a30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007db4:	e032      	b.n	8007e1c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f985 	bl	80080d0 <USBD_CoreFindEP>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	2bff      	cmp	r3, #255	@ 0xff
 8007dce:	d025      	beq.n	8007e1c <USBD_LL_DataInStage+0x15a>
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d122      	bne.n	8007e1c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d11c      	bne.n	8007e1c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007de2:	7dfa      	ldrb	r2, [r7, #23]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	32ae      	adds	r2, #174	@ 0xae
 8007de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d014      	beq.n	8007e1c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007df2:	7dfa      	ldrb	r2, [r7, #23]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007dfa:	7dfa      	ldrb	r2, [r7, #23]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	32ae      	adds	r2, #174	@ 0xae
 8007e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	7afa      	ldrb	r2, [r7, #11]
 8007e08:	4611      	mov	r1, r2
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	4798      	blx	r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007e12:	7dbb      	ldrb	r3, [r7, #22]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007e18:	7dbb      	ldrb	r3, [r7, #22]
 8007e1a:	e000      	b.n	8007e1e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d014      	beq.n	8007e8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00e      	beq.n	8007e8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6852      	ldr	r2, [r2, #4]
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e8c:	2340      	movs	r3, #64	@ 0x40
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 fc0f 	bl	80096b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2240      	movs	r2, #64	@ 0x40
 8007ea4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ea8:	2340      	movs	r3, #64	@ 0x40
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2180      	movs	r1, #128	@ 0x80
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 fc01 	bl	80096b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2240      	movs	r2, #64	@ 0x40
 8007ebe:	621a      	str	r2, [r3, #32]

  return ret;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	78fa      	ldrb	r2, [r7, #3]
 8007eda:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d006      	beq.n	8007f0c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2204      	movs	r2, #4
 8007f10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d106      	bne.n	8007f44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d110      	bne.n	8007f88 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00b      	beq.n	8007f88 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b082      	sub	sp, #8
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	32ae      	adds	r2, #174	@ 0xae
 8007fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e01c      	b.n	8007fee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d115      	bne.n	8007fec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	32ae      	adds	r2, #174	@ 0xae
 8007fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00b      	beq.n	8007fec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	32ae      	adds	r2, #174	@ 0xae
 8007fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	32ae      	adds	r2, #174	@ 0xae
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	e01c      	b.n	8008052 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b03      	cmp	r3, #3
 8008022:	d115      	bne.n	8008050 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	32ae      	adds	r2, #174	@ 0xae
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	32ae      	adds	r2, #174	@ 0xae
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008048:	78fa      	ldrb	r2, [r7, #3]
 800804a:	4611      	mov	r1, r2
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00e      	beq.n	80080ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6852      	ldr	r2, [r2, #4]
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	4611      	mov	r1, r2
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080de:	4618      	mov	r0, r3
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b086      	sub	sp, #24
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	b29b      	uxth	r3, r3
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	7812      	ldrb	r2, [r2, #0]
 800810c:	4293      	cmp	r3, r2
 800810e:	d91f      	bls.n	8008150 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008116:	e013      	b.n	8008140 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008118:	f107 030a 	add.w	r3, r7, #10
 800811c:	4619      	mov	r1, r3
 800811e:	6978      	ldr	r0, [r7, #20]
 8008120:	f000 f81b 	bl	800815a <USBD_GetNextDesc>
 8008124:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	2b05      	cmp	r3, #5
 800812c:	d108      	bne.n	8008140 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	789b      	ldrb	r3, [r3, #2]
 8008136:	78fa      	ldrb	r2, [r7, #3]
 8008138:	429a      	cmp	r2, r3
 800813a:	d008      	beq.n	800814e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800813c:	2300      	movs	r3, #0
 800813e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	885b      	ldrh	r3, [r3, #2]
 8008144:	b29a      	uxth	r2, r3
 8008146:	897b      	ldrh	r3, [r7, #10]
 8008148:	429a      	cmp	r2, r3
 800814a:	d8e5      	bhi.n	8008118 <USBD_GetEpDesc+0x2e>
 800814c:	e000      	b.n	8008150 <USBD_GetEpDesc+0x66>
          break;
 800814e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008150:	693b      	ldr	r3, [r7, #16]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	7812      	ldrb	r2, [r2, #0]
 8008170:	4413      	add	r3, r2
 8008172:	b29a      	uxth	r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	461a      	mov	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4413      	add	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008184:	68fb      	ldr	r3, [r7, #12]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008192:	b480      	push	{r7}
 8008194:	b087      	sub	sp, #28
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	3301      	adds	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80081b0:	8a3b      	ldrh	r3, [r7, #16]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	b21a      	sxth	r2, r3
 80081b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	b21b      	sxth	r3, r3
 80081be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80081c0:	89fb      	ldrh	r3, [r7, #14]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	371c      	adds	r7, #28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
	...

080081d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081e6:	2b40      	cmp	r3, #64	@ 0x40
 80081e8:	d005      	beq.n	80081f6 <USBD_StdDevReq+0x26>
 80081ea:	2b40      	cmp	r3, #64	@ 0x40
 80081ec:	d857      	bhi.n	800829e <USBD_StdDevReq+0xce>
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00f      	beq.n	8008212 <USBD_StdDevReq+0x42>
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	d153      	bne.n	800829e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	32ae      	adds	r2, #174	@ 0xae
 8008200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	4798      	blx	r3
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]
      break;
 8008210:	e04a      	b.n	80082a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	785b      	ldrb	r3, [r3, #1]
 8008216:	2b09      	cmp	r3, #9
 8008218:	d83b      	bhi.n	8008292 <USBD_StdDevReq+0xc2>
 800821a:	a201      	add	r2, pc, #4	@ (adr r2, 8008220 <USBD_StdDevReq+0x50>)
 800821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008220:	08008275 	.word	0x08008275
 8008224:	08008289 	.word	0x08008289
 8008228:	08008293 	.word	0x08008293
 800822c:	0800827f 	.word	0x0800827f
 8008230:	08008293 	.word	0x08008293
 8008234:	08008253 	.word	0x08008253
 8008238:	08008249 	.word	0x08008249
 800823c:	08008293 	.word	0x08008293
 8008240:	0800826b 	.word	0x0800826b
 8008244:	0800825d 	.word	0x0800825d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fa3c 	bl	80086c8 <USBD_GetDescriptor>
          break;
 8008250:	e024      	b.n	800829c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fba1 	bl	800899c <USBD_SetAddress>
          break;
 800825a:	e01f      	b.n	800829c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fbe0 	bl	8008a24 <USBD_SetConfig>
 8008264:	4603      	mov	r3, r0
 8008266:	73fb      	strb	r3, [r7, #15]
          break;
 8008268:	e018      	b.n	800829c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fc83 	bl	8008b78 <USBD_GetConfig>
          break;
 8008272:	e013      	b.n	800829c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fcb4 	bl	8008be4 <USBD_GetStatus>
          break;
 800827c:	e00e      	b.n	800829c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fce3 	bl	8008c4c <USBD_SetFeature>
          break;
 8008286:	e009      	b.n	800829c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fd07 	bl	8008c9e <USBD_ClrFeature>
          break;
 8008290:	e004      	b.n	800829c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fd5e 	bl	8008d56 <USBD_CtlError>
          break;
 800829a:	bf00      	nop
      }
      break;
 800829c:	e004      	b.n	80082a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fd58 	bl	8008d56 <USBD_CtlError>
      break;
 80082a6:	bf00      	nop
  }

  return ret;
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop

080082b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082ca:	2b40      	cmp	r3, #64	@ 0x40
 80082cc:	d005      	beq.n	80082da <USBD_StdItfReq+0x26>
 80082ce:	2b40      	cmp	r3, #64	@ 0x40
 80082d0:	d852      	bhi.n	8008378 <USBD_StdItfReq+0xc4>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <USBD_StdItfReq+0x26>
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	d14e      	bne.n	8008378 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d840      	bhi.n	800836a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	889b      	ldrh	r3, [r3, #4]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d836      	bhi.n	8008360 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	889b      	ldrh	r3, [r3, #4]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff fedb 	bl	80080b6 <USBD_CoreFindIF>
 8008300:	4603      	mov	r3, r0
 8008302:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2bff      	cmp	r3, #255	@ 0xff
 8008308:	d01d      	beq.n	8008346 <USBD_StdItfReq+0x92>
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d11a      	bne.n	8008346 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008310:	7bba      	ldrb	r2, [r7, #14]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32ae      	adds	r2, #174	@ 0xae
 8008316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00f      	beq.n	8008340 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008320:	7bba      	ldrb	r2, [r7, #14]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008328:	7bba      	ldrb	r2, [r7, #14]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	32ae      	adds	r2, #174	@ 0xae
 800832e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	4798      	blx	r3
 800833a:	4603      	mov	r3, r0
 800833c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800833e:	e004      	b.n	800834a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008340:	2303      	movs	r3, #3
 8008342:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008344:	e001      	b.n	800834a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008346:	2303      	movs	r3, #3
 8008348:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	88db      	ldrh	r3, [r3, #6]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d110      	bne.n	8008374 <USBD_StdItfReq+0xc0>
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10d      	bne.n	8008374 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fdd3 	bl	8008f04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800835e:	e009      	b.n	8008374 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fcf7 	bl	8008d56 <USBD_CtlError>
          break;
 8008368:	e004      	b.n	8008374 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fcf2 	bl	8008d56 <USBD_CtlError>
          break;
 8008372:	e000      	b.n	8008376 <USBD_StdItfReq+0xc2>
          break;
 8008374:	bf00      	nop
      }
      break;
 8008376:	e004      	b.n	8008382 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fceb 	bl	8008d56 <USBD_CtlError>
      break;
 8008380:	bf00      	nop
  }

  return ret;
 8008382:	7bfb      	ldrb	r3, [r7, #15]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	889b      	ldrh	r3, [r3, #4]
 800839e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083a8:	2b40      	cmp	r3, #64	@ 0x40
 80083aa:	d007      	beq.n	80083bc <USBD_StdEPReq+0x30>
 80083ac:	2b40      	cmp	r3, #64	@ 0x40
 80083ae:	f200 817f 	bhi.w	80086b0 <USBD_StdEPReq+0x324>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d02a      	beq.n	800840c <USBD_StdEPReq+0x80>
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	f040 817a 	bne.w	80086b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff fe85 	bl	80080d0 <USBD_CoreFindEP>
 80083c6:	4603      	mov	r3, r0
 80083c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083ca:	7b7b      	ldrb	r3, [r7, #13]
 80083cc:	2bff      	cmp	r3, #255	@ 0xff
 80083ce:	f000 8174 	beq.w	80086ba <USBD_StdEPReq+0x32e>
 80083d2:	7b7b      	ldrb	r3, [r7, #13]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f040 8170 	bne.w	80086ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80083da:	7b7a      	ldrb	r2, [r7, #13]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80083e2:	7b7a      	ldrb	r2, [r7, #13]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	32ae      	adds	r2, #174	@ 0xae
 80083e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 8163 	beq.w	80086ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083f4:	7b7a      	ldrb	r2, [r7, #13]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	32ae      	adds	r2, #174	@ 0xae
 80083fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
 8008406:	4603      	mov	r3, r0
 8008408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800840a:	e156      	b.n	80086ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b03      	cmp	r3, #3
 8008412:	d008      	beq.n	8008426 <USBD_StdEPReq+0x9a>
 8008414:	2b03      	cmp	r3, #3
 8008416:	f300 8145 	bgt.w	80086a4 <USBD_StdEPReq+0x318>
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 809b 	beq.w	8008556 <USBD_StdEPReq+0x1ca>
 8008420:	2b01      	cmp	r3, #1
 8008422:	d03c      	beq.n	800849e <USBD_StdEPReq+0x112>
 8008424:	e13e      	b.n	80086a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d002      	beq.n	8008438 <USBD_StdEPReq+0xac>
 8008432:	2b03      	cmp	r3, #3
 8008434:	d016      	beq.n	8008464 <USBD_StdEPReq+0xd8>
 8008436:	e02c      	b.n	8008492 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00d      	beq.n	800845a <USBD_StdEPReq+0xce>
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b80      	cmp	r3, #128	@ 0x80
 8008442:	d00a      	beq.n	800845a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 f979 	bl	8009740 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800844e:	2180      	movs	r1, #128	@ 0x80
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 f975 	bl	8009740 <USBD_LL_StallEP>
 8008456:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008458:	e020      	b.n	800849c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fc7a 	bl	8008d56 <USBD_CtlError>
              break;
 8008462:	e01b      	b.n	800849c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	885b      	ldrh	r3, [r3, #2]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10e      	bne.n	800848a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00b      	beq.n	800848a <USBD_StdEPReq+0xfe>
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b80      	cmp	r3, #128	@ 0x80
 8008476:	d008      	beq.n	800848a <USBD_StdEPReq+0xfe>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	88db      	ldrh	r3, [r3, #6]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d104      	bne.n	800848a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 f95b 	bl	8009740 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fd3a 	bl	8008f04 <USBD_CtlSendStatus>

              break;
 8008490:	e004      	b.n	800849c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fc5e 	bl	8008d56 <USBD_CtlError>
              break;
 800849a:	bf00      	nop
          }
          break;
 800849c:	e107      	b.n	80086ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d002      	beq.n	80084b0 <USBD_StdEPReq+0x124>
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d016      	beq.n	80084dc <USBD_StdEPReq+0x150>
 80084ae:	e04b      	b.n	8008548 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00d      	beq.n	80084d2 <USBD_StdEPReq+0x146>
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b80      	cmp	r3, #128	@ 0x80
 80084ba:	d00a      	beq.n	80084d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 f93d 	bl	8009740 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084c6:	2180      	movs	r1, #128	@ 0x80
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 f939 	bl	8009740 <USBD_LL_StallEP>
 80084ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084d0:	e040      	b.n	8008554 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fc3e 	bl	8008d56 <USBD_CtlError>
              break;
 80084da:	e03b      	b.n	8008554 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	885b      	ldrh	r3, [r3, #2]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d136      	bne.n	8008552 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d004      	beq.n	80084f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 f943 	bl	800977e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fd03 	bl	8008f04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff fde4 	bl	80080d0 <USBD_CoreFindEP>
 8008508:	4603      	mov	r3, r0
 800850a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800850c:	7b7b      	ldrb	r3, [r7, #13]
 800850e:	2bff      	cmp	r3, #255	@ 0xff
 8008510:	d01f      	beq.n	8008552 <USBD_StdEPReq+0x1c6>
 8008512:	7b7b      	ldrb	r3, [r7, #13]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d11c      	bne.n	8008552 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008518:	7b7a      	ldrb	r2, [r7, #13]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008520:	7b7a      	ldrb	r2, [r7, #13]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	32ae      	adds	r2, #174	@ 0xae
 8008526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d010      	beq.n	8008552 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008530:	7b7a      	ldrb	r2, [r7, #13]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	32ae      	adds	r2, #174	@ 0xae
 8008536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	4798      	blx	r3
 8008542:	4603      	mov	r3, r0
 8008544:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008546:	e004      	b.n	8008552 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fc03 	bl	8008d56 <USBD_CtlError>
              break;
 8008550:	e000      	b.n	8008554 <USBD_StdEPReq+0x1c8>
              break;
 8008552:	bf00      	nop
          }
          break;
 8008554:	e0ab      	b.n	80086ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d002      	beq.n	8008568 <USBD_StdEPReq+0x1dc>
 8008562:	2b03      	cmp	r3, #3
 8008564:	d032      	beq.n	80085cc <USBD_StdEPReq+0x240>
 8008566:	e097      	b.n	8008698 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d007      	beq.n	800857e <USBD_StdEPReq+0x1f2>
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b80      	cmp	r3, #128	@ 0x80
 8008572:	d004      	beq.n	800857e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fbed 	bl	8008d56 <USBD_CtlError>
                break;
 800857c:	e091      	b.n	80086a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800857e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008582:	2b00      	cmp	r3, #0
 8008584:	da0b      	bge.n	800859e <USBD_StdEPReq+0x212>
 8008586:	7bbb      	ldrb	r3, [r7, #14]
 8008588:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	3310      	adds	r3, #16
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	4413      	add	r3, r2
 800859a:	3304      	adds	r3, #4
 800859c:	e00b      	b.n	80085b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085a4:	4613      	mov	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	4413      	add	r3, r2
 80085b4:	3304      	adds	r3, #4
 80085b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2202      	movs	r2, #2
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fc43 	bl	8008e50 <USBD_CtlSendData>
              break;
 80085ca:	e06a      	b.n	80086a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	da11      	bge.n	80085f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	f003 020f 	and.w	r2, r3, #15
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4613      	mov	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	440b      	add	r3, r1
 80085e6:	3324      	adds	r3, #36	@ 0x24
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d117      	bne.n	800861e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fbb0 	bl	8008d56 <USBD_CtlError>
                  break;
 80085f6:	e054      	b.n	80086a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	f003 020f 	and.w	r2, r3, #15
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	4613      	mov	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	440b      	add	r3, r1
 800860a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fb9d 	bl	8008d56 <USBD_CtlError>
                  break;
 800861c:	e041      	b.n	80086a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800861e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008622:	2b00      	cmp	r3, #0
 8008624:	da0b      	bge.n	800863e <USBD_StdEPReq+0x2b2>
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	3310      	adds	r3, #16
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	4413      	add	r3, r2
 800863a:	3304      	adds	r3, #4
 800863c:	e00b      	b.n	8008656 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	4413      	add	r3, r2
 8008654:	3304      	adds	r3, #4
 8008656:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <USBD_StdEPReq+0x2d8>
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b80      	cmp	r3, #128	@ 0x80
 8008662:	d103      	bne.n	800866c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	e00e      	b.n	800868a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 f8a3 	bl	80097bc <USBD_LL_IsStallEP>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2201      	movs	r2, #1
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	e002      	b.n	800868a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2202      	movs	r2, #2
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fbdd 	bl	8008e50 <USBD_CtlSendData>
              break;
 8008696:	e004      	b.n	80086a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fb5b 	bl	8008d56 <USBD_CtlError>
              break;
 80086a0:	bf00      	nop
          }
          break;
 80086a2:	e004      	b.n	80086ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fb55 	bl	8008d56 <USBD_CtlError>
          break;
 80086ac:	bf00      	nop
      }
      break;
 80086ae:	e005      	b.n	80086bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fb4f 	bl	8008d56 <USBD_CtlError>
      break;
 80086b8:	e000      	b.n	80086bc <USBD_StdEPReq+0x330>
      break;
 80086ba:	bf00      	nop
  }

  return ret;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
	...

080086c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	885b      	ldrh	r3, [r3, #2]
 80086e2:	0a1b      	lsrs	r3, r3, #8
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	3b01      	subs	r3, #1
 80086e8:	2b06      	cmp	r3, #6
 80086ea:	f200 8128 	bhi.w	800893e <USBD_GetDescriptor+0x276>
 80086ee:	a201      	add	r2, pc, #4	@ (adr r2, 80086f4 <USBD_GetDescriptor+0x2c>)
 80086f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f4:	08008711 	.word	0x08008711
 80086f8:	08008729 	.word	0x08008729
 80086fc:	08008769 	.word	0x08008769
 8008700:	0800893f 	.word	0x0800893f
 8008704:	0800893f 	.word	0x0800893f
 8008708:	080088df 	.word	0x080088df
 800870c:	0800890b 	.word	0x0800890b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	7c12      	ldrb	r2, [r2, #16]
 800871c:	f107 0108 	add.w	r1, r7, #8
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
 8008724:	60f8      	str	r0, [r7, #12]
      break;
 8008726:	e112      	b.n	800894e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7c1b      	ldrb	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10d      	bne.n	800874c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008738:	f107 0208 	add.w	r2, r7, #8
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3301      	adds	r3, #1
 8008746:	2202      	movs	r2, #2
 8008748:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800874a:	e100      	b.n	800894e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008754:	f107 0208 	add.w	r2, r7, #8
 8008758:	4610      	mov	r0, r2
 800875a:	4798      	blx	r3
 800875c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3301      	adds	r3, #1
 8008762:	2202      	movs	r2, #2
 8008764:	701a      	strb	r2, [r3, #0]
      break;
 8008766:	e0f2      	b.n	800894e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	885b      	ldrh	r3, [r3, #2]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b05      	cmp	r3, #5
 8008770:	f200 80ac 	bhi.w	80088cc <USBD_GetDescriptor+0x204>
 8008774:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <USBD_GetDescriptor+0xb4>)
 8008776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877a:	bf00      	nop
 800877c:	08008795 	.word	0x08008795
 8008780:	080087c9 	.word	0x080087c9
 8008784:	080087fd 	.word	0x080087fd
 8008788:	08008831 	.word	0x08008831
 800878c:	08008865 	.word	0x08008865
 8008790:	08008899 	.word	0x08008899
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00b      	beq.n	80087b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	7c12      	ldrb	r2, [r2, #16]
 80087ac:	f107 0108 	add.w	r1, r7, #8
 80087b0:	4610      	mov	r0, r2
 80087b2:	4798      	blx	r3
 80087b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087b6:	e091      	b.n	80088dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 facb 	bl	8008d56 <USBD_CtlError>
            err++;
 80087c0:	7afb      	ldrb	r3, [r7, #11]
 80087c2:	3301      	adds	r3, #1
 80087c4:	72fb      	strb	r3, [r7, #11]
          break;
 80087c6:	e089      	b.n	80088dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00b      	beq.n	80087ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	7c12      	ldrb	r2, [r2, #16]
 80087e0:	f107 0108 	add.w	r1, r7, #8
 80087e4:	4610      	mov	r0, r2
 80087e6:	4798      	blx	r3
 80087e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ea:	e077      	b.n	80088dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fab1 	bl	8008d56 <USBD_CtlError>
            err++;
 80087f4:	7afb      	ldrb	r3, [r7, #11]
 80087f6:	3301      	adds	r3, #1
 80087f8:	72fb      	strb	r3, [r7, #11]
          break;
 80087fa:	e06f      	b.n	80088dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00b      	beq.n	8008820 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	7c12      	ldrb	r2, [r2, #16]
 8008814:	f107 0108 	add.w	r1, r7, #8
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800881e:	e05d      	b.n	80088dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fa97 	bl	8008d56 <USBD_CtlError>
            err++;
 8008828:	7afb      	ldrb	r3, [r7, #11]
 800882a:	3301      	adds	r3, #1
 800882c:	72fb      	strb	r3, [r7, #11]
          break;
 800882e:	e055      	b.n	80088dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	7c12      	ldrb	r2, [r2, #16]
 8008848:	f107 0108 	add.w	r1, r7, #8
 800884c:	4610      	mov	r0, r2
 800884e:	4798      	blx	r3
 8008850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008852:	e043      	b.n	80088dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fa7d 	bl	8008d56 <USBD_CtlError>
            err++;
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	3301      	adds	r3, #1
 8008860:	72fb      	strb	r3, [r7, #11]
          break;
 8008862:	e03b      	b.n	80088dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	7c12      	ldrb	r2, [r2, #16]
 800887c:	f107 0108 	add.w	r1, r7, #8
 8008880:	4610      	mov	r0, r2
 8008882:	4798      	blx	r3
 8008884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008886:	e029      	b.n	80088dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa63 	bl	8008d56 <USBD_CtlError>
            err++;
 8008890:	7afb      	ldrb	r3, [r7, #11]
 8008892:	3301      	adds	r3, #1
 8008894:	72fb      	strb	r3, [r7, #11]
          break;
 8008896:	e021      	b.n	80088dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00b      	beq.n	80088bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	7c12      	ldrb	r2, [r2, #16]
 80088b0:	f107 0108 	add.w	r1, r7, #8
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ba:	e00f      	b.n	80088dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa49 	bl	8008d56 <USBD_CtlError>
            err++;
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	3301      	adds	r3, #1
 80088c8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ca:	e007      	b.n	80088dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fa41 	bl	8008d56 <USBD_CtlError>
          err++;
 80088d4:	7afb      	ldrb	r3, [r7, #11]
 80088d6:	3301      	adds	r3, #1
 80088d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088da:	bf00      	nop
      }
      break;
 80088dc:	e037      	b.n	800894e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	7c1b      	ldrb	r3, [r3, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d109      	bne.n	80088fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ee:	f107 0208 	add.w	r2, r7, #8
 80088f2:	4610      	mov	r0, r2
 80088f4:	4798      	blx	r3
 80088f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088f8:	e029      	b.n	800894e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fa2a 	bl	8008d56 <USBD_CtlError>
        err++;
 8008902:	7afb      	ldrb	r3, [r7, #11]
 8008904:	3301      	adds	r3, #1
 8008906:	72fb      	strb	r3, [r7, #11]
      break;
 8008908:	e021      	b.n	800894e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	7c1b      	ldrb	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10d      	bne.n	800892e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891a:	f107 0208 	add.w	r2, r7, #8
 800891e:	4610      	mov	r0, r2
 8008920:	4798      	blx	r3
 8008922:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3301      	adds	r3, #1
 8008928:	2207      	movs	r2, #7
 800892a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800892c:	e00f      	b.n	800894e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fa10 	bl	8008d56 <USBD_CtlError>
        err++;
 8008936:	7afb      	ldrb	r3, [r7, #11]
 8008938:	3301      	adds	r3, #1
 800893a:	72fb      	strb	r3, [r7, #11]
      break;
 800893c:	e007      	b.n	800894e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fa08 	bl	8008d56 <USBD_CtlError>
      err++;
 8008946:	7afb      	ldrb	r3, [r7, #11]
 8008948:	3301      	adds	r3, #1
 800894a:	72fb      	strb	r3, [r7, #11]
      break;
 800894c:	bf00      	nop
  }

  if (err != 0U)
 800894e:	7afb      	ldrb	r3, [r7, #11]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d11e      	bne.n	8008992 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	88db      	ldrh	r3, [r3, #6]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d016      	beq.n	800898a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800895c:	893b      	ldrh	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00e      	beq.n	8008980 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	88da      	ldrh	r2, [r3, #6]
 8008966:	893b      	ldrh	r3, [r7, #8]
 8008968:	4293      	cmp	r3, r2
 800896a:	bf28      	it	cs
 800896c:	4613      	movcs	r3, r2
 800896e:	b29b      	uxth	r3, r3
 8008970:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008972:	893b      	ldrh	r3, [r7, #8]
 8008974:	461a      	mov	r2, r3
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fa69 	bl	8008e50 <USBD_CtlSendData>
 800897e:	e009      	b.n	8008994 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f9e7 	bl	8008d56 <USBD_CtlError>
 8008988:	e004      	b.n	8008994 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 faba 	bl	8008f04 <USBD_CtlSendStatus>
 8008990:	e000      	b.n	8008994 <USBD_GetDescriptor+0x2cc>
    return;
 8008992:	bf00      	nop
  }
}
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop

0800899c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	889b      	ldrh	r3, [r3, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d131      	bne.n	8008a12 <USBD_SetAddress+0x76>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	88db      	ldrh	r3, [r3, #6]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d12d      	bne.n	8008a12 <USBD_SetAddress+0x76>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	885b      	ldrh	r3, [r3, #2]
 80089ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80089bc:	d829      	bhi.n	8008a12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	885b      	ldrh	r3, [r3, #2]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	d104      	bne.n	80089e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f9bc 	bl	8008d56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089de:	e01d      	b.n	8008a1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7bfa      	ldrb	r2, [r7, #15]
 80089e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 ff11 	bl	8009814 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa86 	bl	8008f04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d004      	beq.n	8008a08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2202      	movs	r2, #2
 8008a02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a06:	e009      	b.n	8008a1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a10:	e004      	b.n	8008a1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f99e 	bl	8008d56 <USBD_CtlError>
  }
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	885b      	ldrh	r3, [r3, #2]
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	4b4e      	ldr	r3, [pc, #312]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008a3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d905      	bls.n	8008a50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f985 	bl	8008d56 <USBD_CtlError>
    return USBD_FAIL;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e08c      	b.n	8008b6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d002      	beq.n	8008a62 <USBD_SetConfig+0x3e>
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d029      	beq.n	8008ab4 <USBD_SetConfig+0x90>
 8008a60:	e075      	b.n	8008b4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a62:	4b44      	ldr	r3, [pc, #272]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d020      	beq.n	8008aac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a6a:	4b42      	ldr	r3, [pc, #264]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a74:	4b3f      	ldr	r3, [pc, #252]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fe ffe3 	bl	8007a46 <USBD_SetClassConfig>
 8008a80:	4603      	mov	r3, r0
 8008a82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d008      	beq.n	8008a9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f962 	bl	8008d56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2202      	movs	r2, #2
 8008a96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a9a:	e065      	b.n	8008b68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa31 	bl	8008f04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008aaa:	e05d      	b.n	8008b68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fa29 	bl	8008f04 <USBD_CtlSendStatus>
      break;
 8008ab2:	e059      	b.n	8008b68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d112      	bne.n	8008ae2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ace:	4b29      	ldr	r3, [pc, #164]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7fe ffd2 	bl	8007a7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa12 	bl	8008f04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ae0:	e042      	b.n	8008b68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ae2:	4b24      	ldr	r3, [pc, #144]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d02a      	beq.n	8008b46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7fe ffc0 	bl	8007a7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008afe:	4b1d      	ldr	r3, [pc, #116]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b08:	4b1a      	ldr	r3, [pc, #104]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7fe ff99 	bl	8007a46 <USBD_SetClassConfig>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00f      	beq.n	8008b3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f918 	bl	8008d56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7fe ffa5 	bl	8007a7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b3c:	e014      	b.n	8008b68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9e0 	bl	8008f04 <USBD_CtlSendStatus>
      break;
 8008b44:	e010      	b.n	8008b68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f9dc 	bl	8008f04 <USBD_CtlSendStatus>
      break;
 8008b4c:	e00c      	b.n	8008b68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f900 	bl	8008d56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b56:	4b07      	ldr	r3, [pc, #28]	@ (8008b74 <USBD_SetConfig+0x150>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7fe ff8e 	bl	8007a7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b62:	2303      	movs	r3, #3
 8008b64:	73fb      	strb	r3, [r7, #15]
      break;
 8008b66:	bf00      	nop
  }

  return ret;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	200004d0 	.word	0x200004d0

08008b78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	88db      	ldrh	r3, [r3, #6]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d004      	beq.n	8008b94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f8e2 	bl	8008d56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b92:	e023      	b.n	8008bdc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	dc02      	bgt.n	8008ba6 <USBD_GetConfig+0x2e>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	dc03      	bgt.n	8008bac <USBD_GetConfig+0x34>
 8008ba4:	e015      	b.n	8008bd2 <USBD_GetConfig+0x5a>
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d00b      	beq.n	8008bc2 <USBD_GetConfig+0x4a>
 8008baa:	e012      	b.n	8008bd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f948 	bl	8008e50 <USBD_CtlSendData>
        break;
 8008bc0:	e00c      	b.n	8008bdc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f940 	bl	8008e50 <USBD_CtlSendData>
        break;
 8008bd0:	e004      	b.n	8008bdc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f8be 	bl	8008d56 <USBD_CtlError>
        break;
 8008bda:	bf00      	nop
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d81e      	bhi.n	8008c3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	88db      	ldrh	r3, [r3, #6]
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d004      	beq.n	8008c0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f8a5 	bl	8008d56 <USBD_CtlError>
        break;
 8008c0c:	e01a      	b.n	8008c44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	f043 0202 	orr.w	r2, r3, #2
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	330c      	adds	r3, #12
 8008c2e:	2202      	movs	r2, #2
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f90c 	bl	8008e50 <USBD_CtlSendData>
      break;
 8008c38:	e004      	b.n	8008c44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f88a 	bl	8008d56 <USBD_CtlError>
      break;
 8008c42:	bf00      	nop
  }
}
 8008c44:	bf00      	nop
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	885b      	ldrh	r3, [r3, #2]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d107      	bne.n	8008c6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f94c 	bl	8008f04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c6c:	e013      	b.n	8008c96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d10b      	bne.n	8008c8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	889b      	ldrh	r3, [r3, #4]
 8008c7a:	0a1b      	lsrs	r3, r3, #8
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f93c 	bl	8008f04 <USBD_CtlSendStatus>
}
 8008c8c:	e003      	b.n	8008c96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f860 	bl	8008d56 <USBD_CtlError>
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d80b      	bhi.n	8008cce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	885b      	ldrh	r3, [r3, #2]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d10c      	bne.n	8008cd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f91c 	bl	8008f04 <USBD_CtlSendStatus>
      }
      break;
 8008ccc:	e004      	b.n	8008cd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f840 	bl	8008d56 <USBD_CtlError>
      break;
 8008cd6:	e000      	b.n	8008cda <USBD_ClrFeature+0x3c>
      break;
 8008cd8:	bf00      	nop
  }
}
 8008cda:	bf00      	nop
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	781a      	ldrb	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	781a      	ldrb	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7ff fa40 	bl	8008192 <SWAPBYTE>
 8008d12:	4603      	mov	r3, r0
 8008d14:	461a      	mov	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3301      	adds	r3, #1
 8008d24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff fa33 	bl	8008192 <SWAPBYTE>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f7ff fa26 	bl	8008192 <SWAPBYTE>
 8008d46:	4603      	mov	r3, r0
 8008d48:	461a      	mov	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	80da      	strh	r2, [r3, #6]
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d60:	2180      	movs	r1, #128	@ 0x80
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fcec 	bl	8009740 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d68:	2100      	movs	r1, #0
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fce8 	bl	8009740 <USBD_LL_StallEP>
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d042      	beq.n	8008e14 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008d92:	6938      	ldr	r0, [r7, #16]
 8008d94:	f000 f842 	bl	8008e1c <USBD_GetLen>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008da2:	d808      	bhi.n	8008db6 <USBD_GetString+0x3e>
 8008da4:	6938      	ldr	r0, [r7, #16]
 8008da6:	f000 f839 	bl	8008e1c <USBD_GetLen>
 8008daa:	4603      	mov	r3, r0
 8008dac:	3301      	adds	r3, #1
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	e001      	b.n	8008dba <USBD_GetString+0x42>
 8008db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	7812      	ldrb	r2, [r2, #0]
 8008dc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	2203      	movs	r2, #3
 8008dd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dda:	7dfb      	ldrb	r3, [r7, #23]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008de0:	e013      	b.n	8008e0a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008de2:	7dfb      	ldrb	r3, [r7, #23]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	4413      	add	r3, r2
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	7812      	ldrb	r2, [r2, #0]
 8008dec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	3301      	adds	r3, #1
 8008df2:	613b      	str	r3, [r7, #16]
    idx++;
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	3301      	adds	r3, #1
 8008df8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	4413      	add	r3, r2
 8008e00:	2200      	movs	r2, #0
 8008e02:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	3301      	adds	r3, #1
 8008e08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1e7      	bne.n	8008de2 <USBD_GetString+0x6a>
 8008e12:	e000      	b.n	8008e16 <USBD_GetString+0x9e>
    return;
 8008e14:	bf00      	nop
  }
}
 8008e16:	3718      	adds	r7, #24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e2c:	e005      	b.n	8008e3a <USBD_GetLen+0x1e>
  {
    len++;
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
 8008e30:	3301      	adds	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1f5      	bne.n	8008e2e <USBD_GetLen+0x12>
  }

  return len;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	2100      	movs	r1, #0
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 fceb 	bl	8009852 <USBD_LL_Transmit>

  return USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	2100      	movs	r1, #0
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 fcda 	bl	8009852 <USBD_LL_Transmit>

  return USBD_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2203      	movs	r2, #3
 8008eb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 fcde 	bl	8009894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 fccd 	bl	8009894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2204      	movs	r2, #4
 8008f10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f14:	2300      	movs	r3, #0
 8008f16:	2200      	movs	r2, #0
 8008f18:	2100      	movs	r1, #0
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fc99 	bl	8009852 <USBD_LL_Transmit>

  return USBD_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2205      	movs	r2, #5
 8008f36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2100      	movs	r1, #0
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fca7 	bl	8009894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f54:	2200      	movs	r2, #0
 8008f56:	4912      	ldr	r1, [pc, #72]	@ (8008fa0 <MX_USB_DEVICE_Init+0x50>)
 8008f58:	4812      	ldr	r0, [pc, #72]	@ (8008fa4 <MX_USB_DEVICE_Init+0x54>)
 8008f5a:	f7fe fcf7 	bl	800794c <USBD_Init>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f64:	f7f8 fce2 	bl	800192c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f68:	490f      	ldr	r1, [pc, #60]	@ (8008fa8 <MX_USB_DEVICE_Init+0x58>)
 8008f6a:	480e      	ldr	r0, [pc, #56]	@ (8008fa4 <MX_USB_DEVICE_Init+0x54>)
 8008f6c:	f7fe fd1e 	bl	80079ac <USBD_RegisterClass>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f76:	f7f8 fcd9 	bl	800192c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f7a:	490c      	ldr	r1, [pc, #48]	@ (8008fac <MX_USB_DEVICE_Init+0x5c>)
 8008f7c:	4809      	ldr	r0, [pc, #36]	@ (8008fa4 <MX_USB_DEVICE_Init+0x54>)
 8008f7e:	f7fe fc15 	bl	80077ac <USBD_CDC_RegisterInterface>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f88:	f7f8 fcd0 	bl	800192c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f8c:	4805      	ldr	r0, [pc, #20]	@ (8008fa4 <MX_USB_DEVICE_Init+0x54>)
 8008f8e:	f7fe fd43 	bl	8007a18 <USBD_Start>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f98:	f7f8 fcc8 	bl	800192c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f9c:	bf00      	nop
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	200000ac 	.word	0x200000ac
 8008fa4:	200004d4 	.word	0x200004d4
 8008fa8:	20000018 	.word	0x20000018
 8008fac:	20000098 	.word	0x20000098

08008fb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	4905      	ldr	r1, [pc, #20]	@ (8008fcc <CDC_Init_FS+0x1c>)
 8008fb8:	4805      	ldr	r0, [pc, #20]	@ (8008fd0 <CDC_Init_FS+0x20>)
 8008fba:	f7fe fc11 	bl	80077e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008fbe:	4905      	ldr	r1, [pc, #20]	@ (8008fd4 <CDC_Init_FS+0x24>)
 8008fc0:	4803      	ldr	r0, [pc, #12]	@ (8008fd0 <CDC_Init_FS+0x20>)
 8008fc2:	f7fe fc2f 	bl	8007824 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008fc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000fb0 	.word	0x20000fb0
 8008fd0:	200004d4 	.word	0x200004d4
 8008fd4:	200007b0 	.word	0x200007b0

08008fd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ff8:	79fb      	ldrb	r3, [r7, #7]
 8008ffa:	2b23      	cmp	r3, #35	@ 0x23
 8008ffc:	d84a      	bhi.n	8009094 <CDC_Control_FS+0xac>
 8008ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8009004 <CDC_Control_FS+0x1c>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009095 	.word	0x08009095
 8009008:	08009095 	.word	0x08009095
 800900c:	08009095 	.word	0x08009095
 8009010:	08009095 	.word	0x08009095
 8009014:	08009095 	.word	0x08009095
 8009018:	08009095 	.word	0x08009095
 800901c:	08009095 	.word	0x08009095
 8009020:	08009095 	.word	0x08009095
 8009024:	08009095 	.word	0x08009095
 8009028:	08009095 	.word	0x08009095
 800902c:	08009095 	.word	0x08009095
 8009030:	08009095 	.word	0x08009095
 8009034:	08009095 	.word	0x08009095
 8009038:	08009095 	.word	0x08009095
 800903c:	08009095 	.word	0x08009095
 8009040:	08009095 	.word	0x08009095
 8009044:	08009095 	.word	0x08009095
 8009048:	08009095 	.word	0x08009095
 800904c:	08009095 	.word	0x08009095
 8009050:	08009095 	.word	0x08009095
 8009054:	08009095 	.word	0x08009095
 8009058:	08009095 	.word	0x08009095
 800905c:	08009095 	.word	0x08009095
 8009060:	08009095 	.word	0x08009095
 8009064:	08009095 	.word	0x08009095
 8009068:	08009095 	.word	0x08009095
 800906c:	08009095 	.word	0x08009095
 8009070:	08009095 	.word	0x08009095
 8009074:	08009095 	.word	0x08009095
 8009078:	08009095 	.word	0x08009095
 800907c:	08009095 	.word	0x08009095
 8009080:	08009095 	.word	0x08009095
 8009084:	08009095 	.word	0x08009095
 8009088:	08009095 	.word	0x08009095
 800908c:	08009095 	.word	0x08009095
 8009090:	08009095 	.word	0x08009095
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009094:	bf00      	nop
  }

  return (USBD_OK);
 8009096:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80090ae:	6879      	ldr	r1, [r7, #4]
 80090b0:	4805      	ldr	r0, [pc, #20]	@ (80090c8 <CDC_Receive_FS+0x24>)
 80090b2:	f7fe fbb7 	bl	8007824 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090b6:	4804      	ldr	r0, [pc, #16]	@ (80090c8 <CDC_Receive_FS+0x24>)
 80090b8:	f7fe fc12 	bl	80078e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80090bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	200004d4 	.word	0x200004d4

080090cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80090dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009114 <CDC_Transmit_FS+0x48>)
 80090de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e00b      	b.n	800910a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090f2:	887b      	ldrh	r3, [r7, #2]
 80090f4:	461a      	mov	r2, r3
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4806      	ldr	r0, [pc, #24]	@ (8009114 <CDC_Transmit_FS+0x48>)
 80090fa:	f7fe fb71 	bl	80077e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090fe:	4805      	ldr	r0, [pc, #20]	@ (8009114 <CDC_Transmit_FS+0x48>)
 8009100:	f7fe fbae 	bl	8007860 <USBD_CDC_TransmitPacket>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009108:	7bfb      	ldrb	r3, [r7, #15]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	200004d4 	.word	0x200004d4

08009118 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800912a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800912e:	4618      	mov	r0, r3
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
	...

0800913c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	6039      	str	r1, [r7, #0]
 8009146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2212      	movs	r2, #18
 800914c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800914e:	4b03      	ldr	r3, [pc, #12]	@ (800915c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	200000c8 	.word	0x200000c8

08009160 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	4603      	mov	r3, r0
 8009168:	6039      	str	r1, [r7, #0]
 800916a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	2204      	movs	r2, #4
 8009170:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009172:	4b03      	ldr	r3, [pc, #12]	@ (8009180 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009174:	4618      	mov	r0, r3
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	200000dc 	.word	0x200000dc

08009184 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	6039      	str	r1, [r7, #0]
 800918e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009190:	79fb      	ldrb	r3, [r7, #7]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d105      	bne.n	80091a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	4907      	ldr	r1, [pc, #28]	@ (80091b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800919a:	4808      	ldr	r0, [pc, #32]	@ (80091bc <USBD_FS_ProductStrDescriptor+0x38>)
 800919c:	f7ff fdec 	bl	8008d78 <USBD_GetString>
 80091a0:	e004      	b.n	80091ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	4904      	ldr	r1, [pc, #16]	@ (80091b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80091a6:	4805      	ldr	r0, [pc, #20]	@ (80091bc <USBD_FS_ProductStrDescriptor+0x38>)
 80091a8:	f7ff fde6 	bl	8008d78 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091ac:	4b02      	ldr	r3, [pc, #8]	@ (80091b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	200017b0 	.word	0x200017b0
 80091bc:	0800c660 	.word	0x0800c660

080091c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	4603      	mov	r3, r0
 80091c8:	6039      	str	r1, [r7, #0]
 80091ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	4904      	ldr	r1, [pc, #16]	@ (80091e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091d0:	4804      	ldr	r0, [pc, #16]	@ (80091e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091d2:	f7ff fdd1 	bl	8008d78 <USBD_GetString>
  return USBD_StrDesc;
 80091d6:	4b02      	ldr	r3, [pc, #8]	@ (80091e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	200017b0 	.word	0x200017b0
 80091e4:	0800c678 	.word	0x0800c678

080091e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	6039      	str	r1, [r7, #0]
 80091f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	221a      	movs	r2, #26
 80091f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091fa:	f000 f843 	bl	8009284 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091fe:	4b02      	ldr	r3, [pc, #8]	@ (8009208 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	200000e0 	.word	0x200000e0

0800920c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d105      	bne.n	800922a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	4907      	ldr	r1, [pc, #28]	@ (8009240 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009222:	4808      	ldr	r0, [pc, #32]	@ (8009244 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009224:	f7ff fda8 	bl	8008d78 <USBD_GetString>
 8009228:	e004      	b.n	8009234 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	4904      	ldr	r1, [pc, #16]	@ (8009240 <USBD_FS_ConfigStrDescriptor+0x34>)
 800922e:	4805      	ldr	r0, [pc, #20]	@ (8009244 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009230:	f7ff fda2 	bl	8008d78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009234:	4b02      	ldr	r3, [pc, #8]	@ (8009240 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	200017b0 	.word	0x200017b0
 8009244:	0800c68c 	.word	0x0800c68c

08009248 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	6039      	str	r1, [r7, #0]
 8009252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d105      	bne.n	8009266 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	4907      	ldr	r1, [pc, #28]	@ (800927c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800925e:	4808      	ldr	r0, [pc, #32]	@ (8009280 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009260:	f7ff fd8a 	bl	8008d78 <USBD_GetString>
 8009264:	e004      	b.n	8009270 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	4904      	ldr	r1, [pc, #16]	@ (800927c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800926a:	4805      	ldr	r0, [pc, #20]	@ (8009280 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800926c:	f7ff fd84 	bl	8008d78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009270:	4b02      	ldr	r3, [pc, #8]	@ (800927c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	200017b0 	.word	0x200017b0
 8009280:	0800c698 	.word	0x0800c698

08009284 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800928a:	4b0f      	ldr	r3, [pc, #60]	@ (80092c8 <Get_SerialNum+0x44>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009290:	4b0e      	ldr	r3, [pc, #56]	@ (80092cc <Get_SerialNum+0x48>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009296:	4b0e      	ldr	r3, [pc, #56]	@ (80092d0 <Get_SerialNum+0x4c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4413      	add	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d009      	beq.n	80092be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092aa:	2208      	movs	r2, #8
 80092ac:	4909      	ldr	r1, [pc, #36]	@ (80092d4 <Get_SerialNum+0x50>)
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 f814 	bl	80092dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092b4:	2204      	movs	r2, #4
 80092b6:	4908      	ldr	r1, [pc, #32]	@ (80092d8 <Get_SerialNum+0x54>)
 80092b8:	68b8      	ldr	r0, [r7, #8]
 80092ba:	f000 f80f 	bl	80092dc <IntToUnicode>
  }
}
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	1fff7a10 	.word	0x1fff7a10
 80092cc:	1fff7a14 	.word	0x1fff7a14
 80092d0:	1fff7a18 	.word	0x1fff7a18
 80092d4:	200000e2 	.word	0x200000e2
 80092d8:	200000f2 	.word	0x200000f2

080092dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	4613      	mov	r3, r2
 80092e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092ee:	2300      	movs	r3, #0
 80092f0:	75fb      	strb	r3, [r7, #23]
 80092f2:	e027      	b.n	8009344 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	0f1b      	lsrs	r3, r3, #28
 80092f8:	2b09      	cmp	r3, #9
 80092fa:	d80b      	bhi.n	8009314 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	0f1b      	lsrs	r3, r3, #28
 8009300:	b2da      	uxtb	r2, r3
 8009302:	7dfb      	ldrb	r3, [r7, #23]
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	4619      	mov	r1, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	440b      	add	r3, r1
 800930c:	3230      	adds	r2, #48	@ 0x30
 800930e:	b2d2      	uxtb	r2, r2
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	e00a      	b.n	800932a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	0f1b      	lsrs	r3, r3, #28
 8009318:	b2da      	uxtb	r2, r3
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	4619      	mov	r1, r3
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	440b      	add	r3, r1
 8009324:	3237      	adds	r2, #55	@ 0x37
 8009326:	b2d2      	uxtb	r2, r2
 8009328:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009330:	7dfb      	ldrb	r3, [r7, #23]
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	3301      	adds	r3, #1
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	4413      	add	r3, r2
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	3301      	adds	r3, #1
 8009342:	75fb      	strb	r3, [r7, #23]
 8009344:	7dfa      	ldrb	r2, [r7, #23]
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	429a      	cmp	r2, r3
 800934a:	d3d3      	bcc.n	80092f4 <IntToUnicode+0x18>
  }
}
 800934c:	bf00      	nop
 800934e:	bf00      	nop
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
	...

0800935c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08a      	sub	sp, #40	@ 0x28
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009364:	f107 0314 	add.w	r3, r7, #20
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	605a      	str	r2, [r3, #4]
 800936e:	609a      	str	r2, [r3, #8]
 8009370:	60da      	str	r2, [r3, #12]
 8009372:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800937c:	d13a      	bne.n	80093f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800937e:	2300      	movs	r3, #0
 8009380:	613b      	str	r3, [r7, #16]
 8009382:	4b1e      	ldr	r3, [pc, #120]	@ (80093fc <HAL_PCD_MspInit+0xa0>)
 8009384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009386:	4a1d      	ldr	r2, [pc, #116]	@ (80093fc <HAL_PCD_MspInit+0xa0>)
 8009388:	f043 0301 	orr.w	r3, r3, #1
 800938c:	6313      	str	r3, [r2, #48]	@ 0x30
 800938e:	4b1b      	ldr	r3, [pc, #108]	@ (80093fc <HAL_PCD_MspInit+0xa0>)
 8009390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	613b      	str	r3, [r7, #16]
 8009398:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800939a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800939e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093a0:	2302      	movs	r3, #2
 80093a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093a4:	2300      	movs	r3, #0
 80093a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093a8:	2303      	movs	r3, #3
 80093aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093ac:	230a      	movs	r3, #10
 80093ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093b0:	f107 0314 	add.w	r3, r7, #20
 80093b4:	4619      	mov	r1, r3
 80093b6:	4812      	ldr	r0, [pc, #72]	@ (8009400 <HAL_PCD_MspInit+0xa4>)
 80093b8:	f7f9 fa3e 	bl	8002838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093bc:	4b0f      	ldr	r3, [pc, #60]	@ (80093fc <HAL_PCD_MspInit+0xa0>)
 80093be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093c0:	4a0e      	ldr	r2, [pc, #56]	@ (80093fc <HAL_PCD_MspInit+0xa0>)
 80093c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	4b0b      	ldr	r3, [pc, #44]	@ (80093fc <HAL_PCD_MspInit+0xa0>)
 80093ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093d0:	4a0a      	ldr	r2, [pc, #40]	@ (80093fc <HAL_PCD_MspInit+0xa0>)
 80093d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80093d8:	4b08      	ldr	r3, [pc, #32]	@ (80093fc <HAL_PCD_MspInit+0xa0>)
 80093da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093e0:	60fb      	str	r3, [r7, #12]
 80093e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093e4:	2200      	movs	r2, #0
 80093e6:	2100      	movs	r1, #0
 80093e8:	2043      	movs	r0, #67	@ 0x43
 80093ea:	f7f8 fe5c 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093ee:	2043      	movs	r0, #67	@ 0x43
 80093f0:	f7f8 fe75 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093f4:	bf00      	nop
 80093f6:	3728      	adds	r7, #40	@ 0x28
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	40023800 	.word	0x40023800
 8009400:	40020000 	.word	0x40020000

08009404 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009418:	4619      	mov	r1, r3
 800941a:	4610      	mov	r0, r2
 800941c:	f7fe fb49 	bl	8007ab2 <USBD_LL_SetupStage>
}
 8009420:	bf00      	nop
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800943a:	78fa      	ldrb	r2, [r7, #3]
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	4619      	mov	r1, r3
 8009452:	f7fe fb83 	bl	8007b5c <USBD_LL_DataOutStage>
}
 8009456:	bf00      	nop
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	460b      	mov	r3, r1
 8009468:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009470:	78fa      	ldrb	r2, [r7, #3]
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	4613      	mov	r3, r2
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	4413      	add	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	440b      	add	r3, r1
 800947e:	3320      	adds	r3, #32
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	4619      	mov	r1, r3
 8009486:	f7fe fc1c 	bl	8007cc2 <USBD_LL_DataInStage>
}
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b082      	sub	sp, #8
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fd56 	bl	8007f52 <USBD_LL_SOF>
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094b6:	2301      	movs	r3, #1
 80094b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	79db      	ldrb	r3, [r3, #7]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d102      	bne.n	80094c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]
 80094c6:	e008      	b.n	80094da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	79db      	ldrb	r3, [r3, #7]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d102      	bne.n	80094d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80094d0:	2301      	movs	r3, #1
 80094d2:	73fb      	strb	r3, [r7, #15]
 80094d4:	e001      	b.n	80094da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80094d6:	f7f8 fa29 	bl	800192c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094e0:	7bfa      	ldrb	r2, [r7, #15]
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fe fcf0 	bl	8007eca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe fc98 	bl	8007e26 <USBD_LL_Reset>
}
 80094f6:	bf00      	nop
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fceb 	bl	8007eea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	6812      	ldr	r2, [r2, #0]
 8009522:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	7adb      	ldrb	r3, [r3, #11]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d005      	beq.n	8009540 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009534:	4b04      	ldr	r3, [pc, #16]	@ (8009548 <HAL_PCD_SuspendCallback+0x48>)
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	4a03      	ldr	r2, [pc, #12]	@ (8009548 <HAL_PCD_SuspendCallback+0x48>)
 800953a:	f043 0306 	orr.w	r3, r3, #6
 800953e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	e000ed00 	.word	0xe000ed00

0800954c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fce1 	bl	8007f22 <USBD_LL_Resume>
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800957a:	78fa      	ldrb	r2, [r7, #3]
 800957c:	4611      	mov	r1, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fd39 	bl	8007ff6 <USBD_LL_IsoOUTIncomplete>
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800959e:	78fa      	ldrb	r2, [r7, #3]
 80095a0:	4611      	mov	r1, r2
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fcf5 	bl	8007f92 <USBD_LL_IsoINIncomplete>
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe fd4b 	bl	800805a <USBD_LL_DevConnected>
}
 80095c4:	bf00      	nop
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fd48 	bl	8008070 <USBD_LL_DevDisconnected>
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d13c      	bne.n	8009672 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80095f8:	4a20      	ldr	r2, [pc, #128]	@ (800967c <USBD_LL_Init+0x94>)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a1e      	ldr	r2, [pc, #120]	@ (800967c <USBD_LL_Init+0x94>)
 8009604:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009608:	4b1c      	ldr	r3, [pc, #112]	@ (800967c <USBD_LL_Init+0x94>)
 800960a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800960e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009610:	4b1a      	ldr	r3, [pc, #104]	@ (800967c <USBD_LL_Init+0x94>)
 8009612:	2204      	movs	r2, #4
 8009614:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009616:	4b19      	ldr	r3, [pc, #100]	@ (800967c <USBD_LL_Init+0x94>)
 8009618:	2202      	movs	r2, #2
 800961a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800961c:	4b17      	ldr	r3, [pc, #92]	@ (800967c <USBD_LL_Init+0x94>)
 800961e:	2200      	movs	r2, #0
 8009620:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009622:	4b16      	ldr	r3, [pc, #88]	@ (800967c <USBD_LL_Init+0x94>)
 8009624:	2202      	movs	r2, #2
 8009626:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009628:	4b14      	ldr	r3, [pc, #80]	@ (800967c <USBD_LL_Init+0x94>)
 800962a:	2200      	movs	r2, #0
 800962c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800962e:	4b13      	ldr	r3, [pc, #76]	@ (800967c <USBD_LL_Init+0x94>)
 8009630:	2200      	movs	r2, #0
 8009632:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009634:	4b11      	ldr	r3, [pc, #68]	@ (800967c <USBD_LL_Init+0x94>)
 8009636:	2200      	movs	r2, #0
 8009638:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800963a:	4b10      	ldr	r3, [pc, #64]	@ (800967c <USBD_LL_Init+0x94>)
 800963c:	2200      	movs	r2, #0
 800963e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009640:	4b0e      	ldr	r3, [pc, #56]	@ (800967c <USBD_LL_Init+0x94>)
 8009642:	2200      	movs	r2, #0
 8009644:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009646:	480d      	ldr	r0, [pc, #52]	@ (800967c <USBD_LL_Init+0x94>)
 8009648:	f7f9 fade 	bl	8002c08 <HAL_PCD_Init>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009652:	f7f8 f96b 	bl	800192c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009656:	2180      	movs	r1, #128	@ 0x80
 8009658:	4808      	ldr	r0, [pc, #32]	@ (800967c <USBD_LL_Init+0x94>)
 800965a:	f7fa fd0a 	bl	8004072 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800965e:	2240      	movs	r2, #64	@ 0x40
 8009660:	2100      	movs	r1, #0
 8009662:	4806      	ldr	r0, [pc, #24]	@ (800967c <USBD_LL_Init+0x94>)
 8009664:	f7fa fcbe 	bl	8003fe4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009668:	2280      	movs	r2, #128	@ 0x80
 800966a:	2101      	movs	r1, #1
 800966c:	4803      	ldr	r0, [pc, #12]	@ (800967c <USBD_LL_Init+0x94>)
 800966e:	f7fa fcb9 	bl	8003fe4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	200019b0 	.word	0x200019b0

08009680 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009696:	4618      	mov	r0, r3
 8009698:	f7f9 fbc5 	bl	8002e26 <HAL_PCD_Start>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f942 	bl	800992c <USBD_Get_USB_Status>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	4608      	mov	r0, r1
 80096c0:	4611      	mov	r1, r2
 80096c2:	461a      	mov	r2, r3
 80096c4:	4603      	mov	r3, r0
 80096c6:	70fb      	strb	r3, [r7, #3]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70bb      	strb	r3, [r7, #2]
 80096cc:	4613      	mov	r3, r2
 80096ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096de:	78bb      	ldrb	r3, [r7, #2]
 80096e0:	883a      	ldrh	r2, [r7, #0]
 80096e2:	78f9      	ldrb	r1, [r7, #3]
 80096e4:	f7fa f899 	bl	800381a <HAL_PCD_EP_Open>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f91c 	bl	800992c <USBD_Get_USB_Status>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	460b      	mov	r3, r1
 800970c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800971c:	78fa      	ldrb	r2, [r7, #3]
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f7fa f8e4 	bl	80038ee <HAL_PCD_EP_Close>
 8009726:	4603      	mov	r3, r0
 8009728:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	4618      	mov	r0, r3
 800972e:	f000 f8fd 	bl	800992c <USBD_Get_USB_Status>
 8009732:	4603      	mov	r3, r0
 8009734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009736:	7bbb      	ldrb	r3, [r7, #14]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800975a:	78fa      	ldrb	r2, [r7, #3]
 800975c:	4611      	mov	r1, r2
 800975e:	4618      	mov	r0, r3
 8009760:	f7fa f99c 	bl	8003a9c <HAL_PCD_EP_SetStall>
 8009764:	4603      	mov	r3, r0
 8009766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	4618      	mov	r0, r3
 800976c:	f000 f8de 	bl	800992c <USBD_Get_USB_Status>
 8009770:	4603      	mov	r3, r0
 8009772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009774:	7bbb      	ldrb	r3, [r7, #14]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009798:	78fa      	ldrb	r2, [r7, #3]
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f7fa f9e0 	bl	8003b62 <HAL_PCD_EP_ClrStall>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 f8bf 	bl	800992c <USBD_Get_USB_Status>
 80097ae:	4603      	mov	r3, r0
 80097b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	da0b      	bge.n	80097f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	4613      	mov	r3, r2
 80097e2:	00db      	lsls	r3, r3, #3
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	440b      	add	r3, r1
 80097ea:	3316      	adds	r3, #22
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	e00b      	b.n	8009808 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	4613      	mov	r3, r2
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	440b      	add	r3, r1
 8009802:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009806:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800982e:	78fa      	ldrb	r2, [r7, #3]
 8009830:	4611      	mov	r1, r2
 8009832:	4618      	mov	r0, r3
 8009834:	f7f9 ffcd 	bl	80037d2 <HAL_PCD_SetAddress>
 8009838:	4603      	mov	r3, r0
 800983a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f874 	bl	800992c <USBD_Get_USB_Status>
 8009844:	4603      	mov	r3, r0
 8009846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009848:	7bbb      	ldrb	r3, [r7, #14]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b086      	sub	sp, #24
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
 800985e:	460b      	mov	r3, r1
 8009860:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009870:	7af9      	ldrb	r1, [r7, #11]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	f7fa f8d7 	bl	8003a28 <HAL_PCD_EP_Transmit>
 800987a:	4603      	mov	r3, r0
 800987c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 f853 	bl	800992c <USBD_Get_USB_Status>
 8009886:	4603      	mov	r3, r0
 8009888:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800988a:	7dbb      	ldrb	r3, [r7, #22]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	460b      	mov	r3, r1
 80098a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80098b2:	7af9      	ldrb	r1, [r7, #11]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	f7fa f863 	bl	8003982 <HAL_PCD_EP_Receive>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 f832 	bl	800992c <USBD_Get_USB_Status>
 80098c8:	4603      	mov	r3, r0
 80098ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098e8:	78fa      	ldrb	r2, [r7, #3]
 80098ea:	4611      	mov	r1, r2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fa f883 	bl	80039f8 <HAL_PCD_EP_GetRxCount>
 80098f2:	4603      	mov	r3, r0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009904:	4b03      	ldr	r3, [pc, #12]	@ (8009914 <USBD_static_malloc+0x18>)
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20001e94 	.word	0x20001e94

08009918 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]

}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	2b03      	cmp	r3, #3
 800993e:	d817      	bhi.n	8009970 <USBD_Get_USB_Status+0x44>
 8009940:	a201      	add	r2, pc, #4	@ (adr r2, 8009948 <USBD_Get_USB_Status+0x1c>)
 8009942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009946:	bf00      	nop
 8009948:	08009959 	.word	0x08009959
 800994c:	0800995f 	.word	0x0800995f
 8009950:	08009965 	.word	0x08009965
 8009954:	0800996b 	.word	0x0800996b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
    break;
 800995c:	e00b      	b.n	8009976 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800995e:	2303      	movs	r3, #3
 8009960:	73fb      	strb	r3, [r7, #15]
    break;
 8009962:	e008      	b.n	8009976 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009964:	2301      	movs	r3, #1
 8009966:	73fb      	strb	r3, [r7, #15]
    break;
 8009968:	e005      	b.n	8009976 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800996a:	2303      	movs	r3, #3
 800996c:	73fb      	strb	r3, [r7, #15]
    break;
 800996e:	e002      	b.n	8009976 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009970:	2303      	movs	r3, #3
 8009972:	73fb      	strb	r3, [r7, #15]
    break;
 8009974:	bf00      	nop
  }
  return usb_status;
 8009976:	7bfb      	ldrb	r3, [r7, #15]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <__cvt>:
 8009984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009988:	ec57 6b10 	vmov	r6, r7, d0
 800998c:	2f00      	cmp	r7, #0
 800998e:	460c      	mov	r4, r1
 8009990:	4619      	mov	r1, r3
 8009992:	463b      	mov	r3, r7
 8009994:	bfbb      	ittet	lt
 8009996:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800999a:	461f      	movlt	r7, r3
 800999c:	2300      	movge	r3, #0
 800999e:	232d      	movlt	r3, #45	@ 0x2d
 80099a0:	700b      	strb	r3, [r1, #0]
 80099a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80099a8:	4691      	mov	r9, r2
 80099aa:	f023 0820 	bic.w	r8, r3, #32
 80099ae:	bfbc      	itt	lt
 80099b0:	4632      	movlt	r2, r6
 80099b2:	4616      	movlt	r6, r2
 80099b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099b8:	d005      	beq.n	80099c6 <__cvt+0x42>
 80099ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80099be:	d100      	bne.n	80099c2 <__cvt+0x3e>
 80099c0:	3401      	adds	r4, #1
 80099c2:	2102      	movs	r1, #2
 80099c4:	e000      	b.n	80099c8 <__cvt+0x44>
 80099c6:	2103      	movs	r1, #3
 80099c8:	ab03      	add	r3, sp, #12
 80099ca:	9301      	str	r3, [sp, #4]
 80099cc:	ab02      	add	r3, sp, #8
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	ec47 6b10 	vmov	d0, r6, r7
 80099d4:	4653      	mov	r3, sl
 80099d6:	4622      	mov	r2, r4
 80099d8:	f000 fe5a 	bl	800a690 <_dtoa_r>
 80099dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80099e0:	4605      	mov	r5, r0
 80099e2:	d119      	bne.n	8009a18 <__cvt+0x94>
 80099e4:	f019 0f01 	tst.w	r9, #1
 80099e8:	d00e      	beq.n	8009a08 <__cvt+0x84>
 80099ea:	eb00 0904 	add.w	r9, r0, r4
 80099ee:	2200      	movs	r2, #0
 80099f0:	2300      	movs	r3, #0
 80099f2:	4630      	mov	r0, r6
 80099f4:	4639      	mov	r1, r7
 80099f6:	f7f7 f867 	bl	8000ac8 <__aeabi_dcmpeq>
 80099fa:	b108      	cbz	r0, 8009a00 <__cvt+0x7c>
 80099fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a00:	2230      	movs	r2, #48	@ 0x30
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	454b      	cmp	r3, r9
 8009a06:	d31e      	bcc.n	8009a46 <__cvt+0xc2>
 8009a08:	9b03      	ldr	r3, [sp, #12]
 8009a0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a0c:	1b5b      	subs	r3, r3, r5
 8009a0e:	4628      	mov	r0, r5
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	b004      	add	sp, #16
 8009a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a1c:	eb00 0904 	add.w	r9, r0, r4
 8009a20:	d1e5      	bne.n	80099ee <__cvt+0x6a>
 8009a22:	7803      	ldrb	r3, [r0, #0]
 8009a24:	2b30      	cmp	r3, #48	@ 0x30
 8009a26:	d10a      	bne.n	8009a3e <__cvt+0xba>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	4639      	mov	r1, r7
 8009a30:	f7f7 f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a34:	b918      	cbnz	r0, 8009a3e <__cvt+0xba>
 8009a36:	f1c4 0401 	rsb	r4, r4, #1
 8009a3a:	f8ca 4000 	str.w	r4, [sl]
 8009a3e:	f8da 3000 	ldr.w	r3, [sl]
 8009a42:	4499      	add	r9, r3
 8009a44:	e7d3      	b.n	80099ee <__cvt+0x6a>
 8009a46:	1c59      	adds	r1, r3, #1
 8009a48:	9103      	str	r1, [sp, #12]
 8009a4a:	701a      	strb	r2, [r3, #0]
 8009a4c:	e7d9      	b.n	8009a02 <__cvt+0x7e>

08009a4e <__exponent>:
 8009a4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a50:	2900      	cmp	r1, #0
 8009a52:	bfba      	itte	lt
 8009a54:	4249      	neglt	r1, r1
 8009a56:	232d      	movlt	r3, #45	@ 0x2d
 8009a58:	232b      	movge	r3, #43	@ 0x2b
 8009a5a:	2909      	cmp	r1, #9
 8009a5c:	7002      	strb	r2, [r0, #0]
 8009a5e:	7043      	strb	r3, [r0, #1]
 8009a60:	dd29      	ble.n	8009ab6 <__exponent+0x68>
 8009a62:	f10d 0307 	add.w	r3, sp, #7
 8009a66:	461d      	mov	r5, r3
 8009a68:	270a      	movs	r7, #10
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a70:	fb07 1416 	mls	r4, r7, r6, r1
 8009a74:	3430      	adds	r4, #48	@ 0x30
 8009a76:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	2c63      	cmp	r4, #99	@ 0x63
 8009a7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a82:	4631      	mov	r1, r6
 8009a84:	dcf1      	bgt.n	8009a6a <__exponent+0x1c>
 8009a86:	3130      	adds	r1, #48	@ 0x30
 8009a88:	1e94      	subs	r4, r2, #2
 8009a8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a8e:	1c41      	adds	r1, r0, #1
 8009a90:	4623      	mov	r3, r4
 8009a92:	42ab      	cmp	r3, r5
 8009a94:	d30a      	bcc.n	8009aac <__exponent+0x5e>
 8009a96:	f10d 0309 	add.w	r3, sp, #9
 8009a9a:	1a9b      	subs	r3, r3, r2
 8009a9c:	42ac      	cmp	r4, r5
 8009a9e:	bf88      	it	hi
 8009aa0:	2300      	movhi	r3, #0
 8009aa2:	3302      	adds	r3, #2
 8009aa4:	4403      	add	r3, r0
 8009aa6:	1a18      	subs	r0, r3, r0
 8009aa8:	b003      	add	sp, #12
 8009aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aac:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ab0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009ab4:	e7ed      	b.n	8009a92 <__exponent+0x44>
 8009ab6:	2330      	movs	r3, #48	@ 0x30
 8009ab8:	3130      	adds	r1, #48	@ 0x30
 8009aba:	7083      	strb	r3, [r0, #2]
 8009abc:	70c1      	strb	r1, [r0, #3]
 8009abe:	1d03      	adds	r3, r0, #4
 8009ac0:	e7f1      	b.n	8009aa6 <__exponent+0x58>
	...

08009ac4 <_printf_float>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	b08d      	sub	sp, #52	@ 0x34
 8009aca:	460c      	mov	r4, r1
 8009acc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	461f      	mov	r7, r3
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	f000 fcdb 	bl	800a490 <_localeconv_r>
 8009ada:	6803      	ldr	r3, [r0, #0]
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7f6 fbc6 	bl	8000270 <strlen>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8009aec:	9005      	str	r0, [sp, #20]
 8009aee:	3307      	adds	r3, #7
 8009af0:	f023 0307 	bic.w	r3, r3, #7
 8009af4:	f103 0208 	add.w	r2, r3, #8
 8009af8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009afc:	f8d4 b000 	ldr.w	fp, [r4]
 8009b00:	f8c8 2000 	str.w	r2, [r8]
 8009b04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b0c:	9307      	str	r3, [sp, #28]
 8009b0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b1a:	4b9c      	ldr	r3, [pc, #624]	@ (8009d8c <_printf_float+0x2c8>)
 8009b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b20:	f7f7 f804 	bl	8000b2c <__aeabi_dcmpun>
 8009b24:	bb70      	cbnz	r0, 8009b84 <_printf_float+0xc0>
 8009b26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b2a:	4b98      	ldr	r3, [pc, #608]	@ (8009d8c <_printf_float+0x2c8>)
 8009b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b30:	f7f6 ffde 	bl	8000af0 <__aeabi_dcmple>
 8009b34:	bb30      	cbnz	r0, 8009b84 <_printf_float+0xc0>
 8009b36:	2200      	movs	r2, #0
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	f7f6 ffcd 	bl	8000adc <__aeabi_dcmplt>
 8009b42:	b110      	cbz	r0, 8009b4a <_printf_float+0x86>
 8009b44:	232d      	movs	r3, #45	@ 0x2d
 8009b46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b4a:	4a91      	ldr	r2, [pc, #580]	@ (8009d90 <_printf_float+0x2cc>)
 8009b4c:	4b91      	ldr	r3, [pc, #580]	@ (8009d94 <_printf_float+0x2d0>)
 8009b4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b52:	bf94      	ite	ls
 8009b54:	4690      	movls	r8, r2
 8009b56:	4698      	movhi	r8, r3
 8009b58:	2303      	movs	r3, #3
 8009b5a:	6123      	str	r3, [r4, #16]
 8009b5c:	f02b 0304 	bic.w	r3, fp, #4
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	f04f 0900 	mov.w	r9, #0
 8009b66:	9700      	str	r7, [sp, #0]
 8009b68:	4633      	mov	r3, r6
 8009b6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 f9d2 	bl	8009f18 <_printf_common>
 8009b74:	3001      	adds	r0, #1
 8009b76:	f040 808d 	bne.w	8009c94 <_printf_float+0x1d0>
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7e:	b00d      	add	sp, #52	@ 0x34
 8009b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b84:	4642      	mov	r2, r8
 8009b86:	464b      	mov	r3, r9
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	f7f6 ffce 	bl	8000b2c <__aeabi_dcmpun>
 8009b90:	b140      	cbz	r0, 8009ba4 <_printf_float+0xe0>
 8009b92:	464b      	mov	r3, r9
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bfbc      	itt	lt
 8009b98:	232d      	movlt	r3, #45	@ 0x2d
 8009b9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b9e:	4a7e      	ldr	r2, [pc, #504]	@ (8009d98 <_printf_float+0x2d4>)
 8009ba0:	4b7e      	ldr	r3, [pc, #504]	@ (8009d9c <_printf_float+0x2d8>)
 8009ba2:	e7d4      	b.n	8009b4e <_printf_float+0x8a>
 8009ba4:	6863      	ldr	r3, [r4, #4]
 8009ba6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009baa:	9206      	str	r2, [sp, #24]
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	d13b      	bne.n	8009c28 <_printf_float+0x164>
 8009bb0:	2306      	movs	r3, #6
 8009bb2:	6063      	str	r3, [r4, #4]
 8009bb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009bb8:	2300      	movs	r3, #0
 8009bba:	6022      	str	r2, [r4, #0]
 8009bbc:	9303      	str	r3, [sp, #12]
 8009bbe:	ab0a      	add	r3, sp, #40	@ 0x28
 8009bc0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009bc4:	ab09      	add	r3, sp, #36	@ 0x24
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	6861      	ldr	r1, [r4, #4]
 8009bca:	ec49 8b10 	vmov	d0, r8, r9
 8009bce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	f7ff fed6 	bl	8009984 <__cvt>
 8009bd8:	9b06      	ldr	r3, [sp, #24]
 8009bda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bdc:	2b47      	cmp	r3, #71	@ 0x47
 8009bde:	4680      	mov	r8, r0
 8009be0:	d129      	bne.n	8009c36 <_printf_float+0x172>
 8009be2:	1cc8      	adds	r0, r1, #3
 8009be4:	db02      	blt.n	8009bec <_printf_float+0x128>
 8009be6:	6863      	ldr	r3, [r4, #4]
 8009be8:	4299      	cmp	r1, r3
 8009bea:	dd41      	ble.n	8009c70 <_printf_float+0x1ac>
 8009bec:	f1aa 0a02 	sub.w	sl, sl, #2
 8009bf0:	fa5f fa8a 	uxtb.w	sl, sl
 8009bf4:	3901      	subs	r1, #1
 8009bf6:	4652      	mov	r2, sl
 8009bf8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009bfc:	9109      	str	r1, [sp, #36]	@ 0x24
 8009bfe:	f7ff ff26 	bl	8009a4e <__exponent>
 8009c02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c04:	1813      	adds	r3, r2, r0
 8009c06:	2a01      	cmp	r2, #1
 8009c08:	4681      	mov	r9, r0
 8009c0a:	6123      	str	r3, [r4, #16]
 8009c0c:	dc02      	bgt.n	8009c14 <_printf_float+0x150>
 8009c0e:	6822      	ldr	r2, [r4, #0]
 8009c10:	07d2      	lsls	r2, r2, #31
 8009c12:	d501      	bpl.n	8009c18 <_printf_float+0x154>
 8009c14:	3301      	adds	r3, #1
 8009c16:	6123      	str	r3, [r4, #16]
 8009c18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d0a2      	beq.n	8009b66 <_printf_float+0xa2>
 8009c20:	232d      	movs	r3, #45	@ 0x2d
 8009c22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c26:	e79e      	b.n	8009b66 <_printf_float+0xa2>
 8009c28:	9a06      	ldr	r2, [sp, #24]
 8009c2a:	2a47      	cmp	r2, #71	@ 0x47
 8009c2c:	d1c2      	bne.n	8009bb4 <_printf_float+0xf0>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1c0      	bne.n	8009bb4 <_printf_float+0xf0>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e7bd      	b.n	8009bb2 <_printf_float+0xee>
 8009c36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c3a:	d9db      	bls.n	8009bf4 <_printf_float+0x130>
 8009c3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c40:	d118      	bne.n	8009c74 <_printf_float+0x1b0>
 8009c42:	2900      	cmp	r1, #0
 8009c44:	6863      	ldr	r3, [r4, #4]
 8009c46:	dd0b      	ble.n	8009c60 <_printf_float+0x19c>
 8009c48:	6121      	str	r1, [r4, #16]
 8009c4a:	b913      	cbnz	r3, 8009c52 <_printf_float+0x18e>
 8009c4c:	6822      	ldr	r2, [r4, #0]
 8009c4e:	07d0      	lsls	r0, r2, #31
 8009c50:	d502      	bpl.n	8009c58 <_printf_float+0x194>
 8009c52:	3301      	adds	r3, #1
 8009c54:	440b      	add	r3, r1
 8009c56:	6123      	str	r3, [r4, #16]
 8009c58:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c5a:	f04f 0900 	mov.w	r9, #0
 8009c5e:	e7db      	b.n	8009c18 <_printf_float+0x154>
 8009c60:	b913      	cbnz	r3, 8009c68 <_printf_float+0x1a4>
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	07d2      	lsls	r2, r2, #31
 8009c66:	d501      	bpl.n	8009c6c <_printf_float+0x1a8>
 8009c68:	3302      	adds	r3, #2
 8009c6a:	e7f4      	b.n	8009c56 <_printf_float+0x192>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e7f2      	b.n	8009c56 <_printf_float+0x192>
 8009c70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c76:	4299      	cmp	r1, r3
 8009c78:	db05      	blt.n	8009c86 <_printf_float+0x1c2>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	6121      	str	r1, [r4, #16]
 8009c7e:	07d8      	lsls	r0, r3, #31
 8009c80:	d5ea      	bpl.n	8009c58 <_printf_float+0x194>
 8009c82:	1c4b      	adds	r3, r1, #1
 8009c84:	e7e7      	b.n	8009c56 <_printf_float+0x192>
 8009c86:	2900      	cmp	r1, #0
 8009c88:	bfd4      	ite	le
 8009c8a:	f1c1 0202 	rsble	r2, r1, #2
 8009c8e:	2201      	movgt	r2, #1
 8009c90:	4413      	add	r3, r2
 8009c92:	e7e0      	b.n	8009c56 <_printf_float+0x192>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	055a      	lsls	r2, r3, #21
 8009c98:	d407      	bmi.n	8009caa <_printf_float+0x1e6>
 8009c9a:	6923      	ldr	r3, [r4, #16]
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b8      	blx	r7
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d12b      	bne.n	8009d00 <_printf_float+0x23c>
 8009ca8:	e767      	b.n	8009b7a <_printf_float+0xb6>
 8009caa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cae:	f240 80dd 	bls.w	8009e6c <_printf_float+0x3a8>
 8009cb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f7f6 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d033      	beq.n	8009d2a <_printf_float+0x266>
 8009cc2:	4a37      	ldr	r2, [pc, #220]	@ (8009da0 <_printf_float+0x2dc>)
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4628      	mov	r0, r5
 8009cca:	47b8      	blx	r7
 8009ccc:	3001      	adds	r0, #1
 8009cce:	f43f af54 	beq.w	8009b7a <_printf_float+0xb6>
 8009cd2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009cd6:	4543      	cmp	r3, r8
 8009cd8:	db02      	blt.n	8009ce0 <_printf_float+0x21c>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	07d8      	lsls	r0, r3, #31
 8009cde:	d50f      	bpl.n	8009d00 <_printf_float+0x23c>
 8009ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	f43f af45 	beq.w	8009b7a <_printf_float+0xb6>
 8009cf0:	f04f 0900 	mov.w	r9, #0
 8009cf4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cf8:	f104 0a1a 	add.w	sl, r4, #26
 8009cfc:	45c8      	cmp	r8, r9
 8009cfe:	dc09      	bgt.n	8009d14 <_printf_float+0x250>
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	079b      	lsls	r3, r3, #30
 8009d04:	f100 8103 	bmi.w	8009f0e <_printf_float+0x44a>
 8009d08:	68e0      	ldr	r0, [r4, #12]
 8009d0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d0c:	4298      	cmp	r0, r3
 8009d0e:	bfb8      	it	lt
 8009d10:	4618      	movlt	r0, r3
 8009d12:	e734      	b.n	8009b7e <_printf_float+0xba>
 8009d14:	2301      	movs	r3, #1
 8009d16:	4652      	mov	r2, sl
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	47b8      	blx	r7
 8009d1e:	3001      	adds	r0, #1
 8009d20:	f43f af2b 	beq.w	8009b7a <_printf_float+0xb6>
 8009d24:	f109 0901 	add.w	r9, r9, #1
 8009d28:	e7e8      	b.n	8009cfc <_printf_float+0x238>
 8009d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dc39      	bgt.n	8009da4 <_printf_float+0x2e0>
 8009d30:	4a1b      	ldr	r2, [pc, #108]	@ (8009da0 <_printf_float+0x2dc>)
 8009d32:	2301      	movs	r3, #1
 8009d34:	4631      	mov	r1, r6
 8009d36:	4628      	mov	r0, r5
 8009d38:	47b8      	blx	r7
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	f43f af1d 	beq.w	8009b7a <_printf_float+0xb6>
 8009d40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d44:	ea59 0303 	orrs.w	r3, r9, r3
 8009d48:	d102      	bne.n	8009d50 <_printf_float+0x28c>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	07d9      	lsls	r1, r3, #31
 8009d4e:	d5d7      	bpl.n	8009d00 <_printf_float+0x23c>
 8009d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f af0d 	beq.w	8009b7a <_printf_float+0xb6>
 8009d60:	f04f 0a00 	mov.w	sl, #0
 8009d64:	f104 0b1a 	add.w	fp, r4, #26
 8009d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6a:	425b      	negs	r3, r3
 8009d6c:	4553      	cmp	r3, sl
 8009d6e:	dc01      	bgt.n	8009d74 <_printf_float+0x2b0>
 8009d70:	464b      	mov	r3, r9
 8009d72:	e793      	b.n	8009c9c <_printf_float+0x1d8>
 8009d74:	2301      	movs	r3, #1
 8009d76:	465a      	mov	r2, fp
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	47b8      	blx	r7
 8009d7e:	3001      	adds	r0, #1
 8009d80:	f43f aefb 	beq.w	8009b7a <_printf_float+0xb6>
 8009d84:	f10a 0a01 	add.w	sl, sl, #1
 8009d88:	e7ee      	b.n	8009d68 <_printf_float+0x2a4>
 8009d8a:	bf00      	nop
 8009d8c:	7fefffff 	.word	0x7fefffff
 8009d90:	0800c6c0 	.word	0x0800c6c0
 8009d94:	0800c6c4 	.word	0x0800c6c4
 8009d98:	0800c6c8 	.word	0x0800c6c8
 8009d9c:	0800c6cc 	.word	0x0800c6cc
 8009da0:	0800c6d0 	.word	0x0800c6d0
 8009da4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009da6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009daa:	4553      	cmp	r3, sl
 8009dac:	bfa8      	it	ge
 8009dae:	4653      	movge	r3, sl
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	4699      	mov	r9, r3
 8009db4:	dc36      	bgt.n	8009e24 <_printf_float+0x360>
 8009db6:	f04f 0b00 	mov.w	fp, #0
 8009dba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dbe:	f104 021a 	add.w	r2, r4, #26
 8009dc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dc4:	9306      	str	r3, [sp, #24]
 8009dc6:	eba3 0309 	sub.w	r3, r3, r9
 8009dca:	455b      	cmp	r3, fp
 8009dcc:	dc31      	bgt.n	8009e32 <_printf_float+0x36e>
 8009dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd0:	459a      	cmp	sl, r3
 8009dd2:	dc3a      	bgt.n	8009e4a <_printf_float+0x386>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	07da      	lsls	r2, r3, #31
 8009dd8:	d437      	bmi.n	8009e4a <_printf_float+0x386>
 8009dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ddc:	ebaa 0903 	sub.w	r9, sl, r3
 8009de0:	9b06      	ldr	r3, [sp, #24]
 8009de2:	ebaa 0303 	sub.w	r3, sl, r3
 8009de6:	4599      	cmp	r9, r3
 8009de8:	bfa8      	it	ge
 8009dea:	4699      	movge	r9, r3
 8009dec:	f1b9 0f00 	cmp.w	r9, #0
 8009df0:	dc33      	bgt.n	8009e5a <_printf_float+0x396>
 8009df2:	f04f 0800 	mov.w	r8, #0
 8009df6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dfa:	f104 0b1a 	add.w	fp, r4, #26
 8009dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e00:	ebaa 0303 	sub.w	r3, sl, r3
 8009e04:	eba3 0309 	sub.w	r3, r3, r9
 8009e08:	4543      	cmp	r3, r8
 8009e0a:	f77f af79 	ble.w	8009d00 <_printf_float+0x23c>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	465a      	mov	r2, fp
 8009e12:	4631      	mov	r1, r6
 8009e14:	4628      	mov	r0, r5
 8009e16:	47b8      	blx	r7
 8009e18:	3001      	adds	r0, #1
 8009e1a:	f43f aeae 	beq.w	8009b7a <_printf_float+0xb6>
 8009e1e:	f108 0801 	add.w	r8, r8, #1
 8009e22:	e7ec      	b.n	8009dfe <_printf_float+0x33a>
 8009e24:	4642      	mov	r2, r8
 8009e26:	4631      	mov	r1, r6
 8009e28:	4628      	mov	r0, r5
 8009e2a:	47b8      	blx	r7
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d1c2      	bne.n	8009db6 <_printf_float+0x2f2>
 8009e30:	e6a3      	b.n	8009b7a <_printf_float+0xb6>
 8009e32:	2301      	movs	r3, #1
 8009e34:	4631      	mov	r1, r6
 8009e36:	4628      	mov	r0, r5
 8009e38:	9206      	str	r2, [sp, #24]
 8009e3a:	47b8      	blx	r7
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	f43f ae9c 	beq.w	8009b7a <_printf_float+0xb6>
 8009e42:	9a06      	ldr	r2, [sp, #24]
 8009e44:	f10b 0b01 	add.w	fp, fp, #1
 8009e48:	e7bb      	b.n	8009dc2 <_printf_float+0x2fe>
 8009e4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4628      	mov	r0, r5
 8009e52:	47b8      	blx	r7
 8009e54:	3001      	adds	r0, #1
 8009e56:	d1c0      	bne.n	8009dda <_printf_float+0x316>
 8009e58:	e68f      	b.n	8009b7a <_printf_float+0xb6>
 8009e5a:	9a06      	ldr	r2, [sp, #24]
 8009e5c:	464b      	mov	r3, r9
 8009e5e:	4442      	add	r2, r8
 8009e60:	4631      	mov	r1, r6
 8009e62:	4628      	mov	r0, r5
 8009e64:	47b8      	blx	r7
 8009e66:	3001      	adds	r0, #1
 8009e68:	d1c3      	bne.n	8009df2 <_printf_float+0x32e>
 8009e6a:	e686      	b.n	8009b7a <_printf_float+0xb6>
 8009e6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e70:	f1ba 0f01 	cmp.w	sl, #1
 8009e74:	dc01      	bgt.n	8009e7a <_printf_float+0x3b6>
 8009e76:	07db      	lsls	r3, r3, #31
 8009e78:	d536      	bpl.n	8009ee8 <_printf_float+0x424>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b8      	blx	r7
 8009e84:	3001      	adds	r0, #1
 8009e86:	f43f ae78 	beq.w	8009b7a <_printf_float+0xb6>
 8009e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4628      	mov	r0, r5
 8009e92:	47b8      	blx	r7
 8009e94:	3001      	adds	r0, #1
 8009e96:	f43f ae70 	beq.w	8009b7a <_printf_float+0xb6>
 8009e9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ea6:	f7f6 fe0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eaa:	b9c0      	cbnz	r0, 8009ede <_printf_float+0x41a>
 8009eac:	4653      	mov	r3, sl
 8009eae:	f108 0201 	add.w	r2, r8, #1
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	47b8      	blx	r7
 8009eb8:	3001      	adds	r0, #1
 8009eba:	d10c      	bne.n	8009ed6 <_printf_float+0x412>
 8009ebc:	e65d      	b.n	8009b7a <_printf_float+0xb6>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	465a      	mov	r2, fp
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	47b8      	blx	r7
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f43f ae56 	beq.w	8009b7a <_printf_float+0xb6>
 8009ece:	f108 0801 	add.w	r8, r8, #1
 8009ed2:	45d0      	cmp	r8, sl
 8009ed4:	dbf3      	blt.n	8009ebe <_printf_float+0x3fa>
 8009ed6:	464b      	mov	r3, r9
 8009ed8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009edc:	e6df      	b.n	8009c9e <_printf_float+0x1da>
 8009ede:	f04f 0800 	mov.w	r8, #0
 8009ee2:	f104 0b1a 	add.w	fp, r4, #26
 8009ee6:	e7f4      	b.n	8009ed2 <_printf_float+0x40e>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	4642      	mov	r2, r8
 8009eec:	e7e1      	b.n	8009eb2 <_printf_float+0x3ee>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	464a      	mov	r2, r9
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	47b8      	blx	r7
 8009ef8:	3001      	adds	r0, #1
 8009efa:	f43f ae3e 	beq.w	8009b7a <_printf_float+0xb6>
 8009efe:	f108 0801 	add.w	r8, r8, #1
 8009f02:	68e3      	ldr	r3, [r4, #12]
 8009f04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f06:	1a5b      	subs	r3, r3, r1
 8009f08:	4543      	cmp	r3, r8
 8009f0a:	dcf0      	bgt.n	8009eee <_printf_float+0x42a>
 8009f0c:	e6fc      	b.n	8009d08 <_printf_float+0x244>
 8009f0e:	f04f 0800 	mov.w	r8, #0
 8009f12:	f104 0919 	add.w	r9, r4, #25
 8009f16:	e7f4      	b.n	8009f02 <_printf_float+0x43e>

08009f18 <_printf_common>:
 8009f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	4616      	mov	r6, r2
 8009f1e:	4698      	mov	r8, r3
 8009f20:	688a      	ldr	r2, [r1, #8]
 8009f22:	690b      	ldr	r3, [r1, #16]
 8009f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	bfb8      	it	lt
 8009f2c:	4613      	movlt	r3, r2
 8009f2e:	6033      	str	r3, [r6, #0]
 8009f30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f34:	4607      	mov	r7, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	b10a      	cbz	r2, 8009f3e <_printf_common+0x26>
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	6033      	str	r3, [r6, #0]
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	0699      	lsls	r1, r3, #26
 8009f42:	bf42      	ittt	mi
 8009f44:	6833      	ldrmi	r3, [r6, #0]
 8009f46:	3302      	addmi	r3, #2
 8009f48:	6033      	strmi	r3, [r6, #0]
 8009f4a:	6825      	ldr	r5, [r4, #0]
 8009f4c:	f015 0506 	ands.w	r5, r5, #6
 8009f50:	d106      	bne.n	8009f60 <_printf_common+0x48>
 8009f52:	f104 0a19 	add.w	sl, r4, #25
 8009f56:	68e3      	ldr	r3, [r4, #12]
 8009f58:	6832      	ldr	r2, [r6, #0]
 8009f5a:	1a9b      	subs	r3, r3, r2
 8009f5c:	42ab      	cmp	r3, r5
 8009f5e:	dc26      	bgt.n	8009fae <_printf_common+0x96>
 8009f60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f64:	6822      	ldr	r2, [r4, #0]
 8009f66:	3b00      	subs	r3, #0
 8009f68:	bf18      	it	ne
 8009f6a:	2301      	movne	r3, #1
 8009f6c:	0692      	lsls	r2, r2, #26
 8009f6e:	d42b      	bmi.n	8009fc8 <_printf_common+0xb0>
 8009f70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f74:	4641      	mov	r1, r8
 8009f76:	4638      	mov	r0, r7
 8009f78:	47c8      	blx	r9
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	d01e      	beq.n	8009fbc <_printf_common+0xa4>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	6922      	ldr	r2, [r4, #16]
 8009f82:	f003 0306 	and.w	r3, r3, #6
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	bf02      	ittt	eq
 8009f8a:	68e5      	ldreq	r5, [r4, #12]
 8009f8c:	6833      	ldreq	r3, [r6, #0]
 8009f8e:	1aed      	subeq	r5, r5, r3
 8009f90:	68a3      	ldr	r3, [r4, #8]
 8009f92:	bf0c      	ite	eq
 8009f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f98:	2500      	movne	r5, #0
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	bfc4      	itt	gt
 8009f9e:	1a9b      	subgt	r3, r3, r2
 8009fa0:	18ed      	addgt	r5, r5, r3
 8009fa2:	2600      	movs	r6, #0
 8009fa4:	341a      	adds	r4, #26
 8009fa6:	42b5      	cmp	r5, r6
 8009fa8:	d11a      	bne.n	8009fe0 <_printf_common+0xc8>
 8009faa:	2000      	movs	r0, #0
 8009fac:	e008      	b.n	8009fc0 <_printf_common+0xa8>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	4652      	mov	r2, sl
 8009fb2:	4641      	mov	r1, r8
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	47c8      	blx	r9
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d103      	bne.n	8009fc4 <_printf_common+0xac>
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc4:	3501      	adds	r5, #1
 8009fc6:	e7c6      	b.n	8009f56 <_printf_common+0x3e>
 8009fc8:	18e1      	adds	r1, r4, r3
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	2030      	movs	r0, #48	@ 0x30
 8009fce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fd2:	4422      	add	r2, r4
 8009fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fdc:	3302      	adds	r3, #2
 8009fde:	e7c7      	b.n	8009f70 <_printf_common+0x58>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	47c8      	blx	r9
 8009fea:	3001      	adds	r0, #1
 8009fec:	d0e6      	beq.n	8009fbc <_printf_common+0xa4>
 8009fee:	3601      	adds	r6, #1
 8009ff0:	e7d9      	b.n	8009fa6 <_printf_common+0x8e>
	...

08009ff4 <_printf_i>:
 8009ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff8:	7e0f      	ldrb	r7, [r1, #24]
 8009ffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ffc:	2f78      	cmp	r7, #120	@ 0x78
 8009ffe:	4691      	mov	r9, r2
 800a000:	4680      	mov	r8, r0
 800a002:	460c      	mov	r4, r1
 800a004:	469a      	mov	sl, r3
 800a006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a00a:	d807      	bhi.n	800a01c <_printf_i+0x28>
 800a00c:	2f62      	cmp	r7, #98	@ 0x62
 800a00e:	d80a      	bhi.n	800a026 <_printf_i+0x32>
 800a010:	2f00      	cmp	r7, #0
 800a012:	f000 80d2 	beq.w	800a1ba <_printf_i+0x1c6>
 800a016:	2f58      	cmp	r7, #88	@ 0x58
 800a018:	f000 80b9 	beq.w	800a18e <_printf_i+0x19a>
 800a01c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a024:	e03a      	b.n	800a09c <_printf_i+0xa8>
 800a026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a02a:	2b15      	cmp	r3, #21
 800a02c:	d8f6      	bhi.n	800a01c <_printf_i+0x28>
 800a02e:	a101      	add	r1, pc, #4	@ (adr r1, 800a034 <_printf_i+0x40>)
 800a030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a034:	0800a08d 	.word	0x0800a08d
 800a038:	0800a0a1 	.word	0x0800a0a1
 800a03c:	0800a01d 	.word	0x0800a01d
 800a040:	0800a01d 	.word	0x0800a01d
 800a044:	0800a01d 	.word	0x0800a01d
 800a048:	0800a01d 	.word	0x0800a01d
 800a04c:	0800a0a1 	.word	0x0800a0a1
 800a050:	0800a01d 	.word	0x0800a01d
 800a054:	0800a01d 	.word	0x0800a01d
 800a058:	0800a01d 	.word	0x0800a01d
 800a05c:	0800a01d 	.word	0x0800a01d
 800a060:	0800a1a1 	.word	0x0800a1a1
 800a064:	0800a0cb 	.word	0x0800a0cb
 800a068:	0800a15b 	.word	0x0800a15b
 800a06c:	0800a01d 	.word	0x0800a01d
 800a070:	0800a01d 	.word	0x0800a01d
 800a074:	0800a1c3 	.word	0x0800a1c3
 800a078:	0800a01d 	.word	0x0800a01d
 800a07c:	0800a0cb 	.word	0x0800a0cb
 800a080:	0800a01d 	.word	0x0800a01d
 800a084:	0800a01d 	.word	0x0800a01d
 800a088:	0800a163 	.word	0x0800a163
 800a08c:	6833      	ldr	r3, [r6, #0]
 800a08e:	1d1a      	adds	r2, r3, #4
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6032      	str	r2, [r6, #0]
 800a094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a09c:	2301      	movs	r3, #1
 800a09e:	e09d      	b.n	800a1dc <_printf_i+0x1e8>
 800a0a0:	6833      	ldr	r3, [r6, #0]
 800a0a2:	6820      	ldr	r0, [r4, #0]
 800a0a4:	1d19      	adds	r1, r3, #4
 800a0a6:	6031      	str	r1, [r6, #0]
 800a0a8:	0606      	lsls	r6, r0, #24
 800a0aa:	d501      	bpl.n	800a0b0 <_printf_i+0xbc>
 800a0ac:	681d      	ldr	r5, [r3, #0]
 800a0ae:	e003      	b.n	800a0b8 <_printf_i+0xc4>
 800a0b0:	0645      	lsls	r5, r0, #25
 800a0b2:	d5fb      	bpl.n	800a0ac <_printf_i+0xb8>
 800a0b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	da03      	bge.n	800a0c4 <_printf_i+0xd0>
 800a0bc:	232d      	movs	r3, #45	@ 0x2d
 800a0be:	426d      	negs	r5, r5
 800a0c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0c4:	4859      	ldr	r0, [pc, #356]	@ (800a22c <_printf_i+0x238>)
 800a0c6:	230a      	movs	r3, #10
 800a0c8:	e011      	b.n	800a0ee <_printf_i+0xfa>
 800a0ca:	6821      	ldr	r1, [r4, #0]
 800a0cc:	6833      	ldr	r3, [r6, #0]
 800a0ce:	0608      	lsls	r0, r1, #24
 800a0d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0d4:	d402      	bmi.n	800a0dc <_printf_i+0xe8>
 800a0d6:	0649      	lsls	r1, r1, #25
 800a0d8:	bf48      	it	mi
 800a0da:	b2ad      	uxthmi	r5, r5
 800a0dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0de:	4853      	ldr	r0, [pc, #332]	@ (800a22c <_printf_i+0x238>)
 800a0e0:	6033      	str	r3, [r6, #0]
 800a0e2:	bf14      	ite	ne
 800a0e4:	230a      	movne	r3, #10
 800a0e6:	2308      	moveq	r3, #8
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0ee:	6866      	ldr	r6, [r4, #4]
 800a0f0:	60a6      	str	r6, [r4, #8]
 800a0f2:	2e00      	cmp	r6, #0
 800a0f4:	bfa2      	ittt	ge
 800a0f6:	6821      	ldrge	r1, [r4, #0]
 800a0f8:	f021 0104 	bicge.w	r1, r1, #4
 800a0fc:	6021      	strge	r1, [r4, #0]
 800a0fe:	b90d      	cbnz	r5, 800a104 <_printf_i+0x110>
 800a100:	2e00      	cmp	r6, #0
 800a102:	d04b      	beq.n	800a19c <_printf_i+0x1a8>
 800a104:	4616      	mov	r6, r2
 800a106:	fbb5 f1f3 	udiv	r1, r5, r3
 800a10a:	fb03 5711 	mls	r7, r3, r1, r5
 800a10e:	5dc7      	ldrb	r7, [r0, r7]
 800a110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a114:	462f      	mov	r7, r5
 800a116:	42bb      	cmp	r3, r7
 800a118:	460d      	mov	r5, r1
 800a11a:	d9f4      	bls.n	800a106 <_printf_i+0x112>
 800a11c:	2b08      	cmp	r3, #8
 800a11e:	d10b      	bne.n	800a138 <_printf_i+0x144>
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	07df      	lsls	r7, r3, #31
 800a124:	d508      	bpl.n	800a138 <_printf_i+0x144>
 800a126:	6923      	ldr	r3, [r4, #16]
 800a128:	6861      	ldr	r1, [r4, #4]
 800a12a:	4299      	cmp	r1, r3
 800a12c:	bfde      	ittt	le
 800a12e:	2330      	movle	r3, #48	@ 0x30
 800a130:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a134:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a138:	1b92      	subs	r2, r2, r6
 800a13a:	6122      	str	r2, [r4, #16]
 800a13c:	f8cd a000 	str.w	sl, [sp]
 800a140:	464b      	mov	r3, r9
 800a142:	aa03      	add	r2, sp, #12
 800a144:	4621      	mov	r1, r4
 800a146:	4640      	mov	r0, r8
 800a148:	f7ff fee6 	bl	8009f18 <_printf_common>
 800a14c:	3001      	adds	r0, #1
 800a14e:	d14a      	bne.n	800a1e6 <_printf_i+0x1f2>
 800a150:	f04f 30ff 	mov.w	r0, #4294967295
 800a154:	b004      	add	sp, #16
 800a156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	f043 0320 	orr.w	r3, r3, #32
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	4833      	ldr	r0, [pc, #204]	@ (800a230 <_printf_i+0x23c>)
 800a164:	2778      	movs	r7, #120	@ 0x78
 800a166:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	6831      	ldr	r1, [r6, #0]
 800a16e:	061f      	lsls	r7, r3, #24
 800a170:	f851 5b04 	ldr.w	r5, [r1], #4
 800a174:	d402      	bmi.n	800a17c <_printf_i+0x188>
 800a176:	065f      	lsls	r7, r3, #25
 800a178:	bf48      	it	mi
 800a17a:	b2ad      	uxthmi	r5, r5
 800a17c:	6031      	str	r1, [r6, #0]
 800a17e:	07d9      	lsls	r1, r3, #31
 800a180:	bf44      	itt	mi
 800a182:	f043 0320 	orrmi.w	r3, r3, #32
 800a186:	6023      	strmi	r3, [r4, #0]
 800a188:	b11d      	cbz	r5, 800a192 <_printf_i+0x19e>
 800a18a:	2310      	movs	r3, #16
 800a18c:	e7ac      	b.n	800a0e8 <_printf_i+0xf4>
 800a18e:	4827      	ldr	r0, [pc, #156]	@ (800a22c <_printf_i+0x238>)
 800a190:	e7e9      	b.n	800a166 <_printf_i+0x172>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	f023 0320 	bic.w	r3, r3, #32
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	e7f6      	b.n	800a18a <_printf_i+0x196>
 800a19c:	4616      	mov	r6, r2
 800a19e:	e7bd      	b.n	800a11c <_printf_i+0x128>
 800a1a0:	6833      	ldr	r3, [r6, #0]
 800a1a2:	6825      	ldr	r5, [r4, #0]
 800a1a4:	6961      	ldr	r1, [r4, #20]
 800a1a6:	1d18      	adds	r0, r3, #4
 800a1a8:	6030      	str	r0, [r6, #0]
 800a1aa:	062e      	lsls	r6, r5, #24
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	d501      	bpl.n	800a1b4 <_printf_i+0x1c0>
 800a1b0:	6019      	str	r1, [r3, #0]
 800a1b2:	e002      	b.n	800a1ba <_printf_i+0x1c6>
 800a1b4:	0668      	lsls	r0, r5, #25
 800a1b6:	d5fb      	bpl.n	800a1b0 <_printf_i+0x1bc>
 800a1b8:	8019      	strh	r1, [r3, #0]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	6123      	str	r3, [r4, #16]
 800a1be:	4616      	mov	r6, r2
 800a1c0:	e7bc      	b.n	800a13c <_printf_i+0x148>
 800a1c2:	6833      	ldr	r3, [r6, #0]
 800a1c4:	1d1a      	adds	r2, r3, #4
 800a1c6:	6032      	str	r2, [r6, #0]
 800a1c8:	681e      	ldr	r6, [r3, #0]
 800a1ca:	6862      	ldr	r2, [r4, #4]
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f7f5 fffe 	bl	80001d0 <memchr>
 800a1d4:	b108      	cbz	r0, 800a1da <_printf_i+0x1e6>
 800a1d6:	1b80      	subs	r0, r0, r6
 800a1d8:	6060      	str	r0, [r4, #4]
 800a1da:	6863      	ldr	r3, [r4, #4]
 800a1dc:	6123      	str	r3, [r4, #16]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1e4:	e7aa      	b.n	800a13c <_printf_i+0x148>
 800a1e6:	6923      	ldr	r3, [r4, #16]
 800a1e8:	4632      	mov	r2, r6
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	4640      	mov	r0, r8
 800a1ee:	47d0      	blx	sl
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	d0ad      	beq.n	800a150 <_printf_i+0x15c>
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	079b      	lsls	r3, r3, #30
 800a1f8:	d413      	bmi.n	800a222 <_printf_i+0x22e>
 800a1fa:	68e0      	ldr	r0, [r4, #12]
 800a1fc:	9b03      	ldr	r3, [sp, #12]
 800a1fe:	4298      	cmp	r0, r3
 800a200:	bfb8      	it	lt
 800a202:	4618      	movlt	r0, r3
 800a204:	e7a6      	b.n	800a154 <_printf_i+0x160>
 800a206:	2301      	movs	r3, #1
 800a208:	4632      	mov	r2, r6
 800a20a:	4649      	mov	r1, r9
 800a20c:	4640      	mov	r0, r8
 800a20e:	47d0      	blx	sl
 800a210:	3001      	adds	r0, #1
 800a212:	d09d      	beq.n	800a150 <_printf_i+0x15c>
 800a214:	3501      	adds	r5, #1
 800a216:	68e3      	ldr	r3, [r4, #12]
 800a218:	9903      	ldr	r1, [sp, #12]
 800a21a:	1a5b      	subs	r3, r3, r1
 800a21c:	42ab      	cmp	r3, r5
 800a21e:	dcf2      	bgt.n	800a206 <_printf_i+0x212>
 800a220:	e7eb      	b.n	800a1fa <_printf_i+0x206>
 800a222:	2500      	movs	r5, #0
 800a224:	f104 0619 	add.w	r6, r4, #25
 800a228:	e7f5      	b.n	800a216 <_printf_i+0x222>
 800a22a:	bf00      	nop
 800a22c:	0800c6d2 	.word	0x0800c6d2
 800a230:	0800c6e3 	.word	0x0800c6e3

0800a234 <std>:
 800a234:	2300      	movs	r3, #0
 800a236:	b510      	push	{r4, lr}
 800a238:	4604      	mov	r4, r0
 800a23a:	e9c0 3300 	strd	r3, r3, [r0]
 800a23e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a242:	6083      	str	r3, [r0, #8]
 800a244:	8181      	strh	r1, [r0, #12]
 800a246:	6643      	str	r3, [r0, #100]	@ 0x64
 800a248:	81c2      	strh	r2, [r0, #14]
 800a24a:	6183      	str	r3, [r0, #24]
 800a24c:	4619      	mov	r1, r3
 800a24e:	2208      	movs	r2, #8
 800a250:	305c      	adds	r0, #92	@ 0x5c
 800a252:	f000 f914 	bl	800a47e <memset>
 800a256:	4b0d      	ldr	r3, [pc, #52]	@ (800a28c <std+0x58>)
 800a258:	6263      	str	r3, [r4, #36]	@ 0x24
 800a25a:	4b0d      	ldr	r3, [pc, #52]	@ (800a290 <std+0x5c>)
 800a25c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a25e:	4b0d      	ldr	r3, [pc, #52]	@ (800a294 <std+0x60>)
 800a260:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a262:	4b0d      	ldr	r3, [pc, #52]	@ (800a298 <std+0x64>)
 800a264:	6323      	str	r3, [r4, #48]	@ 0x30
 800a266:	4b0d      	ldr	r3, [pc, #52]	@ (800a29c <std+0x68>)
 800a268:	6224      	str	r4, [r4, #32]
 800a26a:	429c      	cmp	r4, r3
 800a26c:	d006      	beq.n	800a27c <std+0x48>
 800a26e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a272:	4294      	cmp	r4, r2
 800a274:	d002      	beq.n	800a27c <std+0x48>
 800a276:	33d0      	adds	r3, #208	@ 0xd0
 800a278:	429c      	cmp	r4, r3
 800a27a:	d105      	bne.n	800a288 <std+0x54>
 800a27c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a284:	f000 b978 	b.w	800a578 <__retarget_lock_init_recursive>
 800a288:	bd10      	pop	{r4, pc}
 800a28a:	bf00      	nop
 800a28c:	0800a3f9 	.word	0x0800a3f9
 800a290:	0800a41b 	.word	0x0800a41b
 800a294:	0800a453 	.word	0x0800a453
 800a298:	0800a477 	.word	0x0800a477
 800a29c:	200020b4 	.word	0x200020b4

0800a2a0 <stdio_exit_handler>:
 800a2a0:	4a02      	ldr	r2, [pc, #8]	@ (800a2ac <stdio_exit_handler+0xc>)
 800a2a2:	4903      	ldr	r1, [pc, #12]	@ (800a2b0 <stdio_exit_handler+0x10>)
 800a2a4:	4803      	ldr	r0, [pc, #12]	@ (800a2b4 <stdio_exit_handler+0x14>)
 800a2a6:	f000 b869 	b.w	800a37c <_fwalk_sglue>
 800a2aa:	bf00      	nop
 800a2ac:	200000fc 	.word	0x200000fc
 800a2b0:	0800bed5 	.word	0x0800bed5
 800a2b4:	2000010c 	.word	0x2000010c

0800a2b8 <cleanup_stdio>:
 800a2b8:	6841      	ldr	r1, [r0, #4]
 800a2ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a2ec <cleanup_stdio+0x34>)
 800a2bc:	4299      	cmp	r1, r3
 800a2be:	b510      	push	{r4, lr}
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	d001      	beq.n	800a2c8 <cleanup_stdio+0x10>
 800a2c4:	f001 fe06 	bl	800bed4 <_fflush_r>
 800a2c8:	68a1      	ldr	r1, [r4, #8]
 800a2ca:	4b09      	ldr	r3, [pc, #36]	@ (800a2f0 <cleanup_stdio+0x38>)
 800a2cc:	4299      	cmp	r1, r3
 800a2ce:	d002      	beq.n	800a2d6 <cleanup_stdio+0x1e>
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f001 fdff 	bl	800bed4 <_fflush_r>
 800a2d6:	68e1      	ldr	r1, [r4, #12]
 800a2d8:	4b06      	ldr	r3, [pc, #24]	@ (800a2f4 <cleanup_stdio+0x3c>)
 800a2da:	4299      	cmp	r1, r3
 800a2dc:	d004      	beq.n	800a2e8 <cleanup_stdio+0x30>
 800a2de:	4620      	mov	r0, r4
 800a2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e4:	f001 bdf6 	b.w	800bed4 <_fflush_r>
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	bf00      	nop
 800a2ec:	200020b4 	.word	0x200020b4
 800a2f0:	2000211c 	.word	0x2000211c
 800a2f4:	20002184 	.word	0x20002184

0800a2f8 <global_stdio_init.part.0>:
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a328 <global_stdio_init.part.0+0x30>)
 800a2fc:	4c0b      	ldr	r4, [pc, #44]	@ (800a32c <global_stdio_init.part.0+0x34>)
 800a2fe:	4a0c      	ldr	r2, [pc, #48]	@ (800a330 <global_stdio_init.part.0+0x38>)
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	4620      	mov	r0, r4
 800a304:	2200      	movs	r2, #0
 800a306:	2104      	movs	r1, #4
 800a308:	f7ff ff94 	bl	800a234 <std>
 800a30c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a310:	2201      	movs	r2, #1
 800a312:	2109      	movs	r1, #9
 800a314:	f7ff ff8e 	bl	800a234 <std>
 800a318:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a31c:	2202      	movs	r2, #2
 800a31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a322:	2112      	movs	r1, #18
 800a324:	f7ff bf86 	b.w	800a234 <std>
 800a328:	200021ec 	.word	0x200021ec
 800a32c:	200020b4 	.word	0x200020b4
 800a330:	0800a2a1 	.word	0x0800a2a1

0800a334 <__sfp_lock_acquire>:
 800a334:	4801      	ldr	r0, [pc, #4]	@ (800a33c <__sfp_lock_acquire+0x8>)
 800a336:	f000 b920 	b.w	800a57a <__retarget_lock_acquire_recursive>
 800a33a:	bf00      	nop
 800a33c:	200021f5 	.word	0x200021f5

0800a340 <__sfp_lock_release>:
 800a340:	4801      	ldr	r0, [pc, #4]	@ (800a348 <__sfp_lock_release+0x8>)
 800a342:	f000 b91b 	b.w	800a57c <__retarget_lock_release_recursive>
 800a346:	bf00      	nop
 800a348:	200021f5 	.word	0x200021f5

0800a34c <__sinit>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	4604      	mov	r4, r0
 800a350:	f7ff fff0 	bl	800a334 <__sfp_lock_acquire>
 800a354:	6a23      	ldr	r3, [r4, #32]
 800a356:	b11b      	cbz	r3, 800a360 <__sinit+0x14>
 800a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35c:	f7ff bff0 	b.w	800a340 <__sfp_lock_release>
 800a360:	4b04      	ldr	r3, [pc, #16]	@ (800a374 <__sinit+0x28>)
 800a362:	6223      	str	r3, [r4, #32]
 800a364:	4b04      	ldr	r3, [pc, #16]	@ (800a378 <__sinit+0x2c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1f5      	bne.n	800a358 <__sinit+0xc>
 800a36c:	f7ff ffc4 	bl	800a2f8 <global_stdio_init.part.0>
 800a370:	e7f2      	b.n	800a358 <__sinit+0xc>
 800a372:	bf00      	nop
 800a374:	0800a2b9 	.word	0x0800a2b9
 800a378:	200021ec 	.word	0x200021ec

0800a37c <_fwalk_sglue>:
 800a37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a380:	4607      	mov	r7, r0
 800a382:	4688      	mov	r8, r1
 800a384:	4614      	mov	r4, r2
 800a386:	2600      	movs	r6, #0
 800a388:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a38c:	f1b9 0901 	subs.w	r9, r9, #1
 800a390:	d505      	bpl.n	800a39e <_fwalk_sglue+0x22>
 800a392:	6824      	ldr	r4, [r4, #0]
 800a394:	2c00      	cmp	r4, #0
 800a396:	d1f7      	bne.n	800a388 <_fwalk_sglue+0xc>
 800a398:	4630      	mov	r0, r6
 800a39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a39e:	89ab      	ldrh	r3, [r5, #12]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d907      	bls.n	800a3b4 <_fwalk_sglue+0x38>
 800a3a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	d003      	beq.n	800a3b4 <_fwalk_sglue+0x38>
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	47c0      	blx	r8
 800a3b2:	4306      	orrs	r6, r0
 800a3b4:	3568      	adds	r5, #104	@ 0x68
 800a3b6:	e7e9      	b.n	800a38c <_fwalk_sglue+0x10>

0800a3b8 <siprintf>:
 800a3b8:	b40e      	push	{r1, r2, r3}
 800a3ba:	b500      	push	{lr}
 800a3bc:	b09c      	sub	sp, #112	@ 0x70
 800a3be:	ab1d      	add	r3, sp, #116	@ 0x74
 800a3c0:	9002      	str	r0, [sp, #8]
 800a3c2:	9006      	str	r0, [sp, #24]
 800a3c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3c8:	4809      	ldr	r0, [pc, #36]	@ (800a3f0 <siprintf+0x38>)
 800a3ca:	9107      	str	r1, [sp, #28]
 800a3cc:	9104      	str	r1, [sp, #16]
 800a3ce:	4909      	ldr	r1, [pc, #36]	@ (800a3f4 <siprintf+0x3c>)
 800a3d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3d4:	9105      	str	r1, [sp, #20]
 800a3d6:	6800      	ldr	r0, [r0, #0]
 800a3d8:	9301      	str	r3, [sp, #4]
 800a3da:	a902      	add	r1, sp, #8
 800a3dc:	f001 fbfa 	bl	800bbd4 <_svfiprintf_r>
 800a3e0:	9b02      	ldr	r3, [sp, #8]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	b01c      	add	sp, #112	@ 0x70
 800a3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3ec:	b003      	add	sp, #12
 800a3ee:	4770      	bx	lr
 800a3f0:	20000108 	.word	0x20000108
 800a3f4:	ffff0208 	.word	0xffff0208

0800a3f8 <__sread>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a400:	f000 f86c 	bl	800a4dc <_read_r>
 800a404:	2800      	cmp	r0, #0
 800a406:	bfab      	itete	ge
 800a408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a40a:	89a3      	ldrhlt	r3, [r4, #12]
 800a40c:	181b      	addge	r3, r3, r0
 800a40e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a412:	bfac      	ite	ge
 800a414:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a416:	81a3      	strhlt	r3, [r4, #12]
 800a418:	bd10      	pop	{r4, pc}

0800a41a <__swrite>:
 800a41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a41e:	461f      	mov	r7, r3
 800a420:	898b      	ldrh	r3, [r1, #12]
 800a422:	05db      	lsls	r3, r3, #23
 800a424:	4605      	mov	r5, r0
 800a426:	460c      	mov	r4, r1
 800a428:	4616      	mov	r6, r2
 800a42a:	d505      	bpl.n	800a438 <__swrite+0x1e>
 800a42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a430:	2302      	movs	r3, #2
 800a432:	2200      	movs	r2, #0
 800a434:	f000 f840 	bl	800a4b8 <_lseek_r>
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a43e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	4632      	mov	r2, r6
 800a446:	463b      	mov	r3, r7
 800a448:	4628      	mov	r0, r5
 800a44a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a44e:	f000 b857 	b.w	800a500 <_write_r>

0800a452 <__sseek>:
 800a452:	b510      	push	{r4, lr}
 800a454:	460c      	mov	r4, r1
 800a456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a45a:	f000 f82d 	bl	800a4b8 <_lseek_r>
 800a45e:	1c43      	adds	r3, r0, #1
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	bf15      	itete	ne
 800a464:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a466:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a46a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a46e:	81a3      	strheq	r3, [r4, #12]
 800a470:	bf18      	it	ne
 800a472:	81a3      	strhne	r3, [r4, #12]
 800a474:	bd10      	pop	{r4, pc}

0800a476 <__sclose>:
 800a476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47a:	f000 b80d 	b.w	800a498 <_close_r>

0800a47e <memset>:
 800a47e:	4402      	add	r2, r0
 800a480:	4603      	mov	r3, r0
 800a482:	4293      	cmp	r3, r2
 800a484:	d100      	bne.n	800a488 <memset+0xa>
 800a486:	4770      	bx	lr
 800a488:	f803 1b01 	strb.w	r1, [r3], #1
 800a48c:	e7f9      	b.n	800a482 <memset+0x4>
	...

0800a490 <_localeconv_r>:
 800a490:	4800      	ldr	r0, [pc, #0]	@ (800a494 <_localeconv_r+0x4>)
 800a492:	4770      	bx	lr
 800a494:	20000248 	.word	0x20000248

0800a498 <_close_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4d06      	ldr	r5, [pc, #24]	@ (800a4b4 <_close_r+0x1c>)
 800a49c:	2300      	movs	r3, #0
 800a49e:	4604      	mov	r4, r0
 800a4a0:	4608      	mov	r0, r1
 800a4a2:	602b      	str	r3, [r5, #0]
 800a4a4:	f7f7 fbe8 	bl	8001c78 <_close>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_close_r+0x1a>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_close_r+0x1a>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	200021f0 	.word	0x200021f0

0800a4b8 <_lseek_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d07      	ldr	r5, [pc, #28]	@ (800a4d8 <_lseek_r+0x20>)
 800a4bc:	4604      	mov	r4, r0
 800a4be:	4608      	mov	r0, r1
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	602a      	str	r2, [r5, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f7f7 fbfd 	bl	8001cc6 <_lseek>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_lseek_r+0x1e>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_lseek_r+0x1e>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	200021f0 	.word	0x200021f0

0800a4dc <_read_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4d07      	ldr	r5, [pc, #28]	@ (800a4fc <_read_r+0x20>)
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	602a      	str	r2, [r5, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f7f7 fb8b 	bl	8001c06 <_read>
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	d102      	bne.n	800a4fa <_read_r+0x1e>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	b103      	cbz	r3, 800a4fa <_read_r+0x1e>
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
 800a4fc:	200021f0 	.word	0x200021f0

0800a500 <_write_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4d07      	ldr	r5, [pc, #28]	@ (800a520 <_write_r+0x20>)
 800a504:	4604      	mov	r4, r0
 800a506:	4608      	mov	r0, r1
 800a508:	4611      	mov	r1, r2
 800a50a:	2200      	movs	r2, #0
 800a50c:	602a      	str	r2, [r5, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	f7f7 fb96 	bl	8001c40 <_write>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d102      	bne.n	800a51e <_write_r+0x1e>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	b103      	cbz	r3, 800a51e <_write_r+0x1e>
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	200021f0 	.word	0x200021f0

0800a524 <__errno>:
 800a524:	4b01      	ldr	r3, [pc, #4]	@ (800a52c <__errno+0x8>)
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	20000108 	.word	0x20000108

0800a530 <__libc_init_array>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	4d0d      	ldr	r5, [pc, #52]	@ (800a568 <__libc_init_array+0x38>)
 800a534:	4c0d      	ldr	r4, [pc, #52]	@ (800a56c <__libc_init_array+0x3c>)
 800a536:	1b64      	subs	r4, r4, r5
 800a538:	10a4      	asrs	r4, r4, #2
 800a53a:	2600      	movs	r6, #0
 800a53c:	42a6      	cmp	r6, r4
 800a53e:	d109      	bne.n	800a554 <__libc_init_array+0x24>
 800a540:	4d0b      	ldr	r5, [pc, #44]	@ (800a570 <__libc_init_array+0x40>)
 800a542:	4c0c      	ldr	r4, [pc, #48]	@ (800a574 <__libc_init_array+0x44>)
 800a544:	f002 f864 	bl	800c610 <_init>
 800a548:	1b64      	subs	r4, r4, r5
 800a54a:	10a4      	asrs	r4, r4, #2
 800a54c:	2600      	movs	r6, #0
 800a54e:	42a6      	cmp	r6, r4
 800a550:	d105      	bne.n	800a55e <__libc_init_array+0x2e>
 800a552:	bd70      	pop	{r4, r5, r6, pc}
 800a554:	f855 3b04 	ldr.w	r3, [r5], #4
 800a558:	4798      	blx	r3
 800a55a:	3601      	adds	r6, #1
 800a55c:	e7ee      	b.n	800a53c <__libc_init_array+0xc>
 800a55e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a562:	4798      	blx	r3
 800a564:	3601      	adds	r6, #1
 800a566:	e7f2      	b.n	800a54e <__libc_init_array+0x1e>
 800a568:	0800ca38 	.word	0x0800ca38
 800a56c:	0800ca38 	.word	0x0800ca38
 800a570:	0800ca38 	.word	0x0800ca38
 800a574:	0800ca3c 	.word	0x0800ca3c

0800a578 <__retarget_lock_init_recursive>:
 800a578:	4770      	bx	lr

0800a57a <__retarget_lock_acquire_recursive>:
 800a57a:	4770      	bx	lr

0800a57c <__retarget_lock_release_recursive>:
 800a57c:	4770      	bx	lr

0800a57e <quorem>:
 800a57e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a582:	6903      	ldr	r3, [r0, #16]
 800a584:	690c      	ldr	r4, [r1, #16]
 800a586:	42a3      	cmp	r3, r4
 800a588:	4607      	mov	r7, r0
 800a58a:	db7e      	blt.n	800a68a <quorem+0x10c>
 800a58c:	3c01      	subs	r4, #1
 800a58e:	f101 0814 	add.w	r8, r1, #20
 800a592:	00a3      	lsls	r3, r4, #2
 800a594:	f100 0514 	add.w	r5, r0, #20
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a59e:	9301      	str	r3, [sp, #4]
 800a5a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5b4:	d32e      	bcc.n	800a614 <quorem+0x96>
 800a5b6:	f04f 0a00 	mov.w	sl, #0
 800a5ba:	46c4      	mov	ip, r8
 800a5bc:	46ae      	mov	lr, r5
 800a5be:	46d3      	mov	fp, sl
 800a5c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5c4:	b298      	uxth	r0, r3
 800a5c6:	fb06 a000 	mla	r0, r6, r0, sl
 800a5ca:	0c02      	lsrs	r2, r0, #16
 800a5cc:	0c1b      	lsrs	r3, r3, #16
 800a5ce:	fb06 2303 	mla	r3, r6, r3, r2
 800a5d2:	f8de 2000 	ldr.w	r2, [lr]
 800a5d6:	b280      	uxth	r0, r0
 800a5d8:	b292      	uxth	r2, r2
 800a5da:	1a12      	subs	r2, r2, r0
 800a5dc:	445a      	add	r2, fp
 800a5de:	f8de 0000 	ldr.w	r0, [lr]
 800a5e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5f0:	b292      	uxth	r2, r2
 800a5f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5f6:	45e1      	cmp	r9, ip
 800a5f8:	f84e 2b04 	str.w	r2, [lr], #4
 800a5fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a600:	d2de      	bcs.n	800a5c0 <quorem+0x42>
 800a602:	9b00      	ldr	r3, [sp, #0]
 800a604:	58eb      	ldr	r3, [r5, r3]
 800a606:	b92b      	cbnz	r3, 800a614 <quorem+0x96>
 800a608:	9b01      	ldr	r3, [sp, #4]
 800a60a:	3b04      	subs	r3, #4
 800a60c:	429d      	cmp	r5, r3
 800a60e:	461a      	mov	r2, r3
 800a610:	d32f      	bcc.n	800a672 <quorem+0xf4>
 800a612:	613c      	str	r4, [r7, #16]
 800a614:	4638      	mov	r0, r7
 800a616:	f001 f979 	bl	800b90c <__mcmp>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	db25      	blt.n	800a66a <quorem+0xec>
 800a61e:	4629      	mov	r1, r5
 800a620:	2000      	movs	r0, #0
 800a622:	f858 2b04 	ldr.w	r2, [r8], #4
 800a626:	f8d1 c000 	ldr.w	ip, [r1]
 800a62a:	fa1f fe82 	uxth.w	lr, r2
 800a62e:	fa1f f38c 	uxth.w	r3, ip
 800a632:	eba3 030e 	sub.w	r3, r3, lr
 800a636:	4403      	add	r3, r0
 800a638:	0c12      	lsrs	r2, r2, #16
 800a63a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a63e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a642:	b29b      	uxth	r3, r3
 800a644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a648:	45c1      	cmp	r9, r8
 800a64a:	f841 3b04 	str.w	r3, [r1], #4
 800a64e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a652:	d2e6      	bcs.n	800a622 <quorem+0xa4>
 800a654:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a658:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a65c:	b922      	cbnz	r2, 800a668 <quorem+0xea>
 800a65e:	3b04      	subs	r3, #4
 800a660:	429d      	cmp	r5, r3
 800a662:	461a      	mov	r2, r3
 800a664:	d30b      	bcc.n	800a67e <quorem+0x100>
 800a666:	613c      	str	r4, [r7, #16]
 800a668:	3601      	adds	r6, #1
 800a66a:	4630      	mov	r0, r6
 800a66c:	b003      	add	sp, #12
 800a66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a672:	6812      	ldr	r2, [r2, #0]
 800a674:	3b04      	subs	r3, #4
 800a676:	2a00      	cmp	r2, #0
 800a678:	d1cb      	bne.n	800a612 <quorem+0x94>
 800a67a:	3c01      	subs	r4, #1
 800a67c:	e7c6      	b.n	800a60c <quorem+0x8e>
 800a67e:	6812      	ldr	r2, [r2, #0]
 800a680:	3b04      	subs	r3, #4
 800a682:	2a00      	cmp	r2, #0
 800a684:	d1ef      	bne.n	800a666 <quorem+0xe8>
 800a686:	3c01      	subs	r4, #1
 800a688:	e7ea      	b.n	800a660 <quorem+0xe2>
 800a68a:	2000      	movs	r0, #0
 800a68c:	e7ee      	b.n	800a66c <quorem+0xee>
	...

0800a690 <_dtoa_r>:
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	69c7      	ldr	r7, [r0, #28]
 800a696:	b099      	sub	sp, #100	@ 0x64
 800a698:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a69c:	ec55 4b10 	vmov	r4, r5, d0
 800a6a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a6a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6a4:	4683      	mov	fp, r0
 800a6a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6aa:	b97f      	cbnz	r7, 800a6cc <_dtoa_r+0x3c>
 800a6ac:	2010      	movs	r0, #16
 800a6ae:	f000 fdfd 	bl	800b2ac <malloc>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a6b8:	b920      	cbnz	r0, 800a6c4 <_dtoa_r+0x34>
 800a6ba:	4ba7      	ldr	r3, [pc, #668]	@ (800a958 <_dtoa_r+0x2c8>)
 800a6bc:	21ef      	movs	r1, #239	@ 0xef
 800a6be:	48a7      	ldr	r0, [pc, #668]	@ (800a95c <_dtoa_r+0x2cc>)
 800a6c0:	f001 fc68 	bl	800bf94 <__assert_func>
 800a6c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6c8:	6007      	str	r7, [r0, #0]
 800a6ca:	60c7      	str	r7, [r0, #12]
 800a6cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6d0:	6819      	ldr	r1, [r3, #0]
 800a6d2:	b159      	cbz	r1, 800a6ec <_dtoa_r+0x5c>
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	604a      	str	r2, [r1, #4]
 800a6d8:	2301      	movs	r3, #1
 800a6da:	4093      	lsls	r3, r2
 800a6dc:	608b      	str	r3, [r1, #8]
 800a6de:	4658      	mov	r0, fp
 800a6e0:	f000 feda 	bl	800b498 <_Bfree>
 800a6e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	1e2b      	subs	r3, r5, #0
 800a6ee:	bfb9      	ittee	lt
 800a6f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6f4:	9303      	strlt	r3, [sp, #12]
 800a6f6:	2300      	movge	r3, #0
 800a6f8:	6033      	strge	r3, [r6, #0]
 800a6fa:	9f03      	ldr	r7, [sp, #12]
 800a6fc:	4b98      	ldr	r3, [pc, #608]	@ (800a960 <_dtoa_r+0x2d0>)
 800a6fe:	bfbc      	itt	lt
 800a700:	2201      	movlt	r2, #1
 800a702:	6032      	strlt	r2, [r6, #0]
 800a704:	43bb      	bics	r3, r7
 800a706:	d112      	bne.n	800a72e <_dtoa_r+0x9e>
 800a708:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a70a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a714:	4323      	orrs	r3, r4
 800a716:	f000 854d 	beq.w	800b1b4 <_dtoa_r+0xb24>
 800a71a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a71c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a974 <_dtoa_r+0x2e4>
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 854f 	beq.w	800b1c4 <_dtoa_r+0xb34>
 800a726:	f10a 0303 	add.w	r3, sl, #3
 800a72a:	f000 bd49 	b.w	800b1c0 <_dtoa_r+0xb30>
 800a72e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a732:	2200      	movs	r2, #0
 800a734:	ec51 0b17 	vmov	r0, r1, d7
 800a738:	2300      	movs	r3, #0
 800a73a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a73e:	f7f6 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a742:	4680      	mov	r8, r0
 800a744:	b158      	cbz	r0, 800a75e <_dtoa_r+0xce>
 800a746:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a748:	2301      	movs	r3, #1
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a74e:	b113      	cbz	r3, 800a756 <_dtoa_r+0xc6>
 800a750:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a752:	4b84      	ldr	r3, [pc, #528]	@ (800a964 <_dtoa_r+0x2d4>)
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a978 <_dtoa_r+0x2e8>
 800a75a:	f000 bd33 	b.w	800b1c4 <_dtoa_r+0xb34>
 800a75e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a762:	aa16      	add	r2, sp, #88	@ 0x58
 800a764:	a917      	add	r1, sp, #92	@ 0x5c
 800a766:	4658      	mov	r0, fp
 800a768:	f001 f980 	bl	800ba6c <__d2b>
 800a76c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a770:	4681      	mov	r9, r0
 800a772:	2e00      	cmp	r6, #0
 800a774:	d077      	beq.n	800a866 <_dtoa_r+0x1d6>
 800a776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a778:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a784:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a788:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a78c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a790:	4619      	mov	r1, r3
 800a792:	2200      	movs	r2, #0
 800a794:	4b74      	ldr	r3, [pc, #464]	@ (800a968 <_dtoa_r+0x2d8>)
 800a796:	f7f5 fd77 	bl	8000288 <__aeabi_dsub>
 800a79a:	a369      	add	r3, pc, #420	@ (adr r3, 800a940 <_dtoa_r+0x2b0>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7f5 ff2a 	bl	80005f8 <__aeabi_dmul>
 800a7a4:	a368      	add	r3, pc, #416	@ (adr r3, 800a948 <_dtoa_r+0x2b8>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f5 fd6f 	bl	800028c <__adddf3>
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	460d      	mov	r5, r1
 800a7b4:	f7f5 feb6 	bl	8000524 <__aeabi_i2d>
 800a7b8:	a365      	add	r3, pc, #404	@ (adr r3, 800a950 <_dtoa_r+0x2c0>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f7f5 ff1b 	bl	80005f8 <__aeabi_dmul>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7f5 fd5f 	bl	800028c <__adddf3>
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	f7f6 f9c1 	bl	8000b58 <__aeabi_d2iz>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4607      	mov	r7, r0
 800a7da:	2300      	movs	r3, #0
 800a7dc:	4620      	mov	r0, r4
 800a7de:	4629      	mov	r1, r5
 800a7e0:	f7f6 f97c 	bl	8000adc <__aeabi_dcmplt>
 800a7e4:	b140      	cbz	r0, 800a7f8 <_dtoa_r+0x168>
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	f7f5 fe9c 	bl	8000524 <__aeabi_i2d>
 800a7ec:	4622      	mov	r2, r4
 800a7ee:	462b      	mov	r3, r5
 800a7f0:	f7f6 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7f4:	b900      	cbnz	r0, 800a7f8 <_dtoa_r+0x168>
 800a7f6:	3f01      	subs	r7, #1
 800a7f8:	2f16      	cmp	r7, #22
 800a7fa:	d851      	bhi.n	800a8a0 <_dtoa_r+0x210>
 800a7fc:	4b5b      	ldr	r3, [pc, #364]	@ (800a96c <_dtoa_r+0x2dc>)
 800a7fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a80a:	f7f6 f967 	bl	8000adc <__aeabi_dcmplt>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d048      	beq.n	800a8a4 <_dtoa_r+0x214>
 800a812:	3f01      	subs	r7, #1
 800a814:	2300      	movs	r3, #0
 800a816:	9312      	str	r3, [sp, #72]	@ 0x48
 800a818:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a81a:	1b9b      	subs	r3, r3, r6
 800a81c:	1e5a      	subs	r2, r3, #1
 800a81e:	bf44      	itt	mi
 800a820:	f1c3 0801 	rsbmi	r8, r3, #1
 800a824:	2300      	movmi	r3, #0
 800a826:	9208      	str	r2, [sp, #32]
 800a828:	bf54      	ite	pl
 800a82a:	f04f 0800 	movpl.w	r8, #0
 800a82e:	9308      	strmi	r3, [sp, #32]
 800a830:	2f00      	cmp	r7, #0
 800a832:	db39      	blt.n	800a8a8 <_dtoa_r+0x218>
 800a834:	9b08      	ldr	r3, [sp, #32]
 800a836:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a838:	443b      	add	r3, r7
 800a83a:	9308      	str	r3, [sp, #32]
 800a83c:	2300      	movs	r3, #0
 800a83e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a842:	2b09      	cmp	r3, #9
 800a844:	d864      	bhi.n	800a910 <_dtoa_r+0x280>
 800a846:	2b05      	cmp	r3, #5
 800a848:	bfc4      	itt	gt
 800a84a:	3b04      	subgt	r3, #4
 800a84c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a850:	f1a3 0302 	sub.w	r3, r3, #2
 800a854:	bfcc      	ite	gt
 800a856:	2400      	movgt	r4, #0
 800a858:	2401      	movle	r4, #1
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d863      	bhi.n	800a926 <_dtoa_r+0x296>
 800a85e:	e8df f003 	tbb	[pc, r3]
 800a862:	372a      	.short	0x372a
 800a864:	5535      	.short	0x5535
 800a866:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a86a:	441e      	add	r6, r3
 800a86c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a870:	2b20      	cmp	r3, #32
 800a872:	bfc1      	itttt	gt
 800a874:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a878:	409f      	lslgt	r7, r3
 800a87a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a87e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a882:	bfd6      	itet	le
 800a884:	f1c3 0320 	rsble	r3, r3, #32
 800a888:	ea47 0003 	orrgt.w	r0, r7, r3
 800a88c:	fa04 f003 	lslle.w	r0, r4, r3
 800a890:	f7f5 fe38 	bl	8000504 <__aeabi_ui2d>
 800a894:	2201      	movs	r2, #1
 800a896:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a89a:	3e01      	subs	r6, #1
 800a89c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a89e:	e777      	b.n	800a790 <_dtoa_r+0x100>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e7b8      	b.n	800a816 <_dtoa_r+0x186>
 800a8a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a8a6:	e7b7      	b.n	800a818 <_dtoa_r+0x188>
 800a8a8:	427b      	negs	r3, r7
 800a8aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	eba8 0807 	sub.w	r8, r8, r7
 800a8b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8b4:	e7c4      	b.n	800a840 <_dtoa_r+0x1b0>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	dc35      	bgt.n	800a92c <_dtoa_r+0x29c>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	9307      	str	r3, [sp, #28]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8ca:	e00b      	b.n	800a8e4 <_dtoa_r+0x254>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e7f3      	b.n	800a8b8 <_dtoa_r+0x228>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8d6:	18fb      	adds	r3, r7, r3
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	9307      	str	r3, [sp, #28]
 800a8e0:	bfb8      	it	lt
 800a8e2:	2301      	movlt	r3, #1
 800a8e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	2204      	movs	r2, #4
 800a8ec:	f102 0514 	add.w	r5, r2, #20
 800a8f0:	429d      	cmp	r5, r3
 800a8f2:	d91f      	bls.n	800a934 <_dtoa_r+0x2a4>
 800a8f4:	6041      	str	r1, [r0, #4]
 800a8f6:	4658      	mov	r0, fp
 800a8f8:	f000 fd8e 	bl	800b418 <_Balloc>
 800a8fc:	4682      	mov	sl, r0
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d13c      	bne.n	800a97c <_dtoa_r+0x2ec>
 800a902:	4b1b      	ldr	r3, [pc, #108]	@ (800a970 <_dtoa_r+0x2e0>)
 800a904:	4602      	mov	r2, r0
 800a906:	f240 11af 	movw	r1, #431	@ 0x1af
 800a90a:	e6d8      	b.n	800a6be <_dtoa_r+0x2e>
 800a90c:	2301      	movs	r3, #1
 800a90e:	e7e0      	b.n	800a8d2 <_dtoa_r+0x242>
 800a910:	2401      	movs	r4, #1
 800a912:	2300      	movs	r3, #0
 800a914:	9309      	str	r3, [sp, #36]	@ 0x24
 800a916:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a918:	f04f 33ff 	mov.w	r3, #4294967295
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	9307      	str	r3, [sp, #28]
 800a920:	2200      	movs	r2, #0
 800a922:	2312      	movs	r3, #18
 800a924:	e7d0      	b.n	800a8c8 <_dtoa_r+0x238>
 800a926:	2301      	movs	r3, #1
 800a928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a92a:	e7f5      	b.n	800a918 <_dtoa_r+0x288>
 800a92c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	9307      	str	r3, [sp, #28]
 800a932:	e7d7      	b.n	800a8e4 <_dtoa_r+0x254>
 800a934:	3101      	adds	r1, #1
 800a936:	0052      	lsls	r2, r2, #1
 800a938:	e7d8      	b.n	800a8ec <_dtoa_r+0x25c>
 800a93a:	bf00      	nop
 800a93c:	f3af 8000 	nop.w
 800a940:	636f4361 	.word	0x636f4361
 800a944:	3fd287a7 	.word	0x3fd287a7
 800a948:	8b60c8b3 	.word	0x8b60c8b3
 800a94c:	3fc68a28 	.word	0x3fc68a28
 800a950:	509f79fb 	.word	0x509f79fb
 800a954:	3fd34413 	.word	0x3fd34413
 800a958:	0800c701 	.word	0x0800c701
 800a95c:	0800c718 	.word	0x0800c718
 800a960:	7ff00000 	.word	0x7ff00000
 800a964:	0800c6d1 	.word	0x0800c6d1
 800a968:	3ff80000 	.word	0x3ff80000
 800a96c:	0800c810 	.word	0x0800c810
 800a970:	0800c770 	.word	0x0800c770
 800a974:	0800c6fd 	.word	0x0800c6fd
 800a978:	0800c6d0 	.word	0x0800c6d0
 800a97c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a980:	6018      	str	r0, [r3, #0]
 800a982:	9b07      	ldr	r3, [sp, #28]
 800a984:	2b0e      	cmp	r3, #14
 800a986:	f200 80a4 	bhi.w	800aad2 <_dtoa_r+0x442>
 800a98a:	2c00      	cmp	r4, #0
 800a98c:	f000 80a1 	beq.w	800aad2 <_dtoa_r+0x442>
 800a990:	2f00      	cmp	r7, #0
 800a992:	dd33      	ble.n	800a9fc <_dtoa_r+0x36c>
 800a994:	4bad      	ldr	r3, [pc, #692]	@ (800ac4c <_dtoa_r+0x5bc>)
 800a996:	f007 020f 	and.w	r2, r7, #15
 800a99a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a99e:	ed93 7b00 	vldr	d7, [r3]
 800a9a2:	05f8      	lsls	r0, r7, #23
 800a9a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a9a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9ac:	d516      	bpl.n	800a9dc <_dtoa_r+0x34c>
 800a9ae:	4ba8      	ldr	r3, [pc, #672]	@ (800ac50 <_dtoa_r+0x5c0>)
 800a9b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9b8:	f7f5 ff48 	bl	800084c <__aeabi_ddiv>
 800a9bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9c0:	f004 040f 	and.w	r4, r4, #15
 800a9c4:	2603      	movs	r6, #3
 800a9c6:	4da2      	ldr	r5, [pc, #648]	@ (800ac50 <_dtoa_r+0x5c0>)
 800a9c8:	b954      	cbnz	r4, 800a9e0 <_dtoa_r+0x350>
 800a9ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9d2:	f7f5 ff3b 	bl	800084c <__aeabi_ddiv>
 800a9d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9da:	e028      	b.n	800aa2e <_dtoa_r+0x39e>
 800a9dc:	2602      	movs	r6, #2
 800a9de:	e7f2      	b.n	800a9c6 <_dtoa_r+0x336>
 800a9e0:	07e1      	lsls	r1, r4, #31
 800a9e2:	d508      	bpl.n	800a9f6 <_dtoa_r+0x366>
 800a9e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9ec:	f7f5 fe04 	bl	80005f8 <__aeabi_dmul>
 800a9f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9f4:	3601      	adds	r6, #1
 800a9f6:	1064      	asrs	r4, r4, #1
 800a9f8:	3508      	adds	r5, #8
 800a9fa:	e7e5      	b.n	800a9c8 <_dtoa_r+0x338>
 800a9fc:	f000 80d2 	beq.w	800aba4 <_dtoa_r+0x514>
 800aa00:	427c      	negs	r4, r7
 800aa02:	4b92      	ldr	r3, [pc, #584]	@ (800ac4c <_dtoa_r+0x5bc>)
 800aa04:	4d92      	ldr	r5, [pc, #584]	@ (800ac50 <_dtoa_r+0x5c0>)
 800aa06:	f004 020f 	and.w	r2, r4, #15
 800aa0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa16:	f7f5 fdef 	bl	80005f8 <__aeabi_dmul>
 800aa1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa1e:	1124      	asrs	r4, r4, #4
 800aa20:	2300      	movs	r3, #0
 800aa22:	2602      	movs	r6, #2
 800aa24:	2c00      	cmp	r4, #0
 800aa26:	f040 80b2 	bne.w	800ab8e <_dtoa_r+0x4fe>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1d3      	bne.n	800a9d6 <_dtoa_r+0x346>
 800aa2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 80b7 	beq.w	800aba8 <_dtoa_r+0x518>
 800aa3a:	4b86      	ldr	r3, [pc, #536]	@ (800ac54 <_dtoa_r+0x5c4>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	4620      	mov	r0, r4
 800aa40:	4629      	mov	r1, r5
 800aa42:	f7f6 f84b 	bl	8000adc <__aeabi_dcmplt>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	f000 80ae 	beq.w	800aba8 <_dtoa_r+0x518>
 800aa4c:	9b07      	ldr	r3, [sp, #28]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 80aa 	beq.w	800aba8 <_dtoa_r+0x518>
 800aa54:	9b00      	ldr	r3, [sp, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	dd37      	ble.n	800aaca <_dtoa_r+0x43a>
 800aa5a:	1e7b      	subs	r3, r7, #1
 800aa5c:	9304      	str	r3, [sp, #16]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	4b7d      	ldr	r3, [pc, #500]	@ (800ac58 <_dtoa_r+0x5c8>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	4629      	mov	r1, r5
 800aa66:	f7f5 fdc7 	bl	80005f8 <__aeabi_dmul>
 800aa6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa6e:	9c00      	ldr	r4, [sp, #0]
 800aa70:	3601      	adds	r6, #1
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7f5 fd56 	bl	8000524 <__aeabi_i2d>
 800aa78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa7c:	f7f5 fdbc 	bl	80005f8 <__aeabi_dmul>
 800aa80:	4b76      	ldr	r3, [pc, #472]	@ (800ac5c <_dtoa_r+0x5cc>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	f7f5 fc02 	bl	800028c <__adddf3>
 800aa88:	4605      	mov	r5, r0
 800aa8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa8e:	2c00      	cmp	r4, #0
 800aa90:	f040 808d 	bne.w	800abae <_dtoa_r+0x51e>
 800aa94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa98:	4b71      	ldr	r3, [pc, #452]	@ (800ac60 <_dtoa_r+0x5d0>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f7f5 fbf4 	bl	8000288 <__aeabi_dsub>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aaa8:	462a      	mov	r2, r5
 800aaaa:	4633      	mov	r3, r6
 800aaac:	f7f6 f834 	bl	8000b18 <__aeabi_dcmpgt>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	f040 828b 	bne.w	800afcc <_dtoa_r+0x93c>
 800aab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaba:	462a      	mov	r2, r5
 800aabc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aac0:	f7f6 f80c 	bl	8000adc <__aeabi_dcmplt>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	f040 8128 	bne.w	800ad1a <_dtoa_r+0x68a>
 800aaca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aace:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aad2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f2c0 815a 	blt.w	800ad8e <_dtoa_r+0x6fe>
 800aada:	2f0e      	cmp	r7, #14
 800aadc:	f300 8157 	bgt.w	800ad8e <_dtoa_r+0x6fe>
 800aae0:	4b5a      	ldr	r3, [pc, #360]	@ (800ac4c <_dtoa_r+0x5bc>)
 800aae2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aae6:	ed93 7b00 	vldr	d7, [r3]
 800aaea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	ed8d 7b00 	vstr	d7, [sp]
 800aaf2:	da03      	bge.n	800aafc <_dtoa_r+0x46c>
 800aaf4:	9b07      	ldr	r3, [sp, #28]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f340 8101 	ble.w	800acfe <_dtoa_r+0x66e>
 800aafc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab00:	4656      	mov	r6, sl
 800ab02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab06:	4620      	mov	r0, r4
 800ab08:	4629      	mov	r1, r5
 800ab0a:	f7f5 fe9f 	bl	800084c <__aeabi_ddiv>
 800ab0e:	f7f6 f823 	bl	8000b58 <__aeabi_d2iz>
 800ab12:	4680      	mov	r8, r0
 800ab14:	f7f5 fd06 	bl	8000524 <__aeabi_i2d>
 800ab18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab1c:	f7f5 fd6c 	bl	80005f8 <__aeabi_dmul>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4620      	mov	r0, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab2c:	f7f5 fbac 	bl	8000288 <__aeabi_dsub>
 800ab30:	f806 4b01 	strb.w	r4, [r6], #1
 800ab34:	9d07      	ldr	r5, [sp, #28]
 800ab36:	eba6 040a 	sub.w	r4, r6, sl
 800ab3a:	42a5      	cmp	r5, r4
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	f040 8117 	bne.w	800ad72 <_dtoa_r+0x6e2>
 800ab44:	f7f5 fba2 	bl	800028c <__adddf3>
 800ab48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	460d      	mov	r5, r1
 800ab50:	f7f5 ffe2 	bl	8000b18 <__aeabi_dcmpgt>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	f040 80f9 	bne.w	800ad4c <_dtoa_r+0x6bc>
 800ab5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab5e:	4620      	mov	r0, r4
 800ab60:	4629      	mov	r1, r5
 800ab62:	f7f5 ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab66:	b118      	cbz	r0, 800ab70 <_dtoa_r+0x4e0>
 800ab68:	f018 0f01 	tst.w	r8, #1
 800ab6c:	f040 80ee 	bne.w	800ad4c <_dtoa_r+0x6bc>
 800ab70:	4649      	mov	r1, r9
 800ab72:	4658      	mov	r0, fp
 800ab74:	f000 fc90 	bl	800b498 <_Bfree>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	7033      	strb	r3, [r6, #0]
 800ab7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab7e:	3701      	adds	r7, #1
 800ab80:	601f      	str	r7, [r3, #0]
 800ab82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 831d 	beq.w	800b1c4 <_dtoa_r+0xb34>
 800ab8a:	601e      	str	r6, [r3, #0]
 800ab8c:	e31a      	b.n	800b1c4 <_dtoa_r+0xb34>
 800ab8e:	07e2      	lsls	r2, r4, #31
 800ab90:	d505      	bpl.n	800ab9e <_dtoa_r+0x50e>
 800ab92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab96:	f7f5 fd2f 	bl	80005f8 <__aeabi_dmul>
 800ab9a:	3601      	adds	r6, #1
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	1064      	asrs	r4, r4, #1
 800aba0:	3508      	adds	r5, #8
 800aba2:	e73f      	b.n	800aa24 <_dtoa_r+0x394>
 800aba4:	2602      	movs	r6, #2
 800aba6:	e742      	b.n	800aa2e <_dtoa_r+0x39e>
 800aba8:	9c07      	ldr	r4, [sp, #28]
 800abaa:	9704      	str	r7, [sp, #16]
 800abac:	e761      	b.n	800aa72 <_dtoa_r+0x3e2>
 800abae:	4b27      	ldr	r3, [pc, #156]	@ (800ac4c <_dtoa_r+0x5bc>)
 800abb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abba:	4454      	add	r4, sl
 800abbc:	2900      	cmp	r1, #0
 800abbe:	d053      	beq.n	800ac68 <_dtoa_r+0x5d8>
 800abc0:	4928      	ldr	r1, [pc, #160]	@ (800ac64 <_dtoa_r+0x5d4>)
 800abc2:	2000      	movs	r0, #0
 800abc4:	f7f5 fe42 	bl	800084c <__aeabi_ddiv>
 800abc8:	4633      	mov	r3, r6
 800abca:	462a      	mov	r2, r5
 800abcc:	f7f5 fb5c 	bl	8000288 <__aeabi_dsub>
 800abd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abd4:	4656      	mov	r6, sl
 800abd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abda:	f7f5 ffbd 	bl	8000b58 <__aeabi_d2iz>
 800abde:	4605      	mov	r5, r0
 800abe0:	f7f5 fca0 	bl	8000524 <__aeabi_i2d>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abec:	f7f5 fb4c 	bl	8000288 <__aeabi_dsub>
 800abf0:	3530      	adds	r5, #48	@ 0x30
 800abf2:	4602      	mov	r2, r0
 800abf4:	460b      	mov	r3, r1
 800abf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abfa:	f806 5b01 	strb.w	r5, [r6], #1
 800abfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac02:	f7f5 ff6b 	bl	8000adc <__aeabi_dcmplt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d171      	bne.n	800acee <_dtoa_r+0x65e>
 800ac0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac0e:	4911      	ldr	r1, [pc, #68]	@ (800ac54 <_dtoa_r+0x5c4>)
 800ac10:	2000      	movs	r0, #0
 800ac12:	f7f5 fb39 	bl	8000288 <__aeabi_dsub>
 800ac16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac1a:	f7f5 ff5f 	bl	8000adc <__aeabi_dcmplt>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	f040 8095 	bne.w	800ad4e <_dtoa_r+0x6be>
 800ac24:	42a6      	cmp	r6, r4
 800ac26:	f43f af50 	beq.w	800aaca <_dtoa_r+0x43a>
 800ac2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac58 <_dtoa_r+0x5c8>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	f7f5 fce1 	bl	80005f8 <__aeabi_dmul>
 800ac36:	4b08      	ldr	r3, [pc, #32]	@ (800ac58 <_dtoa_r+0x5c8>)
 800ac38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac42:	f7f5 fcd9 	bl	80005f8 <__aeabi_dmul>
 800ac46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac4a:	e7c4      	b.n	800abd6 <_dtoa_r+0x546>
 800ac4c:	0800c810 	.word	0x0800c810
 800ac50:	0800c7e8 	.word	0x0800c7e8
 800ac54:	3ff00000 	.word	0x3ff00000
 800ac58:	40240000 	.word	0x40240000
 800ac5c:	401c0000 	.word	0x401c0000
 800ac60:	40140000 	.word	0x40140000
 800ac64:	3fe00000 	.word	0x3fe00000
 800ac68:	4631      	mov	r1, r6
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	f7f5 fcc4 	bl	80005f8 <__aeabi_dmul>
 800ac70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac74:	9415      	str	r4, [sp, #84]	@ 0x54
 800ac76:	4656      	mov	r6, sl
 800ac78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac7c:	f7f5 ff6c 	bl	8000b58 <__aeabi_d2iz>
 800ac80:	4605      	mov	r5, r0
 800ac82:	f7f5 fc4f 	bl	8000524 <__aeabi_i2d>
 800ac86:	4602      	mov	r2, r0
 800ac88:	460b      	mov	r3, r1
 800ac8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac8e:	f7f5 fafb 	bl	8000288 <__aeabi_dsub>
 800ac92:	3530      	adds	r5, #48	@ 0x30
 800ac94:	f806 5b01 	strb.w	r5, [r6], #1
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	42a6      	cmp	r6, r4
 800ac9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aca2:	f04f 0200 	mov.w	r2, #0
 800aca6:	d124      	bne.n	800acf2 <_dtoa_r+0x662>
 800aca8:	4bac      	ldr	r3, [pc, #688]	@ (800af5c <_dtoa_r+0x8cc>)
 800acaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800acae:	f7f5 faed 	bl	800028c <__adddf3>
 800acb2:	4602      	mov	r2, r0
 800acb4:	460b      	mov	r3, r1
 800acb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acba:	f7f5 ff2d 	bl	8000b18 <__aeabi_dcmpgt>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d145      	bne.n	800ad4e <_dtoa_r+0x6be>
 800acc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800acc6:	49a5      	ldr	r1, [pc, #660]	@ (800af5c <_dtoa_r+0x8cc>)
 800acc8:	2000      	movs	r0, #0
 800acca:	f7f5 fadd 	bl	8000288 <__aeabi_dsub>
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acd6:	f7f5 ff01 	bl	8000adc <__aeabi_dcmplt>
 800acda:	2800      	cmp	r0, #0
 800acdc:	f43f aef5 	beq.w	800aaca <_dtoa_r+0x43a>
 800ace0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ace2:	1e73      	subs	r3, r6, #1
 800ace4:	9315      	str	r3, [sp, #84]	@ 0x54
 800ace6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acea:	2b30      	cmp	r3, #48	@ 0x30
 800acec:	d0f8      	beq.n	800ace0 <_dtoa_r+0x650>
 800acee:	9f04      	ldr	r7, [sp, #16]
 800acf0:	e73e      	b.n	800ab70 <_dtoa_r+0x4e0>
 800acf2:	4b9b      	ldr	r3, [pc, #620]	@ (800af60 <_dtoa_r+0x8d0>)
 800acf4:	f7f5 fc80 	bl	80005f8 <__aeabi_dmul>
 800acf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acfc:	e7bc      	b.n	800ac78 <_dtoa_r+0x5e8>
 800acfe:	d10c      	bne.n	800ad1a <_dtoa_r+0x68a>
 800ad00:	4b98      	ldr	r3, [pc, #608]	@ (800af64 <_dtoa_r+0x8d4>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad08:	f7f5 fc76 	bl	80005f8 <__aeabi_dmul>
 800ad0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad10:	f7f5 fef8 	bl	8000b04 <__aeabi_dcmpge>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f000 8157 	beq.w	800afc8 <_dtoa_r+0x938>
 800ad1a:	2400      	movs	r4, #0
 800ad1c:	4625      	mov	r5, r4
 800ad1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad20:	43db      	mvns	r3, r3
 800ad22:	9304      	str	r3, [sp, #16]
 800ad24:	4656      	mov	r6, sl
 800ad26:	2700      	movs	r7, #0
 800ad28:	4621      	mov	r1, r4
 800ad2a:	4658      	mov	r0, fp
 800ad2c:	f000 fbb4 	bl	800b498 <_Bfree>
 800ad30:	2d00      	cmp	r5, #0
 800ad32:	d0dc      	beq.n	800acee <_dtoa_r+0x65e>
 800ad34:	b12f      	cbz	r7, 800ad42 <_dtoa_r+0x6b2>
 800ad36:	42af      	cmp	r7, r5
 800ad38:	d003      	beq.n	800ad42 <_dtoa_r+0x6b2>
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	4658      	mov	r0, fp
 800ad3e:	f000 fbab 	bl	800b498 <_Bfree>
 800ad42:	4629      	mov	r1, r5
 800ad44:	4658      	mov	r0, fp
 800ad46:	f000 fba7 	bl	800b498 <_Bfree>
 800ad4a:	e7d0      	b.n	800acee <_dtoa_r+0x65e>
 800ad4c:	9704      	str	r7, [sp, #16]
 800ad4e:	4633      	mov	r3, r6
 800ad50:	461e      	mov	r6, r3
 800ad52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad56:	2a39      	cmp	r2, #57	@ 0x39
 800ad58:	d107      	bne.n	800ad6a <_dtoa_r+0x6da>
 800ad5a:	459a      	cmp	sl, r3
 800ad5c:	d1f8      	bne.n	800ad50 <_dtoa_r+0x6c0>
 800ad5e:	9a04      	ldr	r2, [sp, #16]
 800ad60:	3201      	adds	r2, #1
 800ad62:	9204      	str	r2, [sp, #16]
 800ad64:	2230      	movs	r2, #48	@ 0x30
 800ad66:	f88a 2000 	strb.w	r2, [sl]
 800ad6a:	781a      	ldrb	r2, [r3, #0]
 800ad6c:	3201      	adds	r2, #1
 800ad6e:	701a      	strb	r2, [r3, #0]
 800ad70:	e7bd      	b.n	800acee <_dtoa_r+0x65e>
 800ad72:	4b7b      	ldr	r3, [pc, #492]	@ (800af60 <_dtoa_r+0x8d0>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	f7f5 fc3f 	bl	80005f8 <__aeabi_dmul>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4604      	mov	r4, r0
 800ad80:	460d      	mov	r5, r1
 800ad82:	f7f5 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	f43f aebb 	beq.w	800ab02 <_dtoa_r+0x472>
 800ad8c:	e6f0      	b.n	800ab70 <_dtoa_r+0x4e0>
 800ad8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad90:	2a00      	cmp	r2, #0
 800ad92:	f000 80db 	beq.w	800af4c <_dtoa_r+0x8bc>
 800ad96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad98:	2a01      	cmp	r2, #1
 800ad9a:	f300 80bf 	bgt.w	800af1c <_dtoa_r+0x88c>
 800ad9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ada0:	2a00      	cmp	r2, #0
 800ada2:	f000 80b7 	beq.w	800af14 <_dtoa_r+0x884>
 800ada6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800adaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800adac:	4646      	mov	r6, r8
 800adae:	9a08      	ldr	r2, [sp, #32]
 800adb0:	2101      	movs	r1, #1
 800adb2:	441a      	add	r2, r3
 800adb4:	4658      	mov	r0, fp
 800adb6:	4498      	add	r8, r3
 800adb8:	9208      	str	r2, [sp, #32]
 800adba:	f000 fc21 	bl	800b600 <__i2b>
 800adbe:	4605      	mov	r5, r0
 800adc0:	b15e      	cbz	r6, 800adda <_dtoa_r+0x74a>
 800adc2:	9b08      	ldr	r3, [sp, #32]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	dd08      	ble.n	800adda <_dtoa_r+0x74a>
 800adc8:	42b3      	cmp	r3, r6
 800adca:	9a08      	ldr	r2, [sp, #32]
 800adcc:	bfa8      	it	ge
 800adce:	4633      	movge	r3, r6
 800add0:	eba8 0803 	sub.w	r8, r8, r3
 800add4:	1af6      	subs	r6, r6, r3
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	9308      	str	r3, [sp, #32]
 800adda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800addc:	b1f3      	cbz	r3, 800ae1c <_dtoa_r+0x78c>
 800adde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 80b7 	beq.w	800af54 <_dtoa_r+0x8c4>
 800ade6:	b18c      	cbz	r4, 800ae0c <_dtoa_r+0x77c>
 800ade8:	4629      	mov	r1, r5
 800adea:	4622      	mov	r2, r4
 800adec:	4658      	mov	r0, fp
 800adee:	f000 fcc7 	bl	800b780 <__pow5mult>
 800adf2:	464a      	mov	r2, r9
 800adf4:	4601      	mov	r1, r0
 800adf6:	4605      	mov	r5, r0
 800adf8:	4658      	mov	r0, fp
 800adfa:	f000 fc17 	bl	800b62c <__multiply>
 800adfe:	4649      	mov	r1, r9
 800ae00:	9004      	str	r0, [sp, #16]
 800ae02:	4658      	mov	r0, fp
 800ae04:	f000 fb48 	bl	800b498 <_Bfree>
 800ae08:	9b04      	ldr	r3, [sp, #16]
 800ae0a:	4699      	mov	r9, r3
 800ae0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae0e:	1b1a      	subs	r2, r3, r4
 800ae10:	d004      	beq.n	800ae1c <_dtoa_r+0x78c>
 800ae12:	4649      	mov	r1, r9
 800ae14:	4658      	mov	r0, fp
 800ae16:	f000 fcb3 	bl	800b780 <__pow5mult>
 800ae1a:	4681      	mov	r9, r0
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4658      	mov	r0, fp
 800ae20:	f000 fbee 	bl	800b600 <__i2b>
 800ae24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae26:	4604      	mov	r4, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 81cf 	beq.w	800b1cc <_dtoa_r+0xb3c>
 800ae2e:	461a      	mov	r2, r3
 800ae30:	4601      	mov	r1, r0
 800ae32:	4658      	mov	r0, fp
 800ae34:	f000 fca4 	bl	800b780 <__pow5mult>
 800ae38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	f300 8095 	bgt.w	800af6c <_dtoa_r+0x8dc>
 800ae42:	9b02      	ldr	r3, [sp, #8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f040 8087 	bne.w	800af58 <_dtoa_r+0x8c8>
 800ae4a:	9b03      	ldr	r3, [sp, #12]
 800ae4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f040 8089 	bne.w	800af68 <_dtoa_r+0x8d8>
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae5c:	0d1b      	lsrs	r3, r3, #20
 800ae5e:	051b      	lsls	r3, r3, #20
 800ae60:	b12b      	cbz	r3, 800ae6e <_dtoa_r+0x7de>
 800ae62:	9b08      	ldr	r3, [sp, #32]
 800ae64:	3301      	adds	r3, #1
 800ae66:	9308      	str	r3, [sp, #32]
 800ae68:	f108 0801 	add.w	r8, r8, #1
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 81b0 	beq.w	800b1d8 <_dtoa_r+0xb48>
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae7e:	6918      	ldr	r0, [r3, #16]
 800ae80:	f000 fb72 	bl	800b568 <__hi0bits>
 800ae84:	f1c0 0020 	rsb	r0, r0, #32
 800ae88:	9b08      	ldr	r3, [sp, #32]
 800ae8a:	4418      	add	r0, r3
 800ae8c:	f010 001f 	ands.w	r0, r0, #31
 800ae90:	d077      	beq.n	800af82 <_dtoa_r+0x8f2>
 800ae92:	f1c0 0320 	rsb	r3, r0, #32
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	dd6b      	ble.n	800af72 <_dtoa_r+0x8e2>
 800ae9a:	9b08      	ldr	r3, [sp, #32]
 800ae9c:	f1c0 001c 	rsb	r0, r0, #28
 800aea0:	4403      	add	r3, r0
 800aea2:	4480      	add	r8, r0
 800aea4:	4406      	add	r6, r0
 800aea6:	9308      	str	r3, [sp, #32]
 800aea8:	f1b8 0f00 	cmp.w	r8, #0
 800aeac:	dd05      	ble.n	800aeba <_dtoa_r+0x82a>
 800aeae:	4649      	mov	r1, r9
 800aeb0:	4642      	mov	r2, r8
 800aeb2:	4658      	mov	r0, fp
 800aeb4:	f000 fcbe 	bl	800b834 <__lshift>
 800aeb8:	4681      	mov	r9, r0
 800aeba:	9b08      	ldr	r3, [sp, #32]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	dd05      	ble.n	800aecc <_dtoa_r+0x83c>
 800aec0:	4621      	mov	r1, r4
 800aec2:	461a      	mov	r2, r3
 800aec4:	4658      	mov	r0, fp
 800aec6:	f000 fcb5 	bl	800b834 <__lshift>
 800aeca:	4604      	mov	r4, r0
 800aecc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d059      	beq.n	800af86 <_dtoa_r+0x8f6>
 800aed2:	4621      	mov	r1, r4
 800aed4:	4648      	mov	r0, r9
 800aed6:	f000 fd19 	bl	800b90c <__mcmp>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	da53      	bge.n	800af86 <_dtoa_r+0x8f6>
 800aede:	1e7b      	subs	r3, r7, #1
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	4649      	mov	r1, r9
 800aee4:	2300      	movs	r3, #0
 800aee6:	220a      	movs	r2, #10
 800aee8:	4658      	mov	r0, fp
 800aeea:	f000 faf7 	bl	800b4dc <__multadd>
 800aeee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aef0:	4681      	mov	r9, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 8172 	beq.w	800b1dc <_dtoa_r+0xb4c>
 800aef8:	2300      	movs	r3, #0
 800aefa:	4629      	mov	r1, r5
 800aefc:	220a      	movs	r2, #10
 800aefe:	4658      	mov	r0, fp
 800af00:	f000 faec 	bl	800b4dc <__multadd>
 800af04:	9b00      	ldr	r3, [sp, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	4605      	mov	r5, r0
 800af0a:	dc67      	bgt.n	800afdc <_dtoa_r+0x94c>
 800af0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af0e:	2b02      	cmp	r3, #2
 800af10:	dc41      	bgt.n	800af96 <_dtoa_r+0x906>
 800af12:	e063      	b.n	800afdc <_dtoa_r+0x94c>
 800af14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af1a:	e746      	b.n	800adaa <_dtoa_r+0x71a>
 800af1c:	9b07      	ldr	r3, [sp, #28]
 800af1e:	1e5c      	subs	r4, r3, #1
 800af20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af22:	42a3      	cmp	r3, r4
 800af24:	bfbf      	itttt	lt
 800af26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800af28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800af2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800af2c:	1ae3      	sublt	r3, r4, r3
 800af2e:	bfb4      	ite	lt
 800af30:	18d2      	addlt	r2, r2, r3
 800af32:	1b1c      	subge	r4, r3, r4
 800af34:	9b07      	ldr	r3, [sp, #28]
 800af36:	bfbc      	itt	lt
 800af38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800af3a:	2400      	movlt	r4, #0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bfb5      	itete	lt
 800af40:	eba8 0603 	sublt.w	r6, r8, r3
 800af44:	9b07      	ldrge	r3, [sp, #28]
 800af46:	2300      	movlt	r3, #0
 800af48:	4646      	movge	r6, r8
 800af4a:	e730      	b.n	800adae <_dtoa_r+0x71e>
 800af4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af50:	4646      	mov	r6, r8
 800af52:	e735      	b.n	800adc0 <_dtoa_r+0x730>
 800af54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af56:	e75c      	b.n	800ae12 <_dtoa_r+0x782>
 800af58:	2300      	movs	r3, #0
 800af5a:	e788      	b.n	800ae6e <_dtoa_r+0x7de>
 800af5c:	3fe00000 	.word	0x3fe00000
 800af60:	40240000 	.word	0x40240000
 800af64:	40140000 	.word	0x40140000
 800af68:	9b02      	ldr	r3, [sp, #8]
 800af6a:	e780      	b.n	800ae6e <_dtoa_r+0x7de>
 800af6c:	2300      	movs	r3, #0
 800af6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800af70:	e782      	b.n	800ae78 <_dtoa_r+0x7e8>
 800af72:	d099      	beq.n	800aea8 <_dtoa_r+0x818>
 800af74:	9a08      	ldr	r2, [sp, #32]
 800af76:	331c      	adds	r3, #28
 800af78:	441a      	add	r2, r3
 800af7a:	4498      	add	r8, r3
 800af7c:	441e      	add	r6, r3
 800af7e:	9208      	str	r2, [sp, #32]
 800af80:	e792      	b.n	800aea8 <_dtoa_r+0x818>
 800af82:	4603      	mov	r3, r0
 800af84:	e7f6      	b.n	800af74 <_dtoa_r+0x8e4>
 800af86:	9b07      	ldr	r3, [sp, #28]
 800af88:	9704      	str	r7, [sp, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	dc20      	bgt.n	800afd0 <_dtoa_r+0x940>
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af92:	2b02      	cmp	r3, #2
 800af94:	dd1e      	ble.n	800afd4 <_dtoa_r+0x944>
 800af96:	9b00      	ldr	r3, [sp, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f47f aec0 	bne.w	800ad1e <_dtoa_r+0x68e>
 800af9e:	4621      	mov	r1, r4
 800afa0:	2205      	movs	r2, #5
 800afa2:	4658      	mov	r0, fp
 800afa4:	f000 fa9a 	bl	800b4dc <__multadd>
 800afa8:	4601      	mov	r1, r0
 800afaa:	4604      	mov	r4, r0
 800afac:	4648      	mov	r0, r9
 800afae:	f000 fcad 	bl	800b90c <__mcmp>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	f77f aeb3 	ble.w	800ad1e <_dtoa_r+0x68e>
 800afb8:	4656      	mov	r6, sl
 800afba:	2331      	movs	r3, #49	@ 0x31
 800afbc:	f806 3b01 	strb.w	r3, [r6], #1
 800afc0:	9b04      	ldr	r3, [sp, #16]
 800afc2:	3301      	adds	r3, #1
 800afc4:	9304      	str	r3, [sp, #16]
 800afc6:	e6ae      	b.n	800ad26 <_dtoa_r+0x696>
 800afc8:	9c07      	ldr	r4, [sp, #28]
 800afca:	9704      	str	r7, [sp, #16]
 800afcc:	4625      	mov	r5, r4
 800afce:	e7f3      	b.n	800afb8 <_dtoa_r+0x928>
 800afd0:	9b07      	ldr	r3, [sp, #28]
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f000 8104 	beq.w	800b1e4 <_dtoa_r+0xb54>
 800afdc:	2e00      	cmp	r6, #0
 800afde:	dd05      	ble.n	800afec <_dtoa_r+0x95c>
 800afe0:	4629      	mov	r1, r5
 800afe2:	4632      	mov	r2, r6
 800afe4:	4658      	mov	r0, fp
 800afe6:	f000 fc25 	bl	800b834 <__lshift>
 800afea:	4605      	mov	r5, r0
 800afec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d05a      	beq.n	800b0a8 <_dtoa_r+0xa18>
 800aff2:	6869      	ldr	r1, [r5, #4]
 800aff4:	4658      	mov	r0, fp
 800aff6:	f000 fa0f 	bl	800b418 <_Balloc>
 800affa:	4606      	mov	r6, r0
 800affc:	b928      	cbnz	r0, 800b00a <_dtoa_r+0x97a>
 800affe:	4b84      	ldr	r3, [pc, #528]	@ (800b210 <_dtoa_r+0xb80>)
 800b000:	4602      	mov	r2, r0
 800b002:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b006:	f7ff bb5a 	b.w	800a6be <_dtoa_r+0x2e>
 800b00a:	692a      	ldr	r2, [r5, #16]
 800b00c:	3202      	adds	r2, #2
 800b00e:	0092      	lsls	r2, r2, #2
 800b010:	f105 010c 	add.w	r1, r5, #12
 800b014:	300c      	adds	r0, #12
 800b016:	f000 ffaf 	bl	800bf78 <memcpy>
 800b01a:	2201      	movs	r2, #1
 800b01c:	4631      	mov	r1, r6
 800b01e:	4658      	mov	r0, fp
 800b020:	f000 fc08 	bl	800b834 <__lshift>
 800b024:	f10a 0301 	add.w	r3, sl, #1
 800b028:	9307      	str	r3, [sp, #28]
 800b02a:	9b00      	ldr	r3, [sp, #0]
 800b02c:	4453      	add	r3, sl
 800b02e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	462f      	mov	r7, r5
 800b038:	930a      	str	r3, [sp, #40]	@ 0x28
 800b03a:	4605      	mov	r5, r0
 800b03c:	9b07      	ldr	r3, [sp, #28]
 800b03e:	4621      	mov	r1, r4
 800b040:	3b01      	subs	r3, #1
 800b042:	4648      	mov	r0, r9
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	f7ff fa9a 	bl	800a57e <quorem>
 800b04a:	4639      	mov	r1, r7
 800b04c:	9002      	str	r0, [sp, #8]
 800b04e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b052:	4648      	mov	r0, r9
 800b054:	f000 fc5a 	bl	800b90c <__mcmp>
 800b058:	462a      	mov	r2, r5
 800b05a:	9008      	str	r0, [sp, #32]
 800b05c:	4621      	mov	r1, r4
 800b05e:	4658      	mov	r0, fp
 800b060:	f000 fc70 	bl	800b944 <__mdiff>
 800b064:	68c2      	ldr	r2, [r0, #12]
 800b066:	4606      	mov	r6, r0
 800b068:	bb02      	cbnz	r2, 800b0ac <_dtoa_r+0xa1c>
 800b06a:	4601      	mov	r1, r0
 800b06c:	4648      	mov	r0, r9
 800b06e:	f000 fc4d 	bl	800b90c <__mcmp>
 800b072:	4602      	mov	r2, r0
 800b074:	4631      	mov	r1, r6
 800b076:	4658      	mov	r0, fp
 800b078:	920e      	str	r2, [sp, #56]	@ 0x38
 800b07a:	f000 fa0d 	bl	800b498 <_Bfree>
 800b07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b082:	9e07      	ldr	r6, [sp, #28]
 800b084:	ea43 0102 	orr.w	r1, r3, r2
 800b088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b08a:	4319      	orrs	r1, r3
 800b08c:	d110      	bne.n	800b0b0 <_dtoa_r+0xa20>
 800b08e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b092:	d029      	beq.n	800b0e8 <_dtoa_r+0xa58>
 800b094:	9b08      	ldr	r3, [sp, #32]
 800b096:	2b00      	cmp	r3, #0
 800b098:	dd02      	ble.n	800b0a0 <_dtoa_r+0xa10>
 800b09a:	9b02      	ldr	r3, [sp, #8]
 800b09c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b0a0:	9b00      	ldr	r3, [sp, #0]
 800b0a2:	f883 8000 	strb.w	r8, [r3]
 800b0a6:	e63f      	b.n	800ad28 <_dtoa_r+0x698>
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	e7bb      	b.n	800b024 <_dtoa_r+0x994>
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	e7e1      	b.n	800b074 <_dtoa_r+0x9e4>
 800b0b0:	9b08      	ldr	r3, [sp, #32]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	db04      	blt.n	800b0c0 <_dtoa_r+0xa30>
 800b0b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b0b8:	430b      	orrs	r3, r1
 800b0ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	d120      	bne.n	800b102 <_dtoa_r+0xa72>
 800b0c0:	2a00      	cmp	r2, #0
 800b0c2:	dded      	ble.n	800b0a0 <_dtoa_r+0xa10>
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	4658      	mov	r0, fp
 800b0ca:	f000 fbb3 	bl	800b834 <__lshift>
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	4681      	mov	r9, r0
 800b0d2:	f000 fc1b 	bl	800b90c <__mcmp>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	dc03      	bgt.n	800b0e2 <_dtoa_r+0xa52>
 800b0da:	d1e1      	bne.n	800b0a0 <_dtoa_r+0xa10>
 800b0dc:	f018 0f01 	tst.w	r8, #1
 800b0e0:	d0de      	beq.n	800b0a0 <_dtoa_r+0xa10>
 800b0e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0e6:	d1d8      	bne.n	800b09a <_dtoa_r+0xa0a>
 800b0e8:	9a00      	ldr	r2, [sp, #0]
 800b0ea:	2339      	movs	r3, #57	@ 0x39
 800b0ec:	7013      	strb	r3, [r2, #0]
 800b0ee:	4633      	mov	r3, r6
 800b0f0:	461e      	mov	r6, r3
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b0f8:	2a39      	cmp	r2, #57	@ 0x39
 800b0fa:	d052      	beq.n	800b1a2 <_dtoa_r+0xb12>
 800b0fc:	3201      	adds	r2, #1
 800b0fe:	701a      	strb	r2, [r3, #0]
 800b100:	e612      	b.n	800ad28 <_dtoa_r+0x698>
 800b102:	2a00      	cmp	r2, #0
 800b104:	dd07      	ble.n	800b116 <_dtoa_r+0xa86>
 800b106:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b10a:	d0ed      	beq.n	800b0e8 <_dtoa_r+0xa58>
 800b10c:	9a00      	ldr	r2, [sp, #0]
 800b10e:	f108 0301 	add.w	r3, r8, #1
 800b112:	7013      	strb	r3, [r2, #0]
 800b114:	e608      	b.n	800ad28 <_dtoa_r+0x698>
 800b116:	9b07      	ldr	r3, [sp, #28]
 800b118:	9a07      	ldr	r2, [sp, #28]
 800b11a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b120:	4293      	cmp	r3, r2
 800b122:	d028      	beq.n	800b176 <_dtoa_r+0xae6>
 800b124:	4649      	mov	r1, r9
 800b126:	2300      	movs	r3, #0
 800b128:	220a      	movs	r2, #10
 800b12a:	4658      	mov	r0, fp
 800b12c:	f000 f9d6 	bl	800b4dc <__multadd>
 800b130:	42af      	cmp	r7, r5
 800b132:	4681      	mov	r9, r0
 800b134:	f04f 0300 	mov.w	r3, #0
 800b138:	f04f 020a 	mov.w	r2, #10
 800b13c:	4639      	mov	r1, r7
 800b13e:	4658      	mov	r0, fp
 800b140:	d107      	bne.n	800b152 <_dtoa_r+0xac2>
 800b142:	f000 f9cb 	bl	800b4dc <__multadd>
 800b146:	4607      	mov	r7, r0
 800b148:	4605      	mov	r5, r0
 800b14a:	9b07      	ldr	r3, [sp, #28]
 800b14c:	3301      	adds	r3, #1
 800b14e:	9307      	str	r3, [sp, #28]
 800b150:	e774      	b.n	800b03c <_dtoa_r+0x9ac>
 800b152:	f000 f9c3 	bl	800b4dc <__multadd>
 800b156:	4629      	mov	r1, r5
 800b158:	4607      	mov	r7, r0
 800b15a:	2300      	movs	r3, #0
 800b15c:	220a      	movs	r2, #10
 800b15e:	4658      	mov	r0, fp
 800b160:	f000 f9bc 	bl	800b4dc <__multadd>
 800b164:	4605      	mov	r5, r0
 800b166:	e7f0      	b.n	800b14a <_dtoa_r+0xaba>
 800b168:	9b00      	ldr	r3, [sp, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	bfcc      	ite	gt
 800b16e:	461e      	movgt	r6, r3
 800b170:	2601      	movle	r6, #1
 800b172:	4456      	add	r6, sl
 800b174:	2700      	movs	r7, #0
 800b176:	4649      	mov	r1, r9
 800b178:	2201      	movs	r2, #1
 800b17a:	4658      	mov	r0, fp
 800b17c:	f000 fb5a 	bl	800b834 <__lshift>
 800b180:	4621      	mov	r1, r4
 800b182:	4681      	mov	r9, r0
 800b184:	f000 fbc2 	bl	800b90c <__mcmp>
 800b188:	2800      	cmp	r0, #0
 800b18a:	dcb0      	bgt.n	800b0ee <_dtoa_r+0xa5e>
 800b18c:	d102      	bne.n	800b194 <_dtoa_r+0xb04>
 800b18e:	f018 0f01 	tst.w	r8, #1
 800b192:	d1ac      	bne.n	800b0ee <_dtoa_r+0xa5e>
 800b194:	4633      	mov	r3, r6
 800b196:	461e      	mov	r6, r3
 800b198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b19c:	2a30      	cmp	r2, #48	@ 0x30
 800b19e:	d0fa      	beq.n	800b196 <_dtoa_r+0xb06>
 800b1a0:	e5c2      	b.n	800ad28 <_dtoa_r+0x698>
 800b1a2:	459a      	cmp	sl, r3
 800b1a4:	d1a4      	bne.n	800b0f0 <_dtoa_r+0xa60>
 800b1a6:	9b04      	ldr	r3, [sp, #16]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	9304      	str	r3, [sp, #16]
 800b1ac:	2331      	movs	r3, #49	@ 0x31
 800b1ae:	f88a 3000 	strb.w	r3, [sl]
 800b1b2:	e5b9      	b.n	800ad28 <_dtoa_r+0x698>
 800b1b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b214 <_dtoa_r+0xb84>
 800b1ba:	b11b      	cbz	r3, 800b1c4 <_dtoa_r+0xb34>
 800b1bc:	f10a 0308 	add.w	r3, sl, #8
 800b1c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	4650      	mov	r0, sl
 800b1c6:	b019      	add	sp, #100	@ 0x64
 800b1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	f77f ae37 	ble.w	800ae42 <_dtoa_r+0x7b2>
 800b1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1d8:	2001      	movs	r0, #1
 800b1da:	e655      	b.n	800ae88 <_dtoa_r+0x7f8>
 800b1dc:	9b00      	ldr	r3, [sp, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f77f aed6 	ble.w	800af90 <_dtoa_r+0x900>
 800b1e4:	4656      	mov	r6, sl
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4648      	mov	r0, r9
 800b1ea:	f7ff f9c8 	bl	800a57e <quorem>
 800b1ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b1f2:	f806 8b01 	strb.w	r8, [r6], #1
 800b1f6:	9b00      	ldr	r3, [sp, #0]
 800b1f8:	eba6 020a 	sub.w	r2, r6, sl
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	ddb3      	ble.n	800b168 <_dtoa_r+0xad8>
 800b200:	4649      	mov	r1, r9
 800b202:	2300      	movs	r3, #0
 800b204:	220a      	movs	r2, #10
 800b206:	4658      	mov	r0, fp
 800b208:	f000 f968 	bl	800b4dc <__multadd>
 800b20c:	4681      	mov	r9, r0
 800b20e:	e7ea      	b.n	800b1e6 <_dtoa_r+0xb56>
 800b210:	0800c770 	.word	0x0800c770
 800b214:	0800c6f4 	.word	0x0800c6f4

0800b218 <_free_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4605      	mov	r5, r0
 800b21c:	2900      	cmp	r1, #0
 800b21e:	d041      	beq.n	800b2a4 <_free_r+0x8c>
 800b220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b224:	1f0c      	subs	r4, r1, #4
 800b226:	2b00      	cmp	r3, #0
 800b228:	bfb8      	it	lt
 800b22a:	18e4      	addlt	r4, r4, r3
 800b22c:	f000 f8e8 	bl	800b400 <__malloc_lock>
 800b230:	4a1d      	ldr	r2, [pc, #116]	@ (800b2a8 <_free_r+0x90>)
 800b232:	6813      	ldr	r3, [r2, #0]
 800b234:	b933      	cbnz	r3, 800b244 <_free_r+0x2c>
 800b236:	6063      	str	r3, [r4, #4]
 800b238:	6014      	str	r4, [r2, #0]
 800b23a:	4628      	mov	r0, r5
 800b23c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b240:	f000 b8e4 	b.w	800b40c <__malloc_unlock>
 800b244:	42a3      	cmp	r3, r4
 800b246:	d908      	bls.n	800b25a <_free_r+0x42>
 800b248:	6820      	ldr	r0, [r4, #0]
 800b24a:	1821      	adds	r1, r4, r0
 800b24c:	428b      	cmp	r3, r1
 800b24e:	bf01      	itttt	eq
 800b250:	6819      	ldreq	r1, [r3, #0]
 800b252:	685b      	ldreq	r3, [r3, #4]
 800b254:	1809      	addeq	r1, r1, r0
 800b256:	6021      	streq	r1, [r4, #0]
 800b258:	e7ed      	b.n	800b236 <_free_r+0x1e>
 800b25a:	461a      	mov	r2, r3
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	b10b      	cbz	r3, 800b264 <_free_r+0x4c>
 800b260:	42a3      	cmp	r3, r4
 800b262:	d9fa      	bls.n	800b25a <_free_r+0x42>
 800b264:	6811      	ldr	r1, [r2, #0]
 800b266:	1850      	adds	r0, r2, r1
 800b268:	42a0      	cmp	r0, r4
 800b26a:	d10b      	bne.n	800b284 <_free_r+0x6c>
 800b26c:	6820      	ldr	r0, [r4, #0]
 800b26e:	4401      	add	r1, r0
 800b270:	1850      	adds	r0, r2, r1
 800b272:	4283      	cmp	r3, r0
 800b274:	6011      	str	r1, [r2, #0]
 800b276:	d1e0      	bne.n	800b23a <_free_r+0x22>
 800b278:	6818      	ldr	r0, [r3, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	6053      	str	r3, [r2, #4]
 800b27e:	4408      	add	r0, r1
 800b280:	6010      	str	r0, [r2, #0]
 800b282:	e7da      	b.n	800b23a <_free_r+0x22>
 800b284:	d902      	bls.n	800b28c <_free_r+0x74>
 800b286:	230c      	movs	r3, #12
 800b288:	602b      	str	r3, [r5, #0]
 800b28a:	e7d6      	b.n	800b23a <_free_r+0x22>
 800b28c:	6820      	ldr	r0, [r4, #0]
 800b28e:	1821      	adds	r1, r4, r0
 800b290:	428b      	cmp	r3, r1
 800b292:	bf04      	itt	eq
 800b294:	6819      	ldreq	r1, [r3, #0]
 800b296:	685b      	ldreq	r3, [r3, #4]
 800b298:	6063      	str	r3, [r4, #4]
 800b29a:	bf04      	itt	eq
 800b29c:	1809      	addeq	r1, r1, r0
 800b29e:	6021      	streq	r1, [r4, #0]
 800b2a0:	6054      	str	r4, [r2, #4]
 800b2a2:	e7ca      	b.n	800b23a <_free_r+0x22>
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
 800b2a6:	bf00      	nop
 800b2a8:	200021fc 	.word	0x200021fc

0800b2ac <malloc>:
 800b2ac:	4b02      	ldr	r3, [pc, #8]	@ (800b2b8 <malloc+0xc>)
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	6818      	ldr	r0, [r3, #0]
 800b2b2:	f000 b825 	b.w	800b300 <_malloc_r>
 800b2b6:	bf00      	nop
 800b2b8:	20000108 	.word	0x20000108

0800b2bc <sbrk_aligned>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	4e0f      	ldr	r6, [pc, #60]	@ (800b2fc <sbrk_aligned+0x40>)
 800b2c0:	460c      	mov	r4, r1
 800b2c2:	6831      	ldr	r1, [r6, #0]
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	b911      	cbnz	r1, 800b2ce <sbrk_aligned+0x12>
 800b2c8:	f000 fe46 	bl	800bf58 <_sbrk_r>
 800b2cc:	6030      	str	r0, [r6, #0]
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f000 fe41 	bl	800bf58 <_sbrk_r>
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	d103      	bne.n	800b2e2 <sbrk_aligned+0x26>
 800b2da:	f04f 34ff 	mov.w	r4, #4294967295
 800b2de:	4620      	mov	r0, r4
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
 800b2e2:	1cc4      	adds	r4, r0, #3
 800b2e4:	f024 0403 	bic.w	r4, r4, #3
 800b2e8:	42a0      	cmp	r0, r4
 800b2ea:	d0f8      	beq.n	800b2de <sbrk_aligned+0x22>
 800b2ec:	1a21      	subs	r1, r4, r0
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f000 fe32 	bl	800bf58 <_sbrk_r>
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d1f2      	bne.n	800b2de <sbrk_aligned+0x22>
 800b2f8:	e7ef      	b.n	800b2da <sbrk_aligned+0x1e>
 800b2fa:	bf00      	nop
 800b2fc:	200021f8 	.word	0x200021f8

0800b300 <_malloc_r>:
 800b300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b304:	1ccd      	adds	r5, r1, #3
 800b306:	f025 0503 	bic.w	r5, r5, #3
 800b30a:	3508      	adds	r5, #8
 800b30c:	2d0c      	cmp	r5, #12
 800b30e:	bf38      	it	cc
 800b310:	250c      	movcc	r5, #12
 800b312:	2d00      	cmp	r5, #0
 800b314:	4606      	mov	r6, r0
 800b316:	db01      	blt.n	800b31c <_malloc_r+0x1c>
 800b318:	42a9      	cmp	r1, r5
 800b31a:	d904      	bls.n	800b326 <_malloc_r+0x26>
 800b31c:	230c      	movs	r3, #12
 800b31e:	6033      	str	r3, [r6, #0]
 800b320:	2000      	movs	r0, #0
 800b322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3fc <_malloc_r+0xfc>
 800b32a:	f000 f869 	bl	800b400 <__malloc_lock>
 800b32e:	f8d8 3000 	ldr.w	r3, [r8]
 800b332:	461c      	mov	r4, r3
 800b334:	bb44      	cbnz	r4, 800b388 <_malloc_r+0x88>
 800b336:	4629      	mov	r1, r5
 800b338:	4630      	mov	r0, r6
 800b33a:	f7ff ffbf 	bl	800b2bc <sbrk_aligned>
 800b33e:	1c43      	adds	r3, r0, #1
 800b340:	4604      	mov	r4, r0
 800b342:	d158      	bne.n	800b3f6 <_malloc_r+0xf6>
 800b344:	f8d8 4000 	ldr.w	r4, [r8]
 800b348:	4627      	mov	r7, r4
 800b34a:	2f00      	cmp	r7, #0
 800b34c:	d143      	bne.n	800b3d6 <_malloc_r+0xd6>
 800b34e:	2c00      	cmp	r4, #0
 800b350:	d04b      	beq.n	800b3ea <_malloc_r+0xea>
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	4639      	mov	r1, r7
 800b356:	4630      	mov	r0, r6
 800b358:	eb04 0903 	add.w	r9, r4, r3
 800b35c:	f000 fdfc 	bl	800bf58 <_sbrk_r>
 800b360:	4581      	cmp	r9, r0
 800b362:	d142      	bne.n	800b3ea <_malloc_r+0xea>
 800b364:	6821      	ldr	r1, [r4, #0]
 800b366:	1a6d      	subs	r5, r5, r1
 800b368:	4629      	mov	r1, r5
 800b36a:	4630      	mov	r0, r6
 800b36c:	f7ff ffa6 	bl	800b2bc <sbrk_aligned>
 800b370:	3001      	adds	r0, #1
 800b372:	d03a      	beq.n	800b3ea <_malloc_r+0xea>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	442b      	add	r3, r5
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	f8d8 3000 	ldr.w	r3, [r8]
 800b37e:	685a      	ldr	r2, [r3, #4]
 800b380:	bb62      	cbnz	r2, 800b3dc <_malloc_r+0xdc>
 800b382:	f8c8 7000 	str.w	r7, [r8]
 800b386:	e00f      	b.n	800b3a8 <_malloc_r+0xa8>
 800b388:	6822      	ldr	r2, [r4, #0]
 800b38a:	1b52      	subs	r2, r2, r5
 800b38c:	d420      	bmi.n	800b3d0 <_malloc_r+0xd0>
 800b38e:	2a0b      	cmp	r2, #11
 800b390:	d917      	bls.n	800b3c2 <_malloc_r+0xc2>
 800b392:	1961      	adds	r1, r4, r5
 800b394:	42a3      	cmp	r3, r4
 800b396:	6025      	str	r5, [r4, #0]
 800b398:	bf18      	it	ne
 800b39a:	6059      	strne	r1, [r3, #4]
 800b39c:	6863      	ldr	r3, [r4, #4]
 800b39e:	bf08      	it	eq
 800b3a0:	f8c8 1000 	streq.w	r1, [r8]
 800b3a4:	5162      	str	r2, [r4, r5]
 800b3a6:	604b      	str	r3, [r1, #4]
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f000 f82f 	bl	800b40c <__malloc_unlock>
 800b3ae:	f104 000b 	add.w	r0, r4, #11
 800b3b2:	1d23      	adds	r3, r4, #4
 800b3b4:	f020 0007 	bic.w	r0, r0, #7
 800b3b8:	1ac2      	subs	r2, r0, r3
 800b3ba:	bf1c      	itt	ne
 800b3bc:	1a1b      	subne	r3, r3, r0
 800b3be:	50a3      	strne	r3, [r4, r2]
 800b3c0:	e7af      	b.n	800b322 <_malloc_r+0x22>
 800b3c2:	6862      	ldr	r2, [r4, #4]
 800b3c4:	42a3      	cmp	r3, r4
 800b3c6:	bf0c      	ite	eq
 800b3c8:	f8c8 2000 	streq.w	r2, [r8]
 800b3cc:	605a      	strne	r2, [r3, #4]
 800b3ce:	e7eb      	b.n	800b3a8 <_malloc_r+0xa8>
 800b3d0:	4623      	mov	r3, r4
 800b3d2:	6864      	ldr	r4, [r4, #4]
 800b3d4:	e7ae      	b.n	800b334 <_malloc_r+0x34>
 800b3d6:	463c      	mov	r4, r7
 800b3d8:	687f      	ldr	r7, [r7, #4]
 800b3da:	e7b6      	b.n	800b34a <_malloc_r+0x4a>
 800b3dc:	461a      	mov	r2, r3
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	42a3      	cmp	r3, r4
 800b3e2:	d1fb      	bne.n	800b3dc <_malloc_r+0xdc>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	6053      	str	r3, [r2, #4]
 800b3e8:	e7de      	b.n	800b3a8 <_malloc_r+0xa8>
 800b3ea:	230c      	movs	r3, #12
 800b3ec:	6033      	str	r3, [r6, #0]
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f000 f80c 	bl	800b40c <__malloc_unlock>
 800b3f4:	e794      	b.n	800b320 <_malloc_r+0x20>
 800b3f6:	6005      	str	r5, [r0, #0]
 800b3f8:	e7d6      	b.n	800b3a8 <_malloc_r+0xa8>
 800b3fa:	bf00      	nop
 800b3fc:	200021fc 	.word	0x200021fc

0800b400 <__malloc_lock>:
 800b400:	4801      	ldr	r0, [pc, #4]	@ (800b408 <__malloc_lock+0x8>)
 800b402:	f7ff b8ba 	b.w	800a57a <__retarget_lock_acquire_recursive>
 800b406:	bf00      	nop
 800b408:	200021f4 	.word	0x200021f4

0800b40c <__malloc_unlock>:
 800b40c:	4801      	ldr	r0, [pc, #4]	@ (800b414 <__malloc_unlock+0x8>)
 800b40e:	f7ff b8b5 	b.w	800a57c <__retarget_lock_release_recursive>
 800b412:	bf00      	nop
 800b414:	200021f4 	.word	0x200021f4

0800b418 <_Balloc>:
 800b418:	b570      	push	{r4, r5, r6, lr}
 800b41a:	69c6      	ldr	r6, [r0, #28]
 800b41c:	4604      	mov	r4, r0
 800b41e:	460d      	mov	r5, r1
 800b420:	b976      	cbnz	r6, 800b440 <_Balloc+0x28>
 800b422:	2010      	movs	r0, #16
 800b424:	f7ff ff42 	bl	800b2ac <malloc>
 800b428:	4602      	mov	r2, r0
 800b42a:	61e0      	str	r0, [r4, #28]
 800b42c:	b920      	cbnz	r0, 800b438 <_Balloc+0x20>
 800b42e:	4b18      	ldr	r3, [pc, #96]	@ (800b490 <_Balloc+0x78>)
 800b430:	4818      	ldr	r0, [pc, #96]	@ (800b494 <_Balloc+0x7c>)
 800b432:	216b      	movs	r1, #107	@ 0x6b
 800b434:	f000 fdae 	bl	800bf94 <__assert_func>
 800b438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b43c:	6006      	str	r6, [r0, #0]
 800b43e:	60c6      	str	r6, [r0, #12]
 800b440:	69e6      	ldr	r6, [r4, #28]
 800b442:	68f3      	ldr	r3, [r6, #12]
 800b444:	b183      	cbz	r3, 800b468 <_Balloc+0x50>
 800b446:	69e3      	ldr	r3, [r4, #28]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b44e:	b9b8      	cbnz	r0, 800b480 <_Balloc+0x68>
 800b450:	2101      	movs	r1, #1
 800b452:	fa01 f605 	lsl.w	r6, r1, r5
 800b456:	1d72      	adds	r2, r6, #5
 800b458:	0092      	lsls	r2, r2, #2
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 fdb8 	bl	800bfd0 <_calloc_r>
 800b460:	b160      	cbz	r0, 800b47c <_Balloc+0x64>
 800b462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b466:	e00e      	b.n	800b486 <_Balloc+0x6e>
 800b468:	2221      	movs	r2, #33	@ 0x21
 800b46a:	2104      	movs	r1, #4
 800b46c:	4620      	mov	r0, r4
 800b46e:	f000 fdaf 	bl	800bfd0 <_calloc_r>
 800b472:	69e3      	ldr	r3, [r4, #28]
 800b474:	60f0      	str	r0, [r6, #12]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1e4      	bne.n	800b446 <_Balloc+0x2e>
 800b47c:	2000      	movs	r0, #0
 800b47e:	bd70      	pop	{r4, r5, r6, pc}
 800b480:	6802      	ldr	r2, [r0, #0]
 800b482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b486:	2300      	movs	r3, #0
 800b488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b48c:	e7f7      	b.n	800b47e <_Balloc+0x66>
 800b48e:	bf00      	nop
 800b490:	0800c701 	.word	0x0800c701
 800b494:	0800c781 	.word	0x0800c781

0800b498 <_Bfree>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	69c6      	ldr	r6, [r0, #28]
 800b49c:	4605      	mov	r5, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	b976      	cbnz	r6, 800b4c0 <_Bfree+0x28>
 800b4a2:	2010      	movs	r0, #16
 800b4a4:	f7ff ff02 	bl	800b2ac <malloc>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	61e8      	str	r0, [r5, #28]
 800b4ac:	b920      	cbnz	r0, 800b4b8 <_Bfree+0x20>
 800b4ae:	4b09      	ldr	r3, [pc, #36]	@ (800b4d4 <_Bfree+0x3c>)
 800b4b0:	4809      	ldr	r0, [pc, #36]	@ (800b4d8 <_Bfree+0x40>)
 800b4b2:	218f      	movs	r1, #143	@ 0x8f
 800b4b4:	f000 fd6e 	bl	800bf94 <__assert_func>
 800b4b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4bc:	6006      	str	r6, [r0, #0]
 800b4be:	60c6      	str	r6, [r0, #12]
 800b4c0:	b13c      	cbz	r4, 800b4d2 <_Bfree+0x3a>
 800b4c2:	69eb      	ldr	r3, [r5, #28]
 800b4c4:	6862      	ldr	r2, [r4, #4]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4cc:	6021      	str	r1, [r4, #0]
 800b4ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4d2:	bd70      	pop	{r4, r5, r6, pc}
 800b4d4:	0800c701 	.word	0x0800c701
 800b4d8:	0800c781 	.word	0x0800c781

0800b4dc <__multadd>:
 800b4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e0:	690d      	ldr	r5, [r1, #16]
 800b4e2:	4607      	mov	r7, r0
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	461e      	mov	r6, r3
 800b4e8:	f101 0c14 	add.w	ip, r1, #20
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	f8dc 3000 	ldr.w	r3, [ip]
 800b4f2:	b299      	uxth	r1, r3
 800b4f4:	fb02 6101 	mla	r1, r2, r1, r6
 800b4f8:	0c1e      	lsrs	r6, r3, #16
 800b4fa:	0c0b      	lsrs	r3, r1, #16
 800b4fc:	fb02 3306 	mla	r3, r2, r6, r3
 800b500:	b289      	uxth	r1, r1
 800b502:	3001      	adds	r0, #1
 800b504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b508:	4285      	cmp	r5, r0
 800b50a:	f84c 1b04 	str.w	r1, [ip], #4
 800b50e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b512:	dcec      	bgt.n	800b4ee <__multadd+0x12>
 800b514:	b30e      	cbz	r6, 800b55a <__multadd+0x7e>
 800b516:	68a3      	ldr	r3, [r4, #8]
 800b518:	42ab      	cmp	r3, r5
 800b51a:	dc19      	bgt.n	800b550 <__multadd+0x74>
 800b51c:	6861      	ldr	r1, [r4, #4]
 800b51e:	4638      	mov	r0, r7
 800b520:	3101      	adds	r1, #1
 800b522:	f7ff ff79 	bl	800b418 <_Balloc>
 800b526:	4680      	mov	r8, r0
 800b528:	b928      	cbnz	r0, 800b536 <__multadd+0x5a>
 800b52a:	4602      	mov	r2, r0
 800b52c:	4b0c      	ldr	r3, [pc, #48]	@ (800b560 <__multadd+0x84>)
 800b52e:	480d      	ldr	r0, [pc, #52]	@ (800b564 <__multadd+0x88>)
 800b530:	21ba      	movs	r1, #186	@ 0xba
 800b532:	f000 fd2f 	bl	800bf94 <__assert_func>
 800b536:	6922      	ldr	r2, [r4, #16]
 800b538:	3202      	adds	r2, #2
 800b53a:	f104 010c 	add.w	r1, r4, #12
 800b53e:	0092      	lsls	r2, r2, #2
 800b540:	300c      	adds	r0, #12
 800b542:	f000 fd19 	bl	800bf78 <memcpy>
 800b546:	4621      	mov	r1, r4
 800b548:	4638      	mov	r0, r7
 800b54a:	f7ff ffa5 	bl	800b498 <_Bfree>
 800b54e:	4644      	mov	r4, r8
 800b550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b554:	3501      	adds	r5, #1
 800b556:	615e      	str	r6, [r3, #20]
 800b558:	6125      	str	r5, [r4, #16]
 800b55a:	4620      	mov	r0, r4
 800b55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b560:	0800c770 	.word	0x0800c770
 800b564:	0800c781 	.word	0x0800c781

0800b568 <__hi0bits>:
 800b568:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b56c:	4603      	mov	r3, r0
 800b56e:	bf36      	itet	cc
 800b570:	0403      	lslcc	r3, r0, #16
 800b572:	2000      	movcs	r0, #0
 800b574:	2010      	movcc	r0, #16
 800b576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b57a:	bf3c      	itt	cc
 800b57c:	021b      	lslcc	r3, r3, #8
 800b57e:	3008      	addcc	r0, #8
 800b580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b584:	bf3c      	itt	cc
 800b586:	011b      	lslcc	r3, r3, #4
 800b588:	3004      	addcc	r0, #4
 800b58a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b58e:	bf3c      	itt	cc
 800b590:	009b      	lslcc	r3, r3, #2
 800b592:	3002      	addcc	r0, #2
 800b594:	2b00      	cmp	r3, #0
 800b596:	db05      	blt.n	800b5a4 <__hi0bits+0x3c>
 800b598:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b59c:	f100 0001 	add.w	r0, r0, #1
 800b5a0:	bf08      	it	eq
 800b5a2:	2020      	moveq	r0, #32
 800b5a4:	4770      	bx	lr

0800b5a6 <__lo0bits>:
 800b5a6:	6803      	ldr	r3, [r0, #0]
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	f013 0007 	ands.w	r0, r3, #7
 800b5ae:	d00b      	beq.n	800b5c8 <__lo0bits+0x22>
 800b5b0:	07d9      	lsls	r1, r3, #31
 800b5b2:	d421      	bmi.n	800b5f8 <__lo0bits+0x52>
 800b5b4:	0798      	lsls	r0, r3, #30
 800b5b6:	bf49      	itett	mi
 800b5b8:	085b      	lsrmi	r3, r3, #1
 800b5ba:	089b      	lsrpl	r3, r3, #2
 800b5bc:	2001      	movmi	r0, #1
 800b5be:	6013      	strmi	r3, [r2, #0]
 800b5c0:	bf5c      	itt	pl
 800b5c2:	6013      	strpl	r3, [r2, #0]
 800b5c4:	2002      	movpl	r0, #2
 800b5c6:	4770      	bx	lr
 800b5c8:	b299      	uxth	r1, r3
 800b5ca:	b909      	cbnz	r1, 800b5d0 <__lo0bits+0x2a>
 800b5cc:	0c1b      	lsrs	r3, r3, #16
 800b5ce:	2010      	movs	r0, #16
 800b5d0:	b2d9      	uxtb	r1, r3
 800b5d2:	b909      	cbnz	r1, 800b5d8 <__lo0bits+0x32>
 800b5d4:	3008      	adds	r0, #8
 800b5d6:	0a1b      	lsrs	r3, r3, #8
 800b5d8:	0719      	lsls	r1, r3, #28
 800b5da:	bf04      	itt	eq
 800b5dc:	091b      	lsreq	r3, r3, #4
 800b5de:	3004      	addeq	r0, #4
 800b5e0:	0799      	lsls	r1, r3, #30
 800b5e2:	bf04      	itt	eq
 800b5e4:	089b      	lsreq	r3, r3, #2
 800b5e6:	3002      	addeq	r0, #2
 800b5e8:	07d9      	lsls	r1, r3, #31
 800b5ea:	d403      	bmi.n	800b5f4 <__lo0bits+0x4e>
 800b5ec:	085b      	lsrs	r3, r3, #1
 800b5ee:	f100 0001 	add.w	r0, r0, #1
 800b5f2:	d003      	beq.n	800b5fc <__lo0bits+0x56>
 800b5f4:	6013      	str	r3, [r2, #0]
 800b5f6:	4770      	bx	lr
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	4770      	bx	lr
 800b5fc:	2020      	movs	r0, #32
 800b5fe:	4770      	bx	lr

0800b600 <__i2b>:
 800b600:	b510      	push	{r4, lr}
 800b602:	460c      	mov	r4, r1
 800b604:	2101      	movs	r1, #1
 800b606:	f7ff ff07 	bl	800b418 <_Balloc>
 800b60a:	4602      	mov	r2, r0
 800b60c:	b928      	cbnz	r0, 800b61a <__i2b+0x1a>
 800b60e:	4b05      	ldr	r3, [pc, #20]	@ (800b624 <__i2b+0x24>)
 800b610:	4805      	ldr	r0, [pc, #20]	@ (800b628 <__i2b+0x28>)
 800b612:	f240 1145 	movw	r1, #325	@ 0x145
 800b616:	f000 fcbd 	bl	800bf94 <__assert_func>
 800b61a:	2301      	movs	r3, #1
 800b61c:	6144      	str	r4, [r0, #20]
 800b61e:	6103      	str	r3, [r0, #16]
 800b620:	bd10      	pop	{r4, pc}
 800b622:	bf00      	nop
 800b624:	0800c770 	.word	0x0800c770
 800b628:	0800c781 	.word	0x0800c781

0800b62c <__multiply>:
 800b62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b630:	4614      	mov	r4, r2
 800b632:	690a      	ldr	r2, [r1, #16]
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	429a      	cmp	r2, r3
 800b638:	bfa8      	it	ge
 800b63a:	4623      	movge	r3, r4
 800b63c:	460f      	mov	r7, r1
 800b63e:	bfa4      	itt	ge
 800b640:	460c      	movge	r4, r1
 800b642:	461f      	movge	r7, r3
 800b644:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b648:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b64c:	68a3      	ldr	r3, [r4, #8]
 800b64e:	6861      	ldr	r1, [r4, #4]
 800b650:	eb0a 0609 	add.w	r6, sl, r9
 800b654:	42b3      	cmp	r3, r6
 800b656:	b085      	sub	sp, #20
 800b658:	bfb8      	it	lt
 800b65a:	3101      	addlt	r1, #1
 800b65c:	f7ff fedc 	bl	800b418 <_Balloc>
 800b660:	b930      	cbnz	r0, 800b670 <__multiply+0x44>
 800b662:	4602      	mov	r2, r0
 800b664:	4b44      	ldr	r3, [pc, #272]	@ (800b778 <__multiply+0x14c>)
 800b666:	4845      	ldr	r0, [pc, #276]	@ (800b77c <__multiply+0x150>)
 800b668:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b66c:	f000 fc92 	bl	800bf94 <__assert_func>
 800b670:	f100 0514 	add.w	r5, r0, #20
 800b674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b678:	462b      	mov	r3, r5
 800b67a:	2200      	movs	r2, #0
 800b67c:	4543      	cmp	r3, r8
 800b67e:	d321      	bcc.n	800b6c4 <__multiply+0x98>
 800b680:	f107 0114 	add.w	r1, r7, #20
 800b684:	f104 0214 	add.w	r2, r4, #20
 800b688:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b68c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b690:	9302      	str	r3, [sp, #8]
 800b692:	1b13      	subs	r3, r2, r4
 800b694:	3b15      	subs	r3, #21
 800b696:	f023 0303 	bic.w	r3, r3, #3
 800b69a:	3304      	adds	r3, #4
 800b69c:	f104 0715 	add.w	r7, r4, #21
 800b6a0:	42ba      	cmp	r2, r7
 800b6a2:	bf38      	it	cc
 800b6a4:	2304      	movcc	r3, #4
 800b6a6:	9301      	str	r3, [sp, #4]
 800b6a8:	9b02      	ldr	r3, [sp, #8]
 800b6aa:	9103      	str	r1, [sp, #12]
 800b6ac:	428b      	cmp	r3, r1
 800b6ae:	d80c      	bhi.n	800b6ca <__multiply+0x9e>
 800b6b0:	2e00      	cmp	r6, #0
 800b6b2:	dd03      	ble.n	800b6bc <__multiply+0x90>
 800b6b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d05b      	beq.n	800b774 <__multiply+0x148>
 800b6bc:	6106      	str	r6, [r0, #16]
 800b6be:	b005      	add	sp, #20
 800b6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c4:	f843 2b04 	str.w	r2, [r3], #4
 800b6c8:	e7d8      	b.n	800b67c <__multiply+0x50>
 800b6ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6ce:	f1ba 0f00 	cmp.w	sl, #0
 800b6d2:	d024      	beq.n	800b71e <__multiply+0xf2>
 800b6d4:	f104 0e14 	add.w	lr, r4, #20
 800b6d8:	46a9      	mov	r9, r5
 800b6da:	f04f 0c00 	mov.w	ip, #0
 800b6de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6e2:	f8d9 3000 	ldr.w	r3, [r9]
 800b6e6:	fa1f fb87 	uxth.w	fp, r7
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800b6f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b6f4:	f8d9 7000 	ldr.w	r7, [r9]
 800b6f8:	4463      	add	r3, ip
 800b6fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b6fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800b702:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b706:	b29b      	uxth	r3, r3
 800b708:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b70c:	4572      	cmp	r2, lr
 800b70e:	f849 3b04 	str.w	r3, [r9], #4
 800b712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b716:	d8e2      	bhi.n	800b6de <__multiply+0xb2>
 800b718:	9b01      	ldr	r3, [sp, #4]
 800b71a:	f845 c003 	str.w	ip, [r5, r3]
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b724:	3104      	adds	r1, #4
 800b726:	f1b9 0f00 	cmp.w	r9, #0
 800b72a:	d021      	beq.n	800b770 <__multiply+0x144>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	f104 0c14 	add.w	ip, r4, #20
 800b732:	46ae      	mov	lr, r5
 800b734:	f04f 0a00 	mov.w	sl, #0
 800b738:	f8bc b000 	ldrh.w	fp, [ip]
 800b73c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b740:	fb09 770b 	mla	r7, r9, fp, r7
 800b744:	4457      	add	r7, sl
 800b746:	b29b      	uxth	r3, r3
 800b748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b74c:	f84e 3b04 	str.w	r3, [lr], #4
 800b750:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b758:	f8be 3000 	ldrh.w	r3, [lr]
 800b75c:	fb09 330a 	mla	r3, r9, sl, r3
 800b760:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b764:	4562      	cmp	r2, ip
 800b766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b76a:	d8e5      	bhi.n	800b738 <__multiply+0x10c>
 800b76c:	9f01      	ldr	r7, [sp, #4]
 800b76e:	51eb      	str	r3, [r5, r7]
 800b770:	3504      	adds	r5, #4
 800b772:	e799      	b.n	800b6a8 <__multiply+0x7c>
 800b774:	3e01      	subs	r6, #1
 800b776:	e79b      	b.n	800b6b0 <__multiply+0x84>
 800b778:	0800c770 	.word	0x0800c770
 800b77c:	0800c781 	.word	0x0800c781

0800b780 <__pow5mult>:
 800b780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b784:	4615      	mov	r5, r2
 800b786:	f012 0203 	ands.w	r2, r2, #3
 800b78a:	4607      	mov	r7, r0
 800b78c:	460e      	mov	r6, r1
 800b78e:	d007      	beq.n	800b7a0 <__pow5mult+0x20>
 800b790:	4c25      	ldr	r4, [pc, #148]	@ (800b828 <__pow5mult+0xa8>)
 800b792:	3a01      	subs	r2, #1
 800b794:	2300      	movs	r3, #0
 800b796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b79a:	f7ff fe9f 	bl	800b4dc <__multadd>
 800b79e:	4606      	mov	r6, r0
 800b7a0:	10ad      	asrs	r5, r5, #2
 800b7a2:	d03d      	beq.n	800b820 <__pow5mult+0xa0>
 800b7a4:	69fc      	ldr	r4, [r7, #28]
 800b7a6:	b97c      	cbnz	r4, 800b7c8 <__pow5mult+0x48>
 800b7a8:	2010      	movs	r0, #16
 800b7aa:	f7ff fd7f 	bl	800b2ac <malloc>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	61f8      	str	r0, [r7, #28]
 800b7b2:	b928      	cbnz	r0, 800b7c0 <__pow5mult+0x40>
 800b7b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b82c <__pow5mult+0xac>)
 800b7b6:	481e      	ldr	r0, [pc, #120]	@ (800b830 <__pow5mult+0xb0>)
 800b7b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7bc:	f000 fbea 	bl	800bf94 <__assert_func>
 800b7c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7c4:	6004      	str	r4, [r0, #0]
 800b7c6:	60c4      	str	r4, [r0, #12]
 800b7c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7d0:	b94c      	cbnz	r4, 800b7e6 <__pow5mult+0x66>
 800b7d2:	f240 2171 	movw	r1, #625	@ 0x271
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	f7ff ff12 	bl	800b600 <__i2b>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	6003      	str	r3, [r0, #0]
 800b7e6:	f04f 0900 	mov.w	r9, #0
 800b7ea:	07eb      	lsls	r3, r5, #31
 800b7ec:	d50a      	bpl.n	800b804 <__pow5mult+0x84>
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	f7ff ff1a 	bl	800b62c <__multiply>
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	f7ff fe4b 	bl	800b498 <_Bfree>
 800b802:	4646      	mov	r6, r8
 800b804:	106d      	asrs	r5, r5, #1
 800b806:	d00b      	beq.n	800b820 <__pow5mult+0xa0>
 800b808:	6820      	ldr	r0, [r4, #0]
 800b80a:	b938      	cbnz	r0, 800b81c <__pow5mult+0x9c>
 800b80c:	4622      	mov	r2, r4
 800b80e:	4621      	mov	r1, r4
 800b810:	4638      	mov	r0, r7
 800b812:	f7ff ff0b 	bl	800b62c <__multiply>
 800b816:	6020      	str	r0, [r4, #0]
 800b818:	f8c0 9000 	str.w	r9, [r0]
 800b81c:	4604      	mov	r4, r0
 800b81e:	e7e4      	b.n	800b7ea <__pow5mult+0x6a>
 800b820:	4630      	mov	r0, r6
 800b822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b826:	bf00      	nop
 800b828:	0800c7dc 	.word	0x0800c7dc
 800b82c:	0800c701 	.word	0x0800c701
 800b830:	0800c781 	.word	0x0800c781

0800b834 <__lshift>:
 800b834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b838:	460c      	mov	r4, r1
 800b83a:	6849      	ldr	r1, [r1, #4]
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b842:	68a3      	ldr	r3, [r4, #8]
 800b844:	4607      	mov	r7, r0
 800b846:	4691      	mov	r9, r2
 800b848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b84c:	f108 0601 	add.w	r6, r8, #1
 800b850:	42b3      	cmp	r3, r6
 800b852:	db0b      	blt.n	800b86c <__lshift+0x38>
 800b854:	4638      	mov	r0, r7
 800b856:	f7ff fddf 	bl	800b418 <_Balloc>
 800b85a:	4605      	mov	r5, r0
 800b85c:	b948      	cbnz	r0, 800b872 <__lshift+0x3e>
 800b85e:	4602      	mov	r2, r0
 800b860:	4b28      	ldr	r3, [pc, #160]	@ (800b904 <__lshift+0xd0>)
 800b862:	4829      	ldr	r0, [pc, #164]	@ (800b908 <__lshift+0xd4>)
 800b864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b868:	f000 fb94 	bl	800bf94 <__assert_func>
 800b86c:	3101      	adds	r1, #1
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	e7ee      	b.n	800b850 <__lshift+0x1c>
 800b872:	2300      	movs	r3, #0
 800b874:	f100 0114 	add.w	r1, r0, #20
 800b878:	f100 0210 	add.w	r2, r0, #16
 800b87c:	4618      	mov	r0, r3
 800b87e:	4553      	cmp	r3, sl
 800b880:	db33      	blt.n	800b8ea <__lshift+0xb6>
 800b882:	6920      	ldr	r0, [r4, #16]
 800b884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b888:	f104 0314 	add.w	r3, r4, #20
 800b88c:	f019 091f 	ands.w	r9, r9, #31
 800b890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b898:	d02b      	beq.n	800b8f2 <__lshift+0xbe>
 800b89a:	f1c9 0e20 	rsb	lr, r9, #32
 800b89e:	468a      	mov	sl, r1
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	6818      	ldr	r0, [r3, #0]
 800b8a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b8a8:	4310      	orrs	r0, r2
 800b8aa:	f84a 0b04 	str.w	r0, [sl], #4
 800b8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8b2:	459c      	cmp	ip, r3
 800b8b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8b8:	d8f3      	bhi.n	800b8a2 <__lshift+0x6e>
 800b8ba:	ebac 0304 	sub.w	r3, ip, r4
 800b8be:	3b15      	subs	r3, #21
 800b8c0:	f023 0303 	bic.w	r3, r3, #3
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	f104 0015 	add.w	r0, r4, #21
 800b8ca:	4584      	cmp	ip, r0
 800b8cc:	bf38      	it	cc
 800b8ce:	2304      	movcc	r3, #4
 800b8d0:	50ca      	str	r2, [r1, r3]
 800b8d2:	b10a      	cbz	r2, 800b8d8 <__lshift+0xa4>
 800b8d4:	f108 0602 	add.w	r6, r8, #2
 800b8d8:	3e01      	subs	r6, #1
 800b8da:	4638      	mov	r0, r7
 800b8dc:	612e      	str	r6, [r5, #16]
 800b8de:	4621      	mov	r1, r4
 800b8e0:	f7ff fdda 	bl	800b498 <_Bfree>
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	e7c5      	b.n	800b87e <__lshift+0x4a>
 800b8f2:	3904      	subs	r1, #4
 800b8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8fc:	459c      	cmp	ip, r3
 800b8fe:	d8f9      	bhi.n	800b8f4 <__lshift+0xc0>
 800b900:	e7ea      	b.n	800b8d8 <__lshift+0xa4>
 800b902:	bf00      	nop
 800b904:	0800c770 	.word	0x0800c770
 800b908:	0800c781 	.word	0x0800c781

0800b90c <__mcmp>:
 800b90c:	690a      	ldr	r2, [r1, #16]
 800b90e:	4603      	mov	r3, r0
 800b910:	6900      	ldr	r0, [r0, #16]
 800b912:	1a80      	subs	r0, r0, r2
 800b914:	b530      	push	{r4, r5, lr}
 800b916:	d10e      	bne.n	800b936 <__mcmp+0x2a>
 800b918:	3314      	adds	r3, #20
 800b91a:	3114      	adds	r1, #20
 800b91c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b92c:	4295      	cmp	r5, r2
 800b92e:	d003      	beq.n	800b938 <__mcmp+0x2c>
 800b930:	d205      	bcs.n	800b93e <__mcmp+0x32>
 800b932:	f04f 30ff 	mov.w	r0, #4294967295
 800b936:	bd30      	pop	{r4, r5, pc}
 800b938:	42a3      	cmp	r3, r4
 800b93a:	d3f3      	bcc.n	800b924 <__mcmp+0x18>
 800b93c:	e7fb      	b.n	800b936 <__mcmp+0x2a>
 800b93e:	2001      	movs	r0, #1
 800b940:	e7f9      	b.n	800b936 <__mcmp+0x2a>
	...

0800b944 <__mdiff>:
 800b944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	4689      	mov	r9, r1
 800b94a:	4606      	mov	r6, r0
 800b94c:	4611      	mov	r1, r2
 800b94e:	4648      	mov	r0, r9
 800b950:	4614      	mov	r4, r2
 800b952:	f7ff ffdb 	bl	800b90c <__mcmp>
 800b956:	1e05      	subs	r5, r0, #0
 800b958:	d112      	bne.n	800b980 <__mdiff+0x3c>
 800b95a:	4629      	mov	r1, r5
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7ff fd5b 	bl	800b418 <_Balloc>
 800b962:	4602      	mov	r2, r0
 800b964:	b928      	cbnz	r0, 800b972 <__mdiff+0x2e>
 800b966:	4b3f      	ldr	r3, [pc, #252]	@ (800ba64 <__mdiff+0x120>)
 800b968:	f240 2137 	movw	r1, #567	@ 0x237
 800b96c:	483e      	ldr	r0, [pc, #248]	@ (800ba68 <__mdiff+0x124>)
 800b96e:	f000 fb11 	bl	800bf94 <__assert_func>
 800b972:	2301      	movs	r3, #1
 800b974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b978:	4610      	mov	r0, r2
 800b97a:	b003      	add	sp, #12
 800b97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b980:	bfbc      	itt	lt
 800b982:	464b      	movlt	r3, r9
 800b984:	46a1      	movlt	r9, r4
 800b986:	4630      	mov	r0, r6
 800b988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b98c:	bfba      	itte	lt
 800b98e:	461c      	movlt	r4, r3
 800b990:	2501      	movlt	r5, #1
 800b992:	2500      	movge	r5, #0
 800b994:	f7ff fd40 	bl	800b418 <_Balloc>
 800b998:	4602      	mov	r2, r0
 800b99a:	b918      	cbnz	r0, 800b9a4 <__mdiff+0x60>
 800b99c:	4b31      	ldr	r3, [pc, #196]	@ (800ba64 <__mdiff+0x120>)
 800b99e:	f240 2145 	movw	r1, #581	@ 0x245
 800b9a2:	e7e3      	b.n	800b96c <__mdiff+0x28>
 800b9a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9a8:	6926      	ldr	r6, [r4, #16]
 800b9aa:	60c5      	str	r5, [r0, #12]
 800b9ac:	f109 0310 	add.w	r3, r9, #16
 800b9b0:	f109 0514 	add.w	r5, r9, #20
 800b9b4:	f104 0e14 	add.w	lr, r4, #20
 800b9b8:	f100 0b14 	add.w	fp, r0, #20
 800b9bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	46d9      	mov	r9, fp
 800b9c8:	f04f 0c00 	mov.w	ip, #0
 800b9cc:	9b01      	ldr	r3, [sp, #4]
 800b9ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	fa1f f38a 	uxth.w	r3, sl
 800b9dc:	4619      	mov	r1, r3
 800b9de:	b283      	uxth	r3, r0
 800b9e0:	1acb      	subs	r3, r1, r3
 800b9e2:	0c00      	lsrs	r0, r0, #16
 800b9e4:	4463      	add	r3, ip
 800b9e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b9ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b9f4:	4576      	cmp	r6, lr
 800b9f6:	f849 3b04 	str.w	r3, [r9], #4
 800b9fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9fe:	d8e5      	bhi.n	800b9cc <__mdiff+0x88>
 800ba00:	1b33      	subs	r3, r6, r4
 800ba02:	3b15      	subs	r3, #21
 800ba04:	f023 0303 	bic.w	r3, r3, #3
 800ba08:	3415      	adds	r4, #21
 800ba0a:	3304      	adds	r3, #4
 800ba0c:	42a6      	cmp	r6, r4
 800ba0e:	bf38      	it	cc
 800ba10:	2304      	movcc	r3, #4
 800ba12:	441d      	add	r5, r3
 800ba14:	445b      	add	r3, fp
 800ba16:	461e      	mov	r6, r3
 800ba18:	462c      	mov	r4, r5
 800ba1a:	4544      	cmp	r4, r8
 800ba1c:	d30e      	bcc.n	800ba3c <__mdiff+0xf8>
 800ba1e:	f108 0103 	add.w	r1, r8, #3
 800ba22:	1b49      	subs	r1, r1, r5
 800ba24:	f021 0103 	bic.w	r1, r1, #3
 800ba28:	3d03      	subs	r5, #3
 800ba2a:	45a8      	cmp	r8, r5
 800ba2c:	bf38      	it	cc
 800ba2e:	2100      	movcc	r1, #0
 800ba30:	440b      	add	r3, r1
 800ba32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba36:	b191      	cbz	r1, 800ba5e <__mdiff+0x11a>
 800ba38:	6117      	str	r7, [r2, #16]
 800ba3a:	e79d      	b.n	800b978 <__mdiff+0x34>
 800ba3c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba40:	46e6      	mov	lr, ip
 800ba42:	0c08      	lsrs	r0, r1, #16
 800ba44:	fa1c fc81 	uxtah	ip, ip, r1
 800ba48:	4471      	add	r1, lr
 800ba4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba4e:	b289      	uxth	r1, r1
 800ba50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba54:	f846 1b04 	str.w	r1, [r6], #4
 800ba58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba5c:	e7dd      	b.n	800ba1a <__mdiff+0xd6>
 800ba5e:	3f01      	subs	r7, #1
 800ba60:	e7e7      	b.n	800ba32 <__mdiff+0xee>
 800ba62:	bf00      	nop
 800ba64:	0800c770 	.word	0x0800c770
 800ba68:	0800c781 	.word	0x0800c781

0800ba6c <__d2b>:
 800ba6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba70:	460f      	mov	r7, r1
 800ba72:	2101      	movs	r1, #1
 800ba74:	ec59 8b10 	vmov	r8, r9, d0
 800ba78:	4616      	mov	r6, r2
 800ba7a:	f7ff fccd 	bl	800b418 <_Balloc>
 800ba7e:	4604      	mov	r4, r0
 800ba80:	b930      	cbnz	r0, 800ba90 <__d2b+0x24>
 800ba82:	4602      	mov	r2, r0
 800ba84:	4b23      	ldr	r3, [pc, #140]	@ (800bb14 <__d2b+0xa8>)
 800ba86:	4824      	ldr	r0, [pc, #144]	@ (800bb18 <__d2b+0xac>)
 800ba88:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba8c:	f000 fa82 	bl	800bf94 <__assert_func>
 800ba90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba98:	b10d      	cbz	r5, 800ba9e <__d2b+0x32>
 800ba9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba9e:	9301      	str	r3, [sp, #4]
 800baa0:	f1b8 0300 	subs.w	r3, r8, #0
 800baa4:	d023      	beq.n	800baee <__d2b+0x82>
 800baa6:	4668      	mov	r0, sp
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	f7ff fd7c 	bl	800b5a6 <__lo0bits>
 800baae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bab2:	b1d0      	cbz	r0, 800baea <__d2b+0x7e>
 800bab4:	f1c0 0320 	rsb	r3, r0, #32
 800bab8:	fa02 f303 	lsl.w	r3, r2, r3
 800babc:	430b      	orrs	r3, r1
 800babe:	40c2      	lsrs	r2, r0
 800bac0:	6163      	str	r3, [r4, #20]
 800bac2:	9201      	str	r2, [sp, #4]
 800bac4:	9b01      	ldr	r3, [sp, #4]
 800bac6:	61a3      	str	r3, [r4, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bf0c      	ite	eq
 800bacc:	2201      	moveq	r2, #1
 800bace:	2202      	movne	r2, #2
 800bad0:	6122      	str	r2, [r4, #16]
 800bad2:	b1a5      	cbz	r5, 800bafe <__d2b+0x92>
 800bad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bad8:	4405      	add	r5, r0
 800bada:	603d      	str	r5, [r7, #0]
 800badc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bae0:	6030      	str	r0, [r6, #0]
 800bae2:	4620      	mov	r0, r4
 800bae4:	b003      	add	sp, #12
 800bae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baea:	6161      	str	r1, [r4, #20]
 800baec:	e7ea      	b.n	800bac4 <__d2b+0x58>
 800baee:	a801      	add	r0, sp, #4
 800baf0:	f7ff fd59 	bl	800b5a6 <__lo0bits>
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	6163      	str	r3, [r4, #20]
 800baf8:	3020      	adds	r0, #32
 800bafa:	2201      	movs	r2, #1
 800bafc:	e7e8      	b.n	800bad0 <__d2b+0x64>
 800bafe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb06:	6038      	str	r0, [r7, #0]
 800bb08:	6918      	ldr	r0, [r3, #16]
 800bb0a:	f7ff fd2d 	bl	800b568 <__hi0bits>
 800bb0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb12:	e7e5      	b.n	800bae0 <__d2b+0x74>
 800bb14:	0800c770 	.word	0x0800c770
 800bb18:	0800c781 	.word	0x0800c781

0800bb1c <__ssputs_r>:
 800bb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb20:	688e      	ldr	r6, [r1, #8]
 800bb22:	461f      	mov	r7, r3
 800bb24:	42be      	cmp	r6, r7
 800bb26:	680b      	ldr	r3, [r1, #0]
 800bb28:	4682      	mov	sl, r0
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	4690      	mov	r8, r2
 800bb2e:	d82d      	bhi.n	800bb8c <__ssputs_r+0x70>
 800bb30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb38:	d026      	beq.n	800bb88 <__ssputs_r+0x6c>
 800bb3a:	6965      	ldr	r5, [r4, #20]
 800bb3c:	6909      	ldr	r1, [r1, #16]
 800bb3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb42:	eba3 0901 	sub.w	r9, r3, r1
 800bb46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb4a:	1c7b      	adds	r3, r7, #1
 800bb4c:	444b      	add	r3, r9
 800bb4e:	106d      	asrs	r5, r5, #1
 800bb50:	429d      	cmp	r5, r3
 800bb52:	bf38      	it	cc
 800bb54:	461d      	movcc	r5, r3
 800bb56:	0553      	lsls	r3, r2, #21
 800bb58:	d527      	bpl.n	800bbaa <__ssputs_r+0x8e>
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	f7ff fbd0 	bl	800b300 <_malloc_r>
 800bb60:	4606      	mov	r6, r0
 800bb62:	b360      	cbz	r0, 800bbbe <__ssputs_r+0xa2>
 800bb64:	6921      	ldr	r1, [r4, #16]
 800bb66:	464a      	mov	r2, r9
 800bb68:	f000 fa06 	bl	800bf78 <memcpy>
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb76:	81a3      	strh	r3, [r4, #12]
 800bb78:	6126      	str	r6, [r4, #16]
 800bb7a:	6165      	str	r5, [r4, #20]
 800bb7c:	444e      	add	r6, r9
 800bb7e:	eba5 0509 	sub.w	r5, r5, r9
 800bb82:	6026      	str	r6, [r4, #0]
 800bb84:	60a5      	str	r5, [r4, #8]
 800bb86:	463e      	mov	r6, r7
 800bb88:	42be      	cmp	r6, r7
 800bb8a:	d900      	bls.n	800bb8e <__ssputs_r+0x72>
 800bb8c:	463e      	mov	r6, r7
 800bb8e:	6820      	ldr	r0, [r4, #0]
 800bb90:	4632      	mov	r2, r6
 800bb92:	4641      	mov	r1, r8
 800bb94:	f000 f9c6 	bl	800bf24 <memmove>
 800bb98:	68a3      	ldr	r3, [r4, #8]
 800bb9a:	1b9b      	subs	r3, r3, r6
 800bb9c:	60a3      	str	r3, [r4, #8]
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	4433      	add	r3, r6
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	2000      	movs	r0, #0
 800bba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbaa:	462a      	mov	r2, r5
 800bbac:	f000 fa36 	bl	800c01c <_realloc_r>
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d1e0      	bne.n	800bb78 <__ssputs_r+0x5c>
 800bbb6:	6921      	ldr	r1, [r4, #16]
 800bbb8:	4650      	mov	r0, sl
 800bbba:	f7ff fb2d 	bl	800b218 <_free_r>
 800bbbe:	230c      	movs	r3, #12
 800bbc0:	f8ca 3000 	str.w	r3, [sl]
 800bbc4:	89a3      	ldrh	r3, [r4, #12]
 800bbc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbca:	81a3      	strh	r3, [r4, #12]
 800bbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd0:	e7e9      	b.n	800bba6 <__ssputs_r+0x8a>
	...

0800bbd4 <_svfiprintf_r>:
 800bbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd8:	4698      	mov	r8, r3
 800bbda:	898b      	ldrh	r3, [r1, #12]
 800bbdc:	061b      	lsls	r3, r3, #24
 800bbde:	b09d      	sub	sp, #116	@ 0x74
 800bbe0:	4607      	mov	r7, r0
 800bbe2:	460d      	mov	r5, r1
 800bbe4:	4614      	mov	r4, r2
 800bbe6:	d510      	bpl.n	800bc0a <_svfiprintf_r+0x36>
 800bbe8:	690b      	ldr	r3, [r1, #16]
 800bbea:	b973      	cbnz	r3, 800bc0a <_svfiprintf_r+0x36>
 800bbec:	2140      	movs	r1, #64	@ 0x40
 800bbee:	f7ff fb87 	bl	800b300 <_malloc_r>
 800bbf2:	6028      	str	r0, [r5, #0]
 800bbf4:	6128      	str	r0, [r5, #16]
 800bbf6:	b930      	cbnz	r0, 800bc06 <_svfiprintf_r+0x32>
 800bbf8:	230c      	movs	r3, #12
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bc00:	b01d      	add	sp, #116	@ 0x74
 800bc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc06:	2340      	movs	r3, #64	@ 0x40
 800bc08:	616b      	str	r3, [r5, #20]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc0e:	2320      	movs	r3, #32
 800bc10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc14:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc18:	2330      	movs	r3, #48	@ 0x30
 800bc1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bdb8 <_svfiprintf_r+0x1e4>
 800bc1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc22:	f04f 0901 	mov.w	r9, #1
 800bc26:	4623      	mov	r3, r4
 800bc28:	469a      	mov	sl, r3
 800bc2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc2e:	b10a      	cbz	r2, 800bc34 <_svfiprintf_r+0x60>
 800bc30:	2a25      	cmp	r2, #37	@ 0x25
 800bc32:	d1f9      	bne.n	800bc28 <_svfiprintf_r+0x54>
 800bc34:	ebba 0b04 	subs.w	fp, sl, r4
 800bc38:	d00b      	beq.n	800bc52 <_svfiprintf_r+0x7e>
 800bc3a:	465b      	mov	r3, fp
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4638      	mov	r0, r7
 800bc42:	f7ff ff6b 	bl	800bb1c <__ssputs_r>
 800bc46:	3001      	adds	r0, #1
 800bc48:	f000 80a7 	beq.w	800bd9a <_svfiprintf_r+0x1c6>
 800bc4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc4e:	445a      	add	r2, fp
 800bc50:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc52:	f89a 3000 	ldrb.w	r3, [sl]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f000 809f 	beq.w	800bd9a <_svfiprintf_r+0x1c6>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc66:	f10a 0a01 	add.w	sl, sl, #1
 800bc6a:	9304      	str	r3, [sp, #16]
 800bc6c:	9307      	str	r3, [sp, #28]
 800bc6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc72:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc74:	4654      	mov	r4, sl
 800bc76:	2205      	movs	r2, #5
 800bc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc7c:	484e      	ldr	r0, [pc, #312]	@ (800bdb8 <_svfiprintf_r+0x1e4>)
 800bc7e:	f7f4 faa7 	bl	80001d0 <memchr>
 800bc82:	9a04      	ldr	r2, [sp, #16]
 800bc84:	b9d8      	cbnz	r0, 800bcbe <_svfiprintf_r+0xea>
 800bc86:	06d0      	lsls	r0, r2, #27
 800bc88:	bf44      	itt	mi
 800bc8a:	2320      	movmi	r3, #32
 800bc8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc90:	0711      	lsls	r1, r2, #28
 800bc92:	bf44      	itt	mi
 800bc94:	232b      	movmi	r3, #43	@ 0x2b
 800bc96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc9a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bca0:	d015      	beq.n	800bcce <_svfiprintf_r+0xfa>
 800bca2:	9a07      	ldr	r2, [sp, #28]
 800bca4:	4654      	mov	r4, sl
 800bca6:	2000      	movs	r0, #0
 800bca8:	f04f 0c0a 	mov.w	ip, #10
 800bcac:	4621      	mov	r1, r4
 800bcae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcb2:	3b30      	subs	r3, #48	@ 0x30
 800bcb4:	2b09      	cmp	r3, #9
 800bcb6:	d94b      	bls.n	800bd50 <_svfiprintf_r+0x17c>
 800bcb8:	b1b0      	cbz	r0, 800bce8 <_svfiprintf_r+0x114>
 800bcba:	9207      	str	r2, [sp, #28]
 800bcbc:	e014      	b.n	800bce8 <_svfiprintf_r+0x114>
 800bcbe:	eba0 0308 	sub.w	r3, r0, r8
 800bcc2:	fa09 f303 	lsl.w	r3, r9, r3
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	9304      	str	r3, [sp, #16]
 800bcca:	46a2      	mov	sl, r4
 800bccc:	e7d2      	b.n	800bc74 <_svfiprintf_r+0xa0>
 800bcce:	9b03      	ldr	r3, [sp, #12]
 800bcd0:	1d19      	adds	r1, r3, #4
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	9103      	str	r1, [sp, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bfbb      	ittet	lt
 800bcda:	425b      	neglt	r3, r3
 800bcdc:	f042 0202 	orrlt.w	r2, r2, #2
 800bce0:	9307      	strge	r3, [sp, #28]
 800bce2:	9307      	strlt	r3, [sp, #28]
 800bce4:	bfb8      	it	lt
 800bce6:	9204      	strlt	r2, [sp, #16]
 800bce8:	7823      	ldrb	r3, [r4, #0]
 800bcea:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcec:	d10a      	bne.n	800bd04 <_svfiprintf_r+0x130>
 800bcee:	7863      	ldrb	r3, [r4, #1]
 800bcf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcf2:	d132      	bne.n	800bd5a <_svfiprintf_r+0x186>
 800bcf4:	9b03      	ldr	r3, [sp, #12]
 800bcf6:	1d1a      	adds	r2, r3, #4
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	9203      	str	r2, [sp, #12]
 800bcfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd00:	3402      	adds	r4, #2
 800bd02:	9305      	str	r3, [sp, #20]
 800bd04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bdc8 <_svfiprintf_r+0x1f4>
 800bd08:	7821      	ldrb	r1, [r4, #0]
 800bd0a:	2203      	movs	r2, #3
 800bd0c:	4650      	mov	r0, sl
 800bd0e:	f7f4 fa5f 	bl	80001d0 <memchr>
 800bd12:	b138      	cbz	r0, 800bd24 <_svfiprintf_r+0x150>
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	eba0 000a 	sub.w	r0, r0, sl
 800bd1a:	2240      	movs	r2, #64	@ 0x40
 800bd1c:	4082      	lsls	r2, r0
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	3401      	adds	r4, #1
 800bd22:	9304      	str	r3, [sp, #16]
 800bd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd28:	4824      	ldr	r0, [pc, #144]	@ (800bdbc <_svfiprintf_r+0x1e8>)
 800bd2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd2e:	2206      	movs	r2, #6
 800bd30:	f7f4 fa4e 	bl	80001d0 <memchr>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d036      	beq.n	800bda6 <_svfiprintf_r+0x1d2>
 800bd38:	4b21      	ldr	r3, [pc, #132]	@ (800bdc0 <_svfiprintf_r+0x1ec>)
 800bd3a:	bb1b      	cbnz	r3, 800bd84 <_svfiprintf_r+0x1b0>
 800bd3c:	9b03      	ldr	r3, [sp, #12]
 800bd3e:	3307      	adds	r3, #7
 800bd40:	f023 0307 	bic.w	r3, r3, #7
 800bd44:	3308      	adds	r3, #8
 800bd46:	9303      	str	r3, [sp, #12]
 800bd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd4a:	4433      	add	r3, r6
 800bd4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd4e:	e76a      	b.n	800bc26 <_svfiprintf_r+0x52>
 800bd50:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd54:	460c      	mov	r4, r1
 800bd56:	2001      	movs	r0, #1
 800bd58:	e7a8      	b.n	800bcac <_svfiprintf_r+0xd8>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	3401      	adds	r4, #1
 800bd5e:	9305      	str	r3, [sp, #20]
 800bd60:	4619      	mov	r1, r3
 800bd62:	f04f 0c0a 	mov.w	ip, #10
 800bd66:	4620      	mov	r0, r4
 800bd68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd6c:	3a30      	subs	r2, #48	@ 0x30
 800bd6e:	2a09      	cmp	r2, #9
 800bd70:	d903      	bls.n	800bd7a <_svfiprintf_r+0x1a6>
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0c6      	beq.n	800bd04 <_svfiprintf_r+0x130>
 800bd76:	9105      	str	r1, [sp, #20]
 800bd78:	e7c4      	b.n	800bd04 <_svfiprintf_r+0x130>
 800bd7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd7e:	4604      	mov	r4, r0
 800bd80:	2301      	movs	r3, #1
 800bd82:	e7f0      	b.n	800bd66 <_svfiprintf_r+0x192>
 800bd84:	ab03      	add	r3, sp, #12
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	462a      	mov	r2, r5
 800bd8a:	4b0e      	ldr	r3, [pc, #56]	@ (800bdc4 <_svfiprintf_r+0x1f0>)
 800bd8c:	a904      	add	r1, sp, #16
 800bd8e:	4638      	mov	r0, r7
 800bd90:	f7fd fe98 	bl	8009ac4 <_printf_float>
 800bd94:	1c42      	adds	r2, r0, #1
 800bd96:	4606      	mov	r6, r0
 800bd98:	d1d6      	bne.n	800bd48 <_svfiprintf_r+0x174>
 800bd9a:	89ab      	ldrh	r3, [r5, #12]
 800bd9c:	065b      	lsls	r3, r3, #25
 800bd9e:	f53f af2d 	bmi.w	800bbfc <_svfiprintf_r+0x28>
 800bda2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bda4:	e72c      	b.n	800bc00 <_svfiprintf_r+0x2c>
 800bda6:	ab03      	add	r3, sp, #12
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	462a      	mov	r2, r5
 800bdac:	4b05      	ldr	r3, [pc, #20]	@ (800bdc4 <_svfiprintf_r+0x1f0>)
 800bdae:	a904      	add	r1, sp, #16
 800bdb0:	4638      	mov	r0, r7
 800bdb2:	f7fe f91f 	bl	8009ff4 <_printf_i>
 800bdb6:	e7ed      	b.n	800bd94 <_svfiprintf_r+0x1c0>
 800bdb8:	0800c8d8 	.word	0x0800c8d8
 800bdbc:	0800c8e2 	.word	0x0800c8e2
 800bdc0:	08009ac5 	.word	0x08009ac5
 800bdc4:	0800bb1d 	.word	0x0800bb1d
 800bdc8:	0800c8de 	.word	0x0800c8de

0800bdcc <__sflush_r>:
 800bdcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd4:	0716      	lsls	r6, r2, #28
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	460c      	mov	r4, r1
 800bdda:	d454      	bmi.n	800be86 <__sflush_r+0xba>
 800bddc:	684b      	ldr	r3, [r1, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	dc02      	bgt.n	800bde8 <__sflush_r+0x1c>
 800bde2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	dd48      	ble.n	800be7a <__sflush_r+0xae>
 800bde8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdea:	2e00      	cmp	r6, #0
 800bdec:	d045      	beq.n	800be7a <__sflush_r+0xae>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bdf4:	682f      	ldr	r7, [r5, #0]
 800bdf6:	6a21      	ldr	r1, [r4, #32]
 800bdf8:	602b      	str	r3, [r5, #0]
 800bdfa:	d030      	beq.n	800be5e <__sflush_r+0x92>
 800bdfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	0759      	lsls	r1, r3, #29
 800be02:	d505      	bpl.n	800be10 <__sflush_r+0x44>
 800be04:	6863      	ldr	r3, [r4, #4]
 800be06:	1ad2      	subs	r2, r2, r3
 800be08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be0a:	b10b      	cbz	r3, 800be10 <__sflush_r+0x44>
 800be0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be0e:	1ad2      	subs	r2, r2, r3
 800be10:	2300      	movs	r3, #0
 800be12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be14:	6a21      	ldr	r1, [r4, #32]
 800be16:	4628      	mov	r0, r5
 800be18:	47b0      	blx	r6
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	d106      	bne.n	800be2e <__sflush_r+0x62>
 800be20:	6829      	ldr	r1, [r5, #0]
 800be22:	291d      	cmp	r1, #29
 800be24:	d82b      	bhi.n	800be7e <__sflush_r+0xb2>
 800be26:	4a2a      	ldr	r2, [pc, #168]	@ (800bed0 <__sflush_r+0x104>)
 800be28:	410a      	asrs	r2, r1
 800be2a:	07d6      	lsls	r6, r2, #31
 800be2c:	d427      	bmi.n	800be7e <__sflush_r+0xb2>
 800be2e:	2200      	movs	r2, #0
 800be30:	6062      	str	r2, [r4, #4]
 800be32:	04d9      	lsls	r1, r3, #19
 800be34:	6922      	ldr	r2, [r4, #16]
 800be36:	6022      	str	r2, [r4, #0]
 800be38:	d504      	bpl.n	800be44 <__sflush_r+0x78>
 800be3a:	1c42      	adds	r2, r0, #1
 800be3c:	d101      	bne.n	800be42 <__sflush_r+0x76>
 800be3e:	682b      	ldr	r3, [r5, #0]
 800be40:	b903      	cbnz	r3, 800be44 <__sflush_r+0x78>
 800be42:	6560      	str	r0, [r4, #84]	@ 0x54
 800be44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be46:	602f      	str	r7, [r5, #0]
 800be48:	b1b9      	cbz	r1, 800be7a <__sflush_r+0xae>
 800be4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be4e:	4299      	cmp	r1, r3
 800be50:	d002      	beq.n	800be58 <__sflush_r+0x8c>
 800be52:	4628      	mov	r0, r5
 800be54:	f7ff f9e0 	bl	800b218 <_free_r>
 800be58:	2300      	movs	r3, #0
 800be5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800be5c:	e00d      	b.n	800be7a <__sflush_r+0xae>
 800be5e:	2301      	movs	r3, #1
 800be60:	4628      	mov	r0, r5
 800be62:	47b0      	blx	r6
 800be64:	4602      	mov	r2, r0
 800be66:	1c50      	adds	r0, r2, #1
 800be68:	d1c9      	bne.n	800bdfe <__sflush_r+0x32>
 800be6a:	682b      	ldr	r3, [r5, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d0c6      	beq.n	800bdfe <__sflush_r+0x32>
 800be70:	2b1d      	cmp	r3, #29
 800be72:	d001      	beq.n	800be78 <__sflush_r+0xac>
 800be74:	2b16      	cmp	r3, #22
 800be76:	d11e      	bne.n	800beb6 <__sflush_r+0xea>
 800be78:	602f      	str	r7, [r5, #0]
 800be7a:	2000      	movs	r0, #0
 800be7c:	e022      	b.n	800bec4 <__sflush_r+0xf8>
 800be7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be82:	b21b      	sxth	r3, r3
 800be84:	e01b      	b.n	800bebe <__sflush_r+0xf2>
 800be86:	690f      	ldr	r7, [r1, #16]
 800be88:	2f00      	cmp	r7, #0
 800be8a:	d0f6      	beq.n	800be7a <__sflush_r+0xae>
 800be8c:	0793      	lsls	r3, r2, #30
 800be8e:	680e      	ldr	r6, [r1, #0]
 800be90:	bf08      	it	eq
 800be92:	694b      	ldreq	r3, [r1, #20]
 800be94:	600f      	str	r7, [r1, #0]
 800be96:	bf18      	it	ne
 800be98:	2300      	movne	r3, #0
 800be9a:	eba6 0807 	sub.w	r8, r6, r7
 800be9e:	608b      	str	r3, [r1, #8]
 800bea0:	f1b8 0f00 	cmp.w	r8, #0
 800bea4:	dde9      	ble.n	800be7a <__sflush_r+0xae>
 800bea6:	6a21      	ldr	r1, [r4, #32]
 800bea8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800beaa:	4643      	mov	r3, r8
 800beac:	463a      	mov	r2, r7
 800beae:	4628      	mov	r0, r5
 800beb0:	47b0      	blx	r6
 800beb2:	2800      	cmp	r0, #0
 800beb4:	dc08      	bgt.n	800bec8 <__sflush_r+0xfc>
 800beb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bebe:	81a3      	strh	r3, [r4, #12]
 800bec0:	f04f 30ff 	mov.w	r0, #4294967295
 800bec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec8:	4407      	add	r7, r0
 800beca:	eba8 0800 	sub.w	r8, r8, r0
 800bece:	e7e7      	b.n	800bea0 <__sflush_r+0xd4>
 800bed0:	dfbffffe 	.word	0xdfbffffe

0800bed4 <_fflush_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	690b      	ldr	r3, [r1, #16]
 800bed8:	4605      	mov	r5, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	b913      	cbnz	r3, 800bee4 <_fflush_r+0x10>
 800bede:	2500      	movs	r5, #0
 800bee0:	4628      	mov	r0, r5
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	b118      	cbz	r0, 800beee <_fflush_r+0x1a>
 800bee6:	6a03      	ldr	r3, [r0, #32]
 800bee8:	b90b      	cbnz	r3, 800beee <_fflush_r+0x1a>
 800beea:	f7fe fa2f 	bl	800a34c <__sinit>
 800beee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d0f3      	beq.n	800bede <_fflush_r+0xa>
 800bef6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bef8:	07d0      	lsls	r0, r2, #31
 800befa:	d404      	bmi.n	800bf06 <_fflush_r+0x32>
 800befc:	0599      	lsls	r1, r3, #22
 800befe:	d402      	bmi.n	800bf06 <_fflush_r+0x32>
 800bf00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf02:	f7fe fb3a 	bl	800a57a <__retarget_lock_acquire_recursive>
 800bf06:	4628      	mov	r0, r5
 800bf08:	4621      	mov	r1, r4
 800bf0a:	f7ff ff5f 	bl	800bdcc <__sflush_r>
 800bf0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf10:	07da      	lsls	r2, r3, #31
 800bf12:	4605      	mov	r5, r0
 800bf14:	d4e4      	bmi.n	800bee0 <_fflush_r+0xc>
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	059b      	lsls	r3, r3, #22
 800bf1a:	d4e1      	bmi.n	800bee0 <_fflush_r+0xc>
 800bf1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf1e:	f7fe fb2d 	bl	800a57c <__retarget_lock_release_recursive>
 800bf22:	e7dd      	b.n	800bee0 <_fflush_r+0xc>

0800bf24 <memmove>:
 800bf24:	4288      	cmp	r0, r1
 800bf26:	b510      	push	{r4, lr}
 800bf28:	eb01 0402 	add.w	r4, r1, r2
 800bf2c:	d902      	bls.n	800bf34 <memmove+0x10>
 800bf2e:	4284      	cmp	r4, r0
 800bf30:	4623      	mov	r3, r4
 800bf32:	d807      	bhi.n	800bf44 <memmove+0x20>
 800bf34:	1e43      	subs	r3, r0, #1
 800bf36:	42a1      	cmp	r1, r4
 800bf38:	d008      	beq.n	800bf4c <memmove+0x28>
 800bf3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf42:	e7f8      	b.n	800bf36 <memmove+0x12>
 800bf44:	4402      	add	r2, r0
 800bf46:	4601      	mov	r1, r0
 800bf48:	428a      	cmp	r2, r1
 800bf4a:	d100      	bne.n	800bf4e <memmove+0x2a>
 800bf4c:	bd10      	pop	{r4, pc}
 800bf4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf56:	e7f7      	b.n	800bf48 <memmove+0x24>

0800bf58 <_sbrk_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	4d06      	ldr	r5, [pc, #24]	@ (800bf74 <_sbrk_r+0x1c>)
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	4604      	mov	r4, r0
 800bf60:	4608      	mov	r0, r1
 800bf62:	602b      	str	r3, [r5, #0]
 800bf64:	f7f5 febc 	bl	8001ce0 <_sbrk>
 800bf68:	1c43      	adds	r3, r0, #1
 800bf6a:	d102      	bne.n	800bf72 <_sbrk_r+0x1a>
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	b103      	cbz	r3, 800bf72 <_sbrk_r+0x1a>
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	bd38      	pop	{r3, r4, r5, pc}
 800bf74:	200021f0 	.word	0x200021f0

0800bf78 <memcpy>:
 800bf78:	440a      	add	r2, r1
 800bf7a:	4291      	cmp	r1, r2
 800bf7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf80:	d100      	bne.n	800bf84 <memcpy+0xc>
 800bf82:	4770      	bx	lr
 800bf84:	b510      	push	{r4, lr}
 800bf86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf8e:	4291      	cmp	r1, r2
 800bf90:	d1f9      	bne.n	800bf86 <memcpy+0xe>
 800bf92:	bd10      	pop	{r4, pc}

0800bf94 <__assert_func>:
 800bf94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf96:	4614      	mov	r4, r2
 800bf98:	461a      	mov	r2, r3
 800bf9a:	4b09      	ldr	r3, [pc, #36]	@ (800bfc0 <__assert_func+0x2c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	68d8      	ldr	r0, [r3, #12]
 800bfa2:	b954      	cbnz	r4, 800bfba <__assert_func+0x26>
 800bfa4:	4b07      	ldr	r3, [pc, #28]	@ (800bfc4 <__assert_func+0x30>)
 800bfa6:	461c      	mov	r4, r3
 800bfa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfac:	9100      	str	r1, [sp, #0]
 800bfae:	462b      	mov	r3, r5
 800bfb0:	4905      	ldr	r1, [pc, #20]	@ (800bfc8 <__assert_func+0x34>)
 800bfb2:	f000 f86f 	bl	800c094 <fiprintf>
 800bfb6:	f000 f87f 	bl	800c0b8 <abort>
 800bfba:	4b04      	ldr	r3, [pc, #16]	@ (800bfcc <__assert_func+0x38>)
 800bfbc:	e7f4      	b.n	800bfa8 <__assert_func+0x14>
 800bfbe:	bf00      	nop
 800bfc0:	20000108 	.word	0x20000108
 800bfc4:	0800c92e 	.word	0x0800c92e
 800bfc8:	0800c900 	.word	0x0800c900
 800bfcc:	0800c8f3 	.word	0x0800c8f3

0800bfd0 <_calloc_r>:
 800bfd0:	b570      	push	{r4, r5, r6, lr}
 800bfd2:	fba1 5402 	umull	r5, r4, r1, r2
 800bfd6:	b93c      	cbnz	r4, 800bfe8 <_calloc_r+0x18>
 800bfd8:	4629      	mov	r1, r5
 800bfda:	f7ff f991 	bl	800b300 <_malloc_r>
 800bfde:	4606      	mov	r6, r0
 800bfe0:	b928      	cbnz	r0, 800bfee <_calloc_r+0x1e>
 800bfe2:	2600      	movs	r6, #0
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	bd70      	pop	{r4, r5, r6, pc}
 800bfe8:	220c      	movs	r2, #12
 800bfea:	6002      	str	r2, [r0, #0]
 800bfec:	e7f9      	b.n	800bfe2 <_calloc_r+0x12>
 800bfee:	462a      	mov	r2, r5
 800bff0:	4621      	mov	r1, r4
 800bff2:	f7fe fa44 	bl	800a47e <memset>
 800bff6:	e7f5      	b.n	800bfe4 <_calloc_r+0x14>

0800bff8 <__ascii_mbtowc>:
 800bff8:	b082      	sub	sp, #8
 800bffa:	b901      	cbnz	r1, 800bffe <__ascii_mbtowc+0x6>
 800bffc:	a901      	add	r1, sp, #4
 800bffe:	b142      	cbz	r2, 800c012 <__ascii_mbtowc+0x1a>
 800c000:	b14b      	cbz	r3, 800c016 <__ascii_mbtowc+0x1e>
 800c002:	7813      	ldrb	r3, [r2, #0]
 800c004:	600b      	str	r3, [r1, #0]
 800c006:	7812      	ldrb	r2, [r2, #0]
 800c008:	1e10      	subs	r0, r2, #0
 800c00a:	bf18      	it	ne
 800c00c:	2001      	movne	r0, #1
 800c00e:	b002      	add	sp, #8
 800c010:	4770      	bx	lr
 800c012:	4610      	mov	r0, r2
 800c014:	e7fb      	b.n	800c00e <__ascii_mbtowc+0x16>
 800c016:	f06f 0001 	mvn.w	r0, #1
 800c01a:	e7f8      	b.n	800c00e <__ascii_mbtowc+0x16>

0800c01c <_realloc_r>:
 800c01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c020:	4680      	mov	r8, r0
 800c022:	4615      	mov	r5, r2
 800c024:	460c      	mov	r4, r1
 800c026:	b921      	cbnz	r1, 800c032 <_realloc_r+0x16>
 800c028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c02c:	4611      	mov	r1, r2
 800c02e:	f7ff b967 	b.w	800b300 <_malloc_r>
 800c032:	b92a      	cbnz	r2, 800c040 <_realloc_r+0x24>
 800c034:	f7ff f8f0 	bl	800b218 <_free_r>
 800c038:	2400      	movs	r4, #0
 800c03a:	4620      	mov	r0, r4
 800c03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c040:	f000 f841 	bl	800c0c6 <_malloc_usable_size_r>
 800c044:	4285      	cmp	r5, r0
 800c046:	4606      	mov	r6, r0
 800c048:	d802      	bhi.n	800c050 <_realloc_r+0x34>
 800c04a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c04e:	d8f4      	bhi.n	800c03a <_realloc_r+0x1e>
 800c050:	4629      	mov	r1, r5
 800c052:	4640      	mov	r0, r8
 800c054:	f7ff f954 	bl	800b300 <_malloc_r>
 800c058:	4607      	mov	r7, r0
 800c05a:	2800      	cmp	r0, #0
 800c05c:	d0ec      	beq.n	800c038 <_realloc_r+0x1c>
 800c05e:	42b5      	cmp	r5, r6
 800c060:	462a      	mov	r2, r5
 800c062:	4621      	mov	r1, r4
 800c064:	bf28      	it	cs
 800c066:	4632      	movcs	r2, r6
 800c068:	f7ff ff86 	bl	800bf78 <memcpy>
 800c06c:	4621      	mov	r1, r4
 800c06e:	4640      	mov	r0, r8
 800c070:	f7ff f8d2 	bl	800b218 <_free_r>
 800c074:	463c      	mov	r4, r7
 800c076:	e7e0      	b.n	800c03a <_realloc_r+0x1e>

0800c078 <__ascii_wctomb>:
 800c078:	4603      	mov	r3, r0
 800c07a:	4608      	mov	r0, r1
 800c07c:	b141      	cbz	r1, 800c090 <__ascii_wctomb+0x18>
 800c07e:	2aff      	cmp	r2, #255	@ 0xff
 800c080:	d904      	bls.n	800c08c <__ascii_wctomb+0x14>
 800c082:	228a      	movs	r2, #138	@ 0x8a
 800c084:	601a      	str	r2, [r3, #0]
 800c086:	f04f 30ff 	mov.w	r0, #4294967295
 800c08a:	4770      	bx	lr
 800c08c:	700a      	strb	r2, [r1, #0]
 800c08e:	2001      	movs	r0, #1
 800c090:	4770      	bx	lr
	...

0800c094 <fiprintf>:
 800c094:	b40e      	push	{r1, r2, r3}
 800c096:	b503      	push	{r0, r1, lr}
 800c098:	4601      	mov	r1, r0
 800c09a:	ab03      	add	r3, sp, #12
 800c09c:	4805      	ldr	r0, [pc, #20]	@ (800c0b4 <fiprintf+0x20>)
 800c09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a2:	6800      	ldr	r0, [r0, #0]
 800c0a4:	9301      	str	r3, [sp, #4]
 800c0a6:	f000 f83f 	bl	800c128 <_vfiprintf_r>
 800c0aa:	b002      	add	sp, #8
 800c0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b0:	b003      	add	sp, #12
 800c0b2:	4770      	bx	lr
 800c0b4:	20000108 	.word	0x20000108

0800c0b8 <abort>:
 800c0b8:	b508      	push	{r3, lr}
 800c0ba:	2006      	movs	r0, #6
 800c0bc:	f000 fa08 	bl	800c4d0 <raise>
 800c0c0:	2001      	movs	r0, #1
 800c0c2:	f7f5 fd95 	bl	8001bf0 <_exit>

0800c0c6 <_malloc_usable_size_r>:
 800c0c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ca:	1f18      	subs	r0, r3, #4
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfbc      	itt	lt
 800c0d0:	580b      	ldrlt	r3, [r1, r0]
 800c0d2:	18c0      	addlt	r0, r0, r3
 800c0d4:	4770      	bx	lr

0800c0d6 <__sfputc_r>:
 800c0d6:	6893      	ldr	r3, [r2, #8]
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	b410      	push	{r4}
 800c0de:	6093      	str	r3, [r2, #8]
 800c0e0:	da08      	bge.n	800c0f4 <__sfputc_r+0x1e>
 800c0e2:	6994      	ldr	r4, [r2, #24]
 800c0e4:	42a3      	cmp	r3, r4
 800c0e6:	db01      	blt.n	800c0ec <__sfputc_r+0x16>
 800c0e8:	290a      	cmp	r1, #10
 800c0ea:	d103      	bne.n	800c0f4 <__sfputc_r+0x1e>
 800c0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0f0:	f000 b932 	b.w	800c358 <__swbuf_r>
 800c0f4:	6813      	ldr	r3, [r2, #0]
 800c0f6:	1c58      	adds	r0, r3, #1
 800c0f8:	6010      	str	r0, [r2, #0]
 800c0fa:	7019      	strb	r1, [r3, #0]
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <__sfputs_r>:
 800c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c106:	4606      	mov	r6, r0
 800c108:	460f      	mov	r7, r1
 800c10a:	4614      	mov	r4, r2
 800c10c:	18d5      	adds	r5, r2, r3
 800c10e:	42ac      	cmp	r4, r5
 800c110:	d101      	bne.n	800c116 <__sfputs_r+0x12>
 800c112:	2000      	movs	r0, #0
 800c114:	e007      	b.n	800c126 <__sfputs_r+0x22>
 800c116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c11a:	463a      	mov	r2, r7
 800c11c:	4630      	mov	r0, r6
 800c11e:	f7ff ffda 	bl	800c0d6 <__sfputc_r>
 800c122:	1c43      	adds	r3, r0, #1
 800c124:	d1f3      	bne.n	800c10e <__sfputs_r+0xa>
 800c126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c128 <_vfiprintf_r>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	460d      	mov	r5, r1
 800c12e:	b09d      	sub	sp, #116	@ 0x74
 800c130:	4614      	mov	r4, r2
 800c132:	4698      	mov	r8, r3
 800c134:	4606      	mov	r6, r0
 800c136:	b118      	cbz	r0, 800c140 <_vfiprintf_r+0x18>
 800c138:	6a03      	ldr	r3, [r0, #32]
 800c13a:	b90b      	cbnz	r3, 800c140 <_vfiprintf_r+0x18>
 800c13c:	f7fe f906 	bl	800a34c <__sinit>
 800c140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c142:	07d9      	lsls	r1, r3, #31
 800c144:	d405      	bmi.n	800c152 <_vfiprintf_r+0x2a>
 800c146:	89ab      	ldrh	r3, [r5, #12]
 800c148:	059a      	lsls	r2, r3, #22
 800c14a:	d402      	bmi.n	800c152 <_vfiprintf_r+0x2a>
 800c14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c14e:	f7fe fa14 	bl	800a57a <__retarget_lock_acquire_recursive>
 800c152:	89ab      	ldrh	r3, [r5, #12]
 800c154:	071b      	lsls	r3, r3, #28
 800c156:	d501      	bpl.n	800c15c <_vfiprintf_r+0x34>
 800c158:	692b      	ldr	r3, [r5, #16]
 800c15a:	b99b      	cbnz	r3, 800c184 <_vfiprintf_r+0x5c>
 800c15c:	4629      	mov	r1, r5
 800c15e:	4630      	mov	r0, r6
 800c160:	f000 f938 	bl	800c3d4 <__swsetup_r>
 800c164:	b170      	cbz	r0, 800c184 <_vfiprintf_r+0x5c>
 800c166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c168:	07dc      	lsls	r4, r3, #31
 800c16a:	d504      	bpl.n	800c176 <_vfiprintf_r+0x4e>
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	b01d      	add	sp, #116	@ 0x74
 800c172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c176:	89ab      	ldrh	r3, [r5, #12]
 800c178:	0598      	lsls	r0, r3, #22
 800c17a:	d4f7      	bmi.n	800c16c <_vfiprintf_r+0x44>
 800c17c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c17e:	f7fe f9fd 	bl	800a57c <__retarget_lock_release_recursive>
 800c182:	e7f3      	b.n	800c16c <_vfiprintf_r+0x44>
 800c184:	2300      	movs	r3, #0
 800c186:	9309      	str	r3, [sp, #36]	@ 0x24
 800c188:	2320      	movs	r3, #32
 800c18a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c18e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c192:	2330      	movs	r3, #48	@ 0x30
 800c194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c344 <_vfiprintf_r+0x21c>
 800c198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c19c:	f04f 0901 	mov.w	r9, #1
 800c1a0:	4623      	mov	r3, r4
 800c1a2:	469a      	mov	sl, r3
 800c1a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1a8:	b10a      	cbz	r2, 800c1ae <_vfiprintf_r+0x86>
 800c1aa:	2a25      	cmp	r2, #37	@ 0x25
 800c1ac:	d1f9      	bne.n	800c1a2 <_vfiprintf_r+0x7a>
 800c1ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c1b2:	d00b      	beq.n	800c1cc <_vfiprintf_r+0xa4>
 800c1b4:	465b      	mov	r3, fp
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f7ff ffa2 	bl	800c104 <__sfputs_r>
 800c1c0:	3001      	adds	r0, #1
 800c1c2:	f000 80a7 	beq.w	800c314 <_vfiprintf_r+0x1ec>
 800c1c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1c8:	445a      	add	r2, fp
 800c1ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 809f 	beq.w	800c314 <_vfiprintf_r+0x1ec>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1e0:	f10a 0a01 	add.w	sl, sl, #1
 800c1e4:	9304      	str	r3, [sp, #16]
 800c1e6:	9307      	str	r3, [sp, #28]
 800c1e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1ee:	4654      	mov	r4, sl
 800c1f0:	2205      	movs	r2, #5
 800c1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f6:	4853      	ldr	r0, [pc, #332]	@ (800c344 <_vfiprintf_r+0x21c>)
 800c1f8:	f7f3 ffea 	bl	80001d0 <memchr>
 800c1fc:	9a04      	ldr	r2, [sp, #16]
 800c1fe:	b9d8      	cbnz	r0, 800c238 <_vfiprintf_r+0x110>
 800c200:	06d1      	lsls	r1, r2, #27
 800c202:	bf44      	itt	mi
 800c204:	2320      	movmi	r3, #32
 800c206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c20a:	0713      	lsls	r3, r2, #28
 800c20c:	bf44      	itt	mi
 800c20e:	232b      	movmi	r3, #43	@ 0x2b
 800c210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c214:	f89a 3000 	ldrb.w	r3, [sl]
 800c218:	2b2a      	cmp	r3, #42	@ 0x2a
 800c21a:	d015      	beq.n	800c248 <_vfiprintf_r+0x120>
 800c21c:	9a07      	ldr	r2, [sp, #28]
 800c21e:	4654      	mov	r4, sl
 800c220:	2000      	movs	r0, #0
 800c222:	f04f 0c0a 	mov.w	ip, #10
 800c226:	4621      	mov	r1, r4
 800c228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c22c:	3b30      	subs	r3, #48	@ 0x30
 800c22e:	2b09      	cmp	r3, #9
 800c230:	d94b      	bls.n	800c2ca <_vfiprintf_r+0x1a2>
 800c232:	b1b0      	cbz	r0, 800c262 <_vfiprintf_r+0x13a>
 800c234:	9207      	str	r2, [sp, #28]
 800c236:	e014      	b.n	800c262 <_vfiprintf_r+0x13a>
 800c238:	eba0 0308 	sub.w	r3, r0, r8
 800c23c:	fa09 f303 	lsl.w	r3, r9, r3
 800c240:	4313      	orrs	r3, r2
 800c242:	9304      	str	r3, [sp, #16]
 800c244:	46a2      	mov	sl, r4
 800c246:	e7d2      	b.n	800c1ee <_vfiprintf_r+0xc6>
 800c248:	9b03      	ldr	r3, [sp, #12]
 800c24a:	1d19      	adds	r1, r3, #4
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	9103      	str	r1, [sp, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	bfbb      	ittet	lt
 800c254:	425b      	neglt	r3, r3
 800c256:	f042 0202 	orrlt.w	r2, r2, #2
 800c25a:	9307      	strge	r3, [sp, #28]
 800c25c:	9307      	strlt	r3, [sp, #28]
 800c25e:	bfb8      	it	lt
 800c260:	9204      	strlt	r2, [sp, #16]
 800c262:	7823      	ldrb	r3, [r4, #0]
 800c264:	2b2e      	cmp	r3, #46	@ 0x2e
 800c266:	d10a      	bne.n	800c27e <_vfiprintf_r+0x156>
 800c268:	7863      	ldrb	r3, [r4, #1]
 800c26a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c26c:	d132      	bne.n	800c2d4 <_vfiprintf_r+0x1ac>
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	1d1a      	adds	r2, r3, #4
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	9203      	str	r2, [sp, #12]
 800c276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c27a:	3402      	adds	r4, #2
 800c27c:	9305      	str	r3, [sp, #20]
 800c27e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c354 <_vfiprintf_r+0x22c>
 800c282:	7821      	ldrb	r1, [r4, #0]
 800c284:	2203      	movs	r2, #3
 800c286:	4650      	mov	r0, sl
 800c288:	f7f3 ffa2 	bl	80001d0 <memchr>
 800c28c:	b138      	cbz	r0, 800c29e <_vfiprintf_r+0x176>
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	eba0 000a 	sub.w	r0, r0, sl
 800c294:	2240      	movs	r2, #64	@ 0x40
 800c296:	4082      	lsls	r2, r0
 800c298:	4313      	orrs	r3, r2
 800c29a:	3401      	adds	r4, #1
 800c29c:	9304      	str	r3, [sp, #16]
 800c29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a2:	4829      	ldr	r0, [pc, #164]	@ (800c348 <_vfiprintf_r+0x220>)
 800c2a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2a8:	2206      	movs	r2, #6
 800c2aa:	f7f3 ff91 	bl	80001d0 <memchr>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d03f      	beq.n	800c332 <_vfiprintf_r+0x20a>
 800c2b2:	4b26      	ldr	r3, [pc, #152]	@ (800c34c <_vfiprintf_r+0x224>)
 800c2b4:	bb1b      	cbnz	r3, 800c2fe <_vfiprintf_r+0x1d6>
 800c2b6:	9b03      	ldr	r3, [sp, #12]
 800c2b8:	3307      	adds	r3, #7
 800c2ba:	f023 0307 	bic.w	r3, r3, #7
 800c2be:	3308      	adds	r3, #8
 800c2c0:	9303      	str	r3, [sp, #12]
 800c2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2c4:	443b      	add	r3, r7
 800c2c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2c8:	e76a      	b.n	800c1a0 <_vfiprintf_r+0x78>
 800c2ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	2001      	movs	r0, #1
 800c2d2:	e7a8      	b.n	800c226 <_vfiprintf_r+0xfe>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	3401      	adds	r4, #1
 800c2d8:	9305      	str	r3, [sp, #20]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	f04f 0c0a 	mov.w	ip, #10
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2e6:	3a30      	subs	r2, #48	@ 0x30
 800c2e8:	2a09      	cmp	r2, #9
 800c2ea:	d903      	bls.n	800c2f4 <_vfiprintf_r+0x1cc>
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0c6      	beq.n	800c27e <_vfiprintf_r+0x156>
 800c2f0:	9105      	str	r1, [sp, #20]
 800c2f2:	e7c4      	b.n	800c27e <_vfiprintf_r+0x156>
 800c2f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e7f0      	b.n	800c2e0 <_vfiprintf_r+0x1b8>
 800c2fe:	ab03      	add	r3, sp, #12
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	462a      	mov	r2, r5
 800c304:	4b12      	ldr	r3, [pc, #72]	@ (800c350 <_vfiprintf_r+0x228>)
 800c306:	a904      	add	r1, sp, #16
 800c308:	4630      	mov	r0, r6
 800c30a:	f7fd fbdb 	bl	8009ac4 <_printf_float>
 800c30e:	4607      	mov	r7, r0
 800c310:	1c78      	adds	r0, r7, #1
 800c312:	d1d6      	bne.n	800c2c2 <_vfiprintf_r+0x19a>
 800c314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c316:	07d9      	lsls	r1, r3, #31
 800c318:	d405      	bmi.n	800c326 <_vfiprintf_r+0x1fe>
 800c31a:	89ab      	ldrh	r3, [r5, #12]
 800c31c:	059a      	lsls	r2, r3, #22
 800c31e:	d402      	bmi.n	800c326 <_vfiprintf_r+0x1fe>
 800c320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c322:	f7fe f92b 	bl	800a57c <__retarget_lock_release_recursive>
 800c326:	89ab      	ldrh	r3, [r5, #12]
 800c328:	065b      	lsls	r3, r3, #25
 800c32a:	f53f af1f 	bmi.w	800c16c <_vfiprintf_r+0x44>
 800c32e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c330:	e71e      	b.n	800c170 <_vfiprintf_r+0x48>
 800c332:	ab03      	add	r3, sp, #12
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	462a      	mov	r2, r5
 800c338:	4b05      	ldr	r3, [pc, #20]	@ (800c350 <_vfiprintf_r+0x228>)
 800c33a:	a904      	add	r1, sp, #16
 800c33c:	4630      	mov	r0, r6
 800c33e:	f7fd fe59 	bl	8009ff4 <_printf_i>
 800c342:	e7e4      	b.n	800c30e <_vfiprintf_r+0x1e6>
 800c344:	0800c8d8 	.word	0x0800c8d8
 800c348:	0800c8e2 	.word	0x0800c8e2
 800c34c:	08009ac5 	.word	0x08009ac5
 800c350:	0800c105 	.word	0x0800c105
 800c354:	0800c8de 	.word	0x0800c8de

0800c358 <__swbuf_r>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	460e      	mov	r6, r1
 800c35c:	4614      	mov	r4, r2
 800c35e:	4605      	mov	r5, r0
 800c360:	b118      	cbz	r0, 800c36a <__swbuf_r+0x12>
 800c362:	6a03      	ldr	r3, [r0, #32]
 800c364:	b90b      	cbnz	r3, 800c36a <__swbuf_r+0x12>
 800c366:	f7fd fff1 	bl	800a34c <__sinit>
 800c36a:	69a3      	ldr	r3, [r4, #24]
 800c36c:	60a3      	str	r3, [r4, #8]
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	071a      	lsls	r2, r3, #28
 800c372:	d501      	bpl.n	800c378 <__swbuf_r+0x20>
 800c374:	6923      	ldr	r3, [r4, #16]
 800c376:	b943      	cbnz	r3, 800c38a <__swbuf_r+0x32>
 800c378:	4621      	mov	r1, r4
 800c37a:	4628      	mov	r0, r5
 800c37c:	f000 f82a 	bl	800c3d4 <__swsetup_r>
 800c380:	b118      	cbz	r0, 800c38a <__swbuf_r+0x32>
 800c382:	f04f 37ff 	mov.w	r7, #4294967295
 800c386:	4638      	mov	r0, r7
 800c388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	6922      	ldr	r2, [r4, #16]
 800c38e:	1a98      	subs	r0, r3, r2
 800c390:	6963      	ldr	r3, [r4, #20]
 800c392:	b2f6      	uxtb	r6, r6
 800c394:	4283      	cmp	r3, r0
 800c396:	4637      	mov	r7, r6
 800c398:	dc05      	bgt.n	800c3a6 <__swbuf_r+0x4e>
 800c39a:	4621      	mov	r1, r4
 800c39c:	4628      	mov	r0, r5
 800c39e:	f7ff fd99 	bl	800bed4 <_fflush_r>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d1ed      	bne.n	800c382 <__swbuf_r+0x2a>
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	60a3      	str	r3, [r4, #8]
 800c3ac:	6823      	ldr	r3, [r4, #0]
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	6022      	str	r2, [r4, #0]
 800c3b2:	701e      	strb	r6, [r3, #0]
 800c3b4:	6962      	ldr	r2, [r4, #20]
 800c3b6:	1c43      	adds	r3, r0, #1
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d004      	beq.n	800c3c6 <__swbuf_r+0x6e>
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	07db      	lsls	r3, r3, #31
 800c3c0:	d5e1      	bpl.n	800c386 <__swbuf_r+0x2e>
 800c3c2:	2e0a      	cmp	r6, #10
 800c3c4:	d1df      	bne.n	800c386 <__swbuf_r+0x2e>
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f7ff fd83 	bl	800bed4 <_fflush_r>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d0d9      	beq.n	800c386 <__swbuf_r+0x2e>
 800c3d2:	e7d6      	b.n	800c382 <__swbuf_r+0x2a>

0800c3d4 <__swsetup_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4b29      	ldr	r3, [pc, #164]	@ (800c47c <__swsetup_r+0xa8>)
 800c3d8:	4605      	mov	r5, r0
 800c3da:	6818      	ldr	r0, [r3, #0]
 800c3dc:	460c      	mov	r4, r1
 800c3de:	b118      	cbz	r0, 800c3e8 <__swsetup_r+0x14>
 800c3e0:	6a03      	ldr	r3, [r0, #32]
 800c3e2:	b90b      	cbnz	r3, 800c3e8 <__swsetup_r+0x14>
 800c3e4:	f7fd ffb2 	bl	800a34c <__sinit>
 800c3e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ec:	0719      	lsls	r1, r3, #28
 800c3ee:	d422      	bmi.n	800c436 <__swsetup_r+0x62>
 800c3f0:	06da      	lsls	r2, r3, #27
 800c3f2:	d407      	bmi.n	800c404 <__swsetup_r+0x30>
 800c3f4:	2209      	movs	r2, #9
 800c3f6:	602a      	str	r2, [r5, #0]
 800c3f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3fc:	81a3      	strh	r3, [r4, #12]
 800c3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c402:	e033      	b.n	800c46c <__swsetup_r+0x98>
 800c404:	0758      	lsls	r0, r3, #29
 800c406:	d512      	bpl.n	800c42e <__swsetup_r+0x5a>
 800c408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c40a:	b141      	cbz	r1, 800c41e <__swsetup_r+0x4a>
 800c40c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c410:	4299      	cmp	r1, r3
 800c412:	d002      	beq.n	800c41a <__swsetup_r+0x46>
 800c414:	4628      	mov	r0, r5
 800c416:	f7fe feff 	bl	800b218 <_free_r>
 800c41a:	2300      	movs	r3, #0
 800c41c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c41e:	89a3      	ldrh	r3, [r4, #12]
 800c420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c424:	81a3      	strh	r3, [r4, #12]
 800c426:	2300      	movs	r3, #0
 800c428:	6063      	str	r3, [r4, #4]
 800c42a:	6923      	ldr	r3, [r4, #16]
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	f043 0308 	orr.w	r3, r3, #8
 800c434:	81a3      	strh	r3, [r4, #12]
 800c436:	6923      	ldr	r3, [r4, #16]
 800c438:	b94b      	cbnz	r3, 800c44e <__swsetup_r+0x7a>
 800c43a:	89a3      	ldrh	r3, [r4, #12]
 800c43c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c444:	d003      	beq.n	800c44e <__swsetup_r+0x7a>
 800c446:	4621      	mov	r1, r4
 800c448:	4628      	mov	r0, r5
 800c44a:	f000 f883 	bl	800c554 <__smakebuf_r>
 800c44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c452:	f013 0201 	ands.w	r2, r3, #1
 800c456:	d00a      	beq.n	800c46e <__swsetup_r+0x9a>
 800c458:	2200      	movs	r2, #0
 800c45a:	60a2      	str	r2, [r4, #8]
 800c45c:	6962      	ldr	r2, [r4, #20]
 800c45e:	4252      	negs	r2, r2
 800c460:	61a2      	str	r2, [r4, #24]
 800c462:	6922      	ldr	r2, [r4, #16]
 800c464:	b942      	cbnz	r2, 800c478 <__swsetup_r+0xa4>
 800c466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c46a:	d1c5      	bne.n	800c3f8 <__swsetup_r+0x24>
 800c46c:	bd38      	pop	{r3, r4, r5, pc}
 800c46e:	0799      	lsls	r1, r3, #30
 800c470:	bf58      	it	pl
 800c472:	6962      	ldrpl	r2, [r4, #20]
 800c474:	60a2      	str	r2, [r4, #8]
 800c476:	e7f4      	b.n	800c462 <__swsetup_r+0x8e>
 800c478:	2000      	movs	r0, #0
 800c47a:	e7f7      	b.n	800c46c <__swsetup_r+0x98>
 800c47c:	20000108 	.word	0x20000108

0800c480 <_raise_r>:
 800c480:	291f      	cmp	r1, #31
 800c482:	b538      	push	{r3, r4, r5, lr}
 800c484:	4605      	mov	r5, r0
 800c486:	460c      	mov	r4, r1
 800c488:	d904      	bls.n	800c494 <_raise_r+0x14>
 800c48a:	2316      	movs	r3, #22
 800c48c:	6003      	str	r3, [r0, #0]
 800c48e:	f04f 30ff 	mov.w	r0, #4294967295
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c496:	b112      	cbz	r2, 800c49e <_raise_r+0x1e>
 800c498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c49c:	b94b      	cbnz	r3, 800c4b2 <_raise_r+0x32>
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f000 f830 	bl	800c504 <_getpid_r>
 800c4a4:	4622      	mov	r2, r4
 800c4a6:	4601      	mov	r1, r0
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ae:	f000 b817 	b.w	800c4e0 <_kill_r>
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d00a      	beq.n	800c4cc <_raise_r+0x4c>
 800c4b6:	1c59      	adds	r1, r3, #1
 800c4b8:	d103      	bne.n	800c4c2 <_raise_r+0x42>
 800c4ba:	2316      	movs	r3, #22
 800c4bc:	6003      	str	r3, [r0, #0]
 800c4be:	2001      	movs	r0, #1
 800c4c0:	e7e7      	b.n	800c492 <_raise_r+0x12>
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	4798      	blx	r3
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	e7e0      	b.n	800c492 <_raise_r+0x12>

0800c4d0 <raise>:
 800c4d0:	4b02      	ldr	r3, [pc, #8]	@ (800c4dc <raise+0xc>)
 800c4d2:	4601      	mov	r1, r0
 800c4d4:	6818      	ldr	r0, [r3, #0]
 800c4d6:	f7ff bfd3 	b.w	800c480 <_raise_r>
 800c4da:	bf00      	nop
 800c4dc:	20000108 	.word	0x20000108

0800c4e0 <_kill_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4d07      	ldr	r5, [pc, #28]	@ (800c500 <_kill_r+0x20>)
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	4608      	mov	r0, r1
 800c4ea:	4611      	mov	r1, r2
 800c4ec:	602b      	str	r3, [r5, #0]
 800c4ee:	f7f5 fb6f 	bl	8001bd0 <_kill>
 800c4f2:	1c43      	adds	r3, r0, #1
 800c4f4:	d102      	bne.n	800c4fc <_kill_r+0x1c>
 800c4f6:	682b      	ldr	r3, [r5, #0]
 800c4f8:	b103      	cbz	r3, 800c4fc <_kill_r+0x1c>
 800c4fa:	6023      	str	r3, [r4, #0]
 800c4fc:	bd38      	pop	{r3, r4, r5, pc}
 800c4fe:	bf00      	nop
 800c500:	200021f0 	.word	0x200021f0

0800c504 <_getpid_r>:
 800c504:	f7f5 bb5c 	b.w	8001bc0 <_getpid>

0800c508 <__swhatbuf_r>:
 800c508:	b570      	push	{r4, r5, r6, lr}
 800c50a:	460c      	mov	r4, r1
 800c50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c510:	2900      	cmp	r1, #0
 800c512:	b096      	sub	sp, #88	@ 0x58
 800c514:	4615      	mov	r5, r2
 800c516:	461e      	mov	r6, r3
 800c518:	da0d      	bge.n	800c536 <__swhatbuf_r+0x2e>
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c520:	f04f 0100 	mov.w	r1, #0
 800c524:	bf14      	ite	ne
 800c526:	2340      	movne	r3, #64	@ 0x40
 800c528:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c52c:	2000      	movs	r0, #0
 800c52e:	6031      	str	r1, [r6, #0]
 800c530:	602b      	str	r3, [r5, #0]
 800c532:	b016      	add	sp, #88	@ 0x58
 800c534:	bd70      	pop	{r4, r5, r6, pc}
 800c536:	466a      	mov	r2, sp
 800c538:	f000 f848 	bl	800c5cc <_fstat_r>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	dbec      	blt.n	800c51a <__swhatbuf_r+0x12>
 800c540:	9901      	ldr	r1, [sp, #4]
 800c542:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c546:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c54a:	4259      	negs	r1, r3
 800c54c:	4159      	adcs	r1, r3
 800c54e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c552:	e7eb      	b.n	800c52c <__swhatbuf_r+0x24>

0800c554 <__smakebuf_r>:
 800c554:	898b      	ldrh	r3, [r1, #12]
 800c556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c558:	079d      	lsls	r5, r3, #30
 800c55a:	4606      	mov	r6, r0
 800c55c:	460c      	mov	r4, r1
 800c55e:	d507      	bpl.n	800c570 <__smakebuf_r+0x1c>
 800c560:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	6123      	str	r3, [r4, #16]
 800c568:	2301      	movs	r3, #1
 800c56a:	6163      	str	r3, [r4, #20]
 800c56c:	b003      	add	sp, #12
 800c56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c570:	ab01      	add	r3, sp, #4
 800c572:	466a      	mov	r2, sp
 800c574:	f7ff ffc8 	bl	800c508 <__swhatbuf_r>
 800c578:	9f00      	ldr	r7, [sp, #0]
 800c57a:	4605      	mov	r5, r0
 800c57c:	4639      	mov	r1, r7
 800c57e:	4630      	mov	r0, r6
 800c580:	f7fe febe 	bl	800b300 <_malloc_r>
 800c584:	b948      	cbnz	r0, 800c59a <__smakebuf_r+0x46>
 800c586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c58a:	059a      	lsls	r2, r3, #22
 800c58c:	d4ee      	bmi.n	800c56c <__smakebuf_r+0x18>
 800c58e:	f023 0303 	bic.w	r3, r3, #3
 800c592:	f043 0302 	orr.w	r3, r3, #2
 800c596:	81a3      	strh	r3, [r4, #12]
 800c598:	e7e2      	b.n	800c560 <__smakebuf_r+0xc>
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	6020      	str	r0, [r4, #0]
 800c59e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5a2:	81a3      	strh	r3, [r4, #12]
 800c5a4:	9b01      	ldr	r3, [sp, #4]
 800c5a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5aa:	b15b      	cbz	r3, 800c5c4 <__smakebuf_r+0x70>
 800c5ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f000 f81d 	bl	800c5f0 <_isatty_r>
 800c5b6:	b128      	cbz	r0, 800c5c4 <__smakebuf_r+0x70>
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	f023 0303 	bic.w	r3, r3, #3
 800c5be:	f043 0301 	orr.w	r3, r3, #1
 800c5c2:	81a3      	strh	r3, [r4, #12]
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	431d      	orrs	r5, r3
 800c5c8:	81a5      	strh	r5, [r4, #12]
 800c5ca:	e7cf      	b.n	800c56c <__smakebuf_r+0x18>

0800c5cc <_fstat_r>:
 800c5cc:	b538      	push	{r3, r4, r5, lr}
 800c5ce:	4d07      	ldr	r5, [pc, #28]	@ (800c5ec <_fstat_r+0x20>)
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	4608      	mov	r0, r1
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	602b      	str	r3, [r5, #0]
 800c5da:	f7f5 fb59 	bl	8001c90 <_fstat>
 800c5de:	1c43      	adds	r3, r0, #1
 800c5e0:	d102      	bne.n	800c5e8 <_fstat_r+0x1c>
 800c5e2:	682b      	ldr	r3, [r5, #0]
 800c5e4:	b103      	cbz	r3, 800c5e8 <_fstat_r+0x1c>
 800c5e6:	6023      	str	r3, [r4, #0]
 800c5e8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ea:	bf00      	nop
 800c5ec:	200021f0 	.word	0x200021f0

0800c5f0 <_isatty_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	4d06      	ldr	r5, [pc, #24]	@ (800c60c <_isatty_r+0x1c>)
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	4608      	mov	r0, r1
 800c5fa:	602b      	str	r3, [r5, #0]
 800c5fc:	f7f5 fb58 	bl	8001cb0 <_isatty>
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d102      	bne.n	800c60a <_isatty_r+0x1a>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	b103      	cbz	r3, 800c60a <_isatty_r+0x1a>
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	200021f0 	.word	0x200021f0

0800c610 <_init>:
 800c610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c612:	bf00      	nop
 800c614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c616:	bc08      	pop	{r3}
 800c618:	469e      	mov	lr, r3
 800c61a:	4770      	bx	lr

0800c61c <_fini>:
 800c61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61e:	bf00      	nop
 800c620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c622:	bc08      	pop	{r3}
 800c624:	469e      	mov	lr, r3
 800c626:	4770      	bx	lr
