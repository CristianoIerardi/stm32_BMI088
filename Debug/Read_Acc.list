
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  08010d18  08010d18  00011d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115d0  080115d0  00013300  2**0
                  CONTENTS
  4 .ARM          00000008  080115d0  080115d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115d8  080115d8  00013300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115d8  080115d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080115dc  080115dc  000125dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000300  20000000  080115e0  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013300  2**0
                  CONTENTS
 10 .bss          00002028  20000300  20000300  00013300  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002328  20002328  00013300  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013300  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001849c  00000000  00000000  00013330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eee  00000000  00000000  0002b7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0002f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001084  00000000  00000000  00030c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005971  00000000  00000000  00031cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be06  00000000  00000000  00037665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6ddf  00000000  00000000  0005346b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a24a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007268  00000000  00000000  0011a290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001214f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000300 	.word	0x20000300
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010cfc 	.word	0x08010cfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000304 	.word	0x20000304
 80001cc:	08010cfc 	.word	0x08010cfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6a3a      	ldr	r2, [r7, #32]
 8000f5c:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f62:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2200      	movs	r2, #0
 8000f68:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6858      	ldr	r0, [r3, #4]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	899b      	ldrh	r3, [r3, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f003 fa06 	bl	8004390 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f002 fb9f 	bl	80036c8 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6858      	ldr	r0, [r3, #4]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	899b      	ldrh	r3, [r3, #12]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4619      	mov	r1, r3
 8000f96:	f003 f9fb 	bl	8004390 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000f9a:	2032      	movs	r0, #50	@ 0x32
 8000f9c:	f002 fb94 	bl	80036c8 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000fa0:	22b6      	movs	r2, #182	@ 0xb6
 8000fa2:	217e      	movs	r1, #126	@ 0x7e
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f959 	bl	800125c <BMI088_WriteAccRegister>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000fb4:	2032      	movs	r0, #50	@ 0x32
 8000fb6:	f002 fb87 	bl	80036c8 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8000fba:	f107 0316 	add.w	r3, r7, #22
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f8d0 	bl	8001168 <BMI088_ReadAccRegister>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	4413      	add	r3, r2
 8000fd0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f002 fb78 	bl	80036c8 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0x09); /* (no oversampling, ODR = 200 Hz, BW = ?? Hz /////////////////////////BW = 40 Hz) */
 8000fd8:	2209      	movs	r2, #9
 8000fda:	2140      	movs	r1, #64	@ 0x40
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 f93d 	bl	800125c <BMI088_WriteAccRegister>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	4413      	add	r3, r2
 8000fea:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fec:	200a      	movs	r0, #10
 8000fee:	f002 fb6b 	bl	80036c8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x01); /* +- 6g range */
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2141      	movs	r1, #65	@ 0x41
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f930 	bl	800125c <BMI088_WriteAccRegister>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	4413      	add	r3, r2
 8001004:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f002 fb5e 	bl	80036c8 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 800100c:	220a      	movs	r2, #10
 800100e:	2153      	movs	r1, #83	@ 0x53
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 f923 	bl	800125c <BMI088_WriteAccRegister>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	4413      	add	r3, r2
 800101e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f002 fb51 	bl	80036c8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8001026:	2204      	movs	r2, #4
 8001028:	2158      	movs	r1, #88	@ 0x58
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f916 	bl	800125c <BMI088_WriteAccRegister>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	4413      	add	r3, r2
 8001038:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f002 fb44 	bl	80036c8 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8001040:	2200      	movs	r2, #0
 8001042:	217c      	movs	r1, #124	@ 0x7c
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f909 	bl	800125c <BMI088_WriteAccRegister>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	4413      	add	r3, r2
 8001052:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f002 fb37 	bl	80036c8 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800105a:	2204      	movs	r2, #4
 800105c:	217d      	movs	r1, #125	@ 0x7d
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f8fc 	bl	800125c <BMI088_WriteAccRegister>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	4413      	add	r3, r2
 800106c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800106e:	200a      	movs	r0, #10
 8001070:	f002 fb2a 	bl	80036c8 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4a3a      	ldr	r2, [pc, #232]	@ (8001160 <BMI088_Init+0x228>)
 8001078:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2292      	movs	r2, #146	@ 0x92
 800107e:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	89db      	ldrh	r3, [r3, #14]
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	f003 f980 	bl	8004390 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001090:	22b6      	movs	r2, #182	@ 0xb6
 8001092:	2114      	movs	r1, #20
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f91b 	bl	80012d0 <BMI088_WriteGyrRegister>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	4413      	add	r3, r2
 80010a2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 80010a4:	20fa      	movs	r0, #250	@ 0xfa
 80010a6:	f002 fb0f 	bl	80036c8 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80010aa:	f107 0316 	add.w	r3, r7, #22
 80010ae:	461a      	mov	r2, r3
 80010b0:	2100      	movs	r1, #0
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f896 	bl	80011e4 <BMI088_ReadGyrRegister>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	4413      	add	r3, r2
 80010c0:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f002 fb00 	bl	80036c8 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80010c8:	2201      	movs	r2, #1
 80010ca:	210f      	movs	r1, #15
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 f8ff 	bl	80012d0 <BMI088_WriteGyrRegister>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	4413      	add	r3, r2
 80010da:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f002 faf3 	bl	80036c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* ODR = 200 Hz, Filter bandwidth = 64 Hz */
 80010e2:	2206      	movs	r2, #6
 80010e4:	2110      	movs	r1, #16
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 f8f2 	bl	80012d0 <BMI088_WriteGyrRegister>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	4413      	add	r3, r2
 80010f4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f002 fae6 	bl	80036c8 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	2115      	movs	r1, #21
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 f8e5 	bl	80012d0 <BMI088_WriteGyrRegister>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	7dfb      	ldrb	r3, [r7, #23]
 800110c:	4413      	add	r3, r2
 800110e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f002 fad9 	bl	80036c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001116:	2201      	movs	r2, #1
 8001118:	2116      	movs	r1, #22
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 f8d8 	bl	80012d0 <BMI088_WriteGyrRegister>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	4413      	add	r3, r2
 8001128:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800112a:	200a      	movs	r0, #10
 800112c:	f002 facc 	bl	80036c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001130:	2201      	movs	r2, #1
 8001132:	2118      	movs	r1, #24
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 f8cb 	bl	80012d0 <BMI088_WriteGyrRegister>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	4413      	add	r3, r2
 8001142:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f002 fabf 	bl	80036c8 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <BMI088_Init+0x22c>)
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2282      	movs	r2, #130	@ 0x82
 8001154:	769a      	strb	r2, [r3, #26]

	return status;
 8001156:	7dfb      	ldrb	r3, [r7, #23]

}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	3a6b70a4 	.word	0x3a6b70a4
 8001164:	3a0ba058 	.word	0x3a0ba058

08001168 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af02      	add	r7, sp, #8
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	460b      	mov	r3, r1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800117c:	b2db      	uxtb	r3, r3
 800117e:	753b      	strb	r3, [r7, #20]
 8001180:	2300      	movs	r3, #0
 8001182:	757b      	strb	r3, [r7, #21]
 8001184:	2300      	movs	r3, #0
 8001186:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6858      	ldr	r0, [r3, #4]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	899b      	ldrh	r3, [r3, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f003 f8fc 	bl	8004390 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0114 	add.w	r1, r7, #20
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2303      	movs	r3, #3
 80011ac:	f005 f9c9 	bl	8006542 <HAL_SPI_TransmitReceive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf0c      	ite	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	2300      	movne	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6858      	ldr	r0, [r3, #4]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	899b      	ldrh	r3, [r3, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	f003 f8e1 	bl	8004390 <HAL_GPIO_WritePin>

	if (status == 1) {
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d102      	bne.n	80011da <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 80011d4:	7cba      	ldrb	r2, [r7, #18]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80011da:	7dfb      	ldrb	r3, [r7, #23]

}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	460b      	mov	r3, r1
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	753b      	strb	r3, [r7, #20]
 80011fc:	2300      	movs	r3, #0
 80011fe:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6898      	ldr	r0, [r3, #8]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	89db      	ldrh	r3, [r3, #14]
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	f003 f8c0 	bl	8004390 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	f107 0210 	add.w	r2, r7, #16
 8001218:	f107 0114 	add.w	r1, r7, #20
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2302      	movs	r3, #2
 8001224:	f005 f98d 	bl	8006542 <HAL_SPI_TransmitReceive>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6898      	ldr	r0, [r3, #8]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	89db      	ldrh	r3, [r3, #14]
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	f003 f8a5 	bl	8004390 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 800124c:	7c7a      	ldrb	r2, [r7, #17]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8001252:	7dfb      	ldrb	r3, [r7, #23]

}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
 8001268:	4613      	mov	r3, r2
 800126a:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	733b      	strb	r3, [r7, #12]
 8001270:	78bb      	ldrb	r3, [r7, #2]
 8001272:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6858      	ldr	r0, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	899b      	ldrh	r3, [r3, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	f003 f886 	bl	8004390 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	f107 010c 	add.w	r1, r7, #12
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	2202      	movs	r2, #2
 8001292:	f005 f812 	bl	80062ba <HAL_SPI_Transmit>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80012a4:	bf00      	nop
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f005 fd0a 	bl	8006cc4 <HAL_SPI_GetState>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d1f7      	bne.n	80012a6 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6858      	ldr	r0, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	899b      	ldrh	r3, [r3, #12]
 80012be:	2201      	movs	r2, #1
 80012c0:	4619      	mov	r1, r3
 80012c2:	f003 f865 	bl	8004390 <HAL_GPIO_WritePin>

	return status;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
 80012dc:	4613      	mov	r3, r2
 80012de:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	733b      	strb	r3, [r7, #12]
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6898      	ldr	r0, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	89db      	ldrh	r3, [r3, #14]
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	f003 f84c 	bl	8004390 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	f107 010c 	add.w	r1, r7, #12
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	2202      	movs	r2, #2
 8001306:	f004 ffd8 	bl	80062ba <HAL_SPI_Transmit>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001318:	bf00      	nop
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f005 fcd0 	bl	8006cc4 <HAL_SPI_GetState>
 8001324:	4603      	mov	r3, r0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d1f7      	bne.n	800131a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6898      	ldr	r0, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	89db      	ldrh	r3, [r3, #14]
 8001332:	2201      	movs	r2, #1
 8001334:	4619      	mov	r1, r3
 8001336:	f003 f82b 	bl	8004390 <HAL_GPIO_WritePin>

	return status;
 800133a:	7bfb      	ldrb	r3, [r7, #15]

}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

	if (imu->readingAcc)  // To not have double calls
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7c1b      	ldrb	r3, [r3, #16]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <BMI088_ReadAccelerometerDMA+0x14>
		return 0;
 8001354:	2300      	movs	r3, #0
 8001356:	e023      	b.n	80013a0 <BMI088_ReadAccelerometerDMA+0x5c>

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6858      	ldr	r0, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	899b      	ldrh	r3, [r3, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	f003 f814 	bl	8004390 <HAL_GPIO_WritePin>

	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f103 0112 	add.w	r1, r3, #18
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8001378:	2308      	movs	r3, #8
 800137a:	f005 fa8b 	bl	8006894 <HAL_SPI_TransmitReceive_DMA>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d104      	bne.n	800138e <BMI088_ReadAccelerometerDMA+0x4a>

		imu->readingAcc = 1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	741a      	strb	r2, [r3, #16]
		return 1;
 800138a:	2301      	movs	r3, #1
 800138c:	e008      	b.n	80013a0 <BMI088_ReadAccelerometerDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6858      	ldr	r0, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	899b      	ldrh	r3, [r3, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	4619      	mov	r1, r3
 800139a:	f002 fff9 	bl	8004390 <HAL_GPIO_WritePin>
		return 0;
 800139e:	2300      	movs	r3, #0

	}

}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6858      	ldr	r0, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	899b      	ldrh	r3, [r3, #12]
 80013b8:	2201      	movs	r2, #1
 80013ba:	4619      	mov	r1, r3
 80013bc:	f002 ffe8 	bl	8004390 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001400:	b2db      	uxtb	r3, r3
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21a      	sxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800140c:	b2db      	uxtb	r3, r3
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX * 2;		// *2 was added by Cristiano.
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800141a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY * 2;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800143a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ * 2;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800145a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

	if (imu->readingGyr)  // To not have double calls
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7c5b      	ldrb	r3, [r3, #17]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <BMI088_ReadGyroscopeDMA+0x14>
		return 0;
 800148c:	2300      	movs	r3, #0
 800148e:	e023      	b.n	80014d8 <BMI088_ReadGyroscopeDMA+0x5c>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6898      	ldr	r0, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	89db      	ldrh	r3, [r3, #14]
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	f002 ff78 	bl	8004390 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f103 011a 	add.w	r1, r3, #26
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80014b0:	2307      	movs	r3, #7
 80014b2:	f005 f9ef 	bl	8006894 <HAL_SPI_TransmitReceive_DMA>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d104      	bne.n	80014c6 <BMI088_ReadGyroscopeDMA+0x4a>

		imu->readingGyr = 1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	745a      	strb	r2, [r3, #17]
		return 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e008      	b.n	80014d8 <BMI088_ReadGyroscopeDMA+0x5c>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6898      	ldr	r0, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	89db      	ldrh	r3, [r3, #14]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4619      	mov	r1, r3
 80014d2:	f002 ff5d 	bl	8004390 <HAL_GPIO_WritePin>
		return 0;
 80014d6:	2300      	movs	r3, #0

	}

}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6898      	ldr	r0, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	89db      	ldrh	r3, [r3, #14]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f002 ff4c 	bl	8004390 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001504:	b2db      	uxtb	r3, r3
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001510:	b2db      	uxtb	r3, r3
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800151e:	b2db      	uxtb	r3, r3
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800152a:	b2db      	uxtb	r3, r3
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001538:	b2db      	uxtb	r3, r3
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001544:	b2db      	uxtb	r3, r3
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800156e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800158a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <QuaternionToEuler>:
    NormalizeQuaternion(q_out);
}


// Conversion from quaternion to euler angles
void QuaternionToEuler(Quaternion q, float* ang) {
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b08c      	sub	sp, #48	@ 0x30
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	eeb0 6a40 	vmov.f32	s12, s0
 80015b2:	eef0 6a60 	vmov.f32	s13, s1
 80015b6:	eeb0 7a41 	vmov.f32	s14, s2
 80015ba:	eef0 7a61 	vmov.f32	s15, s3
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	ed87 6a02 	vstr	s12, [r7, #8]
 80015c4:	edc7 6a03 	vstr	s13, [r7, #12]
 80015c8:	ed87 7a04 	vstr	s14, [r7, #16]
 80015cc:	edc7 7a05 	vstr	s15, [r7, #20]
    //EulerAngles angles;

    // Roll (X-axis rotation)
    float sinr_cosp = 2.0f * (q.w * q.x + q.y * q.z);
 80015d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80015d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015dc:	edd7 6a04 	vldr	s13, [r7, #16]
 80015e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015f0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float cosr_cosp = 1.0f - 2.0f * (q.x * q.x + q.y * q.y);
 80015f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80015f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001600:	edd7 6a04 	vldr	s13, [r7, #16]
 8001604:	edd7 7a04 	vldr	s15, [r7, #16]
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001614:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles.roll = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
    ang[0] = atan2(sinr_cosp, cosr_cosp) * RAD_TO_DEG;
 8001620:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	4604      	mov	r4, r0
 8001628:	460d      	mov	r5, r1
 800162a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800162c:	f7fe ff8c 	bl	8000548 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	ec43 2b11 	vmov	d1, r2, r3
 8001638:	ec45 4b10 	vmov	d0, r4, r5
 800163c:	f00d f8b2 	bl	800e7a4 <atan2>
 8001640:	ec51 0b10 	vmov	r0, r1, d0
 8001644:	a356      	add	r3, pc, #344	@ (adr r3, 80017a0 <QuaternionToEuler+0x1f8>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7fe ffd5 	bl	80005f8 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff faa7 	bl	8000ba8 <__aeabi_d2f>
 800165a:	4602      	mov	r2, r0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	601a      	str	r2, [r3, #0]

    // Pitch (Y-axis rotation)
    float sinp = 2.0f * (q.w * q.y - q.z * q.x);
 8001660:	ed97 7a02 	vldr	s14, [r7, #8]
 8001664:	edd7 7a04 	vldr	s15, [r7, #16]
 8001668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001670:	edd7 7a03 	vldr	s15, [r7, #12]
 8001674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001680:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (fabs(sinp) >= 1)
 8001684:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001688:	eef0 7ae7 	vabs.f32	s15, s15
 800168c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	db13      	blt.n	80016c2 <QuaternionToEuler+0x11a>
        ang[1] = copysign(90.0f, sinp); // Evita errori numerici, blocco di gimbal lock
 800169a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800169c:	f7fe ff54 	bl	8000548 <__aeabi_f2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	ec43 2b11 	vmov	d1, r2, r3
 80016a8:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8001798 <QuaternionToEuler+0x1f0>
 80016ac:	f00a fffb 	bl	800c6a6 <copysign>
 80016b0:	ec51 0b10 	vmov	r0, r1, d0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	1d1c      	adds	r4, r3, #4
 80016b8:	f7ff fa76 	bl	8000ba8 <__aeabi_d2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	6023      	str	r3, [r4, #0]
 80016c0:	e019      	b.n	80016f6 <QuaternionToEuler+0x14e>
    else
        ang[1] = asin(sinp) * RAD_TO_DEG;
 80016c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016c4:	f7fe ff40 	bl	8000548 <__aeabi_f2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	ec43 2b10 	vmov	d0, r2, r3
 80016d0:	f00d f834 	bl	800e73c <asin>
 80016d4:	ec51 0b10 	vmov	r0, r1, d0
 80016d8:	a331      	add	r3, pc, #196	@ (adr r3, 80017a0 <QuaternionToEuler+0x1f8>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe ff8b 	bl	80005f8 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	1d1c      	adds	r4, r3, #4
 80016ee:	f7ff fa5b 	bl	8000ba8 <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	6023      	str	r3, [r4, #0]

    // Yaw (Z-axis rotation)
    float siny_cosp = 2.0f * (q.w * q.z + q.x * q.y);
 80016f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80016fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001702:	edd7 6a03 	vldr	s13, [r7, #12]
 8001706:	edd7 7a04 	vldr	s15, [r7, #16]
 800170a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001716:	edc7 7a08 	vstr	s15, [r7, #32]
    float cosy_cosp = 1.0f - 2.0f * (q.y * q.y + q.z * q.z);
 800171a:	ed97 7a04 	vldr	s14, [r7, #16]
 800171e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001726:	edd7 6a05 	vldr	s13, [r7, #20]
 800172a:	edd7 7a05 	vldr	s15, [r7, #20]
 800172e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001736:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800173a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800173e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001742:	edc7 7a07 	vstr	s15, [r7, #28]
    ang[2] = atan2(siny_cosp, cosy_cosp) * RAD_TO_DEG;
 8001746:	6a38      	ldr	r0, [r7, #32]
 8001748:	f7fe fefe 	bl	8000548 <__aeabi_f2d>
 800174c:	4604      	mov	r4, r0
 800174e:	460d      	mov	r5, r1
 8001750:	69f8      	ldr	r0, [r7, #28]
 8001752:	f7fe fef9 	bl	8000548 <__aeabi_f2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	ec43 2b11 	vmov	d1, r2, r3
 800175e:	ec45 4b10 	vmov	d0, r4, r5
 8001762:	f00d f81f 	bl	800e7a4 <atan2>
 8001766:	ec51 0b10 	vmov	r0, r1, d0
 800176a:	a30d      	add	r3, pc, #52	@ (adr r3, 80017a0 <QuaternionToEuler+0x1f8>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff42 	bl	80005f8 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f103 0408 	add.w	r4, r3, #8
 8001782:	f7ff fa11 	bl	8000ba8 <__aeabi_d2f>
 8001786:	4603      	mov	r3, r0
 8001788:	6023      	str	r3, [r4, #0]


    /*ang[0] = angles.roll;
    ang[1] = angles.pitch;
    ang[2] = angles.yaw;*/
}
 800178a:	bf00      	nop
 800178c:	3730      	adds	r7, #48	@ 0x30
 800178e:	46bd      	mov	sp, r7
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	bf00      	nop
 8001794:	f3af 8000 	nop.w
 8001798:	00000000 	.word	0x00000000
 800179c:	40568000 	.word	0x40568000
 80017a0:	20000000 	.word	0x20000000
 80017a4:	404ca5dc 	.word	0x404ca5dc

080017a8 <SetQuaternionFromEuler>:


// Set angles to a specified quantity
void SetQuaternionFromEuler(Quaternion *q, float roll, float pitch, float yaw) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80017b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80017b8:	ed87 1a00 	vstr	s2, [r7]
	roll = roll * DEG_TO_RAD;
 80017bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80017c0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800194c <SetQuaternionFromEuler+0x1a4>
 80017c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c8:	edc7 7a02 	vstr	s15, [r7, #8]
	pitch = pitch * DEG_TO_RAD;
 80017cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800194c <SetQuaternionFromEuler+0x1a4>
 80017d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d8:	edc7 7a01 	vstr	s15, [r7, #4]
	yaw = yaw* DEG_TO_RAD;
 80017dc:	edd7 7a00 	vldr	s15, [r7]
 80017e0:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800194c <SetQuaternionFromEuler+0x1a4>
 80017e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e8:	edc7 7a00 	vstr	s15, [r7]
    float cr = cosf(roll * 0.5f);
 80017ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80017f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f8:	eeb0 0a67 	vmov.f32	s0, s15
 80017fc:	f00d f8ae 	bl	800e95c <cosf>
 8001800:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float sr = sinf(roll * 0.5f);
 8001804:	edd7 7a02 	vldr	s15, [r7, #8]
 8001808:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800180c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	f00d f8ee 	bl	800e9f4 <sinf>
 8001818:	ed87 0a08 	vstr	s0, [r7, #32]
    float cp = cosf(pitch * 0.5f);
 800181c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001820:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001828:	eeb0 0a67 	vmov.f32	s0, s15
 800182c:	f00d f896 	bl	800e95c <cosf>
 8001830:	ed87 0a07 	vstr	s0, [r7, #28]
    float sp = sinf(pitch * 0.5f);
 8001834:	edd7 7a01 	vldr	s15, [r7, #4]
 8001838:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800183c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001840:	eeb0 0a67 	vmov.f32	s0, s15
 8001844:	f00d f8d6 	bl	800e9f4 <sinf>
 8001848:	ed87 0a06 	vstr	s0, [r7, #24]
    float cy = cosf(yaw * 0.5f);
 800184c:	edd7 7a00 	vldr	s15, [r7]
 8001850:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f00d f87e 	bl	800e95c <cosf>
 8001860:	ed87 0a05 	vstr	s0, [r7, #20]
    float sy = sinf(yaw * 0.5f);
 8001864:	edd7 7a00 	vldr	s15, [r7]
 8001868:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800186c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	f00d f8be 	bl	800e9f4 <sinf>
 8001878:	ed87 0a04 	vstr	s0, [r7, #16]

    q->w = cr * cp * cy + sr * sp * sy;
 800187c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001880:	edd7 7a07 	vldr	s15, [r7, #28]
 8001884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001888:	edd7 7a05 	vldr	s15, [r7, #20]
 800188c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001890:	edd7 6a08 	vldr	s13, [r7, #32]
 8001894:	edd7 7a06 	vldr	s15, [r7, #24]
 8001898:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800189c:	edd7 7a04 	vldr	s15, [r7, #16]
 80018a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	edc3 7a00 	vstr	s15, [r3]
    q->x = sr * cp * cy - cr * sp * sy;
 80018ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80018b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80018be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80018c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80018ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y = cr * sp * cy + sr * cp * sy;
 80018e0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80018e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80018f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f4:	edd7 6a08 	vldr	s13, [r7, #32]
 80018f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80018fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001900:	edd7 7a04 	vldr	s15, [r7, #16]
 8001904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z = cr * cp * sy - sr * sp * cy;
 8001912:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001916:	edd7 7a07 	vldr	s15, [r7, #28]
 800191a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800191e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001926:	edd7 6a08 	vldr	s13, [r7, #32]
 800192a:	edd7 7a06 	vldr	s15, [r7, #24]
 800192e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001932:	edd7 7a05 	vldr	s15, [r7, #20]
 8001936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	@ 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	3c8efa39 	.word	0x3c8efa39

08001950 <Filter_Init>:
/// ######################################################################################################
/// ##### FILTER SECTION #################################################################################
/// ######################################################################################################

void Filter_Init(LPF_FILTER *filt, float f_LP_gyr, float f_LP_acc, float f_HP_gyr, float f_HP_acc, float f_LP_angles, float dt)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	@ 0x30
 8001954:	af00      	add	r7, sp, #0
 8001956:	61f8      	str	r0, [r7, #28]
 8001958:	ed87 0a06 	vstr	s0, [r7, #24]
 800195c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001960:	ed87 1a04 	vstr	s2, [r7, #16]
 8001964:	edc7 1a03 	vstr	s3, [r7, #12]
 8001968:	ed87 2a02 	vstr	s4, [r7, #8]
 800196c:	edc7 2a01 	vstr	s5, [r7, #4]
	LPF_Init(filt, f_LP_gyr, f_LP_acc, f_LP_angles, dt);
 8001970:	edd7 1a01 	vldr	s3, [r7, #4]
 8001974:	ed97 1a02 	vldr	s2, [r7, #8]
 8001978:	edd7 0a05 	vldr	s1, [r7, #20]
 800197c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001980:	69f8      	ldr	r0, [r7, #28]
 8001982:	f000 f968 	bl	8001c56 <LPF_Init>
	HPF_Init(filt, f_HP_gyr, f_HP_acc, dt);
 8001986:	ed97 1a01 	vldr	s2, [r7, #4]
 800198a:	edd7 0a03 	vldr	s1, [r7, #12]
 800198e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001992:	69f8      	ldr	r0, [r7, #28]
 8001994:	f000 fa55 	bl	8001e42 <HPF_Init>

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800199c:	e038      	b.n	8001a10 <Filter_Init+0xc0>
	{
		filt->filt_gyr_x[i] = 0.0f;					// filt_gyr_x[0] -> past filtered sample   //	filt_gyr_x[1] -> curr filtered sample
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a2:	3304      	adds	r3, #4
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	3304      	adds	r3, #4
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_y[i] = 0.0f;					// filt_gyr_x[0] ==> y(n)
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b4:	3306      	adds	r3, #6
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	3304      	adds	r3, #4
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
		filt->filt_gyr_z[i] = 0.0f;					// filt_gyr_x[1] ==> y(n-1)
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c6:	3308      	adds	r3, #8
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3304      	adds	r3, #4
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
		filt->filt_acc_x[i] = 0.0f;
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d8:	330a      	adds	r3, #10
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	3304      	adds	r3, #4
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
		filt->filt_acc_y[i] = 0.0f;
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ea:	330c      	adds	r3, #12
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	3304      	adds	r3, #4
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
		filt->filt_acc_z[i] = 0.0f;
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fc:	330e      	adds	r3, #14
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3304      	adds	r3, #4
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	ddc3      	ble.n	800199e <Filter_Init+0x4e>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a1a:	e038      	b.n	8001a8e <Filter_Init+0x13e>
	{
		filt->not_filt_gyr_x[i] = 0.0f;					// not_filt_gyr_x[0] -> past not filtered sample   //	not_filt_gyr_x[1] -> curr not filtered sample
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a20:	3310      	adds	r3, #16
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	3304      	adds	r3, #4
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_y[i] = 0.0f;					// not_filt_gyr_x[0] ==> x(n)
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a32:	3312      	adds	r3, #18
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3304      	adds	r3, #4
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
		filt->not_filt_gyr_z[i] = 0.0f;					// not_filt_gyr_x[1] ==> x(n-1)
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a44:	3314      	adds	r3, #20
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_x[i] = 0.0f;
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a56:	3316      	adds	r3, #22
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_y[i] = 0.0f;
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a68:	3318      	adds	r3, #24
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3304      	adds	r3, #4
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
		filt->not_filt_acc_z[i] = 0.0f;
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7a:	331a      	adds	r3, #26
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	3304      	adds	r3, #4
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	ddc3      	ble.n	8001a1c <Filter_Init+0xcc>
	}

	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a98:	e01d      	b.n	8001ad6 <Filter_Init+0x186>
	{
		filt->filt_ang_x[i] = 0.0f;
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	331c      	adds	r3, #28
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
		filt->filt_ang_y[i] = 0.0f;
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	331e      	adds	r3, #30
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
		filt->filt_ang_z[i] = 0.0f;
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac2:	3320      	adds	r3, #32
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3304      	adds	r3, #4
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
	for(int i=0; i<N_FILT_SAMPLES; i++)
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	ddde      	ble.n	8001a9a <Filter_Init+0x14a>
	}
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3730      	adds	r7, #48	@ 0x30
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <LPF_CalculateAlpha>:
/// ##### LOW PASS FILTER for GYRO&ACC SECTION ###########################################################
/// ######################################################################################################

/// Alpha calculation for LPF filter in general --> (GYR&ACC and ANGLES)
float LPF_CalculateAlpha(float f_cut, float dt)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	ed87 0a01 	vstr	s0, [r7, #4]
 8001af2:	edc7 0a00 	vstr	s1, [r7]
	float tau = 1.0f / (2.0f * M_PI * f_cut);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fd26 	bl	8000548 <__aeabi_f2d>
 8001afc:	a313      	add	r3, pc, #76	@ (adr r3, 8001b4c <LPF_CalculateAlpha+0x64>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fd79 	bl	80005f8 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	f04f 0000 	mov.w	r0, #0
 8001b0e:	490e      	ldr	r1, [pc, #56]	@ (8001b48 <LPF_CalculateAlpha+0x60>)
 8001b10:	f7fe fe9c 	bl	800084c <__aeabi_ddiv>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f844 	bl	8000ba8 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	60fb      	str	r3, [r7, #12]
	return dt / (tau + dt);
 8001b24:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b28:	edd7 7a00 	vldr	s15, [r7]
 8001b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b30:	ed97 7a00 	vldr	s14, [r7]
 8001b34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b38:	eef0 7a66 	vmov.f32	s15, s13
}
 8001b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	3ff00000 	.word	0x3ff00000
 8001b4c:	54442d18 	.word	0x54442d18
 8001b50:	401921fb 	.word	0x401921fb

08001b54 <LPF_Update_Single>:

/// ------ LOW PF ILTER, 1° ORDER ------------------------------------------------------------------------------------
float LPF_Update_Single(LPF_FILTER *filt, float old_data, float data, float alpha)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b60:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b64:	ed87 1a00 	vstr	s2, [r7]
	 return ( (alpha * data) + ((1-alpha) * old_data) );
 8001b68:	ed97 7a00 	vldr	s14, [r7]
 8001b6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b78:	edd7 7a00 	vldr	s15, [r7]
 8001b7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b80:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LPF_SetAlpha>:

/// ------ LPF set over boundaries coefficients ----------------------------------------------------------------------
void LPF_SetAlpha(LPF_FILTER *filt, float alpha_gyr, float alpha_acc, float coeff_filt_angl)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ba6:	edc7 0a01 	vstr	s1, [r7, #4]
 8001baa:	ed87 1a00 	vstr	s2, [r7]
	// Alpha gyr COEFF
	if(alpha_gyr > 1.0f)
 8001bae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	dd03      	ble.n	8001bc8 <LPF_SetAlpha+0x2e>
		alpha_gyr = 1.0f;
 8001bc0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	e009      	b.n	8001bdc <LPF_SetAlpha+0x42>
	else if(alpha_gyr < 0.0f)
 8001bc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d502      	bpl.n	8001bdc <LPF_SetAlpha+0x42>
		alpha_gyr = 0.0f;
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
	// Alpha_acc COEFF
	if(alpha_acc > 1.0f)
 8001bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	dd03      	ble.n	8001bf6 <LPF_SetAlpha+0x5c>
		alpha_acc = 1.0f;
 8001bee:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	e009      	b.n	8001c0a <LPF_SetAlpha+0x70>
	else if(alpha_acc < 0.0f)
 8001bf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	d502      	bpl.n	8001c0a <LPF_SetAlpha+0x70>
		alpha_acc = 0.0f;
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
	// coeff_filt_angl COEFF
	if(coeff_filt_angl > 1.0f)
 8001c0a:	edd7 7a00 	vldr	s15, [r7]
 8001c0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	dd03      	ble.n	8001c24 <LPF_SetAlpha+0x8a>
		coeff_filt_angl = 1.0f;
 8001c1c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	e009      	b.n	8001c38 <LPF_SetAlpha+0x9e>
	else if(coeff_filt_angl < 0)
 8001c24:	edd7 7a00 	vldr	s15, [r7]
 8001c28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d502      	bpl.n	8001c38 <LPF_SetAlpha+0x9e>
		coeff_filt_angl = 0.0f;
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	603b      	str	r3, [r7, #0]

	filt->alpha_gyr = alpha_gyr;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	601a      	str	r2, [r3, #0]
	filt->alpha_acc = alpha_acc;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	605a      	str	r2, [r3, #4]
	filt->coeff_filt_ang = coeff_filt_angl;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	611a      	str	r2, [r3, #16]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LPF_Init>:

void LPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float f_cut_angles, float dt)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b08a      	sub	sp, #40	@ 0x28
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6178      	str	r0, [r7, #20]
 8001c5e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001c62:	edc7 0a03 	vstr	s1, [r7, #12]
 8001c66:	ed87 1a02 	vstr	s2, [r7, #8]
 8001c6a:	edc7 1a01 	vstr	s3, [r7, #4]
	// aplha for LPF settings
	float alpha_gyr = LPF_CalculateAlpha(f_cut_gyr, dt);
 8001c6e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001c72:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c76:	f7ff ff37 	bl	8001ae8 <LPF_CalculateAlpha>
 8001c7a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float alpha_acc = LPF_CalculateAlpha(f_cut_acc, dt);
 8001c7e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001c82:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c86:	f7ff ff2f 	bl	8001ae8 <LPF_CalculateAlpha>
 8001c8a:	ed87 0a08 	vstr	s0, [r7, #32]
	float coeff_filt_angl = LPF_CalculateAlpha(f_cut_angles, dt);
 8001c8e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001c92:	ed97 0a02 	vldr	s0, [r7, #8]
 8001c96:	f7ff ff27 	bl	8001ae8 <LPF_CalculateAlpha>
 8001c9a:	ed87 0a07 	vstr	s0, [r7, #28]
	LPF_SetAlpha(filt, alpha_gyr, alpha_acc, f_cut_angles);
 8001c9e:	ed97 1a02 	vldr	s2, [r7, #8]
 8001ca2:	edd7 0a08 	vldr	s1, [r7, #32]
 8001ca6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff75 	bl	8001b9a <LPF_SetAlpha>

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	@ 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <LPF_GyrAcc_Update_All>:


LPF_FILTER LPF_GyrAcc_Update_All(LPF_FILTER *filt, Vector3 data_gyr, Vector3 data_acc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	61f8      	str	r0, [r7, #28]
 8001cc0:	61b9      	str	r1, [r7, #24]
 8001cc2:	eeb0 5a40 	vmov.f32	s10, s0
 8001cc6:	eef0 5a60 	vmov.f32	s11, s1
 8001cca:	eeb0 6a41 	vmov.f32	s12, s2
 8001cce:	eef0 6a61 	vmov.f32	s13, s3
 8001cd2:	eeb0 7a42 	vmov.f32	s14, s4
 8001cd6:	eef0 7a62 	vmov.f32	s15, s5
 8001cda:	ed87 5a03 	vstr	s10, [r7, #12]
 8001cde:	edc7 5a04 	vstr	s11, [r7, #16]
 8001ce2:	ed87 6a05 	vstr	s12, [r7, #20]
 8001ce6:	edc7 6a00 	vstr	s13, [r7]
 8001cea:	ed87 7a01 	vstr	s14, [r7, #4]
 8001cee:	edc7 7a02 	vstr	s15, [r7, #8]
	filt->filt_gyr_x[0] = LPF_Update_Single(filt, filt->filt_gyr_x[1], data_gyr.x, filt->alpha_gyr);
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cf8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	edd3 6a00 	vldr	s13, [r3]
 8001d02:	eeb0 1a66 	vmov.f32	s2, s13
 8001d06:	eef0 0a47 	vmov.f32	s1, s14
 8001d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0e:	69b8      	ldr	r0, [r7, #24]
 8001d10:	f7ff ff20 	bl	8001b54 <LPF_Update_Single>
 8001d14:	eef0 7a40 	vmov.f32	s15, s0
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	edc3 7a05 	vstr	s15, [r3, #20]
	filt->filt_gyr_y[0] = LPF_Update_Single(filt, filt->filt_gyr_y[1], data_gyr.y, filt->alpha_gyr);
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d24:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	edd3 6a00 	vldr	s13, [r3]
 8001d2e:	eeb0 1a66 	vmov.f32	s2, s13
 8001d32:	eef0 0a47 	vmov.f32	s1, s14
 8001d36:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3a:	69b8      	ldr	r0, [r7, #24]
 8001d3c:	f7ff ff0a 	bl	8001b54 <LPF_Update_Single>
 8001d40:	eef0 7a40 	vmov.f32	s15, s0
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	edc3 7a07 	vstr	s15, [r3, #28]
	filt->filt_gyr_z[0] = LPF_Update_Single(filt, filt->filt_gyr_z[1], data_gyr.z, filt->alpha_gyr);
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001d50:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	edd3 6a00 	vldr	s13, [r3]
 8001d5a:	eeb0 1a66 	vmov.f32	s2, s13
 8001d5e:	eef0 0a47 	vmov.f32	s1, s14
 8001d62:	eeb0 0a67 	vmov.f32	s0, s15
 8001d66:	69b8      	ldr	r0, [r7, #24]
 8001d68:	f7ff fef4 	bl	8001b54 <LPF_Update_Single>
 8001d6c:	eef0 7a40 	vmov.f32	s15, s0
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	filt->filt_acc_x[0] = LPF_Update_Single(filt, filt->filt_acc_x[1], data_acc.x, filt->alpha_acc);
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001d7c:	ed97 7a00 	vldr	s14, [r7]
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d86:	eeb0 1a66 	vmov.f32	s2, s13
 8001d8a:	eef0 0a47 	vmov.f32	s1, s14
 8001d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d92:	69b8      	ldr	r0, [r7, #24]
 8001d94:	f7ff fede 	bl	8001b54 <LPF_Update_Single>
 8001d98:	eef0 7a40 	vmov.f32	s15, s0
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	filt->filt_acc_y[0] = LPF_Update_Single(filt, filt->filt_acc_y[1], data_acc.y, filt->alpha_acc);
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001da8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	edd3 6a01 	vldr	s13, [r3, #4]
 8001db2:	eeb0 1a66 	vmov.f32	s2, s13
 8001db6:	eef0 0a47 	vmov.f32	s1, s14
 8001dba:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbe:	69b8      	ldr	r0, [r7, #24]
 8001dc0:	f7ff fec8 	bl	8001b54 <LPF_Update_Single>
 8001dc4:	eef0 7a40 	vmov.f32	s15, s0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	filt->filt_acc_z[0] = LPF_Update_Single(filt, filt->filt_acc_z[1], data_acc.z, filt->alpha_acc);
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001dd4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dde:	eeb0 1a66 	vmov.f32	s2, s13
 8001de2:	eef0 0a47 	vmov.f32	s1, s14
 8001de6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dea:	69b8      	ldr	r0, [r7, #24]
 8001dec:	f7ff feb2 	bl	8001b54 <LPF_Update_Single>
 8001df0:	eef0 7a40 	vmov.f32	s15, s0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	filt->filt_gyr_x[1] = filt->filt_gyr_x[0];
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	619a      	str	r2, [r3, #24]
	filt->filt_gyr_y[1] = filt->filt_gyr_y[0];
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	621a      	str	r2, [r3, #32]
	filt->filt_gyr_z[1] = filt->filt_gyr_z[0];
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	629a      	str	r2, [r3, #40]	@ 0x28
	filt->filt_acc_x[1] = filt->filt_acc_x[0];
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	631a      	str	r2, [r3, #48]	@ 0x30
	filt->filt_acc_y[1] = filt->filt_acc_y[0];
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	639a      	str	r2, [r3, #56]	@ 0x38
	filt->filt_acc_z[1] = filt->filt_acc_z[0];
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	641a      	str	r2, [r3, #64]	@ 0x40


	return *filt;
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	238c      	movs	r3, #140	@ 0x8c
 8001e34:	461a      	mov	r2, r3
 8001e36:	f00a fc28 	bl	800c68a <memcpy>
}
 8001e3a:	69f8      	ldr	r0, [r7, #28]
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HPF_Init>:
/// ##### HIGH PASS FILTER SECTION #######################################################################
/// ######################################################################################################


void HPF_Init(LPF_FILTER *filt, float f_cut_gyr, float f_cut_acc, float dt)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e4e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e52:	ed87 1a00 	vstr	s2, [r7]
	// beta for HPF settings
	float beta_gyr = HPF_CalculateBeta(f_cut_gyr, dt);
 8001e56:	edd7 0a00 	vldr	s1, [r7]
 8001e5a:	ed97 0a02 	vldr	s0, [r7, #8]
 8001e5e:	f000 f815 	bl	8001e8c <HPF_CalculateBeta>
 8001e62:	ed87 0a05 	vstr	s0, [r7, #20]
	float beta_acc = HPF_CalculateBeta(f_cut_acc, dt);
 8001e66:	edd7 0a00 	vldr	s1, [r7]
 8001e6a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e6e:	f000 f80d 	bl	8001e8c <HPF_CalculateBeta>
 8001e72:	ed87 0a04 	vstr	s0, [r7, #16]
	HPF_SetBeta(filt, beta_gyr, beta_acc);
 8001e76:	edd7 0a04 	vldr	s1, [r7, #16]
 8001e7a:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f826 	bl	8001ed0 <HPF_SetBeta>

}
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HPF_CalculateBeta>:


float HPF_CalculateBeta(float f_cut, float dt)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e96:	edc7 0a00 	vstr	s1, [r7]
	return 1.0f - expf(-2.0f * (float)M_PI * f_cut * dt);
 8001e9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e9e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001ecc <HPF_CalculateBeta+0x40>
 8001ea2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ea6:	edd7 7a00 	vldr	s15, [r7]
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb2:	f00c fd1d 	bl	800e8f0 <expf>
 8001eb6:	eef0 7a40 	vmov.f32	s15, s0
 8001eba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	c0c90fdb 	.word	0xc0c90fdb

08001ed0 <HPF_SetBeta>:


void HPF_SetBeta(LPF_FILTER *filt, float beta_gyr, float beta_acc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001edc:	edc7 0a01 	vstr	s1, [r7, #4]
	if(beta_gyr > 1.0f)
 8001ee0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	dd03      	ble.n	8001efa <HPF_SetBeta+0x2a>
	{
		beta_gyr = 1.0f;
 8001ef2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	e009      	b.n	8001f0e <HPF_SetBeta+0x3e>
	}
	else if(beta_gyr < 0.0f)
 8001efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001efe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	d502      	bpl.n	8001f0e <HPF_SetBeta+0x3e>
	{
		beta_gyr = 0.0f;
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
	}

	if(beta_acc > 1.0f)
 8001f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1e:	dd03      	ble.n	8001f28 <HPF_SetBeta+0x58>
	{
		beta_acc = 1.0f;
 8001f20:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	e009      	b.n	8001f3c <HPF_SetBeta+0x6c>
	}
	else if(beta_acc < 0.0f)
 8001f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	d502      	bpl.n	8001f3c <HPF_SetBeta+0x6c>
	{
		beta_acc = 0.0f;
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	607b      	str	r3, [r7, #4]
	}

	filt->beta_gyr = beta_gyr;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	609a      	str	r2, [r3, #8]
	filt->beta_acc = beta_acc;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	60da      	str	r2, [r3, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sampleFreq) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b09e      	sub	sp, #120	@ 0x78
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001f5e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001f62:	ed87 1a05 	vstr	s2, [r7, #20]
 8001f66:	edc7 1a04 	vstr	s3, [r7, #16]
 8001f6a:	ed87 2a03 	vstr	s4, [r7, #12]
 8001f6e:	edc7 2a02 	vstr	s5, [r7, #8]
 8001f72:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001f76:	4bec      	ldr	r3, [pc, #944]	@ (8002328 <MadgwickAHRSupdateIMU+0x3d4>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	eeb1 7a67 	vneg.f32	s14, s15
 8001f80:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f88:	4be8      	ldr	r3, [pc, #928]	@ (800232c <MadgwickAHRSupdateIMU+0x3d8>)
 8001f8a:	edd3 6a00 	vldr	s13, [r3]
 8001f8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f9a:	4be5      	ldr	r3, [pc, #916]	@ (8002330 <MadgwickAHRSupdateIMU+0x3dc>)
 8001f9c:	edd3 6a00 	vldr	s13, [r3]
 8001fa0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001fb8:	4bde      	ldr	r3, [pc, #888]	@ (8002334 <MadgwickAHRSupdateIMU+0x3e0>)
 8001fba:	ed93 7a00 	vldr	s14, [r3]
 8001fbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc6:	4bd9      	ldr	r3, [pc, #868]	@ (800232c <MadgwickAHRSupdateIMU+0x3d8>)
 8001fc8:	edd3 6a00 	vldr	s13, [r3]
 8001fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd8:	4bd5      	ldr	r3, [pc, #852]	@ (8002330 <MadgwickAHRSupdateIMU+0x3dc>)
 8001fda:	edd3 6a00 	vldr	s13, [r3]
 8001fde:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff2:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001ff6:	4bcf      	ldr	r3, [pc, #828]	@ (8002334 <MadgwickAHRSupdateIMU+0x3e0>)
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002004:	4bc8      	ldr	r3, [pc, #800]	@ (8002328 <MadgwickAHRSupdateIMU+0x3d4>)
 8002006:	edd3 6a00 	vldr	s13, [r3]
 800200a:	edd7 7a05 	vldr	s15, [r7, #20]
 800200e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002012:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002016:	4bc6      	ldr	r3, [pc, #792]	@ (8002330 <MadgwickAHRSupdateIMU+0x3dc>)
 8002018:	edd3 6a00 	vldr	s13, [r3]
 800201c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002028:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800202c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002030:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002034:	4bbf      	ldr	r3, [pc, #764]	@ (8002334 <MadgwickAHRSupdateIMU+0x3e0>)
 8002036:	ed93 7a00 	vldr	s14, [r3]
 800203a:	edd7 7a05 	vldr	s15, [r7, #20]
 800203e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002042:	4bb9      	ldr	r3, [pc, #740]	@ (8002328 <MadgwickAHRSupdateIMU+0x3d4>)
 8002044:	edd3 6a00 	vldr	s13, [r3]
 8002048:	edd7 7a06 	vldr	s15, [r7, #24]
 800204c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002054:	4bb5      	ldr	r3, [pc, #724]	@ (800232c <MadgwickAHRSupdateIMU+0x3d8>)
 8002056:	edd3 6a00 	vldr	s13, [r3]
 800205a:	edd7 7a07 	vldr	s15, [r7, #28]
 800205e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002066:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800206a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800206e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002072:	edd7 7a04 	vldr	s15, [r7, #16]
 8002076:	eef5 7a40 	vcmp.f32	s15, #0.0
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	d10e      	bne.n	800209e <MadgwickAHRSupdateIMU+0x14a>
 8002080:	edd7 7a03 	vldr	s15, [r7, #12]
 8002084:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208c:	d107      	bne.n	800209e <MadgwickAHRSupdateIMU+0x14a>
 800208e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002092:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209a:	f000 81e5 	beq.w	8002468 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800209e:	edd7 7a04 	vldr	s15, [r7, #16]
 80020a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80020a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020be:	eeb0 0a67 	vmov.f32	s0, s15
 80020c2:	f000 fa7b 	bl	80025bc <invSqrt>
 80020c6:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 80020ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80020ce:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80020d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d6:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 80020da:	ed97 7a03 	vldr	s14, [r7, #12]
 80020de:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e6:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;
 80020ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80020ee:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80020f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f6:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80020fa:	4b8e      	ldr	r3, [pc, #568]	@ (8002334 <MadgwickAHRSupdateIMU+0x3e0>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002104:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 8002108:	4b87      	ldr	r3, [pc, #540]	@ (8002328 <MadgwickAHRSupdateIMU+0x3d4>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002112:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 8002116:	4b85      	ldr	r3, [pc, #532]	@ (800232c <MadgwickAHRSupdateIMU+0x3d8>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002120:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 8002124:	4b82      	ldr	r3, [pc, #520]	@ (8002330 <MadgwickAHRSupdateIMU+0x3dc>)
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800212e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 8002132:	4b80      	ldr	r3, [pc, #512]	@ (8002334 <MadgwickAHRSupdateIMU+0x3e0>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800213c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002140:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 8002144:	4b78      	ldr	r3, [pc, #480]	@ (8002328 <MadgwickAHRSupdateIMU+0x3d4>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800214e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002152:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 8002156:	4b75      	ldr	r3, [pc, #468]	@ (800232c <MadgwickAHRSupdateIMU+0x3d8>)
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002164:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 8002168:	4b6f      	ldr	r3, [pc, #444]	@ (8002328 <MadgwickAHRSupdateIMU+0x3d4>)
 800216a:	edd3 7a00 	vldr	s15, [r3]
 800216e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002176:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 800217a:	4b6c      	ldr	r3, [pc, #432]	@ (800232c <MadgwickAHRSupdateIMU+0x3d8>)
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002188:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 800218c:	4b69      	ldr	r3, [pc, #420]	@ (8002334 <MadgwickAHRSupdateIMU+0x3e0>)
 800218e:	ed93 7a00 	vldr	s14, [r3]
 8002192:	4b68      	ldr	r3, [pc, #416]	@ (8002334 <MadgwickAHRSupdateIMU+0x3e0>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 80021a0:	4b61      	ldr	r3, [pc, #388]	@ (8002328 <MadgwickAHRSupdateIMU+0x3d4>)
 80021a2:	ed93 7a00 	vldr	s14, [r3]
 80021a6:	4b60      	ldr	r3, [pc, #384]	@ (8002328 <MadgwickAHRSupdateIMU+0x3d4>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 80021b4:	4b5d      	ldr	r3, [pc, #372]	@ (800232c <MadgwickAHRSupdateIMU+0x3d8>)
 80021b6:	ed93 7a00 	vldr	s14, [r3]
 80021ba:	4b5c      	ldr	r3, [pc, #368]	@ (800232c <MadgwickAHRSupdateIMU+0x3d8>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 80021c8:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <MadgwickAHRSupdateIMU+0x3dc>)
 80021ca:	ed93 7a00 	vldr	s14, [r3]
 80021ce:	4b58      	ldr	r3, [pc, #352]	@ (8002330 <MadgwickAHRSupdateIMU+0x3dc>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80021dc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80021e0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80021e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e8:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80021ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80021f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f8:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80021fc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002208:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800220c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002218:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800221c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002220:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002228:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800222c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002234:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002238:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800223c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002240:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002244:	4b38      	ldr	r3, [pc, #224]	@ (8002328 <MadgwickAHRSupdateIMU+0x3d4>)
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800224e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002252:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8002256:	edd7 7a03 	vldr	s15, [r7, #12]
 800225a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002262:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002266:	ee37 7a67 	vsub.f32	s14, s14, s15
 800226a:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800226e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800227a:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800227e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002286:	ee37 7a27 	vadd.f32	s14, s14, s15
 800228a:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800228e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800229e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80022a2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80022a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022aa:	4b20      	ldr	r3, [pc, #128]	@ (800232c <MadgwickAHRSupdateIMU+0x3d8>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80022b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c4:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80022c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80022cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d4:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80022d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022e4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80022e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ec:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80022f0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80022f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022fc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002300:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800230c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002310:	edd7 7a02 	vldr	s15, [r7, #8]
 8002314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002320:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002324:	e008      	b.n	8002338 <MadgwickAHRSupdateIMU+0x3e4>
 8002326:	bf00      	nop
 8002328:	2000031c 	.word	0x2000031c
 800232c:	20000320 	.word	0x20000320
 8002330:	20000324 	.word	0x20000324
 8002334:	20000004 	.word	0x20000004
 8002338:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800233c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002340:	4b99      	ldr	r3, [pc, #612]	@ (80025a8 <MadgwickAHRSupdateIMU+0x654>)
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800234a:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800234e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002356:	ee37 7a67 	vsub.f32	s14, s14, s15
 800235a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800235e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002362:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002366:	4b90      	ldr	r3, [pc, #576]	@ (80025a8 <MadgwickAHRSupdateIMU+0x654>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002374:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8002378:	edd7 7a03 	vldr	s15, [r7, #12]
 800237c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002384:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002388:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800238c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002390:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002394:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800239c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80023a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80023ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b4:	eeb0 0a67 	vmov.f32	s0, s15
 80023b8:	f000 f900 	bl	80025bc <invSqrt>
 80023bc:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 80023c0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80023c4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80023c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023cc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 80023d0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80023d4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80023d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023dc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 80023e0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80023e4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80023e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 80023f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80023f4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80023f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fc:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002400:	4b6a      	ldr	r3, [pc, #424]	@ (80025ac <MadgwickAHRSupdateIMU+0x658>)
 8002402:	ed93 7a00 	vldr	s14, [r3]
 8002406:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002416:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		qDot2 -= beta * s1;
 800241a:	4b64      	ldr	r3, [pc, #400]	@ (80025ac <MadgwickAHRSupdateIMU+0x658>)
 800241c:	ed93 7a00 	vldr	s14, [r3]
 8002420:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002428:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800242c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002430:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		qDot3 -= beta * s2;
 8002434:	4b5d      	ldr	r3, [pc, #372]	@ (80025ac <MadgwickAHRSupdateIMU+0x658>)
 8002436:	ed93 7a00 	vldr	s14, [r3]
 800243a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot4 -= beta * s3;
 800244e:	4b57      	ldr	r3, [pc, #348]	@ (80025ac <MadgwickAHRSupdateIMU+0x658>)
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	edd7 7a08 	vldr	s15, [r7, #32]
 8002458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002464:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002468:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800246c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002474:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800247c:	4b4c      	ldr	r3, [pc, #304]	@ (80025b0 <MadgwickAHRSupdateIMU+0x65c>)
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002486:	4b4a      	ldr	r3, [pc, #296]	@ (80025b0 <MadgwickAHRSupdateIMU+0x65c>)
 8002488:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800248c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002490:	edd7 7a01 	vldr	s15, [r7, #4]
 8002494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002498:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800249c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a0:	4b44      	ldr	r3, [pc, #272]	@ (80025b4 <MadgwickAHRSupdateIMU+0x660>)
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024aa:	4b42      	ldr	r3, [pc, #264]	@ (80025b4 <MadgwickAHRSupdateIMU+0x660>)
 80024ac:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80024b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024bc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80024c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c4:	4b3c      	ldr	r3, [pc, #240]	@ (80025b8 <MadgwickAHRSupdateIMU+0x664>)
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	4b3a      	ldr	r3, [pc, #232]	@ (80025b8 <MadgwickAHRSupdateIMU+0x664>)
 80024d0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80024d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80024e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e8:	4b2f      	ldr	r3, [pc, #188]	@ (80025a8 <MadgwickAHRSupdateIMU+0x654>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f2:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <MadgwickAHRSupdateIMU+0x654>)
 80024f4:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80024f8:	4b2d      	ldr	r3, [pc, #180]	@ (80025b0 <MadgwickAHRSupdateIMU+0x65c>)
 80024fa:	ed93 7a00 	vldr	s14, [r3]
 80024fe:	4b2c      	ldr	r3, [pc, #176]	@ (80025b0 <MadgwickAHRSupdateIMU+0x65c>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002508:	4b2a      	ldr	r3, [pc, #168]	@ (80025b4 <MadgwickAHRSupdateIMU+0x660>)
 800250a:	edd3 6a00 	vldr	s13, [r3]
 800250e:	4b29      	ldr	r3, [pc, #164]	@ (80025b4 <MadgwickAHRSupdateIMU+0x660>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800251c:	4b26      	ldr	r3, [pc, #152]	@ (80025b8 <MadgwickAHRSupdateIMU+0x664>)
 800251e:	edd3 6a00 	vldr	s13, [r3]
 8002522:	4b25      	ldr	r3, [pc, #148]	@ (80025b8 <MadgwickAHRSupdateIMU+0x664>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002530:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <MadgwickAHRSupdateIMU+0x654>)
 8002532:	edd3 6a00 	vldr	s13, [r3]
 8002536:	4b1c      	ldr	r3, [pc, #112]	@ (80025a8 <MadgwickAHRSupdateIMU+0x654>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002544:	eeb0 0a67 	vmov.f32	s0, s15
 8002548:	f000 f838 	bl	80025bc <invSqrt>
 800254c:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
	q0 *= recipNorm;
 8002550:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <MadgwickAHRSupdateIMU+0x65c>)
 8002552:	ed93 7a00 	vldr	s14, [r3]
 8002556:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800255a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255e:	4b14      	ldr	r3, [pc, #80]	@ (80025b0 <MadgwickAHRSupdateIMU+0x65c>)
 8002560:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002564:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <MadgwickAHRSupdateIMU+0x660>)
 8002566:	ed93 7a00 	vldr	s14, [r3]
 800256a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800256e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <MadgwickAHRSupdateIMU+0x660>)
 8002574:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002578:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <MadgwickAHRSupdateIMU+0x664>)
 800257a:	ed93 7a00 	vldr	s14, [r3]
 800257e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002586:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <MadgwickAHRSupdateIMU+0x664>)
 8002588:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <MadgwickAHRSupdateIMU+0x654>)
 800258e:	ed93 7a00 	vldr	s14, [r3]
 8002592:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259a:	4b03      	ldr	r3, [pc, #12]	@ (80025a8 <MadgwickAHRSupdateIMU+0x654>)
 800259c:	edc3 7a00 	vstr	s15, [r3]
}
 80025a0:	bf00      	nop
 80025a2:	3778      	adds	r7, #120	@ 0x78
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000324 	.word	0x20000324
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20000004 	.word	0x20000004
 80025b4:	2000031c 	.word	0x2000031c
 80025b8:	20000320 	.word	0x20000320

080025bc <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80025c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80025ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80025da:	f107 0310 	add.w	r3, r7, #16
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	105a      	asrs	r2, r3, #1
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <invSqrt+0x74>)
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80025f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80025f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80025fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002600:	edd7 7a04 	vldr	s15, [r7, #16]
 8002604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002608:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800260c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002610:	edd7 7a04 	vldr	s15, [r7, #16]
 8002614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002618:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	ee07 3a90 	vmov	s15, r3
}
 8002622:	eeb0 0a67 	vmov.f32	s0, s15
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	5f3759df 	.word	0x5f3759df

08002634 <Toggle>:



/// Function that toggles the led of the board to show if the device is working
void Toggle(uint32_t waitingTime)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	// Toggle to show if the code is running
	if ((HAL_GetTick() - timerToggle) >= waitingTime)
 800263c:	f001 f838 	bl	80036b0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <Toggle+0x40>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	d808      	bhi.n	8002660 <Toggle+0x2c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800264e:	2110      	movs	r1, #16
 8002650:	4809      	ldr	r0, [pc, #36]	@ (8002678 <Toggle+0x44>)
 8002652:	f001 feb6 	bl	80043c2 <HAL_GPIO_TogglePin>
		timerToggle = HAL_GetTick();
 8002656:	f001 f82b 	bl	80036b0 <HAL_GetTick>
 800265a:	4603      	mov	r3, r0
 800265c:	4a05      	ldr	r2, [pc, #20]	@ (8002674 <Toggle+0x40>)
 800265e:	6013      	str	r3, [r2, #0]
	}
	timerUSB = HAL_GetTick();
 8002660:	f001 f826 	bl	80036b0 <HAL_GetTick>
 8002664:	4603      	mov	r3, r0
 8002666:	4a05      	ldr	r2, [pc, #20]	@ (800267c <Toggle+0x48>)
 8002668:	6013      	str	r3, [r2, #0]
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200005ec 	.word	0x200005ec
 8002678:	40020400 	.word	0x40020400
 800267c:	200005e8 	.word	0x200005e8

08002680 <Take_IMU_Measurements>:
  	}
}

/// Function to insert IMU measurements from memory to memory (data is adjusted)
void Take_IMU_Measurements(BMI088 *imu)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	measureTick = HAL_GetTick();		// Timestamp when data is taken from memory to memory (not from BMI088 to memory!)
 8002688:	f001 f812 	bl	80036b0 <HAL_GetTick>
 800268c:	4603      	mov	r3, r0
 800268e:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <Take_IMU_Measurements+0x5c>)
 8002690:	6013      	str	r3, [r2, #0]

	gyr.y = -imu->gyr_rps[0];
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002698:	eef1 7a67 	vneg.f32	s15, s15
 800269c:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <Take_IMU_Measurements+0x60>)
 800269e:	edc3 7a01 	vstr	s15, [r3, #4]
	gyr.x = imu->gyr_rps[1];
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a6:	4a0e      	ldr	r2, [pc, #56]	@ (80026e0 <Take_IMU_Measurements+0x60>)
 80026a8:	6013      	str	r3, [r2, #0]
	gyr.z = imu->gyr_rps[2];
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ae:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <Take_IMU_Measurements+0x60>)
 80026b0:	6093      	str	r3, [r2, #8]
	acc.y = -imu->acc_mps2[0];
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80026b8:	eef1 7a67 	vneg.f32	s15, s15
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <Take_IMU_Measurements+0x64>)
 80026be:	edc3 7a01 	vstr	s15, [r3, #4]
	acc.x = imu->acc_mps2[1];
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c6:	4a07      	ldr	r2, [pc, #28]	@ (80026e4 <Take_IMU_Measurements+0x64>)
 80026c8:	6013      	str	r3, [r2, #0]
	acc.z = imu->acc_mps2[2];
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	4a05      	ldr	r2, [pc, #20]	@ (80026e4 <Take_IMU_Measurements+0x64>)
 80026d0:	6093      	str	r3, [r2, #8]

}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200005c8 	.word	0x200005c8
 80026e0:	200005cc 	.word	0x200005cc
 80026e4:	200005d8 	.word	0x200005d8

080026e8 <HAL_GPIO_EXTI_Callback>:

/// DMA Reading
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d107      	bne.n	8002708 <HAL_GPIO_EXTI_Callback+0x20>
	{
		// we check if the interrupt pin is the accelerometer one
		if (!imu.readingAcc)
 80026f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_GPIO_EXTI_Callback+0x3c>)
 80026fa:	7c1b      	ldrb	r3, [r3, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10d      	bne.n	800271c <HAL_GPIO_EXTI_Callback+0x34>
			BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 8002700:	4808      	ldr	r0, [pc, #32]	@ (8002724 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002702:	f7fe fe1f 	bl	8001344 <BMI088_ReadAccelerometerDMA>
		// we check if the interrupt pin is the gyroscope one
		if (!imu.readingGyr)
			BMI088_ReadGyroscopeDMA(&imu);
	}

}
 8002706:	e009      	b.n	800271c <HAL_GPIO_EXTI_Callback+0x34>
	else if(GPIO_Pin == INT_GYR_Pin)
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	2b08      	cmp	r3, #8
 800270c:	d106      	bne.n	800271c <HAL_GPIO_EXTI_Callback+0x34>
		if (!imu.readingGyr)
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002710:	7c5b      	ldrb	r3, [r3, #17]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <HAL_GPIO_EXTI_Callback+0x34>
			BMI088_ReadGyroscopeDMA(&imu);
 8002716:	4803      	ldr	r0, [pc, #12]	@ (8002724 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002718:	f7fe feb0 	bl	800147c <BMI088_ReadGyroscopeDMA>
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200004d0 	.word	0x200004d0

08002728 <HAL_SPI_TxRxCpltCallback>:
/// DMA CALLBACK
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10d      	bne.n	8002756 <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800273c:	7c1b      	ldrb	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8002742:	4808      	ldr	r0, [pc, #32]	@ (8002764 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002744:	f7fe fe30 	bl	80013a8 <BMI088_ReadAccelerometerDMA_Complete>

		}

		if (imu.readingGyr)
 8002748:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800274a:	7c5b      	ldrb	r3, [r3, #17]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 8002750:	4804      	ldr	r0, [pc, #16]	@ (8002764 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002752:	f7fe fec5 	bl	80014e0 <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40013000 	.word	0x40013000
 8002764:	200004d0 	.word	0x200004d0

08002768 <HAL_TIM_PeriodElapsedCallback>:


/// Callback of the timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276c:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 8002770:	af18      	add	r7, sp, #96	@ 0x60
 8002772:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8002776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800277a:	6018      	str	r0, [r3, #0]
	// Calculate angles with quaternions
    if(htim->Instance == TIM2)
 800277c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8002780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800278c:	f040 80e0 	bne.w	8002950 <HAL_TIM_PeriodElapsedCallback+0x1e8>
    {
        // Code to execute at constant sample rate
        Take_IMU_Measurements(&imu);
 8002790:	48b7      	ldr	r0, [pc, #732]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002792:	f7ff ff75 	bl	8002680 <Take_IMU_Measurements>

        /// Filtering Gyro and Acc measurements
        filt = LPF_GyrAcc_Update_All(&filt, gyr, acc);
 8002796:	4cb7      	ldr	r4, [pc, #732]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002798:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800279c:	4bb6      	ldr	r3, [pc, #728]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800279e:	ed93 5a00 	vldr	s10, [r3]
 80027a2:	edd3 5a01 	vldr	s11, [r3, #4]
 80027a6:	ed93 6a02 	vldr	s12, [r3, #8]
 80027aa:	4bb4      	ldr	r3, [pc, #720]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80027ac:	edd3 6a00 	vldr	s13, [r3]
 80027b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80027b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80027b8:	eef0 1a45 	vmov.f32	s3, s10
 80027bc:	eeb0 2a65 	vmov.f32	s4, s11
 80027c0:	eef0 2a46 	vmov.f32	s5, s12
 80027c4:	eeb0 0a66 	vmov.f32	s0, s13
 80027c8:	eef0 0a47 	vmov.f32	s1, s14
 80027cc:	eeb0 1a67 	vmov.f32	s2, s15
 80027d0:	49a8      	ldr	r1, [pc, #672]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80027d2:	4610      	mov	r0, r2
 80027d4:	f7ff fa70 	bl	8001cb8 <LPF_GyrAcc_Update_All>
 80027d8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80027dc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027e0:	4620      	mov	r0, r4
 80027e2:	4619      	mov	r1, r3
 80027e4:	238c      	movs	r3, #140	@ 0x8c
 80027e6:	461a      	mov	r2, r3
 80027e8:	f009 ff4f 	bl	800c68a <memcpy>
        gyr.x = filt.filt_gyr_x[0];
 80027ec:	4ba1      	ldr	r3, [pc, #644]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	4aa2      	ldr	r2, [pc, #648]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80027f2:	6013      	str	r3, [r2, #0]
        gyr.y = filt.filt_gyr_y[0];
 80027f4:	4b9f      	ldr	r3, [pc, #636]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	4aa0      	ldr	r2, [pc, #640]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80027fa:	6053      	str	r3, [r2, #4]
        gyr.z = filt.filt_gyr_z[0];
 80027fc:	4b9d      	ldr	r3, [pc, #628]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	4a9e      	ldr	r2, [pc, #632]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002802:	6093      	str	r3, [r2, #8]
        acc.x = filt.filt_acc_x[0];
 8002804:	4b9b      	ldr	r3, [pc, #620]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002808:	4a9b      	ldr	r2, [pc, #620]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800280a:	6013      	str	r3, [r2, #0]
		acc.y = filt.filt_acc_y[0];
 800280c:	4b99      	ldr	r3, [pc, #612]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800280e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002810:	4a99      	ldr	r2, [pc, #612]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002812:	6053      	str	r3, [r2, #4]
		acc.z = filt.filt_acc_z[0];
 8002814:	4b97      	ldr	r3, [pc, #604]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002818:	4a97      	ldr	r2, [pc, #604]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800281a:	6093      	str	r3, [r2, #8]
        acc.x = filt.filt_acc_x[1];
		acc.y = filt.filt_acc_y[1];
		acc.z = filt.filt_acc_z[1];*/

		/// Algorithm application to find angles
        MadgwickAHRSupdateIMU(gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, F_TIM2);
 800281c:	4b97      	ldr	r3, [pc, #604]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	4b96      	ldr	r3, [pc, #600]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002824:	ed93 7a01 	vldr	s14, [r3, #4]
 8002828:	4b94      	ldr	r3, [pc, #592]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800282a:	edd3 6a02 	vldr	s13, [r3, #8]
 800282e:	4b92      	ldr	r3, [pc, #584]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002830:	ed93 6a00 	vldr	s12, [r3]
 8002834:	4b90      	ldr	r3, [pc, #576]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002836:	edd3 5a01 	vldr	s11, [r3, #4]
 800283a:	4b8f      	ldr	r3, [pc, #572]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800283c:	ed93 5a02 	vldr	s10, [r3, #8]
 8002840:	4b8f      	ldr	r3, [pc, #572]	@ (8002a80 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002842:	edd3 4a00 	vldr	s9, [r3]
 8002846:	eeb0 3a64 	vmov.f32	s6, s9
 800284a:	eef0 2a45 	vmov.f32	s5, s10
 800284e:	eeb0 2a65 	vmov.f32	s4, s11
 8002852:	eef0 1a46 	vmov.f32	s3, s12
 8002856:	eeb0 1a66 	vmov.f32	s2, s13
 800285a:	eef0 0a47 	vmov.f32	s1, s14
 800285e:	eeb0 0a67 	vmov.f32	s0, s15
 8002862:	f7ff fb77 	bl	8001f54 <MadgwickAHRSupdateIMU>
        q.w = q0; q.x = q1; q.y = q2; q.z = q3;
 8002866:	4b87      	ldr	r3, [pc, #540]	@ (8002a84 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a87      	ldr	r2, [pc, #540]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b87      	ldr	r3, [pc, #540]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a85      	ldr	r2, [pc, #532]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002874:	6053      	str	r3, [r2, #4]
 8002876:	4b86      	ldr	r3, [pc, #536]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a83      	ldr	r2, [pc, #524]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800287c:	6093      	str	r3, [r2, #8]
 800287e:	4b85      	ldr	r3, [pc, #532]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a81      	ldr	r2, [pc, #516]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002884:	60d3      	str	r3, [r2, #12]
        QuaternionToEuler(q, angles);
 8002886:	4b80      	ldr	r3, [pc, #512]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002888:	ed93 6a00 	vldr	s12, [r3]
 800288c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002890:	ed93 7a02 	vldr	s14, [r3, #8]
 8002894:	edd3 7a03 	vldr	s15, [r3, #12]
 8002898:	487f      	ldr	r0, [pc, #508]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800289a:	eeb0 0a46 	vmov.f32	s0, s12
 800289e:	eef0 0a66 	vmov.f32	s1, s13
 80028a2:	eeb0 1a47 	vmov.f32	s2, s14
 80028a6:	eef0 1a67 	vmov.f32	s3, s15
 80028aa:	f7fe fe7d 	bl	80015a8 <QuaternionToEuler>

        /// Filtering angles
        //filt = LPF_Angles_Update_All(&filt, angles);

        abs_acc = sqrt(pow(acc.x,2)+pow(acc.y,2) + pow(acc.z,2));
 80028ae:	4b72      	ldr	r3, [pc, #456]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fe48 	bl	8000548 <__aeabi_f2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 8002a68 <HAL_TIM_PeriodElapsedCallback+0x300>
 80028c0:	ec43 2b10 	vmov	d0, r2, r3
 80028c4:	f00b ff70 	bl	800e7a8 <pow>
 80028c8:	ec55 4b10 	vmov	r4, r5, d0
 80028cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe39 	bl	8000548 <__aeabi_f2d>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 8002a68 <HAL_TIM_PeriodElapsedCallback+0x300>
 80028de:	ec43 2b10 	vmov	d0, r2, r3
 80028e2:	f00b ff61 	bl	800e7a8 <pow>
 80028e6:	ec53 2b10 	vmov	r2, r3, d0
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f7fd fccd 	bl	800028c <__adddf3>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4614      	mov	r4, r2
 80028f8:	461d      	mov	r5, r3
 80028fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fe22 	bl	8000548 <__aeabi_f2d>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8002a68 <HAL_TIM_PeriodElapsedCallback+0x300>
 800290c:	ec43 2b10 	vmov	d0, r2, r3
 8002910:	f00b ff4a 	bl	800e7a8 <pow>
 8002914:	ec53 2b10 	vmov	r2, r3, d0
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fcb6 	bl	800028c <__adddf3>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	ec43 2b17 	vmov	d7, r2, r3
 8002928:	eeb0 0a47 	vmov.f32	s0, s14
 800292c:	eef0 0a67 	vmov.f32	s1, s15
 8002930:	f00b ffaa 	bl	800e888 <sqrt>
 8002934:	ec53 2b10 	vmov	r2, r3, d0
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f7fe f934 	bl	8000ba8 <__aeabi_d2f>
 8002940:	4603      	mov	r3, r0
 8002942:	4a56      	ldr	r2, [pc, #344]	@ (8002a9c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002944:	6013      	str	r3, [r2, #0]

        timestamp_TIM2++;	// how many times TIM2 is called
 8002946:	4b56      	ldr	r3, [pc, #344]	@ (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	4a54      	ldr	r2, [pc, #336]	@ (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800294e:	6013      	str	r3, [r2, #0]
    }

    // Send data with CDC_Transfer_FS
    if(htim->Instance == TIM3)
 8002950:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8002954:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a51      	ldr	r2, [pc, #324]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	f040 80bb 	bne.w	8002ada <HAL_TIM_PeriodElapsedCallback+0x372>
		//API_PrintAngles(HAL_GetTick(), angles);
		//float gyrArr[3] = {gyr.x, gyr.y, gyr.z};
		//float accArr[3] = {acc.x, acc.y, acc.z};
		//API_SendInertial(HAL_GetTick(), gyrArr, accArr);

		timestamp_TIM3++;	// how many times TIM3 is called
 8002964:	4b50      	ldr	r3, [pc, #320]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	4a4f      	ldr	r2, [pc, #316]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800296c:	6013      	str	r3, [r2, #0]

	// Send every data using just one string and one TX
		char txBuff[256];
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 800296e:	4b4f      	ldr	r3, [pc, #316]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	637b      	str	r3, [r7, #52]	@ 0x34
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 800297c:	4b46      	ldr	r3, [pc, #280]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800297e:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fde1 	bl	8000548 <__aeabi_f2d>
 8002986:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 800298a:	4b43      	ldr	r3, [pc, #268]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800298c:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fdda 	bl	8000548 <__aeabi_f2d>
 8002994:	e9c7 0108 	strd	r0, r1, [r7, #32]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 8002998:	4b3f      	ldr	r3, [pc, #252]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800299a:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fdd3 	bl	8000548 <__aeabi_f2d>
 80029a2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80029a6:	4b41      	ldr	r3, [pc, #260]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x344>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029ae:	fb02 f103 	mul.w	r1, r2, r3
 80029b2:	6339      	str	r1, [r7, #48]	@ 0x30
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80029b4:	4b31      	ldr	r3, [pc, #196]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80029b6:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fdc5 	bl	8000548 <__aeabi_f2d>
 80029be:	e9c7 0104 	strd	r0, r1, [r7, #16]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80029c2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80029c4:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fdbe 	bl	8000548 <__aeabi_f2d>
 80029cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80029d0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80029d2:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdb7 	bl	8000548 <__aeabi_f2d>
 80029da:	e9c7 0100 	strd	r0, r1, [r7]
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80029de:	4b26      	ldr	r3, [pc, #152]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80029e0:	681b      	ldr	r3, [r3, #0]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fdb0 	bl	8000548 <__aeabi_f2d>
 80029e8:	4682      	mov	sl, r0
 80029ea:	468b      	mov	fp, r1
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80029ec:	4b22      	ldr	r3, [pc, #136]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80029ee:	685b      	ldr	r3, [r3, #4]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fda9 	bl	8000548 <__aeabi_f2d>
 80029f6:	4680      	mov	r8, r0
 80029f8:	4689      	mov	r9, r1
				measureTick*1000, angles[0], angles[1], angles[2],measureTick*1000, gyr.x, gyr.y, gyr.z, acc.x, acc.y, acc.z, measureTick*1000, abs_acc);
 80029fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80029fc:	689b      	ldr	r3, [r3, #8]
		sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\nI,%lu,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f\r\nT,%lu,%.4f\r\n",
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fda2 	bl	8000548 <__aeabi_f2d>
 8002a04:	4604      	mov	r4, r0
 8002a06:	460d      	mov	r5, r1
 8002a08:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a10:	fb03 f602 	mul.w	r6, r3, r2
 8002a14:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fd95 	bl	8000548 <__aeabi_f2d>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8002a26:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8002a2a:	9614      	str	r6, [sp, #80]	@ 0x50
 8002a2c:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8002a30:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8002a34:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 8002a38:	ed97 7b00 	vldr	d7, [r7]
 8002a3c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002a40:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a44:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002a48:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a4c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002a50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a52:	9106      	str	r1, [sp, #24]
 8002a54:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a58:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a5c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a64:	e024      	b.n	8002ab0 <HAL_TIM_PeriodElapsedCallback+0x348>
 8002a66:	bf00      	nop
 8002a68:	00000000 	.word	0x00000000
 8002a6c:	40000000 	.word	0x40000000
 8002a70:	200004d0 	.word	0x200004d0
 8002a74:	20000520 	.word	0x20000520
 8002a78:	200005d8 	.word	0x200005d8
 8002a7c:	200005cc 	.word	0x200005cc
 8002a80:	200005b0 	.word	0x200005b0
 8002a84:	20000004 	.word	0x20000004
 8002a88:	20000008 	.word	0x20000008
 8002a8c:	2000031c 	.word	0x2000031c
 8002a90:	20000320 	.word	0x20000320
 8002a94:	20000324 	.word	0x20000324
 8002a98:	200005b4 	.word	0x200005b4
 8002a9c:	200005e4 	.word	0x200005e4
 8002aa0:	200005c4 	.word	0x200005c4
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	200005c0 	.word	0x200005c0
 8002aac:	200005c8 	.word	0x200005c8
 8002ab0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002ab4:	ed8d 7b00 	vstr	d7, [sp]
 8002ab8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aba:	490b      	ldr	r1, [pc, #44]	@ (8002ae8 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8002abc:	f009 fd02 	bl	800c4c4 <siprintf>
		CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff));
 8002ac0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fbd3 	bl	8000270 <strlen>
 8002aca:	4603      	mov	r3, r0
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f008 fb7f 	bl	800b1d8 <CDC_Transmit_FS>


	}
}
 8002ada:	bf00      	nop
 8002adc:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae6:	bf00      	nop
 8002ae8:	08010d24 	.word	0x08010d24

08002aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002af2:	f000 fd77 	bl	80035e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af6:	f000 f889 	bl	8002c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002afa:	f000 fa11 	bl	8002f20 <MX_GPIO_Init>
  MX_DMA_Init();
 8002afe:	f000 f9e7 	bl	8002ed0 <MX_DMA_Init>
  MX_SPI1_Init();
 8002b02:	f000 f8ed 	bl	8002ce0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002b06:	f000 f921 	bl	8002d4c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8002b0a:	f008 faa7 	bl	800b05c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002b0e:	f000 f991 	bl	8002e34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /*.... Priorities ....................*/
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002b12:	2005      	movs	r0, #5
 8002b14:	f000 fecc 	bl	80038b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	2038      	movs	r0, #56	@ 0x38
 8002b1e:	f000 fed2 	bl	80038c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 1);
 8002b22:	2201      	movs	r2, #1
 8002b24:	2100      	movs	r1, #0
 8002b26:	203b      	movs	r0, #59	@ 0x3b
 8002b28:	f000 fecd 	bl	80038c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2101      	movs	r1, #1
 8002b30:	2008      	movs	r0, #8
 8002b32:	f000 fec8 	bl	80038c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 8002b36:	2201      	movs	r2, #1
 8002b38:	2101      	movs	r1, #1
 8002b3a:	2009      	movs	r0, #9
 8002b3c:	f000 fec3 	bl	80038c6 <HAL_NVIC_SetPriority>

  /*....................................*/
  HAL_Delay(1000);
 8002b40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b44:	f000 fdc0 	bl	80036c8 <HAL_Delay>


  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 8002b48:	2310      	movs	r3, #16
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <main+0xe4>)
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2310      	movs	r3, #16
 8002b52:	4a20      	ldr	r2, [pc, #128]	@ (8002bd4 <main+0xe8>)
 8002b54:	4920      	ldr	r1, [pc, #128]	@ (8002bd8 <main+0xec>)
 8002b56:	4821      	ldr	r0, [pc, #132]	@ (8002bdc <main+0xf0>)
 8002b58:	f7fe f9ee 	bl	8000f38 <BMI088_Init>
  //EKF_CalculateGyroBias(&imu, 500);
  SetQuaternionFromEuler(&q, 0, 0, 0);				// Angles on the starting position: roll=0, pitch=0, yaw=0
 8002b5c:	ed9f 1a20 	vldr	s2, [pc, #128]	@ 8002be0 <main+0xf4>
 8002b60:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8002be0 <main+0xf4>
 8002b64:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8002be0 <main+0xf4>
 8002b68:	481e      	ldr	r0, [pc, #120]	@ (8002be4 <main+0xf8>)
 8002b6a:	f7fe fe1d 	bl	80017a8 <SetQuaternionFromEuler>
  Filter_Init(&filt, f_LP_gyr, f_LP_acc, f_HP_gyr, f_HP_acc, f_LP_angles, T_TIM2);
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002be8 <main+0xfc>)
 8002b70:	edd3 7a00 	vldr	s15, [r3]
 8002b74:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <main+0x100>)
 8002b76:	ed93 7a00 	vldr	s14, [r3]
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <main+0x104>)
 8002b7c:	edd3 6a00 	vldr	s13, [r3]
 8002b80:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf4 <main+0x108>)
 8002b82:	ed93 6a00 	vldr	s12, [r3]
 8002b86:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <main+0x10c>)
 8002b88:	edd3 5a00 	vldr	s11, [r3]
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <main+0x110>)
 8002b8e:	ed93 5a00 	vldr	s10, [r3]
 8002b92:	eef0 2a45 	vmov.f32	s5, s10
 8002b96:	eeb0 2a65 	vmov.f32	s4, s11
 8002b9a:	eef0 1a46 	vmov.f32	s3, s12
 8002b9e:	eeb0 1a66 	vmov.f32	s2, s13
 8002ba2:	eef0 0a47 	vmov.f32	s1, s14
 8002ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8002baa:	4815      	ldr	r0, [pc, #84]	@ (8002c00 <main+0x114>)
 8002bac:	f7fe fed0 	bl	8001950 <Filter_Init>

  HAL_Delay(1000);
 8002bb0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bb4:	f000 fd88 	bl	80036c8 <HAL_Delay>

  //EKF_Init(&q);
  /* ----- START TIMERS ------------------------------------------------------- */
  HAL_TIM_Base_Start_IT(&htim2);   // Start timer: calculation of the algorithm
 8002bb8:	4812      	ldr	r0, [pc, #72]	@ (8002c04 <main+0x118>)
 8002bba:	f004 fb0f 	bl	80071dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);   // Start timer: send data with CDC_Transmit_FS serial interface
 8002bbe:	4812      	ldr	r0, [pc, #72]	@ (8002c08 <main+0x11c>)
 8002bc0:	f004 fb0c 	bl	80071dc <HAL_TIM_Base_Start_IT>

  while (1)
  {

	  //Debug_SPI_DMA();
	  Toggle(SAMPLE_TIME_MS_TOGGLE);
 8002bc4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002bc8:	f7ff fd34 	bl	8002634 <Toggle>
 8002bcc:	e7fa      	b.n	8002bc4 <main+0xd8>
 8002bce:	bf00      	nop
 8002bd0:	40020800 	.word	0x40020800
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	20000328 	.word	0x20000328
 8002bdc:	200004d0 	.word	0x200004d0
 8002be0:	00000000 	.word	0x00000000
 8002be4:	20000008 	.word	0x20000008
 8002be8:	20000018 	.word	0x20000018
 8002bec:	2000001c 	.word	0x2000001c
 8002bf0:	20000024 	.word	0x20000024
 8002bf4:	20000028 	.word	0x20000028
 8002bf8:	20000020 	.word	0x20000020
 8002bfc:	200005ac 	.word	0x200005ac
 8002c00:	20000520 	.word	0x20000520
 8002c04:	20000440 	.word	0x20000440
 8002c08:	20000488 	.word	0x20000488

08002c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b094      	sub	sp, #80	@ 0x50
 8002c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c12:	f107 0320 	add.w	r3, r7, #32
 8002c16:	2230      	movs	r2, #48	@ 0x30
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f009 fcb5 	bl	800c58a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	4b28      	ldr	r3, [pc, #160]	@ (8002cd8 <SystemClock_Config+0xcc>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	4a27      	ldr	r2, [pc, #156]	@ (8002cd8 <SystemClock_Config+0xcc>)
 8002c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c40:	4b25      	ldr	r3, [pc, #148]	@ (8002cd8 <SystemClock_Config+0xcc>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <SystemClock_Config+0xd0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a21      	ldr	r2, [pc, #132]	@ (8002cdc <SystemClock_Config+0xd0>)
 8002c56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <SystemClock_Config+0xd0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c72:	2302      	movs	r3, #2
 8002c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c80:	23a8      	movs	r3, #168	@ 0xa8
 8002c82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c84:	2302      	movs	r3, #2
 8002c86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c88:	2307      	movs	r3, #7
 8002c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c8c:	f107 0320 	add.w	r3, r7, #32
 8002c90:	4618      	mov	r0, r3
 8002c92:	f002 fe1b 	bl	80058cc <HAL_RCC_OscConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c9c:	f000 f9e6 	bl	800306c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002cb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cb8:	f107 030c 	add.w	r3, r7, #12
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 f87c 	bl	8005dbc <HAL_RCC_ClockConfig>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002cca:	f000 f9cf 	bl	800306c <Error_Handler>
  }
}
 8002cce:	bf00      	nop
 8002cd0:	3750      	adds	r7, #80	@ 0x50
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40007000 	.word	0x40007000

08002ce0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ce4:	4b17      	ldr	r3, [pc, #92]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <MX_SPI1_Init+0x68>)
 8002ce8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cea:	4b16      	ldr	r3, [pc, #88]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002cec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cf2:	4b14      	ldr	r3, [pc, #80]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cfe:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d04:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002d12:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d14:	2210      	movs	r2, #16
 8002d16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d18:	4b0a      	ldr	r3, [pc, #40]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d24:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d2c:	220a      	movs	r2, #10
 8002d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d30:	4804      	ldr	r0, [pc, #16]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d32:	f003 fa39 	bl	80061a8 <HAL_SPI_Init>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d3c:	f000 f996 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000328 	.word	0x20000328
 8002d48:	40013000 	.word	0x40013000

08002d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d60:	463b      	mov	r3, r7
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d68:	4b2e      	ldr	r3, [pc, #184]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002d6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8002d70:	4b2c      	ldr	r3, [pc, #176]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002d72:	2229      	movs	r2, #41	@ 0x29
 8002d74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d76:	4b2b      	ldr	r3, [pc, #172]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002d7c:	4b29      	ldr	r3, [pc, #164]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002d7e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002d82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d84:	4b27      	ldr	r3, [pc, #156]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8a:	4b26      	ldr	r3, [pc, #152]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d90:	4824      	ldr	r0, [pc, #144]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002d92:	f004 f9d3 	bl	800713c <HAL_TIM_Base_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d9c:	f000 f966 	bl	800306c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	4619      	mov	r1, r3
 8002dac:	481d      	ldr	r0, [pc, #116]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002dae:	f004 fb75 	bl	800749c <HAL_TIM_ConfigClockSource>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002db8:	f000 f958 	bl	800306c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4816      	ldr	r0, [pc, #88]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002dca:	f004 fd9d 	bl	8007908 <HAL_TIMEx_MasterConfigSynchronization>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002dd4:	f000 f94a 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

	T_TIM2 = 1.0f / (f_CK / (float)((htim2.Init.Period +1 ) * htim2.Init.Prescaler + 1));
 8002dd8:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002e28 <MX_TIM2_Init+0xdc>
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	3301      	adds	r3, #1
 8002de2:	4a10      	ldr	r2, [pc, #64]	@ (8002e24 <MX_TIM2_Init+0xd8>)
 8002de4:	6852      	ldr	r2, [r2, #4]
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002df8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <MX_TIM2_Init+0xe0>)
 8002e02:	edc3 7a00 	vstr	s15, [r3]
	F_TIM2 = 1 / T_TIM2;
 8002e06:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <MX_TIM2_Init+0xe0>)
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <MX_TIM2_Init+0xe4>)
 8002e16:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END TIM2_Init 2 */

}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000440 	.word	0x20000440
 8002e28:	4ca037a0 	.word	0x4ca037a0
 8002e2c:	200005ac 	.word	0x200005ac
 8002e30:	200005b0 	.word	0x200005b0

08002e34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e48:	463b      	mov	r3, r7
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec8 <MX_TIM3_Init+0x94>)
 8002e52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ecc <MX_TIM3_Init+0x98>)
 8002e54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8002e56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <MX_TIM3_Init+0x94>)
 8002e58:	2229      	movs	r2, #41	@ 0x29
 8002e5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <MX_TIM3_Init+0x94>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002e62:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <MX_TIM3_Init+0x94>)
 8002e64:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002e68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ec8 <MX_TIM3_Init+0x94>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e70:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <MX_TIM3_Init+0x94>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e76:	4814      	ldr	r0, [pc, #80]	@ (8002ec8 <MX_TIM3_Init+0x94>)
 8002e78:	f004 f960 	bl	800713c <HAL_TIM_Base_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e82:	f000 f8f3 	bl	800306c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	4619      	mov	r1, r3
 8002e92:	480d      	ldr	r0, [pc, #52]	@ (8002ec8 <MX_TIM3_Init+0x94>)
 8002e94:	f004 fb02 	bl	800749c <HAL_TIM_ConfigClockSource>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002e9e:	f000 f8e5 	bl	800306c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002eaa:	463b      	mov	r3, r7
 8002eac:	4619      	mov	r1, r3
 8002eae:	4806      	ldr	r0, [pc, #24]	@ (8002ec8 <MX_TIM3_Init+0x94>)
 8002eb0:	f004 fd2a 	bl	8007908 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002eba:	f000 f8d7 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000488 	.word	0x20000488
 8002ecc:	40000400 	.word	0x40000400

08002ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <MX_DMA_Init+0x4c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a0f      	ldr	r2, [pc, #60]	@ (8002f1c <MX_DMA_Init+0x4c>)
 8002ee0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <MX_DMA_Init+0x4c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	2038      	movs	r0, #56	@ 0x38
 8002ef8:	f000 fce5 	bl	80038c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002efc:	2038      	movs	r0, #56	@ 0x38
 8002efe:	f000 fcfe 	bl	80038fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 1);
 8002f02:	2201      	movs	r2, #1
 8002f04:	2100      	movs	r1, #0
 8002f06:	203b      	movs	r0, #59	@ 0x3b
 8002f08:	f000 fcdd 	bl	80038c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002f0c:	203b      	movs	r0, #59	@ 0x3b
 8002f0e:	f000 fcf6 	bl	80038fe <HAL_NVIC_EnableIRQ>

}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800

08002f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	@ 0x28
 8002f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	4b48      	ldr	r3, [pc, #288]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	4a47      	ldr	r2, [pc, #284]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f46:	4b45      	ldr	r3, [pc, #276]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b41      	ldr	r3, [pc, #260]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	4a40      	ldr	r2, [pc, #256]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f62:	4b3e      	ldr	r3, [pc, #248]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	4b3a      	ldr	r3, [pc, #232]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	4a39      	ldr	r2, [pc, #228]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7e:	4b37      	ldr	r3, [pc, #220]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	4b33      	ldr	r3, [pc, #204]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	4a32      	ldr	r2, [pc, #200]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9a:	4b30      	ldr	r3, [pc, #192]	@ (800305c <MX_GPIO_Init+0x13c>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2110      	movs	r1, #16
 8002faa:	482d      	ldr	r0, [pc, #180]	@ (8003060 <MX_GPIO_Init+0x140>)
 8002fac:	f001 f9f0 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2110      	movs	r1, #16
 8002fb4:	482b      	ldr	r0, [pc, #172]	@ (8003064 <MX_GPIO_Init+0x144>)
 8002fb6:	f001 f9eb 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2110      	movs	r1, #16
 8002fbe:	482a      	ldr	r0, [pc, #168]	@ (8003068 <MX_GPIO_Init+0x148>)
 8002fc0:	f001 f9e6 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8002fc4:	230c      	movs	r3, #12
 8002fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fc8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4822      	ldr	r0, [pc, #136]	@ (8003064 <MX_GPIO_Init+0x144>)
 8002fda:	f001 f83d 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 8002fde:	2310      	movs	r3, #16
 8002fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	481a      	ldr	r0, [pc, #104]	@ (8003060 <MX_GPIO_Init+0x140>)
 8002ff6:	f001 f82f 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	4814      	ldr	r0, [pc, #80]	@ (8003064 <MX_GPIO_Init+0x144>)
 8003012:	f001 f821 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003016:	2310      	movs	r3, #16
 8003018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800301a:	2301      	movs	r3, #1
 800301c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003022:	2300      	movs	r3, #0
 8003024:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	4619      	mov	r1, r3
 800302c:	480e      	ldr	r0, [pc, #56]	@ (8003068 <MX_GPIO_Init+0x148>)
 800302e:	f001 f813 	bl	8004058 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	2101      	movs	r1, #1
 8003036:	2008      	movs	r0, #8
 8003038:	f000 fc45 	bl	80038c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800303c:	2008      	movs	r0, #8
 800303e:	f000 fc5e 	bl	80038fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 8003042:	2201      	movs	r2, #1
 8003044:	2101      	movs	r1, #1
 8003046:	2009      	movs	r0, #9
 8003048:	f000 fc3d 	bl	80038c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800304c:	2009      	movs	r0, #9
 800304e:	f000 fc56 	bl	80038fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003052:	bf00      	nop
 8003054:	3728      	adds	r7, #40	@ 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	40020000 	.word	0x40020000
 8003064:	40020800 	.word	0x40020800
 8003068:	40020400 	.word	0x40020400

0800306c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b0a0      	sub	sp, #128	@ 0x80
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	char txBuff[128];
	sprintf(txBuff, "SPI Error!");
 8003072:	463b      	mov	r3, r7
 8003074:	490b      	ldr	r1, [pc, #44]	@ (80030a4 <Error_Handler+0x38>)
 8003076:	4618      	mov	r0, r3
 8003078:	f009 fa24 	bl	800c4c4 <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 800307c:	bf00      	nop
 800307e:	463b      	mov	r3, r7
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd f8f5 	bl	8000270 <strlen>
 8003086:	4603      	mov	r3, r0
 8003088:	b29a      	uxth	r2, r3
 800308a:	463b      	mov	r3, r7
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f008 f8a2 	bl	800b1d8 <CDC_Transmit_FS>
 8003094:	4603      	mov	r3, r0
 8003096:	2b02      	cmp	r3, #2
 8003098:	d0f1      	beq.n	800307e <Error_Handler+0x12>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800309a:	b672      	cpsid	i
}
 800309c:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800309e:	bf00      	nop
 80030a0:	e7fd      	b.n	800309e <Error_Handler+0x32>
 80030a2:	bf00      	nop
 80030a4:	08010d6c 	.word	0x08010d6c

080030a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <HAL_MspInit+0x4c>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	4a0f      	ldr	r2, [pc, #60]	@ (80030f4 <HAL_MspInit+0x4c>)
 80030b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <HAL_MspInit+0x4c>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c6:	607b      	str	r3, [r7, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_MspInit+0x4c>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	4a08      	ldr	r2, [pc, #32]	@ (80030f4 <HAL_MspInit+0x4c>)
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_MspInit+0x4c>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800

080030f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	@ 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a4c      	ldr	r2, [pc, #304]	@ (8003248 <HAL_SPI_MspInit+0x150>)
 8003116:	4293      	cmp	r3, r2
 8003118:	f040 8092 	bne.w	8003240 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	4b4a      	ldr	r3, [pc, #296]	@ (800324c <HAL_SPI_MspInit+0x154>)
 8003122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003124:	4a49      	ldr	r2, [pc, #292]	@ (800324c <HAL_SPI_MspInit+0x154>)
 8003126:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800312a:	6453      	str	r3, [r2, #68]	@ 0x44
 800312c:	4b47      	ldr	r3, [pc, #284]	@ (800324c <HAL_SPI_MspInit+0x154>)
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	4b43      	ldr	r3, [pc, #268]	@ (800324c <HAL_SPI_MspInit+0x154>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	4a42      	ldr	r2, [pc, #264]	@ (800324c <HAL_SPI_MspInit+0x154>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6313      	str	r3, [r2, #48]	@ 0x30
 8003148:	4b40      	ldr	r3, [pc, #256]	@ (800324c <HAL_SPI_MspInit+0x154>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003154:	23e0      	movs	r3, #224	@ 0xe0
 8003156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003160:	2303      	movs	r3, #3
 8003162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003164:	2305      	movs	r3, #5
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4619      	mov	r1, r3
 800316e:	4838      	ldr	r0, [pc, #224]	@ (8003250 <HAL_SPI_MspInit+0x158>)
 8003170:	f000 ff72 	bl	8004058 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003174:	4b37      	ldr	r3, [pc, #220]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 8003176:	4a38      	ldr	r2, [pc, #224]	@ (8003258 <HAL_SPI_MspInit+0x160>)
 8003178:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800317a:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 800317c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003180:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003182:	4b34      	ldr	r3, [pc, #208]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003188:	4b32      	ldr	r3, [pc, #200]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800318e:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 8003190:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003194:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003196:	4b2f      	ldr	r3, [pc, #188]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 8003198:	2200      	movs	r2, #0
 800319a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800319c:	4b2d      	ldr	r3, [pc, #180]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80031a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 80031aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031ae:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031b0:	4b28      	ldr	r3, [pc, #160]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80031b6:	4827      	ldr	r0, [pc, #156]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 80031b8:	f000 fbbc 	bl	8003934 <HAL_DMA_Init>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80031c2:	f7ff ff53 	bl	800306c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 80031ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80031cc:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <HAL_SPI_MspInit+0x15c>)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80031d2:	4b22      	ldr	r3, [pc, #136]	@ (800325c <HAL_SPI_MspInit+0x164>)
 80031d4:	4a22      	ldr	r2, [pc, #136]	@ (8003260 <HAL_SPI_MspInit+0x168>)
 80031d6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80031d8:	4b20      	ldr	r3, [pc, #128]	@ (800325c <HAL_SPI_MspInit+0x164>)
 80031da:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80031de:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031e0:	4b1e      	ldr	r3, [pc, #120]	@ (800325c <HAL_SPI_MspInit+0x164>)
 80031e2:	2240      	movs	r2, #64	@ 0x40
 80031e4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e6:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <HAL_SPI_MspInit+0x164>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <HAL_SPI_MspInit+0x164>)
 80031ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031f2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031f4:	4b19      	ldr	r3, [pc, #100]	@ (800325c <HAL_SPI_MspInit+0x164>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031fa:	4b18      	ldr	r3, [pc, #96]	@ (800325c <HAL_SPI_MspInit+0x164>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003200:	4b16      	ldr	r3, [pc, #88]	@ (800325c <HAL_SPI_MspInit+0x164>)
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003206:	4b15      	ldr	r3, [pc, #84]	@ (800325c <HAL_SPI_MspInit+0x164>)
 8003208:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800320c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800320e:	4b13      	ldr	r3, [pc, #76]	@ (800325c <HAL_SPI_MspInit+0x164>)
 8003210:	2200      	movs	r2, #0
 8003212:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003214:	4811      	ldr	r0, [pc, #68]	@ (800325c <HAL_SPI_MspInit+0x164>)
 8003216:	f000 fb8d 	bl	8003934 <HAL_DMA_Init>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8003220:	f7ff ff24 	bl	800306c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <HAL_SPI_MspInit+0x164>)
 8003228:	649a      	str	r2, [r3, #72]	@ 0x48
 800322a:	4a0c      	ldr	r2, [pc, #48]	@ (800325c <HAL_SPI_MspInit+0x164>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003230:	2200      	movs	r2, #0
 8003232:	2100      	movs	r1, #0
 8003234:	2023      	movs	r0, #35	@ 0x23
 8003236:	f000 fb46 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800323a:	2023      	movs	r0, #35	@ 0x23
 800323c:	f000 fb5f 	bl	80038fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003240:	bf00      	nop
 8003242:	3728      	adds	r7, #40	@ 0x28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40013000 	.word	0x40013000
 800324c:	40023800 	.word	0x40023800
 8003250:	40020000 	.word	0x40020000
 8003254:	20000380 	.word	0x20000380
 8003258:	40026410 	.word	0x40026410
 800325c:	200003e0 	.word	0x200003e0
 8003260:	40026458 	.word	0x40026458

08003264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003274:	d116      	bne.n	80032a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b1a      	ldr	r3, [pc, #104]	@ (80032e4 <HAL_TIM_Base_MspInit+0x80>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	4a19      	ldr	r2, [pc, #100]	@ (80032e4 <HAL_TIM_Base_MspInit+0x80>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6413      	str	r3, [r2, #64]	@ 0x40
 8003286:	4b17      	ldr	r3, [pc, #92]	@ (80032e4 <HAL_TIM_Base_MspInit+0x80>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	201c      	movs	r0, #28
 8003298:	f000 fb15 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800329c:	201c      	movs	r0, #28
 800329e:	f000 fb2e 	bl	80038fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032a2:	e01a      	b.n	80032da <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0f      	ldr	r2, [pc, #60]	@ (80032e8 <HAL_TIM_Base_MspInit+0x84>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d115      	bne.n	80032da <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	4b0c      	ldr	r3, [pc, #48]	@ (80032e4 <HAL_TIM_Base_MspInit+0x80>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	4a0b      	ldr	r2, [pc, #44]	@ (80032e4 <HAL_TIM_Base_MspInit+0x80>)
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032be:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <HAL_TIM_Base_MspInit+0x80>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	201d      	movs	r0, #29
 80032d0:	f000 faf9 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032d4:	201d      	movs	r0, #29
 80032d6:	f000 fb12 	bl	80038fe <HAL_NVIC_EnableIRQ>
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40000400 	.word	0x40000400

080032ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <NMI_Handler+0x4>

080032f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <HardFault_Handler+0x4>

080032fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003300:	bf00      	nop
 8003302:	e7fd      	b.n	8003300 <MemManage_Handler+0x4>

08003304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <BusFault_Handler+0x4>

0800330c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <UsageFault_Handler+0x4>

08003314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003342:	f000 f9a1 	bl	8003688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}

0800334a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 800334e:	2004      	movs	r0, #4
 8003350:	f001 f852 	bl	80043f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}

08003358 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 800335c:	2008      	movs	r0, #8
 800335e:	f001 f84b 	bl	80043f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800336c:	4802      	ldr	r0, [pc, #8]	@ (8003378 <TIM2_IRQHandler+0x10>)
 800336e:	f003 ffa5 	bl	80072bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000440 	.word	0x20000440

0800337c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003380:	4802      	ldr	r0, [pc, #8]	@ (800338c <TIM3_IRQHandler+0x10>)
 8003382:	f003 ff9b 	bl	80072bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000488 	.word	0x20000488

08003390 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003394:	4802      	ldr	r0, [pc, #8]	@ (80033a0 <SPI1_IRQHandler+0x10>)
 8003396:	f003 fb79 	bl	8006a8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000328 	.word	0x20000328

080033a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80033a8:	4802      	ldr	r0, [pc, #8]	@ (80033b4 <DMA2_Stream0_IRQHandler+0x10>)
 80033aa:	f000 fbeb 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000380 	.word	0x20000380

080033b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80033bc:	4802      	ldr	r0, [pc, #8]	@ (80033c8 <DMA2_Stream3_IRQHandler+0x10>)
 80033be:	f000 fbe1 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200003e0 	.word	0x200003e0

080033cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80033d0:	4802      	ldr	r0, [pc, #8]	@ (80033dc <OTG_FS_IRQHandler+0x10>)
 80033d2:	f001 f96d 	bl	80046b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20001ad8 	.word	0x20001ad8

080033e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return 1;
 80033e4:	2301      	movs	r3, #1
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <_kill>:

int _kill(int pid, int sig)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033fa:	f009 f919 	bl	800c630 <__errno>
 80033fe:	4603      	mov	r3, r0
 8003400:	2216      	movs	r2, #22
 8003402:	601a      	str	r2, [r3, #0]
  return -1;
 8003404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <_exit>:

void _exit (int status)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003418:	f04f 31ff 	mov.w	r1, #4294967295
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ffe7 	bl	80033f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003422:	bf00      	nop
 8003424:	e7fd      	b.n	8003422 <_exit+0x12>

08003426 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e00a      	b.n	800344e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003438:	f3af 8000 	nop.w
 800343c:	4601      	mov	r1, r0
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	60ba      	str	r2, [r7, #8]
 8003444:	b2ca      	uxtb	r2, r1
 8003446:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3301      	adds	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	429a      	cmp	r2, r3
 8003454:	dbf0      	blt.n	8003438 <_read+0x12>
  }

  return len;
 8003456:	687b      	ldr	r3, [r7, #4]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e009      	b.n	8003486 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	60ba      	str	r2, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	3301      	adds	r3, #1
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	429a      	cmp	r2, r3
 800348c:	dbf1      	blt.n	8003472 <_write+0x12>
  }
  return len;
 800348e:	687b      	ldr	r3, [r7, #4]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_close>:

int _close(int file)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034c0:	605a      	str	r2, [r3, #4]
  return 0;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_isatty>:

int _isatty(int file)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034d8:	2301      	movs	r3, #1
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003508:	4a14      	ldr	r2, [pc, #80]	@ (800355c <_sbrk+0x5c>)
 800350a:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <_sbrk+0x60>)
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003514:	4b13      	ldr	r3, [pc, #76]	@ (8003564 <_sbrk+0x64>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800351c:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <_sbrk+0x64>)
 800351e:	4a12      	ldr	r2, [pc, #72]	@ (8003568 <_sbrk+0x68>)
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003522:	4b10      	ldr	r3, [pc, #64]	@ (8003564 <_sbrk+0x64>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	429a      	cmp	r2, r3
 800352e:	d207      	bcs.n	8003540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003530:	f009 f87e 	bl	800c630 <__errno>
 8003534:	4603      	mov	r3, r0
 8003536:	220c      	movs	r2, #12
 8003538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800353a:	f04f 33ff 	mov.w	r3, #4294967295
 800353e:	e009      	b.n	8003554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003540:	4b08      	ldr	r3, [pc, #32]	@ (8003564 <_sbrk+0x64>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003546:	4b07      	ldr	r3, [pc, #28]	@ (8003564 <_sbrk+0x64>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	4a05      	ldr	r2, [pc, #20]	@ (8003564 <_sbrk+0x64>)
 8003550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20020000 	.word	0x20020000
 8003560:	00000400 	.word	0x00000400
 8003564:	200005f0 	.word	0x200005f0
 8003568:	20002328 	.word	0x20002328

0800356c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <SystemInit+0x20>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	4a05      	ldr	r2, [pc, #20]	@ (800358c <SystemInit+0x20>)
 8003578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800357c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003590:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003594:	f7ff ffea 	bl	800356c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003598:	480c      	ldr	r0, [pc, #48]	@ (80035cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800359a:	490d      	ldr	r1, [pc, #52]	@ (80035d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800359c:	4a0d      	ldr	r2, [pc, #52]	@ (80035d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a0:	e002      	b.n	80035a8 <LoopCopyDataInit>

080035a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035a6:	3304      	adds	r3, #4

080035a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035ac:	d3f9      	bcc.n	80035a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ae:	4a0a      	ldr	r2, [pc, #40]	@ (80035d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035b0:	4c0a      	ldr	r4, [pc, #40]	@ (80035dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80035b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035b4:	e001      	b.n	80035ba <LoopFillZerobss>

080035b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035b8:	3204      	adds	r2, #4

080035ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035bc:	d3fb      	bcc.n	80035b6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80035be:	f009 f83d 	bl	800c63c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035c2:	f7ff fa93 	bl	8002aec <main>
  bx  lr    
 80035c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d0:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 80035d4:	080115e0 	.word	0x080115e0
  ldr r2, =_sbss
 80035d8:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 80035dc:	20002328 	.word	0x20002328

080035e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035e0:	e7fe      	b.n	80035e0 <ADC_IRQHandler>
	...

080035e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003624 <HAL_Init+0x40>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003624 <HAL_Init+0x40>)
 80035ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <HAL_Init+0x40>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <HAL_Init+0x40>)
 80035fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003600:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <HAL_Init+0x40>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a07      	ldr	r2, [pc, #28]	@ (8003624 <HAL_Init+0x40>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800360c:	2003      	movs	r0, #3
 800360e:	f000 f94f 	bl	80038b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003612:	200f      	movs	r0, #15
 8003614:	f000 f808 	bl	8003628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003618:	f7ff fd46 	bl	80030a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023c00 	.word	0x40023c00

08003628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003630:	4b12      	ldr	r3, [pc, #72]	@ (800367c <HAL_InitTick+0x54>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <HAL_InitTick+0x58>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800363e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f967 	bl	800391a <HAL_SYSTICK_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e00e      	b.n	8003674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b0f      	cmp	r3, #15
 800365a:	d80a      	bhi.n	8003672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800365c:	2200      	movs	r2, #0
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	f000 f92f 	bl	80038c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003668:	4a06      	ldr	r2, [pc, #24]	@ (8003684 <HAL_InitTick+0x5c>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	e000      	b.n	8003674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	2000002c 	.word	0x2000002c
 8003680:	20000034 	.word	0x20000034
 8003684:	20000030 	.word	0x20000030

08003688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800368c:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <HAL_IncTick+0x20>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <HAL_IncTick+0x24>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4413      	add	r3, r2
 8003698:	4a04      	ldr	r2, [pc, #16]	@ (80036ac <HAL_IncTick+0x24>)
 800369a:	6013      	str	r3, [r2, #0]
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000034 	.word	0x20000034
 80036ac:	200005f4 	.word	0x200005f4

080036b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return uwTick;
 80036b4:	4b03      	ldr	r3, [pc, #12]	@ (80036c4 <HAL_GetTick+0x14>)
 80036b6:	681b      	ldr	r3, [r3, #0]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	200005f4 	.word	0x200005f4

080036c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d0:	f7ff ffee 	bl	80036b0 <HAL_GetTick>
 80036d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d005      	beq.n	80036ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036e2:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <HAL_Delay+0x44>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ee:	bf00      	nop
 80036f0:	f7ff ffde 	bl	80036b0 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d8f7      	bhi.n	80036f0 <HAL_Delay+0x28>
  {
  }
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000034 	.word	0x20000034

08003710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003720:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800372c:	4013      	ands	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800373c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003742:	4a04      	ldr	r2, [pc, #16]	@ (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	60d3      	str	r3, [r2, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800375c:	4b04      	ldr	r3, [pc, #16]	@ (8003770 <__NVIC_GetPriorityGrouping+0x18>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	f003 0307 	and.w	r3, r3, #7
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db0b      	blt.n	800379e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	4907      	ldr	r1, [pc, #28]	@ (80037ac <__NVIC_EnableIRQ+0x38>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db0a      	blt.n	80037da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	490c      	ldr	r1, [pc, #48]	@ (80037fc <__NVIC_SetPriority+0x4c>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	0112      	lsls	r2, r2, #4
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d8:	e00a      	b.n	80037f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4908      	ldr	r1, [pc, #32]	@ (8003800 <__NVIC_SetPriority+0x50>)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3b04      	subs	r3, #4
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	440b      	add	r3, r1
 80037ee:	761a      	strb	r2, [r3, #24]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	@ 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	2b04      	cmp	r3, #4
 8003820:	bf28      	it	cs
 8003822:	2304      	movcs	r3, #4
 8003824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3304      	adds	r3, #4
 800382a:	2b06      	cmp	r3, #6
 800382c:	d902      	bls.n	8003834 <NVIC_EncodePriority+0x30>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b03      	subs	r3, #3
 8003832:	e000      	b.n	8003836 <NVIC_EncodePriority+0x32>
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	401a      	ands	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800384c:	f04f 31ff 	mov.w	r1, #4294967295
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	43d9      	mvns	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	4313      	orrs	r3, r2
         );
}
 800385e:	4618      	mov	r0, r3
 8003860:	3724      	adds	r7, #36	@ 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3b01      	subs	r3, #1
 8003878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800387c:	d301      	bcc.n	8003882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800387e:	2301      	movs	r3, #1
 8003880:	e00f      	b.n	80038a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003882:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <SysTick_Config+0x40>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800388a:	210f      	movs	r1, #15
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	f7ff ff8e 	bl	80037b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003894:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <SysTick_Config+0x40>)
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389a:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <SysTick_Config+0x40>)
 800389c:	2207      	movs	r2, #7
 800389e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	e000e010 	.word	0xe000e010

080038b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff29 	bl	8003710 <__NVIC_SetPriorityGrouping>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d8:	f7ff ff3e 	bl	8003758 <__NVIC_GetPriorityGrouping>
 80038dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	6978      	ldr	r0, [r7, #20]
 80038e4:	f7ff ff8e 	bl	8003804 <NVIC_EncodePriority>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff5d 	bl	80037b0 <__NVIC_SetPriority>
}
 80038f6:	bf00      	nop
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff31 	bl	8003774 <__NVIC_EnableIRQ>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ffa2 	bl	800386c <SysTick_Config>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003940:	f7ff feb6 	bl	80036b0 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e099      	b.n	8003a84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003970:	e00f      	b.n	8003992 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003972:	f7ff fe9d 	bl	80036b0 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b05      	cmp	r3, #5
 800397e:	d908      	bls.n	8003992 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2203      	movs	r2, #3
 800398a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e078      	b.n	8003a84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e8      	bne.n	8003972 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4b38      	ldr	r3, [pc, #224]	@ (8003a8c <HAL_DMA_Init+0x158>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d107      	bne.n	80039fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f4:	4313      	orrs	r3, r2
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f023 0307 	bic.w	r3, r3, #7
 8003a12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d117      	bne.n	8003a56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00e      	beq.n	8003a56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fa91 	bl	8003f60 <DMA_CheckFifoParam>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2240      	movs	r2, #64	@ 0x40
 8003a48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a52:	2301      	movs	r3, #1
 8003a54:	e016      	b.n	8003a84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa48 	bl	8003ef4 <DMA_CalcBaseAndBitshift>
 8003a64:	4603      	mov	r3, r0
 8003a66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6c:	223f      	movs	r2, #63	@ 0x3f
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	f010803f 	.word	0xf010803f

08003a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_DMA_Start_IT+0x26>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e040      	b.n	8003b38 <HAL_DMA_Start_IT+0xa8>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d12f      	bne.n	8003b2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2202      	movs	r2, #2
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f9da 	bl	8003e98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	223f      	movs	r2, #63	@ 0x3f
 8003aea:	409a      	lsls	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0216 	orr.w	r2, r2, #22
 8003afe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0208 	orr.w	r2, r2, #8
 8003b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e005      	b.n	8003b36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
 8003b34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2280      	movs	r2, #128	@ 0x80
 8003b58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e00c      	b.n	8003b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2205      	movs	r2, #5
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b90:	4b8e      	ldr	r3, [pc, #568]	@ (8003dcc <HAL_DMA_IRQHandler+0x248>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a8e      	ldr	r2, [pc, #568]	@ (8003dd0 <HAL_DMA_IRQHandler+0x24c>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bae:	2208      	movs	r2, #8
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0204 	bic.w	r2, r2, #4
 8003bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bdc:	2208      	movs	r2, #8
 8003bde:	409a      	lsls	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be8:	f043 0201 	orr.w	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d012      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c12:	2201      	movs	r2, #1
 8003c14:	409a      	lsls	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1e:	f043 0202 	orr.w	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d012      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c48:	2204      	movs	r2, #4
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c54:	f043 0204 	orr.w	r2, r3, #4
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	2210      	movs	r2, #16
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d043      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d03c      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7e:	2210      	movs	r2, #16
 8003c80:	409a      	lsls	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d018      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d108      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d024      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
 8003cb2:	e01f      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01b      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
 8003cc4:	e016      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0208 	bic.w	r2, r2, #8
 8003ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 808f 	beq.w	8003e24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8087 	beq.w	8003e24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d136      	bne.n	8003d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0216 	bic.w	r2, r2, #22
 8003d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d103      	bne.n	8003d5e <HAL_DMA_IRQHandler+0x1da>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0208 	bic.w	r2, r2, #8
 8003d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d72:	223f      	movs	r2, #63	@ 0x3f
 8003d74:	409a      	lsls	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d07e      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
        }
        return;
 8003d9a:	e079      	b.n	8003e90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10d      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d031      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
 8003dc8:	e02c      	b.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
 8003dca:	bf00      	nop
 8003dcc:	2000002c 	.word	0x2000002c
 8003dd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d023      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
 8003de4:	e01e      	b.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10f      	bne.n	8003e14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0210 	bic.w	r2, r2, #16
 8003e02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d032      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d022      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d307      	bcc.n	8003e6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f2      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x2cc>
 8003e6a:	e000      	b.n	8003e6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
 8003e8e:	e000      	b.n	8003e92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e90:	bf00      	nop
    }
  }
}
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	d108      	bne.n	8003ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ed6:	e007      	b.n	8003ee8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	3b10      	subs	r3, #16
 8003f04:	4a14      	ldr	r2, [pc, #80]	@ (8003f58 <DMA_CalcBaseAndBitshift+0x64>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f0e:	4a13      	ldr	r2, [pc, #76]	@ (8003f5c <DMA_CalcBaseAndBitshift+0x68>)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d909      	bls.n	8003f36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	1d1a      	adds	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f34:	e007      	b.n	8003f46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	aaaaaaab 	.word	0xaaaaaaab
 8003f5c:	08010dd0 	.word	0x08010dd0

08003f60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11f      	bne.n	8003fba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d856      	bhi.n	800402e <DMA_CheckFifoParam+0xce>
 8003f80:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <DMA_CheckFifoParam+0x28>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003fab 	.word	0x08003fab
 8003f90:	08003f99 	.word	0x08003f99
 8003f94:	0800402f 	.word	0x0800402f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d046      	beq.n	8004032 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa8:	e043      	b.n	8004032 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fb2:	d140      	bne.n	8004036 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb8:	e03d      	b.n	8004036 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fc2:	d121      	bne.n	8004008 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d837      	bhi.n	800403a <DMA_CheckFifoParam+0xda>
 8003fca:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd0 <DMA_CheckFifoParam+0x70>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003fe7 	.word	0x08003fe7
 8003fd8:	08003fe1 	.word	0x08003fe1
 8003fdc:	08003ff9 	.word	0x08003ff9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e030      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d025      	beq.n	800403e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff6:	e022      	b.n	800403e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004000:	d11f      	bne.n	8004042 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004006:	e01c      	b.n	8004042 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d903      	bls.n	8004016 <DMA_CheckFifoParam+0xb6>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b03      	cmp	r3, #3
 8004012:	d003      	beq.n	800401c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004014:	e018      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
      break;
 800401a:	e015      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e00b      	b.n	8004046 <DMA_CheckFifoParam+0xe6>
      break;
 800402e:	bf00      	nop
 8004030:	e00a      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 8004032:	bf00      	nop
 8004034:	e008      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 8004036:	bf00      	nop
 8004038:	e006      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 800403a:	bf00      	nop
 800403c:	e004      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 800403e:	bf00      	nop
 8004040:	e002      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;   
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 8004046:	bf00      	nop
    }
  } 
  
  return status; 
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop

08004058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	@ 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	e16b      	b.n	800434c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004074:	2201      	movs	r2, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	429a      	cmp	r2, r3
 800408e:	f040 815a 	bne.w	8004346 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d005      	beq.n	80040aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d130      	bne.n	800410c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	2203      	movs	r2, #3
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040e0:	2201      	movs	r2, #1
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	f003 0201 	and.w	r2, r3, #1
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	2b03      	cmp	r3, #3
 8004116:	d017      	beq.n	8004148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	2203      	movs	r2, #3
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d123      	bne.n	800419c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	08da      	lsrs	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3208      	adds	r2, #8
 800415c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	220f      	movs	r2, #15
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	08da      	lsrs	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	69b9      	ldr	r1, [r7, #24]
 8004198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	2203      	movs	r2, #3
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 0203 	and.w	r2, r3, #3
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80b4 	beq.w	8004346 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	4b60      	ldr	r3, [pc, #384]	@ (8004364 <HAL_GPIO_Init+0x30c>)
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	4a5f      	ldr	r2, [pc, #380]	@ (8004364 <HAL_GPIO_Init+0x30c>)
 80041e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004364 <HAL_GPIO_Init+0x30c>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004368 <HAL_GPIO_Init+0x310>)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	3302      	adds	r3, #2
 8004202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	220f      	movs	r2, #15
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a52      	ldr	r2, [pc, #328]	@ (800436c <HAL_GPIO_Init+0x314>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d02b      	beq.n	800427e <HAL_GPIO_Init+0x226>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a51      	ldr	r2, [pc, #324]	@ (8004370 <HAL_GPIO_Init+0x318>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d025      	beq.n	800427a <HAL_GPIO_Init+0x222>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a50      	ldr	r2, [pc, #320]	@ (8004374 <HAL_GPIO_Init+0x31c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01f      	beq.n	8004276 <HAL_GPIO_Init+0x21e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a4f      	ldr	r2, [pc, #316]	@ (8004378 <HAL_GPIO_Init+0x320>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d019      	beq.n	8004272 <HAL_GPIO_Init+0x21a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a4e      	ldr	r2, [pc, #312]	@ (800437c <HAL_GPIO_Init+0x324>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_GPIO_Init+0x216>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4d      	ldr	r2, [pc, #308]	@ (8004380 <HAL_GPIO_Init+0x328>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00d      	beq.n	800426a <HAL_GPIO_Init+0x212>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4c      	ldr	r2, [pc, #304]	@ (8004384 <HAL_GPIO_Init+0x32c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <HAL_GPIO_Init+0x20e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4b      	ldr	r2, [pc, #300]	@ (8004388 <HAL_GPIO_Init+0x330>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_GPIO_Init+0x20a>
 800425e:	2307      	movs	r3, #7
 8004260:	e00e      	b.n	8004280 <HAL_GPIO_Init+0x228>
 8004262:	2308      	movs	r3, #8
 8004264:	e00c      	b.n	8004280 <HAL_GPIO_Init+0x228>
 8004266:	2306      	movs	r3, #6
 8004268:	e00a      	b.n	8004280 <HAL_GPIO_Init+0x228>
 800426a:	2305      	movs	r3, #5
 800426c:	e008      	b.n	8004280 <HAL_GPIO_Init+0x228>
 800426e:	2304      	movs	r3, #4
 8004270:	e006      	b.n	8004280 <HAL_GPIO_Init+0x228>
 8004272:	2303      	movs	r3, #3
 8004274:	e004      	b.n	8004280 <HAL_GPIO_Init+0x228>
 8004276:	2302      	movs	r3, #2
 8004278:	e002      	b.n	8004280 <HAL_GPIO_Init+0x228>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_GPIO_Init+0x228>
 800427e:	2300      	movs	r3, #0
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	f002 0203 	and.w	r2, r2, #3
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	4093      	lsls	r3, r2
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004290:	4935      	ldr	r1, [pc, #212]	@ (8004368 <HAL_GPIO_Init+0x310>)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800429e:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <HAL_GPIO_Init+0x334>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042c2:	4a32      	ldr	r2, [pc, #200]	@ (800438c <HAL_GPIO_Init+0x334>)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042c8:	4b30      	ldr	r3, [pc, #192]	@ (800438c <HAL_GPIO_Init+0x334>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042ec:	4a27      	ldr	r2, [pc, #156]	@ (800438c <HAL_GPIO_Init+0x334>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042f2:	4b26      	ldr	r3, [pc, #152]	@ (800438c <HAL_GPIO_Init+0x334>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004316:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <HAL_GPIO_Init+0x334>)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800431c:	4b1b      	ldr	r3, [pc, #108]	@ (800438c <HAL_GPIO_Init+0x334>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004340:	4a12      	ldr	r2, [pc, #72]	@ (800438c <HAL_GPIO_Init+0x334>)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3301      	adds	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	f67f ae90 	bls.w	8004074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3724      	adds	r7, #36	@ 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	40013800 	.word	0x40013800
 800436c:	40020000 	.word	0x40020000
 8004370:	40020400 	.word	0x40020400
 8004374:	40020800 	.word	0x40020800
 8004378:	40020c00 	.word	0x40020c00
 800437c:	40021000 	.word	0x40021000
 8004380:	40021400 	.word	0x40021400
 8004384:	40021800 	.word	0x40021800
 8004388:	40021c00 	.word	0x40021c00
 800438c:	40013c00 	.word	0x40013c00

08004390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
 800439c:	4613      	mov	r3, r2
 800439e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043a0:	787b      	ldrb	r3, [r7, #1]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043ac:	e003      	b.n	80043b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ae:	887b      	ldrh	r3, [r7, #2]
 80043b0:	041a      	lsls	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	619a      	str	r2, [r3, #24]
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043d4:	887a      	ldrh	r2, [r7, #2]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4013      	ands	r3, r2
 80043da:	041a      	lsls	r2, r3, #16
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	43d9      	mvns	r1, r3
 80043e0:	887b      	ldrh	r3, [r7, #2]
 80043e2:	400b      	ands	r3, r1
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	619a      	str	r2, [r3, #24]
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004402:	4b08      	ldr	r3, [pc, #32]	@ (8004424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d006      	beq.n	800441c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800440e:	4a05      	ldr	r2, [pc, #20]	@ (8004424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe f966 	bl	80026e8 <HAL_GPIO_EXTI_Callback>
  }
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40013c00 	.word	0x40013c00

08004428 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e101      	b.n	800463e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f007 f807 	bl	800b468 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2203      	movs	r2, #3
 800445e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004468:	d102      	bne.n	8004470 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f003 fbee 	bl	8007c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7c1a      	ldrb	r2, [r3, #16]
 8004482:	f88d 2000 	strb.w	r2, [sp]
 8004486:	3304      	adds	r3, #4
 8004488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800448a:	f003 facd 	bl	8007a28 <USB_CoreInit>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0ce      	b.n	800463e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f003 fbe6 	bl	8007c78 <USB_SetCurrentMode>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0bf      	b.n	800463e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044be:	2300      	movs	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	e04a      	b.n	800455a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044c4:	7bfa      	ldrb	r2, [r7, #15]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	3315      	adds	r3, #21
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	3314      	adds	r3, #20
 80044e8:	7bfa      	ldrb	r2, [r7, #15]
 80044ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	b298      	uxth	r0, r3
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	332e      	adds	r3, #46	@ 0x2e
 8004500:	4602      	mov	r2, r0
 8004502:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3318      	adds	r3, #24
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004518:	7bfa      	ldrb	r2, [r7, #15]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	331c      	adds	r3, #28
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	3320      	adds	r3, #32
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	3324      	adds	r3, #36	@ 0x24
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	3301      	adds	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	791b      	ldrb	r3, [r3, #4]
 800455e:	7bfa      	ldrb	r2, [r7, #15]
 8004560:	429a      	cmp	r2, r3
 8004562:	d3af      	bcc.n	80044c4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004564:	2300      	movs	r3, #0
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	e044      	b.n	80045f4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800456a:	7bfa      	ldrb	r2, [r7, #15]
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004580:	7bfa      	ldrb	r2, [r7, #15]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004592:	7bfa      	ldrb	r2, [r7, #15]
 8004594:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045c2:	7bfa      	ldrb	r2, [r7, #15]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	3301      	adds	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	791b      	ldrb	r3, [r3, #4]
 80045f8:	7bfa      	ldrb	r2, [r7, #15]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d3b5      	bcc.n	800456a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	7c1a      	ldrb	r2, [r3, #16]
 8004606:	f88d 2000 	strb.w	r2, [sp]
 800460a:	3304      	adds	r3, #4
 800460c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800460e:	f003 fb7f 	bl	8007d10 <USB_DevInit>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e00c      	b.n	800463e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f004 fbc9 	bl	8008dce <USB_DevDisconnect>

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_PCD_Start+0x1c>
 800465e:	2302      	movs	r3, #2
 8004660:	e022      	b.n	80046a8 <HAL_PCD_Start+0x62>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800467a:	2b01      	cmp	r3, #1
 800467c:	d105      	bne.n	800468a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004682:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f003 fad0 	bl	8007c34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f004 fb77 	bl	8008d8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b08d      	sub	sp, #52	@ 0x34
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 fc35 	bl	8008f36 <USB_GetMode>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 848c 	bne.w	8004fec <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f004 fb99 	bl	8008e10 <USB_ReadInterrupts>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8482 	beq.w	8004fea <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f004 fb86 	bl	8008e10 <USB_ReadInterrupts>
 8004704:	4603      	mov	r3, r0
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d107      	bne.n	800471e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f002 0202 	and.w	r2, r2, #2
 800471c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f004 fb74 	bl	8008e10 <USB_ReadInterrupts>
 8004728:	4603      	mov	r3, r0
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b10      	cmp	r3, #16
 8004730:	d161      	bne.n	80047f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699a      	ldr	r2, [r3, #24]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0210 	bic.w	r2, r2, #16
 8004740:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	3304      	adds	r3, #4
 8004760:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	0c5b      	lsrs	r3, r3, #17
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	2b02      	cmp	r3, #2
 800476c:	d124      	bne.n	80047b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004774:	4013      	ands	r3, r2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d035      	beq.n	80047e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004788:	b29b      	uxth	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	6a38      	ldr	r0, [r7, #32]
 800478e:	f004 f9ab 	bl	8008ae8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800479e:	441a      	add	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	695a      	ldr	r2, [r3, #20]
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047b0:	441a      	add	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	615a      	str	r2, [r3, #20]
 80047b6:	e016      	b.n	80047e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	0c5b      	lsrs	r3, r3, #17
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	2b06      	cmp	r3, #6
 80047c2:	d110      	bne.n	80047e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047ca:	2208      	movs	r2, #8
 80047cc:	4619      	mov	r1, r3
 80047ce:	6a38      	ldr	r0, [r7, #32]
 80047d0:	f004 f98a 	bl	8008ae8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	091b      	lsrs	r3, r3, #4
 80047dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047e0:	441a      	add	r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0210 	orr.w	r2, r2, #16
 80047f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f004 fb08 	bl	8008e10 <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004806:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800480a:	f040 80a7 	bne.w	800495c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f004 fb0d 	bl	8008e36 <USB_ReadDevAllOutEpInterrupt>
 800481c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800481e:	e099      	b.n	8004954 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 808e 	beq.w	8004948 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f004 fb31 	bl	8008e9e <USB_ReadDevOutEPInterrupt>
 800483c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00c      	beq.n	8004862 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004854:	461a      	mov	r2, r3
 8004856:	2301      	movs	r3, #1
 8004858:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800485a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fea3 	bl	80055a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00c      	beq.n	8004886 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004878:	461a      	mov	r2, r3
 800487a:	2308      	movs	r3, #8
 800487c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800487e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 ff79 	bl	8005778 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489c:	461a      	mov	r2, r3
 800489e:	2310      	movs	r3, #16
 80048a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d030      	beq.n	800490e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b4:	2b80      	cmp	r3, #128	@ 0x80
 80048b6:	d109      	bne.n	80048cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80048cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	3304      	adds	r3, #4
 80048e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	78db      	ldrb	r3, [r3, #3]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d108      	bne.n	80048fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2200      	movs	r2, #0
 80048ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f006 febc 	bl	800b674 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004908:	461a      	mov	r2, r3
 800490a:	2302      	movs	r3, #2
 800490c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004924:	461a      	mov	r2, r3
 8004926:	2320      	movs	r3, #32
 8004928:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004940:	461a      	mov	r2, r3
 8004942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004946:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	3301      	adds	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800494e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	f47f af62 	bne.w	8004820 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f004 fa55 	bl	8008e10 <USB_ReadInterrupts>
 8004966:	4603      	mov	r3, r0
 8004968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800496c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004970:	f040 80db 	bne.w	8004b2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f004 fa76 	bl	8008e6a <USB_ReadDevAllInEpInterrupt>
 800497e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004984:	e0cd      	b.n	8004b22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80c2 	beq.w	8004b16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f004 fa9c 	bl	8008eda <USB_ReadDevInEPInterrupt>
 80049a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d057      	beq.n	8004a5e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	2201      	movs	r2, #1
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69f9      	ldr	r1, [r7, #28]
 80049ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ce:	4013      	ands	r3, r2
 80049d0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049de:	461a      	mov	r2, r3
 80049e0:	2301      	movs	r3, #1
 80049e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	799b      	ldrb	r3, [r3, #6]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d132      	bne.n	8004a52 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	3320      	adds	r3, #32
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4403      	add	r3, r0
 8004a0c:	331c      	adds	r3, #28
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4419      	add	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4403      	add	r3, r0
 8004a20:	3320      	adds	r3, #32
 8004a22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d113      	bne.n	8004a52 <HAL_PCD_IRQHandler+0x3a2>
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	3324      	adds	r3, #36	@ 0x24
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d108      	bne.n	8004a52 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	f004 faa3 	bl	8008f98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f006 fd86 	bl	800b56a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a74:	461a      	mov	r2, r3
 8004a76:	2308      	movs	r3, #8
 8004a78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a90:	461a      	mov	r2, r3
 8004a92:	2310      	movs	r3, #16
 8004a94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aac:	461a      	mov	r2, r3
 8004aae:	2340      	movs	r3, #64	@ 0x40
 8004ab0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d023      	beq.n	8004b04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004abe:	6a38      	ldr	r0, [r7, #32]
 8004ac0:	f003 fa8a 	bl	8007fd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	3310      	adds	r3, #16
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	78db      	ldrb	r3, [r3, #3]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d108      	bne.n	8004af2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f006 fdd3 	bl	800b698 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afe:	461a      	mov	r2, r3
 8004b00:	2302      	movs	r3, #2
 8004b02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fcbd 	bl	8005490 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	3301      	adds	r3, #1
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f47f af2e 	bne.w	8004986 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f004 f96e 	bl	8008e10 <USB_ReadInterrupts>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b3e:	d122      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d108      	bne.n	8004b70 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b66:	2100      	movs	r1, #0
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fea3 	bl	80058b4 <HAL_PCDEx_LPM_Callback>
 8004b6e:	e002      	b.n	8004b76 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f006 fd71 	bl	800b658 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f004 f940 	bl	8008e10 <USB_ReadInterrupts>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b9a:	d112      	bne.n	8004bc2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d102      	bne.n	8004bb2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f006 fd2d 	bl	800b60c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004bc0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f004 f922 	bl	8008e10 <USB_ReadInterrupts>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd6:	f040 80b7 	bne.w	8004d48 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2110      	movs	r1, #16
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f003 f9ef 	bl	8007fd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfe:	e046      	b.n	8004c8e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c40:	461a      	mov	r2, r3
 8004c42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	791b      	ldrb	r3, [r3, #4]
 8004c92:	461a      	mov	r2, r3
 8004c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d3b2      	bcc.n	8004c00 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ca8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004cac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	7bdb      	ldrb	r3, [r3, #15]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d016      	beq.n	8004ce4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cc6:	f043 030b 	orr.w	r3, r3, #11
 8004cca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cdc:	f043 030b 	orr.w	r3, r3, #11
 8004ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ce2:	e015      	b.n	8004d10 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cf2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004cf6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004cfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d0a:	f043 030b 	orr.w	r3, r3, #11
 8004d0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d32:	461a      	mov	r2, r3
 8004d34:	f004 f930 	bl	8008f98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f004 f85f 	bl	8008e10 <USB_ReadInterrupts>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d5c:	d123      	bne.n	8004da6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f004 f8f5 	bl	8008f52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f003 f9ac 	bl	80080ca <USB_GetDevSpeed>
 8004d72:	4603      	mov	r3, r0
 8004d74:	461a      	mov	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681c      	ldr	r4, [r3, #0]
 8004d7e:	f001 fa07 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 8004d82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f002 feb0 	bl	8007af0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f006 fc12 	bl	800b5ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f004 f830 	bl	8008e10 <USB_ReadInterrupts>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d10a      	bne.n	8004dd0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f006 fbef 	bl	800b59e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f002 0208 	and.w	r2, r2, #8
 8004dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f004 f81b 	bl	8008e10 <USB_ReadInterrupts>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de0:	2b80      	cmp	r3, #128	@ 0x80
 8004de2:	d123      	bne.n	8004e2c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004df0:	2301      	movs	r3, #1
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df4:	e014      	b.n	8004e20 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d105      	bne.n	8004e1a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fb0a 	bl	800542e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	791b      	ldrb	r3, [r3, #4]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d3e4      	bcc.n	8004df6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f003 ffed 	bl	8008e10 <USB_ReadInterrupts>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e40:	d13c      	bne.n	8004ebc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e42:	2301      	movs	r3, #1
 8004e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e46:	e02b      	b.n	8004ea0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	3318      	adds	r3, #24
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d115      	bne.n	8004e9a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004e6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da12      	bge.n	8004e9a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e78:	4613      	mov	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	3317      	adds	r3, #23
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 faca 	bl	800542e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	791b      	ldrb	r3, [r3, #4]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d3cd      	bcc.n	8004e48 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f003 ffa5 	bl	8008e10 <USB_ReadInterrupts>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ed0:	d156      	bne.n	8004f80 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed6:	e045      	b.n	8004f64 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eec:	4613      	mov	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d12e      	bne.n	8004f5e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	da2b      	bge.n	8004f5e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004f12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d121      	bne.n	8004f5e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f5a:	6053      	str	r3, [r2, #4]
            break;
 8004f5c:	e008      	b.n	8004f70 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	3301      	adds	r3, #1
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	791b      	ldrb	r3, [r3, #4]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d3b3      	bcc.n	8004ed8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f003 ff43 	bl	8008e10 <USB_ReadInterrupts>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f94:	d10a      	bne.n	8004fac <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f006 fb90 	bl	800b6bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f003 ff2d 	bl	8008e10 <USB_ReadInterrupts>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d115      	bne.n	8004fec <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f006 fb80 	bl	800b6d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6859      	ldr	r1, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
 8004fe8:	e000      	b.n	8004fec <HAL_PCD_IRQHandler+0x93c>
      return;
 8004fea:	bf00      	nop
    }
  }
}
 8004fec:	3734      	adds	r7, #52	@ 0x34
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd90      	pop	{r4, r7, pc}

08004ff2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_PCD_SetAddress+0x1a>
 8005008:	2302      	movs	r3, #2
 800500a:	e012      	b.n	8005032 <HAL_PCD_SetAddress+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	78fa      	ldrb	r2, [r7, #3]
 8005018:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f003 fe8c 	bl	8008d40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	4608      	mov	r0, r1
 8005044:	4611      	mov	r1, r2
 8005046:	461a      	mov	r2, r3
 8005048:	4603      	mov	r3, r0
 800504a:	70fb      	strb	r3, [r7, #3]
 800504c:	460b      	mov	r3, r1
 800504e:	803b      	strh	r3, [r7, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800505c:	2b00      	cmp	r3, #0
 800505e:	da0f      	bge.n	8005080 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	f003 020f 	and.w	r2, r3, #15
 8005066:	4613      	mov	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	3310      	adds	r3, #16
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4413      	add	r3, r2
 8005074:	3304      	adds	r3, #4
 8005076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	705a      	strb	r2, [r3, #1]
 800507e:	e00f      	b.n	80050a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	f003 020f 	and.w	r2, r3, #15
 8005086:	4613      	mov	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	3304      	adds	r3, #4
 8005098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80050ac:	883b      	ldrh	r3, [r7, #0]
 80050ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	78ba      	ldrb	r2, [r7, #2]
 80050ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050ce:	78bb      	ldrb	r3, [r7, #2]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d102      	bne.n	80050da <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_PCD_EP_Open+0xae>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e00e      	b.n	8005106 <HAL_PCD_EP_Open+0xcc>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68f9      	ldr	r1, [r7, #12]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f003 f80c 	bl	8008114 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005104:	7afb      	ldrb	r3, [r7, #11]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	460b      	mov	r3, r1
 8005118:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800511a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800511e:	2b00      	cmp	r3, #0
 8005120:	da0f      	bge.n	8005142 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	f003 020f 	and.w	r2, r3, #15
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	3310      	adds	r3, #16
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	4413      	add	r3, r2
 8005136:	3304      	adds	r3, #4
 8005138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2201      	movs	r2, #1
 800513e:	705a      	strb	r2, [r3, #1]
 8005140:	e00f      	b.n	8005162 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005142:	78fb      	ldrb	r3, [r7, #3]
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	4613      	mov	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	4413      	add	r3, r2
 8005158:	3304      	adds	r3, #4
 800515a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	b2da      	uxtb	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_PCD_EP_Close+0x6e>
 8005178:	2302      	movs	r3, #2
 800517a:	e00e      	b.n	800519a <HAL_PCD_EP_Close+0x8c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	4618      	mov	r0, r3
 800518c:	f003 f84a 	bl	8008224 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b086      	sub	sp, #24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	460b      	mov	r3, r1
 80051b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051b2:	7afb      	ldrb	r3, [r7, #11]
 80051b4:	f003 020f 	and.w	r2, r3, #15
 80051b8:	4613      	mov	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	3304      	adds	r3, #4
 80051ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2200      	movs	r2, #0
 80051dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2200      	movs	r2, #0
 80051e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051e4:	7afb      	ldrb	r3, [r7, #11]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	799b      	ldrb	r3, [r3, #6]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d102      	bne.n	80051fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	799b      	ldrb	r3, [r3, #6]
 8005206:	461a      	mov	r2, r3
 8005208:	6979      	ldr	r1, [r7, #20]
 800520a:	f003 f8e7 	bl	80083dc <USB_EPStartXfer>

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	f003 020f 	and.w	r2, r3, #15
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800523a:	681b      	ldr	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	460b      	mov	r3, r1
 8005256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005258:	7afb      	ldrb	r3, [r7, #11]
 800525a:	f003 020f 	and.w	r2, r3, #15
 800525e:	4613      	mov	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	3310      	adds	r3, #16
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	3304      	adds	r3, #4
 800526e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2200      	movs	r2, #0
 8005280:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2201      	movs	r2, #1
 8005286:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005288:	7afb      	ldrb	r3, [r7, #11]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	b2da      	uxtb	r2, r3
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	799b      	ldrb	r3, [r3, #6]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	799b      	ldrb	r3, [r3, #6]
 80052aa:	461a      	mov	r2, r3
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	f003 f895 	bl	80083dc <USB_EPStartXfer>

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	7912      	ldrb	r2, [r2, #4]
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e04f      	b.n	800537a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da0f      	bge.n	8005302 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	3310      	adds	r3, #16
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	3304      	adds	r3, #4
 80052f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	705a      	strb	r2, [r3, #1]
 8005300:	e00d      	b.n	800531e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005302:	78fa      	ldrb	r2, [r7, #3]
 8005304:	4613      	mov	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	4413      	add	r3, r2
 8005314:	3304      	adds	r3, #4
 8005316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	b2da      	uxtb	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_PCD_EP_SetStall+0x82>
 800533a:	2302      	movs	r3, #2
 800533c:	e01d      	b.n	800537a <HAL_PCD_EP_SetStall+0xbe>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	4618      	mov	r0, r3
 800534e:	f003 fc23 	bl	8008b98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	7999      	ldrb	r1, [r3, #6]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800536a:	461a      	mov	r2, r3
 800536c:	f003 fe14 	bl	8008f98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	7912      	ldrb	r2, [r2, #4]
 8005398:	4293      	cmp	r3, r2
 800539a:	d901      	bls.n	80053a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e042      	b.n	8005426 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	da0f      	bge.n	80053c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	f003 020f 	and.w	r2, r3, #15
 80053ae:	4613      	mov	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	3310      	adds	r3, #16
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	4413      	add	r3, r2
 80053bc:	3304      	adds	r3, #4
 80053be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	705a      	strb	r2, [r3, #1]
 80053c6:	e00f      	b.n	80053e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	f003 020f 	and.w	r2, r3, #15
 80053ce:	4613      	mov	r3, r2
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	4413      	add	r3, r2
 80053de:	3304      	adds	r3, #4
 80053e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_PCD_EP_ClrStall+0x86>
 8005404:	2302      	movs	r3, #2
 8005406:	e00e      	b.n	8005426 <HAL_PCD_EP_ClrStall+0xa4>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	4618      	mov	r0, r3
 8005418:	f003 fc2c 	bl	8008c74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800543a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800543e:	2b00      	cmp	r3, #0
 8005440:	da0c      	bge.n	800545c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	f003 020f 	and.w	r2, r3, #15
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	3310      	adds	r3, #16
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4413      	add	r3, r2
 8005456:	3304      	adds	r3, #4
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e00c      	b.n	8005476 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	f003 020f 	and.w	r2, r3, #15
 8005462:	4613      	mov	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	4413      	add	r3, r2
 8005472:	3304      	adds	r3, #4
 8005474:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	4618      	mov	r0, r3
 800547e:	f003 fa4b 	bl	8008918 <USB_EPStopXfer>
 8005482:	4603      	mov	r3, r0
 8005484:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005486:	7afb      	ldrb	r3, [r7, #11]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	@ 0x28
 8005494:	af02      	add	r7, sp, #8
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	4613      	mov	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	3310      	adds	r3, #16
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	3304      	adds	r3, #4
 80054b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d901      	bls.n	80054c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e06b      	b.n	80055a0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d902      	bls.n	80054e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	3303      	adds	r3, #3
 80054e8:	089b      	lsrs	r3, r3, #2
 80054ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054ec:	e02a      	b.n	8005544 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	429a      	cmp	r2, r3
 8005502:	d902      	bls.n	800550a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3303      	adds	r3, #3
 800550e:	089b      	lsrs	r3, r3, #2
 8005510:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68d9      	ldr	r1, [r3, #12]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	4603      	mov	r3, r0
 8005526:	6978      	ldr	r0, [r7, #20]
 8005528:	f003 faa0 	bl	8008a6c <USB_WritePacket>

    ep->xfer_buff  += len;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	441a      	add	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	695a      	ldr	r2, [r3, #20]
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	441a      	add	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	429a      	cmp	r2, r3
 8005558:	d809      	bhi.n	800556e <PCD_WriteEmptyTxFifo+0xde>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	695a      	ldr	r2, [r3, #20]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005562:	429a      	cmp	r2, r3
 8005564:	d203      	bcs.n	800556e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1bf      	bne.n	80054ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	429a      	cmp	r2, r3
 8005578:	d811      	bhi.n	800559e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	2201      	movs	r2, #1
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800558e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	43db      	mvns	r3, r3
 8005594:	6939      	ldr	r1, [r7, #16]
 8005596:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800559a:	4013      	ands	r3, r2
 800559c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	333c      	adds	r3, #60	@ 0x3c
 80055c0:	3304      	adds	r3, #4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	799b      	ldrb	r3, [r3, #6]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d17b      	bne.n	80056d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4a61      	ldr	r2, [pc, #388]	@ (8005770 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	f240 80b9 	bls.w	8005764 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80b3 	beq.w	8005764 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560a:	461a      	mov	r2, r3
 800560c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005610:	6093      	str	r3, [r2, #8]
 8005612:	e0a7      	b.n	8005764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562a:	461a      	mov	r2, r3
 800562c:	2320      	movs	r3, #32
 800562e:	6093      	str	r3, [r2, #8]
 8005630:	e098      	b.n	8005764 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005638:	2b00      	cmp	r3, #0
 800563a:	f040 8093 	bne.w	8005764 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	4a4b      	ldr	r2, [pc, #300]	@ (8005770 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d90f      	bls.n	8005666 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565c:	461a      	mov	r2, r3
 800565e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005662:	6093      	str	r3, [r2, #8]
 8005664:	e07e      	b.n	8005764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	4413      	add	r3, r2
 8005678:	3304      	adds	r3, #4
 800567a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	0159      	lsls	r1, r3, #5
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	440b      	add	r3, r1
 8005688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005692:	1ad2      	subs	r2, r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d114      	bne.n	80056c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056b0:	461a      	mov	r2, r3
 80056b2:	2101      	movs	r1, #1
 80056b4:	f003 fc70 	bl	8008f98 <USB_EP0_OutStart>
 80056b8:	e006      	b.n	80056c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	441a      	add	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f005 ff30 	bl	800b534 <HAL_PCD_DataOutStageCallback>
 80056d4:	e046      	b.n	8005764 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	4a26      	ldr	r2, [pc, #152]	@ (8005774 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d124      	bne.n	8005728 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f4:	461a      	mov	r2, r3
 80056f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056fa:	6093      	str	r3, [r2, #8]
 80056fc:	e032      	b.n	8005764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005714:	461a      	mov	r2, r3
 8005716:	2320      	movs	r3, #32
 8005718:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f005 ff07 	bl	800b534 <HAL_PCD_DataOutStageCallback>
 8005726:	e01d      	b.n	8005764 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d114      	bne.n	8005758 <PCD_EP_OutXfrComplete_int+0x1b0>
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d108      	bne.n	8005758 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005750:	461a      	mov	r2, r3
 8005752:	2100      	movs	r1, #0
 8005754:	f003 fc20 	bl	8008f98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f005 fee8 	bl	800b534 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	4f54300a 	.word	0x4f54300a
 8005774:	4f54310a 	.word	0x4f54310a

08005778 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	333c      	adds	r3, #60	@ 0x3c
 8005790:	3304      	adds	r3, #4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <PCD_EP_OutSetupPacket_int+0x88>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d90e      	bls.n	80057cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d009      	beq.n	80057cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c4:	461a      	mov	r2, r3
 80057c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f005 fe9f 	bl	800b510 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005800 <PCD_EP_OutSetupPacket_int+0x88>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d90c      	bls.n	80057f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	799b      	ldrb	r3, [r3, #6]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d108      	bne.n	80057f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057ec:	461a      	mov	r2, r3
 80057ee:	2101      	movs	r1, #1
 80057f0:	f003 fbd2 	bl	8008f98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	4f54300a 	.word	0x4f54300a

08005804 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
 8005810:	4613      	mov	r3, r2
 8005812:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d107      	bne.n	8005832 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005822:	883b      	ldrh	r3, [r7, #0]
 8005824:	0419      	lsls	r1, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	430a      	orrs	r2, r1
 800582e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005830:	e028      	b.n	8005884 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005838:	0c1b      	lsrs	r3, r3, #16
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4413      	add	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005840:	2300      	movs	r3, #0
 8005842:	73fb      	strb	r3, [r7, #15]
 8005844:	e00d      	b.n	8005862 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	3340      	adds	r3, #64	@ 0x40
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	0c1b      	lsrs	r3, r3, #16
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	4413      	add	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	3301      	adds	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
 8005862:	7bfa      	ldrb	r2, [r7, #15]
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	3b01      	subs	r3, #1
 8005868:	429a      	cmp	r2, r3
 800586a:	d3ec      	bcc.n	8005846 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800586c:	883b      	ldrh	r3, [r7, #0]
 800586e:	0418      	lsls	r0, r3, #16
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	3b01      	subs	r3, #1
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	4302      	orrs	r2, r0
 800587c:	3340      	adds	r3, #64	@ 0x40
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	460b      	mov	r3, r1
 800589c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	887a      	ldrh	r2, [r7, #2]
 80058a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e267      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d075      	beq.n	80059d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058ea:	4b88      	ldr	r3, [pc, #544]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d00c      	beq.n	8005910 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058f6:	4b85      	ldr	r3, [pc, #532]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d112      	bne.n	8005928 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005902:	4b82      	ldr	r3, [pc, #520]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800590a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800590e:	d10b      	bne.n	8005928 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005910:	4b7e      	ldr	r3, [pc, #504]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d05b      	beq.n	80059d4 <HAL_RCC_OscConfig+0x108>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d157      	bne.n	80059d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e242      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005930:	d106      	bne.n	8005940 <HAL_RCC_OscConfig+0x74>
 8005932:	4b76      	ldr	r3, [pc, #472]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a75      	ldr	r2, [pc, #468]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	e01d      	b.n	800597c <HAL_RCC_OscConfig+0xb0>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005948:	d10c      	bne.n	8005964 <HAL_RCC_OscConfig+0x98>
 800594a:	4b70      	ldr	r3, [pc, #448]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6f      	ldr	r2, [pc, #444]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	4b6d      	ldr	r3, [pc, #436]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a6c      	ldr	r2, [pc, #432]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 800595c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	e00b      	b.n	800597c <HAL_RCC_OscConfig+0xb0>
 8005964:	4b69      	ldr	r3, [pc, #420]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a68      	ldr	r2, [pc, #416]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 800596a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	4b66      	ldr	r3, [pc, #408]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a65      	ldr	r2, [pc, #404]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800597a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d013      	beq.n	80059ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005984:	f7fd fe94 	bl	80036b0 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800598c:	f7fd fe90 	bl	80036b0 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b64      	cmp	r3, #100	@ 0x64
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e207      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599e:	4b5b      	ldr	r3, [pc, #364]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0xc0>
 80059aa:	e014      	b.n	80059d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ac:	f7fd fe80 	bl	80036b0 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b4:	f7fd fe7c 	bl	80036b0 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b64      	cmp	r3, #100	@ 0x64
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e1f3      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c6:	4b51      	ldr	r3, [pc, #324]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0xe8>
 80059d2:	e000      	b.n	80059d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d063      	beq.n	8005aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059e2:	4b4a      	ldr	r3, [pc, #296]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00b      	beq.n	8005a06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ee:	4b47      	ldr	r3, [pc, #284]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d11c      	bne.n	8005a34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059fa:	4b44      	ldr	r3, [pc, #272]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d116      	bne.n	8005a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a06:	4b41      	ldr	r3, [pc, #260]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_RCC_OscConfig+0x152>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d001      	beq.n	8005a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e1c7      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	4937      	ldr	r1, [pc, #220]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a32:	e03a      	b.n	8005aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d020      	beq.n	8005a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a3c:	4b34      	ldr	r3, [pc, #208]	@ (8005b10 <HAL_RCC_OscConfig+0x244>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a42:	f7fd fe35 	bl	80036b0 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a4a:	f7fd fe31 	bl	80036b0 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e1a8      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a68:	4b28      	ldr	r3, [pc, #160]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4925      	ldr	r1, [pc, #148]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	600b      	str	r3, [r1, #0]
 8005a7c:	e015      	b.n	8005aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a7e:	4b24      	ldr	r3, [pc, #144]	@ (8005b10 <HAL_RCC_OscConfig+0x244>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fd fe14 	bl	80036b0 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a8c:	f7fd fe10 	bl	80036b0 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e187      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d036      	beq.n	8005b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005abe:	4b15      	ldr	r3, [pc, #84]	@ (8005b14 <HAL_RCC_OscConfig+0x248>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac4:	f7fd fdf4 	bl	80036b0 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005acc:	f7fd fdf0 	bl	80036b0 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e167      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ade:	4b0b      	ldr	r3, [pc, #44]	@ (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0f0      	beq.n	8005acc <HAL_RCC_OscConfig+0x200>
 8005aea:	e01b      	b.n	8005b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aec:	4b09      	ldr	r3, [pc, #36]	@ (8005b14 <HAL_RCC_OscConfig+0x248>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af2:	f7fd fddd 	bl	80036b0 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af8:	e00e      	b.n	8005b18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005afa:	f7fd fdd9 	bl	80036b0 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d907      	bls.n	8005b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e150      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	42470000 	.word	0x42470000
 8005b14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b18:	4b88      	ldr	r3, [pc, #544]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ea      	bne.n	8005afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8097 	beq.w	8005c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b36:	4b81      	ldr	r3, [pc, #516]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10f      	bne.n	8005b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b42:	2300      	movs	r3, #0
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	4b7d      	ldr	r3, [pc, #500]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b52:	4b7a      	ldr	r3, [pc, #488]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b5a:	60bb      	str	r3, [r7, #8]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b62:	4b77      	ldr	r3, [pc, #476]	@ (8005d40 <HAL_RCC_OscConfig+0x474>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d118      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b6e:	4b74      	ldr	r3, [pc, #464]	@ (8005d40 <HAL_RCC_OscConfig+0x474>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a73      	ldr	r2, [pc, #460]	@ (8005d40 <HAL_RCC_OscConfig+0x474>)
 8005b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b7a:	f7fd fd99 	bl	80036b0 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b82:	f7fd fd95 	bl	80036b0 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e10c      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b94:	4b6a      	ldr	r3, [pc, #424]	@ (8005d40 <HAL_RCC_OscConfig+0x474>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d106      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x2ea>
 8005ba8:	4b64      	ldr	r3, [pc, #400]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bac:	4a63      	ldr	r2, [pc, #396]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bb4:	e01c      	b.n	8005bf0 <HAL_RCC_OscConfig+0x324>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x30c>
 8005bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bc4:	f043 0304 	orr.w	r3, r3, #4
 8005bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bca:	4b5c      	ldr	r3, [pc, #368]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bce:	4a5b      	ldr	r2, [pc, #364]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd6:	e00b      	b.n	8005bf0 <HAL_RCC_OscConfig+0x324>
 8005bd8:	4b58      	ldr	r3, [pc, #352]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bdc:	4a57      	ldr	r2, [pc, #348]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be4:	4b55      	ldr	r3, [pc, #340]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be8:	4a54      	ldr	r2, [pc, #336]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bea:	f023 0304 	bic.w	r3, r3, #4
 8005bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d015      	beq.n	8005c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf8:	f7fd fd5a 	bl	80036b0 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c00:	f7fd fd56 	bl	80036b0 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e0cb      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c16:	4b49      	ldr	r3, [pc, #292]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0ee      	beq.n	8005c00 <HAL_RCC_OscConfig+0x334>
 8005c22:	e014      	b.n	8005c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c24:	f7fd fd44 	bl	80036b0 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c2a:	e00a      	b.n	8005c42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2c:	f7fd fd40 	bl	80036b0 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e0b5      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c42:	4b3e      	ldr	r3, [pc, #248]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1ee      	bne.n	8005c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d105      	bne.n	8005c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c54:	4b39      	ldr	r3, [pc, #228]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c58:	4a38      	ldr	r2, [pc, #224]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80a1 	beq.w	8005dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c6a:	4b34      	ldr	r3, [pc, #208]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d05c      	beq.n	8005d30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d141      	bne.n	8005d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7e:	4b31      	ldr	r3, [pc, #196]	@ (8005d44 <HAL_RCC_OscConfig+0x478>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c84:	f7fd fd14 	bl	80036b0 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8c:	f7fd fd10 	bl	80036b0 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e087      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9e:	4b27      	ldr	r3, [pc, #156]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69da      	ldr	r2, [r3, #28]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb8:	019b      	lsls	r3, r3, #6
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	085b      	lsrs	r3, r3, #1
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	041b      	lsls	r3, r3, #16
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	491b      	ldr	r1, [pc, #108]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d44 <HAL_RCC_OscConfig+0x478>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cda:	f7fd fce9 	bl	80036b0 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce2:	f7fd fce5 	bl	80036b0 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e05c      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf4:	4b11      	ldr	r3, [pc, #68]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x416>
 8005d00:	e054      	b.n	8005dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d02:	4b10      	ldr	r3, [pc, #64]	@ (8005d44 <HAL_RCC_OscConfig+0x478>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d08:	f7fd fcd2 	bl	80036b0 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d10:	f7fd fcce 	bl	80036b0 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e045      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d22:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1f0      	bne.n	8005d10 <HAL_RCC_OscConfig+0x444>
 8005d2e:	e03d      	b.n	8005dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d107      	bne.n	8005d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e038      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	40007000 	.word	0x40007000
 8005d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d48:	4b1b      	ldr	r3, [pc, #108]	@ (8005db8 <HAL_RCC_OscConfig+0x4ec>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d028      	beq.n	8005da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d121      	bne.n	8005da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d11a      	bne.n	8005da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d78:	4013      	ands	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d111      	bne.n	8005da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	3b01      	subs	r3, #1
 8005d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d107      	bne.n	8005da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d001      	beq.n	8005dac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40023800 	.word	0x40023800

08005dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0cc      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dd0:	4b68      	ldr	r3, [pc, #416]	@ (8005f74 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d90c      	bls.n	8005df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dde:	4b65      	ldr	r3, [pc, #404]	@ (8005f74 <HAL_RCC_ClockConfig+0x1b8>)
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de6:	4b63      	ldr	r3, [pc, #396]	@ (8005f74 <HAL_RCC_ClockConfig+0x1b8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0b8      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d020      	beq.n	8005e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e10:	4b59      	ldr	r3, [pc, #356]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4a58      	ldr	r2, [pc, #352]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e28:	4b53      	ldr	r3, [pc, #332]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	4a52      	ldr	r2, [pc, #328]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e34:	4b50      	ldr	r3, [pc, #320]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	494d      	ldr	r1, [pc, #308]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d044      	beq.n	8005edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d107      	bne.n	8005e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e5a:	4b47      	ldr	r3, [pc, #284]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d119      	bne.n	8005e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e07f      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d003      	beq.n	8005e7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d107      	bne.n	8005e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e06f      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e067      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e9a:	4b37      	ldr	r3, [pc, #220]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f023 0203 	bic.w	r2, r3, #3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4934      	ldr	r1, [pc, #208]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005eac:	f7fd fc00 	bl	80036b0 <HAL_GetTick>
 8005eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb2:	e00a      	b.n	8005eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb4:	f7fd fbfc 	bl	80036b0 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e04f      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eca:	4b2b      	ldr	r3, [pc, #172]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 020c 	and.w	r2, r3, #12
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d1eb      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005edc:	4b25      	ldr	r3, [pc, #148]	@ (8005f74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d20c      	bcs.n	8005f04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eea:	4b22      	ldr	r3, [pc, #136]	@ (8005f74 <HAL_RCC_ClockConfig+0x1b8>)
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef2:	4b20      	ldr	r3, [pc, #128]	@ (8005f74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d001      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e032      	b.n	8005f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f10:	4b19      	ldr	r3, [pc, #100]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4916      	ldr	r1, [pc, #88]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f2e:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	490e      	ldr	r1, [pc, #56]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f42:	f000 f821 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 8005f46:	4602      	mov	r2, r0
 8005f48:	4b0b      	ldr	r3, [pc, #44]	@ (8005f78 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	091b      	lsrs	r3, r3, #4
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	490a      	ldr	r1, [pc, #40]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c0>)
 8005f54:	5ccb      	ldrb	r3, [r1, r3]
 8005f56:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5a:	4a09      	ldr	r2, [pc, #36]	@ (8005f80 <HAL_RCC_ClockConfig+0x1c4>)
 8005f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f5e:	4b09      	ldr	r3, [pc, #36]	@ (8005f84 <HAL_RCC_ClockConfig+0x1c8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fd fb60 	bl	8003628 <HAL_InitTick>

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40023c00 	.word	0x40023c00
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	08010dc0 	.word	0x08010dc0
 8005f80:	2000002c 	.word	0x2000002c
 8005f84:	20000030 	.word	0x20000030

08005f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f8c:	b094      	sub	sp, #80	@ 0x50
 8005f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fa0:	4b79      	ldr	r3, [pc, #484]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 030c 	and.w	r3, r3, #12
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d00d      	beq.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	f200 80e1 	bhi.w	8006174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_RCC_GetSysClockFreq+0x34>
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d003      	beq.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fba:	e0db      	b.n	8006174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fbc:	4b73      	ldr	r3, [pc, #460]	@ (800618c <HAL_RCC_GetSysClockFreq+0x204>)
 8005fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fc0:	e0db      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fc2:	4b72      	ldr	r3, [pc, #456]	@ (800618c <HAL_RCC_GetSysClockFreq+0x204>)
 8005fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fc6:	e0d8      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d063      	beq.n	80060a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fde:	4b6a      	ldr	r3, [pc, #424]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	099b      	lsrs	r3, r3, #6
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	f04f 0000 	mov.w	r0, #0
 8006002:	f04f 0100 	mov.w	r1, #0
 8006006:	0159      	lsls	r1, r3, #5
 8006008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800600c:	0150      	lsls	r0, r2, #5
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4621      	mov	r1, r4
 8006014:	1a51      	subs	r1, r2, r1
 8006016:	6139      	str	r1, [r7, #16]
 8006018:	4629      	mov	r1, r5
 800601a:	eb63 0301 	sbc.w	r3, r3, r1
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800602c:	4659      	mov	r1, fp
 800602e:	018b      	lsls	r3, r1, #6
 8006030:	4651      	mov	r1, sl
 8006032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006036:	4651      	mov	r1, sl
 8006038:	018a      	lsls	r2, r1, #6
 800603a:	4651      	mov	r1, sl
 800603c:	ebb2 0801 	subs.w	r8, r2, r1
 8006040:	4659      	mov	r1, fp
 8006042:	eb63 0901 	sbc.w	r9, r3, r1
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800605a:	4690      	mov	r8, r2
 800605c:	4699      	mov	r9, r3
 800605e:	4623      	mov	r3, r4
 8006060:	eb18 0303 	adds.w	r3, r8, r3
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	462b      	mov	r3, r5
 8006068:	eb49 0303 	adc.w	r3, r9, r3
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800607a:	4629      	mov	r1, r5
 800607c:	028b      	lsls	r3, r1, #10
 800607e:	4621      	mov	r1, r4
 8006080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006084:	4621      	mov	r1, r4
 8006086:	028a      	lsls	r2, r1, #10
 8006088:	4610      	mov	r0, r2
 800608a:	4619      	mov	r1, r3
 800608c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800608e:	2200      	movs	r2, #0
 8006090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006098:	f7fa fdd6 	bl	8000c48 <__aeabi_uldivmod>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4613      	mov	r3, r2
 80060a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060a4:	e058      	b.n	8006158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a6:	4b38      	ldr	r3, [pc, #224]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	099b      	lsrs	r3, r3, #6
 80060ac:	2200      	movs	r2, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	4611      	mov	r1, r2
 80060b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060b6:	623b      	str	r3, [r7, #32]
 80060b8:	2300      	movs	r3, #0
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80060bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	f04f 0000 	mov.w	r0, #0
 80060c8:	f04f 0100 	mov.w	r1, #0
 80060cc:	0159      	lsls	r1, r3, #5
 80060ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060d2:	0150      	lsls	r0, r2, #5
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4641      	mov	r1, r8
 80060da:	ebb2 0a01 	subs.w	sl, r2, r1
 80060de:	4649      	mov	r1, r9
 80060e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060f8:	ebb2 040a 	subs.w	r4, r2, sl
 80060fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	00eb      	lsls	r3, r5, #3
 800610a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800610e:	00e2      	lsls	r2, r4, #3
 8006110:	4614      	mov	r4, r2
 8006112:	461d      	mov	r5, r3
 8006114:	4643      	mov	r3, r8
 8006116:	18e3      	adds	r3, r4, r3
 8006118:	603b      	str	r3, [r7, #0]
 800611a:	464b      	mov	r3, r9
 800611c:	eb45 0303 	adc.w	r3, r5, r3
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800612e:	4629      	mov	r1, r5
 8006130:	028b      	lsls	r3, r1, #10
 8006132:	4621      	mov	r1, r4
 8006134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006138:	4621      	mov	r1, r4
 800613a:	028a      	lsls	r2, r1, #10
 800613c:	4610      	mov	r0, r2
 800613e:	4619      	mov	r1, r3
 8006140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006142:	2200      	movs	r2, #0
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	61fa      	str	r2, [r7, #28]
 8006148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800614c:	f7fa fd7c 	bl	8000c48 <__aeabi_uldivmod>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4613      	mov	r3, r2
 8006156:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006158:	4b0b      	ldr	r3, [pc, #44]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x200>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	0c1b      	lsrs	r3, r3, #16
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	3301      	adds	r3, #1
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800616a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800616c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006170:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006172:	e002      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006174:	4b05      	ldr	r3, [pc, #20]	@ (800618c <HAL_RCC_GetSysClockFreq+0x204>)
 8006176:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800617a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800617c:	4618      	mov	r0, r3
 800617e:	3750      	adds	r7, #80	@ 0x50
 8006180:	46bd      	mov	sp, r7
 8006182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006186:	bf00      	nop
 8006188:	40023800 	.word	0x40023800
 800618c:	00f42400 	.word	0x00f42400

08006190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006194:	4b03      	ldr	r3, [pc, #12]	@ (80061a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006196:	681b      	ldr	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000002c 	.word	0x2000002c

080061a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e07b      	b.n	80062b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d108      	bne.n	80061d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061ca:	d009      	beq.n	80061e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	61da      	str	r2, [r3, #28]
 80061d2:	e005      	b.n	80061e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fc ff7c 	bl	80030f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006216:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006264:	ea42 0103 	orr.w	r1, r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	f003 0104 	and.w	r1, r3, #4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	f003 0210 	and.w	r2, r3, #16
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b088      	sub	sp, #32
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ca:	f7fd f9f1 	bl	80036b0 <HAL_GetTick>
 80062ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80062d0:	88fb      	ldrh	r3, [r7, #6]
 80062d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
 80062e2:	e12a      	b.n	800653a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_SPI_Transmit+0x36>
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e122      	b.n	800653a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_SPI_Transmit+0x48>
 80062fe:	2302      	movs	r3, #2
 8006300:	e11b      	b.n	800653a <HAL_SPI_Transmit+0x280>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2203      	movs	r2, #3
 800630e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	88fa      	ldrh	r2, [r7, #6]
 8006322:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	88fa      	ldrh	r2, [r7, #6]
 8006328:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006350:	d10f      	bne.n	8006372 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006360:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006370:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637c:	2b40      	cmp	r3, #64	@ 0x40
 800637e:	d007      	beq.n	8006390 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800638e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006398:	d152      	bne.n	8006440 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_SPI_Transmit+0xee>
 80063a2:	8b7b      	ldrh	r3, [r7, #26]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d145      	bne.n	8006434 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ac:	881a      	ldrh	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b8:	1c9a      	adds	r2, r3, #2
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063cc:	e032      	b.n	8006434 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d112      	bne.n	8006402 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e0:	881a      	ldrh	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ec:	1c9a      	adds	r2, r3, #2
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006400:	e018      	b.n	8006434 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006402:	f7fd f955 	bl	80036b0 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d803      	bhi.n	800641a <HAL_SPI_Transmit+0x160>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d102      	bne.n	8006420 <HAL_SPI_Transmit+0x166>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e082      	b.n	800653a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1c7      	bne.n	80063ce <HAL_SPI_Transmit+0x114>
 800643e:	e053      	b.n	80064e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_SPI_Transmit+0x194>
 8006448:	8b7b      	ldrh	r3, [r7, #26]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d147      	bne.n	80064de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006474:	e033      	b.n	80064de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b02      	cmp	r3, #2
 8006482:	d113      	bne.n	80064ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	7812      	ldrb	r2, [r2, #0]
 8006490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80064aa:	e018      	b.n	80064de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ac:	f7fd f900 	bl	80036b0 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d803      	bhi.n	80064c4 <HAL_SPI_Transmit+0x20a>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d102      	bne.n	80064ca <HAL_SPI_Transmit+0x210>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e02d      	b.n	800653a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1c6      	bne.n	8006476 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fdd1 	bl	8007094 <SPI_EndRxTxTransaction>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006538:	2300      	movs	r3, #0
  }
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b08a      	sub	sp, #40	@ 0x28
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
 800654e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006550:	2301      	movs	r3, #1
 8006552:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006554:	f7fd f8ac 	bl	80036b0 <HAL_GetTick>
 8006558:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006560:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006568:	887b      	ldrh	r3, [r7, #2]
 800656a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800656c:	7ffb      	ldrb	r3, [r7, #31]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d00c      	beq.n	800658c <HAL_SPI_TransmitReceive+0x4a>
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006578:	d106      	bne.n	8006588 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d102      	bne.n	8006588 <HAL_SPI_TransmitReceive+0x46>
 8006582:	7ffb      	ldrb	r3, [r7, #31]
 8006584:	2b04      	cmp	r3, #4
 8006586:	d001      	beq.n	800658c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006588:	2302      	movs	r3, #2
 800658a:	e17f      	b.n	800688c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <HAL_SPI_TransmitReceive+0x5c>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <HAL_SPI_TransmitReceive+0x5c>
 8006598:	887b      	ldrh	r3, [r7, #2]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e174      	b.n	800688c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <HAL_SPI_TransmitReceive+0x6e>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e16d      	b.n	800688c <HAL_SPI_TransmitReceive+0x34a>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d003      	beq.n	80065cc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2205      	movs	r2, #5
 80065c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	887a      	ldrh	r2, [r7, #2]
 80065dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	887a      	ldrh	r2, [r7, #2]
 80065e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	887a      	ldrh	r2, [r7, #2]
 80065ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	887a      	ldrh	r2, [r7, #2]
 80065f4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800660c:	2b40      	cmp	r3, #64	@ 0x40
 800660e:	d007      	beq.n	8006620 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800661e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006628:	d17e      	bne.n	8006728 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <HAL_SPI_TransmitReceive+0xf6>
 8006632:	8afb      	ldrh	r3, [r7, #22]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d16c      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663c:	881a      	ldrh	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006648:	1c9a      	adds	r2, r3, #2
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800665c:	e059      	b.n	8006712 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b02      	cmp	r3, #2
 800666a:	d11b      	bne.n	80066a4 <HAL_SPI_TransmitReceive+0x162>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d016      	beq.n	80066a4 <HAL_SPI_TransmitReceive+0x162>
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	2b01      	cmp	r3, #1
 800667a:	d113      	bne.n	80066a4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	881a      	ldrh	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668c:	1c9a      	adds	r2, r3, #2
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d119      	bne.n	80066e6 <HAL_SPI_TransmitReceive+0x1a4>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d014      	beq.n	80066e6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c6:	b292      	uxth	r2, r2
 80066c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ce:	1c9a      	adds	r2, r3, #2
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066e2:	2301      	movs	r3, #1
 80066e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066e6:	f7fc ffe3 	bl	80036b0 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d80d      	bhi.n	8006712 <HAL_SPI_TransmitReceive+0x1d0>
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fc:	d009      	beq.n	8006712 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e0bc      	b.n	800688c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1a0      	bne.n	800665e <HAL_SPI_TransmitReceive+0x11c>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d19b      	bne.n	800665e <HAL_SPI_TransmitReceive+0x11c>
 8006726:	e082      	b.n	800682e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <HAL_SPI_TransmitReceive+0x1f4>
 8006730:	8afb      	ldrh	r3, [r7, #22]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d171      	bne.n	800681a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	330c      	adds	r3, #12
 8006740:	7812      	ldrb	r2, [r2, #0]
 8006742:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800675c:	e05d      	b.n	800681a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b02      	cmp	r3, #2
 800676a:	d11c      	bne.n	80067a6 <HAL_SPI_TransmitReceive+0x264>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d017      	beq.n	80067a6 <HAL_SPI_TransmitReceive+0x264>
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	2b01      	cmp	r3, #1
 800677a:	d114      	bne.n	80067a6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	330c      	adds	r3, #12
 8006786:	7812      	ldrb	r2, [r2, #0]
 8006788:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d119      	bne.n	80067e8 <HAL_SPI_TransmitReceive+0x2a6>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d014      	beq.n	80067e8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067e4:	2301      	movs	r3, #1
 80067e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067e8:	f7fc ff62 	bl	80036b0 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d803      	bhi.n	8006800 <HAL_SPI_TransmitReceive+0x2be>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d102      	bne.n	8006806 <HAL_SPI_TransmitReceive+0x2c4>
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e038      	b.n	800688c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d19c      	bne.n	800675e <HAL_SPI_TransmitReceive+0x21c>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006828:	b29b      	uxth	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d197      	bne.n	800675e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 fc2e 	bl	8007094 <SPI_EndRxTxTransaction>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e01d      	b.n	800688c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800688a:	2300      	movs	r3, #0
  }
}
 800688c:	4618      	mov	r0, r3
 800688e:	3728      	adds	r7, #40	@ 0x28
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068a8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d00c      	beq.n	80068d0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068bc:	d106      	bne.n	80068cc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <HAL_SPI_TransmitReceive_DMA+0x38>
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d001      	beq.n	80068d0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80068cc:	2302      	movs	r3, #2
 80068ce:	e0cf      	b.n	8006a70 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80068dc:	887b      	ldrh	r3, [r7, #2]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e0c4      	b.n	8006a70 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_SPI_TransmitReceive_DMA+0x60>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e0bd      	b.n	8006a70 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b04      	cmp	r3, #4
 8006906:	d003      	beq.n	8006910 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2205      	movs	r2, #5
 800690c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	887a      	ldrh	r2, [r7, #2]
 8006920:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	887a      	ldrh	r2, [r7, #2]
 8006926:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	887a      	ldrh	r2, [r7, #2]
 8006932:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	887a      	ldrh	r2, [r7, #2]
 8006938:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b04      	cmp	r3, #4
 8006950:	d108      	bne.n	8006964 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006956:	4a48      	ldr	r2, [pc, #288]	@ (8006a78 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006958:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800695e:	4a47      	ldr	r2, [pc, #284]	@ (8006a7c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006960:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006962:	e007      	b.n	8006974 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006968:	4a45      	ldr	r2, [pc, #276]	@ (8006a80 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800696a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006970:	4a44      	ldr	r2, [pc, #272]	@ (8006a84 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006972:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006978:	4a43      	ldr	r2, [pc, #268]	@ (8006a88 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800697a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006980:	2200      	movs	r2, #0
 8006982:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	330c      	adds	r3, #12
 800698e:	4619      	mov	r1, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006994:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800699a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800699c:	f7fd f878 	bl	8003a90 <HAL_DMA_Start_IT>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069aa:	f043 0210 	orr.w	r2, r3, #16
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e058      	b.n	8006a70 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 0201 	orr.w	r2, r2, #1
 80069cc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069d2:	2200      	movs	r2, #0
 80069d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069da:	2200      	movs	r2, #0
 80069dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069e2:	2200      	movs	r2, #0
 80069e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ea:	2200      	movs	r2, #0
 80069ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f6:	4619      	mov	r1, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	330c      	adds	r3, #12
 80069fe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a04:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a06:	f7fd f843 	bl	8003a90 <HAL_DMA_Start_IT>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00b      	beq.n	8006a28 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a14:	f043 0210 	orr.w	r2, r3, #16
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e023      	b.n	8006a70 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a32:	2b40      	cmp	r3, #64	@ 0x40
 8006a34:	d007      	beq.n	8006a46 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a44:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0220 	orr.w	r2, r2, #32
 8006a5c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0202 	orr.w	r2, r2, #2
 8006a6c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	08006e19 	.word	0x08006e19
 8006a7c:	08006ce1 	.word	0x08006ce1
 8006a80:	08006e35 	.word	0x08006e35
 8006a84:	08006d89 	.word	0x08006d89
 8006a88:	08006e51 	.word	0x08006e51

08006a8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10e      	bne.n	8006acc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d009      	beq.n	8006acc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d004      	beq.n	8006acc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
    return;
 8006aca:	e0ce      	b.n	8006c6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <HAL_SPI_IRQHandler+0x5e>
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
    return;
 8006ae8:	e0bf      	b.n	8006c6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <HAL_SPI_IRQHandler+0x7e>
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d105      	bne.n	8006b0a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80b0 	beq.w	8006c6a <HAL_SPI_IRQHandler+0x1de>
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80aa 	beq.w	8006c6a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d023      	beq.n	8006b68 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d011      	beq.n	8006b50 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b30:	f043 0204 	orr.w	r2, r3, #4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	e00b      	b.n	8006b68 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	693b      	ldr	r3, [r7, #16]
        return;
 8006b66:	e080      	b.n	8006c6a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d014      	beq.n	8006b9c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b76:	f043 0201 	orr.w	r2, r3, #1
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00c      	beq.n	8006bc0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006baa:	f043 0208 	orr.w	r2, r3, #8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d04f      	beq.n	8006c68 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bd6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d104      	bne.n	8006bf4 <HAL_SPI_IRQHandler+0x168>
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d034      	beq.n	8006c5e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0203 	bic.w	r2, r2, #3
 8006c02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d011      	beq.n	8006c30 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c10:	4a17      	ldr	r2, [pc, #92]	@ (8006c70 <HAL_SPI_IRQHandler+0x1e4>)
 8006c12:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fc ff91 	bl	8003b40 <HAL_DMA_Abort_IT>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d016      	beq.n	8006c66 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8006c70 <HAL_SPI_IRQHandler+0x1e4>)
 8006c3e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fc ff7b 	bl	8003b40 <HAL_DMA_Abort_IT>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006c5c:	e003      	b.n	8006c66 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f826 	bl	8006cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c64:	e000      	b.n	8006c68 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006c66:	bf00      	nop
    return;
 8006c68:	bf00      	nop
  }
}
 8006c6a:	3720      	adds	r7, #32
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	08006e91 	.word	0x08006e91

08006c74 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cd2:	b2db      	uxtb	r3, r3
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cec:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cee:	f7fc fcdf 	bl	80036b0 <HAL_GetTick>
 8006cf2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d02:	d03b      	beq.n	8006d7c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0220 	bic.w	r2, r2, #32
 8006d12:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <SPI_DMAReceiveCplt+0x58>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d24:	d108      	bne.n	8006d38 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0203 	bic.w	r2, r2, #3
 8006d34:	605a      	str	r2, [r3, #4]
 8006d36:	e007      	b.n	8006d48 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0201 	bic.w	r2, r2, #1
 8006d46:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	2164      	movs	r1, #100	@ 0x64
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 f93b 	bl	8006fc8 <SPI_EndRxTransaction>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7ff ff9b 	bl	8006cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006d7a:	e002      	b.n	8006d82 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff ff79 	bl	8006c74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d94:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d96:	f7fc fc8b 	bl	80036b0 <HAL_GetTick>
 8006d9a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006daa:	d02f      	beq.n	8006e0c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0220 	bic.w	r2, r2, #32
 8006dba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	2164      	movs	r1, #100	@ 0x64
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f967 	bl	8007094 <SPI_EndRxTxTransaction>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd0:	f043 0220 	orr.w	r2, r3, #32
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0203 	bic.w	r2, r2, #3
 8006de6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff ff53 	bl	8006cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006e0a:	e002      	b.n	8006e12 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7fb fc8b 	bl	8002728 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff ff2e 	bl	8006c88 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e40:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff ff2a 	bl	8006c9c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0203 	bic.w	r2, r2, #3
 8006e6c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e72:	f043 0210 	orr.w	r2, r3, #16
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff ff14 	bl	8006cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7ff ff00 	bl	8006cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006eb0:	bf00      	nop
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ec8:	f7fc fbf2 	bl	80036b0 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ed8:	f7fc fbea 	bl	80036b0 <HAL_GetTick>
 8006edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ede:	4b39      	ldr	r3, [pc, #228]	@ (8006fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	015b      	lsls	r3, r3, #5
 8006ee4:	0d1b      	lsrs	r3, r3, #20
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eee:	e054      	b.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d050      	beq.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ef8:	f7fc fbda 	bl	80036b0 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d902      	bls.n	8006f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d13d      	bne.n	8006f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f26:	d111      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f30:	d004      	beq.n	8006f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f3a:	d107      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f54:	d10f      	bne.n	8006f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e017      	b.n	8006fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	bf0c      	ite	eq
 8006faa:	2301      	moveq	r3, #1
 8006fac:	2300      	movne	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d19b      	bne.n	8006ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	2000002c 	.word	0x2000002c

08006fc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fdc:	d111      	bne.n	8007002 <SPI_EndRxTransaction+0x3a>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fe6:	d004      	beq.n	8006ff2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff0:	d107      	bne.n	8007002 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007000:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800700a:	d12a      	bne.n	8007062 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007014:	d012      	beq.n	800703c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2200      	movs	r2, #0
 800701e:	2180      	movs	r1, #128	@ 0x80
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7ff ff49 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d02d      	beq.n	8007088 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007030:	f043 0220 	orr.w	r2, r3, #32
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e026      	b.n	800708a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2200      	movs	r2, #0
 8007044:	2101      	movs	r1, #1
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff ff36 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01a      	beq.n	8007088 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e013      	b.n	800708a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2200      	movs	r2, #0
 800706a:	2101      	movs	r1, #1
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff ff23 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d007      	beq.n	8007088 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800707c:	f043 0220 	orr.w	r2, r3, #32
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e000      	b.n	800708a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af02      	add	r7, sp, #8
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2201      	movs	r2, #1
 80070a8:	2102      	movs	r1, #2
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff ff04 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d007      	beq.n	80070c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ba:	f043 0220 	orr.w	r2, r3, #32
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e032      	b.n	800712c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007134 <SPI_EndRxTxTransaction+0xa0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007138 <SPI_EndRxTxTransaction+0xa4>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	0d5b      	lsrs	r3, r3, #21
 80070d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070d6:	fb02 f303 	mul.w	r3, r2, r3
 80070da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e4:	d112      	bne.n	800710c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2200      	movs	r2, #0
 80070ee:	2180      	movs	r1, #128	@ 0x80
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f7ff fee1 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d016      	beq.n	800712a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007100:	f043 0220 	orr.w	r2, r3, #32
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e00f      	b.n	800712c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	3b01      	subs	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007122:	2b80      	cmp	r3, #128	@ 0x80
 8007124:	d0f2      	beq.n	800710c <SPI_EndRxTxTransaction+0x78>
 8007126:	e000      	b.n	800712a <SPI_EndRxTxTransaction+0x96>
        break;
 8007128:	bf00      	nop
  }

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	2000002c 	.word	0x2000002c
 8007138:	165e9f81 	.word	0x165e9f81

0800713c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e041      	b.n	80071d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fc f87e 	bl	8003264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3304      	adds	r3, #4
 8007178:	4619      	mov	r1, r3
 800717a:	4610      	mov	r0, r2
 800717c:	f000 fa7e 	bl	800767c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d001      	beq.n	80071f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e04e      	b.n	8007292 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0201 	orr.w	r2, r2, #1
 800720a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a23      	ldr	r2, [pc, #140]	@ (80072a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d022      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x80>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800721e:	d01d      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x80>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a1f      	ldr	r2, [pc, #124]	@ (80072a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d018      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x80>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a1e      	ldr	r2, [pc, #120]	@ (80072a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d013      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x80>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1c      	ldr	r2, [pc, #112]	@ (80072ac <HAL_TIM_Base_Start_IT+0xd0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00e      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x80>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a1b      	ldr	r2, [pc, #108]	@ (80072b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d009      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x80>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a19      	ldr	r2, [pc, #100]	@ (80072b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x80>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a18      	ldr	r2, [pc, #96]	@ (80072b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d111      	bne.n	8007280 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b06      	cmp	r3, #6
 800726c:	d010      	beq.n	8007290 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727e:	e007      	b.n	8007290 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0201 	orr.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40010000 	.word	0x40010000
 80072a4:	40000400 	.word	0x40000400
 80072a8:	40000800 	.word	0x40000800
 80072ac:	40000c00 	.word	0x40000c00
 80072b0:	40010400 	.word	0x40010400
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40001800 	.word	0x40001800

080072bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d020      	beq.n	8007320 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01b      	beq.n	8007320 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0202 	mvn.w	r2, #2
 80072f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f999 	bl	800763e <HAL_TIM_IC_CaptureCallback>
 800730c:	e005      	b.n	800731a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f98b 	bl	800762a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f99c 	bl	8007652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d020      	beq.n	800736c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01b      	beq.n	800736c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0204 	mvn.w	r2, #4
 800733c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2202      	movs	r2, #2
 8007342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f973 	bl	800763e <HAL_TIM_IC_CaptureCallback>
 8007358:	e005      	b.n	8007366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f965 	bl	800762a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f976 	bl	8007652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d020      	beq.n	80073b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01b      	beq.n	80073b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0208 	mvn.w	r2, #8
 8007388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2204      	movs	r2, #4
 800738e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f94d 	bl	800763e <HAL_TIM_IC_CaptureCallback>
 80073a4:	e005      	b.n	80073b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f93f 	bl	800762a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f950 	bl	8007652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d020      	beq.n	8007404 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01b      	beq.n	8007404 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f06f 0210 	mvn.w	r2, #16
 80073d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2208      	movs	r2, #8
 80073da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f927 	bl	800763e <HAL_TIM_IC_CaptureCallback>
 80073f0:	e005      	b.n	80073fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f919 	bl	800762a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f92a 	bl	8007652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00c      	beq.n	8007428 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d007      	beq.n	8007428 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0201 	mvn.w	r2, #1
 8007420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fb f9a0 	bl	8002768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00c      	beq.n	800744c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007438:	2b00      	cmp	r3, #0
 800743a:	d007      	beq.n	800744c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fae4 	bl	8007a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00c      	beq.n	8007470 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f8fb 	bl	8007666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00c      	beq.n	8007494 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f06f 0220 	mvn.w	r2, #32
 800748c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fab6 	bl	8007a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_TIM_ConfigClockSource+0x1c>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e0b4      	b.n	8007622 <HAL_TIM_ConfigClockSource+0x186>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80074d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f0:	d03e      	beq.n	8007570 <HAL_TIM_ConfigClockSource+0xd4>
 80074f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f6:	f200 8087 	bhi.w	8007608 <HAL_TIM_ConfigClockSource+0x16c>
 80074fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074fe:	f000 8086 	beq.w	800760e <HAL_TIM_ConfigClockSource+0x172>
 8007502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007506:	d87f      	bhi.n	8007608 <HAL_TIM_ConfigClockSource+0x16c>
 8007508:	2b70      	cmp	r3, #112	@ 0x70
 800750a:	d01a      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0xa6>
 800750c:	2b70      	cmp	r3, #112	@ 0x70
 800750e:	d87b      	bhi.n	8007608 <HAL_TIM_ConfigClockSource+0x16c>
 8007510:	2b60      	cmp	r3, #96	@ 0x60
 8007512:	d050      	beq.n	80075b6 <HAL_TIM_ConfigClockSource+0x11a>
 8007514:	2b60      	cmp	r3, #96	@ 0x60
 8007516:	d877      	bhi.n	8007608 <HAL_TIM_ConfigClockSource+0x16c>
 8007518:	2b50      	cmp	r3, #80	@ 0x50
 800751a:	d03c      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0xfa>
 800751c:	2b50      	cmp	r3, #80	@ 0x50
 800751e:	d873      	bhi.n	8007608 <HAL_TIM_ConfigClockSource+0x16c>
 8007520:	2b40      	cmp	r3, #64	@ 0x40
 8007522:	d058      	beq.n	80075d6 <HAL_TIM_ConfigClockSource+0x13a>
 8007524:	2b40      	cmp	r3, #64	@ 0x40
 8007526:	d86f      	bhi.n	8007608 <HAL_TIM_ConfigClockSource+0x16c>
 8007528:	2b30      	cmp	r3, #48	@ 0x30
 800752a:	d064      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x15a>
 800752c:	2b30      	cmp	r3, #48	@ 0x30
 800752e:	d86b      	bhi.n	8007608 <HAL_TIM_ConfigClockSource+0x16c>
 8007530:	2b20      	cmp	r3, #32
 8007532:	d060      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x15a>
 8007534:	2b20      	cmp	r3, #32
 8007536:	d867      	bhi.n	8007608 <HAL_TIM_ConfigClockSource+0x16c>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d05c      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x15a>
 800753c:	2b10      	cmp	r3, #16
 800753e:	d05a      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x15a>
 8007540:	e062      	b.n	8007608 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007552:	f000 f9b9 	bl	80078c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	609a      	str	r2, [r3, #8]
      break;
 800756e:	e04f      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007580:	f000 f9a2 	bl	80078c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007592:	609a      	str	r2, [r3, #8]
      break;
 8007594:	e03c      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075a2:	461a      	mov	r2, r3
 80075a4:	f000 f916 	bl	80077d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2150      	movs	r1, #80	@ 0x50
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f96f 	bl	8007892 <TIM_ITRx_SetConfig>
      break;
 80075b4:	e02c      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075c2:	461a      	mov	r2, r3
 80075c4:	f000 f935 	bl	8007832 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2160      	movs	r1, #96	@ 0x60
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 f95f 	bl	8007892 <TIM_ITRx_SetConfig>
      break;
 80075d4:	e01c      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075e2:	461a      	mov	r2, r3
 80075e4:	f000 f8f6 	bl	80077d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2140      	movs	r1, #64	@ 0x40
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f94f 	bl	8007892 <TIM_ITRx_SetConfig>
      break;
 80075f4:	e00c      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	4610      	mov	r0, r2
 8007602:	f000 f946 	bl	8007892 <TIM_ITRx_SetConfig>
      break;
 8007606:	e003      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]
      break;
 800760c:	e000      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800760e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a46      	ldr	r2, [pc, #280]	@ (80077a8 <TIM_Base_SetConfig+0x12c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d013      	beq.n	80076bc <TIM_Base_SetConfig+0x40>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800769a:	d00f      	beq.n	80076bc <TIM_Base_SetConfig+0x40>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a43      	ldr	r2, [pc, #268]	@ (80077ac <TIM_Base_SetConfig+0x130>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00b      	beq.n	80076bc <TIM_Base_SetConfig+0x40>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a42      	ldr	r2, [pc, #264]	@ (80077b0 <TIM_Base_SetConfig+0x134>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d007      	beq.n	80076bc <TIM_Base_SetConfig+0x40>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a41      	ldr	r2, [pc, #260]	@ (80077b4 <TIM_Base_SetConfig+0x138>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_Base_SetConfig+0x40>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a40      	ldr	r2, [pc, #256]	@ (80077b8 <TIM_Base_SetConfig+0x13c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d108      	bne.n	80076ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a35      	ldr	r2, [pc, #212]	@ (80077a8 <TIM_Base_SetConfig+0x12c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d02b      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076dc:	d027      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a32      	ldr	r2, [pc, #200]	@ (80077ac <TIM_Base_SetConfig+0x130>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d023      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a31      	ldr	r2, [pc, #196]	@ (80077b0 <TIM_Base_SetConfig+0x134>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d01f      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a30      	ldr	r2, [pc, #192]	@ (80077b4 <TIM_Base_SetConfig+0x138>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d01b      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a2f      	ldr	r2, [pc, #188]	@ (80077b8 <TIM_Base_SetConfig+0x13c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d017      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a2e      	ldr	r2, [pc, #184]	@ (80077bc <TIM_Base_SetConfig+0x140>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a2d      	ldr	r2, [pc, #180]	@ (80077c0 <TIM_Base_SetConfig+0x144>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00f      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a2c      	ldr	r2, [pc, #176]	@ (80077c4 <TIM_Base_SetConfig+0x148>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00b      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a2b      	ldr	r2, [pc, #172]	@ (80077c8 <TIM_Base_SetConfig+0x14c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d007      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a2a      	ldr	r2, [pc, #168]	@ (80077cc <TIM_Base_SetConfig+0x150>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d003      	beq.n	800772e <TIM_Base_SetConfig+0xb2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a29      	ldr	r2, [pc, #164]	@ (80077d0 <TIM_Base_SetConfig+0x154>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d108      	bne.n	8007740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4313      	orrs	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a10      	ldr	r2, [pc, #64]	@ (80077a8 <TIM_Base_SetConfig+0x12c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d003      	beq.n	8007774 <TIM_Base_SetConfig+0xf8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a12      	ldr	r2, [pc, #72]	@ (80077b8 <TIM_Base_SetConfig+0x13c>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d103      	bne.n	800777c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	691a      	ldr	r2, [r3, #16]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b01      	cmp	r3, #1
 800778c:	d105      	bne.n	800779a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f023 0201 	bic.w	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	611a      	str	r2, [r3, #16]
  }
}
 800779a:	bf00      	nop
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	40010000 	.word	0x40010000
 80077ac:	40000400 	.word	0x40000400
 80077b0:	40000800 	.word	0x40000800
 80077b4:	40000c00 	.word	0x40000c00
 80077b8:	40010400 	.word	0x40010400
 80077bc:	40014000 	.word	0x40014000
 80077c0:	40014400 	.word	0x40014400
 80077c4:	40014800 	.word	0x40014800
 80077c8:	40001800 	.word	0x40001800
 80077cc:	40001c00 	.word	0x40001c00
 80077d0:	40002000 	.word	0x40002000

080077d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	f023 0201 	bic.w	r2, r3, #1
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f023 030a 	bic.w	r3, r3, #10
 8007810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	621a      	str	r2, [r3, #32]
}
 8007826:	bf00      	nop
 8007828:	371c      	adds	r7, #28
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007832:	b480      	push	{r7}
 8007834:	b087      	sub	sp, #28
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	f023 0210 	bic.w	r2, r3, #16
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800785c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	031b      	lsls	r3, r3, #12
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800786e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	621a      	str	r2, [r3, #32]
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007892:	b480      	push	{r7}
 8007894:	b085      	sub	sp, #20
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f043 0307 	orr.w	r3, r3, #7
 80078b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	609a      	str	r2, [r3, #8]
}
 80078bc:	bf00      	nop
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	021a      	lsls	r2, r3, #8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	609a      	str	r2, [r3, #8]
}
 80078fc:	bf00      	nop
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800791c:	2302      	movs	r3, #2
 800791e:	e05a      	b.n	80079d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a21      	ldr	r2, [pc, #132]	@ (80079e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d022      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800796c:	d01d      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1d      	ldr	r2, [pc, #116]	@ (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d018      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1b      	ldr	r2, [pc, #108]	@ (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d013      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1a      	ldr	r2, [pc, #104]	@ (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00e      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a18      	ldr	r2, [pc, #96]	@ (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d009      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a17      	ldr	r2, [pc, #92]	@ (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d004      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a15      	ldr	r2, [pc, #84]	@ (80079fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d10c      	bne.n	80079c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40010000 	.word	0x40010000
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40000800 	.word	0x40000800
 80079f0:	40000c00 	.word	0x40000c00
 80079f4:	40010400 	.word	0x40010400
 80079f8:	40014000 	.word	0x40014000
 80079fc:	40001800 	.word	0x40001800

08007a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a28:	b084      	sub	sp, #16
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	f107 001c 	add.w	r0, r7, #28
 8007a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d123      	bne.n	8007a8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d105      	bne.n	8007a7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fae8 	bl	8009054 <USB_CoreReset>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	e01b      	b.n	8007ac2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 fadc 	bl	8009054 <USB_CoreReset>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007aa0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d106      	bne.n	8007ab6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007ab4:	e005      	b.n	8007ac2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ac2:	7fbb      	ldrb	r3, [r7, #30]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d10b      	bne.n	8007ae0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f043 0206 	orr.w	r2, r3, #6
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f043 0220 	orr.w	r2, r3, #32
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aec:	b004      	add	sp, #16
 8007aee:	4770      	bx	lr

08007af0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d165      	bne.n	8007bd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4a41      	ldr	r2, [pc, #260]	@ (8007c0c <USB_SetTurnaroundTime+0x11c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d906      	bls.n	8007b1a <USB_SetTurnaroundTime+0x2a>
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4a40      	ldr	r2, [pc, #256]	@ (8007c10 <USB_SetTurnaroundTime+0x120>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d202      	bcs.n	8007b1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b14:	230f      	movs	r3, #15
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	e062      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	4a3c      	ldr	r2, [pc, #240]	@ (8007c10 <USB_SetTurnaroundTime+0x120>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d306      	bcc.n	8007b30 <USB_SetTurnaroundTime+0x40>
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	4a3b      	ldr	r2, [pc, #236]	@ (8007c14 <USB_SetTurnaroundTime+0x124>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d202      	bcs.n	8007b30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b2a:	230e      	movs	r3, #14
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	e057      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4a38      	ldr	r2, [pc, #224]	@ (8007c14 <USB_SetTurnaroundTime+0x124>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d306      	bcc.n	8007b46 <USB_SetTurnaroundTime+0x56>
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4a37      	ldr	r2, [pc, #220]	@ (8007c18 <USB_SetTurnaroundTime+0x128>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d202      	bcs.n	8007b46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b40:	230d      	movs	r3, #13
 8007b42:	617b      	str	r3, [r7, #20]
 8007b44:	e04c      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4a33      	ldr	r2, [pc, #204]	@ (8007c18 <USB_SetTurnaroundTime+0x128>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d306      	bcc.n	8007b5c <USB_SetTurnaroundTime+0x6c>
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	4a32      	ldr	r2, [pc, #200]	@ (8007c1c <USB_SetTurnaroundTime+0x12c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d802      	bhi.n	8007b5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b56:	230c      	movs	r3, #12
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	e041      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8007c1c <USB_SetTurnaroundTime+0x12c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d906      	bls.n	8007b72 <USB_SetTurnaroundTime+0x82>
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	4a2e      	ldr	r2, [pc, #184]	@ (8007c20 <USB_SetTurnaroundTime+0x130>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d802      	bhi.n	8007b72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007b6c:	230b      	movs	r3, #11
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	e036      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	4a2a      	ldr	r2, [pc, #168]	@ (8007c20 <USB_SetTurnaroundTime+0x130>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d906      	bls.n	8007b88 <USB_SetTurnaroundTime+0x98>
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4a29      	ldr	r2, [pc, #164]	@ (8007c24 <USB_SetTurnaroundTime+0x134>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d802      	bhi.n	8007b88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007b82:	230a      	movs	r3, #10
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	e02b      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4a26      	ldr	r2, [pc, #152]	@ (8007c24 <USB_SetTurnaroundTime+0x134>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d906      	bls.n	8007b9e <USB_SetTurnaroundTime+0xae>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4a25      	ldr	r2, [pc, #148]	@ (8007c28 <USB_SetTurnaroundTime+0x138>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d202      	bcs.n	8007b9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007b98:	2309      	movs	r3, #9
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	e020      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	4a21      	ldr	r2, [pc, #132]	@ (8007c28 <USB_SetTurnaroundTime+0x138>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d306      	bcc.n	8007bb4 <USB_SetTurnaroundTime+0xc4>
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	4a20      	ldr	r2, [pc, #128]	@ (8007c2c <USB_SetTurnaroundTime+0x13c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d802      	bhi.n	8007bb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007bae:	2308      	movs	r3, #8
 8007bb0:	617b      	str	r3, [r7, #20]
 8007bb2:	e015      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8007c2c <USB_SetTurnaroundTime+0x13c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d906      	bls.n	8007bca <USB_SetTurnaroundTime+0xda>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8007c30 <USB_SetTurnaroundTime+0x140>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d202      	bcs.n	8007bca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007bc4:	2307      	movs	r3, #7
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e00a      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007bca:	2306      	movs	r3, #6
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	e007      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d102      	bne.n	8007bdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007bd6:	2309      	movs	r3, #9
 8007bd8:	617b      	str	r3, [r7, #20]
 8007bda:	e001      	b.n	8007be0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007bdc:	2309      	movs	r3, #9
 8007bde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	029b      	lsls	r3, r3, #10
 8007bf4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	00d8acbf 	.word	0x00d8acbf
 8007c10:	00e4e1c0 	.word	0x00e4e1c0
 8007c14:	00f42400 	.word	0x00f42400
 8007c18:	01067380 	.word	0x01067380
 8007c1c:	011a499f 	.word	0x011a499f
 8007c20:	01312cff 	.word	0x01312cff
 8007c24:	014ca43f 	.word	0x014ca43f
 8007c28:	016e3600 	.word	0x016e3600
 8007c2c:	01a6ab1f 	.word	0x01a6ab1f
 8007c30:	01e84800 	.word	0x01e84800

08007c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f043 0201 	orr.w	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f023 0201 	bic.w	r2, r3, #1
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d115      	bne.n	8007cc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ca6:	200a      	movs	r0, #10
 8007ca8:	f7fb fd0e 	bl	80036c8 <HAL_Delay>
      ms += 10U;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	330a      	adds	r3, #10
 8007cb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 f93f 	bl	8008f36 <USB_GetMode>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d01e      	beq.n	8007cfc <USB_SetCurrentMode+0x84>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2bc7      	cmp	r3, #199	@ 0xc7
 8007cc2:	d9f0      	bls.n	8007ca6 <USB_SetCurrentMode+0x2e>
 8007cc4:	e01a      	b.n	8007cfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cc6:	78fb      	ldrb	r3, [r7, #3]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d115      	bne.n	8007cf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007cd8:	200a      	movs	r0, #10
 8007cda:	f7fb fcf5 	bl	80036c8 <HAL_Delay>
      ms += 10U;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	330a      	adds	r3, #10
 8007ce2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 f926 	bl	8008f36 <USB_GetMode>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d005      	beq.n	8007cfc <USB_SetCurrentMode+0x84>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2bc7      	cmp	r3, #199	@ 0xc7
 8007cf4:	d9f0      	bls.n	8007cd8 <USB_SetCurrentMode+0x60>
 8007cf6:	e001      	b.n	8007cfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e005      	b.n	8007d08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d00:	d101      	bne.n	8007d06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e000      	b.n	8007d08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d10:	b084      	sub	sp, #16
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b086      	sub	sp, #24
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	e009      	b.n	8007d44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	3340      	adds	r3, #64	@ 0x40
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	3301      	adds	r3, #1
 8007d42:	613b      	str	r3, [r7, #16]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b0e      	cmp	r3, #14
 8007d48:	d9f2      	bls.n	8007d30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d11c      	bne.n	8007d8c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d60:	f043 0302 	orr.w	r3, r3, #2
 8007d64:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d76:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d82:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d8a:	e00b      	b.n	8007da4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007daa:	461a      	mov	r2, r3
 8007dac:	2300      	movs	r3, #0
 8007dae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007db0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d10d      	bne.n	8007dd4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d104      	bne.n	8007dca <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f968 	bl	8008098 <USB_SetDevSpeed>
 8007dc8:	e008      	b.n	8007ddc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007dca:	2101      	movs	r1, #1
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f963 	bl	8008098 <USB_SetDevSpeed>
 8007dd2:	e003      	b.n	8007ddc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007dd4:	2103      	movs	r1, #3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f95e 	bl	8008098 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ddc:	2110      	movs	r1, #16
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f8fa 	bl	8007fd8 <USB_FlushTxFifo>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f924 	bl	800803c <USB_FlushRxFifo>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e04:	461a      	mov	r2, r3
 8007e06:	2300      	movs	r3, #0
 8007e08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e10:	461a      	mov	r2, r3
 8007e12:	2300      	movs	r3, #0
 8007e14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e22:	2300      	movs	r3, #0
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	e043      	b.n	8007eb0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e3e:	d118      	bne.n	8007e72 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10a      	bne.n	8007e5c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e52:	461a      	mov	r2, r3
 8007e54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	e013      	b.n	8007e84 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	e008      	b.n	8007e84 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e7e:	461a      	mov	r2, r3
 8007e80:	2300      	movs	r3, #0
 8007e82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e90:	461a      	mov	r2, r3
 8007e92:	2300      	movs	r3, #0
 8007e94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ea8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	3301      	adds	r3, #1
 8007eae:	613b      	str	r3, [r7, #16]
 8007eb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d3b5      	bcc.n	8007e28 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	613b      	str	r3, [r7, #16]
 8007ec0:	e043      	b.n	8007f4a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ed8:	d118      	bne.n	8007f0c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eec:	461a      	mov	r2, r3
 8007eee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	e013      	b.n	8007f1e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f02:	461a      	mov	r2, r3
 8007f04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	e008      	b.n	8007f1e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f18:	461a      	mov	r2, r3
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	3301      	adds	r3, #1
 8007f48:	613b      	str	r3, [r7, #16]
 8007f4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f4e:	461a      	mov	r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d3b5      	bcc.n	8007ec2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007f76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d105      	bne.n	8007f8c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	f043 0210 	orr.w	r2, r3, #16
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699a      	ldr	r2, [r3, #24]
 8007f90:	4b10      	ldr	r3, [pc, #64]	@ (8007fd4 <USB_DevInit+0x2c4>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d005      	beq.n	8007fac <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	f043 0208 	orr.w	r2, r3, #8
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d107      	bne.n	8007fc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fbc:	f043 0304 	orr.w	r3, r3, #4
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fd0:	b004      	add	sp, #16
 8007fd2:	4770      	bx	lr
 8007fd4:	803c3800 	.word	0x803c3800

08007fd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ff2:	d901      	bls.n	8007ff8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e01b      	b.n	8008030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	daf2      	bge.n	8007fe6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	019b      	lsls	r3, r3, #6
 8008008:	f043 0220 	orr.w	r2, r3, #32
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3301      	adds	r3, #1
 8008014:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800801c:	d901      	bls.n	8008022 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e006      	b.n	8008030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b20      	cmp	r3, #32
 800802c:	d0f0      	beq.n	8008010 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008054:	d901      	bls.n	800805a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e018      	b.n	800808c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	daf2      	bge.n	8008048 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2210      	movs	r2, #16
 800806a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3301      	adds	r3, #1
 8008070:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008078:	d901      	bls.n	800807e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e006      	b.n	800808c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	f003 0310 	and.w	r3, r3, #16
 8008086:	2b10      	cmp	r3, #16
 8008088:	d0f0      	beq.n	800806c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080b8:	4313      	orrs	r3, r2
 80080ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b087      	sub	sp, #28
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f003 0306 	and.w	r3, r3, #6
 80080e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75fb      	strb	r3, [r7, #23]
 80080ee:	e00a      	b.n	8008106 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d002      	beq.n	80080fc <USB_GetDevSpeed+0x32>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b06      	cmp	r3, #6
 80080fa:	d102      	bne.n	8008102 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80080fc:	2302      	movs	r3, #2
 80080fe:	75fb      	strb	r3, [r7, #23]
 8008100:	e001      	b.n	8008106 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008102:	230f      	movs	r3, #15
 8008104:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
}
 8008108:	4618      	mov	r0, r3
 800810a:	371c      	adds	r7, #28
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	785b      	ldrb	r3, [r3, #1]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d13a      	bne.n	80081a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008136:	69da      	ldr	r2, [r3, #28]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	f003 030f 	and.w	r3, r3, #15
 8008140:	2101      	movs	r1, #1
 8008142:	fa01 f303 	lsl.w	r3, r1, r3
 8008146:	b29b      	uxth	r3, r3
 8008148:	68f9      	ldr	r1, [r7, #12]
 800814a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800814e:	4313      	orrs	r3, r2
 8008150:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d155      	bne.n	8008214 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	791b      	ldrb	r3, [r3, #4]
 8008182:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008184:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	059b      	lsls	r3, r3, #22
 800818a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800818c:	4313      	orrs	r3, r2
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800819a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800819e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	e036      	b.n	8008214 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ac:	69da      	ldr	r2, [r3, #28]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	2101      	movs	r1, #1
 80081b8:	fa01 f303 	lsl.w	r3, r1, r3
 80081bc:	041b      	lsls	r3, r3, #16
 80081be:	68f9      	ldr	r1, [r7, #12]
 80081c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081c4:	4313      	orrs	r3, r2
 80081c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d11a      	bne.n	8008214 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	791b      	ldrb	r3, [r3, #4]
 80081f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081fa:	430b      	orrs	r3, r1
 80081fc:	4313      	orrs	r3, r2
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	0151      	lsls	r1, r2, #5
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	440a      	add	r2, r1
 8008206:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800820a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800820e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008212:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
	...

08008224 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d161      	bne.n	8008304 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008252:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008256:	d11f      	bne.n	8008298 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	0151      	lsls	r1, r2, #5
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	440a      	add	r2, r1
 800826e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008272:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008276:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	0151      	lsls	r1, r2, #5
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	440a      	add	r2, r1
 800828e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008292:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008296:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800829e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	f003 030f 	and.w	r3, r3, #15
 80082a8:	2101      	movs	r1, #1
 80082aa:	fa01 f303 	lsl.w	r3, r1, r3
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	43db      	mvns	r3, r3
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082b8:	4013      	ands	r3, r2
 80082ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f003 030f 	and.w	r3, r3, #15
 80082cc:	2101      	movs	r1, #1
 80082ce:	fa01 f303 	lsl.w	r3, r1, r3
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	43db      	mvns	r3, r3
 80082d6:	68f9      	ldr	r1, [r7, #12]
 80082d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082dc:	4013      	ands	r3, r2
 80082de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	0159      	lsls	r1, r3, #5
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	440b      	add	r3, r1
 80082f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fa:	4619      	mov	r1, r3
 80082fc:	4b35      	ldr	r3, [pc, #212]	@ (80083d4 <USB_DeactivateEndpoint+0x1b0>)
 80082fe:	4013      	ands	r3, r2
 8008300:	600b      	str	r3, [r1, #0]
 8008302:	e060      	b.n	80083c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008316:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800831a:	d11f      	bne.n	800835c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	0151      	lsls	r1, r2, #5
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	440a      	add	r2, r1
 8008332:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008336:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800833a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008356:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800835a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008362:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	2101      	movs	r1, #1
 800836e:	fa01 f303 	lsl.w	r3, r1, r3
 8008372:	041b      	lsls	r3, r3, #16
 8008374:	43db      	mvns	r3, r3
 8008376:	68f9      	ldr	r1, [r7, #12]
 8008378:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800837c:	4013      	ands	r3, r2
 800837e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008386:	69da      	ldr	r2, [r3, #28]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	2101      	movs	r1, #1
 8008392:	fa01 f303 	lsl.w	r3, r1, r3
 8008396:	041b      	lsls	r3, r3, #16
 8008398:	43db      	mvns	r3, r3
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083a0:	4013      	ands	r3, r2
 80083a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	0159      	lsls	r1, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	440b      	add	r3, r1
 80083ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083be:	4619      	mov	r1, r3
 80083c0:	4b05      	ldr	r3, [pc, #20]	@ (80083d8 <USB_DeactivateEndpoint+0x1b4>)
 80083c2:	4013      	ands	r3, r2
 80083c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	ec337800 	.word	0xec337800
 80083d8:	eff37800 	.word	0xeff37800

080083dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	@ 0x28
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	f040 817f 	bne.w	80086fc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d132      	bne.n	800846c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	0151      	lsls	r1, r2, #5
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	440a      	add	r2, r1
 800841c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008420:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008424:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	69fa      	ldr	r2, [r7, #28]
 800843e:	440a      	add	r2, r1
 8008440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008444:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	4413      	add	r3, r2
 8008452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	0151      	lsls	r1, r2, #5
 800845c:	69fa      	ldr	r2, [r7, #28]
 800845e:	440a      	add	r2, r1
 8008460:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008464:	0cdb      	lsrs	r3, r3, #19
 8008466:	04db      	lsls	r3, r3, #19
 8008468:	6113      	str	r3, [r2, #16]
 800846a:	e097      	b.n	800859c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	440a      	add	r2, r1
 8008482:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008486:	0cdb      	lsrs	r3, r3, #19
 8008488:	04db      	lsls	r3, r3, #19
 800848a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084a6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80084aa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80084ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d11a      	bne.n	80084ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	691a      	ldr	r2, [r3, #16]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d903      	bls.n	80084ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	689a      	ldr	r2, [r3, #8]
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	69fa      	ldr	r2, [r7, #28]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084e8:	6113      	str	r3, [r2, #16]
 80084ea:	e044      	b.n	8008576 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	691a      	ldr	r2, [r3, #16]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	4413      	add	r3, r2
 80084f6:	1e5a      	subs	r2, r3, #1
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008500:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800850e:	691a      	ldr	r2, [r3, #16]
 8008510:	8afb      	ldrh	r3, [r7, #22]
 8008512:	04d9      	lsls	r1, r3, #19
 8008514:	4ba4      	ldr	r3, [pc, #656]	@ (80087a8 <USB_EPStartXfer+0x3cc>)
 8008516:	400b      	ands	r3, r1
 8008518:	69b9      	ldr	r1, [r7, #24]
 800851a:	0148      	lsls	r0, r1, #5
 800851c:	69f9      	ldr	r1, [r7, #28]
 800851e:	4401      	add	r1, r0
 8008520:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008524:	4313      	orrs	r3, r2
 8008526:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	791b      	ldrb	r3, [r3, #4]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d122      	bne.n	8008576 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	0151      	lsls	r1, r2, #5
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	440a      	add	r2, r1
 8008546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800854a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800854e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855c:	691a      	ldr	r2, [r3, #16]
 800855e:	8afb      	ldrh	r3, [r7, #22]
 8008560:	075b      	lsls	r3, r3, #29
 8008562:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008566:	69b9      	ldr	r1, [r7, #24]
 8008568:	0148      	lsls	r0, r1, #5
 800856a:	69f9      	ldr	r1, [r7, #28]
 800856c:	4401      	add	r1, r0
 800856e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008572:	4313      	orrs	r3, r2
 8008574:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008582:	691a      	ldr	r2, [r3, #16]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800858c:	69b9      	ldr	r1, [r7, #24]
 800858e:	0148      	lsls	r0, r1, #5
 8008590:	69f9      	ldr	r1, [r7, #28]
 8008592:	4401      	add	r1, r0
 8008594:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008598:	4313      	orrs	r3, r2
 800859a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800859c:	79fb      	ldrb	r3, [r7, #7]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d14b      	bne.n	800863a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d009      	beq.n	80085be <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085b6:	461a      	mov	r2, r3
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	791b      	ldrb	r3, [r3, #4]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d128      	bne.n	8008618 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d110      	bne.n	80085f8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	0151      	lsls	r1, r2, #5
 80085e8:	69fa      	ldr	r2, [r7, #28]
 80085ea:	440a      	add	r2, r1
 80085ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	e00f      	b.n	8008618 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	0151      	lsls	r1, r2, #5
 800860a:	69fa      	ldr	r2, [r7, #28]
 800860c:	440a      	add	r2, r1
 800860e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008616:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	0151      	lsls	r1, r2, #5
 800862a:	69fa      	ldr	r2, [r7, #28]
 800862c:	440a      	add	r2, r1
 800862e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008632:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	e166      	b.n	8008908 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	015a      	lsls	r2, r3, #5
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	4413      	add	r3, r2
 8008642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	0151      	lsls	r1, r2, #5
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	440a      	add	r2, r1
 8008650:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008654:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008658:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	791b      	ldrb	r3, [r3, #4]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d015      	beq.n	800868e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 814e 	beq.w	8008908 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	f003 030f 	and.w	r3, r3, #15
 800867c:	2101      	movs	r1, #1
 800867e:	fa01 f303 	lsl.w	r3, r1, r3
 8008682:	69f9      	ldr	r1, [r7, #28]
 8008684:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008688:	4313      	orrs	r3, r2
 800868a:	634b      	str	r3, [r1, #52]	@ 0x34
 800868c:	e13c      	b.n	8008908 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800869a:	2b00      	cmp	r3, #0
 800869c:	d110      	bne.n	80086c0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	0151      	lsls	r1, r2, #5
 80086b0:	69fa      	ldr	r2, [r7, #28]
 80086b2:	440a      	add	r2, r1
 80086b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	e00f      	b.n	80086e0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086de:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	68d9      	ldr	r1, [r3, #12]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	781a      	ldrb	r2, [r3, #0]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	b298      	uxth	r0, r3
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	4603      	mov	r3, r0
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f9b9 	bl	8008a6c <USB_WritePacket>
 80086fa:	e105      	b.n	8008908 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	0151      	lsls	r1, r2, #5
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	440a      	add	r2, r1
 8008712:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008716:	0cdb      	lsrs	r3, r3, #19
 8008718:	04db      	lsls	r3, r3, #19
 800871a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	0151      	lsls	r1, r2, #5
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	440a      	add	r2, r1
 8008732:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008736:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800873a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800873e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d132      	bne.n	80087ac <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008774:	69b9      	ldr	r1, [r7, #24]
 8008776:	0148      	lsls	r0, r1, #5
 8008778:	69f9      	ldr	r1, [r7, #28]
 800877a:	4401      	add	r1, r0
 800877c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008780:	4313      	orrs	r3, r2
 8008782:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	4413      	add	r3, r2
 800878c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	0151      	lsls	r1, r2, #5
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	440a      	add	r2, r1
 800879a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800879e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087a2:	6113      	str	r3, [r2, #16]
 80087a4:	e062      	b.n	800886c <USB_EPStartXfer+0x490>
 80087a6:	bf00      	nop
 80087a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d123      	bne.n	80087fc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ca:	69b9      	ldr	r1, [r7, #24]
 80087cc:	0148      	lsls	r0, r1, #5
 80087ce:	69f9      	ldr	r1, [r7, #28]
 80087d0:	4401      	add	r1, r0
 80087d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80087d6:	4313      	orrs	r3, r2
 80087d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	0151      	lsls	r1, r2, #5
 80087ec:	69fa      	ldr	r2, [r7, #28]
 80087ee:	440a      	add	r2, r1
 80087f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087f8:	6113      	str	r3, [r2, #16]
 80087fa:	e037      	b.n	800886c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	4413      	add	r3, r2
 8008806:	1e5a      	subs	r2, r3, #1
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008810:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	8afa      	ldrh	r2, [r7, #22]
 8008818:	fb03 f202 	mul.w	r2, r3, r2
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	4413      	add	r3, r2
 8008828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800882c:	691a      	ldr	r2, [r3, #16]
 800882e:	8afb      	ldrh	r3, [r7, #22]
 8008830:	04d9      	lsls	r1, r3, #19
 8008832:	4b38      	ldr	r3, [pc, #224]	@ (8008914 <USB_EPStartXfer+0x538>)
 8008834:	400b      	ands	r3, r1
 8008836:	69b9      	ldr	r1, [r7, #24]
 8008838:	0148      	lsls	r0, r1, #5
 800883a:	69f9      	ldr	r1, [r7, #28]
 800883c:	4401      	add	r1, r0
 800883e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008842:	4313      	orrs	r3, r2
 8008844:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	4413      	add	r3, r2
 800884e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800885c:	69b9      	ldr	r1, [r7, #24]
 800885e:	0148      	lsls	r0, r1, #5
 8008860:	69f9      	ldr	r1, [r7, #28]
 8008862:	4401      	add	r1, r0
 8008864:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008868:	4313      	orrs	r3, r2
 800886a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d10d      	bne.n	800888e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d009      	beq.n	800888e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	68d9      	ldr	r1, [r3, #12]
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800888a:	460a      	mov	r2, r1
 800888c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	791b      	ldrb	r3, [r3, #4]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d128      	bne.n	80088e8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d110      	bne.n	80088c8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	0151      	lsls	r1, r2, #5
 80088b8:	69fa      	ldr	r2, [r7, #28]
 80088ba:	440a      	add	r2, r1
 80088bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	e00f      	b.n	80088e8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008902:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008906:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3720      	adds	r7, #32
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	1ff80000 	.word	0x1ff80000

08008918 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d14a      	bne.n	80089cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800894a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800894e:	f040 8086 	bne.w	8008a5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	4413      	add	r3, r2
 800895c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	7812      	ldrb	r2, [r2, #0]
 8008966:	0151      	lsls	r1, r2, #5
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	440a      	add	r2, r1
 800896c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008970:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008974:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	7812      	ldrb	r2, [r2, #0]
 800898a:	0151      	lsls	r1, r2, #5
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	440a      	add	r2, r1
 8008990:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008994:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008998:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3301      	adds	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d902      	bls.n	80089b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	75fb      	strb	r3, [r7, #23]
          break;
 80089ae:	e056      	b.n	8008a5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089c8:	d0e7      	beq.n	800899a <USB_EPStopXfer+0x82>
 80089ca:	e048      	b.n	8008a5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089e4:	d13b      	bne.n	8008a5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	7812      	ldrb	r2, [r2, #0]
 80089fa:	0151      	lsls	r1, r2, #5
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	440a      	add	r2, r1
 8008a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	7812      	ldrb	r2, [r2, #0]
 8008a1e:	0151      	lsls	r1, r2, #5
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	440a      	add	r2, r1
 8008a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3301      	adds	r3, #1
 8008a32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d902      	bls.n	8008a44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	75fb      	strb	r3, [r7, #23]
          break;
 8008a42:	e00c      	b.n	8008a5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	015a      	lsls	r2, r3, #5
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a5c:	d0e7      	beq.n	8008a2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b089      	sub	sp, #36	@ 0x24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4611      	mov	r1, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	71fb      	strb	r3, [r7, #7]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d123      	bne.n	8008ada <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a92:	88bb      	ldrh	r3, [r7, #4]
 8008a94:	3303      	adds	r3, #3
 8008a96:	089b      	lsrs	r3, r3, #2
 8008a98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	e018      	b.n	8008ad2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	031a      	lsls	r2, r3, #12
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008aac:	461a      	mov	r2, r3
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	3301      	adds	r3, #1
 8008abe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	61bb      	str	r3, [r7, #24]
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d3e2      	bcc.n	8008aa0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3724      	adds	r7, #36	@ 0x24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b08b      	sub	sp, #44	@ 0x2c
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008afe:	88fb      	ldrh	r3, [r7, #6]
 8008b00:	089b      	lsrs	r3, r3, #2
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008b06:	88fb      	ldrh	r3, [r7, #6]
 8008b08:	f003 0303 	and.w	r3, r3, #3
 8008b0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008b0e:	2300      	movs	r3, #0
 8008b10:	623b      	str	r3, [r7, #32]
 8008b12:	e014      	b.n	8008b3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b22:	3301      	adds	r3, #1
 8008b24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	3301      	adds	r3, #1
 8008b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2e:	3301      	adds	r3, #1
 8008b30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	3301      	adds	r3, #1
 8008b36:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	623b      	str	r3, [r7, #32]
 8008b3e:	6a3a      	ldr	r2, [r7, #32]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d3e6      	bcc.n	8008b14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b46:	8bfb      	ldrh	r3, [r7, #30]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01e      	beq.n	8008b8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b56:	461a      	mov	r2, r3
 8008b58:	f107 0310 	add.w	r3, r7, #16
 8008b5c:	6812      	ldr	r2, [r2, #0]
 8008b5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	fa22 f303 	lsr.w	r3, r2, r3
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	701a      	strb	r2, [r3, #0]
      i++;
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	3301      	adds	r3, #1
 8008b76:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008b7e:	8bfb      	ldrh	r3, [r7, #30]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b84:	8bfb      	ldrh	r3, [r7, #30]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1ea      	bne.n	8008b60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	372c      	adds	r7, #44	@ 0x2c
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	785b      	ldrb	r3, [r3, #1]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d12c      	bne.n	8008c0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	db12      	blt.n	8008bec <USB_EPSetStall+0x54>
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00f      	beq.n	8008bec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	0151      	lsls	r1, r2, #5
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	440a      	add	r2, r1
 8008be2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008be6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	0151      	lsls	r1, r2, #5
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	440a      	add	r2, r1
 8008c02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	e02b      	b.n	8008c66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	db12      	blt.n	8008c46 <USB_EPSetStall+0xae>
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00f      	beq.n	8008c46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	0151      	lsls	r1, r2, #5
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	440a      	add	r2, r1
 8008c3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	0151      	lsls	r1, r2, #5
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	440a      	add	r2, r1
 8008c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008c64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	785b      	ldrb	r3, [r3, #1]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d128      	bne.n	8008ce2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008caa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008cae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	791b      	ldrb	r3, [r3, #4]
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d003      	beq.n	8008cc0 <USB_EPClearStall+0x4c>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	791b      	ldrb	r3, [r3, #4]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d138      	bne.n	8008d32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	0151      	lsls	r1, r2, #5
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	440a      	add	r2, r1
 8008cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	e027      	b.n	8008d32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	0151      	lsls	r1, r2, #5
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	440a      	add	r2, r1
 8008cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cfc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	791b      	ldrb	r3, [r3, #4]
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d003      	beq.n	8008d12 <USB_EPClearStall+0x9e>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	791b      	ldrb	r3, [r3, #4]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d10f      	bne.n	8008d32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	0151      	lsls	r1, r2, #5
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	440a      	add	r2, r1
 8008d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008d62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	011b      	lsls	r3, r3, #4
 8008d70:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008d74:	68f9      	ldr	r1, [r7, #12]
 8008d76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dba:	f023 0302 	bic.w	r3, r3, #2
 8008dbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008de8:	f023 0303 	bic.w	r3, r3, #3
 8008dec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dfc:	f043 0302 	orr.w	r3, r3, #2
 8008e00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	4013      	ands	r3, r2
 8008e26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008e28:	68fb      	ldr	r3, [r7, #12]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b085      	sub	sp, #20
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	4013      	ands	r3, r2
 8008e58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	0c1b      	lsrs	r3, r3, #16
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b085      	sub	sp, #20
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	b29b      	uxth	r3, r3
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b085      	sub	sp, #20
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b087      	sub	sp, #28
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008efc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008efe:	78fb      	ldrb	r3, [r7, #3]
 8008f00:	f003 030f 	and.w	r3, r3, #15
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0a:	01db      	lsls	r3, r3, #7
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008f14:	78fb      	ldrb	r3, [r7, #3]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	4013      	ands	r3, r2
 8008f26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f28:	68bb      	ldr	r3, [r7, #8]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	f003 0301 	and.w	r3, r3, #1
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008f70:	f023 0307 	bic.w	r3, r3, #7
 8008f74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	333c      	adds	r3, #60	@ 0x3c
 8008fae:	3304      	adds	r3, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	4a26      	ldr	r2, [pc, #152]	@ (8009050 <USB_EP0_OutStart+0xb8>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d90a      	bls.n	8008fd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fcc:	d101      	bne.n	8008fd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e037      	b.n	8009042 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd8:	461a      	mov	r2, r3
 8008fda:	2300      	movs	r3, #0
 8008fdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ff0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009000:	f043 0318 	orr.w	r3, r3, #24
 8009004:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009014:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009018:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800901a:	7afb      	ldrb	r3, [r7, #11]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d10f      	bne.n	8009040 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009026:	461a      	mov	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800903a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800903e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	4f54300a 	.word	0x4f54300a

08009054 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800906c:	d901      	bls.n	8009072 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e01b      	b.n	80090aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	daf2      	bge.n	8009060 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	f043 0201 	orr.w	r2, r3, #1
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3301      	adds	r3, #1
 800908e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009096:	d901      	bls.n	800909c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e006      	b.n	80090aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d0f0      	beq.n	800908a <USB_CoreReset+0x36>

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
	...

080090b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80090c8:	f002 fc9e 	bl	800ba08 <USBD_static_malloc>
 80090cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d109      	bne.n	80090e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	32b0      	adds	r2, #176	@ 0xb0
 80090de:	2100      	movs	r1, #0
 80090e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80090e4:	2302      	movs	r3, #2
 80090e6:	e0d4      	b.n	8009292 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80090e8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80090ec:	2100      	movs	r1, #0
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f003 fa4b 	bl	800c58a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	32b0      	adds	r2, #176	@ 0xb0
 80090fe:	68f9      	ldr	r1, [r7, #12]
 8009100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	32b0      	adds	r2, #176	@ 0xb0
 800910e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	7c1b      	ldrb	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d138      	bne.n	8009192 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009120:	4b5e      	ldr	r3, [pc, #376]	@ (800929c <USBD_CDC_Init+0x1e4>)
 8009122:	7819      	ldrb	r1, [r3, #0]
 8009124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009128:	2202      	movs	r2, #2
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f002 fb49 	bl	800b7c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009130:	4b5a      	ldr	r3, [pc, #360]	@ (800929c <USBD_CDC_Init+0x1e4>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	f003 020f 	and.w	r2, r3, #15
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	3324      	adds	r3, #36	@ 0x24
 8009146:	2201      	movs	r2, #1
 8009148:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800914a:	4b55      	ldr	r3, [pc, #340]	@ (80092a0 <USBD_CDC_Init+0x1e8>)
 800914c:	7819      	ldrb	r1, [r3, #0]
 800914e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009152:	2202      	movs	r2, #2
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f002 fb34 	bl	800b7c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800915a:	4b51      	ldr	r3, [pc, #324]	@ (80092a0 <USBD_CDC_Init+0x1e8>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	f003 020f 	and.w	r2, r3, #15
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	4613      	mov	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	440b      	add	r3, r1
 800916e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009172:	2201      	movs	r2, #1
 8009174:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009176:	4b4b      	ldr	r3, [pc, #300]	@ (80092a4 <USBD_CDC_Init+0x1ec>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	f003 020f 	and.w	r2, r3, #15
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	3326      	adds	r3, #38	@ 0x26
 800918c:	2210      	movs	r2, #16
 800918e:	801a      	strh	r2, [r3, #0]
 8009190:	e035      	b.n	80091fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009192:	4b42      	ldr	r3, [pc, #264]	@ (800929c <USBD_CDC_Init+0x1e4>)
 8009194:	7819      	ldrb	r1, [r3, #0]
 8009196:	2340      	movs	r3, #64	@ 0x40
 8009198:	2202      	movs	r2, #2
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f002 fb11 	bl	800b7c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80091a0:	4b3e      	ldr	r3, [pc, #248]	@ (800929c <USBD_CDC_Init+0x1e4>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 020f 	and.w	r2, r3, #15
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	440b      	add	r3, r1
 80091b4:	3324      	adds	r3, #36	@ 0x24
 80091b6:	2201      	movs	r2, #1
 80091b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091ba:	4b39      	ldr	r3, [pc, #228]	@ (80092a0 <USBD_CDC_Init+0x1e8>)
 80091bc:	7819      	ldrb	r1, [r3, #0]
 80091be:	2340      	movs	r3, #64	@ 0x40
 80091c0:	2202      	movs	r2, #2
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f002 fafd 	bl	800b7c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80091c8:	4b35      	ldr	r3, [pc, #212]	@ (80092a0 <USBD_CDC_Init+0x1e8>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	f003 020f 	and.w	r2, r3, #15
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	440b      	add	r3, r1
 80091dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80091e0:	2201      	movs	r2, #1
 80091e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091e4:	4b2f      	ldr	r3, [pc, #188]	@ (80092a4 <USBD_CDC_Init+0x1ec>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	f003 020f 	and.w	r2, r3, #15
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	4613      	mov	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	440b      	add	r3, r1
 80091f8:	3326      	adds	r3, #38	@ 0x26
 80091fa:	2210      	movs	r2, #16
 80091fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091fe:	4b29      	ldr	r3, [pc, #164]	@ (80092a4 <USBD_CDC_Init+0x1ec>)
 8009200:	7819      	ldrb	r1, [r3, #0]
 8009202:	2308      	movs	r3, #8
 8009204:	2203      	movs	r2, #3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f002 fadb 	bl	800b7c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800920c:	4b25      	ldr	r3, [pc, #148]	@ (80092a4 <USBD_CDC_Init+0x1ec>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	f003 020f 	and.w	r2, r3, #15
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	440b      	add	r3, r1
 8009220:	3324      	adds	r3, #36	@ 0x24
 8009222:	2201      	movs	r2, #1
 8009224:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	33b0      	adds	r3, #176	@ 0xb0
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800925c:	2302      	movs	r3, #2
 800925e:	e018      	b.n	8009292 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	7c1b      	ldrb	r3, [r3, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10a      	bne.n	800927e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009268:	4b0d      	ldr	r3, [pc, #52]	@ (80092a0 <USBD_CDC_Init+0x1e8>)
 800926a:	7819      	ldrb	r1, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009272:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f002 fb92 	bl	800b9a0 <USBD_LL_PrepareReceive>
 800927c:	e008      	b.n	8009290 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800927e:	4b08      	ldr	r3, [pc, #32]	@ (80092a0 <USBD_CDC_Init+0x1e8>)
 8009280:	7819      	ldrb	r1, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009288:	2340      	movs	r3, #64	@ 0x40
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f002 fb88 	bl	800b9a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	200000bf 	.word	0x200000bf
 80092a0:	200000c0 	.word	0x200000c0
 80092a4:	200000c1 	.word	0x200000c1

080092a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80092b4:	4b3a      	ldr	r3, [pc, #232]	@ (80093a0 <USBD_CDC_DeInit+0xf8>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f002 faa7 	bl	800b80e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80092c0:	4b37      	ldr	r3, [pc, #220]	@ (80093a0 <USBD_CDC_DeInit+0xf8>)
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	f003 020f 	and.w	r2, r3, #15
 80092c8:	6879      	ldr	r1, [r7, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	440b      	add	r3, r1
 80092d4:	3324      	adds	r3, #36	@ 0x24
 80092d6:	2200      	movs	r2, #0
 80092d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80092da:	4b32      	ldr	r3, [pc, #200]	@ (80093a4 <USBD_CDC_DeInit+0xfc>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f002 fa94 	bl	800b80e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80092e6:	4b2f      	ldr	r3, [pc, #188]	@ (80093a4 <USBD_CDC_DeInit+0xfc>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	f003 020f 	and.w	r2, r3, #15
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092fe:	2200      	movs	r2, #0
 8009300:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009302:	4b29      	ldr	r3, [pc, #164]	@ (80093a8 <USBD_CDC_DeInit+0x100>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f002 fa80 	bl	800b80e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800930e:	4b26      	ldr	r3, [pc, #152]	@ (80093a8 <USBD_CDC_DeInit+0x100>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	f003 020f 	and.w	r2, r3, #15
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	4613      	mov	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	3324      	adds	r3, #36	@ 0x24
 8009324:	2200      	movs	r2, #0
 8009326:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009328:	4b1f      	ldr	r3, [pc, #124]	@ (80093a8 <USBD_CDC_DeInit+0x100>)
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	f003 020f 	and.w	r2, r3, #15
 8009330:	6879      	ldr	r1, [r7, #4]
 8009332:	4613      	mov	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	440b      	add	r3, r1
 800933c:	3326      	adds	r3, #38	@ 0x26
 800933e:	2200      	movs	r2, #0
 8009340:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	32b0      	adds	r2, #176	@ 0xb0
 800934c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01f      	beq.n	8009394 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	33b0      	adds	r3, #176	@ 0xb0
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	32b0      	adds	r2, #176	@ 0xb0
 8009372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009376:	4618      	mov	r0, r3
 8009378:	f002 fb54 	bl	800ba24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	32b0      	adds	r2, #176	@ 0xb0
 8009386:	2100      	movs	r1, #0
 8009388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	200000bf 	.word	0x200000bf
 80093a4:	200000c0 	.word	0x200000c0
 80093a8:	200000c1 	.word	0x200000c1

080093ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	32b0      	adds	r2, #176	@ 0xb0
 80093c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80093d8:	2303      	movs	r3, #3
 80093da:	e0bf      	b.n	800955c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d050      	beq.n	800948a <USBD_CDC_Setup+0xde>
 80093e8:	2b20      	cmp	r3, #32
 80093ea:	f040 80af 	bne.w	800954c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	88db      	ldrh	r3, [r3, #6]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d03a      	beq.n	800946c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	b25b      	sxtb	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	da1b      	bge.n	8009438 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	33b0      	adds	r3, #176	@ 0xb0
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009416:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	88d2      	ldrh	r2, [r2, #6]
 800941c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	88db      	ldrh	r3, [r3, #6]
 8009422:	2b07      	cmp	r3, #7
 8009424:	bf28      	it	cs
 8009426:	2307      	movcs	r3, #7
 8009428:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	89fa      	ldrh	r2, [r7, #14]
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 fd93 	bl	800af5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009436:	e090      	b.n	800955a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	785a      	ldrb	r2, [r3, #1]
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	88db      	ldrh	r3, [r3, #6]
 8009446:	2b3f      	cmp	r3, #63	@ 0x3f
 8009448:	d803      	bhi.n	8009452 <USBD_CDC_Setup+0xa6>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	88db      	ldrh	r3, [r3, #6]
 800944e:	b2da      	uxtb	r2, r3
 8009450:	e000      	b.n	8009454 <USBD_CDC_Setup+0xa8>
 8009452:	2240      	movs	r2, #64	@ 0x40
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800945a:	6939      	ldr	r1, [r7, #16]
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009462:	461a      	mov	r2, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 fda5 	bl	800afb4 <USBD_CtlPrepareRx>
      break;
 800946a:	e076      	b.n	800955a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	33b0      	adds	r3, #176	@ 0xb0
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	7850      	ldrb	r0, [r2, #1]
 8009482:	2200      	movs	r2, #0
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	4798      	blx	r3
      break;
 8009488:	e067      	b.n	800955a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	2b0b      	cmp	r3, #11
 8009490:	d851      	bhi.n	8009536 <USBD_CDC_Setup+0x18a>
 8009492:	a201      	add	r2, pc, #4	@ (adr r2, 8009498 <USBD_CDC_Setup+0xec>)
 8009494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009498:	080094c9 	.word	0x080094c9
 800949c:	08009545 	.word	0x08009545
 80094a0:	08009537 	.word	0x08009537
 80094a4:	08009537 	.word	0x08009537
 80094a8:	08009537 	.word	0x08009537
 80094ac:	08009537 	.word	0x08009537
 80094b0:	08009537 	.word	0x08009537
 80094b4:	08009537 	.word	0x08009537
 80094b8:	08009537 	.word	0x08009537
 80094bc:	08009537 	.word	0x08009537
 80094c0:	080094f3 	.word	0x080094f3
 80094c4:	0800951d 	.word	0x0800951d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d107      	bne.n	80094e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094d4:	f107 030a 	add.w	r3, r7, #10
 80094d8:	2202      	movs	r2, #2
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fd3d 	bl	800af5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094e2:	e032      	b.n	800954a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f001 fcbb 	bl	800ae62 <USBD_CtlError>
            ret = USBD_FAIL;
 80094ec:	2303      	movs	r3, #3
 80094ee:	75fb      	strb	r3, [r7, #23]
          break;
 80094f0:	e02b      	b.n	800954a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d107      	bne.n	800950e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80094fe:	f107 030d 	add.w	r3, r7, #13
 8009502:	2201      	movs	r2, #1
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 fd28 	bl	800af5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800950c:	e01d      	b.n	800954a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 fca6 	bl	800ae62 <USBD_CtlError>
            ret = USBD_FAIL;
 8009516:	2303      	movs	r3, #3
 8009518:	75fb      	strb	r3, [r7, #23]
          break;
 800951a:	e016      	b.n	800954a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b03      	cmp	r3, #3
 8009526:	d00f      	beq.n	8009548 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fc99 	bl	800ae62 <USBD_CtlError>
            ret = USBD_FAIL;
 8009530:	2303      	movs	r3, #3
 8009532:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009534:	e008      	b.n	8009548 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 fc92 	bl	800ae62 <USBD_CtlError>
          ret = USBD_FAIL;
 800953e:	2303      	movs	r3, #3
 8009540:	75fb      	strb	r3, [r7, #23]
          break;
 8009542:	e002      	b.n	800954a <USBD_CDC_Setup+0x19e>
          break;
 8009544:	bf00      	nop
 8009546:	e008      	b.n	800955a <USBD_CDC_Setup+0x1ae>
          break;
 8009548:	bf00      	nop
      }
      break;
 800954a:	e006      	b.n	800955a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f001 fc87 	bl	800ae62 <USBD_CtlError>
      ret = USBD_FAIL;
 8009554:	2303      	movs	r3, #3
 8009556:	75fb      	strb	r3, [r7, #23]
      break;
 8009558:	bf00      	nop
  }

  return (uint8_t)ret;
 800955a:	7dfb      	ldrb	r3, [r7, #23]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009576:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	32b0      	adds	r2, #176	@ 0xb0
 8009582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800958a:	2303      	movs	r3, #3
 800958c:	e065      	b.n	800965a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	32b0      	adds	r2, #176	@ 0xb0
 8009598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	f003 020f 	and.w	r2, r3, #15
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	440b      	add	r3, r1
 80095b0:	3318      	adds	r3, #24
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d02f      	beq.n	8009618 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	f003 020f 	and.w	r2, r3, #15
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	4613      	mov	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	3318      	adds	r3, #24
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	f003 010f 	and.w	r1, r3, #15
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	460b      	mov	r3, r1
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	440b      	add	r3, r1
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4403      	add	r3, r0
 80095e0:	331c      	adds	r3, #28
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80095e8:	fb01 f303 	mul.w	r3, r1, r3
 80095ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d112      	bne.n	8009618 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	f003 020f 	and.w	r2, r3, #15
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	3318      	adds	r3, #24
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800960a:	78f9      	ldrb	r1, [r7, #3]
 800960c:	2300      	movs	r3, #0
 800960e:	2200      	movs	r2, #0
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f002 f9a4 	bl	800b95e <USBD_LL_Transmit>
 8009616:	e01f      	b.n	8009658 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2200      	movs	r2, #0
 800961c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	33b0      	adds	r3, #176	@ 0xb0
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d010      	beq.n	8009658 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	33b0      	adds	r3, #176	@ 0xb0
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	460b      	mov	r3, r1
 800966c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	32b0      	adds	r2, #176	@ 0xb0
 8009678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800967c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	32b0      	adds	r2, #176	@ 0xb0
 8009688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009690:	2303      	movs	r3, #3
 8009692:	e01a      	b.n	80096ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f002 f9a2 	bl	800b9e2 <USBD_LL_GetRxDataSize>
 800969e:	4602      	mov	r2, r0
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	33b0      	adds	r3, #176	@ 0xb0
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80096c4:	4611      	mov	r1, r2
 80096c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	32b0      	adds	r2, #176	@ 0xb0
 80096e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e024      	b.n	800973e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	33b0      	adds	r3, #176	@ 0xb0
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d019      	beq.n	800973c <USBD_CDC_EP0_RxReady+0x6a>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800970e:	2bff      	cmp	r3, #255	@ 0xff
 8009710:	d014      	beq.n	800973c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	33b0      	adds	r3, #176	@ 0xb0
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800972a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009732:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	22ff      	movs	r2, #255	@ 0xff
 8009738:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009750:	2182      	movs	r1, #130	@ 0x82
 8009752:	4818      	ldr	r0, [pc, #96]	@ (80097b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009754:	f000 fd4f 	bl	800a1f6 <USBD_GetEpDesc>
 8009758:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800975a:	2101      	movs	r1, #1
 800975c:	4815      	ldr	r0, [pc, #84]	@ (80097b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800975e:	f000 fd4a 	bl	800a1f6 <USBD_GetEpDesc>
 8009762:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009764:	2181      	movs	r1, #129	@ 0x81
 8009766:	4813      	ldr	r0, [pc, #76]	@ (80097b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009768:	f000 fd45 	bl	800a1f6 <USBD_GetEpDesc>
 800976c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	2210      	movs	r2, #16
 8009778:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d006      	beq.n	800978e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2200      	movs	r2, #0
 8009784:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009788:	711a      	strb	r2, [r3, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d006      	beq.n	80097a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800979c:	711a      	strb	r2, [r3, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2243      	movs	r2, #67	@ 0x43
 80097a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097a8:	4b02      	ldr	r3, [pc, #8]	@ (80097b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	2000007c 	.word	0x2000007c

080097b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097c0:	2182      	movs	r1, #130	@ 0x82
 80097c2:	4818      	ldr	r0, [pc, #96]	@ (8009824 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097c4:	f000 fd17 	bl	800a1f6 <USBD_GetEpDesc>
 80097c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097ca:	2101      	movs	r1, #1
 80097cc:	4815      	ldr	r0, [pc, #84]	@ (8009824 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097ce:	f000 fd12 	bl	800a1f6 <USBD_GetEpDesc>
 80097d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097d4:	2181      	movs	r1, #129	@ 0x81
 80097d6:	4813      	ldr	r0, [pc, #76]	@ (8009824 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097d8:	f000 fd0d 	bl	800a1f6 <USBD_GetEpDesc>
 80097dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	2210      	movs	r2, #16
 80097e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d006      	beq.n	80097fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	2200      	movs	r2, #0
 80097f4:	711a      	strb	r2, [r3, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f042 0202 	orr.w	r2, r2, #2
 80097fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d006      	beq.n	8009812 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	711a      	strb	r2, [r3, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f042 0202 	orr.w	r2, r2, #2
 8009810:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2243      	movs	r2, #67	@ 0x43
 8009816:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009818:	4b02      	ldr	r3, [pc, #8]	@ (8009824 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800981a:	4618      	mov	r0, r3
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	2000007c 	.word	0x2000007c

08009828 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009830:	2182      	movs	r1, #130	@ 0x82
 8009832:	4818      	ldr	r0, [pc, #96]	@ (8009894 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009834:	f000 fcdf 	bl	800a1f6 <USBD_GetEpDesc>
 8009838:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800983a:	2101      	movs	r1, #1
 800983c:	4815      	ldr	r0, [pc, #84]	@ (8009894 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800983e:	f000 fcda 	bl	800a1f6 <USBD_GetEpDesc>
 8009842:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009844:	2181      	movs	r1, #129	@ 0x81
 8009846:	4813      	ldr	r0, [pc, #76]	@ (8009894 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009848:	f000 fcd5 	bl	800a1f6 <USBD_GetEpDesc>
 800984c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2210      	movs	r2, #16
 8009858:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d006      	beq.n	800986e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	2200      	movs	r2, #0
 8009864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009868:	711a      	strb	r2, [r3, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d006      	beq.n	8009882 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800987c:	711a      	strb	r2, [r3, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2243      	movs	r2, #67	@ 0x43
 8009886:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009888:	4b02      	ldr	r3, [pc, #8]	@ (8009894 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	2000007c 	.word	0x2000007c

08009898 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	220a      	movs	r2, #10
 80098a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80098a6:	4b03      	ldr	r3, [pc, #12]	@ (80098b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	20000038 	.word	0x20000038

080098b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e009      	b.n	80098e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	33b0      	adds	r3, #176	@ 0xb0
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	32b0      	adds	r2, #176	@ 0xb0
 8009902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009906:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800990e:	2303      	movs	r3, #3
 8009910:	e008      	b.n	8009924 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	371c      	adds	r7, #28
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	32b0      	adds	r2, #176	@ 0xb0
 8009944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009948:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009950:	2303      	movs	r3, #3
 8009952:	e004      	b.n	800995e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
	...

0800996c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	32b0      	adds	r2, #176	@ 0xb0
 800997e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009982:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009984:	2301      	movs	r3, #1
 8009986:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800998e:	2303      	movs	r3, #3
 8009990:	e025      	b.n	80099de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009998:	2b00      	cmp	r3, #0
 800999a:	d11f      	bne.n	80099dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2201      	movs	r2, #1
 80099a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80099a4:	4b10      	ldr	r3, [pc, #64]	@ (80099e8 <USBD_CDC_TransmitPacket+0x7c>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	f003 020f 	and.w	r2, r3, #15
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4403      	add	r3, r0
 80099be:	3318      	adds	r3, #24
 80099c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80099c2:	4b09      	ldr	r3, [pc, #36]	@ (80099e8 <USBD_CDC_TransmitPacket+0x7c>)
 80099c4:	7819      	ldrb	r1, [r3, #0]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 ffc3 	bl	800b95e <USBD_LL_Transmit>

    ret = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	200000bf 	.word	0x200000bf

080099ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	32b0      	adds	r2, #176	@ 0xb0
 80099fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	32b0      	adds	r2, #176	@ 0xb0
 8009a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e018      	b.n	8009a4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	7c1b      	ldrb	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10a      	bne.n	8009a38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a22:	4b0c      	ldr	r3, [pc, #48]	@ (8009a54 <USBD_CDC_ReceivePacket+0x68>)
 8009a24:	7819      	ldrb	r1, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f001 ffb5 	bl	800b9a0 <USBD_LL_PrepareReceive>
 8009a36:	e008      	b.n	8009a4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a38:	4b06      	ldr	r3, [pc, #24]	@ (8009a54 <USBD_CDC_ReceivePacket+0x68>)
 8009a3a:	7819      	ldrb	r1, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a42:	2340      	movs	r3, #64	@ 0x40
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f001 ffab 	bl	800b9a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	200000c0 	.word	0x200000c0

08009a58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	4613      	mov	r3, r2
 8009a64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d101      	bne.n	8009a70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e01f      	b.n	8009ab0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	79fa      	ldrb	r2, [r7, #7]
 8009aa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f001 fe25 	bl	800b6f4 <USBD_LL_Init>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e025      	b.n	8009b1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	32ae      	adds	r2, #174	@ 0xae
 8009ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00f      	beq.n	8009b0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	32ae      	adds	r2, #174	@ 0xae
 8009af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afc:	f107 020e 	add.w	r2, r7, #14
 8009b00:	4610      	mov	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	4602      	mov	r2, r0
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009b12:	1c5a      	adds	r2, r3, #1
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f001 fe2d 	bl	800b78c <USBD_LL_Start>
 8009b32:	4603      	mov	r3, r0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d009      	beq.n	8009b80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	78fa      	ldrb	r2, [r7, #3]
 8009b76:	4611      	mov	r1, r2
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	460b      	mov	r3, r1
 8009b94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	78fa      	ldrb	r2, [r7, #3]
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	4798      	blx	r3
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f001 f90c 	bl	800adee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009be4:	461a      	mov	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009bf2:	f003 031f 	and.w	r3, r3, #31
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d01a      	beq.n	8009c30 <USBD_LL_SetupStage+0x72>
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d822      	bhi.n	8009c44 <USBD_LL_SetupStage+0x86>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d002      	beq.n	8009c08 <USBD_LL_SetupStage+0x4a>
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d00a      	beq.n	8009c1c <USBD_LL_SetupStage+0x5e>
 8009c06:	e01d      	b.n	8009c44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fb63 	bl	800a2dc <USBD_StdDevReq>
 8009c16:	4603      	mov	r3, r0
 8009c18:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1a:	e020      	b.n	8009c5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fbcb 	bl	800a3c0 <USBD_StdItfReq>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c2e:	e016      	b.n	8009c5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fc2d 	bl	800a498 <USBD_StdEPReq>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73fb      	strb	r3, [r7, #15]
      break;
 8009c42:	e00c      	b.n	8009c5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009c4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 fdfa 	bl	800b84c <USBD_LL_StallEP>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c5c:	bf00      	nop
  }

  return ret;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	460b      	mov	r3, r1
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009c7a:	7afb      	ldrb	r3, [r7, #11]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d16e      	bne.n	8009d5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009c86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	f040 8098 	bne.w	8009dc4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	689a      	ldr	r2, [r3, #8]
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d913      	bls.n	8009cc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	1ad2      	subs	r2, r2, r3
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	68da      	ldr	r2, [r3, #12]
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	bf28      	it	cs
 8009cba:	4613      	movcs	r3, r2
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f001 f994 	bl	800afee <USBD_CtlContinueRx>
 8009cc6:	e07d      	b.n	8009dc4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009cce:	f003 031f 	and.w	r3, r3, #31
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d014      	beq.n	8009d00 <USBD_LL_DataOutStage+0x98>
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d81d      	bhi.n	8009d16 <USBD_LL_DataOutStage+0xae>
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <USBD_LL_DataOutStage+0x7c>
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d003      	beq.n	8009cea <USBD_LL_DataOutStage+0x82>
 8009ce2:	e018      	b.n	8009d16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	75bb      	strb	r3, [r7, #22]
            break;
 8009ce8:	e018      	b.n	8009d1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 fa64 	bl	800a1c2 <USBD_CoreFindIF>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	75bb      	strb	r3, [r7, #22]
            break;
 8009cfe:	e00d      	b.n	8009d1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	4619      	mov	r1, r3
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 fa66 	bl	800a1dc <USBD_CoreFindEP>
 8009d10:	4603      	mov	r3, r0
 8009d12:	75bb      	strb	r3, [r7, #22]
            break;
 8009d14:	e002      	b.n	8009d1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	75bb      	strb	r3, [r7, #22]
            break;
 8009d1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009d1c:	7dbb      	ldrb	r3, [r7, #22]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d119      	bne.n	8009d56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d113      	bne.n	8009d56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009d2e:	7dba      	ldrb	r2, [r7, #22]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	32ae      	adds	r2, #174	@ 0xae
 8009d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00b      	beq.n	8009d56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009d3e:	7dba      	ldrb	r2, [r7, #22]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009d46:	7dba      	ldrb	r2, [r7, #22]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	32ae      	adds	r2, #174	@ 0xae
 8009d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f001 f95a 	bl	800b010 <USBD_CtlSendStatus>
 8009d5c:	e032      	b.n	8009dc4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009d5e:	7afb      	ldrb	r3, [r7, #11]
 8009d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	4619      	mov	r1, r3
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 fa37 	bl	800a1dc <USBD_CoreFindEP>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d72:	7dbb      	ldrb	r3, [r7, #22]
 8009d74:	2bff      	cmp	r3, #255	@ 0xff
 8009d76:	d025      	beq.n	8009dc4 <USBD_LL_DataOutStage+0x15c>
 8009d78:	7dbb      	ldrb	r3, [r7, #22]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d122      	bne.n	8009dc4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d117      	bne.n	8009dba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009d8a:	7dba      	ldrb	r2, [r7, #22]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	32ae      	adds	r2, #174	@ 0xae
 8009d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00f      	beq.n	8009dba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009d9a:	7dba      	ldrb	r2, [r7, #22]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009da2:	7dba      	ldrb	r2, [r7, #22]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	32ae      	adds	r2, #174	@ 0xae
 8009da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	7afa      	ldrb	r2, [r7, #11]
 8009db0:	4611      	mov	r1, r2
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	4798      	blx	r3
 8009db6:	4603      	mov	r3, r0
 8009db8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	e000      	b.n	8009dc6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b086      	sub	sp, #24
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	60f8      	str	r0, [r7, #12]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	607a      	str	r2, [r7, #4]
 8009dda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ddc:	7afb      	ldrb	r3, [r7, #11]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d16f      	bne.n	8009ec2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3314      	adds	r3, #20
 8009de6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d15a      	bne.n	8009ea8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	689a      	ldr	r2, [r3, #8]
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d914      	bls.n	8009e28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	689a      	ldr	r2, [r3, #8]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	1ad2      	subs	r2, r2, r3
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	461a      	mov	r2, r3
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f001 f8bc 	bl	800af92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2100      	movs	r1, #0
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f001 fdbd 	bl	800b9a0 <USBD_LL_PrepareReceive>
 8009e26:	e03f      	b.n	8009ea8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d11c      	bne.n	8009e6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	685a      	ldr	r2, [r3, #4]
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d316      	bcc.n	8009e6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d20f      	bcs.n	8009e6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2100      	movs	r1, #0
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f001 f89d 	bl	800af92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e60:	2300      	movs	r3, #0
 8009e62:	2200      	movs	r2, #0
 8009e64:	2100      	movs	r1, #0
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f001 fd9a 	bl	800b9a0 <USBD_LL_PrepareReceive>
 8009e6c:	e01c      	b.n	8009ea8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d10f      	bne.n	8009e9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e9a:	2180      	movs	r1, #128	@ 0x80
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f001 fcd5 	bl	800b84c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f001 f8c7 	bl	800b036 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d03a      	beq.n	8009f28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7ff fe42 	bl	8009b3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009ec0:	e032      	b.n	8009f28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ec2:	7afb      	ldrb	r3, [r7, #11]
 8009ec4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	4619      	mov	r1, r3
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 f985 	bl	800a1dc <USBD_CoreFindEP>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	2bff      	cmp	r3, #255	@ 0xff
 8009eda:	d025      	beq.n	8009f28 <USBD_LL_DataInStage+0x15a>
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d122      	bne.n	8009f28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d11c      	bne.n	8009f28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009eee:	7dfa      	ldrb	r2, [r7, #23]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	32ae      	adds	r2, #174	@ 0xae
 8009ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d014      	beq.n	8009f28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009efe:	7dfa      	ldrb	r2, [r7, #23]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009f06:	7dfa      	ldrb	r2, [r7, #23]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	32ae      	adds	r2, #174	@ 0xae
 8009f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	7afa      	ldrb	r2, [r7, #11]
 8009f14:	4611      	mov	r1, r2
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	4798      	blx	r3
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009f1e:	7dbb      	ldrb	r3, [r7, #22]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009f24:	7dbb      	ldrb	r3, [r7, #22]
 8009f26:	e000      	b.n	8009f2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d014      	beq.n	8009f98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00e      	beq.n	8009f98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6852      	ldr	r2, [r2, #4]
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	4611      	mov	r1, r2
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	4798      	blx	r3
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009f94:	2303      	movs	r3, #3
 8009f96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f98:	2340      	movs	r3, #64	@ 0x40
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 fc0f 	bl	800b7c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2240      	movs	r2, #64	@ 0x40
 8009fb0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fb4:	2340      	movs	r3, #64	@ 0x40
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2180      	movs	r1, #128	@ 0x80
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f001 fc01 	bl	800b7c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2240      	movs	r2, #64	@ 0x40
 8009fca:	621a      	str	r2, [r3, #32]

  return ret;
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	78fa      	ldrb	r2, [r7, #3]
 8009fe6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b083      	sub	sp, #12
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b04      	cmp	r3, #4
 800a008:	d006      	beq.n	800a018 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a010:	b2da      	uxtb	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2204      	movs	r2, #4
 800a01c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b04      	cmp	r3, #4
 800a040:	d106      	bne.n	800a050 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b082      	sub	sp, #8
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d110      	bne.n	800a094 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d005      	beq.n	800a094 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	32ae      	adds	r2, #174	@ 0xae
 800a0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e01c      	b.n	800a0fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d115      	bne.n	800a0f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	32ae      	adds	r2, #174	@ 0xae
 800a0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00b      	beq.n	800a0f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	32ae      	adds	r2, #174	@ 0xae
 800a0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	78fa      	ldrb	r2, [r7, #3]
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b082      	sub	sp, #8
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	32ae      	adds	r2, #174	@ 0xae
 800a118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a120:	2303      	movs	r3, #3
 800a122:	e01c      	b.n	800a15e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d115      	bne.n	800a15c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	32ae      	adds	r2, #174	@ 0xae
 800a13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	32ae      	adds	r2, #174	@ 0xae
 800a14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a154:	78fa      	ldrb	r2, [r7, #3]
 800a156:	4611      	mov	r1, r2
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00e      	beq.n	800a1b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	6852      	ldr	r2, [r2, #4]
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	4798      	blx	r3
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b086      	sub	sp, #24
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	460b      	mov	r3, r1
 800a200:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	885b      	ldrh	r3, [r3, #2]
 800a212:	b29b      	uxth	r3, r3
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	7812      	ldrb	r2, [r2, #0]
 800a218:	4293      	cmp	r3, r2
 800a21a:	d91f      	bls.n	800a25c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a222:	e013      	b.n	800a24c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a224:	f107 030a 	add.w	r3, r7, #10
 800a228:	4619      	mov	r1, r3
 800a22a:	6978      	ldr	r0, [r7, #20]
 800a22c:	f000 f81b 	bl	800a266 <USBD_GetNextDesc>
 800a230:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	2b05      	cmp	r3, #5
 800a238:	d108      	bne.n	800a24c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	789b      	ldrb	r3, [r3, #2]
 800a242:	78fa      	ldrb	r2, [r7, #3]
 800a244:	429a      	cmp	r2, r3
 800a246:	d008      	beq.n	800a25a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a248:	2300      	movs	r3, #0
 800a24a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	885b      	ldrh	r3, [r3, #2]
 800a250:	b29a      	uxth	r2, r3
 800a252:	897b      	ldrh	r3, [r7, #10]
 800a254:	429a      	cmp	r2, r3
 800a256:	d8e5      	bhi.n	800a224 <USBD_GetEpDesc+0x2e>
 800a258:	e000      	b.n	800a25c <USBD_GetEpDesc+0x66>
          break;
 800a25a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a25c:	693b      	ldr	r3, [r7, #16]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a266:	b480      	push	{r7}
 800a268:	b085      	sub	sp, #20
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	881b      	ldrh	r3, [r3, #0]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	7812      	ldrb	r2, [r2, #0]
 800a27c:	4413      	add	r3, r2
 800a27e:	b29a      	uxth	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4413      	add	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a290:	68fb      	ldr	r3, [r7, #12]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b087      	sub	sp, #28
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2bc:	8a3b      	ldrh	r3, [r7, #16]
 800a2be:	021b      	lsls	r3, r3, #8
 800a2c0:	b21a      	sxth	r2, r3
 800a2c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	b21b      	sxth	r3, r3
 800a2ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a2cc:	89fb      	ldrh	r3, [r7, #14]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	371c      	adds	r7, #28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
	...

0800a2dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a2f2:	2b40      	cmp	r3, #64	@ 0x40
 800a2f4:	d005      	beq.n	800a302 <USBD_StdDevReq+0x26>
 800a2f6:	2b40      	cmp	r3, #64	@ 0x40
 800a2f8:	d857      	bhi.n	800a3aa <USBD_StdDevReq+0xce>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00f      	beq.n	800a31e <USBD_StdDevReq+0x42>
 800a2fe:	2b20      	cmp	r3, #32
 800a300:	d153      	bne.n	800a3aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	32ae      	adds	r2, #174	@ 0xae
 800a30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	4798      	blx	r3
 800a318:	4603      	mov	r3, r0
 800a31a:	73fb      	strb	r3, [r7, #15]
      break;
 800a31c:	e04a      	b.n	800a3b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	785b      	ldrb	r3, [r3, #1]
 800a322:	2b09      	cmp	r3, #9
 800a324:	d83b      	bhi.n	800a39e <USBD_StdDevReq+0xc2>
 800a326:	a201      	add	r2, pc, #4	@ (adr r2, 800a32c <USBD_StdDevReq+0x50>)
 800a328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32c:	0800a381 	.word	0x0800a381
 800a330:	0800a395 	.word	0x0800a395
 800a334:	0800a39f 	.word	0x0800a39f
 800a338:	0800a38b 	.word	0x0800a38b
 800a33c:	0800a39f 	.word	0x0800a39f
 800a340:	0800a35f 	.word	0x0800a35f
 800a344:	0800a355 	.word	0x0800a355
 800a348:	0800a39f 	.word	0x0800a39f
 800a34c:	0800a377 	.word	0x0800a377
 800a350:	0800a369 	.word	0x0800a369
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fa3c 	bl	800a7d4 <USBD_GetDescriptor>
          break;
 800a35c:	e024      	b.n	800a3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fba1 	bl	800aaa8 <USBD_SetAddress>
          break;
 800a366:	e01f      	b.n	800a3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fbe0 	bl	800ab30 <USBD_SetConfig>
 800a370:	4603      	mov	r3, r0
 800a372:	73fb      	strb	r3, [r7, #15]
          break;
 800a374:	e018      	b.n	800a3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fc83 	bl	800ac84 <USBD_GetConfig>
          break;
 800a37e:	e013      	b.n	800a3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fcb4 	bl	800acf0 <USBD_GetStatus>
          break;
 800a388:	e00e      	b.n	800a3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a38a:	6839      	ldr	r1, [r7, #0]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fce3 	bl	800ad58 <USBD_SetFeature>
          break;
 800a392:	e009      	b.n	800a3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fd07 	bl	800adaa <USBD_ClrFeature>
          break;
 800a39c:	e004      	b.n	800a3a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fd5e 	bl	800ae62 <USBD_CtlError>
          break;
 800a3a6:	bf00      	nop
      }
      break;
 800a3a8:	e004      	b.n	800a3b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fd58 	bl	800ae62 <USBD_CtlError>
      break;
 800a3b2:	bf00      	nop
  }

  return ret;
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop

0800a3c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3d6:	2b40      	cmp	r3, #64	@ 0x40
 800a3d8:	d005      	beq.n	800a3e6 <USBD_StdItfReq+0x26>
 800a3da:	2b40      	cmp	r3, #64	@ 0x40
 800a3dc:	d852      	bhi.n	800a484 <USBD_StdItfReq+0xc4>
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <USBD_StdItfReq+0x26>
 800a3e2:	2b20      	cmp	r3, #32
 800a3e4:	d14e      	bne.n	800a484 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d840      	bhi.n	800a476 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	889b      	ldrh	r3, [r3, #4]
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d836      	bhi.n	800a46c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	889b      	ldrh	r3, [r3, #4]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7ff fedb 	bl	800a1c2 <USBD_CoreFindIF>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	2bff      	cmp	r3, #255	@ 0xff
 800a414:	d01d      	beq.n	800a452 <USBD_StdItfReq+0x92>
 800a416:	7bbb      	ldrb	r3, [r7, #14]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d11a      	bne.n	800a452 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a41c:	7bba      	ldrb	r2, [r7, #14]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	32ae      	adds	r2, #174	@ 0xae
 800a422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00f      	beq.n	800a44c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a42c:	7bba      	ldrb	r2, [r7, #14]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a434:	7bba      	ldrb	r2, [r7, #14]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	32ae      	adds	r2, #174	@ 0xae
 800a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	4798      	blx	r3
 800a446:	4603      	mov	r3, r0
 800a448:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a44a:	e004      	b.n	800a456 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a44c:	2303      	movs	r3, #3
 800a44e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a450:	e001      	b.n	800a456 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a452:	2303      	movs	r3, #3
 800a454:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	88db      	ldrh	r3, [r3, #6]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d110      	bne.n	800a480 <USBD_StdItfReq+0xc0>
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10d      	bne.n	800a480 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fdd3 	bl	800b010 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a46a:	e009      	b.n	800a480 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fcf7 	bl	800ae62 <USBD_CtlError>
          break;
 800a474:	e004      	b.n	800a480 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fcf2 	bl	800ae62 <USBD_CtlError>
          break;
 800a47e:	e000      	b.n	800a482 <USBD_StdItfReq+0xc2>
          break;
 800a480:	bf00      	nop
      }
      break;
 800a482:	e004      	b.n	800a48e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a484:	6839      	ldr	r1, [r7, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fceb 	bl	800ae62 <USBD_CtlError>
      break;
 800a48c:	bf00      	nop
  }

  return ret;
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	889b      	ldrh	r3, [r3, #4]
 800a4aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4b4:	2b40      	cmp	r3, #64	@ 0x40
 800a4b6:	d007      	beq.n	800a4c8 <USBD_StdEPReq+0x30>
 800a4b8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ba:	f200 817f 	bhi.w	800a7bc <USBD_StdEPReq+0x324>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d02a      	beq.n	800a518 <USBD_StdEPReq+0x80>
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	f040 817a 	bne.w	800a7bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff fe85 	bl	800a1dc <USBD_CoreFindEP>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4d6:	7b7b      	ldrb	r3, [r7, #13]
 800a4d8:	2bff      	cmp	r3, #255	@ 0xff
 800a4da:	f000 8174 	beq.w	800a7c6 <USBD_StdEPReq+0x32e>
 800a4de:	7b7b      	ldrb	r3, [r7, #13]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f040 8170 	bne.w	800a7c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a4e6:	7b7a      	ldrb	r2, [r7, #13]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a4ee:	7b7a      	ldrb	r2, [r7, #13]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	32ae      	adds	r2, #174	@ 0xae
 800a4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f000 8163 	beq.w	800a7c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a500:	7b7a      	ldrb	r2, [r7, #13]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	32ae      	adds	r2, #174	@ 0xae
 800a506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	4798      	blx	r3
 800a512:	4603      	mov	r3, r0
 800a514:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a516:	e156      	b.n	800a7c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	785b      	ldrb	r3, [r3, #1]
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d008      	beq.n	800a532 <USBD_StdEPReq+0x9a>
 800a520:	2b03      	cmp	r3, #3
 800a522:	f300 8145 	bgt.w	800a7b0 <USBD_StdEPReq+0x318>
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 809b 	beq.w	800a662 <USBD_StdEPReq+0x1ca>
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d03c      	beq.n	800a5aa <USBD_StdEPReq+0x112>
 800a530:	e13e      	b.n	800a7b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d002      	beq.n	800a544 <USBD_StdEPReq+0xac>
 800a53e:	2b03      	cmp	r3, #3
 800a540:	d016      	beq.n	800a570 <USBD_StdEPReq+0xd8>
 800a542:	e02c      	b.n	800a59e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a544:	7bbb      	ldrb	r3, [r7, #14]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00d      	beq.n	800a566 <USBD_StdEPReq+0xce>
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
 800a54c:	2b80      	cmp	r3, #128	@ 0x80
 800a54e:	d00a      	beq.n	800a566 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a550:	7bbb      	ldrb	r3, [r7, #14]
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 f979 	bl	800b84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a55a:	2180      	movs	r1, #128	@ 0x80
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 f975 	bl	800b84c <USBD_LL_StallEP>
 800a562:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a564:	e020      	b.n	800a5a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fc7a 	bl	800ae62 <USBD_CtlError>
              break;
 800a56e:	e01b      	b.n	800a5a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	885b      	ldrh	r3, [r3, #2]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10e      	bne.n	800a596 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00b      	beq.n	800a596 <USBD_StdEPReq+0xfe>
 800a57e:	7bbb      	ldrb	r3, [r7, #14]
 800a580:	2b80      	cmp	r3, #128	@ 0x80
 800a582:	d008      	beq.n	800a596 <USBD_StdEPReq+0xfe>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	88db      	ldrh	r3, [r3, #6]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d104      	bne.n	800a596 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a58c:	7bbb      	ldrb	r3, [r7, #14]
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f001 f95b 	bl	800b84c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fd3a 	bl	800b010 <USBD_CtlSendStatus>

              break;
 800a59c:	e004      	b.n	800a5a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fc5e 	bl	800ae62 <USBD_CtlError>
              break;
 800a5a6:	bf00      	nop
          }
          break;
 800a5a8:	e107      	b.n	800a7ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d002      	beq.n	800a5bc <USBD_StdEPReq+0x124>
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	d016      	beq.n	800a5e8 <USBD_StdEPReq+0x150>
 800a5ba:	e04b      	b.n	800a654 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5bc:	7bbb      	ldrb	r3, [r7, #14]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00d      	beq.n	800a5de <USBD_StdEPReq+0x146>
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
 800a5c4:	2b80      	cmp	r3, #128	@ 0x80
 800a5c6:	d00a      	beq.n	800a5de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5c8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f001 f93d 	bl	800b84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5d2:	2180      	movs	r1, #128	@ 0x80
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f001 f939 	bl	800b84c <USBD_LL_StallEP>
 800a5da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5dc:	e040      	b.n	800a660 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fc3e 	bl	800ae62 <USBD_CtlError>
              break;
 800a5e6:	e03b      	b.n	800a660 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	885b      	ldrh	r3, [r3, #2]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d136      	bne.n	800a65e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a5f0:	7bbb      	ldrb	r3, [r7, #14]
 800a5f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d004      	beq.n	800a604 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f001 f943 	bl	800b88a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fd03 	bl	800b010 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff fde4 	bl	800a1dc <USBD_CoreFindEP>
 800a614:	4603      	mov	r3, r0
 800a616:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a618:	7b7b      	ldrb	r3, [r7, #13]
 800a61a:	2bff      	cmp	r3, #255	@ 0xff
 800a61c:	d01f      	beq.n	800a65e <USBD_StdEPReq+0x1c6>
 800a61e:	7b7b      	ldrb	r3, [r7, #13]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d11c      	bne.n	800a65e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a624:	7b7a      	ldrb	r2, [r7, #13]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a62c:	7b7a      	ldrb	r2, [r7, #13]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	32ae      	adds	r2, #174	@ 0xae
 800a632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d010      	beq.n	800a65e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a63c:	7b7a      	ldrb	r2, [r7, #13]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	32ae      	adds	r2, #174	@ 0xae
 800a642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	4798      	blx	r3
 800a64e:	4603      	mov	r3, r0
 800a650:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a652:	e004      	b.n	800a65e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fc03 	bl	800ae62 <USBD_CtlError>
              break;
 800a65c:	e000      	b.n	800a660 <USBD_StdEPReq+0x1c8>
              break;
 800a65e:	bf00      	nop
          }
          break;
 800a660:	e0ab      	b.n	800a7ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d002      	beq.n	800a674 <USBD_StdEPReq+0x1dc>
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d032      	beq.n	800a6d8 <USBD_StdEPReq+0x240>
 800a672:	e097      	b.n	800a7a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a674:	7bbb      	ldrb	r3, [r7, #14]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d007      	beq.n	800a68a <USBD_StdEPReq+0x1f2>
 800a67a:	7bbb      	ldrb	r3, [r7, #14]
 800a67c:	2b80      	cmp	r3, #128	@ 0x80
 800a67e:	d004      	beq.n	800a68a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fbed 	bl	800ae62 <USBD_CtlError>
                break;
 800a688:	e091      	b.n	800a7ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a68a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	da0b      	bge.n	800a6aa <USBD_StdEPReq+0x212>
 800a692:	7bbb      	ldrb	r3, [r7, #14]
 800a694:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a698:	4613      	mov	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4413      	add	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	3310      	adds	r3, #16
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	e00b      	b.n	800a6c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6aa:	7bbb      	ldrb	r3, [r7, #14]
 800a6ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	4413      	add	r3, r2
 800a6c0:	3304      	adds	r3, #4
 800a6c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fc43 	bl	800af5c <USBD_CtlSendData>
              break;
 800a6d6:	e06a      	b.n	800a7ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a6d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	da11      	bge.n	800a704 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
 800a6e2:	f003 020f 	and.w	r2, r3, #15
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	440b      	add	r3, r1
 800a6f2:	3324      	adds	r3, #36	@ 0x24
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d117      	bne.n	800a72a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fbb0 	bl	800ae62 <USBD_CtlError>
                  break;
 800a702:	e054      	b.n	800a7ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a704:	7bbb      	ldrb	r3, [r7, #14]
 800a706:	f003 020f 	and.w	r2, r3, #15
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	4613      	mov	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	440b      	add	r3, r1
 800a716:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d104      	bne.n	800a72a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fb9d 	bl	800ae62 <USBD_CtlError>
                  break;
 800a728:	e041      	b.n	800a7ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a72a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	da0b      	bge.n	800a74a <USBD_StdEPReq+0x2b2>
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a738:	4613      	mov	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	4413      	add	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	3310      	adds	r3, #16
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	4413      	add	r3, r2
 800a746:	3304      	adds	r3, #4
 800a748:	e00b      	b.n	800a762 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	4413      	add	r3, r2
 800a760:	3304      	adds	r3, #4
 800a762:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a764:	7bbb      	ldrb	r3, [r7, #14]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <USBD_StdEPReq+0x2d8>
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	2b80      	cmp	r3, #128	@ 0x80
 800a76e:	d103      	bne.n	800a778 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	2200      	movs	r2, #0
 800a774:	601a      	str	r2, [r3, #0]
 800a776:	e00e      	b.n	800a796 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a778:	7bbb      	ldrb	r3, [r7, #14]
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 f8a3 	bl	800b8c8 <USBD_LL_IsStallEP>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d003      	beq.n	800a790 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2201      	movs	r2, #1
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	e002      	b.n	800a796 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2200      	movs	r2, #0
 800a794:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2202      	movs	r2, #2
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fbdd 	bl	800af5c <USBD_CtlSendData>
              break;
 800a7a2:	e004      	b.n	800a7ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fb5b 	bl	800ae62 <USBD_CtlError>
              break;
 800a7ac:	bf00      	nop
          }
          break;
 800a7ae:	e004      	b.n	800a7ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fb55 	bl	800ae62 <USBD_CtlError>
          break;
 800a7b8:	bf00      	nop
      }
      break;
 800a7ba:	e005      	b.n	800a7c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fb4f 	bl	800ae62 <USBD_CtlError>
      break;
 800a7c4:	e000      	b.n	800a7c8 <USBD_StdEPReq+0x330>
      break;
 800a7c6:	bf00      	nop
  }

  return ret;
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	885b      	ldrh	r3, [r3, #2]
 800a7ee:	0a1b      	lsrs	r3, r3, #8
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	2b06      	cmp	r3, #6
 800a7f6:	f200 8128 	bhi.w	800aa4a <USBD_GetDescriptor+0x276>
 800a7fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a800 <USBD_GetDescriptor+0x2c>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a81d 	.word	0x0800a81d
 800a804:	0800a835 	.word	0x0800a835
 800a808:	0800a875 	.word	0x0800a875
 800a80c:	0800aa4b 	.word	0x0800aa4b
 800a810:	0800aa4b 	.word	0x0800aa4b
 800a814:	0800a9eb 	.word	0x0800a9eb
 800a818:	0800aa17 	.word	0x0800aa17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	7c12      	ldrb	r2, [r2, #16]
 800a828:	f107 0108 	add.w	r1, r7, #8
 800a82c:	4610      	mov	r0, r2
 800a82e:	4798      	blx	r3
 800a830:	60f8      	str	r0, [r7, #12]
      break;
 800a832:	e112      	b.n	800aa5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	7c1b      	ldrb	r3, [r3, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10d      	bne.n	800a858 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a844:	f107 0208 	add.w	r2, r7, #8
 800a848:	4610      	mov	r0, r2
 800a84a:	4798      	blx	r3
 800a84c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3301      	adds	r3, #1
 800a852:	2202      	movs	r2, #2
 800a854:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a856:	e100      	b.n	800aa5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a860:	f107 0208 	add.w	r2, r7, #8
 800a864:	4610      	mov	r0, r2
 800a866:	4798      	blx	r3
 800a868:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	2202      	movs	r2, #2
 800a870:	701a      	strb	r2, [r3, #0]
      break;
 800a872:	e0f2      	b.n	800aa5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	885b      	ldrh	r3, [r3, #2]
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	2b05      	cmp	r3, #5
 800a87c:	f200 80ac 	bhi.w	800a9d8 <USBD_GetDescriptor+0x204>
 800a880:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <USBD_GetDescriptor+0xb4>)
 800a882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a886:	bf00      	nop
 800a888:	0800a8a1 	.word	0x0800a8a1
 800a88c:	0800a8d5 	.word	0x0800a8d5
 800a890:	0800a909 	.word	0x0800a909
 800a894:	0800a93d 	.word	0x0800a93d
 800a898:	0800a971 	.word	0x0800a971
 800a89c:	0800a9a5 	.word	0x0800a9a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00b      	beq.n	800a8c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	7c12      	ldrb	r2, [r2, #16]
 800a8b8:	f107 0108 	add.w	r1, r7, #8
 800a8bc:	4610      	mov	r0, r2
 800a8be:	4798      	blx	r3
 800a8c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8c2:	e091      	b.n	800a9e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 facb 	bl	800ae62 <USBD_CtlError>
            err++;
 800a8cc:	7afb      	ldrb	r3, [r7, #11]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8d2:	e089      	b.n	800a9e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00b      	beq.n	800a8f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	7c12      	ldrb	r2, [r2, #16]
 800a8ec:	f107 0108 	add.w	r1, r7, #8
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	4798      	blx	r3
 800a8f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8f6:	e077      	b.n	800a9e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fab1 	bl	800ae62 <USBD_CtlError>
            err++;
 800a900:	7afb      	ldrb	r3, [r7, #11]
 800a902:	3301      	adds	r3, #1
 800a904:	72fb      	strb	r3, [r7, #11]
          break;
 800a906:	e06f      	b.n	800a9e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00b      	beq.n	800a92c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	7c12      	ldrb	r2, [r2, #16]
 800a920:	f107 0108 	add.w	r1, r7, #8
 800a924:	4610      	mov	r0, r2
 800a926:	4798      	blx	r3
 800a928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a92a:	e05d      	b.n	800a9e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fa97 	bl	800ae62 <USBD_CtlError>
            err++;
 800a934:	7afb      	ldrb	r3, [r7, #11]
 800a936:	3301      	adds	r3, #1
 800a938:	72fb      	strb	r3, [r7, #11]
          break;
 800a93a:	e055      	b.n	800a9e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00b      	beq.n	800a960 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	7c12      	ldrb	r2, [r2, #16]
 800a954:	f107 0108 	add.w	r1, r7, #8
 800a958:	4610      	mov	r0, r2
 800a95a:	4798      	blx	r3
 800a95c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a95e:	e043      	b.n	800a9e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fa7d 	bl	800ae62 <USBD_CtlError>
            err++;
 800a968:	7afb      	ldrb	r3, [r7, #11]
 800a96a:	3301      	adds	r3, #1
 800a96c:	72fb      	strb	r3, [r7, #11]
          break;
 800a96e:	e03b      	b.n	800a9e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a976:	695b      	ldr	r3, [r3, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	7c12      	ldrb	r2, [r2, #16]
 800a988:	f107 0108 	add.w	r1, r7, #8
 800a98c:	4610      	mov	r0, r2
 800a98e:	4798      	blx	r3
 800a990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a992:	e029      	b.n	800a9e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fa63 	bl	800ae62 <USBD_CtlError>
            err++;
 800a99c:	7afb      	ldrb	r3, [r7, #11]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9a2:	e021      	b.n	800a9e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	7c12      	ldrb	r2, [r2, #16]
 800a9bc:	f107 0108 	add.w	r1, r7, #8
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	4798      	blx	r3
 800a9c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9c6:	e00f      	b.n	800a9e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fa49 	bl	800ae62 <USBD_CtlError>
            err++;
 800a9d0:	7afb      	ldrb	r3, [r7, #11]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9d6:	e007      	b.n	800a9e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fa41 	bl	800ae62 <USBD_CtlError>
          err++;
 800a9e0:	7afb      	ldrb	r3, [r7, #11]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a9e6:	bf00      	nop
      }
      break;
 800a9e8:	e037      	b.n	800aa5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	7c1b      	ldrb	r3, [r3, #16]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d109      	bne.n	800aa06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9fa:	f107 0208 	add.w	r2, r7, #8
 800a9fe:	4610      	mov	r0, r2
 800aa00:	4798      	blx	r3
 800aa02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa04:	e029      	b.n	800aa5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fa2a 	bl	800ae62 <USBD_CtlError>
        err++;
 800aa0e:	7afb      	ldrb	r3, [r7, #11]
 800aa10:	3301      	adds	r3, #1
 800aa12:	72fb      	strb	r3, [r7, #11]
      break;
 800aa14:	e021      	b.n	800aa5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	7c1b      	ldrb	r3, [r3, #16]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10d      	bne.n	800aa3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa26:	f107 0208 	add.w	r2, r7, #8
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	4798      	blx	r3
 800aa2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	3301      	adds	r3, #1
 800aa34:	2207      	movs	r2, #7
 800aa36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa38:	e00f      	b.n	800aa5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fa10 	bl	800ae62 <USBD_CtlError>
        err++;
 800aa42:	7afb      	ldrb	r3, [r7, #11]
 800aa44:	3301      	adds	r3, #1
 800aa46:	72fb      	strb	r3, [r7, #11]
      break;
 800aa48:	e007      	b.n	800aa5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fa08 	bl	800ae62 <USBD_CtlError>
      err++;
 800aa52:	7afb      	ldrb	r3, [r7, #11]
 800aa54:	3301      	adds	r3, #1
 800aa56:	72fb      	strb	r3, [r7, #11]
      break;
 800aa58:	bf00      	nop
  }

  if (err != 0U)
 800aa5a:	7afb      	ldrb	r3, [r7, #11]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d11e      	bne.n	800aa9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	88db      	ldrh	r3, [r3, #6]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d016      	beq.n	800aa96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aa68:	893b      	ldrh	r3, [r7, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00e      	beq.n	800aa8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	88da      	ldrh	r2, [r3, #6]
 800aa72:	893b      	ldrh	r3, [r7, #8]
 800aa74:	4293      	cmp	r3, r2
 800aa76:	bf28      	it	cs
 800aa78:	4613      	movcs	r3, r2
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa7e:	893b      	ldrh	r3, [r7, #8]
 800aa80:	461a      	mov	r2, r3
 800aa82:	68f9      	ldr	r1, [r7, #12]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fa69 	bl	800af5c <USBD_CtlSendData>
 800aa8a:	e009      	b.n	800aaa0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f9e7 	bl	800ae62 <USBD_CtlError>
 800aa94:	e004      	b.n	800aaa0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 faba 	bl	800b010 <USBD_CtlSendStatus>
 800aa9c:	e000      	b.n	800aaa0 <USBD_GetDescriptor+0x2cc>
    return;
 800aa9e:	bf00      	nop
  }
}
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop

0800aaa8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	889b      	ldrh	r3, [r3, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d131      	bne.n	800ab1e <USBD_SetAddress+0x76>
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	88db      	ldrh	r3, [r3, #6]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d12d      	bne.n	800ab1e <USBD_SetAddress+0x76>
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	885b      	ldrh	r3, [r3, #2]
 800aac6:	2b7f      	cmp	r3, #127	@ 0x7f
 800aac8:	d829      	bhi.n	800ab1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	885b      	ldrh	r3, [r3, #2]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aad4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d104      	bne.n	800aaec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f9bc 	bl	800ae62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaea:	e01d      	b.n	800ab28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	7bfa      	ldrb	r2, [r7, #15]
 800aaf0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 ff11 	bl	800b920 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fa86 	bl	800b010 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d004      	beq.n	800ab14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2202      	movs	r2, #2
 800ab0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab12:	e009      	b.n	800ab28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab1c:	e004      	b.n	800ab28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f99e 	bl	800ae62 <USBD_CtlError>
  }
}
 800ab26:	bf00      	nop
 800ab28:	bf00      	nop
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	885b      	ldrh	r3, [r3, #2]
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	4b4e      	ldr	r3, [pc, #312]	@ (800ac80 <USBD_SetConfig+0x150>)
 800ab46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab48:	4b4d      	ldr	r3, [pc, #308]	@ (800ac80 <USBD_SetConfig+0x150>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d905      	bls.n	800ab5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f985 	bl	800ae62 <USBD_CtlError>
    return USBD_FAIL;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e08c      	b.n	800ac76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d002      	beq.n	800ab6e <USBD_SetConfig+0x3e>
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d029      	beq.n	800abc0 <USBD_SetConfig+0x90>
 800ab6c:	e075      	b.n	800ac5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab6e:	4b44      	ldr	r3, [pc, #272]	@ (800ac80 <USBD_SetConfig+0x150>)
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d020      	beq.n	800abb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ab76:	4b42      	ldr	r3, [pc, #264]	@ (800ac80 <USBD_SetConfig+0x150>)
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab80:	4b3f      	ldr	r3, [pc, #252]	@ (800ac80 <USBD_SetConfig+0x150>)
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	4619      	mov	r1, r3
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7fe ffe3 	bl	8009b52 <USBD_SetClassConfig>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d008      	beq.n	800aba8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f962 	bl	800ae62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2202      	movs	r2, #2
 800aba2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aba6:	e065      	b.n	800ac74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fa31 	bl	800b010 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2203      	movs	r2, #3
 800abb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800abb6:	e05d      	b.n	800ac74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fa29 	bl	800b010 <USBD_CtlSendStatus>
      break;
 800abbe:	e059      	b.n	800ac74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800abc0:	4b2f      	ldr	r3, [pc, #188]	@ (800ac80 <USBD_SetConfig+0x150>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d112      	bne.n	800abee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2202      	movs	r2, #2
 800abcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800abd0:	4b2b      	ldr	r3, [pc, #172]	@ (800ac80 <USBD_SetConfig+0x150>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	461a      	mov	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abda:	4b29      	ldr	r3, [pc, #164]	@ (800ac80 <USBD_SetConfig+0x150>)
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7fe ffd2 	bl	8009b8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fa12 	bl	800b010 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800abec:	e042      	b.n	800ac74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800abee:	4b24      	ldr	r3, [pc, #144]	@ (800ac80 <USBD_SetConfig+0x150>)
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	461a      	mov	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d02a      	beq.n	800ac52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7fe ffc0 	bl	8009b8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ac0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ac80 <USBD_SetConfig+0x150>)
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac14:	4b1a      	ldr	r3, [pc, #104]	@ (800ac80 <USBD_SetConfig+0x150>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7fe ff99 	bl	8009b52 <USBD_SetClassConfig>
 800ac20:	4603      	mov	r3, r0
 800ac22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00f      	beq.n	800ac4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f918 	bl	800ae62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7fe ffa5 	bl	8009b8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ac48:	e014      	b.n	800ac74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f9e0 	bl	800b010 <USBD_CtlSendStatus>
      break;
 800ac50:	e010      	b.n	800ac74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f9dc 	bl	800b010 <USBD_CtlSendStatus>
      break;
 800ac58:	e00c      	b.n	800ac74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f900 	bl	800ae62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac62:	4b07      	ldr	r3, [pc, #28]	@ (800ac80 <USBD_SetConfig+0x150>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7fe ff8e 	bl	8009b8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	73fb      	strb	r3, [r7, #15]
      break;
 800ac72:	bf00      	nop
  }

  return ret;
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	200005f8 	.word	0x200005f8

0800ac84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	88db      	ldrh	r3, [r3, #6]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d004      	beq.n	800aca0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f8e2 	bl	800ae62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac9e:	e023      	b.n	800ace8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	dc02      	bgt.n	800acb2 <USBD_GetConfig+0x2e>
 800acac:	2b00      	cmp	r3, #0
 800acae:	dc03      	bgt.n	800acb8 <USBD_GetConfig+0x34>
 800acb0:	e015      	b.n	800acde <USBD_GetConfig+0x5a>
 800acb2:	2b03      	cmp	r3, #3
 800acb4:	d00b      	beq.n	800acce <USBD_GetConfig+0x4a>
 800acb6:	e012      	b.n	800acde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3308      	adds	r3, #8
 800acc2:	2201      	movs	r2, #1
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f948 	bl	800af5c <USBD_CtlSendData>
        break;
 800accc:	e00c      	b.n	800ace8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3304      	adds	r3, #4
 800acd2:	2201      	movs	r2, #1
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f940 	bl	800af5c <USBD_CtlSendData>
        break;
 800acdc:	e004      	b.n	800ace8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f8be 	bl	800ae62 <USBD_CtlError>
        break;
 800ace6:	bf00      	nop
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	3b01      	subs	r3, #1
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d81e      	bhi.n	800ad46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	88db      	ldrh	r3, [r3, #6]
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d004      	beq.n	800ad1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 f8a5 	bl	800ae62 <USBD_CtlError>
        break;
 800ad18:	e01a      	b.n	800ad50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d005      	beq.n	800ad36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	f043 0202 	orr.w	r2, r3, #2
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	330c      	adds	r3, #12
 800ad3a:	2202      	movs	r2, #2
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f90c 	bl	800af5c <USBD_CtlSendData>
      break;
 800ad44:	e004      	b.n	800ad50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f88a 	bl	800ae62 <USBD_CtlError>
      break;
 800ad4e:	bf00      	nop
  }
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	885b      	ldrh	r3, [r3, #2]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d107      	bne.n	800ad7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f94c 	bl	800b010 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ad78:	e013      	b.n	800ada2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	885b      	ldrh	r3, [r3, #2]
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d10b      	bne.n	800ad9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	889b      	ldrh	r3, [r3, #4]
 800ad86:	0a1b      	lsrs	r3, r3, #8
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f93c 	bl	800b010 <USBD_CtlSendStatus>
}
 800ad98:	e003      	b.n	800ada2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f860 	bl	800ae62 <USBD_CtlError>
}
 800ada2:	bf00      	nop
 800ada4:	3708      	adds	r7, #8
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	3b01      	subs	r3, #1
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d80b      	bhi.n	800adda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	885b      	ldrh	r3, [r3, #2]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d10c      	bne.n	800ade4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f91c 	bl	800b010 <USBD_CtlSendStatus>
      }
      break;
 800add8:	e004      	b.n	800ade4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f840 	bl	800ae62 <USBD_CtlError>
      break;
 800ade2:	e000      	b.n	800ade6 <USBD_ClrFeature+0x3c>
      break;
 800ade4:	bf00      	nop
  }
}
 800ade6:	bf00      	nop
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	781a      	ldrb	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	3301      	adds	r3, #1
 800ae08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	781a      	ldrb	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	3301      	adds	r3, #1
 800ae16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f7ff fa40 	bl	800a29e <SWAPBYTE>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	461a      	mov	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f7ff fa33 	bl	800a29e <SWAPBYTE>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	3301      	adds	r3, #1
 800ae44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f7ff fa26 	bl	800a29e <SWAPBYTE>
 800ae52:	4603      	mov	r3, r0
 800ae54:	461a      	mov	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	80da      	strh	r2, [r3, #6]
}
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae6c:	2180      	movs	r1, #128	@ 0x80
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fcec 	bl	800b84c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae74:	2100      	movs	r1, #0
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fce8 	bl	800b84c <USBD_LL_StallEP>
}
 800ae7c:	bf00      	nop
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae90:	2300      	movs	r3, #0
 800ae92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d042      	beq.n	800af20 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ae9e:	6938      	ldr	r0, [r7, #16]
 800aea0:	f000 f842 	bl	800af28 <USBD_GetLen>
 800aea4:	4603      	mov	r3, r0
 800aea6:	3301      	adds	r3, #1
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeae:	d808      	bhi.n	800aec2 <USBD_GetString+0x3e>
 800aeb0:	6938      	ldr	r0, [r7, #16]
 800aeb2:	f000 f839 	bl	800af28 <USBD_GetLen>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	3301      	adds	r3, #1
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	005b      	lsls	r3, r3, #1
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	e001      	b.n	800aec6 <USBD_GetString+0x42>
 800aec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	4413      	add	r3, r2
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	7812      	ldrb	r2, [r2, #0]
 800aed4:	701a      	strb	r2, [r3, #0]
  idx++;
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	3301      	adds	r3, #1
 800aeda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aedc:	7dfb      	ldrb	r3, [r7, #23]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	4413      	add	r3, r2
 800aee2:	2203      	movs	r2, #3
 800aee4:	701a      	strb	r2, [r3, #0]
  idx++;
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
 800aee8:	3301      	adds	r3, #1
 800aeea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aeec:	e013      	b.n	800af16 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	4413      	add	r3, r2
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	7812      	ldrb	r2, [r2, #0]
 800aef8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	3301      	adds	r3, #1
 800aefe:	613b      	str	r3, [r7, #16]
    idx++;
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	3301      	adds	r3, #1
 800af04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af06:	7dfb      	ldrb	r3, [r7, #23]
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	4413      	add	r3, r2
 800af0c:	2200      	movs	r2, #0
 800af0e:	701a      	strb	r2, [r3, #0]
    idx++;
 800af10:	7dfb      	ldrb	r3, [r7, #23]
 800af12:	3301      	adds	r3, #1
 800af14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1e7      	bne.n	800aeee <USBD_GetString+0x6a>
 800af1e:	e000      	b.n	800af22 <USBD_GetString+0x9e>
    return;
 800af20:	bf00      	nop
  }
}
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af38:	e005      	b.n	800af46 <USBD_GetLen+0x1e>
  {
    len++;
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	3301      	adds	r3, #1
 800af3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	3301      	adds	r3, #1
 800af44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1f5      	bne.n	800af3a <USBD_GetLen+0x12>
  }

  return len;
 800af4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2202      	movs	r2, #2
 800af6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	2100      	movs	r1, #0
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f000 fceb 	bl	800b95e <USBD_LL_Transmit>

  return USBD_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	60f8      	str	r0, [r7, #12]
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	2100      	movs	r1, #0
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 fcda 	bl	800b95e <USBD_LL_Transmit>

  return USBD_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2203      	movs	r2, #3
 800afc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	2100      	movs	r1, #0
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f000 fcde 	bl	800b9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b084      	sub	sp, #16
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	2100      	movs	r1, #0
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f000 fccd 	bl	800b9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2204      	movs	r2, #4
 800b01c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b020:	2300      	movs	r3, #0
 800b022:	2200      	movs	r2, #0
 800b024:	2100      	movs	r1, #0
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fc99 	bl	800b95e <USBD_LL_Transmit>

  return USBD_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2205      	movs	r2, #5
 800b042:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b046:	2300      	movs	r3, #0
 800b048:	2200      	movs	r2, #0
 800b04a:	2100      	movs	r1, #0
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fca7 	bl	800b9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b060:	2200      	movs	r2, #0
 800b062:	4912      	ldr	r1, [pc, #72]	@ (800b0ac <MX_USB_DEVICE_Init+0x50>)
 800b064:	4812      	ldr	r0, [pc, #72]	@ (800b0b0 <MX_USB_DEVICE_Init+0x54>)
 800b066:	f7fe fcf7 	bl	8009a58 <USBD_Init>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b070:	f7f7 fffc 	bl	800306c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b074:	490f      	ldr	r1, [pc, #60]	@ (800b0b4 <MX_USB_DEVICE_Init+0x58>)
 800b076:	480e      	ldr	r0, [pc, #56]	@ (800b0b0 <MX_USB_DEVICE_Init+0x54>)
 800b078:	f7fe fd1e 	bl	8009ab8 <USBD_RegisterClass>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b082:	f7f7 fff3 	bl	800306c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b086:	490c      	ldr	r1, [pc, #48]	@ (800b0b8 <MX_USB_DEVICE_Init+0x5c>)
 800b088:	4809      	ldr	r0, [pc, #36]	@ (800b0b0 <MX_USB_DEVICE_Init+0x54>)
 800b08a:	f7fe fc15 	bl	80098b8 <USBD_CDC_RegisterInterface>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b094:	f7f7 ffea 	bl	800306c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b098:	4805      	ldr	r0, [pc, #20]	@ (800b0b0 <MX_USB_DEVICE_Init+0x54>)
 800b09a:	f7fe fd43 	bl	8009b24 <USBD_Start>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d001      	beq.n	800b0a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b0a4:	f7f7 ffe2 	bl	800306c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b0a8:	bf00      	nop
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	200000d8 	.word	0x200000d8
 800b0b0:	200005fc 	.word	0x200005fc
 800b0b4:	20000044 	.word	0x20000044
 800b0b8:	200000c4 	.word	0x200000c4

0800b0bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4905      	ldr	r1, [pc, #20]	@ (800b0d8 <CDC_Init_FS+0x1c>)
 800b0c4:	4805      	ldr	r0, [pc, #20]	@ (800b0dc <CDC_Init_FS+0x20>)
 800b0c6:	f7fe fc11 	bl	80098ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b0ca:	4905      	ldr	r1, [pc, #20]	@ (800b0e0 <CDC_Init_FS+0x24>)
 800b0cc:	4803      	ldr	r0, [pc, #12]	@ (800b0dc <CDC_Init_FS+0x20>)
 800b0ce:	f7fe fc2f 	bl	8009930 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b0d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	200010d8 	.word	0x200010d8
 800b0dc:	200005fc 	.word	0x200005fc
 800b0e0:	200008d8 	.word	0x200008d8

0800b0e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b0e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	6039      	str	r1, [r7, #0]
 800b0fe:	71fb      	strb	r3, [r7, #7]
 800b100:	4613      	mov	r3, r2
 800b102:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b104:	79fb      	ldrb	r3, [r7, #7]
 800b106:	2b23      	cmp	r3, #35	@ 0x23
 800b108:	d84a      	bhi.n	800b1a0 <CDC_Control_FS+0xac>
 800b10a:	a201      	add	r2, pc, #4	@ (adr r2, 800b110 <CDC_Control_FS+0x1c>)
 800b10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b110:	0800b1a1 	.word	0x0800b1a1
 800b114:	0800b1a1 	.word	0x0800b1a1
 800b118:	0800b1a1 	.word	0x0800b1a1
 800b11c:	0800b1a1 	.word	0x0800b1a1
 800b120:	0800b1a1 	.word	0x0800b1a1
 800b124:	0800b1a1 	.word	0x0800b1a1
 800b128:	0800b1a1 	.word	0x0800b1a1
 800b12c:	0800b1a1 	.word	0x0800b1a1
 800b130:	0800b1a1 	.word	0x0800b1a1
 800b134:	0800b1a1 	.word	0x0800b1a1
 800b138:	0800b1a1 	.word	0x0800b1a1
 800b13c:	0800b1a1 	.word	0x0800b1a1
 800b140:	0800b1a1 	.word	0x0800b1a1
 800b144:	0800b1a1 	.word	0x0800b1a1
 800b148:	0800b1a1 	.word	0x0800b1a1
 800b14c:	0800b1a1 	.word	0x0800b1a1
 800b150:	0800b1a1 	.word	0x0800b1a1
 800b154:	0800b1a1 	.word	0x0800b1a1
 800b158:	0800b1a1 	.word	0x0800b1a1
 800b15c:	0800b1a1 	.word	0x0800b1a1
 800b160:	0800b1a1 	.word	0x0800b1a1
 800b164:	0800b1a1 	.word	0x0800b1a1
 800b168:	0800b1a1 	.word	0x0800b1a1
 800b16c:	0800b1a1 	.word	0x0800b1a1
 800b170:	0800b1a1 	.word	0x0800b1a1
 800b174:	0800b1a1 	.word	0x0800b1a1
 800b178:	0800b1a1 	.word	0x0800b1a1
 800b17c:	0800b1a1 	.word	0x0800b1a1
 800b180:	0800b1a1 	.word	0x0800b1a1
 800b184:	0800b1a1 	.word	0x0800b1a1
 800b188:	0800b1a1 	.word	0x0800b1a1
 800b18c:	0800b1a1 	.word	0x0800b1a1
 800b190:	0800b1a1 	.word	0x0800b1a1
 800b194:	0800b1a1 	.word	0x0800b1a1
 800b198:	0800b1a1 	.word	0x0800b1a1
 800b19c:	0800b1a1 	.word	0x0800b1a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b1a0:	bf00      	nop
  }

  return (USBD_OK);
 800b1a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	4805      	ldr	r0, [pc, #20]	@ (800b1d4 <CDC_Receive_FS+0x24>)
 800b1be:	f7fe fbb7 	bl	8009930 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b1c2:	4804      	ldr	r0, [pc, #16]	@ (800b1d4 <CDC_Receive_FS+0x24>)
 800b1c4:	f7fe fc12 	bl	80099ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b1c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	200005fc 	.word	0x200005fc

0800b1d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b1e8:	4b0d      	ldr	r3, [pc, #52]	@ (800b220 <CDC_Transmit_FS+0x48>)
 800b1ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e00b      	b.n	800b216 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b1fe:	887b      	ldrh	r3, [r7, #2]
 800b200:	461a      	mov	r2, r3
 800b202:	6879      	ldr	r1, [r7, #4]
 800b204:	4806      	ldr	r0, [pc, #24]	@ (800b220 <CDC_Transmit_FS+0x48>)
 800b206:	f7fe fb71 	bl	80098ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b20a:	4805      	ldr	r0, [pc, #20]	@ (800b220 <CDC_Transmit_FS+0x48>)
 800b20c:	f7fe fbae 	bl	800996c <USBD_CDC_TransmitPacket>
 800b210:	4603      	mov	r3, r0
 800b212:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b214:	7bfb      	ldrb	r3, [r7, #15]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	200005fc 	.word	0x200005fc

0800b224 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	4613      	mov	r3, r2
 800b230:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	371c      	adds	r7, #28
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
	...

0800b248 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	6039      	str	r1, [r7, #0]
 800b252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	2212      	movs	r2, #18
 800b258:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b25a:	4b03      	ldr	r3, [pc, #12]	@ (800b268 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	200000f4 	.word	0x200000f4

0800b26c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	4603      	mov	r3, r0
 800b274:	6039      	str	r1, [r7, #0]
 800b276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	2204      	movs	r2, #4
 800b27c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b27e:	4b03      	ldr	r3, [pc, #12]	@ (800b28c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b280:	4618      	mov	r0, r3
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	20000108 	.word	0x20000108

0800b290 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	6039      	str	r1, [r7, #0]
 800b29a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b29c:	79fb      	ldrb	r3, [r7, #7]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d105      	bne.n	800b2ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	4907      	ldr	r1, [pc, #28]	@ (800b2c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b2a6:	4808      	ldr	r0, [pc, #32]	@ (800b2c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2a8:	f7ff fdec 	bl	800ae84 <USBD_GetString>
 800b2ac:	e004      	b.n	800b2b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	4904      	ldr	r1, [pc, #16]	@ (800b2c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b2b2:	4805      	ldr	r0, [pc, #20]	@ (800b2c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2b4:	f7ff fde6 	bl	800ae84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2b8:	4b02      	ldr	r3, [pc, #8]	@ (800b2c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	200018d8 	.word	0x200018d8
 800b2c8:	08010d78 	.word	0x08010d78

0800b2cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	6039      	str	r1, [r7, #0]
 800b2d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	4904      	ldr	r1, [pc, #16]	@ (800b2ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2dc:	4804      	ldr	r0, [pc, #16]	@ (800b2f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2de:	f7ff fdd1 	bl	800ae84 <USBD_GetString>
  return USBD_StrDesc;
 800b2e2:	4b02      	ldr	r3, [pc, #8]	@ (800b2ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	200018d8 	.word	0x200018d8
 800b2f0:	08010d90 	.word	0x08010d90

0800b2f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	6039      	str	r1, [r7, #0]
 800b2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	221a      	movs	r2, #26
 800b304:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b306:	f000 f843 	bl	800b390 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b30a:	4b02      	ldr	r3, [pc, #8]	@ (800b314 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	2000010c 	.word	0x2000010c

0800b318 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	4603      	mov	r3, r0
 800b320:	6039      	str	r1, [r7, #0]
 800b322:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b324:	79fb      	ldrb	r3, [r7, #7]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d105      	bne.n	800b336 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	4907      	ldr	r1, [pc, #28]	@ (800b34c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b32e:	4808      	ldr	r0, [pc, #32]	@ (800b350 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b330:	f7ff fda8 	bl	800ae84 <USBD_GetString>
 800b334:	e004      	b.n	800b340 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	4904      	ldr	r1, [pc, #16]	@ (800b34c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b33a:	4805      	ldr	r0, [pc, #20]	@ (800b350 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b33c:	f7ff fda2 	bl	800ae84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b340:	4b02      	ldr	r3, [pc, #8]	@ (800b34c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b342:	4618      	mov	r0, r3
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	200018d8 	.word	0x200018d8
 800b350:	08010da4 	.word	0x08010da4

0800b354 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	6039      	str	r1, [r7, #0]
 800b35e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b360:	79fb      	ldrb	r3, [r7, #7]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d105      	bne.n	800b372 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	4907      	ldr	r1, [pc, #28]	@ (800b388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b36a:	4808      	ldr	r0, [pc, #32]	@ (800b38c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b36c:	f7ff fd8a 	bl	800ae84 <USBD_GetString>
 800b370:	e004      	b.n	800b37c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	4904      	ldr	r1, [pc, #16]	@ (800b388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b376:	4805      	ldr	r0, [pc, #20]	@ (800b38c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b378:	f7ff fd84 	bl	800ae84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b37c:	4b02      	ldr	r3, [pc, #8]	@ (800b388 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	200018d8 	.word	0x200018d8
 800b38c:	08010db0 	.word	0x08010db0

0800b390 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b396:	4b0f      	ldr	r3, [pc, #60]	@ (800b3d4 <Get_SerialNum+0x44>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b39c:	4b0e      	ldr	r3, [pc, #56]	@ (800b3d8 <Get_SerialNum+0x48>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b3dc <Get_SerialNum+0x4c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3b6:	2208      	movs	r2, #8
 800b3b8:	4909      	ldr	r1, [pc, #36]	@ (800b3e0 <Get_SerialNum+0x50>)
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f000 f814 	bl	800b3e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3c0:	2204      	movs	r2, #4
 800b3c2:	4908      	ldr	r1, [pc, #32]	@ (800b3e4 <Get_SerialNum+0x54>)
 800b3c4:	68b8      	ldr	r0, [r7, #8]
 800b3c6:	f000 f80f 	bl	800b3e8 <IntToUnicode>
  }
}
 800b3ca:	bf00      	nop
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	1fff7a10 	.word	0x1fff7a10
 800b3d8:	1fff7a14 	.word	0x1fff7a14
 800b3dc:	1fff7a18 	.word	0x1fff7a18
 800b3e0:	2000010e 	.word	0x2000010e
 800b3e4:	2000011e 	.word	0x2000011e

0800b3e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	75fb      	strb	r3, [r7, #23]
 800b3fe:	e027      	b.n	800b450 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	0f1b      	lsrs	r3, r3, #28
 800b404:	2b09      	cmp	r3, #9
 800b406:	d80b      	bhi.n	800b420 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	0f1b      	lsrs	r3, r3, #28
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
 800b410:	005b      	lsls	r3, r3, #1
 800b412:	4619      	mov	r1, r3
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	440b      	add	r3, r1
 800b418:	3230      	adds	r2, #48	@ 0x30
 800b41a:	b2d2      	uxtb	r2, r2
 800b41c:	701a      	strb	r2, [r3, #0]
 800b41e:	e00a      	b.n	800b436 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	0f1b      	lsrs	r3, r3, #28
 800b424:	b2da      	uxtb	r2, r3
 800b426:	7dfb      	ldrb	r3, [r7, #23]
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	4619      	mov	r1, r3
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	440b      	add	r3, r1
 800b430:	3237      	adds	r2, #55	@ 0x37
 800b432:	b2d2      	uxtb	r2, r2
 800b434:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	011b      	lsls	r3, r3, #4
 800b43a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	3301      	adds	r3, #1
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	4413      	add	r3, r2
 800b446:	2200      	movs	r2, #0
 800b448:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	3301      	adds	r3, #1
 800b44e:	75fb      	strb	r3, [r7, #23]
 800b450:	7dfa      	ldrb	r2, [r7, #23]
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	429a      	cmp	r2, r3
 800b456:	d3d3      	bcc.n	800b400 <IntToUnicode+0x18>
  }
}
 800b458:	bf00      	nop
 800b45a:	bf00      	nop
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
	...

0800b468 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08a      	sub	sp, #40	@ 0x28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b470:	f107 0314 	add.w	r3, r7, #20
 800b474:	2200      	movs	r2, #0
 800b476:	601a      	str	r2, [r3, #0]
 800b478:	605a      	str	r2, [r3, #4]
 800b47a:	609a      	str	r2, [r3, #8]
 800b47c:	60da      	str	r2, [r3, #12]
 800b47e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b488:	d13a      	bne.n	800b500 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b48a:	2300      	movs	r3, #0
 800b48c:	613b      	str	r3, [r7, #16]
 800b48e:	4b1e      	ldr	r3, [pc, #120]	@ (800b508 <HAL_PCD_MspInit+0xa0>)
 800b490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b492:	4a1d      	ldr	r2, [pc, #116]	@ (800b508 <HAL_PCD_MspInit+0xa0>)
 800b494:	f043 0301 	orr.w	r3, r3, #1
 800b498:	6313      	str	r3, [r2, #48]	@ 0x30
 800b49a:	4b1b      	ldr	r3, [pc, #108]	@ (800b508 <HAL_PCD_MspInit+0xa0>)
 800b49c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	613b      	str	r3, [r7, #16]
 800b4a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b4a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b4aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b4b8:	230a      	movs	r3, #10
 800b4ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4bc:	f107 0314 	add.w	r3, r7, #20
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4812      	ldr	r0, [pc, #72]	@ (800b50c <HAL_PCD_MspInit+0xa4>)
 800b4c4:	f7f8 fdc8 	bl	8004058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b508 <HAL_PCD_MspInit+0xa0>)
 800b4ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4cc:	4a0e      	ldr	r2, [pc, #56]	@ (800b508 <HAL_PCD_MspInit+0xa0>)
 800b4ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4d2:	6353      	str	r3, [r2, #52]	@ 0x34
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	60fb      	str	r3, [r7, #12]
 800b4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b508 <HAL_PCD_MspInit+0xa0>)
 800b4da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4dc:	4a0a      	ldr	r2, [pc, #40]	@ (800b508 <HAL_PCD_MspInit+0xa0>)
 800b4de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b4e2:	6453      	str	r3, [r2, #68]	@ 0x44
 800b4e4:	4b08      	ldr	r3, [pc, #32]	@ (800b508 <HAL_PCD_MspInit+0xa0>)
 800b4e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	2043      	movs	r0, #67	@ 0x43
 800b4f6:	f7f8 f9e6 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b4fa:	2043      	movs	r0, #67	@ 0x43
 800b4fc:	f7f8 f9ff 	bl	80038fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b500:	bf00      	nop
 800b502:	3728      	adds	r7, #40	@ 0x28
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	40023800 	.word	0x40023800
 800b50c:	40020000 	.word	0x40020000

0800b510 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b524:	4619      	mov	r1, r3
 800b526:	4610      	mov	r0, r2
 800b528:	f7fe fb49 	bl	8009bbe <USBD_LL_SetupStage>
}
 800b52c:	bf00      	nop
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	460b      	mov	r3, r1
 800b53e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b546:	78fa      	ldrb	r2, [r7, #3]
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4613      	mov	r3, r2
 800b54c:	00db      	lsls	r3, r3, #3
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	78fb      	ldrb	r3, [r7, #3]
 800b55c:	4619      	mov	r1, r3
 800b55e:	f7fe fb83 	bl	8009c68 <USBD_LL_DataOutStage>
}
 800b562:	bf00      	nop
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b082      	sub	sp, #8
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
 800b572:	460b      	mov	r3, r1
 800b574:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b57c:	78fa      	ldrb	r2, [r7, #3]
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	4613      	mov	r3, r2
 800b582:	00db      	lsls	r3, r3, #3
 800b584:	4413      	add	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	440b      	add	r3, r1
 800b58a:	3320      	adds	r3, #32
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	78fb      	ldrb	r3, [r7, #3]
 800b590:	4619      	mov	r1, r3
 800b592:	f7fe fc1c 	bl	8009dce <USBD_LL_DataInStage>
}
 800b596:	bf00      	nop
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b082      	sub	sp, #8
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fe fd56 	bl	800a05e <USBD_LL_SOF>
}
 800b5b2:	bf00      	nop
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b084      	sub	sp, #16
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	79db      	ldrb	r3, [r3, #7]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d102      	bne.n	800b5d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	73fb      	strb	r3, [r7, #15]
 800b5d2:	e008      	b.n	800b5e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	79db      	ldrb	r3, [r3, #7]
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d102      	bne.n	800b5e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	73fb      	strb	r3, [r7, #15]
 800b5e0:	e001      	b.n	800b5e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b5e2:	f7f7 fd43 	bl	800306c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b5ec:	7bfa      	ldrb	r2, [r7, #15]
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe fcf0 	bl	8009fd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe fc98 	bl	8009f32 <USBD_LL_Reset>
}
 800b602:	bf00      	nop
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
	...

0800b60c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fceb 	bl	8009ff6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	6812      	ldr	r2, [r2, #0]
 800b62e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b632:	f043 0301 	orr.w	r3, r3, #1
 800b636:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	7adb      	ldrb	r3, [r3, #11]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d005      	beq.n	800b64c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b640:	4b04      	ldr	r3, [pc, #16]	@ (800b654 <HAL_PCD_SuspendCallback+0x48>)
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	4a03      	ldr	r2, [pc, #12]	@ (800b654 <HAL_PCD_SuspendCallback+0x48>)
 800b646:	f043 0306 	orr.w	r3, r3, #6
 800b64a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	e000ed00 	.word	0xe000ed00

0800b658 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b666:	4618      	mov	r0, r3
 800b668:	f7fe fce1 	bl	800a02e <USBD_LL_Resume>
}
 800b66c:	bf00      	nop
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	460b      	mov	r3, r1
 800b67e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b686:	78fa      	ldrb	r2, [r7, #3]
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fd39 	bl	800a102 <USBD_LL_IsoOUTIncomplete>
}
 800b690:	bf00      	nop
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b6aa:	78fa      	ldrb	r2, [r7, #3]
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe fcf5 	bl	800a09e <USBD_LL_IsoINIncomplete>
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fd4b 	bl	800a166 <USBD_LL_DevConnected>
}
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fe fd48 	bl	800a17c <USBD_LL_DevDisconnected>
}
 800b6ec:	bf00      	nop
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d13c      	bne.n	800b77e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b704:	4a20      	ldr	r2, [pc, #128]	@ (800b788 <USBD_LL_Init+0x94>)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a1e      	ldr	r2, [pc, #120]	@ (800b788 <USBD_LL_Init+0x94>)
 800b710:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b714:	4b1c      	ldr	r3, [pc, #112]	@ (800b788 <USBD_LL_Init+0x94>)
 800b716:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b71a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b71c:	4b1a      	ldr	r3, [pc, #104]	@ (800b788 <USBD_LL_Init+0x94>)
 800b71e:	2204      	movs	r2, #4
 800b720:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b722:	4b19      	ldr	r3, [pc, #100]	@ (800b788 <USBD_LL_Init+0x94>)
 800b724:	2202      	movs	r2, #2
 800b726:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b728:	4b17      	ldr	r3, [pc, #92]	@ (800b788 <USBD_LL_Init+0x94>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b72e:	4b16      	ldr	r3, [pc, #88]	@ (800b788 <USBD_LL_Init+0x94>)
 800b730:	2202      	movs	r2, #2
 800b732:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b734:	4b14      	ldr	r3, [pc, #80]	@ (800b788 <USBD_LL_Init+0x94>)
 800b736:	2200      	movs	r2, #0
 800b738:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b73a:	4b13      	ldr	r3, [pc, #76]	@ (800b788 <USBD_LL_Init+0x94>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b740:	4b11      	ldr	r3, [pc, #68]	@ (800b788 <USBD_LL_Init+0x94>)
 800b742:	2200      	movs	r2, #0
 800b744:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b746:	4b10      	ldr	r3, [pc, #64]	@ (800b788 <USBD_LL_Init+0x94>)
 800b748:	2200      	movs	r2, #0
 800b74a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b74c:	4b0e      	ldr	r3, [pc, #56]	@ (800b788 <USBD_LL_Init+0x94>)
 800b74e:	2200      	movs	r2, #0
 800b750:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b752:	480d      	ldr	r0, [pc, #52]	@ (800b788 <USBD_LL_Init+0x94>)
 800b754:	f7f8 fe68 	bl	8004428 <HAL_PCD_Init>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b75e:	f7f7 fc85 	bl	800306c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b762:	2180      	movs	r1, #128	@ 0x80
 800b764:	4808      	ldr	r0, [pc, #32]	@ (800b788 <USBD_LL_Init+0x94>)
 800b766:	f7fa f894 	bl	8005892 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b76a:	2240      	movs	r2, #64	@ 0x40
 800b76c:	2100      	movs	r1, #0
 800b76e:	4806      	ldr	r0, [pc, #24]	@ (800b788 <USBD_LL_Init+0x94>)
 800b770:	f7fa f848 	bl	8005804 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b774:	2280      	movs	r2, #128	@ 0x80
 800b776:	2101      	movs	r1, #1
 800b778:	4803      	ldr	r0, [pc, #12]	@ (800b788 <USBD_LL_Init+0x94>)
 800b77a:	f7fa f843 	bl	8005804 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	20001ad8 	.word	0x20001ad8

0800b78c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b794:	2300      	movs	r3, #0
 800b796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7f8 ff4f 	bl	8004646 <HAL_PCD_Start>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 f942 	bl	800ba38 <USBD_Get_USB_Status>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	4608      	mov	r0, r1
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	70fb      	strb	r3, [r7, #3]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70bb      	strb	r3, [r7, #2]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b7ea:	78bb      	ldrb	r3, [r7, #2]
 800b7ec:	883a      	ldrh	r2, [r7, #0]
 800b7ee:	78f9      	ldrb	r1, [r7, #3]
 800b7f0:	f7f9 fc23 	bl	800503a <HAL_PCD_EP_Open>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 f91c 	bl	800ba38 <USBD_Get_USB_Status>
 800b800:	4603      	mov	r3, r0
 800b802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b804:	7bbb      	ldrb	r3, [r7, #14]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	460b      	mov	r3, r1
 800b818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b828:	78fa      	ldrb	r2, [r7, #3]
 800b82a:	4611      	mov	r1, r2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7f9 fc6e 	bl	800510e <HAL_PCD_EP_Close>
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 f8fd 	bl	800ba38 <USBD_Get_USB_Status>
 800b83e:	4603      	mov	r3, r0
 800b840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b842:	7bbb      	ldrb	r3, [r7, #14]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	460b      	mov	r3, r1
 800b856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b858:	2300      	movs	r3, #0
 800b85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b866:	78fa      	ldrb	r2, [r7, #3]
 800b868:	4611      	mov	r1, r2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7f9 fd26 	bl	80052bc <HAL_PCD_EP_SetStall>
 800b870:	4603      	mov	r3, r0
 800b872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b874:	7bfb      	ldrb	r3, [r7, #15]
 800b876:	4618      	mov	r0, r3
 800b878:	f000 f8de 	bl	800ba38 <USBD_Get_USB_Status>
 800b87c:	4603      	mov	r3, r0
 800b87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b880:	7bbb      	ldrb	r3, [r7, #14]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b084      	sub	sp, #16
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	460b      	mov	r3, r1
 800b894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b896:	2300      	movs	r3, #0
 800b898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b89a:	2300      	movs	r3, #0
 800b89c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8a4:	78fa      	ldrb	r2, [r7, #3]
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7f9 fd6a 	bl	8005382 <HAL_PCD_EP_ClrStall>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f000 f8bf 	bl	800ba38 <USBD_Get_USB_Status>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da0b      	bge.n	800b8fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8e4:	78fb      	ldrb	r3, [r7, #3]
 800b8e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8ea:	68f9      	ldr	r1, [r7, #12]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	00db      	lsls	r3, r3, #3
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	440b      	add	r3, r1
 800b8f6:	3316      	adds	r3, #22
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	e00b      	b.n	800b914 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b8fc:	78fb      	ldrb	r3, [r7, #3]
 800b8fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b902:	68f9      	ldr	r1, [r7, #12]
 800b904:	4613      	mov	r3, r2
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	4413      	add	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	440b      	add	r3, r1
 800b90e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b912:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b914:	4618      	mov	r0, r3
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b93a:	78fa      	ldrb	r2, [r7, #3]
 800b93c:	4611      	mov	r1, r2
 800b93e:	4618      	mov	r0, r3
 800b940:	f7f9 fb57 	bl	8004ff2 <HAL_PCD_SetAddress>
 800b944:	4603      	mov	r3, r0
 800b946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f874 	bl	800ba38 <USBD_Get_USB_Status>
 800b950:	4603      	mov	r3, r0
 800b952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b954:	7bbb      	ldrb	r3, [r7, #14]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b086      	sub	sp, #24
 800b962:	af00      	add	r7, sp, #0
 800b964:	60f8      	str	r0, [r7, #12]
 800b966:	607a      	str	r2, [r7, #4]
 800b968:	603b      	str	r3, [r7, #0]
 800b96a:	460b      	mov	r3, r1
 800b96c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b96e:	2300      	movs	r3, #0
 800b970:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b97c:	7af9      	ldrb	r1, [r7, #11]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	f7f9 fc61 	bl	8005248 <HAL_PCD_EP_Transmit>
 800b986:	4603      	mov	r3, r0
 800b988:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 f853 	bl	800ba38 <USBD_Get_USB_Status>
 800b992:	4603      	mov	r3, r0
 800b994:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b996:	7dbb      	ldrb	r3, [r7, #22]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3718      	adds	r7, #24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	607a      	str	r2, [r7, #4]
 800b9aa:	603b      	str	r3, [r7, #0]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b9be:	7af9      	ldrb	r1, [r7, #11]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	f7f9 fbed 	bl	80051a2 <HAL_PCD_EP_Receive>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9cc:	7dfb      	ldrb	r3, [r7, #23]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 f832 	bl	800ba38 <USBD_Get_USB_Status>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9f4:	78fa      	ldrb	r2, [r7, #3]
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7f9 fc0d 	bl	8005218 <HAL_PCD_EP_GetRxCount>
 800b9fe:	4603      	mov	r3, r0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ba10:	4b03      	ldr	r3, [pc, #12]	@ (800ba20 <USBD_static_malloc+0x18>)
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	20001fbc 	.word	0x20001fbc

0800ba24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]

}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d817      	bhi.n	800ba7c <USBD_Get_USB_Status+0x44>
 800ba4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ba54 <USBD_Get_USB_Status+0x1c>)
 800ba4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba52:	bf00      	nop
 800ba54:	0800ba65 	.word	0x0800ba65
 800ba58:	0800ba6b 	.word	0x0800ba6b
 800ba5c:	0800ba71 	.word	0x0800ba71
 800ba60:	0800ba77 	.word	0x0800ba77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	73fb      	strb	r3, [r7, #15]
    break;
 800ba68:	e00b      	b.n	800ba82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba6e:	e008      	b.n	800ba82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba70:	2301      	movs	r3, #1
 800ba72:	73fb      	strb	r3, [r7, #15]
    break;
 800ba74:	e005      	b.n	800ba82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba76:	2303      	movs	r3, #3
 800ba78:	73fb      	strb	r3, [r7, #15]
    break;
 800ba7a:	e002      	b.n	800ba82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba80:	bf00      	nop
  }
  return usb_status;
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <__cvt>:
 800ba90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba94:	ec57 6b10 	vmov	r6, r7, d0
 800ba98:	2f00      	cmp	r7, #0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	463b      	mov	r3, r7
 800baa0:	bfbb      	ittet	lt
 800baa2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800baa6:	461f      	movlt	r7, r3
 800baa8:	2300      	movge	r3, #0
 800baaa:	232d      	movlt	r3, #45	@ 0x2d
 800baac:	700b      	strb	r3, [r1, #0]
 800baae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bab0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bab4:	4691      	mov	r9, r2
 800bab6:	f023 0820 	bic.w	r8, r3, #32
 800baba:	bfbc      	itt	lt
 800babc:	4632      	movlt	r2, r6
 800babe:	4616      	movlt	r6, r2
 800bac0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bac4:	d005      	beq.n	800bad2 <__cvt+0x42>
 800bac6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800baca:	d100      	bne.n	800bace <__cvt+0x3e>
 800bacc:	3401      	adds	r4, #1
 800bace:	2102      	movs	r1, #2
 800bad0:	e000      	b.n	800bad4 <__cvt+0x44>
 800bad2:	2103      	movs	r1, #3
 800bad4:	ab03      	add	r3, sp, #12
 800bad6:	9301      	str	r3, [sp, #4]
 800bad8:	ab02      	add	r3, sp, #8
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	ec47 6b10 	vmov	d0, r6, r7
 800bae0:	4653      	mov	r3, sl
 800bae2:	4622      	mov	r2, r4
 800bae4:	f000 fe78 	bl	800c7d8 <_dtoa_r>
 800bae8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800baec:	4605      	mov	r5, r0
 800baee:	d119      	bne.n	800bb24 <__cvt+0x94>
 800baf0:	f019 0f01 	tst.w	r9, #1
 800baf4:	d00e      	beq.n	800bb14 <__cvt+0x84>
 800baf6:	eb00 0904 	add.w	r9, r0, r4
 800bafa:	2200      	movs	r2, #0
 800bafc:	2300      	movs	r3, #0
 800bafe:	4630      	mov	r0, r6
 800bb00:	4639      	mov	r1, r7
 800bb02:	f7f4 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb06:	b108      	cbz	r0, 800bb0c <__cvt+0x7c>
 800bb08:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb0c:	2230      	movs	r2, #48	@ 0x30
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	454b      	cmp	r3, r9
 800bb12:	d31e      	bcc.n	800bb52 <__cvt+0xc2>
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb18:	1b5b      	subs	r3, r3, r5
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	b004      	add	sp, #16
 800bb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb28:	eb00 0904 	add.w	r9, r0, r4
 800bb2c:	d1e5      	bne.n	800bafa <__cvt+0x6a>
 800bb2e:	7803      	ldrb	r3, [r0, #0]
 800bb30:	2b30      	cmp	r3, #48	@ 0x30
 800bb32:	d10a      	bne.n	800bb4a <__cvt+0xba>
 800bb34:	2200      	movs	r2, #0
 800bb36:	2300      	movs	r3, #0
 800bb38:	4630      	mov	r0, r6
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	f7f4 ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb40:	b918      	cbnz	r0, 800bb4a <__cvt+0xba>
 800bb42:	f1c4 0401 	rsb	r4, r4, #1
 800bb46:	f8ca 4000 	str.w	r4, [sl]
 800bb4a:	f8da 3000 	ldr.w	r3, [sl]
 800bb4e:	4499      	add	r9, r3
 800bb50:	e7d3      	b.n	800bafa <__cvt+0x6a>
 800bb52:	1c59      	adds	r1, r3, #1
 800bb54:	9103      	str	r1, [sp, #12]
 800bb56:	701a      	strb	r2, [r3, #0]
 800bb58:	e7d9      	b.n	800bb0e <__cvt+0x7e>

0800bb5a <__exponent>:
 800bb5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb5c:	2900      	cmp	r1, #0
 800bb5e:	bfba      	itte	lt
 800bb60:	4249      	neglt	r1, r1
 800bb62:	232d      	movlt	r3, #45	@ 0x2d
 800bb64:	232b      	movge	r3, #43	@ 0x2b
 800bb66:	2909      	cmp	r1, #9
 800bb68:	7002      	strb	r2, [r0, #0]
 800bb6a:	7043      	strb	r3, [r0, #1]
 800bb6c:	dd29      	ble.n	800bbc2 <__exponent+0x68>
 800bb6e:	f10d 0307 	add.w	r3, sp, #7
 800bb72:	461d      	mov	r5, r3
 800bb74:	270a      	movs	r7, #10
 800bb76:	461a      	mov	r2, r3
 800bb78:	fbb1 f6f7 	udiv	r6, r1, r7
 800bb7c:	fb07 1416 	mls	r4, r7, r6, r1
 800bb80:	3430      	adds	r4, #48	@ 0x30
 800bb82:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bb86:	460c      	mov	r4, r1
 800bb88:	2c63      	cmp	r4, #99	@ 0x63
 800bb8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb8e:	4631      	mov	r1, r6
 800bb90:	dcf1      	bgt.n	800bb76 <__exponent+0x1c>
 800bb92:	3130      	adds	r1, #48	@ 0x30
 800bb94:	1e94      	subs	r4, r2, #2
 800bb96:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bb9a:	1c41      	adds	r1, r0, #1
 800bb9c:	4623      	mov	r3, r4
 800bb9e:	42ab      	cmp	r3, r5
 800bba0:	d30a      	bcc.n	800bbb8 <__exponent+0x5e>
 800bba2:	f10d 0309 	add.w	r3, sp, #9
 800bba6:	1a9b      	subs	r3, r3, r2
 800bba8:	42ac      	cmp	r4, r5
 800bbaa:	bf88      	it	hi
 800bbac:	2300      	movhi	r3, #0
 800bbae:	3302      	adds	r3, #2
 800bbb0:	4403      	add	r3, r0
 800bbb2:	1a18      	subs	r0, r3, r0
 800bbb4:	b003      	add	sp, #12
 800bbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bbbc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bbc0:	e7ed      	b.n	800bb9e <__exponent+0x44>
 800bbc2:	2330      	movs	r3, #48	@ 0x30
 800bbc4:	3130      	adds	r1, #48	@ 0x30
 800bbc6:	7083      	strb	r3, [r0, #2]
 800bbc8:	70c1      	strb	r1, [r0, #3]
 800bbca:	1d03      	adds	r3, r0, #4
 800bbcc:	e7f1      	b.n	800bbb2 <__exponent+0x58>
	...

0800bbd0 <_printf_float>:
 800bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	b08d      	sub	sp, #52	@ 0x34
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bbdc:	4616      	mov	r6, r2
 800bbde:	461f      	mov	r7, r3
 800bbe0:	4605      	mov	r5, r0
 800bbe2:	f000 fcdb 	bl	800c59c <_localeconv_r>
 800bbe6:	6803      	ldr	r3, [r0, #0]
 800bbe8:	9304      	str	r3, [sp, #16]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7f4 fb40 	bl	8000270 <strlen>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbf4:	f8d8 3000 	ldr.w	r3, [r8]
 800bbf8:	9005      	str	r0, [sp, #20]
 800bbfa:	3307      	adds	r3, #7
 800bbfc:	f023 0307 	bic.w	r3, r3, #7
 800bc00:	f103 0208 	add.w	r2, r3, #8
 800bc04:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc08:	f8d4 b000 	ldr.w	fp, [r4]
 800bc0c:	f8c8 2000 	str.w	r2, [r8]
 800bc10:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bc18:	9307      	str	r3, [sp, #28]
 800bc1a:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bc22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc26:	4b9c      	ldr	r3, [pc, #624]	@ (800be98 <_printf_float+0x2c8>)
 800bc28:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2c:	f7f4 ff7e 	bl	8000b2c <__aeabi_dcmpun>
 800bc30:	bb70      	cbnz	r0, 800bc90 <_printf_float+0xc0>
 800bc32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc36:	4b98      	ldr	r3, [pc, #608]	@ (800be98 <_printf_float+0x2c8>)
 800bc38:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3c:	f7f4 ff58 	bl	8000af0 <__aeabi_dcmple>
 800bc40:	bb30      	cbnz	r0, 800bc90 <_printf_float+0xc0>
 800bc42:	2200      	movs	r2, #0
 800bc44:	2300      	movs	r3, #0
 800bc46:	4640      	mov	r0, r8
 800bc48:	4649      	mov	r1, r9
 800bc4a:	f7f4 ff47 	bl	8000adc <__aeabi_dcmplt>
 800bc4e:	b110      	cbz	r0, 800bc56 <_printf_float+0x86>
 800bc50:	232d      	movs	r3, #45	@ 0x2d
 800bc52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc56:	4a91      	ldr	r2, [pc, #580]	@ (800be9c <_printf_float+0x2cc>)
 800bc58:	4b91      	ldr	r3, [pc, #580]	@ (800bea0 <_printf_float+0x2d0>)
 800bc5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc5e:	bf94      	ite	ls
 800bc60:	4690      	movls	r8, r2
 800bc62:	4698      	movhi	r8, r3
 800bc64:	2303      	movs	r3, #3
 800bc66:	6123      	str	r3, [r4, #16]
 800bc68:	f02b 0304 	bic.w	r3, fp, #4
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	f04f 0900 	mov.w	r9, #0
 800bc72:	9700      	str	r7, [sp, #0]
 800bc74:	4633      	mov	r3, r6
 800bc76:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bc78:	4621      	mov	r1, r4
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	f000 f9d2 	bl	800c024 <_printf_common>
 800bc80:	3001      	adds	r0, #1
 800bc82:	f040 808d 	bne.w	800bda0 <_printf_float+0x1d0>
 800bc86:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8a:	b00d      	add	sp, #52	@ 0x34
 800bc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc90:	4642      	mov	r2, r8
 800bc92:	464b      	mov	r3, r9
 800bc94:	4640      	mov	r0, r8
 800bc96:	4649      	mov	r1, r9
 800bc98:	f7f4 ff48 	bl	8000b2c <__aeabi_dcmpun>
 800bc9c:	b140      	cbz	r0, 800bcb0 <_printf_float+0xe0>
 800bc9e:	464b      	mov	r3, r9
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bfbc      	itt	lt
 800bca4:	232d      	movlt	r3, #45	@ 0x2d
 800bca6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bcaa:	4a7e      	ldr	r2, [pc, #504]	@ (800bea4 <_printf_float+0x2d4>)
 800bcac:	4b7e      	ldr	r3, [pc, #504]	@ (800bea8 <_printf_float+0x2d8>)
 800bcae:	e7d4      	b.n	800bc5a <_printf_float+0x8a>
 800bcb0:	6863      	ldr	r3, [r4, #4]
 800bcb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bcb6:	9206      	str	r2, [sp, #24]
 800bcb8:	1c5a      	adds	r2, r3, #1
 800bcba:	d13b      	bne.n	800bd34 <_printf_float+0x164>
 800bcbc:	2306      	movs	r3, #6
 800bcbe:	6063      	str	r3, [r4, #4]
 800bcc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	6022      	str	r2, [r4, #0]
 800bcc8:	9303      	str	r3, [sp, #12]
 800bcca:	ab0a      	add	r3, sp, #40	@ 0x28
 800bccc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bcd0:	ab09      	add	r3, sp, #36	@ 0x24
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	6861      	ldr	r1, [r4, #4]
 800bcd6:	ec49 8b10 	vmov	d0, r8, r9
 800bcda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bcde:	4628      	mov	r0, r5
 800bce0:	f7ff fed6 	bl	800ba90 <__cvt>
 800bce4:	9b06      	ldr	r3, [sp, #24]
 800bce6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bce8:	2b47      	cmp	r3, #71	@ 0x47
 800bcea:	4680      	mov	r8, r0
 800bcec:	d129      	bne.n	800bd42 <_printf_float+0x172>
 800bcee:	1cc8      	adds	r0, r1, #3
 800bcf0:	db02      	blt.n	800bcf8 <_printf_float+0x128>
 800bcf2:	6863      	ldr	r3, [r4, #4]
 800bcf4:	4299      	cmp	r1, r3
 800bcf6:	dd41      	ble.n	800bd7c <_printf_float+0x1ac>
 800bcf8:	f1aa 0a02 	sub.w	sl, sl, #2
 800bcfc:	fa5f fa8a 	uxtb.w	sl, sl
 800bd00:	3901      	subs	r1, #1
 800bd02:	4652      	mov	r2, sl
 800bd04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd08:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd0a:	f7ff ff26 	bl	800bb5a <__exponent>
 800bd0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd10:	1813      	adds	r3, r2, r0
 800bd12:	2a01      	cmp	r2, #1
 800bd14:	4681      	mov	r9, r0
 800bd16:	6123      	str	r3, [r4, #16]
 800bd18:	dc02      	bgt.n	800bd20 <_printf_float+0x150>
 800bd1a:	6822      	ldr	r2, [r4, #0]
 800bd1c:	07d2      	lsls	r2, r2, #31
 800bd1e:	d501      	bpl.n	800bd24 <_printf_float+0x154>
 800bd20:	3301      	adds	r3, #1
 800bd22:	6123      	str	r3, [r4, #16]
 800bd24:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0a2      	beq.n	800bc72 <_printf_float+0xa2>
 800bd2c:	232d      	movs	r3, #45	@ 0x2d
 800bd2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd32:	e79e      	b.n	800bc72 <_printf_float+0xa2>
 800bd34:	9a06      	ldr	r2, [sp, #24]
 800bd36:	2a47      	cmp	r2, #71	@ 0x47
 800bd38:	d1c2      	bne.n	800bcc0 <_printf_float+0xf0>
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1c0      	bne.n	800bcc0 <_printf_float+0xf0>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e7bd      	b.n	800bcbe <_printf_float+0xee>
 800bd42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd46:	d9db      	bls.n	800bd00 <_printf_float+0x130>
 800bd48:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bd4c:	d118      	bne.n	800bd80 <_printf_float+0x1b0>
 800bd4e:	2900      	cmp	r1, #0
 800bd50:	6863      	ldr	r3, [r4, #4]
 800bd52:	dd0b      	ble.n	800bd6c <_printf_float+0x19c>
 800bd54:	6121      	str	r1, [r4, #16]
 800bd56:	b913      	cbnz	r3, 800bd5e <_printf_float+0x18e>
 800bd58:	6822      	ldr	r2, [r4, #0]
 800bd5a:	07d0      	lsls	r0, r2, #31
 800bd5c:	d502      	bpl.n	800bd64 <_printf_float+0x194>
 800bd5e:	3301      	adds	r3, #1
 800bd60:	440b      	add	r3, r1
 800bd62:	6123      	str	r3, [r4, #16]
 800bd64:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bd66:	f04f 0900 	mov.w	r9, #0
 800bd6a:	e7db      	b.n	800bd24 <_printf_float+0x154>
 800bd6c:	b913      	cbnz	r3, 800bd74 <_printf_float+0x1a4>
 800bd6e:	6822      	ldr	r2, [r4, #0]
 800bd70:	07d2      	lsls	r2, r2, #31
 800bd72:	d501      	bpl.n	800bd78 <_printf_float+0x1a8>
 800bd74:	3302      	adds	r3, #2
 800bd76:	e7f4      	b.n	800bd62 <_printf_float+0x192>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e7f2      	b.n	800bd62 <_printf_float+0x192>
 800bd7c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bd80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd82:	4299      	cmp	r1, r3
 800bd84:	db05      	blt.n	800bd92 <_printf_float+0x1c2>
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	6121      	str	r1, [r4, #16]
 800bd8a:	07d8      	lsls	r0, r3, #31
 800bd8c:	d5ea      	bpl.n	800bd64 <_printf_float+0x194>
 800bd8e:	1c4b      	adds	r3, r1, #1
 800bd90:	e7e7      	b.n	800bd62 <_printf_float+0x192>
 800bd92:	2900      	cmp	r1, #0
 800bd94:	bfd4      	ite	le
 800bd96:	f1c1 0202 	rsble	r2, r1, #2
 800bd9a:	2201      	movgt	r2, #1
 800bd9c:	4413      	add	r3, r2
 800bd9e:	e7e0      	b.n	800bd62 <_printf_float+0x192>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	055a      	lsls	r2, r3, #21
 800bda4:	d407      	bmi.n	800bdb6 <_printf_float+0x1e6>
 800bda6:	6923      	ldr	r3, [r4, #16]
 800bda8:	4642      	mov	r2, r8
 800bdaa:	4631      	mov	r1, r6
 800bdac:	4628      	mov	r0, r5
 800bdae:	47b8      	blx	r7
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	d12b      	bne.n	800be0c <_printf_float+0x23c>
 800bdb4:	e767      	b.n	800bc86 <_printf_float+0xb6>
 800bdb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bdba:	f240 80dd 	bls.w	800bf78 <_printf_float+0x3a8>
 800bdbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f7f4 fe7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d033      	beq.n	800be36 <_printf_float+0x266>
 800bdce:	4a37      	ldr	r2, [pc, #220]	@ (800beac <_printf_float+0x2dc>)
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	4631      	mov	r1, r6
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	47b8      	blx	r7
 800bdd8:	3001      	adds	r0, #1
 800bdda:	f43f af54 	beq.w	800bc86 <_printf_float+0xb6>
 800bdde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bde2:	4543      	cmp	r3, r8
 800bde4:	db02      	blt.n	800bdec <_printf_float+0x21c>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	07d8      	lsls	r0, r3, #31
 800bdea:	d50f      	bpl.n	800be0c <_printf_float+0x23c>
 800bdec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdf0:	4631      	mov	r1, r6
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	47b8      	blx	r7
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	f43f af45 	beq.w	800bc86 <_printf_float+0xb6>
 800bdfc:	f04f 0900 	mov.w	r9, #0
 800be00:	f108 38ff 	add.w	r8, r8, #4294967295
 800be04:	f104 0a1a 	add.w	sl, r4, #26
 800be08:	45c8      	cmp	r8, r9
 800be0a:	dc09      	bgt.n	800be20 <_printf_float+0x250>
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	079b      	lsls	r3, r3, #30
 800be10:	f100 8103 	bmi.w	800c01a <_printf_float+0x44a>
 800be14:	68e0      	ldr	r0, [r4, #12]
 800be16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be18:	4298      	cmp	r0, r3
 800be1a:	bfb8      	it	lt
 800be1c:	4618      	movlt	r0, r3
 800be1e:	e734      	b.n	800bc8a <_printf_float+0xba>
 800be20:	2301      	movs	r3, #1
 800be22:	4652      	mov	r2, sl
 800be24:	4631      	mov	r1, r6
 800be26:	4628      	mov	r0, r5
 800be28:	47b8      	blx	r7
 800be2a:	3001      	adds	r0, #1
 800be2c:	f43f af2b 	beq.w	800bc86 <_printf_float+0xb6>
 800be30:	f109 0901 	add.w	r9, r9, #1
 800be34:	e7e8      	b.n	800be08 <_printf_float+0x238>
 800be36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be38:	2b00      	cmp	r3, #0
 800be3a:	dc39      	bgt.n	800beb0 <_printf_float+0x2e0>
 800be3c:	4a1b      	ldr	r2, [pc, #108]	@ (800beac <_printf_float+0x2dc>)
 800be3e:	2301      	movs	r3, #1
 800be40:	4631      	mov	r1, r6
 800be42:	4628      	mov	r0, r5
 800be44:	47b8      	blx	r7
 800be46:	3001      	adds	r0, #1
 800be48:	f43f af1d 	beq.w	800bc86 <_printf_float+0xb6>
 800be4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800be50:	ea59 0303 	orrs.w	r3, r9, r3
 800be54:	d102      	bne.n	800be5c <_printf_float+0x28c>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	07d9      	lsls	r1, r3, #31
 800be5a:	d5d7      	bpl.n	800be0c <_printf_float+0x23c>
 800be5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be60:	4631      	mov	r1, r6
 800be62:	4628      	mov	r0, r5
 800be64:	47b8      	blx	r7
 800be66:	3001      	adds	r0, #1
 800be68:	f43f af0d 	beq.w	800bc86 <_printf_float+0xb6>
 800be6c:	f04f 0a00 	mov.w	sl, #0
 800be70:	f104 0b1a 	add.w	fp, r4, #26
 800be74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be76:	425b      	negs	r3, r3
 800be78:	4553      	cmp	r3, sl
 800be7a:	dc01      	bgt.n	800be80 <_printf_float+0x2b0>
 800be7c:	464b      	mov	r3, r9
 800be7e:	e793      	b.n	800bda8 <_printf_float+0x1d8>
 800be80:	2301      	movs	r3, #1
 800be82:	465a      	mov	r2, fp
 800be84:	4631      	mov	r1, r6
 800be86:	4628      	mov	r0, r5
 800be88:	47b8      	blx	r7
 800be8a:	3001      	adds	r0, #1
 800be8c:	f43f aefb 	beq.w	800bc86 <_printf_float+0xb6>
 800be90:	f10a 0a01 	add.w	sl, sl, #1
 800be94:	e7ee      	b.n	800be74 <_printf_float+0x2a4>
 800be96:	bf00      	nop
 800be98:	7fefffff 	.word	0x7fefffff
 800be9c:	08010dd8 	.word	0x08010dd8
 800bea0:	08010ddc 	.word	0x08010ddc
 800bea4:	08010de0 	.word	0x08010de0
 800bea8:	08010de4 	.word	0x08010de4
 800beac:	08010de8 	.word	0x08010de8
 800beb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800beb2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800beb6:	4553      	cmp	r3, sl
 800beb8:	bfa8      	it	ge
 800beba:	4653      	movge	r3, sl
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	4699      	mov	r9, r3
 800bec0:	dc36      	bgt.n	800bf30 <_printf_float+0x360>
 800bec2:	f04f 0b00 	mov.w	fp, #0
 800bec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800beca:	f104 021a 	add.w	r2, r4, #26
 800bece:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bed0:	9306      	str	r3, [sp, #24]
 800bed2:	eba3 0309 	sub.w	r3, r3, r9
 800bed6:	455b      	cmp	r3, fp
 800bed8:	dc31      	bgt.n	800bf3e <_printf_float+0x36e>
 800beda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bedc:	459a      	cmp	sl, r3
 800bede:	dc3a      	bgt.n	800bf56 <_printf_float+0x386>
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	07da      	lsls	r2, r3, #31
 800bee4:	d437      	bmi.n	800bf56 <_printf_float+0x386>
 800bee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee8:	ebaa 0903 	sub.w	r9, sl, r3
 800beec:	9b06      	ldr	r3, [sp, #24]
 800beee:	ebaa 0303 	sub.w	r3, sl, r3
 800bef2:	4599      	cmp	r9, r3
 800bef4:	bfa8      	it	ge
 800bef6:	4699      	movge	r9, r3
 800bef8:	f1b9 0f00 	cmp.w	r9, #0
 800befc:	dc33      	bgt.n	800bf66 <_printf_float+0x396>
 800befe:	f04f 0800 	mov.w	r8, #0
 800bf02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf06:	f104 0b1a 	add.w	fp, r4, #26
 800bf0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf0c:	ebaa 0303 	sub.w	r3, sl, r3
 800bf10:	eba3 0309 	sub.w	r3, r3, r9
 800bf14:	4543      	cmp	r3, r8
 800bf16:	f77f af79 	ble.w	800be0c <_printf_float+0x23c>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	465a      	mov	r2, fp
 800bf1e:	4631      	mov	r1, r6
 800bf20:	4628      	mov	r0, r5
 800bf22:	47b8      	blx	r7
 800bf24:	3001      	adds	r0, #1
 800bf26:	f43f aeae 	beq.w	800bc86 <_printf_float+0xb6>
 800bf2a:	f108 0801 	add.w	r8, r8, #1
 800bf2e:	e7ec      	b.n	800bf0a <_printf_float+0x33a>
 800bf30:	4642      	mov	r2, r8
 800bf32:	4631      	mov	r1, r6
 800bf34:	4628      	mov	r0, r5
 800bf36:	47b8      	blx	r7
 800bf38:	3001      	adds	r0, #1
 800bf3a:	d1c2      	bne.n	800bec2 <_printf_float+0x2f2>
 800bf3c:	e6a3      	b.n	800bc86 <_printf_float+0xb6>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	4631      	mov	r1, r6
 800bf42:	4628      	mov	r0, r5
 800bf44:	9206      	str	r2, [sp, #24]
 800bf46:	47b8      	blx	r7
 800bf48:	3001      	adds	r0, #1
 800bf4a:	f43f ae9c 	beq.w	800bc86 <_printf_float+0xb6>
 800bf4e:	9a06      	ldr	r2, [sp, #24]
 800bf50:	f10b 0b01 	add.w	fp, fp, #1
 800bf54:	e7bb      	b.n	800bece <_printf_float+0x2fe>
 800bf56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf5a:	4631      	mov	r1, r6
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	47b8      	blx	r7
 800bf60:	3001      	adds	r0, #1
 800bf62:	d1c0      	bne.n	800bee6 <_printf_float+0x316>
 800bf64:	e68f      	b.n	800bc86 <_printf_float+0xb6>
 800bf66:	9a06      	ldr	r2, [sp, #24]
 800bf68:	464b      	mov	r3, r9
 800bf6a:	4442      	add	r2, r8
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	4628      	mov	r0, r5
 800bf70:	47b8      	blx	r7
 800bf72:	3001      	adds	r0, #1
 800bf74:	d1c3      	bne.n	800befe <_printf_float+0x32e>
 800bf76:	e686      	b.n	800bc86 <_printf_float+0xb6>
 800bf78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf7c:	f1ba 0f01 	cmp.w	sl, #1
 800bf80:	dc01      	bgt.n	800bf86 <_printf_float+0x3b6>
 800bf82:	07db      	lsls	r3, r3, #31
 800bf84:	d536      	bpl.n	800bff4 <_printf_float+0x424>
 800bf86:	2301      	movs	r3, #1
 800bf88:	4642      	mov	r2, r8
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	47b8      	blx	r7
 800bf90:	3001      	adds	r0, #1
 800bf92:	f43f ae78 	beq.w	800bc86 <_printf_float+0xb6>
 800bf96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf9a:	4631      	mov	r1, r6
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	47b8      	blx	r7
 800bfa0:	3001      	adds	r0, #1
 800bfa2:	f43f ae70 	beq.w	800bc86 <_printf_float+0xb6>
 800bfa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2300      	movs	r3, #0
 800bfae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfb2:	f7f4 fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfb6:	b9c0      	cbnz	r0, 800bfea <_printf_float+0x41a>
 800bfb8:	4653      	mov	r3, sl
 800bfba:	f108 0201 	add.w	r2, r8, #1
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	47b8      	blx	r7
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	d10c      	bne.n	800bfe2 <_printf_float+0x412>
 800bfc8:	e65d      	b.n	800bc86 <_printf_float+0xb6>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	465a      	mov	r2, fp
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	47b8      	blx	r7
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	f43f ae56 	beq.w	800bc86 <_printf_float+0xb6>
 800bfda:	f108 0801 	add.w	r8, r8, #1
 800bfde:	45d0      	cmp	r8, sl
 800bfe0:	dbf3      	blt.n	800bfca <_printf_float+0x3fa>
 800bfe2:	464b      	mov	r3, r9
 800bfe4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bfe8:	e6df      	b.n	800bdaa <_printf_float+0x1da>
 800bfea:	f04f 0800 	mov.w	r8, #0
 800bfee:	f104 0b1a 	add.w	fp, r4, #26
 800bff2:	e7f4      	b.n	800bfde <_printf_float+0x40e>
 800bff4:	2301      	movs	r3, #1
 800bff6:	4642      	mov	r2, r8
 800bff8:	e7e1      	b.n	800bfbe <_printf_float+0x3ee>
 800bffa:	2301      	movs	r3, #1
 800bffc:	464a      	mov	r2, r9
 800bffe:	4631      	mov	r1, r6
 800c000:	4628      	mov	r0, r5
 800c002:	47b8      	blx	r7
 800c004:	3001      	adds	r0, #1
 800c006:	f43f ae3e 	beq.w	800bc86 <_printf_float+0xb6>
 800c00a:	f108 0801 	add.w	r8, r8, #1
 800c00e:	68e3      	ldr	r3, [r4, #12]
 800c010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c012:	1a5b      	subs	r3, r3, r1
 800c014:	4543      	cmp	r3, r8
 800c016:	dcf0      	bgt.n	800bffa <_printf_float+0x42a>
 800c018:	e6fc      	b.n	800be14 <_printf_float+0x244>
 800c01a:	f04f 0800 	mov.w	r8, #0
 800c01e:	f104 0919 	add.w	r9, r4, #25
 800c022:	e7f4      	b.n	800c00e <_printf_float+0x43e>

0800c024 <_printf_common>:
 800c024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c028:	4616      	mov	r6, r2
 800c02a:	4698      	mov	r8, r3
 800c02c:	688a      	ldr	r2, [r1, #8]
 800c02e:	690b      	ldr	r3, [r1, #16]
 800c030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c034:	4293      	cmp	r3, r2
 800c036:	bfb8      	it	lt
 800c038:	4613      	movlt	r3, r2
 800c03a:	6033      	str	r3, [r6, #0]
 800c03c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c040:	4607      	mov	r7, r0
 800c042:	460c      	mov	r4, r1
 800c044:	b10a      	cbz	r2, 800c04a <_printf_common+0x26>
 800c046:	3301      	adds	r3, #1
 800c048:	6033      	str	r3, [r6, #0]
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	0699      	lsls	r1, r3, #26
 800c04e:	bf42      	ittt	mi
 800c050:	6833      	ldrmi	r3, [r6, #0]
 800c052:	3302      	addmi	r3, #2
 800c054:	6033      	strmi	r3, [r6, #0]
 800c056:	6825      	ldr	r5, [r4, #0]
 800c058:	f015 0506 	ands.w	r5, r5, #6
 800c05c:	d106      	bne.n	800c06c <_printf_common+0x48>
 800c05e:	f104 0a19 	add.w	sl, r4, #25
 800c062:	68e3      	ldr	r3, [r4, #12]
 800c064:	6832      	ldr	r2, [r6, #0]
 800c066:	1a9b      	subs	r3, r3, r2
 800c068:	42ab      	cmp	r3, r5
 800c06a:	dc26      	bgt.n	800c0ba <_printf_common+0x96>
 800c06c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c070:	6822      	ldr	r2, [r4, #0]
 800c072:	3b00      	subs	r3, #0
 800c074:	bf18      	it	ne
 800c076:	2301      	movne	r3, #1
 800c078:	0692      	lsls	r2, r2, #26
 800c07a:	d42b      	bmi.n	800c0d4 <_printf_common+0xb0>
 800c07c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c080:	4641      	mov	r1, r8
 800c082:	4638      	mov	r0, r7
 800c084:	47c8      	blx	r9
 800c086:	3001      	adds	r0, #1
 800c088:	d01e      	beq.n	800c0c8 <_printf_common+0xa4>
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	6922      	ldr	r2, [r4, #16]
 800c08e:	f003 0306 	and.w	r3, r3, #6
 800c092:	2b04      	cmp	r3, #4
 800c094:	bf02      	ittt	eq
 800c096:	68e5      	ldreq	r5, [r4, #12]
 800c098:	6833      	ldreq	r3, [r6, #0]
 800c09a:	1aed      	subeq	r5, r5, r3
 800c09c:	68a3      	ldr	r3, [r4, #8]
 800c09e:	bf0c      	ite	eq
 800c0a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0a4:	2500      	movne	r5, #0
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	bfc4      	itt	gt
 800c0aa:	1a9b      	subgt	r3, r3, r2
 800c0ac:	18ed      	addgt	r5, r5, r3
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	341a      	adds	r4, #26
 800c0b2:	42b5      	cmp	r5, r6
 800c0b4:	d11a      	bne.n	800c0ec <_printf_common+0xc8>
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	e008      	b.n	800c0cc <_printf_common+0xa8>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	4652      	mov	r2, sl
 800c0be:	4641      	mov	r1, r8
 800c0c0:	4638      	mov	r0, r7
 800c0c2:	47c8      	blx	r9
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	d103      	bne.n	800c0d0 <_printf_common+0xac>
 800c0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d0:	3501      	adds	r5, #1
 800c0d2:	e7c6      	b.n	800c062 <_printf_common+0x3e>
 800c0d4:	18e1      	adds	r1, r4, r3
 800c0d6:	1c5a      	adds	r2, r3, #1
 800c0d8:	2030      	movs	r0, #48	@ 0x30
 800c0da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c0de:	4422      	add	r2, r4
 800c0e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c0e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c0e8:	3302      	adds	r3, #2
 800c0ea:	e7c7      	b.n	800c07c <_printf_common+0x58>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	4622      	mov	r2, r4
 800c0f0:	4641      	mov	r1, r8
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	47c8      	blx	r9
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	d0e6      	beq.n	800c0c8 <_printf_common+0xa4>
 800c0fa:	3601      	adds	r6, #1
 800c0fc:	e7d9      	b.n	800c0b2 <_printf_common+0x8e>
	...

0800c100 <_printf_i>:
 800c100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c104:	7e0f      	ldrb	r7, [r1, #24]
 800c106:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c108:	2f78      	cmp	r7, #120	@ 0x78
 800c10a:	4691      	mov	r9, r2
 800c10c:	4680      	mov	r8, r0
 800c10e:	460c      	mov	r4, r1
 800c110:	469a      	mov	sl, r3
 800c112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c116:	d807      	bhi.n	800c128 <_printf_i+0x28>
 800c118:	2f62      	cmp	r7, #98	@ 0x62
 800c11a:	d80a      	bhi.n	800c132 <_printf_i+0x32>
 800c11c:	2f00      	cmp	r7, #0
 800c11e:	f000 80d2 	beq.w	800c2c6 <_printf_i+0x1c6>
 800c122:	2f58      	cmp	r7, #88	@ 0x58
 800c124:	f000 80b9 	beq.w	800c29a <_printf_i+0x19a>
 800c128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c12c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c130:	e03a      	b.n	800c1a8 <_printf_i+0xa8>
 800c132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c136:	2b15      	cmp	r3, #21
 800c138:	d8f6      	bhi.n	800c128 <_printf_i+0x28>
 800c13a:	a101      	add	r1, pc, #4	@ (adr r1, 800c140 <_printf_i+0x40>)
 800c13c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c140:	0800c199 	.word	0x0800c199
 800c144:	0800c1ad 	.word	0x0800c1ad
 800c148:	0800c129 	.word	0x0800c129
 800c14c:	0800c129 	.word	0x0800c129
 800c150:	0800c129 	.word	0x0800c129
 800c154:	0800c129 	.word	0x0800c129
 800c158:	0800c1ad 	.word	0x0800c1ad
 800c15c:	0800c129 	.word	0x0800c129
 800c160:	0800c129 	.word	0x0800c129
 800c164:	0800c129 	.word	0x0800c129
 800c168:	0800c129 	.word	0x0800c129
 800c16c:	0800c2ad 	.word	0x0800c2ad
 800c170:	0800c1d7 	.word	0x0800c1d7
 800c174:	0800c267 	.word	0x0800c267
 800c178:	0800c129 	.word	0x0800c129
 800c17c:	0800c129 	.word	0x0800c129
 800c180:	0800c2cf 	.word	0x0800c2cf
 800c184:	0800c129 	.word	0x0800c129
 800c188:	0800c1d7 	.word	0x0800c1d7
 800c18c:	0800c129 	.word	0x0800c129
 800c190:	0800c129 	.word	0x0800c129
 800c194:	0800c26f 	.word	0x0800c26f
 800c198:	6833      	ldr	r3, [r6, #0]
 800c19a:	1d1a      	adds	r2, r3, #4
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	6032      	str	r2, [r6, #0]
 800c1a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e09d      	b.n	800c2e8 <_printf_i+0x1e8>
 800c1ac:	6833      	ldr	r3, [r6, #0]
 800c1ae:	6820      	ldr	r0, [r4, #0]
 800c1b0:	1d19      	adds	r1, r3, #4
 800c1b2:	6031      	str	r1, [r6, #0]
 800c1b4:	0606      	lsls	r6, r0, #24
 800c1b6:	d501      	bpl.n	800c1bc <_printf_i+0xbc>
 800c1b8:	681d      	ldr	r5, [r3, #0]
 800c1ba:	e003      	b.n	800c1c4 <_printf_i+0xc4>
 800c1bc:	0645      	lsls	r5, r0, #25
 800c1be:	d5fb      	bpl.n	800c1b8 <_printf_i+0xb8>
 800c1c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c1c4:	2d00      	cmp	r5, #0
 800c1c6:	da03      	bge.n	800c1d0 <_printf_i+0xd0>
 800c1c8:	232d      	movs	r3, #45	@ 0x2d
 800c1ca:	426d      	negs	r5, r5
 800c1cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1d0:	4859      	ldr	r0, [pc, #356]	@ (800c338 <_printf_i+0x238>)
 800c1d2:	230a      	movs	r3, #10
 800c1d4:	e011      	b.n	800c1fa <_printf_i+0xfa>
 800c1d6:	6821      	ldr	r1, [r4, #0]
 800c1d8:	6833      	ldr	r3, [r6, #0]
 800c1da:	0608      	lsls	r0, r1, #24
 800c1dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800c1e0:	d402      	bmi.n	800c1e8 <_printf_i+0xe8>
 800c1e2:	0649      	lsls	r1, r1, #25
 800c1e4:	bf48      	it	mi
 800c1e6:	b2ad      	uxthmi	r5, r5
 800c1e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c1ea:	4853      	ldr	r0, [pc, #332]	@ (800c338 <_printf_i+0x238>)
 800c1ec:	6033      	str	r3, [r6, #0]
 800c1ee:	bf14      	ite	ne
 800c1f0:	230a      	movne	r3, #10
 800c1f2:	2308      	moveq	r3, #8
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c1fa:	6866      	ldr	r6, [r4, #4]
 800c1fc:	60a6      	str	r6, [r4, #8]
 800c1fe:	2e00      	cmp	r6, #0
 800c200:	bfa2      	ittt	ge
 800c202:	6821      	ldrge	r1, [r4, #0]
 800c204:	f021 0104 	bicge.w	r1, r1, #4
 800c208:	6021      	strge	r1, [r4, #0]
 800c20a:	b90d      	cbnz	r5, 800c210 <_printf_i+0x110>
 800c20c:	2e00      	cmp	r6, #0
 800c20e:	d04b      	beq.n	800c2a8 <_printf_i+0x1a8>
 800c210:	4616      	mov	r6, r2
 800c212:	fbb5 f1f3 	udiv	r1, r5, r3
 800c216:	fb03 5711 	mls	r7, r3, r1, r5
 800c21a:	5dc7      	ldrb	r7, [r0, r7]
 800c21c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c220:	462f      	mov	r7, r5
 800c222:	42bb      	cmp	r3, r7
 800c224:	460d      	mov	r5, r1
 800c226:	d9f4      	bls.n	800c212 <_printf_i+0x112>
 800c228:	2b08      	cmp	r3, #8
 800c22a:	d10b      	bne.n	800c244 <_printf_i+0x144>
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	07df      	lsls	r7, r3, #31
 800c230:	d508      	bpl.n	800c244 <_printf_i+0x144>
 800c232:	6923      	ldr	r3, [r4, #16]
 800c234:	6861      	ldr	r1, [r4, #4]
 800c236:	4299      	cmp	r1, r3
 800c238:	bfde      	ittt	le
 800c23a:	2330      	movle	r3, #48	@ 0x30
 800c23c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c240:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c244:	1b92      	subs	r2, r2, r6
 800c246:	6122      	str	r2, [r4, #16]
 800c248:	f8cd a000 	str.w	sl, [sp]
 800c24c:	464b      	mov	r3, r9
 800c24e:	aa03      	add	r2, sp, #12
 800c250:	4621      	mov	r1, r4
 800c252:	4640      	mov	r0, r8
 800c254:	f7ff fee6 	bl	800c024 <_printf_common>
 800c258:	3001      	adds	r0, #1
 800c25a:	d14a      	bne.n	800c2f2 <_printf_i+0x1f2>
 800c25c:	f04f 30ff 	mov.w	r0, #4294967295
 800c260:	b004      	add	sp, #16
 800c262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	f043 0320 	orr.w	r3, r3, #32
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	4833      	ldr	r0, [pc, #204]	@ (800c33c <_printf_i+0x23c>)
 800c270:	2778      	movs	r7, #120	@ 0x78
 800c272:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	6831      	ldr	r1, [r6, #0]
 800c27a:	061f      	lsls	r7, r3, #24
 800c27c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c280:	d402      	bmi.n	800c288 <_printf_i+0x188>
 800c282:	065f      	lsls	r7, r3, #25
 800c284:	bf48      	it	mi
 800c286:	b2ad      	uxthmi	r5, r5
 800c288:	6031      	str	r1, [r6, #0]
 800c28a:	07d9      	lsls	r1, r3, #31
 800c28c:	bf44      	itt	mi
 800c28e:	f043 0320 	orrmi.w	r3, r3, #32
 800c292:	6023      	strmi	r3, [r4, #0]
 800c294:	b11d      	cbz	r5, 800c29e <_printf_i+0x19e>
 800c296:	2310      	movs	r3, #16
 800c298:	e7ac      	b.n	800c1f4 <_printf_i+0xf4>
 800c29a:	4827      	ldr	r0, [pc, #156]	@ (800c338 <_printf_i+0x238>)
 800c29c:	e7e9      	b.n	800c272 <_printf_i+0x172>
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	f023 0320 	bic.w	r3, r3, #32
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	e7f6      	b.n	800c296 <_printf_i+0x196>
 800c2a8:	4616      	mov	r6, r2
 800c2aa:	e7bd      	b.n	800c228 <_printf_i+0x128>
 800c2ac:	6833      	ldr	r3, [r6, #0]
 800c2ae:	6825      	ldr	r5, [r4, #0]
 800c2b0:	6961      	ldr	r1, [r4, #20]
 800c2b2:	1d18      	adds	r0, r3, #4
 800c2b4:	6030      	str	r0, [r6, #0]
 800c2b6:	062e      	lsls	r6, r5, #24
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	d501      	bpl.n	800c2c0 <_printf_i+0x1c0>
 800c2bc:	6019      	str	r1, [r3, #0]
 800c2be:	e002      	b.n	800c2c6 <_printf_i+0x1c6>
 800c2c0:	0668      	lsls	r0, r5, #25
 800c2c2:	d5fb      	bpl.n	800c2bc <_printf_i+0x1bc>
 800c2c4:	8019      	strh	r1, [r3, #0]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	6123      	str	r3, [r4, #16]
 800c2ca:	4616      	mov	r6, r2
 800c2cc:	e7bc      	b.n	800c248 <_printf_i+0x148>
 800c2ce:	6833      	ldr	r3, [r6, #0]
 800c2d0:	1d1a      	adds	r2, r3, #4
 800c2d2:	6032      	str	r2, [r6, #0]
 800c2d4:	681e      	ldr	r6, [r3, #0]
 800c2d6:	6862      	ldr	r2, [r4, #4]
 800c2d8:	2100      	movs	r1, #0
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f7f3 ff78 	bl	80001d0 <memchr>
 800c2e0:	b108      	cbz	r0, 800c2e6 <_printf_i+0x1e6>
 800c2e2:	1b80      	subs	r0, r0, r6
 800c2e4:	6060      	str	r0, [r4, #4]
 800c2e6:	6863      	ldr	r3, [r4, #4]
 800c2e8:	6123      	str	r3, [r4, #16]
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2f0:	e7aa      	b.n	800c248 <_printf_i+0x148>
 800c2f2:	6923      	ldr	r3, [r4, #16]
 800c2f4:	4632      	mov	r2, r6
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	4640      	mov	r0, r8
 800c2fa:	47d0      	blx	sl
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	d0ad      	beq.n	800c25c <_printf_i+0x15c>
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	079b      	lsls	r3, r3, #30
 800c304:	d413      	bmi.n	800c32e <_printf_i+0x22e>
 800c306:	68e0      	ldr	r0, [r4, #12]
 800c308:	9b03      	ldr	r3, [sp, #12]
 800c30a:	4298      	cmp	r0, r3
 800c30c:	bfb8      	it	lt
 800c30e:	4618      	movlt	r0, r3
 800c310:	e7a6      	b.n	800c260 <_printf_i+0x160>
 800c312:	2301      	movs	r3, #1
 800c314:	4632      	mov	r2, r6
 800c316:	4649      	mov	r1, r9
 800c318:	4640      	mov	r0, r8
 800c31a:	47d0      	blx	sl
 800c31c:	3001      	adds	r0, #1
 800c31e:	d09d      	beq.n	800c25c <_printf_i+0x15c>
 800c320:	3501      	adds	r5, #1
 800c322:	68e3      	ldr	r3, [r4, #12]
 800c324:	9903      	ldr	r1, [sp, #12]
 800c326:	1a5b      	subs	r3, r3, r1
 800c328:	42ab      	cmp	r3, r5
 800c32a:	dcf2      	bgt.n	800c312 <_printf_i+0x212>
 800c32c:	e7eb      	b.n	800c306 <_printf_i+0x206>
 800c32e:	2500      	movs	r5, #0
 800c330:	f104 0619 	add.w	r6, r4, #25
 800c334:	e7f5      	b.n	800c322 <_printf_i+0x222>
 800c336:	bf00      	nop
 800c338:	08010dea 	.word	0x08010dea
 800c33c:	08010dfb 	.word	0x08010dfb

0800c340 <std>:
 800c340:	2300      	movs	r3, #0
 800c342:	b510      	push	{r4, lr}
 800c344:	4604      	mov	r4, r0
 800c346:	e9c0 3300 	strd	r3, r3, [r0]
 800c34a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c34e:	6083      	str	r3, [r0, #8]
 800c350:	8181      	strh	r1, [r0, #12]
 800c352:	6643      	str	r3, [r0, #100]	@ 0x64
 800c354:	81c2      	strh	r2, [r0, #14]
 800c356:	6183      	str	r3, [r0, #24]
 800c358:	4619      	mov	r1, r3
 800c35a:	2208      	movs	r2, #8
 800c35c:	305c      	adds	r0, #92	@ 0x5c
 800c35e:	f000 f914 	bl	800c58a <memset>
 800c362:	4b0d      	ldr	r3, [pc, #52]	@ (800c398 <std+0x58>)
 800c364:	6263      	str	r3, [r4, #36]	@ 0x24
 800c366:	4b0d      	ldr	r3, [pc, #52]	@ (800c39c <std+0x5c>)
 800c368:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c36a:	4b0d      	ldr	r3, [pc, #52]	@ (800c3a0 <std+0x60>)
 800c36c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c36e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3a4 <std+0x64>)
 800c370:	6323      	str	r3, [r4, #48]	@ 0x30
 800c372:	4b0d      	ldr	r3, [pc, #52]	@ (800c3a8 <std+0x68>)
 800c374:	6224      	str	r4, [r4, #32]
 800c376:	429c      	cmp	r4, r3
 800c378:	d006      	beq.n	800c388 <std+0x48>
 800c37a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c37e:	4294      	cmp	r4, r2
 800c380:	d002      	beq.n	800c388 <std+0x48>
 800c382:	33d0      	adds	r3, #208	@ 0xd0
 800c384:	429c      	cmp	r4, r3
 800c386:	d105      	bne.n	800c394 <std+0x54>
 800c388:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c390:	f000 b978 	b.w	800c684 <__retarget_lock_init_recursive>
 800c394:	bd10      	pop	{r4, pc}
 800c396:	bf00      	nop
 800c398:	0800c505 	.word	0x0800c505
 800c39c:	0800c527 	.word	0x0800c527
 800c3a0:	0800c55f 	.word	0x0800c55f
 800c3a4:	0800c583 	.word	0x0800c583
 800c3a8:	200021dc 	.word	0x200021dc

0800c3ac <stdio_exit_handler>:
 800c3ac:	4a02      	ldr	r2, [pc, #8]	@ (800c3b8 <stdio_exit_handler+0xc>)
 800c3ae:	4903      	ldr	r1, [pc, #12]	@ (800c3bc <stdio_exit_handler+0x10>)
 800c3b0:	4803      	ldr	r0, [pc, #12]	@ (800c3c0 <stdio_exit_handler+0x14>)
 800c3b2:	f000 b869 	b.w	800c488 <_fwalk_sglue>
 800c3b6:	bf00      	nop
 800c3b8:	20000128 	.word	0x20000128
 800c3bc:	0800e01d 	.word	0x0800e01d
 800c3c0:	20000138 	.word	0x20000138

0800c3c4 <cleanup_stdio>:
 800c3c4:	6841      	ldr	r1, [r0, #4]
 800c3c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f8 <cleanup_stdio+0x34>)
 800c3c8:	4299      	cmp	r1, r3
 800c3ca:	b510      	push	{r4, lr}
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	d001      	beq.n	800c3d4 <cleanup_stdio+0x10>
 800c3d0:	f001 fe24 	bl	800e01c <_fflush_r>
 800c3d4:	68a1      	ldr	r1, [r4, #8]
 800c3d6:	4b09      	ldr	r3, [pc, #36]	@ (800c3fc <cleanup_stdio+0x38>)
 800c3d8:	4299      	cmp	r1, r3
 800c3da:	d002      	beq.n	800c3e2 <cleanup_stdio+0x1e>
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f001 fe1d 	bl	800e01c <_fflush_r>
 800c3e2:	68e1      	ldr	r1, [r4, #12]
 800c3e4:	4b06      	ldr	r3, [pc, #24]	@ (800c400 <cleanup_stdio+0x3c>)
 800c3e6:	4299      	cmp	r1, r3
 800c3e8:	d004      	beq.n	800c3f4 <cleanup_stdio+0x30>
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3f0:	f001 be14 	b.w	800e01c <_fflush_r>
 800c3f4:	bd10      	pop	{r4, pc}
 800c3f6:	bf00      	nop
 800c3f8:	200021dc 	.word	0x200021dc
 800c3fc:	20002244 	.word	0x20002244
 800c400:	200022ac 	.word	0x200022ac

0800c404 <global_stdio_init.part.0>:
 800c404:	b510      	push	{r4, lr}
 800c406:	4b0b      	ldr	r3, [pc, #44]	@ (800c434 <global_stdio_init.part.0+0x30>)
 800c408:	4c0b      	ldr	r4, [pc, #44]	@ (800c438 <global_stdio_init.part.0+0x34>)
 800c40a:	4a0c      	ldr	r2, [pc, #48]	@ (800c43c <global_stdio_init.part.0+0x38>)
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	4620      	mov	r0, r4
 800c410:	2200      	movs	r2, #0
 800c412:	2104      	movs	r1, #4
 800c414:	f7ff ff94 	bl	800c340 <std>
 800c418:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c41c:	2201      	movs	r2, #1
 800c41e:	2109      	movs	r1, #9
 800c420:	f7ff ff8e 	bl	800c340 <std>
 800c424:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c428:	2202      	movs	r2, #2
 800c42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c42e:	2112      	movs	r1, #18
 800c430:	f7ff bf86 	b.w	800c340 <std>
 800c434:	20002314 	.word	0x20002314
 800c438:	200021dc 	.word	0x200021dc
 800c43c:	0800c3ad 	.word	0x0800c3ad

0800c440 <__sfp_lock_acquire>:
 800c440:	4801      	ldr	r0, [pc, #4]	@ (800c448 <__sfp_lock_acquire+0x8>)
 800c442:	f000 b920 	b.w	800c686 <__retarget_lock_acquire_recursive>
 800c446:	bf00      	nop
 800c448:	2000231d 	.word	0x2000231d

0800c44c <__sfp_lock_release>:
 800c44c:	4801      	ldr	r0, [pc, #4]	@ (800c454 <__sfp_lock_release+0x8>)
 800c44e:	f000 b91b 	b.w	800c688 <__retarget_lock_release_recursive>
 800c452:	bf00      	nop
 800c454:	2000231d 	.word	0x2000231d

0800c458 <__sinit>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	4604      	mov	r4, r0
 800c45c:	f7ff fff0 	bl	800c440 <__sfp_lock_acquire>
 800c460:	6a23      	ldr	r3, [r4, #32]
 800c462:	b11b      	cbz	r3, 800c46c <__sinit+0x14>
 800c464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c468:	f7ff bff0 	b.w	800c44c <__sfp_lock_release>
 800c46c:	4b04      	ldr	r3, [pc, #16]	@ (800c480 <__sinit+0x28>)
 800c46e:	6223      	str	r3, [r4, #32]
 800c470:	4b04      	ldr	r3, [pc, #16]	@ (800c484 <__sinit+0x2c>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1f5      	bne.n	800c464 <__sinit+0xc>
 800c478:	f7ff ffc4 	bl	800c404 <global_stdio_init.part.0>
 800c47c:	e7f2      	b.n	800c464 <__sinit+0xc>
 800c47e:	bf00      	nop
 800c480:	0800c3c5 	.word	0x0800c3c5
 800c484:	20002314 	.word	0x20002314

0800c488 <_fwalk_sglue>:
 800c488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c48c:	4607      	mov	r7, r0
 800c48e:	4688      	mov	r8, r1
 800c490:	4614      	mov	r4, r2
 800c492:	2600      	movs	r6, #0
 800c494:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c498:	f1b9 0901 	subs.w	r9, r9, #1
 800c49c:	d505      	bpl.n	800c4aa <_fwalk_sglue+0x22>
 800c49e:	6824      	ldr	r4, [r4, #0]
 800c4a0:	2c00      	cmp	r4, #0
 800c4a2:	d1f7      	bne.n	800c494 <_fwalk_sglue+0xc>
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4aa:	89ab      	ldrh	r3, [r5, #12]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d907      	bls.n	800c4c0 <_fwalk_sglue+0x38>
 800c4b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	d003      	beq.n	800c4c0 <_fwalk_sglue+0x38>
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	47c0      	blx	r8
 800c4be:	4306      	orrs	r6, r0
 800c4c0:	3568      	adds	r5, #104	@ 0x68
 800c4c2:	e7e9      	b.n	800c498 <_fwalk_sglue+0x10>

0800c4c4 <siprintf>:
 800c4c4:	b40e      	push	{r1, r2, r3}
 800c4c6:	b500      	push	{lr}
 800c4c8:	b09c      	sub	sp, #112	@ 0x70
 800c4ca:	ab1d      	add	r3, sp, #116	@ 0x74
 800c4cc:	9002      	str	r0, [sp, #8]
 800c4ce:	9006      	str	r0, [sp, #24]
 800c4d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c4d4:	4809      	ldr	r0, [pc, #36]	@ (800c4fc <siprintf+0x38>)
 800c4d6:	9107      	str	r1, [sp, #28]
 800c4d8:	9104      	str	r1, [sp, #16]
 800c4da:	4909      	ldr	r1, [pc, #36]	@ (800c500 <siprintf+0x3c>)
 800c4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4e0:	9105      	str	r1, [sp, #20]
 800c4e2:	6800      	ldr	r0, [r0, #0]
 800c4e4:	9301      	str	r3, [sp, #4]
 800c4e6:	a902      	add	r1, sp, #8
 800c4e8:	f001 fc18 	bl	800dd1c <_svfiprintf_r>
 800c4ec:	9b02      	ldr	r3, [sp, #8]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	701a      	strb	r2, [r3, #0]
 800c4f2:	b01c      	add	sp, #112	@ 0x70
 800c4f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4f8:	b003      	add	sp, #12
 800c4fa:	4770      	bx	lr
 800c4fc:	20000134 	.word	0x20000134
 800c500:	ffff0208 	.word	0xffff0208

0800c504 <__sread>:
 800c504:	b510      	push	{r4, lr}
 800c506:	460c      	mov	r4, r1
 800c508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c50c:	f000 f86c 	bl	800c5e8 <_read_r>
 800c510:	2800      	cmp	r0, #0
 800c512:	bfab      	itete	ge
 800c514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c516:	89a3      	ldrhlt	r3, [r4, #12]
 800c518:	181b      	addge	r3, r3, r0
 800c51a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c51e:	bfac      	ite	ge
 800c520:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c522:	81a3      	strhlt	r3, [r4, #12]
 800c524:	bd10      	pop	{r4, pc}

0800c526 <__swrite>:
 800c526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c52a:	461f      	mov	r7, r3
 800c52c:	898b      	ldrh	r3, [r1, #12]
 800c52e:	05db      	lsls	r3, r3, #23
 800c530:	4605      	mov	r5, r0
 800c532:	460c      	mov	r4, r1
 800c534:	4616      	mov	r6, r2
 800c536:	d505      	bpl.n	800c544 <__swrite+0x1e>
 800c538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c53c:	2302      	movs	r3, #2
 800c53e:	2200      	movs	r2, #0
 800c540:	f000 f840 	bl	800c5c4 <_lseek_r>
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c54a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c54e:	81a3      	strh	r3, [r4, #12]
 800c550:	4632      	mov	r2, r6
 800c552:	463b      	mov	r3, r7
 800c554:	4628      	mov	r0, r5
 800c556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c55a:	f000 b857 	b.w	800c60c <_write_r>

0800c55e <__sseek>:
 800c55e:	b510      	push	{r4, lr}
 800c560:	460c      	mov	r4, r1
 800c562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c566:	f000 f82d 	bl	800c5c4 <_lseek_r>
 800c56a:	1c43      	adds	r3, r0, #1
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	bf15      	itete	ne
 800c570:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c57a:	81a3      	strheq	r3, [r4, #12]
 800c57c:	bf18      	it	ne
 800c57e:	81a3      	strhne	r3, [r4, #12]
 800c580:	bd10      	pop	{r4, pc}

0800c582 <__sclose>:
 800c582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c586:	f000 b80d 	b.w	800c5a4 <_close_r>

0800c58a <memset>:
 800c58a:	4402      	add	r2, r0
 800c58c:	4603      	mov	r3, r0
 800c58e:	4293      	cmp	r3, r2
 800c590:	d100      	bne.n	800c594 <memset+0xa>
 800c592:	4770      	bx	lr
 800c594:	f803 1b01 	strb.w	r1, [r3], #1
 800c598:	e7f9      	b.n	800c58e <memset+0x4>
	...

0800c59c <_localeconv_r>:
 800c59c:	4800      	ldr	r0, [pc, #0]	@ (800c5a0 <_localeconv_r+0x4>)
 800c59e:	4770      	bx	lr
 800c5a0:	20000274 	.word	0x20000274

0800c5a4 <_close_r>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	4d06      	ldr	r5, [pc, #24]	@ (800c5c0 <_close_r+0x1c>)
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	4608      	mov	r0, r1
 800c5ae:	602b      	str	r3, [r5, #0]
 800c5b0:	f7f6 ff72 	bl	8003498 <_close>
 800c5b4:	1c43      	adds	r3, r0, #1
 800c5b6:	d102      	bne.n	800c5be <_close_r+0x1a>
 800c5b8:	682b      	ldr	r3, [r5, #0]
 800c5ba:	b103      	cbz	r3, 800c5be <_close_r+0x1a>
 800c5bc:	6023      	str	r3, [r4, #0]
 800c5be:	bd38      	pop	{r3, r4, r5, pc}
 800c5c0:	20002318 	.word	0x20002318

0800c5c4 <_lseek_r>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4d07      	ldr	r5, [pc, #28]	@ (800c5e4 <_lseek_r+0x20>)
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	4608      	mov	r0, r1
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	602a      	str	r2, [r5, #0]
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	f7f6 ff87 	bl	80034e6 <_lseek>
 800c5d8:	1c43      	adds	r3, r0, #1
 800c5da:	d102      	bne.n	800c5e2 <_lseek_r+0x1e>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	b103      	cbz	r3, 800c5e2 <_lseek_r+0x1e>
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	20002318 	.word	0x20002318

0800c5e8 <_read_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4d07      	ldr	r5, [pc, #28]	@ (800c608 <_read_r+0x20>)
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	4608      	mov	r0, r1
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	602a      	str	r2, [r5, #0]
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f7f6 ff15 	bl	8003426 <_read>
 800c5fc:	1c43      	adds	r3, r0, #1
 800c5fe:	d102      	bne.n	800c606 <_read_r+0x1e>
 800c600:	682b      	ldr	r3, [r5, #0]
 800c602:	b103      	cbz	r3, 800c606 <_read_r+0x1e>
 800c604:	6023      	str	r3, [r4, #0]
 800c606:	bd38      	pop	{r3, r4, r5, pc}
 800c608:	20002318 	.word	0x20002318

0800c60c <_write_r>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	4d07      	ldr	r5, [pc, #28]	@ (800c62c <_write_r+0x20>)
 800c610:	4604      	mov	r4, r0
 800c612:	4608      	mov	r0, r1
 800c614:	4611      	mov	r1, r2
 800c616:	2200      	movs	r2, #0
 800c618:	602a      	str	r2, [r5, #0]
 800c61a:	461a      	mov	r2, r3
 800c61c:	f7f6 ff20 	bl	8003460 <_write>
 800c620:	1c43      	adds	r3, r0, #1
 800c622:	d102      	bne.n	800c62a <_write_r+0x1e>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	b103      	cbz	r3, 800c62a <_write_r+0x1e>
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	20002318 	.word	0x20002318

0800c630 <__errno>:
 800c630:	4b01      	ldr	r3, [pc, #4]	@ (800c638 <__errno+0x8>)
 800c632:	6818      	ldr	r0, [r3, #0]
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	20000134 	.word	0x20000134

0800c63c <__libc_init_array>:
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	4d0d      	ldr	r5, [pc, #52]	@ (800c674 <__libc_init_array+0x38>)
 800c640:	4c0d      	ldr	r4, [pc, #52]	@ (800c678 <__libc_init_array+0x3c>)
 800c642:	1b64      	subs	r4, r4, r5
 800c644:	10a4      	asrs	r4, r4, #2
 800c646:	2600      	movs	r6, #0
 800c648:	42a6      	cmp	r6, r4
 800c64a:	d109      	bne.n	800c660 <__libc_init_array+0x24>
 800c64c:	4d0b      	ldr	r5, [pc, #44]	@ (800c67c <__libc_init_array+0x40>)
 800c64e:	4c0c      	ldr	r4, [pc, #48]	@ (800c680 <__libc_init_array+0x44>)
 800c650:	f004 fb54 	bl	8010cfc <_init>
 800c654:	1b64      	subs	r4, r4, r5
 800c656:	10a4      	asrs	r4, r4, #2
 800c658:	2600      	movs	r6, #0
 800c65a:	42a6      	cmp	r6, r4
 800c65c:	d105      	bne.n	800c66a <__libc_init_array+0x2e>
 800c65e:	bd70      	pop	{r4, r5, r6, pc}
 800c660:	f855 3b04 	ldr.w	r3, [r5], #4
 800c664:	4798      	blx	r3
 800c666:	3601      	adds	r6, #1
 800c668:	e7ee      	b.n	800c648 <__libc_init_array+0xc>
 800c66a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c66e:	4798      	blx	r3
 800c670:	3601      	adds	r6, #1
 800c672:	e7f2      	b.n	800c65a <__libc_init_array+0x1e>
 800c674:	080115d8 	.word	0x080115d8
 800c678:	080115d8 	.word	0x080115d8
 800c67c:	080115d8 	.word	0x080115d8
 800c680:	080115dc 	.word	0x080115dc

0800c684 <__retarget_lock_init_recursive>:
 800c684:	4770      	bx	lr

0800c686 <__retarget_lock_acquire_recursive>:
 800c686:	4770      	bx	lr

0800c688 <__retarget_lock_release_recursive>:
 800c688:	4770      	bx	lr

0800c68a <memcpy>:
 800c68a:	440a      	add	r2, r1
 800c68c:	4291      	cmp	r1, r2
 800c68e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c692:	d100      	bne.n	800c696 <memcpy+0xc>
 800c694:	4770      	bx	lr
 800c696:	b510      	push	{r4, lr}
 800c698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c69c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6a0:	4291      	cmp	r1, r2
 800c6a2:	d1f9      	bne.n	800c698 <memcpy+0xe>
 800c6a4:	bd10      	pop	{r4, pc}

0800c6a6 <copysign>:
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	ec51 0b10 	vmov	r0, r1, d0
 800c6ac:	ed8d 1b00 	vstr	d1, [sp]
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800c6b6:	9901      	ldr	r1, [sp, #4]
 800c6b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c6bc:	ea40 0301 	orr.w	r3, r0, r1
 800c6c0:	ec43 2b10 	vmov	d0, r2, r3
 800c6c4:	b002      	add	sp, #8
 800c6c6:	4770      	bx	lr

0800c6c8 <quorem>:
 800c6c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6cc:	6903      	ldr	r3, [r0, #16]
 800c6ce:	690c      	ldr	r4, [r1, #16]
 800c6d0:	42a3      	cmp	r3, r4
 800c6d2:	4607      	mov	r7, r0
 800c6d4:	db7e      	blt.n	800c7d4 <quorem+0x10c>
 800c6d6:	3c01      	subs	r4, #1
 800c6d8:	f101 0814 	add.w	r8, r1, #20
 800c6dc:	00a3      	lsls	r3, r4, #2
 800c6de:	f100 0514 	add.w	r5, r0, #20
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6e8:	9301      	str	r3, [sp, #4]
 800c6ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c6fa:	fbb2 f6f3 	udiv	r6, r2, r3
 800c6fe:	d32e      	bcc.n	800c75e <quorem+0x96>
 800c700:	f04f 0a00 	mov.w	sl, #0
 800c704:	46c4      	mov	ip, r8
 800c706:	46ae      	mov	lr, r5
 800c708:	46d3      	mov	fp, sl
 800c70a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c70e:	b298      	uxth	r0, r3
 800c710:	fb06 a000 	mla	r0, r6, r0, sl
 800c714:	0c02      	lsrs	r2, r0, #16
 800c716:	0c1b      	lsrs	r3, r3, #16
 800c718:	fb06 2303 	mla	r3, r6, r3, r2
 800c71c:	f8de 2000 	ldr.w	r2, [lr]
 800c720:	b280      	uxth	r0, r0
 800c722:	b292      	uxth	r2, r2
 800c724:	1a12      	subs	r2, r2, r0
 800c726:	445a      	add	r2, fp
 800c728:	f8de 0000 	ldr.w	r0, [lr]
 800c72c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c730:	b29b      	uxth	r3, r3
 800c732:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c736:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c73a:	b292      	uxth	r2, r2
 800c73c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c740:	45e1      	cmp	r9, ip
 800c742:	f84e 2b04 	str.w	r2, [lr], #4
 800c746:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c74a:	d2de      	bcs.n	800c70a <quorem+0x42>
 800c74c:	9b00      	ldr	r3, [sp, #0]
 800c74e:	58eb      	ldr	r3, [r5, r3]
 800c750:	b92b      	cbnz	r3, 800c75e <quorem+0x96>
 800c752:	9b01      	ldr	r3, [sp, #4]
 800c754:	3b04      	subs	r3, #4
 800c756:	429d      	cmp	r5, r3
 800c758:	461a      	mov	r2, r3
 800c75a:	d32f      	bcc.n	800c7bc <quorem+0xf4>
 800c75c:	613c      	str	r4, [r7, #16]
 800c75e:	4638      	mov	r0, r7
 800c760:	f001 f978 	bl	800da54 <__mcmp>
 800c764:	2800      	cmp	r0, #0
 800c766:	db25      	blt.n	800c7b4 <quorem+0xec>
 800c768:	4629      	mov	r1, r5
 800c76a:	2000      	movs	r0, #0
 800c76c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c770:	f8d1 c000 	ldr.w	ip, [r1]
 800c774:	fa1f fe82 	uxth.w	lr, r2
 800c778:	fa1f f38c 	uxth.w	r3, ip
 800c77c:	eba3 030e 	sub.w	r3, r3, lr
 800c780:	4403      	add	r3, r0
 800c782:	0c12      	lsrs	r2, r2, #16
 800c784:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c788:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c792:	45c1      	cmp	r9, r8
 800c794:	f841 3b04 	str.w	r3, [r1], #4
 800c798:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c79c:	d2e6      	bcs.n	800c76c <quorem+0xa4>
 800c79e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7a6:	b922      	cbnz	r2, 800c7b2 <quorem+0xea>
 800c7a8:	3b04      	subs	r3, #4
 800c7aa:	429d      	cmp	r5, r3
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	d30b      	bcc.n	800c7c8 <quorem+0x100>
 800c7b0:	613c      	str	r4, [r7, #16]
 800c7b2:	3601      	adds	r6, #1
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	b003      	add	sp, #12
 800c7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7bc:	6812      	ldr	r2, [r2, #0]
 800c7be:	3b04      	subs	r3, #4
 800c7c0:	2a00      	cmp	r2, #0
 800c7c2:	d1cb      	bne.n	800c75c <quorem+0x94>
 800c7c4:	3c01      	subs	r4, #1
 800c7c6:	e7c6      	b.n	800c756 <quorem+0x8e>
 800c7c8:	6812      	ldr	r2, [r2, #0]
 800c7ca:	3b04      	subs	r3, #4
 800c7cc:	2a00      	cmp	r2, #0
 800c7ce:	d1ef      	bne.n	800c7b0 <quorem+0xe8>
 800c7d0:	3c01      	subs	r4, #1
 800c7d2:	e7ea      	b.n	800c7aa <quorem+0xe2>
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	e7ee      	b.n	800c7b6 <quorem+0xee>

0800c7d8 <_dtoa_r>:
 800c7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7dc:	69c7      	ldr	r7, [r0, #28]
 800c7de:	b099      	sub	sp, #100	@ 0x64
 800c7e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c7e4:	ec55 4b10 	vmov	r4, r5, d0
 800c7e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c7ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800c7ec:	4683      	mov	fp, r0
 800c7ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7f2:	b97f      	cbnz	r7, 800c814 <_dtoa_r+0x3c>
 800c7f4:	2010      	movs	r0, #16
 800c7f6:	f000 fdfd 	bl	800d3f4 <malloc>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800c800:	b920      	cbnz	r0, 800c80c <_dtoa_r+0x34>
 800c802:	4ba7      	ldr	r3, [pc, #668]	@ (800caa0 <_dtoa_r+0x2c8>)
 800c804:	21ef      	movs	r1, #239	@ 0xef
 800c806:	48a7      	ldr	r0, [pc, #668]	@ (800caa4 <_dtoa_r+0x2cc>)
 800c808:	f001 fc5a 	bl	800e0c0 <__assert_func>
 800c80c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c810:	6007      	str	r7, [r0, #0]
 800c812:	60c7      	str	r7, [r0, #12]
 800c814:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c818:	6819      	ldr	r1, [r3, #0]
 800c81a:	b159      	cbz	r1, 800c834 <_dtoa_r+0x5c>
 800c81c:	685a      	ldr	r2, [r3, #4]
 800c81e:	604a      	str	r2, [r1, #4]
 800c820:	2301      	movs	r3, #1
 800c822:	4093      	lsls	r3, r2
 800c824:	608b      	str	r3, [r1, #8]
 800c826:	4658      	mov	r0, fp
 800c828:	f000 feda 	bl	800d5e0 <_Bfree>
 800c82c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c830:	2200      	movs	r2, #0
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	1e2b      	subs	r3, r5, #0
 800c836:	bfb9      	ittee	lt
 800c838:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c83c:	9303      	strlt	r3, [sp, #12]
 800c83e:	2300      	movge	r3, #0
 800c840:	6033      	strge	r3, [r6, #0]
 800c842:	9f03      	ldr	r7, [sp, #12]
 800c844:	4b98      	ldr	r3, [pc, #608]	@ (800caa8 <_dtoa_r+0x2d0>)
 800c846:	bfbc      	itt	lt
 800c848:	2201      	movlt	r2, #1
 800c84a:	6032      	strlt	r2, [r6, #0]
 800c84c:	43bb      	bics	r3, r7
 800c84e:	d112      	bne.n	800c876 <_dtoa_r+0x9e>
 800c850:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c852:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c85c:	4323      	orrs	r3, r4
 800c85e:	f000 854d 	beq.w	800d2fc <_dtoa_r+0xb24>
 800c862:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c864:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cabc <_dtoa_r+0x2e4>
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f000 854f 	beq.w	800d30c <_dtoa_r+0xb34>
 800c86e:	f10a 0303 	add.w	r3, sl, #3
 800c872:	f000 bd49 	b.w	800d308 <_dtoa_r+0xb30>
 800c876:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c87a:	2200      	movs	r2, #0
 800c87c:	ec51 0b17 	vmov	r0, r1, d7
 800c880:	2300      	movs	r3, #0
 800c882:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c886:	f7f4 f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c88a:	4680      	mov	r8, r0
 800c88c:	b158      	cbz	r0, 800c8a6 <_dtoa_r+0xce>
 800c88e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c890:	2301      	movs	r3, #1
 800c892:	6013      	str	r3, [r2, #0]
 800c894:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c896:	b113      	cbz	r3, 800c89e <_dtoa_r+0xc6>
 800c898:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c89a:	4b84      	ldr	r3, [pc, #528]	@ (800caac <_dtoa_r+0x2d4>)
 800c89c:	6013      	str	r3, [r2, #0]
 800c89e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cac0 <_dtoa_r+0x2e8>
 800c8a2:	f000 bd33 	b.w	800d30c <_dtoa_r+0xb34>
 800c8a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c8aa:	aa16      	add	r2, sp, #88	@ 0x58
 800c8ac:	a917      	add	r1, sp, #92	@ 0x5c
 800c8ae:	4658      	mov	r0, fp
 800c8b0:	f001 f980 	bl	800dbb4 <__d2b>
 800c8b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c8b8:	4681      	mov	r9, r0
 800c8ba:	2e00      	cmp	r6, #0
 800c8bc:	d077      	beq.n	800c9ae <_dtoa_r+0x1d6>
 800c8be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c8c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c8d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c8d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c8d8:	4619      	mov	r1, r3
 800c8da:	2200      	movs	r2, #0
 800c8dc:	4b74      	ldr	r3, [pc, #464]	@ (800cab0 <_dtoa_r+0x2d8>)
 800c8de:	f7f3 fcd3 	bl	8000288 <__aeabi_dsub>
 800c8e2:	a369      	add	r3, pc, #420	@ (adr r3, 800ca88 <_dtoa_r+0x2b0>)
 800c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e8:	f7f3 fe86 	bl	80005f8 <__aeabi_dmul>
 800c8ec:	a368      	add	r3, pc, #416	@ (adr r3, 800ca90 <_dtoa_r+0x2b8>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	f7f3 fccb 	bl	800028c <__adddf3>
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	460d      	mov	r5, r1
 800c8fc:	f7f3 fe12 	bl	8000524 <__aeabi_i2d>
 800c900:	a365      	add	r3, pc, #404	@ (adr r3, 800ca98 <_dtoa_r+0x2c0>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fe77 	bl	80005f8 <__aeabi_dmul>
 800c90a:	4602      	mov	r2, r0
 800c90c:	460b      	mov	r3, r1
 800c90e:	4620      	mov	r0, r4
 800c910:	4629      	mov	r1, r5
 800c912:	f7f3 fcbb 	bl	800028c <__adddf3>
 800c916:	4604      	mov	r4, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	f7f4 f91d 	bl	8000b58 <__aeabi_d2iz>
 800c91e:	2200      	movs	r2, #0
 800c920:	4607      	mov	r7, r0
 800c922:	2300      	movs	r3, #0
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	f7f4 f8d8 	bl	8000adc <__aeabi_dcmplt>
 800c92c:	b140      	cbz	r0, 800c940 <_dtoa_r+0x168>
 800c92e:	4638      	mov	r0, r7
 800c930:	f7f3 fdf8 	bl	8000524 <__aeabi_i2d>
 800c934:	4622      	mov	r2, r4
 800c936:	462b      	mov	r3, r5
 800c938:	f7f4 f8c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c93c:	b900      	cbnz	r0, 800c940 <_dtoa_r+0x168>
 800c93e:	3f01      	subs	r7, #1
 800c940:	2f16      	cmp	r7, #22
 800c942:	d851      	bhi.n	800c9e8 <_dtoa_r+0x210>
 800c944:	4b5b      	ldr	r3, [pc, #364]	@ (800cab4 <_dtoa_r+0x2dc>)
 800c946:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c952:	f7f4 f8c3 	bl	8000adc <__aeabi_dcmplt>
 800c956:	2800      	cmp	r0, #0
 800c958:	d048      	beq.n	800c9ec <_dtoa_r+0x214>
 800c95a:	3f01      	subs	r7, #1
 800c95c:	2300      	movs	r3, #0
 800c95e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c960:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c962:	1b9b      	subs	r3, r3, r6
 800c964:	1e5a      	subs	r2, r3, #1
 800c966:	bf44      	itt	mi
 800c968:	f1c3 0801 	rsbmi	r8, r3, #1
 800c96c:	2300      	movmi	r3, #0
 800c96e:	9208      	str	r2, [sp, #32]
 800c970:	bf54      	ite	pl
 800c972:	f04f 0800 	movpl.w	r8, #0
 800c976:	9308      	strmi	r3, [sp, #32]
 800c978:	2f00      	cmp	r7, #0
 800c97a:	db39      	blt.n	800c9f0 <_dtoa_r+0x218>
 800c97c:	9b08      	ldr	r3, [sp, #32]
 800c97e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c980:	443b      	add	r3, r7
 800c982:	9308      	str	r3, [sp, #32]
 800c984:	2300      	movs	r3, #0
 800c986:	930a      	str	r3, [sp, #40]	@ 0x28
 800c988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c98a:	2b09      	cmp	r3, #9
 800c98c:	d864      	bhi.n	800ca58 <_dtoa_r+0x280>
 800c98e:	2b05      	cmp	r3, #5
 800c990:	bfc4      	itt	gt
 800c992:	3b04      	subgt	r3, #4
 800c994:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c998:	f1a3 0302 	sub.w	r3, r3, #2
 800c99c:	bfcc      	ite	gt
 800c99e:	2400      	movgt	r4, #0
 800c9a0:	2401      	movle	r4, #1
 800c9a2:	2b03      	cmp	r3, #3
 800c9a4:	d863      	bhi.n	800ca6e <_dtoa_r+0x296>
 800c9a6:	e8df f003 	tbb	[pc, r3]
 800c9aa:	372a      	.short	0x372a
 800c9ac:	5535      	.short	0x5535
 800c9ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c9b2:	441e      	add	r6, r3
 800c9b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c9b8:	2b20      	cmp	r3, #32
 800c9ba:	bfc1      	itttt	gt
 800c9bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c9c0:	409f      	lslgt	r7, r3
 800c9c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c9c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c9ca:	bfd6      	itet	le
 800c9cc:	f1c3 0320 	rsble	r3, r3, #32
 800c9d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800c9d4:	fa04 f003 	lslle.w	r0, r4, r3
 800c9d8:	f7f3 fd94 	bl	8000504 <__aeabi_ui2d>
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c9e2:	3e01      	subs	r6, #1
 800c9e4:	9214      	str	r2, [sp, #80]	@ 0x50
 800c9e6:	e777      	b.n	800c8d8 <_dtoa_r+0x100>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e7b8      	b.n	800c95e <_dtoa_r+0x186>
 800c9ec:	9012      	str	r0, [sp, #72]	@ 0x48
 800c9ee:	e7b7      	b.n	800c960 <_dtoa_r+0x188>
 800c9f0:	427b      	negs	r3, r7
 800c9f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	eba8 0807 	sub.w	r8, r8, r7
 800c9fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9fc:	e7c4      	b.n	800c988 <_dtoa_r+0x1b0>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	dc35      	bgt.n	800ca74 <_dtoa_r+0x29c>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	9307      	str	r3, [sp, #28]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca12:	e00b      	b.n	800ca2c <_dtoa_r+0x254>
 800ca14:	2301      	movs	r3, #1
 800ca16:	e7f3      	b.n	800ca00 <_dtoa_r+0x228>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca1e:	18fb      	adds	r3, r7, r3
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	3301      	adds	r3, #1
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	9307      	str	r3, [sp, #28]
 800ca28:	bfb8      	it	lt
 800ca2a:	2301      	movlt	r3, #1
 800ca2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ca30:	2100      	movs	r1, #0
 800ca32:	2204      	movs	r2, #4
 800ca34:	f102 0514 	add.w	r5, r2, #20
 800ca38:	429d      	cmp	r5, r3
 800ca3a:	d91f      	bls.n	800ca7c <_dtoa_r+0x2a4>
 800ca3c:	6041      	str	r1, [r0, #4]
 800ca3e:	4658      	mov	r0, fp
 800ca40:	f000 fd8e 	bl	800d560 <_Balloc>
 800ca44:	4682      	mov	sl, r0
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d13c      	bne.n	800cac4 <_dtoa_r+0x2ec>
 800ca4a:	4b1b      	ldr	r3, [pc, #108]	@ (800cab8 <_dtoa_r+0x2e0>)
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ca52:	e6d8      	b.n	800c806 <_dtoa_r+0x2e>
 800ca54:	2301      	movs	r3, #1
 800ca56:	e7e0      	b.n	800ca1a <_dtoa_r+0x242>
 800ca58:	2401      	movs	r4, #1
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ca60:	f04f 33ff 	mov.w	r3, #4294967295
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	9307      	str	r3, [sp, #28]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2312      	movs	r3, #18
 800ca6c:	e7d0      	b.n	800ca10 <_dtoa_r+0x238>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca72:	e7f5      	b.n	800ca60 <_dtoa_r+0x288>
 800ca74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	9307      	str	r3, [sp, #28]
 800ca7a:	e7d7      	b.n	800ca2c <_dtoa_r+0x254>
 800ca7c:	3101      	adds	r1, #1
 800ca7e:	0052      	lsls	r2, r2, #1
 800ca80:	e7d8      	b.n	800ca34 <_dtoa_r+0x25c>
 800ca82:	bf00      	nop
 800ca84:	f3af 8000 	nop.w
 800ca88:	636f4361 	.word	0x636f4361
 800ca8c:	3fd287a7 	.word	0x3fd287a7
 800ca90:	8b60c8b3 	.word	0x8b60c8b3
 800ca94:	3fc68a28 	.word	0x3fc68a28
 800ca98:	509f79fb 	.word	0x509f79fb
 800ca9c:	3fd34413 	.word	0x3fd34413
 800caa0:	08010e19 	.word	0x08010e19
 800caa4:	08010e30 	.word	0x08010e30
 800caa8:	7ff00000 	.word	0x7ff00000
 800caac:	08010de9 	.word	0x08010de9
 800cab0:	3ff80000 	.word	0x3ff80000
 800cab4:	08010f28 	.word	0x08010f28
 800cab8:	08010e88 	.word	0x08010e88
 800cabc:	08010e15 	.word	0x08010e15
 800cac0:	08010de8 	.word	0x08010de8
 800cac4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cac8:	6018      	str	r0, [r3, #0]
 800caca:	9b07      	ldr	r3, [sp, #28]
 800cacc:	2b0e      	cmp	r3, #14
 800cace:	f200 80a4 	bhi.w	800cc1a <_dtoa_r+0x442>
 800cad2:	2c00      	cmp	r4, #0
 800cad4:	f000 80a1 	beq.w	800cc1a <_dtoa_r+0x442>
 800cad8:	2f00      	cmp	r7, #0
 800cada:	dd33      	ble.n	800cb44 <_dtoa_r+0x36c>
 800cadc:	4bad      	ldr	r3, [pc, #692]	@ (800cd94 <_dtoa_r+0x5bc>)
 800cade:	f007 020f 	and.w	r2, r7, #15
 800cae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cae6:	ed93 7b00 	vldr	d7, [r3]
 800caea:	05f8      	lsls	r0, r7, #23
 800caec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800caf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800caf4:	d516      	bpl.n	800cb24 <_dtoa_r+0x34c>
 800caf6:	4ba8      	ldr	r3, [pc, #672]	@ (800cd98 <_dtoa_r+0x5c0>)
 800caf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cafc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb00:	f7f3 fea4 	bl	800084c <__aeabi_ddiv>
 800cb04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb08:	f004 040f 	and.w	r4, r4, #15
 800cb0c:	2603      	movs	r6, #3
 800cb0e:	4da2      	ldr	r5, [pc, #648]	@ (800cd98 <_dtoa_r+0x5c0>)
 800cb10:	b954      	cbnz	r4, 800cb28 <_dtoa_r+0x350>
 800cb12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb1a:	f7f3 fe97 	bl	800084c <__aeabi_ddiv>
 800cb1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb22:	e028      	b.n	800cb76 <_dtoa_r+0x39e>
 800cb24:	2602      	movs	r6, #2
 800cb26:	e7f2      	b.n	800cb0e <_dtoa_r+0x336>
 800cb28:	07e1      	lsls	r1, r4, #31
 800cb2a:	d508      	bpl.n	800cb3e <_dtoa_r+0x366>
 800cb2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb34:	f7f3 fd60 	bl	80005f8 <__aeabi_dmul>
 800cb38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb3c:	3601      	adds	r6, #1
 800cb3e:	1064      	asrs	r4, r4, #1
 800cb40:	3508      	adds	r5, #8
 800cb42:	e7e5      	b.n	800cb10 <_dtoa_r+0x338>
 800cb44:	f000 80d2 	beq.w	800ccec <_dtoa_r+0x514>
 800cb48:	427c      	negs	r4, r7
 800cb4a:	4b92      	ldr	r3, [pc, #584]	@ (800cd94 <_dtoa_r+0x5bc>)
 800cb4c:	4d92      	ldr	r5, [pc, #584]	@ (800cd98 <_dtoa_r+0x5c0>)
 800cb4e:	f004 020f 	and.w	r2, r4, #15
 800cb52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb5e:	f7f3 fd4b 	bl	80005f8 <__aeabi_dmul>
 800cb62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb66:	1124      	asrs	r4, r4, #4
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2602      	movs	r6, #2
 800cb6c:	2c00      	cmp	r4, #0
 800cb6e:	f040 80b2 	bne.w	800ccd6 <_dtoa_r+0x4fe>
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1d3      	bne.n	800cb1e <_dtoa_r+0x346>
 800cb76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cb78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f000 80b7 	beq.w	800ccf0 <_dtoa_r+0x518>
 800cb82:	4b86      	ldr	r3, [pc, #536]	@ (800cd9c <_dtoa_r+0x5c4>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	4620      	mov	r0, r4
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7f3 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	f000 80ae 	beq.w	800ccf0 <_dtoa_r+0x518>
 800cb94:	9b07      	ldr	r3, [sp, #28]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f000 80aa 	beq.w	800ccf0 <_dtoa_r+0x518>
 800cb9c:	9b00      	ldr	r3, [sp, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	dd37      	ble.n	800cc12 <_dtoa_r+0x43a>
 800cba2:	1e7b      	subs	r3, r7, #1
 800cba4:	9304      	str	r3, [sp, #16]
 800cba6:	4620      	mov	r0, r4
 800cba8:	4b7d      	ldr	r3, [pc, #500]	@ (800cda0 <_dtoa_r+0x5c8>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	4629      	mov	r1, r5
 800cbae:	f7f3 fd23 	bl	80005f8 <__aeabi_dmul>
 800cbb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbb6:	9c00      	ldr	r4, [sp, #0]
 800cbb8:	3601      	adds	r6, #1
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f7f3 fcb2 	bl	8000524 <__aeabi_i2d>
 800cbc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbc4:	f7f3 fd18 	bl	80005f8 <__aeabi_dmul>
 800cbc8:	4b76      	ldr	r3, [pc, #472]	@ (800cda4 <_dtoa_r+0x5cc>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f7f3 fb5e 	bl	800028c <__adddf3>
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cbd6:	2c00      	cmp	r4, #0
 800cbd8:	f040 808d 	bne.w	800ccf6 <_dtoa_r+0x51e>
 800cbdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbe0:	4b71      	ldr	r3, [pc, #452]	@ (800cda8 <_dtoa_r+0x5d0>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f7f3 fb50 	bl	8000288 <__aeabi_dsub>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	460b      	mov	r3, r1
 800cbec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	4633      	mov	r3, r6
 800cbf4:	f7f3 ff90 	bl	8000b18 <__aeabi_dcmpgt>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	f040 828b 	bne.w	800d114 <_dtoa_r+0x93c>
 800cbfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc02:	462a      	mov	r2, r5
 800cc04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cc08:	f7f3 ff68 	bl	8000adc <__aeabi_dcmplt>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	f040 8128 	bne.w	800ce62 <_dtoa_r+0x68a>
 800cc12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cc16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cc1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f2c0 815a 	blt.w	800ced6 <_dtoa_r+0x6fe>
 800cc22:	2f0e      	cmp	r7, #14
 800cc24:	f300 8157 	bgt.w	800ced6 <_dtoa_r+0x6fe>
 800cc28:	4b5a      	ldr	r3, [pc, #360]	@ (800cd94 <_dtoa_r+0x5bc>)
 800cc2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc2e:	ed93 7b00 	vldr	d7, [r3]
 800cc32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	ed8d 7b00 	vstr	d7, [sp]
 800cc3a:	da03      	bge.n	800cc44 <_dtoa_r+0x46c>
 800cc3c:	9b07      	ldr	r3, [sp, #28]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	f340 8101 	ble.w	800ce46 <_dtoa_r+0x66e>
 800cc44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cc48:	4656      	mov	r6, sl
 800cc4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc4e:	4620      	mov	r0, r4
 800cc50:	4629      	mov	r1, r5
 800cc52:	f7f3 fdfb 	bl	800084c <__aeabi_ddiv>
 800cc56:	f7f3 ff7f 	bl	8000b58 <__aeabi_d2iz>
 800cc5a:	4680      	mov	r8, r0
 800cc5c:	f7f3 fc62 	bl	8000524 <__aeabi_i2d>
 800cc60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc64:	f7f3 fcc8 	bl	80005f8 <__aeabi_dmul>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	4629      	mov	r1, r5
 800cc70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cc74:	f7f3 fb08 	bl	8000288 <__aeabi_dsub>
 800cc78:	f806 4b01 	strb.w	r4, [r6], #1
 800cc7c:	9d07      	ldr	r5, [sp, #28]
 800cc7e:	eba6 040a 	sub.w	r4, r6, sl
 800cc82:	42a5      	cmp	r5, r4
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	f040 8117 	bne.w	800ceba <_dtoa_r+0x6e2>
 800cc8c:	f7f3 fafe 	bl	800028c <__adddf3>
 800cc90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc94:	4604      	mov	r4, r0
 800cc96:	460d      	mov	r5, r1
 800cc98:	f7f3 ff3e 	bl	8000b18 <__aeabi_dcmpgt>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	f040 80f9 	bne.w	800ce94 <_dtoa_r+0x6bc>
 800cca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cca6:	4620      	mov	r0, r4
 800cca8:	4629      	mov	r1, r5
 800ccaa:	f7f3 ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccae:	b118      	cbz	r0, 800ccb8 <_dtoa_r+0x4e0>
 800ccb0:	f018 0f01 	tst.w	r8, #1
 800ccb4:	f040 80ee 	bne.w	800ce94 <_dtoa_r+0x6bc>
 800ccb8:	4649      	mov	r1, r9
 800ccba:	4658      	mov	r0, fp
 800ccbc:	f000 fc90 	bl	800d5e0 <_Bfree>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	7033      	strb	r3, [r6, #0]
 800ccc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ccc6:	3701      	adds	r7, #1
 800ccc8:	601f      	str	r7, [r3, #0]
 800ccca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f000 831d 	beq.w	800d30c <_dtoa_r+0xb34>
 800ccd2:	601e      	str	r6, [r3, #0]
 800ccd4:	e31a      	b.n	800d30c <_dtoa_r+0xb34>
 800ccd6:	07e2      	lsls	r2, r4, #31
 800ccd8:	d505      	bpl.n	800cce6 <_dtoa_r+0x50e>
 800ccda:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccde:	f7f3 fc8b 	bl	80005f8 <__aeabi_dmul>
 800cce2:	3601      	adds	r6, #1
 800cce4:	2301      	movs	r3, #1
 800cce6:	1064      	asrs	r4, r4, #1
 800cce8:	3508      	adds	r5, #8
 800ccea:	e73f      	b.n	800cb6c <_dtoa_r+0x394>
 800ccec:	2602      	movs	r6, #2
 800ccee:	e742      	b.n	800cb76 <_dtoa_r+0x39e>
 800ccf0:	9c07      	ldr	r4, [sp, #28]
 800ccf2:	9704      	str	r7, [sp, #16]
 800ccf4:	e761      	b.n	800cbba <_dtoa_r+0x3e2>
 800ccf6:	4b27      	ldr	r3, [pc, #156]	@ (800cd94 <_dtoa_r+0x5bc>)
 800ccf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ccfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ccfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd02:	4454      	add	r4, sl
 800cd04:	2900      	cmp	r1, #0
 800cd06:	d053      	beq.n	800cdb0 <_dtoa_r+0x5d8>
 800cd08:	4928      	ldr	r1, [pc, #160]	@ (800cdac <_dtoa_r+0x5d4>)
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	f7f3 fd9e 	bl	800084c <__aeabi_ddiv>
 800cd10:	4633      	mov	r3, r6
 800cd12:	462a      	mov	r2, r5
 800cd14:	f7f3 fab8 	bl	8000288 <__aeabi_dsub>
 800cd18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cd1c:	4656      	mov	r6, sl
 800cd1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd22:	f7f3 ff19 	bl	8000b58 <__aeabi_d2iz>
 800cd26:	4605      	mov	r5, r0
 800cd28:	f7f3 fbfc 	bl	8000524 <__aeabi_i2d>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd34:	f7f3 faa8 	bl	8000288 <__aeabi_dsub>
 800cd38:	3530      	adds	r5, #48	@ 0x30
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd42:	f806 5b01 	strb.w	r5, [r6], #1
 800cd46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cd4a:	f7f3 fec7 	bl	8000adc <__aeabi_dcmplt>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d171      	bne.n	800ce36 <_dtoa_r+0x65e>
 800cd52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd56:	4911      	ldr	r1, [pc, #68]	@ (800cd9c <_dtoa_r+0x5c4>)
 800cd58:	2000      	movs	r0, #0
 800cd5a:	f7f3 fa95 	bl	8000288 <__aeabi_dsub>
 800cd5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cd62:	f7f3 febb 	bl	8000adc <__aeabi_dcmplt>
 800cd66:	2800      	cmp	r0, #0
 800cd68:	f040 8095 	bne.w	800ce96 <_dtoa_r+0x6be>
 800cd6c:	42a6      	cmp	r6, r4
 800cd6e:	f43f af50 	beq.w	800cc12 <_dtoa_r+0x43a>
 800cd72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cd76:	4b0a      	ldr	r3, [pc, #40]	@ (800cda0 <_dtoa_r+0x5c8>)
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f7f3 fc3d 	bl	80005f8 <__aeabi_dmul>
 800cd7e:	4b08      	ldr	r3, [pc, #32]	@ (800cda0 <_dtoa_r+0x5c8>)
 800cd80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cd84:	2200      	movs	r2, #0
 800cd86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd8a:	f7f3 fc35 	bl	80005f8 <__aeabi_dmul>
 800cd8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd92:	e7c4      	b.n	800cd1e <_dtoa_r+0x546>
 800cd94:	08010f28 	.word	0x08010f28
 800cd98:	08010f00 	.word	0x08010f00
 800cd9c:	3ff00000 	.word	0x3ff00000
 800cda0:	40240000 	.word	0x40240000
 800cda4:	401c0000 	.word	0x401c0000
 800cda8:	40140000 	.word	0x40140000
 800cdac:	3fe00000 	.word	0x3fe00000
 800cdb0:	4631      	mov	r1, r6
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f7f3 fc20 	bl	80005f8 <__aeabi_dmul>
 800cdb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cdbc:	9415      	str	r4, [sp, #84]	@ 0x54
 800cdbe:	4656      	mov	r6, sl
 800cdc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdc4:	f7f3 fec8 	bl	8000b58 <__aeabi_d2iz>
 800cdc8:	4605      	mov	r5, r0
 800cdca:	f7f3 fbab 	bl	8000524 <__aeabi_i2d>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdd6:	f7f3 fa57 	bl	8000288 <__aeabi_dsub>
 800cdda:	3530      	adds	r5, #48	@ 0x30
 800cddc:	f806 5b01 	strb.w	r5, [r6], #1
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	42a6      	cmp	r6, r4
 800cde6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cdea:	f04f 0200 	mov.w	r2, #0
 800cdee:	d124      	bne.n	800ce3a <_dtoa_r+0x662>
 800cdf0:	4bac      	ldr	r3, [pc, #688]	@ (800d0a4 <_dtoa_r+0x8cc>)
 800cdf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cdf6:	f7f3 fa49 	bl	800028c <__adddf3>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce02:	f7f3 fe89 	bl	8000b18 <__aeabi_dcmpgt>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d145      	bne.n	800ce96 <_dtoa_r+0x6be>
 800ce0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ce0e:	49a5      	ldr	r1, [pc, #660]	@ (800d0a4 <_dtoa_r+0x8cc>)
 800ce10:	2000      	movs	r0, #0
 800ce12:	f7f3 fa39 	bl	8000288 <__aeabi_dsub>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce1e:	f7f3 fe5d 	bl	8000adc <__aeabi_dcmplt>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	f43f aef5 	beq.w	800cc12 <_dtoa_r+0x43a>
 800ce28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ce2a:	1e73      	subs	r3, r6, #1
 800ce2c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ce2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ce32:	2b30      	cmp	r3, #48	@ 0x30
 800ce34:	d0f8      	beq.n	800ce28 <_dtoa_r+0x650>
 800ce36:	9f04      	ldr	r7, [sp, #16]
 800ce38:	e73e      	b.n	800ccb8 <_dtoa_r+0x4e0>
 800ce3a:	4b9b      	ldr	r3, [pc, #620]	@ (800d0a8 <_dtoa_r+0x8d0>)
 800ce3c:	f7f3 fbdc 	bl	80005f8 <__aeabi_dmul>
 800ce40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce44:	e7bc      	b.n	800cdc0 <_dtoa_r+0x5e8>
 800ce46:	d10c      	bne.n	800ce62 <_dtoa_r+0x68a>
 800ce48:	4b98      	ldr	r3, [pc, #608]	@ (800d0ac <_dtoa_r+0x8d4>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce50:	f7f3 fbd2 	bl	80005f8 <__aeabi_dmul>
 800ce54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce58:	f7f3 fe54 	bl	8000b04 <__aeabi_dcmpge>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	f000 8157 	beq.w	800d110 <_dtoa_r+0x938>
 800ce62:	2400      	movs	r4, #0
 800ce64:	4625      	mov	r5, r4
 800ce66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce68:	43db      	mvns	r3, r3
 800ce6a:	9304      	str	r3, [sp, #16]
 800ce6c:	4656      	mov	r6, sl
 800ce6e:	2700      	movs	r7, #0
 800ce70:	4621      	mov	r1, r4
 800ce72:	4658      	mov	r0, fp
 800ce74:	f000 fbb4 	bl	800d5e0 <_Bfree>
 800ce78:	2d00      	cmp	r5, #0
 800ce7a:	d0dc      	beq.n	800ce36 <_dtoa_r+0x65e>
 800ce7c:	b12f      	cbz	r7, 800ce8a <_dtoa_r+0x6b2>
 800ce7e:	42af      	cmp	r7, r5
 800ce80:	d003      	beq.n	800ce8a <_dtoa_r+0x6b2>
 800ce82:	4639      	mov	r1, r7
 800ce84:	4658      	mov	r0, fp
 800ce86:	f000 fbab 	bl	800d5e0 <_Bfree>
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	4658      	mov	r0, fp
 800ce8e:	f000 fba7 	bl	800d5e0 <_Bfree>
 800ce92:	e7d0      	b.n	800ce36 <_dtoa_r+0x65e>
 800ce94:	9704      	str	r7, [sp, #16]
 800ce96:	4633      	mov	r3, r6
 800ce98:	461e      	mov	r6, r3
 800ce9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce9e:	2a39      	cmp	r2, #57	@ 0x39
 800cea0:	d107      	bne.n	800ceb2 <_dtoa_r+0x6da>
 800cea2:	459a      	cmp	sl, r3
 800cea4:	d1f8      	bne.n	800ce98 <_dtoa_r+0x6c0>
 800cea6:	9a04      	ldr	r2, [sp, #16]
 800cea8:	3201      	adds	r2, #1
 800ceaa:	9204      	str	r2, [sp, #16]
 800ceac:	2230      	movs	r2, #48	@ 0x30
 800ceae:	f88a 2000 	strb.w	r2, [sl]
 800ceb2:	781a      	ldrb	r2, [r3, #0]
 800ceb4:	3201      	adds	r2, #1
 800ceb6:	701a      	strb	r2, [r3, #0]
 800ceb8:	e7bd      	b.n	800ce36 <_dtoa_r+0x65e>
 800ceba:	4b7b      	ldr	r3, [pc, #492]	@ (800d0a8 <_dtoa_r+0x8d0>)
 800cebc:	2200      	movs	r2, #0
 800cebe:	f7f3 fb9b 	bl	80005f8 <__aeabi_dmul>
 800cec2:	2200      	movs	r2, #0
 800cec4:	2300      	movs	r3, #0
 800cec6:	4604      	mov	r4, r0
 800cec8:	460d      	mov	r5, r1
 800ceca:	f7f3 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800cece:	2800      	cmp	r0, #0
 800ced0:	f43f aebb 	beq.w	800cc4a <_dtoa_r+0x472>
 800ced4:	e6f0      	b.n	800ccb8 <_dtoa_r+0x4e0>
 800ced6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ced8:	2a00      	cmp	r2, #0
 800ceda:	f000 80db 	beq.w	800d094 <_dtoa_r+0x8bc>
 800cede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cee0:	2a01      	cmp	r2, #1
 800cee2:	f300 80bf 	bgt.w	800d064 <_dtoa_r+0x88c>
 800cee6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cee8:	2a00      	cmp	r2, #0
 800ceea:	f000 80b7 	beq.w	800d05c <_dtoa_r+0x884>
 800ceee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cef2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cef4:	4646      	mov	r6, r8
 800cef6:	9a08      	ldr	r2, [sp, #32]
 800cef8:	2101      	movs	r1, #1
 800cefa:	441a      	add	r2, r3
 800cefc:	4658      	mov	r0, fp
 800cefe:	4498      	add	r8, r3
 800cf00:	9208      	str	r2, [sp, #32]
 800cf02:	f000 fc21 	bl	800d748 <__i2b>
 800cf06:	4605      	mov	r5, r0
 800cf08:	b15e      	cbz	r6, 800cf22 <_dtoa_r+0x74a>
 800cf0a:	9b08      	ldr	r3, [sp, #32]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dd08      	ble.n	800cf22 <_dtoa_r+0x74a>
 800cf10:	42b3      	cmp	r3, r6
 800cf12:	9a08      	ldr	r2, [sp, #32]
 800cf14:	bfa8      	it	ge
 800cf16:	4633      	movge	r3, r6
 800cf18:	eba8 0803 	sub.w	r8, r8, r3
 800cf1c:	1af6      	subs	r6, r6, r3
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	9308      	str	r3, [sp, #32]
 800cf22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf24:	b1f3      	cbz	r3, 800cf64 <_dtoa_r+0x78c>
 800cf26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f000 80b7 	beq.w	800d09c <_dtoa_r+0x8c4>
 800cf2e:	b18c      	cbz	r4, 800cf54 <_dtoa_r+0x77c>
 800cf30:	4629      	mov	r1, r5
 800cf32:	4622      	mov	r2, r4
 800cf34:	4658      	mov	r0, fp
 800cf36:	f000 fcc7 	bl	800d8c8 <__pow5mult>
 800cf3a:	464a      	mov	r2, r9
 800cf3c:	4601      	mov	r1, r0
 800cf3e:	4605      	mov	r5, r0
 800cf40:	4658      	mov	r0, fp
 800cf42:	f000 fc17 	bl	800d774 <__multiply>
 800cf46:	4649      	mov	r1, r9
 800cf48:	9004      	str	r0, [sp, #16]
 800cf4a:	4658      	mov	r0, fp
 800cf4c:	f000 fb48 	bl	800d5e0 <_Bfree>
 800cf50:	9b04      	ldr	r3, [sp, #16]
 800cf52:	4699      	mov	r9, r3
 800cf54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf56:	1b1a      	subs	r2, r3, r4
 800cf58:	d004      	beq.n	800cf64 <_dtoa_r+0x78c>
 800cf5a:	4649      	mov	r1, r9
 800cf5c:	4658      	mov	r0, fp
 800cf5e:	f000 fcb3 	bl	800d8c8 <__pow5mult>
 800cf62:	4681      	mov	r9, r0
 800cf64:	2101      	movs	r1, #1
 800cf66:	4658      	mov	r0, fp
 800cf68:	f000 fbee 	bl	800d748 <__i2b>
 800cf6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf6e:	4604      	mov	r4, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f000 81cf 	beq.w	800d314 <_dtoa_r+0xb3c>
 800cf76:	461a      	mov	r2, r3
 800cf78:	4601      	mov	r1, r0
 800cf7a:	4658      	mov	r0, fp
 800cf7c:	f000 fca4 	bl	800d8c8 <__pow5mult>
 800cf80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	4604      	mov	r4, r0
 800cf86:	f300 8095 	bgt.w	800d0b4 <_dtoa_r+0x8dc>
 800cf8a:	9b02      	ldr	r3, [sp, #8]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f040 8087 	bne.w	800d0a0 <_dtoa_r+0x8c8>
 800cf92:	9b03      	ldr	r3, [sp, #12]
 800cf94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f040 8089 	bne.w	800d0b0 <_dtoa_r+0x8d8>
 800cf9e:	9b03      	ldr	r3, [sp, #12]
 800cfa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cfa4:	0d1b      	lsrs	r3, r3, #20
 800cfa6:	051b      	lsls	r3, r3, #20
 800cfa8:	b12b      	cbz	r3, 800cfb6 <_dtoa_r+0x7de>
 800cfaa:	9b08      	ldr	r3, [sp, #32]
 800cfac:	3301      	adds	r3, #1
 800cfae:	9308      	str	r3, [sp, #32]
 800cfb0:	f108 0801 	add.w	r8, r8, #1
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 81b0 	beq.w	800d320 <_dtoa_r+0xb48>
 800cfc0:	6923      	ldr	r3, [r4, #16]
 800cfc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cfc6:	6918      	ldr	r0, [r3, #16]
 800cfc8:	f000 fb72 	bl	800d6b0 <__hi0bits>
 800cfcc:	f1c0 0020 	rsb	r0, r0, #32
 800cfd0:	9b08      	ldr	r3, [sp, #32]
 800cfd2:	4418      	add	r0, r3
 800cfd4:	f010 001f 	ands.w	r0, r0, #31
 800cfd8:	d077      	beq.n	800d0ca <_dtoa_r+0x8f2>
 800cfda:	f1c0 0320 	rsb	r3, r0, #32
 800cfde:	2b04      	cmp	r3, #4
 800cfe0:	dd6b      	ble.n	800d0ba <_dtoa_r+0x8e2>
 800cfe2:	9b08      	ldr	r3, [sp, #32]
 800cfe4:	f1c0 001c 	rsb	r0, r0, #28
 800cfe8:	4403      	add	r3, r0
 800cfea:	4480      	add	r8, r0
 800cfec:	4406      	add	r6, r0
 800cfee:	9308      	str	r3, [sp, #32]
 800cff0:	f1b8 0f00 	cmp.w	r8, #0
 800cff4:	dd05      	ble.n	800d002 <_dtoa_r+0x82a>
 800cff6:	4649      	mov	r1, r9
 800cff8:	4642      	mov	r2, r8
 800cffa:	4658      	mov	r0, fp
 800cffc:	f000 fcbe 	bl	800d97c <__lshift>
 800d000:	4681      	mov	r9, r0
 800d002:	9b08      	ldr	r3, [sp, #32]
 800d004:	2b00      	cmp	r3, #0
 800d006:	dd05      	ble.n	800d014 <_dtoa_r+0x83c>
 800d008:	4621      	mov	r1, r4
 800d00a:	461a      	mov	r2, r3
 800d00c:	4658      	mov	r0, fp
 800d00e:	f000 fcb5 	bl	800d97c <__lshift>
 800d012:	4604      	mov	r4, r0
 800d014:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d016:	2b00      	cmp	r3, #0
 800d018:	d059      	beq.n	800d0ce <_dtoa_r+0x8f6>
 800d01a:	4621      	mov	r1, r4
 800d01c:	4648      	mov	r0, r9
 800d01e:	f000 fd19 	bl	800da54 <__mcmp>
 800d022:	2800      	cmp	r0, #0
 800d024:	da53      	bge.n	800d0ce <_dtoa_r+0x8f6>
 800d026:	1e7b      	subs	r3, r7, #1
 800d028:	9304      	str	r3, [sp, #16]
 800d02a:	4649      	mov	r1, r9
 800d02c:	2300      	movs	r3, #0
 800d02e:	220a      	movs	r2, #10
 800d030:	4658      	mov	r0, fp
 800d032:	f000 faf7 	bl	800d624 <__multadd>
 800d036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d038:	4681      	mov	r9, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 8172 	beq.w	800d324 <_dtoa_r+0xb4c>
 800d040:	2300      	movs	r3, #0
 800d042:	4629      	mov	r1, r5
 800d044:	220a      	movs	r2, #10
 800d046:	4658      	mov	r0, fp
 800d048:	f000 faec 	bl	800d624 <__multadd>
 800d04c:	9b00      	ldr	r3, [sp, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	4605      	mov	r5, r0
 800d052:	dc67      	bgt.n	800d124 <_dtoa_r+0x94c>
 800d054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d056:	2b02      	cmp	r3, #2
 800d058:	dc41      	bgt.n	800d0de <_dtoa_r+0x906>
 800d05a:	e063      	b.n	800d124 <_dtoa_r+0x94c>
 800d05c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d05e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d062:	e746      	b.n	800cef2 <_dtoa_r+0x71a>
 800d064:	9b07      	ldr	r3, [sp, #28]
 800d066:	1e5c      	subs	r4, r3, #1
 800d068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d06a:	42a3      	cmp	r3, r4
 800d06c:	bfbf      	itttt	lt
 800d06e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d070:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d072:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d074:	1ae3      	sublt	r3, r4, r3
 800d076:	bfb4      	ite	lt
 800d078:	18d2      	addlt	r2, r2, r3
 800d07a:	1b1c      	subge	r4, r3, r4
 800d07c:	9b07      	ldr	r3, [sp, #28]
 800d07e:	bfbc      	itt	lt
 800d080:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d082:	2400      	movlt	r4, #0
 800d084:	2b00      	cmp	r3, #0
 800d086:	bfb5      	itete	lt
 800d088:	eba8 0603 	sublt.w	r6, r8, r3
 800d08c:	9b07      	ldrge	r3, [sp, #28]
 800d08e:	2300      	movlt	r3, #0
 800d090:	4646      	movge	r6, r8
 800d092:	e730      	b.n	800cef6 <_dtoa_r+0x71e>
 800d094:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d096:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d098:	4646      	mov	r6, r8
 800d09a:	e735      	b.n	800cf08 <_dtoa_r+0x730>
 800d09c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d09e:	e75c      	b.n	800cf5a <_dtoa_r+0x782>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	e788      	b.n	800cfb6 <_dtoa_r+0x7de>
 800d0a4:	3fe00000 	.word	0x3fe00000
 800d0a8:	40240000 	.word	0x40240000
 800d0ac:	40140000 	.word	0x40140000
 800d0b0:	9b02      	ldr	r3, [sp, #8]
 800d0b2:	e780      	b.n	800cfb6 <_dtoa_r+0x7de>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0b8:	e782      	b.n	800cfc0 <_dtoa_r+0x7e8>
 800d0ba:	d099      	beq.n	800cff0 <_dtoa_r+0x818>
 800d0bc:	9a08      	ldr	r2, [sp, #32]
 800d0be:	331c      	adds	r3, #28
 800d0c0:	441a      	add	r2, r3
 800d0c2:	4498      	add	r8, r3
 800d0c4:	441e      	add	r6, r3
 800d0c6:	9208      	str	r2, [sp, #32]
 800d0c8:	e792      	b.n	800cff0 <_dtoa_r+0x818>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	e7f6      	b.n	800d0bc <_dtoa_r+0x8e4>
 800d0ce:	9b07      	ldr	r3, [sp, #28]
 800d0d0:	9704      	str	r7, [sp, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	dc20      	bgt.n	800d118 <_dtoa_r+0x940>
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	dd1e      	ble.n	800d11c <_dtoa_r+0x944>
 800d0de:	9b00      	ldr	r3, [sp, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f47f aec0 	bne.w	800ce66 <_dtoa_r+0x68e>
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	2205      	movs	r2, #5
 800d0ea:	4658      	mov	r0, fp
 800d0ec:	f000 fa9a 	bl	800d624 <__multadd>
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	4648      	mov	r0, r9
 800d0f6:	f000 fcad 	bl	800da54 <__mcmp>
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	f77f aeb3 	ble.w	800ce66 <_dtoa_r+0x68e>
 800d100:	4656      	mov	r6, sl
 800d102:	2331      	movs	r3, #49	@ 0x31
 800d104:	f806 3b01 	strb.w	r3, [r6], #1
 800d108:	9b04      	ldr	r3, [sp, #16]
 800d10a:	3301      	adds	r3, #1
 800d10c:	9304      	str	r3, [sp, #16]
 800d10e:	e6ae      	b.n	800ce6e <_dtoa_r+0x696>
 800d110:	9c07      	ldr	r4, [sp, #28]
 800d112:	9704      	str	r7, [sp, #16]
 800d114:	4625      	mov	r5, r4
 800d116:	e7f3      	b.n	800d100 <_dtoa_r+0x928>
 800d118:	9b07      	ldr	r3, [sp, #28]
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f000 8104 	beq.w	800d32c <_dtoa_r+0xb54>
 800d124:	2e00      	cmp	r6, #0
 800d126:	dd05      	ble.n	800d134 <_dtoa_r+0x95c>
 800d128:	4629      	mov	r1, r5
 800d12a:	4632      	mov	r2, r6
 800d12c:	4658      	mov	r0, fp
 800d12e:	f000 fc25 	bl	800d97c <__lshift>
 800d132:	4605      	mov	r5, r0
 800d134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d136:	2b00      	cmp	r3, #0
 800d138:	d05a      	beq.n	800d1f0 <_dtoa_r+0xa18>
 800d13a:	6869      	ldr	r1, [r5, #4]
 800d13c:	4658      	mov	r0, fp
 800d13e:	f000 fa0f 	bl	800d560 <_Balloc>
 800d142:	4606      	mov	r6, r0
 800d144:	b928      	cbnz	r0, 800d152 <_dtoa_r+0x97a>
 800d146:	4b84      	ldr	r3, [pc, #528]	@ (800d358 <_dtoa_r+0xb80>)
 800d148:	4602      	mov	r2, r0
 800d14a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d14e:	f7ff bb5a 	b.w	800c806 <_dtoa_r+0x2e>
 800d152:	692a      	ldr	r2, [r5, #16]
 800d154:	3202      	adds	r2, #2
 800d156:	0092      	lsls	r2, r2, #2
 800d158:	f105 010c 	add.w	r1, r5, #12
 800d15c:	300c      	adds	r0, #12
 800d15e:	f7ff fa94 	bl	800c68a <memcpy>
 800d162:	2201      	movs	r2, #1
 800d164:	4631      	mov	r1, r6
 800d166:	4658      	mov	r0, fp
 800d168:	f000 fc08 	bl	800d97c <__lshift>
 800d16c:	f10a 0301 	add.w	r3, sl, #1
 800d170:	9307      	str	r3, [sp, #28]
 800d172:	9b00      	ldr	r3, [sp, #0]
 800d174:	4453      	add	r3, sl
 800d176:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d178:	9b02      	ldr	r3, [sp, #8]
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	462f      	mov	r7, r5
 800d180:	930a      	str	r3, [sp, #40]	@ 0x28
 800d182:	4605      	mov	r5, r0
 800d184:	9b07      	ldr	r3, [sp, #28]
 800d186:	4621      	mov	r1, r4
 800d188:	3b01      	subs	r3, #1
 800d18a:	4648      	mov	r0, r9
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	f7ff fa9b 	bl	800c6c8 <quorem>
 800d192:	4639      	mov	r1, r7
 800d194:	9002      	str	r0, [sp, #8]
 800d196:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d19a:	4648      	mov	r0, r9
 800d19c:	f000 fc5a 	bl	800da54 <__mcmp>
 800d1a0:	462a      	mov	r2, r5
 800d1a2:	9008      	str	r0, [sp, #32]
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	4658      	mov	r0, fp
 800d1a8:	f000 fc70 	bl	800da8c <__mdiff>
 800d1ac:	68c2      	ldr	r2, [r0, #12]
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	bb02      	cbnz	r2, 800d1f4 <_dtoa_r+0xa1c>
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	4648      	mov	r0, r9
 800d1b6:	f000 fc4d 	bl	800da54 <__mcmp>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	4631      	mov	r1, r6
 800d1be:	4658      	mov	r0, fp
 800d1c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1c2:	f000 fa0d 	bl	800d5e0 <_Bfree>
 800d1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1ca:	9e07      	ldr	r6, [sp, #28]
 800d1cc:	ea43 0102 	orr.w	r1, r3, r2
 800d1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1d2:	4319      	orrs	r1, r3
 800d1d4:	d110      	bne.n	800d1f8 <_dtoa_r+0xa20>
 800d1d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d1da:	d029      	beq.n	800d230 <_dtoa_r+0xa58>
 800d1dc:	9b08      	ldr	r3, [sp, #32]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	dd02      	ble.n	800d1e8 <_dtoa_r+0xa10>
 800d1e2:	9b02      	ldr	r3, [sp, #8]
 800d1e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d1e8:	9b00      	ldr	r3, [sp, #0]
 800d1ea:	f883 8000 	strb.w	r8, [r3]
 800d1ee:	e63f      	b.n	800ce70 <_dtoa_r+0x698>
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	e7bb      	b.n	800d16c <_dtoa_r+0x994>
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	e7e1      	b.n	800d1bc <_dtoa_r+0x9e4>
 800d1f8:	9b08      	ldr	r3, [sp, #32]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	db04      	blt.n	800d208 <_dtoa_r+0xa30>
 800d1fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d200:	430b      	orrs	r3, r1
 800d202:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d204:	430b      	orrs	r3, r1
 800d206:	d120      	bne.n	800d24a <_dtoa_r+0xa72>
 800d208:	2a00      	cmp	r2, #0
 800d20a:	dded      	ble.n	800d1e8 <_dtoa_r+0xa10>
 800d20c:	4649      	mov	r1, r9
 800d20e:	2201      	movs	r2, #1
 800d210:	4658      	mov	r0, fp
 800d212:	f000 fbb3 	bl	800d97c <__lshift>
 800d216:	4621      	mov	r1, r4
 800d218:	4681      	mov	r9, r0
 800d21a:	f000 fc1b 	bl	800da54 <__mcmp>
 800d21e:	2800      	cmp	r0, #0
 800d220:	dc03      	bgt.n	800d22a <_dtoa_r+0xa52>
 800d222:	d1e1      	bne.n	800d1e8 <_dtoa_r+0xa10>
 800d224:	f018 0f01 	tst.w	r8, #1
 800d228:	d0de      	beq.n	800d1e8 <_dtoa_r+0xa10>
 800d22a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d22e:	d1d8      	bne.n	800d1e2 <_dtoa_r+0xa0a>
 800d230:	9a00      	ldr	r2, [sp, #0]
 800d232:	2339      	movs	r3, #57	@ 0x39
 800d234:	7013      	strb	r3, [r2, #0]
 800d236:	4633      	mov	r3, r6
 800d238:	461e      	mov	r6, r3
 800d23a:	3b01      	subs	r3, #1
 800d23c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d240:	2a39      	cmp	r2, #57	@ 0x39
 800d242:	d052      	beq.n	800d2ea <_dtoa_r+0xb12>
 800d244:	3201      	adds	r2, #1
 800d246:	701a      	strb	r2, [r3, #0]
 800d248:	e612      	b.n	800ce70 <_dtoa_r+0x698>
 800d24a:	2a00      	cmp	r2, #0
 800d24c:	dd07      	ble.n	800d25e <_dtoa_r+0xa86>
 800d24e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d252:	d0ed      	beq.n	800d230 <_dtoa_r+0xa58>
 800d254:	9a00      	ldr	r2, [sp, #0]
 800d256:	f108 0301 	add.w	r3, r8, #1
 800d25a:	7013      	strb	r3, [r2, #0]
 800d25c:	e608      	b.n	800ce70 <_dtoa_r+0x698>
 800d25e:	9b07      	ldr	r3, [sp, #28]
 800d260:	9a07      	ldr	r2, [sp, #28]
 800d262:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d268:	4293      	cmp	r3, r2
 800d26a:	d028      	beq.n	800d2be <_dtoa_r+0xae6>
 800d26c:	4649      	mov	r1, r9
 800d26e:	2300      	movs	r3, #0
 800d270:	220a      	movs	r2, #10
 800d272:	4658      	mov	r0, fp
 800d274:	f000 f9d6 	bl	800d624 <__multadd>
 800d278:	42af      	cmp	r7, r5
 800d27a:	4681      	mov	r9, r0
 800d27c:	f04f 0300 	mov.w	r3, #0
 800d280:	f04f 020a 	mov.w	r2, #10
 800d284:	4639      	mov	r1, r7
 800d286:	4658      	mov	r0, fp
 800d288:	d107      	bne.n	800d29a <_dtoa_r+0xac2>
 800d28a:	f000 f9cb 	bl	800d624 <__multadd>
 800d28e:	4607      	mov	r7, r0
 800d290:	4605      	mov	r5, r0
 800d292:	9b07      	ldr	r3, [sp, #28]
 800d294:	3301      	adds	r3, #1
 800d296:	9307      	str	r3, [sp, #28]
 800d298:	e774      	b.n	800d184 <_dtoa_r+0x9ac>
 800d29a:	f000 f9c3 	bl	800d624 <__multadd>
 800d29e:	4629      	mov	r1, r5
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	220a      	movs	r2, #10
 800d2a6:	4658      	mov	r0, fp
 800d2a8:	f000 f9bc 	bl	800d624 <__multadd>
 800d2ac:	4605      	mov	r5, r0
 800d2ae:	e7f0      	b.n	800d292 <_dtoa_r+0xaba>
 800d2b0:	9b00      	ldr	r3, [sp, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	bfcc      	ite	gt
 800d2b6:	461e      	movgt	r6, r3
 800d2b8:	2601      	movle	r6, #1
 800d2ba:	4456      	add	r6, sl
 800d2bc:	2700      	movs	r7, #0
 800d2be:	4649      	mov	r1, r9
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	4658      	mov	r0, fp
 800d2c4:	f000 fb5a 	bl	800d97c <__lshift>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4681      	mov	r9, r0
 800d2cc:	f000 fbc2 	bl	800da54 <__mcmp>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	dcb0      	bgt.n	800d236 <_dtoa_r+0xa5e>
 800d2d4:	d102      	bne.n	800d2dc <_dtoa_r+0xb04>
 800d2d6:	f018 0f01 	tst.w	r8, #1
 800d2da:	d1ac      	bne.n	800d236 <_dtoa_r+0xa5e>
 800d2dc:	4633      	mov	r3, r6
 800d2de:	461e      	mov	r6, r3
 800d2e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2e4:	2a30      	cmp	r2, #48	@ 0x30
 800d2e6:	d0fa      	beq.n	800d2de <_dtoa_r+0xb06>
 800d2e8:	e5c2      	b.n	800ce70 <_dtoa_r+0x698>
 800d2ea:	459a      	cmp	sl, r3
 800d2ec:	d1a4      	bne.n	800d238 <_dtoa_r+0xa60>
 800d2ee:	9b04      	ldr	r3, [sp, #16]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	9304      	str	r3, [sp, #16]
 800d2f4:	2331      	movs	r3, #49	@ 0x31
 800d2f6:	f88a 3000 	strb.w	r3, [sl]
 800d2fa:	e5b9      	b.n	800ce70 <_dtoa_r+0x698>
 800d2fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d2fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d35c <_dtoa_r+0xb84>
 800d302:	b11b      	cbz	r3, 800d30c <_dtoa_r+0xb34>
 800d304:	f10a 0308 	add.w	r3, sl, #8
 800d308:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d30a:	6013      	str	r3, [r2, #0]
 800d30c:	4650      	mov	r0, sl
 800d30e:	b019      	add	sp, #100	@ 0x64
 800d310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d316:	2b01      	cmp	r3, #1
 800d318:	f77f ae37 	ble.w	800cf8a <_dtoa_r+0x7b2>
 800d31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d31e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d320:	2001      	movs	r0, #1
 800d322:	e655      	b.n	800cfd0 <_dtoa_r+0x7f8>
 800d324:	9b00      	ldr	r3, [sp, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f77f aed6 	ble.w	800d0d8 <_dtoa_r+0x900>
 800d32c:	4656      	mov	r6, sl
 800d32e:	4621      	mov	r1, r4
 800d330:	4648      	mov	r0, r9
 800d332:	f7ff f9c9 	bl	800c6c8 <quorem>
 800d336:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d33a:	f806 8b01 	strb.w	r8, [r6], #1
 800d33e:	9b00      	ldr	r3, [sp, #0]
 800d340:	eba6 020a 	sub.w	r2, r6, sl
 800d344:	4293      	cmp	r3, r2
 800d346:	ddb3      	ble.n	800d2b0 <_dtoa_r+0xad8>
 800d348:	4649      	mov	r1, r9
 800d34a:	2300      	movs	r3, #0
 800d34c:	220a      	movs	r2, #10
 800d34e:	4658      	mov	r0, fp
 800d350:	f000 f968 	bl	800d624 <__multadd>
 800d354:	4681      	mov	r9, r0
 800d356:	e7ea      	b.n	800d32e <_dtoa_r+0xb56>
 800d358:	08010e88 	.word	0x08010e88
 800d35c:	08010e0c 	.word	0x08010e0c

0800d360 <_free_r>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	4605      	mov	r5, r0
 800d364:	2900      	cmp	r1, #0
 800d366:	d041      	beq.n	800d3ec <_free_r+0x8c>
 800d368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d36c:	1f0c      	subs	r4, r1, #4
 800d36e:	2b00      	cmp	r3, #0
 800d370:	bfb8      	it	lt
 800d372:	18e4      	addlt	r4, r4, r3
 800d374:	f000 f8e8 	bl	800d548 <__malloc_lock>
 800d378:	4a1d      	ldr	r2, [pc, #116]	@ (800d3f0 <_free_r+0x90>)
 800d37a:	6813      	ldr	r3, [r2, #0]
 800d37c:	b933      	cbnz	r3, 800d38c <_free_r+0x2c>
 800d37e:	6063      	str	r3, [r4, #4]
 800d380:	6014      	str	r4, [r2, #0]
 800d382:	4628      	mov	r0, r5
 800d384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d388:	f000 b8e4 	b.w	800d554 <__malloc_unlock>
 800d38c:	42a3      	cmp	r3, r4
 800d38e:	d908      	bls.n	800d3a2 <_free_r+0x42>
 800d390:	6820      	ldr	r0, [r4, #0]
 800d392:	1821      	adds	r1, r4, r0
 800d394:	428b      	cmp	r3, r1
 800d396:	bf01      	itttt	eq
 800d398:	6819      	ldreq	r1, [r3, #0]
 800d39a:	685b      	ldreq	r3, [r3, #4]
 800d39c:	1809      	addeq	r1, r1, r0
 800d39e:	6021      	streq	r1, [r4, #0]
 800d3a0:	e7ed      	b.n	800d37e <_free_r+0x1e>
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	b10b      	cbz	r3, 800d3ac <_free_r+0x4c>
 800d3a8:	42a3      	cmp	r3, r4
 800d3aa:	d9fa      	bls.n	800d3a2 <_free_r+0x42>
 800d3ac:	6811      	ldr	r1, [r2, #0]
 800d3ae:	1850      	adds	r0, r2, r1
 800d3b0:	42a0      	cmp	r0, r4
 800d3b2:	d10b      	bne.n	800d3cc <_free_r+0x6c>
 800d3b4:	6820      	ldr	r0, [r4, #0]
 800d3b6:	4401      	add	r1, r0
 800d3b8:	1850      	adds	r0, r2, r1
 800d3ba:	4283      	cmp	r3, r0
 800d3bc:	6011      	str	r1, [r2, #0]
 800d3be:	d1e0      	bne.n	800d382 <_free_r+0x22>
 800d3c0:	6818      	ldr	r0, [r3, #0]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	6053      	str	r3, [r2, #4]
 800d3c6:	4408      	add	r0, r1
 800d3c8:	6010      	str	r0, [r2, #0]
 800d3ca:	e7da      	b.n	800d382 <_free_r+0x22>
 800d3cc:	d902      	bls.n	800d3d4 <_free_r+0x74>
 800d3ce:	230c      	movs	r3, #12
 800d3d0:	602b      	str	r3, [r5, #0]
 800d3d2:	e7d6      	b.n	800d382 <_free_r+0x22>
 800d3d4:	6820      	ldr	r0, [r4, #0]
 800d3d6:	1821      	adds	r1, r4, r0
 800d3d8:	428b      	cmp	r3, r1
 800d3da:	bf04      	itt	eq
 800d3dc:	6819      	ldreq	r1, [r3, #0]
 800d3de:	685b      	ldreq	r3, [r3, #4]
 800d3e0:	6063      	str	r3, [r4, #4]
 800d3e2:	bf04      	itt	eq
 800d3e4:	1809      	addeq	r1, r1, r0
 800d3e6:	6021      	streq	r1, [r4, #0]
 800d3e8:	6054      	str	r4, [r2, #4]
 800d3ea:	e7ca      	b.n	800d382 <_free_r+0x22>
 800d3ec:	bd38      	pop	{r3, r4, r5, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20002324 	.word	0x20002324

0800d3f4 <malloc>:
 800d3f4:	4b02      	ldr	r3, [pc, #8]	@ (800d400 <malloc+0xc>)
 800d3f6:	4601      	mov	r1, r0
 800d3f8:	6818      	ldr	r0, [r3, #0]
 800d3fa:	f000 b825 	b.w	800d448 <_malloc_r>
 800d3fe:	bf00      	nop
 800d400:	20000134 	.word	0x20000134

0800d404 <sbrk_aligned>:
 800d404:	b570      	push	{r4, r5, r6, lr}
 800d406:	4e0f      	ldr	r6, [pc, #60]	@ (800d444 <sbrk_aligned+0x40>)
 800d408:	460c      	mov	r4, r1
 800d40a:	6831      	ldr	r1, [r6, #0]
 800d40c:	4605      	mov	r5, r0
 800d40e:	b911      	cbnz	r1, 800d416 <sbrk_aligned+0x12>
 800d410:	f000 fe46 	bl	800e0a0 <_sbrk_r>
 800d414:	6030      	str	r0, [r6, #0]
 800d416:	4621      	mov	r1, r4
 800d418:	4628      	mov	r0, r5
 800d41a:	f000 fe41 	bl	800e0a0 <_sbrk_r>
 800d41e:	1c43      	adds	r3, r0, #1
 800d420:	d103      	bne.n	800d42a <sbrk_aligned+0x26>
 800d422:	f04f 34ff 	mov.w	r4, #4294967295
 800d426:	4620      	mov	r0, r4
 800d428:	bd70      	pop	{r4, r5, r6, pc}
 800d42a:	1cc4      	adds	r4, r0, #3
 800d42c:	f024 0403 	bic.w	r4, r4, #3
 800d430:	42a0      	cmp	r0, r4
 800d432:	d0f8      	beq.n	800d426 <sbrk_aligned+0x22>
 800d434:	1a21      	subs	r1, r4, r0
 800d436:	4628      	mov	r0, r5
 800d438:	f000 fe32 	bl	800e0a0 <_sbrk_r>
 800d43c:	3001      	adds	r0, #1
 800d43e:	d1f2      	bne.n	800d426 <sbrk_aligned+0x22>
 800d440:	e7ef      	b.n	800d422 <sbrk_aligned+0x1e>
 800d442:	bf00      	nop
 800d444:	20002320 	.word	0x20002320

0800d448 <_malloc_r>:
 800d448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d44c:	1ccd      	adds	r5, r1, #3
 800d44e:	f025 0503 	bic.w	r5, r5, #3
 800d452:	3508      	adds	r5, #8
 800d454:	2d0c      	cmp	r5, #12
 800d456:	bf38      	it	cc
 800d458:	250c      	movcc	r5, #12
 800d45a:	2d00      	cmp	r5, #0
 800d45c:	4606      	mov	r6, r0
 800d45e:	db01      	blt.n	800d464 <_malloc_r+0x1c>
 800d460:	42a9      	cmp	r1, r5
 800d462:	d904      	bls.n	800d46e <_malloc_r+0x26>
 800d464:	230c      	movs	r3, #12
 800d466:	6033      	str	r3, [r6, #0]
 800d468:	2000      	movs	r0, #0
 800d46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d544 <_malloc_r+0xfc>
 800d472:	f000 f869 	bl	800d548 <__malloc_lock>
 800d476:	f8d8 3000 	ldr.w	r3, [r8]
 800d47a:	461c      	mov	r4, r3
 800d47c:	bb44      	cbnz	r4, 800d4d0 <_malloc_r+0x88>
 800d47e:	4629      	mov	r1, r5
 800d480:	4630      	mov	r0, r6
 800d482:	f7ff ffbf 	bl	800d404 <sbrk_aligned>
 800d486:	1c43      	adds	r3, r0, #1
 800d488:	4604      	mov	r4, r0
 800d48a:	d158      	bne.n	800d53e <_malloc_r+0xf6>
 800d48c:	f8d8 4000 	ldr.w	r4, [r8]
 800d490:	4627      	mov	r7, r4
 800d492:	2f00      	cmp	r7, #0
 800d494:	d143      	bne.n	800d51e <_malloc_r+0xd6>
 800d496:	2c00      	cmp	r4, #0
 800d498:	d04b      	beq.n	800d532 <_malloc_r+0xea>
 800d49a:	6823      	ldr	r3, [r4, #0]
 800d49c:	4639      	mov	r1, r7
 800d49e:	4630      	mov	r0, r6
 800d4a0:	eb04 0903 	add.w	r9, r4, r3
 800d4a4:	f000 fdfc 	bl	800e0a0 <_sbrk_r>
 800d4a8:	4581      	cmp	r9, r0
 800d4aa:	d142      	bne.n	800d532 <_malloc_r+0xea>
 800d4ac:	6821      	ldr	r1, [r4, #0]
 800d4ae:	1a6d      	subs	r5, r5, r1
 800d4b0:	4629      	mov	r1, r5
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f7ff ffa6 	bl	800d404 <sbrk_aligned>
 800d4b8:	3001      	adds	r0, #1
 800d4ba:	d03a      	beq.n	800d532 <_malloc_r+0xea>
 800d4bc:	6823      	ldr	r3, [r4, #0]
 800d4be:	442b      	add	r3, r5
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d4c6:	685a      	ldr	r2, [r3, #4]
 800d4c8:	bb62      	cbnz	r2, 800d524 <_malloc_r+0xdc>
 800d4ca:	f8c8 7000 	str.w	r7, [r8]
 800d4ce:	e00f      	b.n	800d4f0 <_malloc_r+0xa8>
 800d4d0:	6822      	ldr	r2, [r4, #0]
 800d4d2:	1b52      	subs	r2, r2, r5
 800d4d4:	d420      	bmi.n	800d518 <_malloc_r+0xd0>
 800d4d6:	2a0b      	cmp	r2, #11
 800d4d8:	d917      	bls.n	800d50a <_malloc_r+0xc2>
 800d4da:	1961      	adds	r1, r4, r5
 800d4dc:	42a3      	cmp	r3, r4
 800d4de:	6025      	str	r5, [r4, #0]
 800d4e0:	bf18      	it	ne
 800d4e2:	6059      	strne	r1, [r3, #4]
 800d4e4:	6863      	ldr	r3, [r4, #4]
 800d4e6:	bf08      	it	eq
 800d4e8:	f8c8 1000 	streq.w	r1, [r8]
 800d4ec:	5162      	str	r2, [r4, r5]
 800d4ee:	604b      	str	r3, [r1, #4]
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f000 f82f 	bl	800d554 <__malloc_unlock>
 800d4f6:	f104 000b 	add.w	r0, r4, #11
 800d4fa:	1d23      	adds	r3, r4, #4
 800d4fc:	f020 0007 	bic.w	r0, r0, #7
 800d500:	1ac2      	subs	r2, r0, r3
 800d502:	bf1c      	itt	ne
 800d504:	1a1b      	subne	r3, r3, r0
 800d506:	50a3      	strne	r3, [r4, r2]
 800d508:	e7af      	b.n	800d46a <_malloc_r+0x22>
 800d50a:	6862      	ldr	r2, [r4, #4]
 800d50c:	42a3      	cmp	r3, r4
 800d50e:	bf0c      	ite	eq
 800d510:	f8c8 2000 	streq.w	r2, [r8]
 800d514:	605a      	strne	r2, [r3, #4]
 800d516:	e7eb      	b.n	800d4f0 <_malloc_r+0xa8>
 800d518:	4623      	mov	r3, r4
 800d51a:	6864      	ldr	r4, [r4, #4]
 800d51c:	e7ae      	b.n	800d47c <_malloc_r+0x34>
 800d51e:	463c      	mov	r4, r7
 800d520:	687f      	ldr	r7, [r7, #4]
 800d522:	e7b6      	b.n	800d492 <_malloc_r+0x4a>
 800d524:	461a      	mov	r2, r3
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	42a3      	cmp	r3, r4
 800d52a:	d1fb      	bne.n	800d524 <_malloc_r+0xdc>
 800d52c:	2300      	movs	r3, #0
 800d52e:	6053      	str	r3, [r2, #4]
 800d530:	e7de      	b.n	800d4f0 <_malloc_r+0xa8>
 800d532:	230c      	movs	r3, #12
 800d534:	6033      	str	r3, [r6, #0]
 800d536:	4630      	mov	r0, r6
 800d538:	f000 f80c 	bl	800d554 <__malloc_unlock>
 800d53c:	e794      	b.n	800d468 <_malloc_r+0x20>
 800d53e:	6005      	str	r5, [r0, #0]
 800d540:	e7d6      	b.n	800d4f0 <_malloc_r+0xa8>
 800d542:	bf00      	nop
 800d544:	20002324 	.word	0x20002324

0800d548 <__malloc_lock>:
 800d548:	4801      	ldr	r0, [pc, #4]	@ (800d550 <__malloc_lock+0x8>)
 800d54a:	f7ff b89c 	b.w	800c686 <__retarget_lock_acquire_recursive>
 800d54e:	bf00      	nop
 800d550:	2000231c 	.word	0x2000231c

0800d554 <__malloc_unlock>:
 800d554:	4801      	ldr	r0, [pc, #4]	@ (800d55c <__malloc_unlock+0x8>)
 800d556:	f7ff b897 	b.w	800c688 <__retarget_lock_release_recursive>
 800d55a:	bf00      	nop
 800d55c:	2000231c 	.word	0x2000231c

0800d560 <_Balloc>:
 800d560:	b570      	push	{r4, r5, r6, lr}
 800d562:	69c6      	ldr	r6, [r0, #28]
 800d564:	4604      	mov	r4, r0
 800d566:	460d      	mov	r5, r1
 800d568:	b976      	cbnz	r6, 800d588 <_Balloc+0x28>
 800d56a:	2010      	movs	r0, #16
 800d56c:	f7ff ff42 	bl	800d3f4 <malloc>
 800d570:	4602      	mov	r2, r0
 800d572:	61e0      	str	r0, [r4, #28]
 800d574:	b920      	cbnz	r0, 800d580 <_Balloc+0x20>
 800d576:	4b18      	ldr	r3, [pc, #96]	@ (800d5d8 <_Balloc+0x78>)
 800d578:	4818      	ldr	r0, [pc, #96]	@ (800d5dc <_Balloc+0x7c>)
 800d57a:	216b      	movs	r1, #107	@ 0x6b
 800d57c:	f000 fda0 	bl	800e0c0 <__assert_func>
 800d580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d584:	6006      	str	r6, [r0, #0]
 800d586:	60c6      	str	r6, [r0, #12]
 800d588:	69e6      	ldr	r6, [r4, #28]
 800d58a:	68f3      	ldr	r3, [r6, #12]
 800d58c:	b183      	cbz	r3, 800d5b0 <_Balloc+0x50>
 800d58e:	69e3      	ldr	r3, [r4, #28]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d596:	b9b8      	cbnz	r0, 800d5c8 <_Balloc+0x68>
 800d598:	2101      	movs	r1, #1
 800d59a:	fa01 f605 	lsl.w	r6, r1, r5
 800d59e:	1d72      	adds	r2, r6, #5
 800d5a0:	0092      	lsls	r2, r2, #2
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f000 fdaa 	bl	800e0fc <_calloc_r>
 800d5a8:	b160      	cbz	r0, 800d5c4 <_Balloc+0x64>
 800d5aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5ae:	e00e      	b.n	800d5ce <_Balloc+0x6e>
 800d5b0:	2221      	movs	r2, #33	@ 0x21
 800d5b2:	2104      	movs	r1, #4
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f000 fda1 	bl	800e0fc <_calloc_r>
 800d5ba:	69e3      	ldr	r3, [r4, #28]
 800d5bc:	60f0      	str	r0, [r6, #12]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1e4      	bne.n	800d58e <_Balloc+0x2e>
 800d5c4:	2000      	movs	r0, #0
 800d5c6:	bd70      	pop	{r4, r5, r6, pc}
 800d5c8:	6802      	ldr	r2, [r0, #0]
 800d5ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5d4:	e7f7      	b.n	800d5c6 <_Balloc+0x66>
 800d5d6:	bf00      	nop
 800d5d8:	08010e19 	.word	0x08010e19
 800d5dc:	08010e99 	.word	0x08010e99

0800d5e0 <_Bfree>:
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	69c6      	ldr	r6, [r0, #28]
 800d5e4:	4605      	mov	r5, r0
 800d5e6:	460c      	mov	r4, r1
 800d5e8:	b976      	cbnz	r6, 800d608 <_Bfree+0x28>
 800d5ea:	2010      	movs	r0, #16
 800d5ec:	f7ff ff02 	bl	800d3f4 <malloc>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	61e8      	str	r0, [r5, #28]
 800d5f4:	b920      	cbnz	r0, 800d600 <_Bfree+0x20>
 800d5f6:	4b09      	ldr	r3, [pc, #36]	@ (800d61c <_Bfree+0x3c>)
 800d5f8:	4809      	ldr	r0, [pc, #36]	@ (800d620 <_Bfree+0x40>)
 800d5fa:	218f      	movs	r1, #143	@ 0x8f
 800d5fc:	f000 fd60 	bl	800e0c0 <__assert_func>
 800d600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d604:	6006      	str	r6, [r0, #0]
 800d606:	60c6      	str	r6, [r0, #12]
 800d608:	b13c      	cbz	r4, 800d61a <_Bfree+0x3a>
 800d60a:	69eb      	ldr	r3, [r5, #28]
 800d60c:	6862      	ldr	r2, [r4, #4]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d614:	6021      	str	r1, [r4, #0]
 800d616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d61a:	bd70      	pop	{r4, r5, r6, pc}
 800d61c:	08010e19 	.word	0x08010e19
 800d620:	08010e99 	.word	0x08010e99

0800d624 <__multadd>:
 800d624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d628:	690d      	ldr	r5, [r1, #16]
 800d62a:	4607      	mov	r7, r0
 800d62c:	460c      	mov	r4, r1
 800d62e:	461e      	mov	r6, r3
 800d630:	f101 0c14 	add.w	ip, r1, #20
 800d634:	2000      	movs	r0, #0
 800d636:	f8dc 3000 	ldr.w	r3, [ip]
 800d63a:	b299      	uxth	r1, r3
 800d63c:	fb02 6101 	mla	r1, r2, r1, r6
 800d640:	0c1e      	lsrs	r6, r3, #16
 800d642:	0c0b      	lsrs	r3, r1, #16
 800d644:	fb02 3306 	mla	r3, r2, r6, r3
 800d648:	b289      	uxth	r1, r1
 800d64a:	3001      	adds	r0, #1
 800d64c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d650:	4285      	cmp	r5, r0
 800d652:	f84c 1b04 	str.w	r1, [ip], #4
 800d656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d65a:	dcec      	bgt.n	800d636 <__multadd+0x12>
 800d65c:	b30e      	cbz	r6, 800d6a2 <__multadd+0x7e>
 800d65e:	68a3      	ldr	r3, [r4, #8]
 800d660:	42ab      	cmp	r3, r5
 800d662:	dc19      	bgt.n	800d698 <__multadd+0x74>
 800d664:	6861      	ldr	r1, [r4, #4]
 800d666:	4638      	mov	r0, r7
 800d668:	3101      	adds	r1, #1
 800d66a:	f7ff ff79 	bl	800d560 <_Balloc>
 800d66e:	4680      	mov	r8, r0
 800d670:	b928      	cbnz	r0, 800d67e <__multadd+0x5a>
 800d672:	4602      	mov	r2, r0
 800d674:	4b0c      	ldr	r3, [pc, #48]	@ (800d6a8 <__multadd+0x84>)
 800d676:	480d      	ldr	r0, [pc, #52]	@ (800d6ac <__multadd+0x88>)
 800d678:	21ba      	movs	r1, #186	@ 0xba
 800d67a:	f000 fd21 	bl	800e0c0 <__assert_func>
 800d67e:	6922      	ldr	r2, [r4, #16]
 800d680:	3202      	adds	r2, #2
 800d682:	f104 010c 	add.w	r1, r4, #12
 800d686:	0092      	lsls	r2, r2, #2
 800d688:	300c      	adds	r0, #12
 800d68a:	f7fe fffe 	bl	800c68a <memcpy>
 800d68e:	4621      	mov	r1, r4
 800d690:	4638      	mov	r0, r7
 800d692:	f7ff ffa5 	bl	800d5e0 <_Bfree>
 800d696:	4644      	mov	r4, r8
 800d698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d69c:	3501      	adds	r5, #1
 800d69e:	615e      	str	r6, [r3, #20]
 800d6a0:	6125      	str	r5, [r4, #16]
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a8:	08010e88 	.word	0x08010e88
 800d6ac:	08010e99 	.word	0x08010e99

0800d6b0 <__hi0bits>:
 800d6b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	bf36      	itet	cc
 800d6b8:	0403      	lslcc	r3, r0, #16
 800d6ba:	2000      	movcs	r0, #0
 800d6bc:	2010      	movcc	r0, #16
 800d6be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6c2:	bf3c      	itt	cc
 800d6c4:	021b      	lslcc	r3, r3, #8
 800d6c6:	3008      	addcc	r0, #8
 800d6c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6cc:	bf3c      	itt	cc
 800d6ce:	011b      	lslcc	r3, r3, #4
 800d6d0:	3004      	addcc	r0, #4
 800d6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6d6:	bf3c      	itt	cc
 800d6d8:	009b      	lslcc	r3, r3, #2
 800d6da:	3002      	addcc	r0, #2
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	db05      	blt.n	800d6ec <__hi0bits+0x3c>
 800d6e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d6e4:	f100 0001 	add.w	r0, r0, #1
 800d6e8:	bf08      	it	eq
 800d6ea:	2020      	moveq	r0, #32
 800d6ec:	4770      	bx	lr

0800d6ee <__lo0bits>:
 800d6ee:	6803      	ldr	r3, [r0, #0]
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	f013 0007 	ands.w	r0, r3, #7
 800d6f6:	d00b      	beq.n	800d710 <__lo0bits+0x22>
 800d6f8:	07d9      	lsls	r1, r3, #31
 800d6fa:	d421      	bmi.n	800d740 <__lo0bits+0x52>
 800d6fc:	0798      	lsls	r0, r3, #30
 800d6fe:	bf49      	itett	mi
 800d700:	085b      	lsrmi	r3, r3, #1
 800d702:	089b      	lsrpl	r3, r3, #2
 800d704:	2001      	movmi	r0, #1
 800d706:	6013      	strmi	r3, [r2, #0]
 800d708:	bf5c      	itt	pl
 800d70a:	6013      	strpl	r3, [r2, #0]
 800d70c:	2002      	movpl	r0, #2
 800d70e:	4770      	bx	lr
 800d710:	b299      	uxth	r1, r3
 800d712:	b909      	cbnz	r1, 800d718 <__lo0bits+0x2a>
 800d714:	0c1b      	lsrs	r3, r3, #16
 800d716:	2010      	movs	r0, #16
 800d718:	b2d9      	uxtb	r1, r3
 800d71a:	b909      	cbnz	r1, 800d720 <__lo0bits+0x32>
 800d71c:	3008      	adds	r0, #8
 800d71e:	0a1b      	lsrs	r3, r3, #8
 800d720:	0719      	lsls	r1, r3, #28
 800d722:	bf04      	itt	eq
 800d724:	091b      	lsreq	r3, r3, #4
 800d726:	3004      	addeq	r0, #4
 800d728:	0799      	lsls	r1, r3, #30
 800d72a:	bf04      	itt	eq
 800d72c:	089b      	lsreq	r3, r3, #2
 800d72e:	3002      	addeq	r0, #2
 800d730:	07d9      	lsls	r1, r3, #31
 800d732:	d403      	bmi.n	800d73c <__lo0bits+0x4e>
 800d734:	085b      	lsrs	r3, r3, #1
 800d736:	f100 0001 	add.w	r0, r0, #1
 800d73a:	d003      	beq.n	800d744 <__lo0bits+0x56>
 800d73c:	6013      	str	r3, [r2, #0]
 800d73e:	4770      	bx	lr
 800d740:	2000      	movs	r0, #0
 800d742:	4770      	bx	lr
 800d744:	2020      	movs	r0, #32
 800d746:	4770      	bx	lr

0800d748 <__i2b>:
 800d748:	b510      	push	{r4, lr}
 800d74a:	460c      	mov	r4, r1
 800d74c:	2101      	movs	r1, #1
 800d74e:	f7ff ff07 	bl	800d560 <_Balloc>
 800d752:	4602      	mov	r2, r0
 800d754:	b928      	cbnz	r0, 800d762 <__i2b+0x1a>
 800d756:	4b05      	ldr	r3, [pc, #20]	@ (800d76c <__i2b+0x24>)
 800d758:	4805      	ldr	r0, [pc, #20]	@ (800d770 <__i2b+0x28>)
 800d75a:	f240 1145 	movw	r1, #325	@ 0x145
 800d75e:	f000 fcaf 	bl	800e0c0 <__assert_func>
 800d762:	2301      	movs	r3, #1
 800d764:	6144      	str	r4, [r0, #20]
 800d766:	6103      	str	r3, [r0, #16]
 800d768:	bd10      	pop	{r4, pc}
 800d76a:	bf00      	nop
 800d76c:	08010e88 	.word	0x08010e88
 800d770:	08010e99 	.word	0x08010e99

0800d774 <__multiply>:
 800d774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d778:	4614      	mov	r4, r2
 800d77a:	690a      	ldr	r2, [r1, #16]
 800d77c:	6923      	ldr	r3, [r4, #16]
 800d77e:	429a      	cmp	r2, r3
 800d780:	bfa8      	it	ge
 800d782:	4623      	movge	r3, r4
 800d784:	460f      	mov	r7, r1
 800d786:	bfa4      	itt	ge
 800d788:	460c      	movge	r4, r1
 800d78a:	461f      	movge	r7, r3
 800d78c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d790:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d794:	68a3      	ldr	r3, [r4, #8]
 800d796:	6861      	ldr	r1, [r4, #4]
 800d798:	eb0a 0609 	add.w	r6, sl, r9
 800d79c:	42b3      	cmp	r3, r6
 800d79e:	b085      	sub	sp, #20
 800d7a0:	bfb8      	it	lt
 800d7a2:	3101      	addlt	r1, #1
 800d7a4:	f7ff fedc 	bl	800d560 <_Balloc>
 800d7a8:	b930      	cbnz	r0, 800d7b8 <__multiply+0x44>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	4b44      	ldr	r3, [pc, #272]	@ (800d8c0 <__multiply+0x14c>)
 800d7ae:	4845      	ldr	r0, [pc, #276]	@ (800d8c4 <__multiply+0x150>)
 800d7b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d7b4:	f000 fc84 	bl	800e0c0 <__assert_func>
 800d7b8:	f100 0514 	add.w	r5, r0, #20
 800d7bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d7c0:	462b      	mov	r3, r5
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	4543      	cmp	r3, r8
 800d7c6:	d321      	bcc.n	800d80c <__multiply+0x98>
 800d7c8:	f107 0114 	add.w	r1, r7, #20
 800d7cc:	f104 0214 	add.w	r2, r4, #20
 800d7d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d7d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d7d8:	9302      	str	r3, [sp, #8]
 800d7da:	1b13      	subs	r3, r2, r4
 800d7dc:	3b15      	subs	r3, #21
 800d7de:	f023 0303 	bic.w	r3, r3, #3
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	f104 0715 	add.w	r7, r4, #21
 800d7e8:	42ba      	cmp	r2, r7
 800d7ea:	bf38      	it	cc
 800d7ec:	2304      	movcc	r3, #4
 800d7ee:	9301      	str	r3, [sp, #4]
 800d7f0:	9b02      	ldr	r3, [sp, #8]
 800d7f2:	9103      	str	r1, [sp, #12]
 800d7f4:	428b      	cmp	r3, r1
 800d7f6:	d80c      	bhi.n	800d812 <__multiply+0x9e>
 800d7f8:	2e00      	cmp	r6, #0
 800d7fa:	dd03      	ble.n	800d804 <__multiply+0x90>
 800d7fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d800:	2b00      	cmp	r3, #0
 800d802:	d05b      	beq.n	800d8bc <__multiply+0x148>
 800d804:	6106      	str	r6, [r0, #16]
 800d806:	b005      	add	sp, #20
 800d808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80c:	f843 2b04 	str.w	r2, [r3], #4
 800d810:	e7d8      	b.n	800d7c4 <__multiply+0x50>
 800d812:	f8b1 a000 	ldrh.w	sl, [r1]
 800d816:	f1ba 0f00 	cmp.w	sl, #0
 800d81a:	d024      	beq.n	800d866 <__multiply+0xf2>
 800d81c:	f104 0e14 	add.w	lr, r4, #20
 800d820:	46a9      	mov	r9, r5
 800d822:	f04f 0c00 	mov.w	ip, #0
 800d826:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d82a:	f8d9 3000 	ldr.w	r3, [r9]
 800d82e:	fa1f fb87 	uxth.w	fp, r7
 800d832:	b29b      	uxth	r3, r3
 800d834:	fb0a 330b 	mla	r3, sl, fp, r3
 800d838:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d83c:	f8d9 7000 	ldr.w	r7, [r9]
 800d840:	4463      	add	r3, ip
 800d842:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d846:	fb0a c70b 	mla	r7, sl, fp, ip
 800d84a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d84e:	b29b      	uxth	r3, r3
 800d850:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d854:	4572      	cmp	r2, lr
 800d856:	f849 3b04 	str.w	r3, [r9], #4
 800d85a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d85e:	d8e2      	bhi.n	800d826 <__multiply+0xb2>
 800d860:	9b01      	ldr	r3, [sp, #4]
 800d862:	f845 c003 	str.w	ip, [r5, r3]
 800d866:	9b03      	ldr	r3, [sp, #12]
 800d868:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d86c:	3104      	adds	r1, #4
 800d86e:	f1b9 0f00 	cmp.w	r9, #0
 800d872:	d021      	beq.n	800d8b8 <__multiply+0x144>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	f104 0c14 	add.w	ip, r4, #20
 800d87a:	46ae      	mov	lr, r5
 800d87c:	f04f 0a00 	mov.w	sl, #0
 800d880:	f8bc b000 	ldrh.w	fp, [ip]
 800d884:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d888:	fb09 770b 	mla	r7, r9, fp, r7
 800d88c:	4457      	add	r7, sl
 800d88e:	b29b      	uxth	r3, r3
 800d890:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d894:	f84e 3b04 	str.w	r3, [lr], #4
 800d898:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d89c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d8a0:	f8be 3000 	ldrh.w	r3, [lr]
 800d8a4:	fb09 330a 	mla	r3, r9, sl, r3
 800d8a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d8ac:	4562      	cmp	r2, ip
 800d8ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d8b2:	d8e5      	bhi.n	800d880 <__multiply+0x10c>
 800d8b4:	9f01      	ldr	r7, [sp, #4]
 800d8b6:	51eb      	str	r3, [r5, r7]
 800d8b8:	3504      	adds	r5, #4
 800d8ba:	e799      	b.n	800d7f0 <__multiply+0x7c>
 800d8bc:	3e01      	subs	r6, #1
 800d8be:	e79b      	b.n	800d7f8 <__multiply+0x84>
 800d8c0:	08010e88 	.word	0x08010e88
 800d8c4:	08010e99 	.word	0x08010e99

0800d8c8 <__pow5mult>:
 800d8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8cc:	4615      	mov	r5, r2
 800d8ce:	f012 0203 	ands.w	r2, r2, #3
 800d8d2:	4607      	mov	r7, r0
 800d8d4:	460e      	mov	r6, r1
 800d8d6:	d007      	beq.n	800d8e8 <__pow5mult+0x20>
 800d8d8:	4c25      	ldr	r4, [pc, #148]	@ (800d970 <__pow5mult+0xa8>)
 800d8da:	3a01      	subs	r2, #1
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8e2:	f7ff fe9f 	bl	800d624 <__multadd>
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	10ad      	asrs	r5, r5, #2
 800d8ea:	d03d      	beq.n	800d968 <__pow5mult+0xa0>
 800d8ec:	69fc      	ldr	r4, [r7, #28]
 800d8ee:	b97c      	cbnz	r4, 800d910 <__pow5mult+0x48>
 800d8f0:	2010      	movs	r0, #16
 800d8f2:	f7ff fd7f 	bl	800d3f4 <malloc>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	61f8      	str	r0, [r7, #28]
 800d8fa:	b928      	cbnz	r0, 800d908 <__pow5mult+0x40>
 800d8fc:	4b1d      	ldr	r3, [pc, #116]	@ (800d974 <__pow5mult+0xac>)
 800d8fe:	481e      	ldr	r0, [pc, #120]	@ (800d978 <__pow5mult+0xb0>)
 800d900:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d904:	f000 fbdc 	bl	800e0c0 <__assert_func>
 800d908:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d90c:	6004      	str	r4, [r0, #0]
 800d90e:	60c4      	str	r4, [r0, #12]
 800d910:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d914:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d918:	b94c      	cbnz	r4, 800d92e <__pow5mult+0x66>
 800d91a:	f240 2171 	movw	r1, #625	@ 0x271
 800d91e:	4638      	mov	r0, r7
 800d920:	f7ff ff12 	bl	800d748 <__i2b>
 800d924:	2300      	movs	r3, #0
 800d926:	f8c8 0008 	str.w	r0, [r8, #8]
 800d92a:	4604      	mov	r4, r0
 800d92c:	6003      	str	r3, [r0, #0]
 800d92e:	f04f 0900 	mov.w	r9, #0
 800d932:	07eb      	lsls	r3, r5, #31
 800d934:	d50a      	bpl.n	800d94c <__pow5mult+0x84>
 800d936:	4631      	mov	r1, r6
 800d938:	4622      	mov	r2, r4
 800d93a:	4638      	mov	r0, r7
 800d93c:	f7ff ff1a 	bl	800d774 <__multiply>
 800d940:	4631      	mov	r1, r6
 800d942:	4680      	mov	r8, r0
 800d944:	4638      	mov	r0, r7
 800d946:	f7ff fe4b 	bl	800d5e0 <_Bfree>
 800d94a:	4646      	mov	r6, r8
 800d94c:	106d      	asrs	r5, r5, #1
 800d94e:	d00b      	beq.n	800d968 <__pow5mult+0xa0>
 800d950:	6820      	ldr	r0, [r4, #0]
 800d952:	b938      	cbnz	r0, 800d964 <__pow5mult+0x9c>
 800d954:	4622      	mov	r2, r4
 800d956:	4621      	mov	r1, r4
 800d958:	4638      	mov	r0, r7
 800d95a:	f7ff ff0b 	bl	800d774 <__multiply>
 800d95e:	6020      	str	r0, [r4, #0]
 800d960:	f8c0 9000 	str.w	r9, [r0]
 800d964:	4604      	mov	r4, r0
 800d966:	e7e4      	b.n	800d932 <__pow5mult+0x6a>
 800d968:	4630      	mov	r0, r6
 800d96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d96e:	bf00      	nop
 800d970:	08010ef4 	.word	0x08010ef4
 800d974:	08010e19 	.word	0x08010e19
 800d978:	08010e99 	.word	0x08010e99

0800d97c <__lshift>:
 800d97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d980:	460c      	mov	r4, r1
 800d982:	6849      	ldr	r1, [r1, #4]
 800d984:	6923      	ldr	r3, [r4, #16]
 800d986:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d98a:	68a3      	ldr	r3, [r4, #8]
 800d98c:	4607      	mov	r7, r0
 800d98e:	4691      	mov	r9, r2
 800d990:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d994:	f108 0601 	add.w	r6, r8, #1
 800d998:	42b3      	cmp	r3, r6
 800d99a:	db0b      	blt.n	800d9b4 <__lshift+0x38>
 800d99c:	4638      	mov	r0, r7
 800d99e:	f7ff fddf 	bl	800d560 <_Balloc>
 800d9a2:	4605      	mov	r5, r0
 800d9a4:	b948      	cbnz	r0, 800d9ba <__lshift+0x3e>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	4b28      	ldr	r3, [pc, #160]	@ (800da4c <__lshift+0xd0>)
 800d9aa:	4829      	ldr	r0, [pc, #164]	@ (800da50 <__lshift+0xd4>)
 800d9ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d9b0:	f000 fb86 	bl	800e0c0 <__assert_func>
 800d9b4:	3101      	adds	r1, #1
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	e7ee      	b.n	800d998 <__lshift+0x1c>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	f100 0114 	add.w	r1, r0, #20
 800d9c0:	f100 0210 	add.w	r2, r0, #16
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	4553      	cmp	r3, sl
 800d9c8:	db33      	blt.n	800da32 <__lshift+0xb6>
 800d9ca:	6920      	ldr	r0, [r4, #16]
 800d9cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d9d0:	f104 0314 	add.w	r3, r4, #20
 800d9d4:	f019 091f 	ands.w	r9, r9, #31
 800d9d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d9dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d9e0:	d02b      	beq.n	800da3a <__lshift+0xbe>
 800d9e2:	f1c9 0e20 	rsb	lr, r9, #32
 800d9e6:	468a      	mov	sl, r1
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	6818      	ldr	r0, [r3, #0]
 800d9ec:	fa00 f009 	lsl.w	r0, r0, r9
 800d9f0:	4310      	orrs	r0, r2
 800d9f2:	f84a 0b04 	str.w	r0, [sl], #4
 800d9f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9fa:	459c      	cmp	ip, r3
 800d9fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800da00:	d8f3      	bhi.n	800d9ea <__lshift+0x6e>
 800da02:	ebac 0304 	sub.w	r3, ip, r4
 800da06:	3b15      	subs	r3, #21
 800da08:	f023 0303 	bic.w	r3, r3, #3
 800da0c:	3304      	adds	r3, #4
 800da0e:	f104 0015 	add.w	r0, r4, #21
 800da12:	4584      	cmp	ip, r0
 800da14:	bf38      	it	cc
 800da16:	2304      	movcc	r3, #4
 800da18:	50ca      	str	r2, [r1, r3]
 800da1a:	b10a      	cbz	r2, 800da20 <__lshift+0xa4>
 800da1c:	f108 0602 	add.w	r6, r8, #2
 800da20:	3e01      	subs	r6, #1
 800da22:	4638      	mov	r0, r7
 800da24:	612e      	str	r6, [r5, #16]
 800da26:	4621      	mov	r1, r4
 800da28:	f7ff fdda 	bl	800d5e0 <_Bfree>
 800da2c:	4628      	mov	r0, r5
 800da2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da32:	f842 0f04 	str.w	r0, [r2, #4]!
 800da36:	3301      	adds	r3, #1
 800da38:	e7c5      	b.n	800d9c6 <__lshift+0x4a>
 800da3a:	3904      	subs	r1, #4
 800da3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da40:	f841 2f04 	str.w	r2, [r1, #4]!
 800da44:	459c      	cmp	ip, r3
 800da46:	d8f9      	bhi.n	800da3c <__lshift+0xc0>
 800da48:	e7ea      	b.n	800da20 <__lshift+0xa4>
 800da4a:	bf00      	nop
 800da4c:	08010e88 	.word	0x08010e88
 800da50:	08010e99 	.word	0x08010e99

0800da54 <__mcmp>:
 800da54:	690a      	ldr	r2, [r1, #16]
 800da56:	4603      	mov	r3, r0
 800da58:	6900      	ldr	r0, [r0, #16]
 800da5a:	1a80      	subs	r0, r0, r2
 800da5c:	b530      	push	{r4, r5, lr}
 800da5e:	d10e      	bne.n	800da7e <__mcmp+0x2a>
 800da60:	3314      	adds	r3, #20
 800da62:	3114      	adds	r1, #20
 800da64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800da68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800da6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800da70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800da74:	4295      	cmp	r5, r2
 800da76:	d003      	beq.n	800da80 <__mcmp+0x2c>
 800da78:	d205      	bcs.n	800da86 <__mcmp+0x32>
 800da7a:	f04f 30ff 	mov.w	r0, #4294967295
 800da7e:	bd30      	pop	{r4, r5, pc}
 800da80:	42a3      	cmp	r3, r4
 800da82:	d3f3      	bcc.n	800da6c <__mcmp+0x18>
 800da84:	e7fb      	b.n	800da7e <__mcmp+0x2a>
 800da86:	2001      	movs	r0, #1
 800da88:	e7f9      	b.n	800da7e <__mcmp+0x2a>
	...

0800da8c <__mdiff>:
 800da8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da90:	4689      	mov	r9, r1
 800da92:	4606      	mov	r6, r0
 800da94:	4611      	mov	r1, r2
 800da96:	4648      	mov	r0, r9
 800da98:	4614      	mov	r4, r2
 800da9a:	f7ff ffdb 	bl	800da54 <__mcmp>
 800da9e:	1e05      	subs	r5, r0, #0
 800daa0:	d112      	bne.n	800dac8 <__mdiff+0x3c>
 800daa2:	4629      	mov	r1, r5
 800daa4:	4630      	mov	r0, r6
 800daa6:	f7ff fd5b 	bl	800d560 <_Balloc>
 800daaa:	4602      	mov	r2, r0
 800daac:	b928      	cbnz	r0, 800daba <__mdiff+0x2e>
 800daae:	4b3f      	ldr	r3, [pc, #252]	@ (800dbac <__mdiff+0x120>)
 800dab0:	f240 2137 	movw	r1, #567	@ 0x237
 800dab4:	483e      	ldr	r0, [pc, #248]	@ (800dbb0 <__mdiff+0x124>)
 800dab6:	f000 fb03 	bl	800e0c0 <__assert_func>
 800daba:	2301      	movs	r3, #1
 800dabc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dac0:	4610      	mov	r0, r2
 800dac2:	b003      	add	sp, #12
 800dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac8:	bfbc      	itt	lt
 800daca:	464b      	movlt	r3, r9
 800dacc:	46a1      	movlt	r9, r4
 800dace:	4630      	mov	r0, r6
 800dad0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dad4:	bfba      	itte	lt
 800dad6:	461c      	movlt	r4, r3
 800dad8:	2501      	movlt	r5, #1
 800dada:	2500      	movge	r5, #0
 800dadc:	f7ff fd40 	bl	800d560 <_Balloc>
 800dae0:	4602      	mov	r2, r0
 800dae2:	b918      	cbnz	r0, 800daec <__mdiff+0x60>
 800dae4:	4b31      	ldr	r3, [pc, #196]	@ (800dbac <__mdiff+0x120>)
 800dae6:	f240 2145 	movw	r1, #581	@ 0x245
 800daea:	e7e3      	b.n	800dab4 <__mdiff+0x28>
 800daec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800daf0:	6926      	ldr	r6, [r4, #16]
 800daf2:	60c5      	str	r5, [r0, #12]
 800daf4:	f109 0310 	add.w	r3, r9, #16
 800daf8:	f109 0514 	add.w	r5, r9, #20
 800dafc:	f104 0e14 	add.w	lr, r4, #20
 800db00:	f100 0b14 	add.w	fp, r0, #20
 800db04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800db08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	46d9      	mov	r9, fp
 800db10:	f04f 0c00 	mov.w	ip, #0
 800db14:	9b01      	ldr	r3, [sp, #4]
 800db16:	f85e 0b04 	ldr.w	r0, [lr], #4
 800db1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	fa1f f38a 	uxth.w	r3, sl
 800db24:	4619      	mov	r1, r3
 800db26:	b283      	uxth	r3, r0
 800db28:	1acb      	subs	r3, r1, r3
 800db2a:	0c00      	lsrs	r0, r0, #16
 800db2c:	4463      	add	r3, ip
 800db2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800db32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800db36:	b29b      	uxth	r3, r3
 800db38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800db3c:	4576      	cmp	r6, lr
 800db3e:	f849 3b04 	str.w	r3, [r9], #4
 800db42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db46:	d8e5      	bhi.n	800db14 <__mdiff+0x88>
 800db48:	1b33      	subs	r3, r6, r4
 800db4a:	3b15      	subs	r3, #21
 800db4c:	f023 0303 	bic.w	r3, r3, #3
 800db50:	3415      	adds	r4, #21
 800db52:	3304      	adds	r3, #4
 800db54:	42a6      	cmp	r6, r4
 800db56:	bf38      	it	cc
 800db58:	2304      	movcc	r3, #4
 800db5a:	441d      	add	r5, r3
 800db5c:	445b      	add	r3, fp
 800db5e:	461e      	mov	r6, r3
 800db60:	462c      	mov	r4, r5
 800db62:	4544      	cmp	r4, r8
 800db64:	d30e      	bcc.n	800db84 <__mdiff+0xf8>
 800db66:	f108 0103 	add.w	r1, r8, #3
 800db6a:	1b49      	subs	r1, r1, r5
 800db6c:	f021 0103 	bic.w	r1, r1, #3
 800db70:	3d03      	subs	r5, #3
 800db72:	45a8      	cmp	r8, r5
 800db74:	bf38      	it	cc
 800db76:	2100      	movcc	r1, #0
 800db78:	440b      	add	r3, r1
 800db7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db7e:	b191      	cbz	r1, 800dba6 <__mdiff+0x11a>
 800db80:	6117      	str	r7, [r2, #16]
 800db82:	e79d      	b.n	800dac0 <__mdiff+0x34>
 800db84:	f854 1b04 	ldr.w	r1, [r4], #4
 800db88:	46e6      	mov	lr, ip
 800db8a:	0c08      	lsrs	r0, r1, #16
 800db8c:	fa1c fc81 	uxtah	ip, ip, r1
 800db90:	4471      	add	r1, lr
 800db92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800db96:	b289      	uxth	r1, r1
 800db98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800db9c:	f846 1b04 	str.w	r1, [r6], #4
 800dba0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dba4:	e7dd      	b.n	800db62 <__mdiff+0xd6>
 800dba6:	3f01      	subs	r7, #1
 800dba8:	e7e7      	b.n	800db7a <__mdiff+0xee>
 800dbaa:	bf00      	nop
 800dbac:	08010e88 	.word	0x08010e88
 800dbb0:	08010e99 	.word	0x08010e99

0800dbb4 <__d2b>:
 800dbb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbb8:	460f      	mov	r7, r1
 800dbba:	2101      	movs	r1, #1
 800dbbc:	ec59 8b10 	vmov	r8, r9, d0
 800dbc0:	4616      	mov	r6, r2
 800dbc2:	f7ff fccd 	bl	800d560 <_Balloc>
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	b930      	cbnz	r0, 800dbd8 <__d2b+0x24>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	4b23      	ldr	r3, [pc, #140]	@ (800dc5c <__d2b+0xa8>)
 800dbce:	4824      	ldr	r0, [pc, #144]	@ (800dc60 <__d2b+0xac>)
 800dbd0:	f240 310f 	movw	r1, #783	@ 0x30f
 800dbd4:	f000 fa74 	bl	800e0c0 <__assert_func>
 800dbd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dbdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbe0:	b10d      	cbz	r5, 800dbe6 <__d2b+0x32>
 800dbe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dbe6:	9301      	str	r3, [sp, #4]
 800dbe8:	f1b8 0300 	subs.w	r3, r8, #0
 800dbec:	d023      	beq.n	800dc36 <__d2b+0x82>
 800dbee:	4668      	mov	r0, sp
 800dbf0:	9300      	str	r3, [sp, #0]
 800dbf2:	f7ff fd7c 	bl	800d6ee <__lo0bits>
 800dbf6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dbfa:	b1d0      	cbz	r0, 800dc32 <__d2b+0x7e>
 800dbfc:	f1c0 0320 	rsb	r3, r0, #32
 800dc00:	fa02 f303 	lsl.w	r3, r2, r3
 800dc04:	430b      	orrs	r3, r1
 800dc06:	40c2      	lsrs	r2, r0
 800dc08:	6163      	str	r3, [r4, #20]
 800dc0a:	9201      	str	r2, [sp, #4]
 800dc0c:	9b01      	ldr	r3, [sp, #4]
 800dc0e:	61a3      	str	r3, [r4, #24]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	bf0c      	ite	eq
 800dc14:	2201      	moveq	r2, #1
 800dc16:	2202      	movne	r2, #2
 800dc18:	6122      	str	r2, [r4, #16]
 800dc1a:	b1a5      	cbz	r5, 800dc46 <__d2b+0x92>
 800dc1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dc20:	4405      	add	r5, r0
 800dc22:	603d      	str	r5, [r7, #0]
 800dc24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dc28:	6030      	str	r0, [r6, #0]
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	b003      	add	sp, #12
 800dc2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc32:	6161      	str	r1, [r4, #20]
 800dc34:	e7ea      	b.n	800dc0c <__d2b+0x58>
 800dc36:	a801      	add	r0, sp, #4
 800dc38:	f7ff fd59 	bl	800d6ee <__lo0bits>
 800dc3c:	9b01      	ldr	r3, [sp, #4]
 800dc3e:	6163      	str	r3, [r4, #20]
 800dc40:	3020      	adds	r0, #32
 800dc42:	2201      	movs	r2, #1
 800dc44:	e7e8      	b.n	800dc18 <__d2b+0x64>
 800dc46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dc4e:	6038      	str	r0, [r7, #0]
 800dc50:	6918      	ldr	r0, [r3, #16]
 800dc52:	f7ff fd2d 	bl	800d6b0 <__hi0bits>
 800dc56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc5a:	e7e5      	b.n	800dc28 <__d2b+0x74>
 800dc5c:	08010e88 	.word	0x08010e88
 800dc60:	08010e99 	.word	0x08010e99

0800dc64 <__ssputs_r>:
 800dc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc68:	688e      	ldr	r6, [r1, #8]
 800dc6a:	461f      	mov	r7, r3
 800dc6c:	42be      	cmp	r6, r7
 800dc6e:	680b      	ldr	r3, [r1, #0]
 800dc70:	4682      	mov	sl, r0
 800dc72:	460c      	mov	r4, r1
 800dc74:	4690      	mov	r8, r2
 800dc76:	d82d      	bhi.n	800dcd4 <__ssputs_r+0x70>
 800dc78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc80:	d026      	beq.n	800dcd0 <__ssputs_r+0x6c>
 800dc82:	6965      	ldr	r5, [r4, #20]
 800dc84:	6909      	ldr	r1, [r1, #16]
 800dc86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc8a:	eba3 0901 	sub.w	r9, r3, r1
 800dc8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc92:	1c7b      	adds	r3, r7, #1
 800dc94:	444b      	add	r3, r9
 800dc96:	106d      	asrs	r5, r5, #1
 800dc98:	429d      	cmp	r5, r3
 800dc9a:	bf38      	it	cc
 800dc9c:	461d      	movcc	r5, r3
 800dc9e:	0553      	lsls	r3, r2, #21
 800dca0:	d527      	bpl.n	800dcf2 <__ssputs_r+0x8e>
 800dca2:	4629      	mov	r1, r5
 800dca4:	f7ff fbd0 	bl	800d448 <_malloc_r>
 800dca8:	4606      	mov	r6, r0
 800dcaa:	b360      	cbz	r0, 800dd06 <__ssputs_r+0xa2>
 800dcac:	6921      	ldr	r1, [r4, #16]
 800dcae:	464a      	mov	r2, r9
 800dcb0:	f7fe fceb 	bl	800c68a <memcpy>
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dcba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcbe:	81a3      	strh	r3, [r4, #12]
 800dcc0:	6126      	str	r6, [r4, #16]
 800dcc2:	6165      	str	r5, [r4, #20]
 800dcc4:	444e      	add	r6, r9
 800dcc6:	eba5 0509 	sub.w	r5, r5, r9
 800dcca:	6026      	str	r6, [r4, #0]
 800dccc:	60a5      	str	r5, [r4, #8]
 800dcce:	463e      	mov	r6, r7
 800dcd0:	42be      	cmp	r6, r7
 800dcd2:	d900      	bls.n	800dcd6 <__ssputs_r+0x72>
 800dcd4:	463e      	mov	r6, r7
 800dcd6:	6820      	ldr	r0, [r4, #0]
 800dcd8:	4632      	mov	r2, r6
 800dcda:	4641      	mov	r1, r8
 800dcdc:	f000 f9c6 	bl	800e06c <memmove>
 800dce0:	68a3      	ldr	r3, [r4, #8]
 800dce2:	1b9b      	subs	r3, r3, r6
 800dce4:	60a3      	str	r3, [r4, #8]
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	4433      	add	r3, r6
 800dcea:	6023      	str	r3, [r4, #0]
 800dcec:	2000      	movs	r0, #0
 800dcee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcf2:	462a      	mov	r2, r5
 800dcf4:	f000 fa28 	bl	800e148 <_realloc_r>
 800dcf8:	4606      	mov	r6, r0
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d1e0      	bne.n	800dcc0 <__ssputs_r+0x5c>
 800dcfe:	6921      	ldr	r1, [r4, #16]
 800dd00:	4650      	mov	r0, sl
 800dd02:	f7ff fb2d 	bl	800d360 <_free_r>
 800dd06:	230c      	movs	r3, #12
 800dd08:	f8ca 3000 	str.w	r3, [sl]
 800dd0c:	89a3      	ldrh	r3, [r4, #12]
 800dd0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd12:	81a3      	strh	r3, [r4, #12]
 800dd14:	f04f 30ff 	mov.w	r0, #4294967295
 800dd18:	e7e9      	b.n	800dcee <__ssputs_r+0x8a>
	...

0800dd1c <_svfiprintf_r>:
 800dd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd20:	4698      	mov	r8, r3
 800dd22:	898b      	ldrh	r3, [r1, #12]
 800dd24:	061b      	lsls	r3, r3, #24
 800dd26:	b09d      	sub	sp, #116	@ 0x74
 800dd28:	4607      	mov	r7, r0
 800dd2a:	460d      	mov	r5, r1
 800dd2c:	4614      	mov	r4, r2
 800dd2e:	d510      	bpl.n	800dd52 <_svfiprintf_r+0x36>
 800dd30:	690b      	ldr	r3, [r1, #16]
 800dd32:	b973      	cbnz	r3, 800dd52 <_svfiprintf_r+0x36>
 800dd34:	2140      	movs	r1, #64	@ 0x40
 800dd36:	f7ff fb87 	bl	800d448 <_malloc_r>
 800dd3a:	6028      	str	r0, [r5, #0]
 800dd3c:	6128      	str	r0, [r5, #16]
 800dd3e:	b930      	cbnz	r0, 800dd4e <_svfiprintf_r+0x32>
 800dd40:	230c      	movs	r3, #12
 800dd42:	603b      	str	r3, [r7, #0]
 800dd44:	f04f 30ff 	mov.w	r0, #4294967295
 800dd48:	b01d      	add	sp, #116	@ 0x74
 800dd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4e:	2340      	movs	r3, #64	@ 0x40
 800dd50:	616b      	str	r3, [r5, #20]
 800dd52:	2300      	movs	r3, #0
 800dd54:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd56:	2320      	movs	r3, #32
 800dd58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd60:	2330      	movs	r3, #48	@ 0x30
 800dd62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800df00 <_svfiprintf_r+0x1e4>
 800dd66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd6a:	f04f 0901 	mov.w	r9, #1
 800dd6e:	4623      	mov	r3, r4
 800dd70:	469a      	mov	sl, r3
 800dd72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd76:	b10a      	cbz	r2, 800dd7c <_svfiprintf_r+0x60>
 800dd78:	2a25      	cmp	r2, #37	@ 0x25
 800dd7a:	d1f9      	bne.n	800dd70 <_svfiprintf_r+0x54>
 800dd7c:	ebba 0b04 	subs.w	fp, sl, r4
 800dd80:	d00b      	beq.n	800dd9a <_svfiprintf_r+0x7e>
 800dd82:	465b      	mov	r3, fp
 800dd84:	4622      	mov	r2, r4
 800dd86:	4629      	mov	r1, r5
 800dd88:	4638      	mov	r0, r7
 800dd8a:	f7ff ff6b 	bl	800dc64 <__ssputs_r>
 800dd8e:	3001      	adds	r0, #1
 800dd90:	f000 80a7 	beq.w	800dee2 <_svfiprintf_r+0x1c6>
 800dd94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd96:	445a      	add	r2, fp
 800dd98:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd9a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	f000 809f 	beq.w	800dee2 <_svfiprintf_r+0x1c6>
 800dda4:	2300      	movs	r3, #0
 800dda6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddae:	f10a 0a01 	add.w	sl, sl, #1
 800ddb2:	9304      	str	r3, [sp, #16]
 800ddb4:	9307      	str	r3, [sp, #28]
 800ddb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ddba:	931a      	str	r3, [sp, #104]	@ 0x68
 800ddbc:	4654      	mov	r4, sl
 800ddbe:	2205      	movs	r2, #5
 800ddc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddc4:	484e      	ldr	r0, [pc, #312]	@ (800df00 <_svfiprintf_r+0x1e4>)
 800ddc6:	f7f2 fa03 	bl	80001d0 <memchr>
 800ddca:	9a04      	ldr	r2, [sp, #16]
 800ddcc:	b9d8      	cbnz	r0, 800de06 <_svfiprintf_r+0xea>
 800ddce:	06d0      	lsls	r0, r2, #27
 800ddd0:	bf44      	itt	mi
 800ddd2:	2320      	movmi	r3, #32
 800ddd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddd8:	0711      	lsls	r1, r2, #28
 800ddda:	bf44      	itt	mi
 800dddc:	232b      	movmi	r3, #43	@ 0x2b
 800ddde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dde2:	f89a 3000 	ldrb.w	r3, [sl]
 800dde6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dde8:	d015      	beq.n	800de16 <_svfiprintf_r+0xfa>
 800ddea:	9a07      	ldr	r2, [sp, #28]
 800ddec:	4654      	mov	r4, sl
 800ddee:	2000      	movs	r0, #0
 800ddf0:	f04f 0c0a 	mov.w	ip, #10
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddfa:	3b30      	subs	r3, #48	@ 0x30
 800ddfc:	2b09      	cmp	r3, #9
 800ddfe:	d94b      	bls.n	800de98 <_svfiprintf_r+0x17c>
 800de00:	b1b0      	cbz	r0, 800de30 <_svfiprintf_r+0x114>
 800de02:	9207      	str	r2, [sp, #28]
 800de04:	e014      	b.n	800de30 <_svfiprintf_r+0x114>
 800de06:	eba0 0308 	sub.w	r3, r0, r8
 800de0a:	fa09 f303 	lsl.w	r3, r9, r3
 800de0e:	4313      	orrs	r3, r2
 800de10:	9304      	str	r3, [sp, #16]
 800de12:	46a2      	mov	sl, r4
 800de14:	e7d2      	b.n	800ddbc <_svfiprintf_r+0xa0>
 800de16:	9b03      	ldr	r3, [sp, #12]
 800de18:	1d19      	adds	r1, r3, #4
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	9103      	str	r1, [sp, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	bfbb      	ittet	lt
 800de22:	425b      	neglt	r3, r3
 800de24:	f042 0202 	orrlt.w	r2, r2, #2
 800de28:	9307      	strge	r3, [sp, #28]
 800de2a:	9307      	strlt	r3, [sp, #28]
 800de2c:	bfb8      	it	lt
 800de2e:	9204      	strlt	r2, [sp, #16]
 800de30:	7823      	ldrb	r3, [r4, #0]
 800de32:	2b2e      	cmp	r3, #46	@ 0x2e
 800de34:	d10a      	bne.n	800de4c <_svfiprintf_r+0x130>
 800de36:	7863      	ldrb	r3, [r4, #1]
 800de38:	2b2a      	cmp	r3, #42	@ 0x2a
 800de3a:	d132      	bne.n	800dea2 <_svfiprintf_r+0x186>
 800de3c:	9b03      	ldr	r3, [sp, #12]
 800de3e:	1d1a      	adds	r2, r3, #4
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	9203      	str	r2, [sp, #12]
 800de44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de48:	3402      	adds	r4, #2
 800de4a:	9305      	str	r3, [sp, #20]
 800de4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800df10 <_svfiprintf_r+0x1f4>
 800de50:	7821      	ldrb	r1, [r4, #0]
 800de52:	2203      	movs	r2, #3
 800de54:	4650      	mov	r0, sl
 800de56:	f7f2 f9bb 	bl	80001d0 <memchr>
 800de5a:	b138      	cbz	r0, 800de6c <_svfiprintf_r+0x150>
 800de5c:	9b04      	ldr	r3, [sp, #16]
 800de5e:	eba0 000a 	sub.w	r0, r0, sl
 800de62:	2240      	movs	r2, #64	@ 0x40
 800de64:	4082      	lsls	r2, r0
 800de66:	4313      	orrs	r3, r2
 800de68:	3401      	adds	r4, #1
 800de6a:	9304      	str	r3, [sp, #16]
 800de6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de70:	4824      	ldr	r0, [pc, #144]	@ (800df04 <_svfiprintf_r+0x1e8>)
 800de72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de76:	2206      	movs	r2, #6
 800de78:	f7f2 f9aa 	bl	80001d0 <memchr>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d036      	beq.n	800deee <_svfiprintf_r+0x1d2>
 800de80:	4b21      	ldr	r3, [pc, #132]	@ (800df08 <_svfiprintf_r+0x1ec>)
 800de82:	bb1b      	cbnz	r3, 800decc <_svfiprintf_r+0x1b0>
 800de84:	9b03      	ldr	r3, [sp, #12]
 800de86:	3307      	adds	r3, #7
 800de88:	f023 0307 	bic.w	r3, r3, #7
 800de8c:	3308      	adds	r3, #8
 800de8e:	9303      	str	r3, [sp, #12]
 800de90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de92:	4433      	add	r3, r6
 800de94:	9309      	str	r3, [sp, #36]	@ 0x24
 800de96:	e76a      	b.n	800dd6e <_svfiprintf_r+0x52>
 800de98:	fb0c 3202 	mla	r2, ip, r2, r3
 800de9c:	460c      	mov	r4, r1
 800de9e:	2001      	movs	r0, #1
 800dea0:	e7a8      	b.n	800ddf4 <_svfiprintf_r+0xd8>
 800dea2:	2300      	movs	r3, #0
 800dea4:	3401      	adds	r4, #1
 800dea6:	9305      	str	r3, [sp, #20]
 800dea8:	4619      	mov	r1, r3
 800deaa:	f04f 0c0a 	mov.w	ip, #10
 800deae:	4620      	mov	r0, r4
 800deb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deb4:	3a30      	subs	r2, #48	@ 0x30
 800deb6:	2a09      	cmp	r2, #9
 800deb8:	d903      	bls.n	800dec2 <_svfiprintf_r+0x1a6>
 800deba:	2b00      	cmp	r3, #0
 800debc:	d0c6      	beq.n	800de4c <_svfiprintf_r+0x130>
 800debe:	9105      	str	r1, [sp, #20]
 800dec0:	e7c4      	b.n	800de4c <_svfiprintf_r+0x130>
 800dec2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dec6:	4604      	mov	r4, r0
 800dec8:	2301      	movs	r3, #1
 800deca:	e7f0      	b.n	800deae <_svfiprintf_r+0x192>
 800decc:	ab03      	add	r3, sp, #12
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	462a      	mov	r2, r5
 800ded2:	4b0e      	ldr	r3, [pc, #56]	@ (800df0c <_svfiprintf_r+0x1f0>)
 800ded4:	a904      	add	r1, sp, #16
 800ded6:	4638      	mov	r0, r7
 800ded8:	f7fd fe7a 	bl	800bbd0 <_printf_float>
 800dedc:	1c42      	adds	r2, r0, #1
 800dede:	4606      	mov	r6, r0
 800dee0:	d1d6      	bne.n	800de90 <_svfiprintf_r+0x174>
 800dee2:	89ab      	ldrh	r3, [r5, #12]
 800dee4:	065b      	lsls	r3, r3, #25
 800dee6:	f53f af2d 	bmi.w	800dd44 <_svfiprintf_r+0x28>
 800deea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800deec:	e72c      	b.n	800dd48 <_svfiprintf_r+0x2c>
 800deee:	ab03      	add	r3, sp, #12
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	462a      	mov	r2, r5
 800def4:	4b05      	ldr	r3, [pc, #20]	@ (800df0c <_svfiprintf_r+0x1f0>)
 800def6:	a904      	add	r1, sp, #16
 800def8:	4638      	mov	r0, r7
 800defa:	f7fe f901 	bl	800c100 <_printf_i>
 800defe:	e7ed      	b.n	800dedc <_svfiprintf_r+0x1c0>
 800df00:	08010ff0 	.word	0x08010ff0
 800df04:	08010ffa 	.word	0x08010ffa
 800df08:	0800bbd1 	.word	0x0800bbd1
 800df0c:	0800dc65 	.word	0x0800dc65
 800df10:	08010ff6 	.word	0x08010ff6

0800df14 <__sflush_r>:
 800df14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df1c:	0716      	lsls	r6, r2, #28
 800df1e:	4605      	mov	r5, r0
 800df20:	460c      	mov	r4, r1
 800df22:	d454      	bmi.n	800dfce <__sflush_r+0xba>
 800df24:	684b      	ldr	r3, [r1, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	dc02      	bgt.n	800df30 <__sflush_r+0x1c>
 800df2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	dd48      	ble.n	800dfc2 <__sflush_r+0xae>
 800df30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df32:	2e00      	cmp	r6, #0
 800df34:	d045      	beq.n	800dfc2 <__sflush_r+0xae>
 800df36:	2300      	movs	r3, #0
 800df38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800df3c:	682f      	ldr	r7, [r5, #0]
 800df3e:	6a21      	ldr	r1, [r4, #32]
 800df40:	602b      	str	r3, [r5, #0]
 800df42:	d030      	beq.n	800dfa6 <__sflush_r+0x92>
 800df44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800df46:	89a3      	ldrh	r3, [r4, #12]
 800df48:	0759      	lsls	r1, r3, #29
 800df4a:	d505      	bpl.n	800df58 <__sflush_r+0x44>
 800df4c:	6863      	ldr	r3, [r4, #4]
 800df4e:	1ad2      	subs	r2, r2, r3
 800df50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800df52:	b10b      	cbz	r3, 800df58 <__sflush_r+0x44>
 800df54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800df56:	1ad2      	subs	r2, r2, r3
 800df58:	2300      	movs	r3, #0
 800df5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df5c:	6a21      	ldr	r1, [r4, #32]
 800df5e:	4628      	mov	r0, r5
 800df60:	47b0      	blx	r6
 800df62:	1c43      	adds	r3, r0, #1
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	d106      	bne.n	800df76 <__sflush_r+0x62>
 800df68:	6829      	ldr	r1, [r5, #0]
 800df6a:	291d      	cmp	r1, #29
 800df6c:	d82b      	bhi.n	800dfc6 <__sflush_r+0xb2>
 800df6e:	4a2a      	ldr	r2, [pc, #168]	@ (800e018 <__sflush_r+0x104>)
 800df70:	410a      	asrs	r2, r1
 800df72:	07d6      	lsls	r6, r2, #31
 800df74:	d427      	bmi.n	800dfc6 <__sflush_r+0xb2>
 800df76:	2200      	movs	r2, #0
 800df78:	6062      	str	r2, [r4, #4]
 800df7a:	04d9      	lsls	r1, r3, #19
 800df7c:	6922      	ldr	r2, [r4, #16]
 800df7e:	6022      	str	r2, [r4, #0]
 800df80:	d504      	bpl.n	800df8c <__sflush_r+0x78>
 800df82:	1c42      	adds	r2, r0, #1
 800df84:	d101      	bne.n	800df8a <__sflush_r+0x76>
 800df86:	682b      	ldr	r3, [r5, #0]
 800df88:	b903      	cbnz	r3, 800df8c <__sflush_r+0x78>
 800df8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800df8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df8e:	602f      	str	r7, [r5, #0]
 800df90:	b1b9      	cbz	r1, 800dfc2 <__sflush_r+0xae>
 800df92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df96:	4299      	cmp	r1, r3
 800df98:	d002      	beq.n	800dfa0 <__sflush_r+0x8c>
 800df9a:	4628      	mov	r0, r5
 800df9c:	f7ff f9e0 	bl	800d360 <_free_r>
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfa4:	e00d      	b.n	800dfc2 <__sflush_r+0xae>
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	47b0      	blx	r6
 800dfac:	4602      	mov	r2, r0
 800dfae:	1c50      	adds	r0, r2, #1
 800dfb0:	d1c9      	bne.n	800df46 <__sflush_r+0x32>
 800dfb2:	682b      	ldr	r3, [r5, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d0c6      	beq.n	800df46 <__sflush_r+0x32>
 800dfb8:	2b1d      	cmp	r3, #29
 800dfba:	d001      	beq.n	800dfc0 <__sflush_r+0xac>
 800dfbc:	2b16      	cmp	r3, #22
 800dfbe:	d11e      	bne.n	800dffe <__sflush_r+0xea>
 800dfc0:	602f      	str	r7, [r5, #0]
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	e022      	b.n	800e00c <__sflush_r+0xf8>
 800dfc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfca:	b21b      	sxth	r3, r3
 800dfcc:	e01b      	b.n	800e006 <__sflush_r+0xf2>
 800dfce:	690f      	ldr	r7, [r1, #16]
 800dfd0:	2f00      	cmp	r7, #0
 800dfd2:	d0f6      	beq.n	800dfc2 <__sflush_r+0xae>
 800dfd4:	0793      	lsls	r3, r2, #30
 800dfd6:	680e      	ldr	r6, [r1, #0]
 800dfd8:	bf08      	it	eq
 800dfda:	694b      	ldreq	r3, [r1, #20]
 800dfdc:	600f      	str	r7, [r1, #0]
 800dfde:	bf18      	it	ne
 800dfe0:	2300      	movne	r3, #0
 800dfe2:	eba6 0807 	sub.w	r8, r6, r7
 800dfe6:	608b      	str	r3, [r1, #8]
 800dfe8:	f1b8 0f00 	cmp.w	r8, #0
 800dfec:	dde9      	ble.n	800dfc2 <__sflush_r+0xae>
 800dfee:	6a21      	ldr	r1, [r4, #32]
 800dff0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dff2:	4643      	mov	r3, r8
 800dff4:	463a      	mov	r2, r7
 800dff6:	4628      	mov	r0, r5
 800dff8:	47b0      	blx	r6
 800dffa:	2800      	cmp	r0, #0
 800dffc:	dc08      	bgt.n	800e010 <__sflush_r+0xfc>
 800dffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e006:	81a3      	strh	r3, [r4, #12]
 800e008:	f04f 30ff 	mov.w	r0, #4294967295
 800e00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e010:	4407      	add	r7, r0
 800e012:	eba8 0800 	sub.w	r8, r8, r0
 800e016:	e7e7      	b.n	800dfe8 <__sflush_r+0xd4>
 800e018:	dfbffffe 	.word	0xdfbffffe

0800e01c <_fflush_r>:
 800e01c:	b538      	push	{r3, r4, r5, lr}
 800e01e:	690b      	ldr	r3, [r1, #16]
 800e020:	4605      	mov	r5, r0
 800e022:	460c      	mov	r4, r1
 800e024:	b913      	cbnz	r3, 800e02c <_fflush_r+0x10>
 800e026:	2500      	movs	r5, #0
 800e028:	4628      	mov	r0, r5
 800e02a:	bd38      	pop	{r3, r4, r5, pc}
 800e02c:	b118      	cbz	r0, 800e036 <_fflush_r+0x1a>
 800e02e:	6a03      	ldr	r3, [r0, #32]
 800e030:	b90b      	cbnz	r3, 800e036 <_fflush_r+0x1a>
 800e032:	f7fe fa11 	bl	800c458 <__sinit>
 800e036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d0f3      	beq.n	800e026 <_fflush_r+0xa>
 800e03e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e040:	07d0      	lsls	r0, r2, #31
 800e042:	d404      	bmi.n	800e04e <_fflush_r+0x32>
 800e044:	0599      	lsls	r1, r3, #22
 800e046:	d402      	bmi.n	800e04e <_fflush_r+0x32>
 800e048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e04a:	f7fe fb1c 	bl	800c686 <__retarget_lock_acquire_recursive>
 800e04e:	4628      	mov	r0, r5
 800e050:	4621      	mov	r1, r4
 800e052:	f7ff ff5f 	bl	800df14 <__sflush_r>
 800e056:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e058:	07da      	lsls	r2, r3, #31
 800e05a:	4605      	mov	r5, r0
 800e05c:	d4e4      	bmi.n	800e028 <_fflush_r+0xc>
 800e05e:	89a3      	ldrh	r3, [r4, #12]
 800e060:	059b      	lsls	r3, r3, #22
 800e062:	d4e1      	bmi.n	800e028 <_fflush_r+0xc>
 800e064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e066:	f7fe fb0f 	bl	800c688 <__retarget_lock_release_recursive>
 800e06a:	e7dd      	b.n	800e028 <_fflush_r+0xc>

0800e06c <memmove>:
 800e06c:	4288      	cmp	r0, r1
 800e06e:	b510      	push	{r4, lr}
 800e070:	eb01 0402 	add.w	r4, r1, r2
 800e074:	d902      	bls.n	800e07c <memmove+0x10>
 800e076:	4284      	cmp	r4, r0
 800e078:	4623      	mov	r3, r4
 800e07a:	d807      	bhi.n	800e08c <memmove+0x20>
 800e07c:	1e43      	subs	r3, r0, #1
 800e07e:	42a1      	cmp	r1, r4
 800e080:	d008      	beq.n	800e094 <memmove+0x28>
 800e082:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e08a:	e7f8      	b.n	800e07e <memmove+0x12>
 800e08c:	4402      	add	r2, r0
 800e08e:	4601      	mov	r1, r0
 800e090:	428a      	cmp	r2, r1
 800e092:	d100      	bne.n	800e096 <memmove+0x2a>
 800e094:	bd10      	pop	{r4, pc}
 800e096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e09a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e09e:	e7f7      	b.n	800e090 <memmove+0x24>

0800e0a0 <_sbrk_r>:
 800e0a0:	b538      	push	{r3, r4, r5, lr}
 800e0a2:	4d06      	ldr	r5, [pc, #24]	@ (800e0bc <_sbrk_r+0x1c>)
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	4608      	mov	r0, r1
 800e0aa:	602b      	str	r3, [r5, #0]
 800e0ac:	f7f5 fa28 	bl	8003500 <_sbrk>
 800e0b0:	1c43      	adds	r3, r0, #1
 800e0b2:	d102      	bne.n	800e0ba <_sbrk_r+0x1a>
 800e0b4:	682b      	ldr	r3, [r5, #0]
 800e0b6:	b103      	cbz	r3, 800e0ba <_sbrk_r+0x1a>
 800e0b8:	6023      	str	r3, [r4, #0]
 800e0ba:	bd38      	pop	{r3, r4, r5, pc}
 800e0bc:	20002318 	.word	0x20002318

0800e0c0 <__assert_func>:
 800e0c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0c2:	4614      	mov	r4, r2
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	4b09      	ldr	r3, [pc, #36]	@ (800e0ec <__assert_func+0x2c>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4605      	mov	r5, r0
 800e0cc:	68d8      	ldr	r0, [r3, #12]
 800e0ce:	b954      	cbnz	r4, 800e0e6 <__assert_func+0x26>
 800e0d0:	4b07      	ldr	r3, [pc, #28]	@ (800e0f0 <__assert_func+0x30>)
 800e0d2:	461c      	mov	r4, r3
 800e0d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0d8:	9100      	str	r1, [sp, #0]
 800e0da:	462b      	mov	r3, r5
 800e0dc:	4905      	ldr	r1, [pc, #20]	@ (800e0f4 <__assert_func+0x34>)
 800e0de:	f000 f86f 	bl	800e1c0 <fiprintf>
 800e0e2:	f000 f87f 	bl	800e1e4 <abort>
 800e0e6:	4b04      	ldr	r3, [pc, #16]	@ (800e0f8 <__assert_func+0x38>)
 800e0e8:	e7f4      	b.n	800e0d4 <__assert_func+0x14>
 800e0ea:	bf00      	nop
 800e0ec:	20000134 	.word	0x20000134
 800e0f0:	08011046 	.word	0x08011046
 800e0f4:	08011018 	.word	0x08011018
 800e0f8:	0801100b 	.word	0x0801100b

0800e0fc <_calloc_r>:
 800e0fc:	b570      	push	{r4, r5, r6, lr}
 800e0fe:	fba1 5402 	umull	r5, r4, r1, r2
 800e102:	b93c      	cbnz	r4, 800e114 <_calloc_r+0x18>
 800e104:	4629      	mov	r1, r5
 800e106:	f7ff f99f 	bl	800d448 <_malloc_r>
 800e10a:	4606      	mov	r6, r0
 800e10c:	b928      	cbnz	r0, 800e11a <_calloc_r+0x1e>
 800e10e:	2600      	movs	r6, #0
 800e110:	4630      	mov	r0, r6
 800e112:	bd70      	pop	{r4, r5, r6, pc}
 800e114:	220c      	movs	r2, #12
 800e116:	6002      	str	r2, [r0, #0]
 800e118:	e7f9      	b.n	800e10e <_calloc_r+0x12>
 800e11a:	462a      	mov	r2, r5
 800e11c:	4621      	mov	r1, r4
 800e11e:	f7fe fa34 	bl	800c58a <memset>
 800e122:	e7f5      	b.n	800e110 <_calloc_r+0x14>

0800e124 <__ascii_mbtowc>:
 800e124:	b082      	sub	sp, #8
 800e126:	b901      	cbnz	r1, 800e12a <__ascii_mbtowc+0x6>
 800e128:	a901      	add	r1, sp, #4
 800e12a:	b142      	cbz	r2, 800e13e <__ascii_mbtowc+0x1a>
 800e12c:	b14b      	cbz	r3, 800e142 <__ascii_mbtowc+0x1e>
 800e12e:	7813      	ldrb	r3, [r2, #0]
 800e130:	600b      	str	r3, [r1, #0]
 800e132:	7812      	ldrb	r2, [r2, #0]
 800e134:	1e10      	subs	r0, r2, #0
 800e136:	bf18      	it	ne
 800e138:	2001      	movne	r0, #1
 800e13a:	b002      	add	sp, #8
 800e13c:	4770      	bx	lr
 800e13e:	4610      	mov	r0, r2
 800e140:	e7fb      	b.n	800e13a <__ascii_mbtowc+0x16>
 800e142:	f06f 0001 	mvn.w	r0, #1
 800e146:	e7f8      	b.n	800e13a <__ascii_mbtowc+0x16>

0800e148 <_realloc_r>:
 800e148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e14c:	4680      	mov	r8, r0
 800e14e:	4615      	mov	r5, r2
 800e150:	460c      	mov	r4, r1
 800e152:	b921      	cbnz	r1, 800e15e <_realloc_r+0x16>
 800e154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e158:	4611      	mov	r1, r2
 800e15a:	f7ff b975 	b.w	800d448 <_malloc_r>
 800e15e:	b92a      	cbnz	r2, 800e16c <_realloc_r+0x24>
 800e160:	f7ff f8fe 	bl	800d360 <_free_r>
 800e164:	2400      	movs	r4, #0
 800e166:	4620      	mov	r0, r4
 800e168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e16c:	f000 f841 	bl	800e1f2 <_malloc_usable_size_r>
 800e170:	4285      	cmp	r5, r0
 800e172:	4606      	mov	r6, r0
 800e174:	d802      	bhi.n	800e17c <_realloc_r+0x34>
 800e176:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e17a:	d8f4      	bhi.n	800e166 <_realloc_r+0x1e>
 800e17c:	4629      	mov	r1, r5
 800e17e:	4640      	mov	r0, r8
 800e180:	f7ff f962 	bl	800d448 <_malloc_r>
 800e184:	4607      	mov	r7, r0
 800e186:	2800      	cmp	r0, #0
 800e188:	d0ec      	beq.n	800e164 <_realloc_r+0x1c>
 800e18a:	42b5      	cmp	r5, r6
 800e18c:	462a      	mov	r2, r5
 800e18e:	4621      	mov	r1, r4
 800e190:	bf28      	it	cs
 800e192:	4632      	movcs	r2, r6
 800e194:	f7fe fa79 	bl	800c68a <memcpy>
 800e198:	4621      	mov	r1, r4
 800e19a:	4640      	mov	r0, r8
 800e19c:	f7ff f8e0 	bl	800d360 <_free_r>
 800e1a0:	463c      	mov	r4, r7
 800e1a2:	e7e0      	b.n	800e166 <_realloc_r+0x1e>

0800e1a4 <__ascii_wctomb>:
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	4608      	mov	r0, r1
 800e1a8:	b141      	cbz	r1, 800e1bc <__ascii_wctomb+0x18>
 800e1aa:	2aff      	cmp	r2, #255	@ 0xff
 800e1ac:	d904      	bls.n	800e1b8 <__ascii_wctomb+0x14>
 800e1ae:	228a      	movs	r2, #138	@ 0x8a
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b6:	4770      	bx	lr
 800e1b8:	700a      	strb	r2, [r1, #0]
 800e1ba:	2001      	movs	r0, #1
 800e1bc:	4770      	bx	lr
	...

0800e1c0 <fiprintf>:
 800e1c0:	b40e      	push	{r1, r2, r3}
 800e1c2:	b503      	push	{r0, r1, lr}
 800e1c4:	4601      	mov	r1, r0
 800e1c6:	ab03      	add	r3, sp, #12
 800e1c8:	4805      	ldr	r0, [pc, #20]	@ (800e1e0 <fiprintf+0x20>)
 800e1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1ce:	6800      	ldr	r0, [r0, #0]
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	f000 f83f 	bl	800e254 <_vfiprintf_r>
 800e1d6:	b002      	add	sp, #8
 800e1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1dc:	b003      	add	sp, #12
 800e1de:	4770      	bx	lr
 800e1e0:	20000134 	.word	0x20000134

0800e1e4 <abort>:
 800e1e4:	b508      	push	{r3, lr}
 800e1e6:	2006      	movs	r0, #6
 800e1e8:	f000 fa08 	bl	800e5fc <raise>
 800e1ec:	2001      	movs	r0, #1
 800e1ee:	f7f5 f90f 	bl	8003410 <_exit>

0800e1f2 <_malloc_usable_size_r>:
 800e1f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1f6:	1f18      	subs	r0, r3, #4
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	bfbc      	itt	lt
 800e1fc:	580b      	ldrlt	r3, [r1, r0]
 800e1fe:	18c0      	addlt	r0, r0, r3
 800e200:	4770      	bx	lr

0800e202 <__sfputc_r>:
 800e202:	6893      	ldr	r3, [r2, #8]
 800e204:	3b01      	subs	r3, #1
 800e206:	2b00      	cmp	r3, #0
 800e208:	b410      	push	{r4}
 800e20a:	6093      	str	r3, [r2, #8]
 800e20c:	da08      	bge.n	800e220 <__sfputc_r+0x1e>
 800e20e:	6994      	ldr	r4, [r2, #24]
 800e210:	42a3      	cmp	r3, r4
 800e212:	db01      	blt.n	800e218 <__sfputc_r+0x16>
 800e214:	290a      	cmp	r1, #10
 800e216:	d103      	bne.n	800e220 <__sfputc_r+0x1e>
 800e218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e21c:	f000 b932 	b.w	800e484 <__swbuf_r>
 800e220:	6813      	ldr	r3, [r2, #0]
 800e222:	1c58      	adds	r0, r3, #1
 800e224:	6010      	str	r0, [r2, #0]
 800e226:	7019      	strb	r1, [r3, #0]
 800e228:	4608      	mov	r0, r1
 800e22a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e22e:	4770      	bx	lr

0800e230 <__sfputs_r>:
 800e230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e232:	4606      	mov	r6, r0
 800e234:	460f      	mov	r7, r1
 800e236:	4614      	mov	r4, r2
 800e238:	18d5      	adds	r5, r2, r3
 800e23a:	42ac      	cmp	r4, r5
 800e23c:	d101      	bne.n	800e242 <__sfputs_r+0x12>
 800e23e:	2000      	movs	r0, #0
 800e240:	e007      	b.n	800e252 <__sfputs_r+0x22>
 800e242:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e246:	463a      	mov	r2, r7
 800e248:	4630      	mov	r0, r6
 800e24a:	f7ff ffda 	bl	800e202 <__sfputc_r>
 800e24e:	1c43      	adds	r3, r0, #1
 800e250:	d1f3      	bne.n	800e23a <__sfputs_r+0xa>
 800e252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e254 <_vfiprintf_r>:
 800e254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e258:	460d      	mov	r5, r1
 800e25a:	b09d      	sub	sp, #116	@ 0x74
 800e25c:	4614      	mov	r4, r2
 800e25e:	4698      	mov	r8, r3
 800e260:	4606      	mov	r6, r0
 800e262:	b118      	cbz	r0, 800e26c <_vfiprintf_r+0x18>
 800e264:	6a03      	ldr	r3, [r0, #32]
 800e266:	b90b      	cbnz	r3, 800e26c <_vfiprintf_r+0x18>
 800e268:	f7fe f8f6 	bl	800c458 <__sinit>
 800e26c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e26e:	07d9      	lsls	r1, r3, #31
 800e270:	d405      	bmi.n	800e27e <_vfiprintf_r+0x2a>
 800e272:	89ab      	ldrh	r3, [r5, #12]
 800e274:	059a      	lsls	r2, r3, #22
 800e276:	d402      	bmi.n	800e27e <_vfiprintf_r+0x2a>
 800e278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e27a:	f7fe fa04 	bl	800c686 <__retarget_lock_acquire_recursive>
 800e27e:	89ab      	ldrh	r3, [r5, #12]
 800e280:	071b      	lsls	r3, r3, #28
 800e282:	d501      	bpl.n	800e288 <_vfiprintf_r+0x34>
 800e284:	692b      	ldr	r3, [r5, #16]
 800e286:	b99b      	cbnz	r3, 800e2b0 <_vfiprintf_r+0x5c>
 800e288:	4629      	mov	r1, r5
 800e28a:	4630      	mov	r0, r6
 800e28c:	f000 f938 	bl	800e500 <__swsetup_r>
 800e290:	b170      	cbz	r0, 800e2b0 <_vfiprintf_r+0x5c>
 800e292:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e294:	07dc      	lsls	r4, r3, #31
 800e296:	d504      	bpl.n	800e2a2 <_vfiprintf_r+0x4e>
 800e298:	f04f 30ff 	mov.w	r0, #4294967295
 800e29c:	b01d      	add	sp, #116	@ 0x74
 800e29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a2:	89ab      	ldrh	r3, [r5, #12]
 800e2a4:	0598      	lsls	r0, r3, #22
 800e2a6:	d4f7      	bmi.n	800e298 <_vfiprintf_r+0x44>
 800e2a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2aa:	f7fe f9ed 	bl	800c688 <__retarget_lock_release_recursive>
 800e2ae:	e7f3      	b.n	800e298 <_vfiprintf_r+0x44>
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2b4:	2320      	movs	r3, #32
 800e2b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e2ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2be:	2330      	movs	r3, #48	@ 0x30
 800e2c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e470 <_vfiprintf_r+0x21c>
 800e2c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e2c8:	f04f 0901 	mov.w	r9, #1
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	469a      	mov	sl, r3
 800e2d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2d4:	b10a      	cbz	r2, 800e2da <_vfiprintf_r+0x86>
 800e2d6:	2a25      	cmp	r2, #37	@ 0x25
 800e2d8:	d1f9      	bne.n	800e2ce <_vfiprintf_r+0x7a>
 800e2da:	ebba 0b04 	subs.w	fp, sl, r4
 800e2de:	d00b      	beq.n	800e2f8 <_vfiprintf_r+0xa4>
 800e2e0:	465b      	mov	r3, fp
 800e2e2:	4622      	mov	r2, r4
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	f7ff ffa2 	bl	800e230 <__sfputs_r>
 800e2ec:	3001      	adds	r0, #1
 800e2ee:	f000 80a7 	beq.w	800e440 <_vfiprintf_r+0x1ec>
 800e2f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2f4:	445a      	add	r2, fp
 800e2f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f000 809f 	beq.w	800e440 <_vfiprintf_r+0x1ec>
 800e302:	2300      	movs	r3, #0
 800e304:	f04f 32ff 	mov.w	r2, #4294967295
 800e308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e30c:	f10a 0a01 	add.w	sl, sl, #1
 800e310:	9304      	str	r3, [sp, #16]
 800e312:	9307      	str	r3, [sp, #28]
 800e314:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e318:	931a      	str	r3, [sp, #104]	@ 0x68
 800e31a:	4654      	mov	r4, sl
 800e31c:	2205      	movs	r2, #5
 800e31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e322:	4853      	ldr	r0, [pc, #332]	@ (800e470 <_vfiprintf_r+0x21c>)
 800e324:	f7f1 ff54 	bl	80001d0 <memchr>
 800e328:	9a04      	ldr	r2, [sp, #16]
 800e32a:	b9d8      	cbnz	r0, 800e364 <_vfiprintf_r+0x110>
 800e32c:	06d1      	lsls	r1, r2, #27
 800e32e:	bf44      	itt	mi
 800e330:	2320      	movmi	r3, #32
 800e332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e336:	0713      	lsls	r3, r2, #28
 800e338:	bf44      	itt	mi
 800e33a:	232b      	movmi	r3, #43	@ 0x2b
 800e33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e340:	f89a 3000 	ldrb.w	r3, [sl]
 800e344:	2b2a      	cmp	r3, #42	@ 0x2a
 800e346:	d015      	beq.n	800e374 <_vfiprintf_r+0x120>
 800e348:	9a07      	ldr	r2, [sp, #28]
 800e34a:	4654      	mov	r4, sl
 800e34c:	2000      	movs	r0, #0
 800e34e:	f04f 0c0a 	mov.w	ip, #10
 800e352:	4621      	mov	r1, r4
 800e354:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e358:	3b30      	subs	r3, #48	@ 0x30
 800e35a:	2b09      	cmp	r3, #9
 800e35c:	d94b      	bls.n	800e3f6 <_vfiprintf_r+0x1a2>
 800e35e:	b1b0      	cbz	r0, 800e38e <_vfiprintf_r+0x13a>
 800e360:	9207      	str	r2, [sp, #28]
 800e362:	e014      	b.n	800e38e <_vfiprintf_r+0x13a>
 800e364:	eba0 0308 	sub.w	r3, r0, r8
 800e368:	fa09 f303 	lsl.w	r3, r9, r3
 800e36c:	4313      	orrs	r3, r2
 800e36e:	9304      	str	r3, [sp, #16]
 800e370:	46a2      	mov	sl, r4
 800e372:	e7d2      	b.n	800e31a <_vfiprintf_r+0xc6>
 800e374:	9b03      	ldr	r3, [sp, #12]
 800e376:	1d19      	adds	r1, r3, #4
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	9103      	str	r1, [sp, #12]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	bfbb      	ittet	lt
 800e380:	425b      	neglt	r3, r3
 800e382:	f042 0202 	orrlt.w	r2, r2, #2
 800e386:	9307      	strge	r3, [sp, #28]
 800e388:	9307      	strlt	r3, [sp, #28]
 800e38a:	bfb8      	it	lt
 800e38c:	9204      	strlt	r2, [sp, #16]
 800e38e:	7823      	ldrb	r3, [r4, #0]
 800e390:	2b2e      	cmp	r3, #46	@ 0x2e
 800e392:	d10a      	bne.n	800e3aa <_vfiprintf_r+0x156>
 800e394:	7863      	ldrb	r3, [r4, #1]
 800e396:	2b2a      	cmp	r3, #42	@ 0x2a
 800e398:	d132      	bne.n	800e400 <_vfiprintf_r+0x1ac>
 800e39a:	9b03      	ldr	r3, [sp, #12]
 800e39c:	1d1a      	adds	r2, r3, #4
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	9203      	str	r2, [sp, #12]
 800e3a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3a6:	3402      	adds	r4, #2
 800e3a8:	9305      	str	r3, [sp, #20]
 800e3aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e480 <_vfiprintf_r+0x22c>
 800e3ae:	7821      	ldrb	r1, [r4, #0]
 800e3b0:	2203      	movs	r2, #3
 800e3b2:	4650      	mov	r0, sl
 800e3b4:	f7f1 ff0c 	bl	80001d0 <memchr>
 800e3b8:	b138      	cbz	r0, 800e3ca <_vfiprintf_r+0x176>
 800e3ba:	9b04      	ldr	r3, [sp, #16]
 800e3bc:	eba0 000a 	sub.w	r0, r0, sl
 800e3c0:	2240      	movs	r2, #64	@ 0x40
 800e3c2:	4082      	lsls	r2, r0
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	3401      	adds	r4, #1
 800e3c8:	9304      	str	r3, [sp, #16]
 800e3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ce:	4829      	ldr	r0, [pc, #164]	@ (800e474 <_vfiprintf_r+0x220>)
 800e3d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e3d4:	2206      	movs	r2, #6
 800e3d6:	f7f1 fefb 	bl	80001d0 <memchr>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	d03f      	beq.n	800e45e <_vfiprintf_r+0x20a>
 800e3de:	4b26      	ldr	r3, [pc, #152]	@ (800e478 <_vfiprintf_r+0x224>)
 800e3e0:	bb1b      	cbnz	r3, 800e42a <_vfiprintf_r+0x1d6>
 800e3e2:	9b03      	ldr	r3, [sp, #12]
 800e3e4:	3307      	adds	r3, #7
 800e3e6:	f023 0307 	bic.w	r3, r3, #7
 800e3ea:	3308      	adds	r3, #8
 800e3ec:	9303      	str	r3, [sp, #12]
 800e3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3f0:	443b      	add	r3, r7
 800e3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3f4:	e76a      	b.n	800e2cc <_vfiprintf_r+0x78>
 800e3f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3fa:	460c      	mov	r4, r1
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	e7a8      	b.n	800e352 <_vfiprintf_r+0xfe>
 800e400:	2300      	movs	r3, #0
 800e402:	3401      	adds	r4, #1
 800e404:	9305      	str	r3, [sp, #20]
 800e406:	4619      	mov	r1, r3
 800e408:	f04f 0c0a 	mov.w	ip, #10
 800e40c:	4620      	mov	r0, r4
 800e40e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e412:	3a30      	subs	r2, #48	@ 0x30
 800e414:	2a09      	cmp	r2, #9
 800e416:	d903      	bls.n	800e420 <_vfiprintf_r+0x1cc>
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d0c6      	beq.n	800e3aa <_vfiprintf_r+0x156>
 800e41c:	9105      	str	r1, [sp, #20]
 800e41e:	e7c4      	b.n	800e3aa <_vfiprintf_r+0x156>
 800e420:	fb0c 2101 	mla	r1, ip, r1, r2
 800e424:	4604      	mov	r4, r0
 800e426:	2301      	movs	r3, #1
 800e428:	e7f0      	b.n	800e40c <_vfiprintf_r+0x1b8>
 800e42a:	ab03      	add	r3, sp, #12
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	462a      	mov	r2, r5
 800e430:	4b12      	ldr	r3, [pc, #72]	@ (800e47c <_vfiprintf_r+0x228>)
 800e432:	a904      	add	r1, sp, #16
 800e434:	4630      	mov	r0, r6
 800e436:	f7fd fbcb 	bl	800bbd0 <_printf_float>
 800e43a:	4607      	mov	r7, r0
 800e43c:	1c78      	adds	r0, r7, #1
 800e43e:	d1d6      	bne.n	800e3ee <_vfiprintf_r+0x19a>
 800e440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e442:	07d9      	lsls	r1, r3, #31
 800e444:	d405      	bmi.n	800e452 <_vfiprintf_r+0x1fe>
 800e446:	89ab      	ldrh	r3, [r5, #12]
 800e448:	059a      	lsls	r2, r3, #22
 800e44a:	d402      	bmi.n	800e452 <_vfiprintf_r+0x1fe>
 800e44c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e44e:	f7fe f91b 	bl	800c688 <__retarget_lock_release_recursive>
 800e452:	89ab      	ldrh	r3, [r5, #12]
 800e454:	065b      	lsls	r3, r3, #25
 800e456:	f53f af1f 	bmi.w	800e298 <_vfiprintf_r+0x44>
 800e45a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e45c:	e71e      	b.n	800e29c <_vfiprintf_r+0x48>
 800e45e:	ab03      	add	r3, sp, #12
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	462a      	mov	r2, r5
 800e464:	4b05      	ldr	r3, [pc, #20]	@ (800e47c <_vfiprintf_r+0x228>)
 800e466:	a904      	add	r1, sp, #16
 800e468:	4630      	mov	r0, r6
 800e46a:	f7fd fe49 	bl	800c100 <_printf_i>
 800e46e:	e7e4      	b.n	800e43a <_vfiprintf_r+0x1e6>
 800e470:	08010ff0 	.word	0x08010ff0
 800e474:	08010ffa 	.word	0x08010ffa
 800e478:	0800bbd1 	.word	0x0800bbd1
 800e47c:	0800e231 	.word	0x0800e231
 800e480:	08010ff6 	.word	0x08010ff6

0800e484 <__swbuf_r>:
 800e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e486:	460e      	mov	r6, r1
 800e488:	4614      	mov	r4, r2
 800e48a:	4605      	mov	r5, r0
 800e48c:	b118      	cbz	r0, 800e496 <__swbuf_r+0x12>
 800e48e:	6a03      	ldr	r3, [r0, #32]
 800e490:	b90b      	cbnz	r3, 800e496 <__swbuf_r+0x12>
 800e492:	f7fd ffe1 	bl	800c458 <__sinit>
 800e496:	69a3      	ldr	r3, [r4, #24]
 800e498:	60a3      	str	r3, [r4, #8]
 800e49a:	89a3      	ldrh	r3, [r4, #12]
 800e49c:	071a      	lsls	r2, r3, #28
 800e49e:	d501      	bpl.n	800e4a4 <__swbuf_r+0x20>
 800e4a0:	6923      	ldr	r3, [r4, #16]
 800e4a2:	b943      	cbnz	r3, 800e4b6 <__swbuf_r+0x32>
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	f000 f82a 	bl	800e500 <__swsetup_r>
 800e4ac:	b118      	cbz	r0, 800e4b6 <__swbuf_r+0x32>
 800e4ae:	f04f 37ff 	mov.w	r7, #4294967295
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	6922      	ldr	r2, [r4, #16]
 800e4ba:	1a98      	subs	r0, r3, r2
 800e4bc:	6963      	ldr	r3, [r4, #20]
 800e4be:	b2f6      	uxtb	r6, r6
 800e4c0:	4283      	cmp	r3, r0
 800e4c2:	4637      	mov	r7, r6
 800e4c4:	dc05      	bgt.n	800e4d2 <__swbuf_r+0x4e>
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	f7ff fda7 	bl	800e01c <_fflush_r>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d1ed      	bne.n	800e4ae <__swbuf_r+0x2a>
 800e4d2:	68a3      	ldr	r3, [r4, #8]
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	60a3      	str	r3, [r4, #8]
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	1c5a      	adds	r2, r3, #1
 800e4dc:	6022      	str	r2, [r4, #0]
 800e4de:	701e      	strb	r6, [r3, #0]
 800e4e0:	6962      	ldr	r2, [r4, #20]
 800e4e2:	1c43      	adds	r3, r0, #1
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d004      	beq.n	800e4f2 <__swbuf_r+0x6e>
 800e4e8:	89a3      	ldrh	r3, [r4, #12]
 800e4ea:	07db      	lsls	r3, r3, #31
 800e4ec:	d5e1      	bpl.n	800e4b2 <__swbuf_r+0x2e>
 800e4ee:	2e0a      	cmp	r6, #10
 800e4f0:	d1df      	bne.n	800e4b2 <__swbuf_r+0x2e>
 800e4f2:	4621      	mov	r1, r4
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	f7ff fd91 	bl	800e01c <_fflush_r>
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	d0d9      	beq.n	800e4b2 <__swbuf_r+0x2e>
 800e4fe:	e7d6      	b.n	800e4ae <__swbuf_r+0x2a>

0800e500 <__swsetup_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	4b29      	ldr	r3, [pc, #164]	@ (800e5a8 <__swsetup_r+0xa8>)
 800e504:	4605      	mov	r5, r0
 800e506:	6818      	ldr	r0, [r3, #0]
 800e508:	460c      	mov	r4, r1
 800e50a:	b118      	cbz	r0, 800e514 <__swsetup_r+0x14>
 800e50c:	6a03      	ldr	r3, [r0, #32]
 800e50e:	b90b      	cbnz	r3, 800e514 <__swsetup_r+0x14>
 800e510:	f7fd ffa2 	bl	800c458 <__sinit>
 800e514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e518:	0719      	lsls	r1, r3, #28
 800e51a:	d422      	bmi.n	800e562 <__swsetup_r+0x62>
 800e51c:	06da      	lsls	r2, r3, #27
 800e51e:	d407      	bmi.n	800e530 <__swsetup_r+0x30>
 800e520:	2209      	movs	r2, #9
 800e522:	602a      	str	r2, [r5, #0]
 800e524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e528:	81a3      	strh	r3, [r4, #12]
 800e52a:	f04f 30ff 	mov.w	r0, #4294967295
 800e52e:	e033      	b.n	800e598 <__swsetup_r+0x98>
 800e530:	0758      	lsls	r0, r3, #29
 800e532:	d512      	bpl.n	800e55a <__swsetup_r+0x5a>
 800e534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e536:	b141      	cbz	r1, 800e54a <__swsetup_r+0x4a>
 800e538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e53c:	4299      	cmp	r1, r3
 800e53e:	d002      	beq.n	800e546 <__swsetup_r+0x46>
 800e540:	4628      	mov	r0, r5
 800e542:	f7fe ff0d 	bl	800d360 <_free_r>
 800e546:	2300      	movs	r3, #0
 800e548:	6363      	str	r3, [r4, #52]	@ 0x34
 800e54a:	89a3      	ldrh	r3, [r4, #12]
 800e54c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e550:	81a3      	strh	r3, [r4, #12]
 800e552:	2300      	movs	r3, #0
 800e554:	6063      	str	r3, [r4, #4]
 800e556:	6923      	ldr	r3, [r4, #16]
 800e558:	6023      	str	r3, [r4, #0]
 800e55a:	89a3      	ldrh	r3, [r4, #12]
 800e55c:	f043 0308 	orr.w	r3, r3, #8
 800e560:	81a3      	strh	r3, [r4, #12]
 800e562:	6923      	ldr	r3, [r4, #16]
 800e564:	b94b      	cbnz	r3, 800e57a <__swsetup_r+0x7a>
 800e566:	89a3      	ldrh	r3, [r4, #12]
 800e568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e56c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e570:	d003      	beq.n	800e57a <__swsetup_r+0x7a>
 800e572:	4621      	mov	r1, r4
 800e574:	4628      	mov	r0, r5
 800e576:	f000 f883 	bl	800e680 <__smakebuf_r>
 800e57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e57e:	f013 0201 	ands.w	r2, r3, #1
 800e582:	d00a      	beq.n	800e59a <__swsetup_r+0x9a>
 800e584:	2200      	movs	r2, #0
 800e586:	60a2      	str	r2, [r4, #8]
 800e588:	6962      	ldr	r2, [r4, #20]
 800e58a:	4252      	negs	r2, r2
 800e58c:	61a2      	str	r2, [r4, #24]
 800e58e:	6922      	ldr	r2, [r4, #16]
 800e590:	b942      	cbnz	r2, 800e5a4 <__swsetup_r+0xa4>
 800e592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e596:	d1c5      	bne.n	800e524 <__swsetup_r+0x24>
 800e598:	bd38      	pop	{r3, r4, r5, pc}
 800e59a:	0799      	lsls	r1, r3, #30
 800e59c:	bf58      	it	pl
 800e59e:	6962      	ldrpl	r2, [r4, #20]
 800e5a0:	60a2      	str	r2, [r4, #8]
 800e5a2:	e7f4      	b.n	800e58e <__swsetup_r+0x8e>
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	e7f7      	b.n	800e598 <__swsetup_r+0x98>
 800e5a8:	20000134 	.word	0x20000134

0800e5ac <_raise_r>:
 800e5ac:	291f      	cmp	r1, #31
 800e5ae:	b538      	push	{r3, r4, r5, lr}
 800e5b0:	4605      	mov	r5, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	d904      	bls.n	800e5c0 <_raise_r+0x14>
 800e5b6:	2316      	movs	r3, #22
 800e5b8:	6003      	str	r3, [r0, #0]
 800e5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e5be:	bd38      	pop	{r3, r4, r5, pc}
 800e5c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e5c2:	b112      	cbz	r2, 800e5ca <_raise_r+0x1e>
 800e5c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5c8:	b94b      	cbnz	r3, 800e5de <_raise_r+0x32>
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f000 f830 	bl	800e630 <_getpid_r>
 800e5d0:	4622      	mov	r2, r4
 800e5d2:	4601      	mov	r1, r0
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5da:	f000 b817 	b.w	800e60c <_kill_r>
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d00a      	beq.n	800e5f8 <_raise_r+0x4c>
 800e5e2:	1c59      	adds	r1, r3, #1
 800e5e4:	d103      	bne.n	800e5ee <_raise_r+0x42>
 800e5e6:	2316      	movs	r3, #22
 800e5e8:	6003      	str	r3, [r0, #0]
 800e5ea:	2001      	movs	r0, #1
 800e5ec:	e7e7      	b.n	800e5be <_raise_r+0x12>
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	4798      	blx	r3
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	e7e0      	b.n	800e5be <_raise_r+0x12>

0800e5fc <raise>:
 800e5fc:	4b02      	ldr	r3, [pc, #8]	@ (800e608 <raise+0xc>)
 800e5fe:	4601      	mov	r1, r0
 800e600:	6818      	ldr	r0, [r3, #0]
 800e602:	f7ff bfd3 	b.w	800e5ac <_raise_r>
 800e606:	bf00      	nop
 800e608:	20000134 	.word	0x20000134

0800e60c <_kill_r>:
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	4d07      	ldr	r5, [pc, #28]	@ (800e62c <_kill_r+0x20>)
 800e610:	2300      	movs	r3, #0
 800e612:	4604      	mov	r4, r0
 800e614:	4608      	mov	r0, r1
 800e616:	4611      	mov	r1, r2
 800e618:	602b      	str	r3, [r5, #0]
 800e61a:	f7f4 fee9 	bl	80033f0 <_kill>
 800e61e:	1c43      	adds	r3, r0, #1
 800e620:	d102      	bne.n	800e628 <_kill_r+0x1c>
 800e622:	682b      	ldr	r3, [r5, #0]
 800e624:	b103      	cbz	r3, 800e628 <_kill_r+0x1c>
 800e626:	6023      	str	r3, [r4, #0]
 800e628:	bd38      	pop	{r3, r4, r5, pc}
 800e62a:	bf00      	nop
 800e62c:	20002318 	.word	0x20002318

0800e630 <_getpid_r>:
 800e630:	f7f4 bed6 	b.w	80033e0 <_getpid>

0800e634 <__swhatbuf_r>:
 800e634:	b570      	push	{r4, r5, r6, lr}
 800e636:	460c      	mov	r4, r1
 800e638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e63c:	2900      	cmp	r1, #0
 800e63e:	b096      	sub	sp, #88	@ 0x58
 800e640:	4615      	mov	r5, r2
 800e642:	461e      	mov	r6, r3
 800e644:	da0d      	bge.n	800e662 <__swhatbuf_r+0x2e>
 800e646:	89a3      	ldrh	r3, [r4, #12]
 800e648:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e64c:	f04f 0100 	mov.w	r1, #0
 800e650:	bf14      	ite	ne
 800e652:	2340      	movne	r3, #64	@ 0x40
 800e654:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e658:	2000      	movs	r0, #0
 800e65a:	6031      	str	r1, [r6, #0]
 800e65c:	602b      	str	r3, [r5, #0]
 800e65e:	b016      	add	sp, #88	@ 0x58
 800e660:	bd70      	pop	{r4, r5, r6, pc}
 800e662:	466a      	mov	r2, sp
 800e664:	f000 f848 	bl	800e6f8 <_fstat_r>
 800e668:	2800      	cmp	r0, #0
 800e66a:	dbec      	blt.n	800e646 <__swhatbuf_r+0x12>
 800e66c:	9901      	ldr	r1, [sp, #4]
 800e66e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e672:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e676:	4259      	negs	r1, r3
 800e678:	4159      	adcs	r1, r3
 800e67a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e67e:	e7eb      	b.n	800e658 <__swhatbuf_r+0x24>

0800e680 <__smakebuf_r>:
 800e680:	898b      	ldrh	r3, [r1, #12]
 800e682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e684:	079d      	lsls	r5, r3, #30
 800e686:	4606      	mov	r6, r0
 800e688:	460c      	mov	r4, r1
 800e68a:	d507      	bpl.n	800e69c <__smakebuf_r+0x1c>
 800e68c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e690:	6023      	str	r3, [r4, #0]
 800e692:	6123      	str	r3, [r4, #16]
 800e694:	2301      	movs	r3, #1
 800e696:	6163      	str	r3, [r4, #20]
 800e698:	b003      	add	sp, #12
 800e69a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e69c:	ab01      	add	r3, sp, #4
 800e69e:	466a      	mov	r2, sp
 800e6a0:	f7ff ffc8 	bl	800e634 <__swhatbuf_r>
 800e6a4:	9f00      	ldr	r7, [sp, #0]
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	4639      	mov	r1, r7
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	f7fe fecc 	bl	800d448 <_malloc_r>
 800e6b0:	b948      	cbnz	r0, 800e6c6 <__smakebuf_r+0x46>
 800e6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b6:	059a      	lsls	r2, r3, #22
 800e6b8:	d4ee      	bmi.n	800e698 <__smakebuf_r+0x18>
 800e6ba:	f023 0303 	bic.w	r3, r3, #3
 800e6be:	f043 0302 	orr.w	r3, r3, #2
 800e6c2:	81a3      	strh	r3, [r4, #12]
 800e6c4:	e7e2      	b.n	800e68c <__smakebuf_r+0xc>
 800e6c6:	89a3      	ldrh	r3, [r4, #12]
 800e6c8:	6020      	str	r0, [r4, #0]
 800e6ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6ce:	81a3      	strh	r3, [r4, #12]
 800e6d0:	9b01      	ldr	r3, [sp, #4]
 800e6d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e6d6:	b15b      	cbz	r3, 800e6f0 <__smakebuf_r+0x70>
 800e6d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6dc:	4630      	mov	r0, r6
 800e6de:	f000 f81d 	bl	800e71c <_isatty_r>
 800e6e2:	b128      	cbz	r0, 800e6f0 <__smakebuf_r+0x70>
 800e6e4:	89a3      	ldrh	r3, [r4, #12]
 800e6e6:	f023 0303 	bic.w	r3, r3, #3
 800e6ea:	f043 0301 	orr.w	r3, r3, #1
 800e6ee:	81a3      	strh	r3, [r4, #12]
 800e6f0:	89a3      	ldrh	r3, [r4, #12]
 800e6f2:	431d      	orrs	r5, r3
 800e6f4:	81a5      	strh	r5, [r4, #12]
 800e6f6:	e7cf      	b.n	800e698 <__smakebuf_r+0x18>

0800e6f8 <_fstat_r>:
 800e6f8:	b538      	push	{r3, r4, r5, lr}
 800e6fa:	4d07      	ldr	r5, [pc, #28]	@ (800e718 <_fstat_r+0x20>)
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	4604      	mov	r4, r0
 800e700:	4608      	mov	r0, r1
 800e702:	4611      	mov	r1, r2
 800e704:	602b      	str	r3, [r5, #0]
 800e706:	f7f4 fed3 	bl	80034b0 <_fstat>
 800e70a:	1c43      	adds	r3, r0, #1
 800e70c:	d102      	bne.n	800e714 <_fstat_r+0x1c>
 800e70e:	682b      	ldr	r3, [r5, #0]
 800e710:	b103      	cbz	r3, 800e714 <_fstat_r+0x1c>
 800e712:	6023      	str	r3, [r4, #0]
 800e714:	bd38      	pop	{r3, r4, r5, pc}
 800e716:	bf00      	nop
 800e718:	20002318 	.word	0x20002318

0800e71c <_isatty_r>:
 800e71c:	b538      	push	{r3, r4, r5, lr}
 800e71e:	4d06      	ldr	r5, [pc, #24]	@ (800e738 <_isatty_r+0x1c>)
 800e720:	2300      	movs	r3, #0
 800e722:	4604      	mov	r4, r0
 800e724:	4608      	mov	r0, r1
 800e726:	602b      	str	r3, [r5, #0]
 800e728:	f7f4 fed2 	bl	80034d0 <_isatty>
 800e72c:	1c43      	adds	r3, r0, #1
 800e72e:	d102      	bne.n	800e736 <_isatty_r+0x1a>
 800e730:	682b      	ldr	r3, [r5, #0]
 800e732:	b103      	cbz	r3, 800e736 <_isatty_r+0x1a>
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	bd38      	pop	{r3, r4, r5, pc}
 800e738:	20002318 	.word	0x20002318

0800e73c <asin>:
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	ed2d 8b02 	vpush	{d8}
 800e742:	ec55 4b10 	vmov	r4, r5, d0
 800e746:	f000 fa93 	bl	800ec70 <__ieee754_asin>
 800e74a:	4622      	mov	r2, r4
 800e74c:	462b      	mov	r3, r5
 800e74e:	4620      	mov	r0, r4
 800e750:	4629      	mov	r1, r5
 800e752:	eeb0 8a40 	vmov.f32	s16, s0
 800e756:	eef0 8a60 	vmov.f32	s17, s1
 800e75a:	f7f2 f9e7 	bl	8000b2c <__aeabi_dcmpun>
 800e75e:	b9a8      	cbnz	r0, 800e78c <asin+0x50>
 800e760:	ec45 4b10 	vmov	d0, r4, r5
 800e764:	f000 f8bc 	bl	800e8e0 <fabs>
 800e768:	4b0c      	ldr	r3, [pc, #48]	@ (800e79c <asin+0x60>)
 800e76a:	ec51 0b10 	vmov	r0, r1, d0
 800e76e:	2200      	movs	r2, #0
 800e770:	f7f2 f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 800e774:	b150      	cbz	r0, 800e78c <asin+0x50>
 800e776:	f7fd ff5b 	bl	800c630 <__errno>
 800e77a:	ecbd 8b02 	vpop	{d8}
 800e77e:	2321      	movs	r3, #33	@ 0x21
 800e780:	6003      	str	r3, [r0, #0]
 800e782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e786:	4806      	ldr	r0, [pc, #24]	@ (800e7a0 <asin+0x64>)
 800e788:	f000 b986 	b.w	800ea98 <nan>
 800e78c:	eeb0 0a48 	vmov.f32	s0, s16
 800e790:	eef0 0a68 	vmov.f32	s1, s17
 800e794:	ecbd 8b02 	vpop	{d8}
 800e798:	bd38      	pop	{r3, r4, r5, pc}
 800e79a:	bf00      	nop
 800e79c:	3ff00000 	.word	0x3ff00000
 800e7a0:	08011046 	.word	0x08011046

0800e7a4 <atan2>:
 800e7a4:	f000 bc68 	b.w	800f078 <__ieee754_atan2>

0800e7a8 <pow>:
 800e7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7aa:	ed2d 8b02 	vpush	{d8}
 800e7ae:	eeb0 8a40 	vmov.f32	s16, s0
 800e7b2:	eef0 8a60 	vmov.f32	s17, s1
 800e7b6:	ec55 4b11 	vmov	r4, r5, d1
 800e7ba:	f000 fd25 	bl	800f208 <__ieee754_pow>
 800e7be:	4622      	mov	r2, r4
 800e7c0:	462b      	mov	r3, r5
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	4629      	mov	r1, r5
 800e7c6:	ec57 6b10 	vmov	r6, r7, d0
 800e7ca:	f7f2 f9af 	bl	8000b2c <__aeabi_dcmpun>
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	d13b      	bne.n	800e84a <pow+0xa2>
 800e7d2:	ec51 0b18 	vmov	r0, r1, d8
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	2300      	movs	r3, #0
 800e7da:	f7f2 f975 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7de:	b1b8      	cbz	r0, 800e810 <pow+0x68>
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	4629      	mov	r1, r5
 800e7e8:	f7f2 f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d146      	bne.n	800e87e <pow+0xd6>
 800e7f0:	ec45 4b10 	vmov	d0, r4, r5
 800e7f4:	f000 f944 	bl	800ea80 <finite>
 800e7f8:	b338      	cbz	r0, 800e84a <pow+0xa2>
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	4620      	mov	r0, r4
 800e800:	4629      	mov	r1, r5
 800e802:	f7f2 f96b 	bl	8000adc <__aeabi_dcmplt>
 800e806:	b300      	cbz	r0, 800e84a <pow+0xa2>
 800e808:	f7fd ff12 	bl	800c630 <__errno>
 800e80c:	2322      	movs	r3, #34	@ 0x22
 800e80e:	e01b      	b.n	800e848 <pow+0xa0>
 800e810:	ec47 6b10 	vmov	d0, r6, r7
 800e814:	f000 f934 	bl	800ea80 <finite>
 800e818:	b9e0      	cbnz	r0, 800e854 <pow+0xac>
 800e81a:	eeb0 0a48 	vmov.f32	s0, s16
 800e81e:	eef0 0a68 	vmov.f32	s1, s17
 800e822:	f000 f92d 	bl	800ea80 <finite>
 800e826:	b1a8      	cbz	r0, 800e854 <pow+0xac>
 800e828:	ec45 4b10 	vmov	d0, r4, r5
 800e82c:	f000 f928 	bl	800ea80 <finite>
 800e830:	b180      	cbz	r0, 800e854 <pow+0xac>
 800e832:	4632      	mov	r2, r6
 800e834:	463b      	mov	r3, r7
 800e836:	4630      	mov	r0, r6
 800e838:	4639      	mov	r1, r7
 800e83a:	f7f2 f977 	bl	8000b2c <__aeabi_dcmpun>
 800e83e:	2800      	cmp	r0, #0
 800e840:	d0e2      	beq.n	800e808 <pow+0x60>
 800e842:	f7fd fef5 	bl	800c630 <__errno>
 800e846:	2321      	movs	r3, #33	@ 0x21
 800e848:	6003      	str	r3, [r0, #0]
 800e84a:	ecbd 8b02 	vpop	{d8}
 800e84e:	ec47 6b10 	vmov	d0, r6, r7
 800e852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e854:	2200      	movs	r2, #0
 800e856:	2300      	movs	r3, #0
 800e858:	4630      	mov	r0, r6
 800e85a:	4639      	mov	r1, r7
 800e85c:	f7f2 f934 	bl	8000ac8 <__aeabi_dcmpeq>
 800e860:	2800      	cmp	r0, #0
 800e862:	d0f2      	beq.n	800e84a <pow+0xa2>
 800e864:	eeb0 0a48 	vmov.f32	s0, s16
 800e868:	eef0 0a68 	vmov.f32	s1, s17
 800e86c:	f000 f908 	bl	800ea80 <finite>
 800e870:	2800      	cmp	r0, #0
 800e872:	d0ea      	beq.n	800e84a <pow+0xa2>
 800e874:	ec45 4b10 	vmov	d0, r4, r5
 800e878:	f000 f902 	bl	800ea80 <finite>
 800e87c:	e7c3      	b.n	800e806 <pow+0x5e>
 800e87e:	4f01      	ldr	r7, [pc, #4]	@ (800e884 <pow+0xdc>)
 800e880:	2600      	movs	r6, #0
 800e882:	e7e2      	b.n	800e84a <pow+0xa2>
 800e884:	3ff00000 	.word	0x3ff00000

0800e888 <sqrt>:
 800e888:	b538      	push	{r3, r4, r5, lr}
 800e88a:	ed2d 8b02 	vpush	{d8}
 800e88e:	ec55 4b10 	vmov	r4, r5, d0
 800e892:	f000 f913 	bl	800eabc <__ieee754_sqrt>
 800e896:	4622      	mov	r2, r4
 800e898:	462b      	mov	r3, r5
 800e89a:	4620      	mov	r0, r4
 800e89c:	4629      	mov	r1, r5
 800e89e:	eeb0 8a40 	vmov.f32	s16, s0
 800e8a2:	eef0 8a60 	vmov.f32	s17, s1
 800e8a6:	f7f2 f941 	bl	8000b2c <__aeabi_dcmpun>
 800e8aa:	b990      	cbnz	r0, 800e8d2 <sqrt+0x4a>
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	f7f2 f912 	bl	8000adc <__aeabi_dcmplt>
 800e8b8:	b158      	cbz	r0, 800e8d2 <sqrt+0x4a>
 800e8ba:	f7fd feb9 	bl	800c630 <__errno>
 800e8be:	2321      	movs	r3, #33	@ 0x21
 800e8c0:	6003      	str	r3, [r0, #0]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	f7f1 ffbf 	bl	800084c <__aeabi_ddiv>
 800e8ce:	ec41 0b18 	vmov	d8, r0, r1
 800e8d2:	eeb0 0a48 	vmov.f32	s0, s16
 800e8d6:	eef0 0a68 	vmov.f32	s1, s17
 800e8da:	ecbd 8b02 	vpop	{d8}
 800e8de:	bd38      	pop	{r3, r4, r5, pc}

0800e8e0 <fabs>:
 800e8e0:	ec51 0b10 	vmov	r0, r1, d0
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e8ea:	ec43 2b10 	vmov	d0, r2, r3
 800e8ee:	4770      	bx	lr

0800e8f0 <expf>:
 800e8f0:	b508      	push	{r3, lr}
 800e8f2:	ed2d 8b02 	vpush	{d8}
 800e8f6:	eef0 8a40 	vmov.f32	s17, s0
 800e8fa:	f001 fc01 	bl	8010100 <__ieee754_expf>
 800e8fe:	eeb0 8a40 	vmov.f32	s16, s0
 800e902:	eeb0 0a68 	vmov.f32	s0, s17
 800e906:	f000 f8cf 	bl	800eaa8 <finitef>
 800e90a:	b160      	cbz	r0, 800e926 <expf+0x36>
 800e90c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800e94c <expf+0x5c>
 800e910:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e918:	dd0a      	ble.n	800e930 <expf+0x40>
 800e91a:	f7fd fe89 	bl	800c630 <__errno>
 800e91e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800e950 <expf+0x60>
 800e922:	2322      	movs	r3, #34	@ 0x22
 800e924:	6003      	str	r3, [r0, #0]
 800e926:	eeb0 0a48 	vmov.f32	s0, s16
 800e92a:	ecbd 8b02 	vpop	{d8}
 800e92e:	bd08      	pop	{r3, pc}
 800e930:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e954 <expf+0x64>
 800e934:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e93c:	d5f3      	bpl.n	800e926 <expf+0x36>
 800e93e:	f7fd fe77 	bl	800c630 <__errno>
 800e942:	2322      	movs	r3, #34	@ 0x22
 800e944:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800e958 <expf+0x68>
 800e948:	6003      	str	r3, [r0, #0]
 800e94a:	e7ec      	b.n	800e926 <expf+0x36>
 800e94c:	42b17217 	.word	0x42b17217
 800e950:	7f800000 	.word	0x7f800000
 800e954:	c2cff1b5 	.word	0xc2cff1b5
 800e958:	00000000 	.word	0x00000000

0800e95c <cosf>:
 800e95c:	ee10 3a10 	vmov	r3, s0
 800e960:	b507      	push	{r0, r1, r2, lr}
 800e962:	4a1e      	ldr	r2, [pc, #120]	@ (800e9dc <cosf+0x80>)
 800e964:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e968:	4293      	cmp	r3, r2
 800e96a:	d806      	bhi.n	800e97a <cosf+0x1e>
 800e96c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800e9e0 <cosf+0x84>
 800e970:	b003      	add	sp, #12
 800e972:	f85d eb04 	ldr.w	lr, [sp], #4
 800e976:	f001 bb23 	b.w	800ffc0 <__kernel_cosf>
 800e97a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e97e:	d304      	bcc.n	800e98a <cosf+0x2e>
 800e980:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e984:	b003      	add	sp, #12
 800e986:	f85d fb04 	ldr.w	pc, [sp], #4
 800e98a:	4668      	mov	r0, sp
 800e98c:	f001 fc86 	bl	801029c <__ieee754_rem_pio2f>
 800e990:	f000 0003 	and.w	r0, r0, #3
 800e994:	2801      	cmp	r0, #1
 800e996:	d009      	beq.n	800e9ac <cosf+0x50>
 800e998:	2802      	cmp	r0, #2
 800e99a:	d010      	beq.n	800e9be <cosf+0x62>
 800e99c:	b9b0      	cbnz	r0, 800e9cc <cosf+0x70>
 800e99e:	eddd 0a01 	vldr	s1, [sp, #4]
 800e9a2:	ed9d 0a00 	vldr	s0, [sp]
 800e9a6:	f001 fb0b 	bl	800ffc0 <__kernel_cosf>
 800e9aa:	e7eb      	b.n	800e984 <cosf+0x28>
 800e9ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800e9b0:	ed9d 0a00 	vldr	s0, [sp]
 800e9b4:	f001 fb5c 	bl	8010070 <__kernel_sinf>
 800e9b8:	eeb1 0a40 	vneg.f32	s0, s0
 800e9bc:	e7e2      	b.n	800e984 <cosf+0x28>
 800e9be:	eddd 0a01 	vldr	s1, [sp, #4]
 800e9c2:	ed9d 0a00 	vldr	s0, [sp]
 800e9c6:	f001 fafb 	bl	800ffc0 <__kernel_cosf>
 800e9ca:	e7f5      	b.n	800e9b8 <cosf+0x5c>
 800e9cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800e9d0:	ed9d 0a00 	vldr	s0, [sp]
 800e9d4:	2001      	movs	r0, #1
 800e9d6:	f001 fb4b 	bl	8010070 <__kernel_sinf>
 800e9da:	e7d3      	b.n	800e984 <cosf+0x28>
 800e9dc:	3f490fd8 	.word	0x3f490fd8
 800e9e0:	00000000 	.word	0x00000000

0800e9e4 <fabsf>:
 800e9e4:	ee10 3a10 	vmov	r3, s0
 800e9e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e9ec:	ee00 3a10 	vmov	s0, r3
 800e9f0:	4770      	bx	lr
	...

0800e9f4 <sinf>:
 800e9f4:	ee10 3a10 	vmov	r3, s0
 800e9f8:	b507      	push	{r0, r1, r2, lr}
 800e9fa:	4a1f      	ldr	r2, [pc, #124]	@ (800ea78 <sinf+0x84>)
 800e9fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d807      	bhi.n	800ea14 <sinf+0x20>
 800ea04:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800ea7c <sinf+0x88>
 800ea08:	2000      	movs	r0, #0
 800ea0a:	b003      	add	sp, #12
 800ea0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea10:	f001 bb2e 	b.w	8010070 <__kernel_sinf>
 800ea14:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ea18:	d304      	bcc.n	800ea24 <sinf+0x30>
 800ea1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ea1e:	b003      	add	sp, #12
 800ea20:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea24:	4668      	mov	r0, sp
 800ea26:	f001 fc39 	bl	801029c <__ieee754_rem_pio2f>
 800ea2a:	f000 0003 	and.w	r0, r0, #3
 800ea2e:	2801      	cmp	r0, #1
 800ea30:	d00a      	beq.n	800ea48 <sinf+0x54>
 800ea32:	2802      	cmp	r0, #2
 800ea34:	d00f      	beq.n	800ea56 <sinf+0x62>
 800ea36:	b9c0      	cbnz	r0, 800ea6a <sinf+0x76>
 800ea38:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea3c:	ed9d 0a00 	vldr	s0, [sp]
 800ea40:	2001      	movs	r0, #1
 800ea42:	f001 fb15 	bl	8010070 <__kernel_sinf>
 800ea46:	e7ea      	b.n	800ea1e <sinf+0x2a>
 800ea48:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea4c:	ed9d 0a00 	vldr	s0, [sp]
 800ea50:	f001 fab6 	bl	800ffc0 <__kernel_cosf>
 800ea54:	e7e3      	b.n	800ea1e <sinf+0x2a>
 800ea56:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea5a:	ed9d 0a00 	vldr	s0, [sp]
 800ea5e:	2001      	movs	r0, #1
 800ea60:	f001 fb06 	bl	8010070 <__kernel_sinf>
 800ea64:	eeb1 0a40 	vneg.f32	s0, s0
 800ea68:	e7d9      	b.n	800ea1e <sinf+0x2a>
 800ea6a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea6e:	ed9d 0a00 	vldr	s0, [sp]
 800ea72:	f001 faa5 	bl	800ffc0 <__kernel_cosf>
 800ea76:	e7f5      	b.n	800ea64 <sinf+0x70>
 800ea78:	3f490fd8 	.word	0x3f490fd8
 800ea7c:	00000000 	.word	0x00000000

0800ea80 <finite>:
 800ea80:	b082      	sub	sp, #8
 800ea82:	ed8d 0b00 	vstr	d0, [sp]
 800ea86:	9801      	ldr	r0, [sp, #4]
 800ea88:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ea8c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ea90:	0fc0      	lsrs	r0, r0, #31
 800ea92:	b002      	add	sp, #8
 800ea94:	4770      	bx	lr
	...

0800ea98 <nan>:
 800ea98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eaa0 <nan+0x8>
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	00000000 	.word	0x00000000
 800eaa4:	7ff80000 	.word	0x7ff80000

0800eaa8 <finitef>:
 800eaa8:	ee10 3a10 	vmov	r3, s0
 800eaac:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800eab0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800eab4:	bfac      	ite	ge
 800eab6:	2000      	movge	r0, #0
 800eab8:	2001      	movlt	r0, #1
 800eaba:	4770      	bx	lr

0800eabc <__ieee754_sqrt>:
 800eabc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac0:	4a68      	ldr	r2, [pc, #416]	@ (800ec64 <__ieee754_sqrt+0x1a8>)
 800eac2:	ec55 4b10 	vmov	r4, r5, d0
 800eac6:	43aa      	bics	r2, r5
 800eac8:	462b      	mov	r3, r5
 800eaca:	4621      	mov	r1, r4
 800eacc:	d110      	bne.n	800eaf0 <__ieee754_sqrt+0x34>
 800eace:	4622      	mov	r2, r4
 800ead0:	4620      	mov	r0, r4
 800ead2:	4629      	mov	r1, r5
 800ead4:	f7f1 fd90 	bl	80005f8 <__aeabi_dmul>
 800ead8:	4602      	mov	r2, r0
 800eada:	460b      	mov	r3, r1
 800eadc:	4620      	mov	r0, r4
 800eade:	4629      	mov	r1, r5
 800eae0:	f7f1 fbd4 	bl	800028c <__adddf3>
 800eae4:	4604      	mov	r4, r0
 800eae6:	460d      	mov	r5, r1
 800eae8:	ec45 4b10 	vmov	d0, r4, r5
 800eaec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf0:	2d00      	cmp	r5, #0
 800eaf2:	dc0e      	bgt.n	800eb12 <__ieee754_sqrt+0x56>
 800eaf4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800eaf8:	4322      	orrs	r2, r4
 800eafa:	d0f5      	beq.n	800eae8 <__ieee754_sqrt+0x2c>
 800eafc:	b19d      	cbz	r5, 800eb26 <__ieee754_sqrt+0x6a>
 800eafe:	4622      	mov	r2, r4
 800eb00:	4620      	mov	r0, r4
 800eb02:	4629      	mov	r1, r5
 800eb04:	f7f1 fbc0 	bl	8000288 <__aeabi_dsub>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	f7f1 fe9e 	bl	800084c <__aeabi_ddiv>
 800eb10:	e7e8      	b.n	800eae4 <__ieee754_sqrt+0x28>
 800eb12:	152a      	asrs	r2, r5, #20
 800eb14:	d115      	bne.n	800eb42 <__ieee754_sqrt+0x86>
 800eb16:	2000      	movs	r0, #0
 800eb18:	e009      	b.n	800eb2e <__ieee754_sqrt+0x72>
 800eb1a:	0acb      	lsrs	r3, r1, #11
 800eb1c:	3a15      	subs	r2, #21
 800eb1e:	0549      	lsls	r1, r1, #21
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d0fa      	beq.n	800eb1a <__ieee754_sqrt+0x5e>
 800eb24:	e7f7      	b.n	800eb16 <__ieee754_sqrt+0x5a>
 800eb26:	462a      	mov	r2, r5
 800eb28:	e7fa      	b.n	800eb20 <__ieee754_sqrt+0x64>
 800eb2a:	005b      	lsls	r3, r3, #1
 800eb2c:	3001      	adds	r0, #1
 800eb2e:	02dc      	lsls	r4, r3, #11
 800eb30:	d5fb      	bpl.n	800eb2a <__ieee754_sqrt+0x6e>
 800eb32:	1e44      	subs	r4, r0, #1
 800eb34:	1b12      	subs	r2, r2, r4
 800eb36:	f1c0 0420 	rsb	r4, r0, #32
 800eb3a:	fa21 f404 	lsr.w	r4, r1, r4
 800eb3e:	4323      	orrs	r3, r4
 800eb40:	4081      	lsls	r1, r0
 800eb42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb46:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800eb4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb4e:	07d2      	lsls	r2, r2, #31
 800eb50:	bf5c      	itt	pl
 800eb52:	005b      	lslpl	r3, r3, #1
 800eb54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800eb58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb5c:	bf58      	it	pl
 800eb5e:	0049      	lslpl	r1, r1, #1
 800eb60:	2600      	movs	r6, #0
 800eb62:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800eb66:	106d      	asrs	r5, r5, #1
 800eb68:	0049      	lsls	r1, r1, #1
 800eb6a:	2016      	movs	r0, #22
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800eb72:	1917      	adds	r7, r2, r4
 800eb74:	429f      	cmp	r7, r3
 800eb76:	bfde      	ittt	le
 800eb78:	193a      	addle	r2, r7, r4
 800eb7a:	1bdb      	suble	r3, r3, r7
 800eb7c:	1936      	addle	r6, r6, r4
 800eb7e:	0fcf      	lsrs	r7, r1, #31
 800eb80:	3801      	subs	r0, #1
 800eb82:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800eb86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eb8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eb8e:	d1f0      	bne.n	800eb72 <__ieee754_sqrt+0xb6>
 800eb90:	4604      	mov	r4, r0
 800eb92:	2720      	movs	r7, #32
 800eb94:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	eb00 0e0c 	add.w	lr, r0, ip
 800eb9e:	db02      	blt.n	800eba6 <__ieee754_sqrt+0xea>
 800eba0:	d113      	bne.n	800ebca <__ieee754_sqrt+0x10e>
 800eba2:	458e      	cmp	lr, r1
 800eba4:	d811      	bhi.n	800ebca <__ieee754_sqrt+0x10e>
 800eba6:	f1be 0f00 	cmp.w	lr, #0
 800ebaa:	eb0e 000c 	add.w	r0, lr, ip
 800ebae:	da42      	bge.n	800ec36 <__ieee754_sqrt+0x17a>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	db40      	blt.n	800ec36 <__ieee754_sqrt+0x17a>
 800ebb4:	f102 0801 	add.w	r8, r2, #1
 800ebb8:	1a9b      	subs	r3, r3, r2
 800ebba:	458e      	cmp	lr, r1
 800ebbc:	bf88      	it	hi
 800ebbe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ebc2:	eba1 010e 	sub.w	r1, r1, lr
 800ebc6:	4464      	add	r4, ip
 800ebc8:	4642      	mov	r2, r8
 800ebca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ebce:	3f01      	subs	r7, #1
 800ebd0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ebd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ebd8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ebdc:	d1dc      	bne.n	800eb98 <__ieee754_sqrt+0xdc>
 800ebde:	4319      	orrs	r1, r3
 800ebe0:	d01b      	beq.n	800ec1a <__ieee754_sqrt+0x15e>
 800ebe2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ec68 <__ieee754_sqrt+0x1ac>
 800ebe6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ec6c <__ieee754_sqrt+0x1b0>
 800ebea:	e9da 0100 	ldrd	r0, r1, [sl]
 800ebee:	e9db 2300 	ldrd	r2, r3, [fp]
 800ebf2:	f7f1 fb49 	bl	8000288 <__aeabi_dsub>
 800ebf6:	e9da 8900 	ldrd	r8, r9, [sl]
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	4640      	mov	r0, r8
 800ec00:	4649      	mov	r1, r9
 800ec02:	f7f1 ff75 	bl	8000af0 <__aeabi_dcmple>
 800ec06:	b140      	cbz	r0, 800ec1a <__ieee754_sqrt+0x15e>
 800ec08:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ec0c:	e9da 0100 	ldrd	r0, r1, [sl]
 800ec10:	e9db 2300 	ldrd	r2, r3, [fp]
 800ec14:	d111      	bne.n	800ec3a <__ieee754_sqrt+0x17e>
 800ec16:	3601      	adds	r6, #1
 800ec18:	463c      	mov	r4, r7
 800ec1a:	1072      	asrs	r2, r6, #1
 800ec1c:	0863      	lsrs	r3, r4, #1
 800ec1e:	07f1      	lsls	r1, r6, #31
 800ec20:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ec24:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ec28:	bf48      	it	mi
 800ec2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ec2e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ec32:	4618      	mov	r0, r3
 800ec34:	e756      	b.n	800eae4 <__ieee754_sqrt+0x28>
 800ec36:	4690      	mov	r8, r2
 800ec38:	e7be      	b.n	800ebb8 <__ieee754_sqrt+0xfc>
 800ec3a:	f7f1 fb27 	bl	800028c <__adddf3>
 800ec3e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ec42:	4602      	mov	r2, r0
 800ec44:	460b      	mov	r3, r1
 800ec46:	4640      	mov	r0, r8
 800ec48:	4649      	mov	r1, r9
 800ec4a:	f7f1 ff47 	bl	8000adc <__aeabi_dcmplt>
 800ec4e:	b120      	cbz	r0, 800ec5a <__ieee754_sqrt+0x19e>
 800ec50:	1ca0      	adds	r0, r4, #2
 800ec52:	bf08      	it	eq
 800ec54:	3601      	addeq	r6, #1
 800ec56:	3402      	adds	r4, #2
 800ec58:	e7df      	b.n	800ec1a <__ieee754_sqrt+0x15e>
 800ec5a:	1c63      	adds	r3, r4, #1
 800ec5c:	f023 0401 	bic.w	r4, r3, #1
 800ec60:	e7db      	b.n	800ec1a <__ieee754_sqrt+0x15e>
 800ec62:	bf00      	nop
 800ec64:	7ff00000 	.word	0x7ff00000
 800ec68:	200002f8 	.word	0x200002f8
 800ec6c:	200002f0 	.word	0x200002f0

0800ec70 <__ieee754_asin>:
 800ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	ec55 4b10 	vmov	r4, r5, d0
 800ec78:	4bc7      	ldr	r3, [pc, #796]	@ (800ef98 <__ieee754_asin+0x328>)
 800ec7a:	b087      	sub	sp, #28
 800ec7c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ec80:	429e      	cmp	r6, r3
 800ec82:	9501      	str	r5, [sp, #4]
 800ec84:	d92d      	bls.n	800ece2 <__ieee754_asin+0x72>
 800ec86:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800ec8a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800ec8e:	4326      	orrs	r6, r4
 800ec90:	d116      	bne.n	800ecc0 <__ieee754_asin+0x50>
 800ec92:	a3a7      	add	r3, pc, #668	@ (adr r3, 800ef30 <__ieee754_asin+0x2c0>)
 800ec94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec98:	4620      	mov	r0, r4
 800ec9a:	4629      	mov	r1, r5
 800ec9c:	f7f1 fcac 	bl	80005f8 <__aeabi_dmul>
 800eca0:	a3a5      	add	r3, pc, #660	@ (adr r3, 800ef38 <__ieee754_asin+0x2c8>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	4606      	mov	r6, r0
 800eca8:	460f      	mov	r7, r1
 800ecaa:	4620      	mov	r0, r4
 800ecac:	4629      	mov	r1, r5
 800ecae:	f7f1 fca3 	bl	80005f8 <__aeabi_dmul>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	4639      	mov	r1, r7
 800ecba:	f7f1 fae7 	bl	800028c <__adddf3>
 800ecbe:	e009      	b.n	800ecd4 <__ieee754_asin+0x64>
 800ecc0:	4622      	mov	r2, r4
 800ecc2:	462b      	mov	r3, r5
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	4629      	mov	r1, r5
 800ecc8:	f7f1 fade 	bl	8000288 <__aeabi_dsub>
 800eccc:	4602      	mov	r2, r0
 800ecce:	460b      	mov	r3, r1
 800ecd0:	f7f1 fdbc 	bl	800084c <__aeabi_ddiv>
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	460d      	mov	r5, r1
 800ecd8:	ec45 4b10 	vmov	d0, r4, r5
 800ecdc:	b007      	add	sp, #28
 800ecde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece2:	4bae      	ldr	r3, [pc, #696]	@ (800ef9c <__ieee754_asin+0x32c>)
 800ece4:	429e      	cmp	r6, r3
 800ece6:	d810      	bhi.n	800ed0a <__ieee754_asin+0x9a>
 800ece8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800ecec:	f080 80ad 	bcs.w	800ee4a <__ieee754_asin+0x1da>
 800ecf0:	a393      	add	r3, pc, #588	@ (adr r3, 800ef40 <__ieee754_asin+0x2d0>)
 800ecf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	4629      	mov	r1, r5
 800ecfa:	f7f1 fac7 	bl	800028c <__adddf3>
 800ecfe:	4ba8      	ldr	r3, [pc, #672]	@ (800efa0 <__ieee754_asin+0x330>)
 800ed00:	2200      	movs	r2, #0
 800ed02:	f7f1 ff09 	bl	8000b18 <__aeabi_dcmpgt>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d1e6      	bne.n	800ecd8 <__ieee754_asin+0x68>
 800ed0a:	ec45 4b10 	vmov	d0, r4, r5
 800ed0e:	f7ff fde7 	bl	800e8e0 <fabs>
 800ed12:	49a3      	ldr	r1, [pc, #652]	@ (800efa0 <__ieee754_asin+0x330>)
 800ed14:	ec53 2b10 	vmov	r2, r3, d0
 800ed18:	2000      	movs	r0, #0
 800ed1a:	f7f1 fab5 	bl	8000288 <__aeabi_dsub>
 800ed1e:	4ba1      	ldr	r3, [pc, #644]	@ (800efa4 <__ieee754_asin+0x334>)
 800ed20:	2200      	movs	r2, #0
 800ed22:	f7f1 fc69 	bl	80005f8 <__aeabi_dmul>
 800ed26:	a388      	add	r3, pc, #544	@ (adr r3, 800ef48 <__ieee754_asin+0x2d8>)
 800ed28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	460d      	mov	r5, r1
 800ed30:	f7f1 fc62 	bl	80005f8 <__aeabi_dmul>
 800ed34:	a386      	add	r3, pc, #536	@ (adr r3, 800ef50 <__ieee754_asin+0x2e0>)
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	f7f1 faa7 	bl	800028c <__adddf3>
 800ed3e:	4622      	mov	r2, r4
 800ed40:	462b      	mov	r3, r5
 800ed42:	f7f1 fc59 	bl	80005f8 <__aeabi_dmul>
 800ed46:	a384      	add	r3, pc, #528	@ (adr r3, 800ef58 <__ieee754_asin+0x2e8>)
 800ed48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4c:	f7f1 fa9c 	bl	8000288 <__aeabi_dsub>
 800ed50:	4622      	mov	r2, r4
 800ed52:	462b      	mov	r3, r5
 800ed54:	f7f1 fc50 	bl	80005f8 <__aeabi_dmul>
 800ed58:	a381      	add	r3, pc, #516	@ (adr r3, 800ef60 <__ieee754_asin+0x2f0>)
 800ed5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5e:	f7f1 fa95 	bl	800028c <__adddf3>
 800ed62:	4622      	mov	r2, r4
 800ed64:	462b      	mov	r3, r5
 800ed66:	f7f1 fc47 	bl	80005f8 <__aeabi_dmul>
 800ed6a:	a37f      	add	r3, pc, #508	@ (adr r3, 800ef68 <__ieee754_asin+0x2f8>)
 800ed6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed70:	f7f1 fa8a 	bl	8000288 <__aeabi_dsub>
 800ed74:	4622      	mov	r2, r4
 800ed76:	462b      	mov	r3, r5
 800ed78:	f7f1 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ed7c:	a37c      	add	r3, pc, #496	@ (adr r3, 800ef70 <__ieee754_asin+0x300>)
 800ed7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed82:	f7f1 fa83 	bl	800028c <__adddf3>
 800ed86:	4622      	mov	r2, r4
 800ed88:	462b      	mov	r3, r5
 800ed8a:	f7f1 fc35 	bl	80005f8 <__aeabi_dmul>
 800ed8e:	a37a      	add	r3, pc, #488	@ (adr r3, 800ef78 <__ieee754_asin+0x308>)
 800ed90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed98:	4620      	mov	r0, r4
 800ed9a:	4629      	mov	r1, r5
 800ed9c:	f7f1 fc2c 	bl	80005f8 <__aeabi_dmul>
 800eda0:	a377      	add	r3, pc, #476	@ (adr r3, 800ef80 <__ieee754_asin+0x310>)
 800eda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda6:	f7f1 fa6f 	bl	8000288 <__aeabi_dsub>
 800edaa:	4622      	mov	r2, r4
 800edac:	462b      	mov	r3, r5
 800edae:	f7f1 fc23 	bl	80005f8 <__aeabi_dmul>
 800edb2:	a375      	add	r3, pc, #468	@ (adr r3, 800ef88 <__ieee754_asin+0x318>)
 800edb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb8:	f7f1 fa68 	bl	800028c <__adddf3>
 800edbc:	4622      	mov	r2, r4
 800edbe:	462b      	mov	r3, r5
 800edc0:	f7f1 fc1a 	bl	80005f8 <__aeabi_dmul>
 800edc4:	a372      	add	r3, pc, #456	@ (adr r3, 800ef90 <__ieee754_asin+0x320>)
 800edc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edca:	f7f1 fa5d 	bl	8000288 <__aeabi_dsub>
 800edce:	4622      	mov	r2, r4
 800edd0:	462b      	mov	r3, r5
 800edd2:	f7f1 fc11 	bl	80005f8 <__aeabi_dmul>
 800edd6:	4b72      	ldr	r3, [pc, #456]	@ (800efa0 <__ieee754_asin+0x330>)
 800edd8:	2200      	movs	r2, #0
 800edda:	f7f1 fa57 	bl	800028c <__adddf3>
 800edde:	ec45 4b10 	vmov	d0, r4, r5
 800ede2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ede6:	f7ff fe69 	bl	800eabc <__ieee754_sqrt>
 800edea:	4b6f      	ldr	r3, [pc, #444]	@ (800efa8 <__ieee754_asin+0x338>)
 800edec:	429e      	cmp	r6, r3
 800edee:	ec5b ab10 	vmov	sl, fp, d0
 800edf2:	f240 80db 	bls.w	800efac <__ieee754_asin+0x33c>
 800edf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edfe:	f7f1 fd25 	bl	800084c <__aeabi_ddiv>
 800ee02:	4652      	mov	r2, sl
 800ee04:	465b      	mov	r3, fp
 800ee06:	f7f1 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ee0a:	4652      	mov	r2, sl
 800ee0c:	465b      	mov	r3, fp
 800ee0e:	f7f1 fa3d 	bl	800028c <__adddf3>
 800ee12:	4602      	mov	r2, r0
 800ee14:	460b      	mov	r3, r1
 800ee16:	f7f1 fa39 	bl	800028c <__adddf3>
 800ee1a:	a347      	add	r3, pc, #284	@ (adr r3, 800ef38 <__ieee754_asin+0x2c8>)
 800ee1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee20:	f7f1 fa32 	bl	8000288 <__aeabi_dsub>
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	a141      	add	r1, pc, #260	@ (adr r1, 800ef30 <__ieee754_asin+0x2c0>)
 800ee2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee2e:	f7f1 fa2b 	bl	8000288 <__aeabi_dsub>
 800ee32:	9b01      	ldr	r3, [sp, #4]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	bfdc      	itt	le
 800ee38:	4602      	movle	r2, r0
 800ee3a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800ee3e:	4604      	mov	r4, r0
 800ee40:	460d      	mov	r5, r1
 800ee42:	bfdc      	itt	le
 800ee44:	4614      	movle	r4, r2
 800ee46:	461d      	movle	r5, r3
 800ee48:	e746      	b.n	800ecd8 <__ieee754_asin+0x68>
 800ee4a:	4622      	mov	r2, r4
 800ee4c:	462b      	mov	r3, r5
 800ee4e:	4620      	mov	r0, r4
 800ee50:	4629      	mov	r1, r5
 800ee52:	f7f1 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ee56:	a33c      	add	r3, pc, #240	@ (adr r3, 800ef48 <__ieee754_asin+0x2d8>)
 800ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	460f      	mov	r7, r1
 800ee60:	f7f1 fbca 	bl	80005f8 <__aeabi_dmul>
 800ee64:	a33a      	add	r3, pc, #232	@ (adr r3, 800ef50 <__ieee754_asin+0x2e0>)
 800ee66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6a:	f7f1 fa0f 	bl	800028c <__adddf3>
 800ee6e:	4632      	mov	r2, r6
 800ee70:	463b      	mov	r3, r7
 800ee72:	f7f1 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ee76:	a338      	add	r3, pc, #224	@ (adr r3, 800ef58 <__ieee754_asin+0x2e8>)
 800ee78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7c:	f7f1 fa04 	bl	8000288 <__aeabi_dsub>
 800ee80:	4632      	mov	r2, r6
 800ee82:	463b      	mov	r3, r7
 800ee84:	f7f1 fbb8 	bl	80005f8 <__aeabi_dmul>
 800ee88:	a335      	add	r3, pc, #212	@ (adr r3, 800ef60 <__ieee754_asin+0x2f0>)
 800ee8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8e:	f7f1 f9fd 	bl	800028c <__adddf3>
 800ee92:	4632      	mov	r2, r6
 800ee94:	463b      	mov	r3, r7
 800ee96:	f7f1 fbaf 	bl	80005f8 <__aeabi_dmul>
 800ee9a:	a333      	add	r3, pc, #204	@ (adr r3, 800ef68 <__ieee754_asin+0x2f8>)
 800ee9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea0:	f7f1 f9f2 	bl	8000288 <__aeabi_dsub>
 800eea4:	4632      	mov	r2, r6
 800eea6:	463b      	mov	r3, r7
 800eea8:	f7f1 fba6 	bl	80005f8 <__aeabi_dmul>
 800eeac:	a330      	add	r3, pc, #192	@ (adr r3, 800ef70 <__ieee754_asin+0x300>)
 800eeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb2:	f7f1 f9eb 	bl	800028c <__adddf3>
 800eeb6:	4632      	mov	r2, r6
 800eeb8:	463b      	mov	r3, r7
 800eeba:	f7f1 fb9d 	bl	80005f8 <__aeabi_dmul>
 800eebe:	a32e      	add	r3, pc, #184	@ (adr r3, 800ef78 <__ieee754_asin+0x308>)
 800eec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec4:	4680      	mov	r8, r0
 800eec6:	4689      	mov	r9, r1
 800eec8:	4630      	mov	r0, r6
 800eeca:	4639      	mov	r1, r7
 800eecc:	f7f1 fb94 	bl	80005f8 <__aeabi_dmul>
 800eed0:	a32b      	add	r3, pc, #172	@ (adr r3, 800ef80 <__ieee754_asin+0x310>)
 800eed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed6:	f7f1 f9d7 	bl	8000288 <__aeabi_dsub>
 800eeda:	4632      	mov	r2, r6
 800eedc:	463b      	mov	r3, r7
 800eede:	f7f1 fb8b 	bl	80005f8 <__aeabi_dmul>
 800eee2:	a329      	add	r3, pc, #164	@ (adr r3, 800ef88 <__ieee754_asin+0x318>)
 800eee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee8:	f7f1 f9d0 	bl	800028c <__adddf3>
 800eeec:	4632      	mov	r2, r6
 800eeee:	463b      	mov	r3, r7
 800eef0:	f7f1 fb82 	bl	80005f8 <__aeabi_dmul>
 800eef4:	a326      	add	r3, pc, #152	@ (adr r3, 800ef90 <__ieee754_asin+0x320>)
 800eef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefa:	f7f1 f9c5 	bl	8000288 <__aeabi_dsub>
 800eefe:	4632      	mov	r2, r6
 800ef00:	463b      	mov	r3, r7
 800ef02:	f7f1 fb79 	bl	80005f8 <__aeabi_dmul>
 800ef06:	4b26      	ldr	r3, [pc, #152]	@ (800efa0 <__ieee754_asin+0x330>)
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f7f1 f9bf 	bl	800028c <__adddf3>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	460b      	mov	r3, r1
 800ef12:	4640      	mov	r0, r8
 800ef14:	4649      	mov	r1, r9
 800ef16:	f7f1 fc99 	bl	800084c <__aeabi_ddiv>
 800ef1a:	4622      	mov	r2, r4
 800ef1c:	462b      	mov	r3, r5
 800ef1e:	f7f1 fb6b 	bl	80005f8 <__aeabi_dmul>
 800ef22:	4602      	mov	r2, r0
 800ef24:	460b      	mov	r3, r1
 800ef26:	4620      	mov	r0, r4
 800ef28:	4629      	mov	r1, r5
 800ef2a:	e6c6      	b.n	800ecba <__ieee754_asin+0x4a>
 800ef2c:	f3af 8000 	nop.w
 800ef30:	54442d18 	.word	0x54442d18
 800ef34:	3ff921fb 	.word	0x3ff921fb
 800ef38:	33145c07 	.word	0x33145c07
 800ef3c:	3c91a626 	.word	0x3c91a626
 800ef40:	8800759c 	.word	0x8800759c
 800ef44:	7e37e43c 	.word	0x7e37e43c
 800ef48:	0dfdf709 	.word	0x0dfdf709
 800ef4c:	3f023de1 	.word	0x3f023de1
 800ef50:	7501b288 	.word	0x7501b288
 800ef54:	3f49efe0 	.word	0x3f49efe0
 800ef58:	b5688f3b 	.word	0xb5688f3b
 800ef5c:	3fa48228 	.word	0x3fa48228
 800ef60:	0e884455 	.word	0x0e884455
 800ef64:	3fc9c155 	.word	0x3fc9c155
 800ef68:	03eb6f7d 	.word	0x03eb6f7d
 800ef6c:	3fd4d612 	.word	0x3fd4d612
 800ef70:	55555555 	.word	0x55555555
 800ef74:	3fc55555 	.word	0x3fc55555
 800ef78:	b12e9282 	.word	0xb12e9282
 800ef7c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ef80:	1b8d0159 	.word	0x1b8d0159
 800ef84:	3fe6066c 	.word	0x3fe6066c
 800ef88:	9c598ac8 	.word	0x9c598ac8
 800ef8c:	40002ae5 	.word	0x40002ae5
 800ef90:	1c8a2d4b 	.word	0x1c8a2d4b
 800ef94:	40033a27 	.word	0x40033a27
 800ef98:	3fefffff 	.word	0x3fefffff
 800ef9c:	3fdfffff 	.word	0x3fdfffff
 800efa0:	3ff00000 	.word	0x3ff00000
 800efa4:	3fe00000 	.word	0x3fe00000
 800efa8:	3fef3332 	.word	0x3fef3332
 800efac:	4652      	mov	r2, sl
 800efae:	465b      	mov	r3, fp
 800efb0:	4650      	mov	r0, sl
 800efb2:	4659      	mov	r1, fp
 800efb4:	f7f1 f96a 	bl	800028c <__adddf3>
 800efb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efbc:	4606      	mov	r6, r0
 800efbe:	460f      	mov	r7, r1
 800efc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efc4:	f7f1 fc42 	bl	800084c <__aeabi_ddiv>
 800efc8:	4602      	mov	r2, r0
 800efca:	460b      	mov	r3, r1
 800efcc:	4630      	mov	r0, r6
 800efce:	4639      	mov	r1, r7
 800efd0:	f7f1 fb12 	bl	80005f8 <__aeabi_dmul>
 800efd4:	f04f 0800 	mov.w	r8, #0
 800efd8:	4606      	mov	r6, r0
 800efda:	460f      	mov	r7, r1
 800efdc:	4642      	mov	r2, r8
 800efde:	465b      	mov	r3, fp
 800efe0:	4640      	mov	r0, r8
 800efe2:	4659      	mov	r1, fp
 800efe4:	f7f1 fb08 	bl	80005f8 <__aeabi_dmul>
 800efe8:	4602      	mov	r2, r0
 800efea:	460b      	mov	r3, r1
 800efec:	4620      	mov	r0, r4
 800efee:	4629      	mov	r1, r5
 800eff0:	f7f1 f94a 	bl	8000288 <__aeabi_dsub>
 800eff4:	4642      	mov	r2, r8
 800eff6:	4604      	mov	r4, r0
 800eff8:	460d      	mov	r5, r1
 800effa:	465b      	mov	r3, fp
 800effc:	4650      	mov	r0, sl
 800effe:	4659      	mov	r1, fp
 800f000:	f7f1 f944 	bl	800028c <__adddf3>
 800f004:	4602      	mov	r2, r0
 800f006:	460b      	mov	r3, r1
 800f008:	4620      	mov	r0, r4
 800f00a:	4629      	mov	r1, r5
 800f00c:	f7f1 fc1e 	bl	800084c <__aeabi_ddiv>
 800f010:	4602      	mov	r2, r0
 800f012:	460b      	mov	r3, r1
 800f014:	f7f1 f93a 	bl	800028c <__adddf3>
 800f018:	4602      	mov	r2, r0
 800f01a:	460b      	mov	r3, r1
 800f01c:	a112      	add	r1, pc, #72	@ (adr r1, 800f068 <__ieee754_asin+0x3f8>)
 800f01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f022:	f7f1 f931 	bl	8000288 <__aeabi_dsub>
 800f026:	4602      	mov	r2, r0
 800f028:	460b      	mov	r3, r1
 800f02a:	4630      	mov	r0, r6
 800f02c:	4639      	mov	r1, r7
 800f02e:	f7f1 f92b 	bl	8000288 <__aeabi_dsub>
 800f032:	4642      	mov	r2, r8
 800f034:	4604      	mov	r4, r0
 800f036:	460d      	mov	r5, r1
 800f038:	465b      	mov	r3, fp
 800f03a:	4640      	mov	r0, r8
 800f03c:	4659      	mov	r1, fp
 800f03e:	f7f1 f925 	bl	800028c <__adddf3>
 800f042:	4602      	mov	r2, r0
 800f044:	460b      	mov	r3, r1
 800f046:	a10a      	add	r1, pc, #40	@ (adr r1, 800f070 <__ieee754_asin+0x400>)
 800f048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f04c:	f7f1 f91c 	bl	8000288 <__aeabi_dsub>
 800f050:	4602      	mov	r2, r0
 800f052:	460b      	mov	r3, r1
 800f054:	4620      	mov	r0, r4
 800f056:	4629      	mov	r1, r5
 800f058:	f7f1 f916 	bl	8000288 <__aeabi_dsub>
 800f05c:	4602      	mov	r2, r0
 800f05e:	460b      	mov	r3, r1
 800f060:	a103      	add	r1, pc, #12	@ (adr r1, 800f070 <__ieee754_asin+0x400>)
 800f062:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f066:	e6e2      	b.n	800ee2e <__ieee754_asin+0x1be>
 800f068:	33145c07 	.word	0x33145c07
 800f06c:	3c91a626 	.word	0x3c91a626
 800f070:	54442d18 	.word	0x54442d18
 800f074:	3fe921fb 	.word	0x3fe921fb

0800f078 <__ieee754_atan2>:
 800f078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f07c:	ec57 6b11 	vmov	r6, r7, d1
 800f080:	4273      	negs	r3, r6
 800f082:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f200 <__ieee754_atan2+0x188>
 800f086:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800f08a:	4333      	orrs	r3, r6
 800f08c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f090:	4543      	cmp	r3, r8
 800f092:	ec51 0b10 	vmov	r0, r1, d0
 800f096:	4635      	mov	r5, r6
 800f098:	d809      	bhi.n	800f0ae <__ieee754_atan2+0x36>
 800f09a:	4244      	negs	r4, r0
 800f09c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f0a0:	4304      	orrs	r4, r0
 800f0a2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f0a6:	4544      	cmp	r4, r8
 800f0a8:	468e      	mov	lr, r1
 800f0aa:	4681      	mov	r9, r0
 800f0ac:	d907      	bls.n	800f0be <__ieee754_atan2+0x46>
 800f0ae:	4632      	mov	r2, r6
 800f0b0:	463b      	mov	r3, r7
 800f0b2:	f7f1 f8eb 	bl	800028c <__adddf3>
 800f0b6:	ec41 0b10 	vmov	d0, r0, r1
 800f0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0be:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800f0c2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800f0c6:	4334      	orrs	r4, r6
 800f0c8:	d103      	bne.n	800f0d2 <__ieee754_atan2+0x5a>
 800f0ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0ce:	f000 bddf 	b.w	800fc90 <atan>
 800f0d2:	17bc      	asrs	r4, r7, #30
 800f0d4:	f004 0402 	and.w	r4, r4, #2
 800f0d8:	ea53 0909 	orrs.w	r9, r3, r9
 800f0dc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f0e0:	d107      	bne.n	800f0f2 <__ieee754_atan2+0x7a>
 800f0e2:	2c02      	cmp	r4, #2
 800f0e4:	d05f      	beq.n	800f1a6 <__ieee754_atan2+0x12e>
 800f0e6:	2c03      	cmp	r4, #3
 800f0e8:	d1e5      	bne.n	800f0b6 <__ieee754_atan2+0x3e>
 800f0ea:	a141      	add	r1, pc, #260	@ (adr r1, 800f1f0 <__ieee754_atan2+0x178>)
 800f0ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0f0:	e7e1      	b.n	800f0b6 <__ieee754_atan2+0x3e>
 800f0f2:	4315      	orrs	r5, r2
 800f0f4:	d106      	bne.n	800f104 <__ieee754_atan2+0x8c>
 800f0f6:	f1be 0f00 	cmp.w	lr, #0
 800f0fa:	da5f      	bge.n	800f1bc <__ieee754_atan2+0x144>
 800f0fc:	a13e      	add	r1, pc, #248	@ (adr r1, 800f1f8 <__ieee754_atan2+0x180>)
 800f0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f102:	e7d8      	b.n	800f0b6 <__ieee754_atan2+0x3e>
 800f104:	4542      	cmp	r2, r8
 800f106:	d10f      	bne.n	800f128 <__ieee754_atan2+0xb0>
 800f108:	4293      	cmp	r3, r2
 800f10a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f10e:	d107      	bne.n	800f120 <__ieee754_atan2+0xa8>
 800f110:	2c02      	cmp	r4, #2
 800f112:	d84c      	bhi.n	800f1ae <__ieee754_atan2+0x136>
 800f114:	4b34      	ldr	r3, [pc, #208]	@ (800f1e8 <__ieee754_atan2+0x170>)
 800f116:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f11a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f11e:	e7ca      	b.n	800f0b6 <__ieee754_atan2+0x3e>
 800f120:	2c02      	cmp	r4, #2
 800f122:	d848      	bhi.n	800f1b6 <__ieee754_atan2+0x13e>
 800f124:	4b31      	ldr	r3, [pc, #196]	@ (800f1ec <__ieee754_atan2+0x174>)
 800f126:	e7f6      	b.n	800f116 <__ieee754_atan2+0x9e>
 800f128:	4543      	cmp	r3, r8
 800f12a:	d0e4      	beq.n	800f0f6 <__ieee754_atan2+0x7e>
 800f12c:	1a9b      	subs	r3, r3, r2
 800f12e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f132:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f136:	da1e      	bge.n	800f176 <__ieee754_atan2+0xfe>
 800f138:	2f00      	cmp	r7, #0
 800f13a:	da01      	bge.n	800f140 <__ieee754_atan2+0xc8>
 800f13c:	323c      	adds	r2, #60	@ 0x3c
 800f13e:	db1e      	blt.n	800f17e <__ieee754_atan2+0x106>
 800f140:	4632      	mov	r2, r6
 800f142:	463b      	mov	r3, r7
 800f144:	f7f1 fb82 	bl	800084c <__aeabi_ddiv>
 800f148:	ec41 0b10 	vmov	d0, r0, r1
 800f14c:	f7ff fbc8 	bl	800e8e0 <fabs>
 800f150:	f000 fd9e 	bl	800fc90 <atan>
 800f154:	ec51 0b10 	vmov	r0, r1, d0
 800f158:	2c01      	cmp	r4, #1
 800f15a:	d013      	beq.n	800f184 <__ieee754_atan2+0x10c>
 800f15c:	2c02      	cmp	r4, #2
 800f15e:	d015      	beq.n	800f18c <__ieee754_atan2+0x114>
 800f160:	2c00      	cmp	r4, #0
 800f162:	d0a8      	beq.n	800f0b6 <__ieee754_atan2+0x3e>
 800f164:	a318      	add	r3, pc, #96	@ (adr r3, 800f1c8 <__ieee754_atan2+0x150>)
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	f7f1 f88d 	bl	8000288 <__aeabi_dsub>
 800f16e:	a318      	add	r3, pc, #96	@ (adr r3, 800f1d0 <__ieee754_atan2+0x158>)
 800f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f174:	e014      	b.n	800f1a0 <__ieee754_atan2+0x128>
 800f176:	a118      	add	r1, pc, #96	@ (adr r1, 800f1d8 <__ieee754_atan2+0x160>)
 800f178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f17c:	e7ec      	b.n	800f158 <__ieee754_atan2+0xe0>
 800f17e:	2000      	movs	r0, #0
 800f180:	2100      	movs	r1, #0
 800f182:	e7e9      	b.n	800f158 <__ieee754_atan2+0xe0>
 800f184:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f188:	4619      	mov	r1, r3
 800f18a:	e794      	b.n	800f0b6 <__ieee754_atan2+0x3e>
 800f18c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f1c8 <__ieee754_atan2+0x150>)
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	f7f1 f879 	bl	8000288 <__aeabi_dsub>
 800f196:	4602      	mov	r2, r0
 800f198:	460b      	mov	r3, r1
 800f19a:	a10d      	add	r1, pc, #52	@ (adr r1, 800f1d0 <__ieee754_atan2+0x158>)
 800f19c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1a0:	f7f1 f872 	bl	8000288 <__aeabi_dsub>
 800f1a4:	e787      	b.n	800f0b6 <__ieee754_atan2+0x3e>
 800f1a6:	a10a      	add	r1, pc, #40	@ (adr r1, 800f1d0 <__ieee754_atan2+0x158>)
 800f1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1ac:	e783      	b.n	800f0b6 <__ieee754_atan2+0x3e>
 800f1ae:	a10c      	add	r1, pc, #48	@ (adr r1, 800f1e0 <__ieee754_atan2+0x168>)
 800f1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1b4:	e77f      	b.n	800f0b6 <__ieee754_atan2+0x3e>
 800f1b6:	2000      	movs	r0, #0
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	e77c      	b.n	800f0b6 <__ieee754_atan2+0x3e>
 800f1bc:	a106      	add	r1, pc, #24	@ (adr r1, 800f1d8 <__ieee754_atan2+0x160>)
 800f1be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1c2:	e778      	b.n	800f0b6 <__ieee754_atan2+0x3e>
 800f1c4:	f3af 8000 	nop.w
 800f1c8:	33145c07 	.word	0x33145c07
 800f1cc:	3ca1a626 	.word	0x3ca1a626
 800f1d0:	54442d18 	.word	0x54442d18
 800f1d4:	400921fb 	.word	0x400921fb
 800f1d8:	54442d18 	.word	0x54442d18
 800f1dc:	3ff921fb 	.word	0x3ff921fb
 800f1e0:	54442d18 	.word	0x54442d18
 800f1e4:	3fe921fb 	.word	0x3fe921fb
 800f1e8:	08011160 	.word	0x08011160
 800f1ec:	08011148 	.word	0x08011148
 800f1f0:	54442d18 	.word	0x54442d18
 800f1f4:	c00921fb 	.word	0xc00921fb
 800f1f8:	54442d18 	.word	0x54442d18
 800f1fc:	bff921fb 	.word	0xbff921fb
 800f200:	7ff00000 	.word	0x7ff00000
 800f204:	00000000 	.word	0x00000000

0800f208 <__ieee754_pow>:
 800f208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20c:	b091      	sub	sp, #68	@ 0x44
 800f20e:	ed8d 1b00 	vstr	d1, [sp]
 800f212:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f216:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f21a:	ea5a 0001 	orrs.w	r0, sl, r1
 800f21e:	ec57 6b10 	vmov	r6, r7, d0
 800f222:	d113      	bne.n	800f24c <__ieee754_pow+0x44>
 800f224:	19b3      	adds	r3, r6, r6
 800f226:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f22a:	4152      	adcs	r2, r2
 800f22c:	4298      	cmp	r0, r3
 800f22e:	4b98      	ldr	r3, [pc, #608]	@ (800f490 <__ieee754_pow+0x288>)
 800f230:	4193      	sbcs	r3, r2
 800f232:	f080 84ea 	bcs.w	800fc0a <__ieee754_pow+0xa02>
 800f236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f23a:	4630      	mov	r0, r6
 800f23c:	4639      	mov	r1, r7
 800f23e:	f7f1 f825 	bl	800028c <__adddf3>
 800f242:	ec41 0b10 	vmov	d0, r0, r1
 800f246:	b011      	add	sp, #68	@ 0x44
 800f248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f24c:	4a91      	ldr	r2, [pc, #580]	@ (800f494 <__ieee754_pow+0x28c>)
 800f24e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f252:	4590      	cmp	r8, r2
 800f254:	463d      	mov	r5, r7
 800f256:	4633      	mov	r3, r6
 800f258:	d806      	bhi.n	800f268 <__ieee754_pow+0x60>
 800f25a:	d101      	bne.n	800f260 <__ieee754_pow+0x58>
 800f25c:	2e00      	cmp	r6, #0
 800f25e:	d1ea      	bne.n	800f236 <__ieee754_pow+0x2e>
 800f260:	4592      	cmp	sl, r2
 800f262:	d801      	bhi.n	800f268 <__ieee754_pow+0x60>
 800f264:	d10e      	bne.n	800f284 <__ieee754_pow+0x7c>
 800f266:	b169      	cbz	r1, 800f284 <__ieee754_pow+0x7c>
 800f268:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f26c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f270:	431d      	orrs	r5, r3
 800f272:	d1e0      	bne.n	800f236 <__ieee754_pow+0x2e>
 800f274:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f278:	18db      	adds	r3, r3, r3
 800f27a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f27e:	4152      	adcs	r2, r2
 800f280:	429d      	cmp	r5, r3
 800f282:	e7d4      	b.n	800f22e <__ieee754_pow+0x26>
 800f284:	2d00      	cmp	r5, #0
 800f286:	46c3      	mov	fp, r8
 800f288:	da3a      	bge.n	800f300 <__ieee754_pow+0xf8>
 800f28a:	4a83      	ldr	r2, [pc, #524]	@ (800f498 <__ieee754_pow+0x290>)
 800f28c:	4592      	cmp	sl, r2
 800f28e:	d84d      	bhi.n	800f32c <__ieee754_pow+0x124>
 800f290:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f294:	4592      	cmp	sl, r2
 800f296:	f240 84c7 	bls.w	800fc28 <__ieee754_pow+0xa20>
 800f29a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f29e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f2a2:	2a14      	cmp	r2, #20
 800f2a4:	dd0f      	ble.n	800f2c6 <__ieee754_pow+0xbe>
 800f2a6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f2aa:	fa21 f402 	lsr.w	r4, r1, r2
 800f2ae:	fa04 f202 	lsl.w	r2, r4, r2
 800f2b2:	428a      	cmp	r2, r1
 800f2b4:	f040 84b8 	bne.w	800fc28 <__ieee754_pow+0xa20>
 800f2b8:	f004 0401 	and.w	r4, r4, #1
 800f2bc:	f1c4 0402 	rsb	r4, r4, #2
 800f2c0:	2900      	cmp	r1, #0
 800f2c2:	d158      	bne.n	800f376 <__ieee754_pow+0x16e>
 800f2c4:	e00e      	b.n	800f2e4 <__ieee754_pow+0xdc>
 800f2c6:	2900      	cmp	r1, #0
 800f2c8:	d154      	bne.n	800f374 <__ieee754_pow+0x16c>
 800f2ca:	f1c2 0214 	rsb	r2, r2, #20
 800f2ce:	fa4a f402 	asr.w	r4, sl, r2
 800f2d2:	fa04 f202 	lsl.w	r2, r4, r2
 800f2d6:	4552      	cmp	r2, sl
 800f2d8:	f040 84a3 	bne.w	800fc22 <__ieee754_pow+0xa1a>
 800f2dc:	f004 0401 	and.w	r4, r4, #1
 800f2e0:	f1c4 0402 	rsb	r4, r4, #2
 800f2e4:	4a6d      	ldr	r2, [pc, #436]	@ (800f49c <__ieee754_pow+0x294>)
 800f2e6:	4592      	cmp	sl, r2
 800f2e8:	d12e      	bne.n	800f348 <__ieee754_pow+0x140>
 800f2ea:	f1b9 0f00 	cmp.w	r9, #0
 800f2ee:	f280 8494 	bge.w	800fc1a <__ieee754_pow+0xa12>
 800f2f2:	496a      	ldr	r1, [pc, #424]	@ (800f49c <__ieee754_pow+0x294>)
 800f2f4:	4632      	mov	r2, r6
 800f2f6:	463b      	mov	r3, r7
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	f7f1 faa7 	bl	800084c <__aeabi_ddiv>
 800f2fe:	e7a0      	b.n	800f242 <__ieee754_pow+0x3a>
 800f300:	2400      	movs	r4, #0
 800f302:	bbc1      	cbnz	r1, 800f376 <__ieee754_pow+0x16e>
 800f304:	4a63      	ldr	r2, [pc, #396]	@ (800f494 <__ieee754_pow+0x28c>)
 800f306:	4592      	cmp	sl, r2
 800f308:	d1ec      	bne.n	800f2e4 <__ieee754_pow+0xdc>
 800f30a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f30e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f312:	431a      	orrs	r2, r3
 800f314:	f000 8479 	beq.w	800fc0a <__ieee754_pow+0xa02>
 800f318:	4b61      	ldr	r3, [pc, #388]	@ (800f4a0 <__ieee754_pow+0x298>)
 800f31a:	4598      	cmp	r8, r3
 800f31c:	d908      	bls.n	800f330 <__ieee754_pow+0x128>
 800f31e:	f1b9 0f00 	cmp.w	r9, #0
 800f322:	f2c0 8476 	blt.w	800fc12 <__ieee754_pow+0xa0a>
 800f326:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f32a:	e78a      	b.n	800f242 <__ieee754_pow+0x3a>
 800f32c:	2402      	movs	r4, #2
 800f32e:	e7e8      	b.n	800f302 <__ieee754_pow+0xfa>
 800f330:	f1b9 0f00 	cmp.w	r9, #0
 800f334:	f04f 0000 	mov.w	r0, #0
 800f338:	f04f 0100 	mov.w	r1, #0
 800f33c:	da81      	bge.n	800f242 <__ieee754_pow+0x3a>
 800f33e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f342:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f346:	e77c      	b.n	800f242 <__ieee754_pow+0x3a>
 800f348:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f34c:	d106      	bne.n	800f35c <__ieee754_pow+0x154>
 800f34e:	4632      	mov	r2, r6
 800f350:	463b      	mov	r3, r7
 800f352:	4630      	mov	r0, r6
 800f354:	4639      	mov	r1, r7
 800f356:	f7f1 f94f 	bl	80005f8 <__aeabi_dmul>
 800f35a:	e772      	b.n	800f242 <__ieee754_pow+0x3a>
 800f35c:	4a51      	ldr	r2, [pc, #324]	@ (800f4a4 <__ieee754_pow+0x29c>)
 800f35e:	4591      	cmp	r9, r2
 800f360:	d109      	bne.n	800f376 <__ieee754_pow+0x16e>
 800f362:	2d00      	cmp	r5, #0
 800f364:	db07      	blt.n	800f376 <__ieee754_pow+0x16e>
 800f366:	ec47 6b10 	vmov	d0, r6, r7
 800f36a:	b011      	add	sp, #68	@ 0x44
 800f36c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f370:	f7ff bba4 	b.w	800eabc <__ieee754_sqrt>
 800f374:	2400      	movs	r4, #0
 800f376:	ec47 6b10 	vmov	d0, r6, r7
 800f37a:	9302      	str	r3, [sp, #8]
 800f37c:	f7ff fab0 	bl	800e8e0 <fabs>
 800f380:	9b02      	ldr	r3, [sp, #8]
 800f382:	ec51 0b10 	vmov	r0, r1, d0
 800f386:	bb53      	cbnz	r3, 800f3de <__ieee754_pow+0x1d6>
 800f388:	4b44      	ldr	r3, [pc, #272]	@ (800f49c <__ieee754_pow+0x294>)
 800f38a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f38e:	429a      	cmp	r2, r3
 800f390:	d002      	beq.n	800f398 <__ieee754_pow+0x190>
 800f392:	f1b8 0f00 	cmp.w	r8, #0
 800f396:	d122      	bne.n	800f3de <__ieee754_pow+0x1d6>
 800f398:	f1b9 0f00 	cmp.w	r9, #0
 800f39c:	da05      	bge.n	800f3aa <__ieee754_pow+0x1a2>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	460b      	mov	r3, r1
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	493d      	ldr	r1, [pc, #244]	@ (800f49c <__ieee754_pow+0x294>)
 800f3a6:	f7f1 fa51 	bl	800084c <__aeabi_ddiv>
 800f3aa:	2d00      	cmp	r5, #0
 800f3ac:	f6bf af49 	bge.w	800f242 <__ieee754_pow+0x3a>
 800f3b0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f3b4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f3b8:	ea58 0804 	orrs.w	r8, r8, r4
 800f3bc:	d108      	bne.n	800f3d0 <__ieee754_pow+0x1c8>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	4610      	mov	r0, r2
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	f7f0 ff5f 	bl	8000288 <__aeabi_dsub>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	e794      	b.n	800f2fa <__ieee754_pow+0xf2>
 800f3d0:	2c01      	cmp	r4, #1
 800f3d2:	f47f af36 	bne.w	800f242 <__ieee754_pow+0x3a>
 800f3d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f3da:	4619      	mov	r1, r3
 800f3dc:	e731      	b.n	800f242 <__ieee754_pow+0x3a>
 800f3de:	0feb      	lsrs	r3, r5, #31
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	ea53 0204 	orrs.w	r2, r3, r4
 800f3e6:	d102      	bne.n	800f3ee <__ieee754_pow+0x1e6>
 800f3e8:	4632      	mov	r2, r6
 800f3ea:	463b      	mov	r3, r7
 800f3ec:	e7e9      	b.n	800f3c2 <__ieee754_pow+0x1ba>
 800f3ee:	3c01      	subs	r4, #1
 800f3f0:	431c      	orrs	r4, r3
 800f3f2:	d016      	beq.n	800f422 <__ieee754_pow+0x21a>
 800f3f4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f480 <__ieee754_pow+0x278>
 800f3f8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f3fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f400:	f240 8112 	bls.w	800f628 <__ieee754_pow+0x420>
 800f404:	4b28      	ldr	r3, [pc, #160]	@ (800f4a8 <__ieee754_pow+0x2a0>)
 800f406:	459a      	cmp	sl, r3
 800f408:	4b25      	ldr	r3, [pc, #148]	@ (800f4a0 <__ieee754_pow+0x298>)
 800f40a:	d916      	bls.n	800f43a <__ieee754_pow+0x232>
 800f40c:	4598      	cmp	r8, r3
 800f40e:	d80b      	bhi.n	800f428 <__ieee754_pow+0x220>
 800f410:	f1b9 0f00 	cmp.w	r9, #0
 800f414:	da0b      	bge.n	800f42e <__ieee754_pow+0x226>
 800f416:	2000      	movs	r0, #0
 800f418:	b011      	add	sp, #68	@ 0x44
 800f41a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41e:	f001 b923 	b.w	8010668 <__math_oflow>
 800f422:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f488 <__ieee754_pow+0x280>
 800f426:	e7e7      	b.n	800f3f8 <__ieee754_pow+0x1f0>
 800f428:	f1b9 0f00 	cmp.w	r9, #0
 800f42c:	dcf3      	bgt.n	800f416 <__ieee754_pow+0x20e>
 800f42e:	2000      	movs	r0, #0
 800f430:	b011      	add	sp, #68	@ 0x44
 800f432:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f436:	f001 b90f 	b.w	8010658 <__math_uflow>
 800f43a:	4598      	cmp	r8, r3
 800f43c:	d20c      	bcs.n	800f458 <__ieee754_pow+0x250>
 800f43e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f442:	2200      	movs	r2, #0
 800f444:	2300      	movs	r3, #0
 800f446:	f7f1 fb49 	bl	8000adc <__aeabi_dcmplt>
 800f44a:	3800      	subs	r0, #0
 800f44c:	bf18      	it	ne
 800f44e:	2001      	movne	r0, #1
 800f450:	f1b9 0f00 	cmp.w	r9, #0
 800f454:	daec      	bge.n	800f430 <__ieee754_pow+0x228>
 800f456:	e7df      	b.n	800f418 <__ieee754_pow+0x210>
 800f458:	4b10      	ldr	r3, [pc, #64]	@ (800f49c <__ieee754_pow+0x294>)
 800f45a:	4598      	cmp	r8, r3
 800f45c:	f04f 0200 	mov.w	r2, #0
 800f460:	d924      	bls.n	800f4ac <__ieee754_pow+0x2a4>
 800f462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f466:	2300      	movs	r3, #0
 800f468:	f7f1 fb38 	bl	8000adc <__aeabi_dcmplt>
 800f46c:	3800      	subs	r0, #0
 800f46e:	bf18      	it	ne
 800f470:	2001      	movne	r0, #1
 800f472:	f1b9 0f00 	cmp.w	r9, #0
 800f476:	dccf      	bgt.n	800f418 <__ieee754_pow+0x210>
 800f478:	e7da      	b.n	800f430 <__ieee754_pow+0x228>
 800f47a:	bf00      	nop
 800f47c:	f3af 8000 	nop.w
 800f480:	00000000 	.word	0x00000000
 800f484:	3ff00000 	.word	0x3ff00000
 800f488:	00000000 	.word	0x00000000
 800f48c:	bff00000 	.word	0xbff00000
 800f490:	fff00000 	.word	0xfff00000
 800f494:	7ff00000 	.word	0x7ff00000
 800f498:	433fffff 	.word	0x433fffff
 800f49c:	3ff00000 	.word	0x3ff00000
 800f4a0:	3fefffff 	.word	0x3fefffff
 800f4a4:	3fe00000 	.word	0x3fe00000
 800f4a8:	43f00000 	.word	0x43f00000
 800f4ac:	4b5a      	ldr	r3, [pc, #360]	@ (800f618 <__ieee754_pow+0x410>)
 800f4ae:	f7f0 feeb 	bl	8000288 <__aeabi_dsub>
 800f4b2:	a351      	add	r3, pc, #324	@ (adr r3, 800f5f8 <__ieee754_pow+0x3f0>)
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	460d      	mov	r5, r1
 800f4bc:	f7f1 f89c 	bl	80005f8 <__aeabi_dmul>
 800f4c0:	a34f      	add	r3, pc, #316	@ (adr r3, 800f600 <__ieee754_pow+0x3f8>)
 800f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	460f      	mov	r7, r1
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	4629      	mov	r1, r5
 800f4ce:	f7f1 f893 	bl	80005f8 <__aeabi_dmul>
 800f4d2:	4b52      	ldr	r3, [pc, #328]	@ (800f61c <__ieee754_pow+0x414>)
 800f4d4:	4682      	mov	sl, r0
 800f4d6:	468b      	mov	fp, r1
 800f4d8:	2200      	movs	r2, #0
 800f4da:	4620      	mov	r0, r4
 800f4dc:	4629      	mov	r1, r5
 800f4de:	f7f1 f88b 	bl	80005f8 <__aeabi_dmul>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	a148      	add	r1, pc, #288	@ (adr r1, 800f608 <__ieee754_pow+0x400>)
 800f4e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4ec:	f7f0 fecc 	bl	8000288 <__aeabi_dsub>
 800f4f0:	4622      	mov	r2, r4
 800f4f2:	462b      	mov	r3, r5
 800f4f4:	f7f1 f880 	bl	80005f8 <__aeabi_dmul>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	4948      	ldr	r1, [pc, #288]	@ (800f620 <__ieee754_pow+0x418>)
 800f500:	f7f0 fec2 	bl	8000288 <__aeabi_dsub>
 800f504:	4622      	mov	r2, r4
 800f506:	4680      	mov	r8, r0
 800f508:	4689      	mov	r9, r1
 800f50a:	462b      	mov	r3, r5
 800f50c:	4620      	mov	r0, r4
 800f50e:	4629      	mov	r1, r5
 800f510:	f7f1 f872 	bl	80005f8 <__aeabi_dmul>
 800f514:	4602      	mov	r2, r0
 800f516:	460b      	mov	r3, r1
 800f518:	4640      	mov	r0, r8
 800f51a:	4649      	mov	r1, r9
 800f51c:	f7f1 f86c 	bl	80005f8 <__aeabi_dmul>
 800f520:	a33b      	add	r3, pc, #236	@ (adr r3, 800f610 <__ieee754_pow+0x408>)
 800f522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f526:	f7f1 f867 	bl	80005f8 <__aeabi_dmul>
 800f52a:	4602      	mov	r2, r0
 800f52c:	460b      	mov	r3, r1
 800f52e:	4650      	mov	r0, sl
 800f530:	4659      	mov	r1, fp
 800f532:	f7f0 fea9 	bl	8000288 <__aeabi_dsub>
 800f536:	4602      	mov	r2, r0
 800f538:	460b      	mov	r3, r1
 800f53a:	4680      	mov	r8, r0
 800f53c:	4689      	mov	r9, r1
 800f53e:	4630      	mov	r0, r6
 800f540:	4639      	mov	r1, r7
 800f542:	f7f0 fea3 	bl	800028c <__adddf3>
 800f546:	2400      	movs	r4, #0
 800f548:	4632      	mov	r2, r6
 800f54a:	463b      	mov	r3, r7
 800f54c:	4620      	mov	r0, r4
 800f54e:	460d      	mov	r5, r1
 800f550:	f7f0 fe9a 	bl	8000288 <__aeabi_dsub>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	4640      	mov	r0, r8
 800f55a:	4649      	mov	r1, r9
 800f55c:	f7f0 fe94 	bl	8000288 <__aeabi_dsub>
 800f560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f564:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f568:	2300      	movs	r3, #0
 800f56a:	9304      	str	r3, [sp, #16]
 800f56c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f570:	4606      	mov	r6, r0
 800f572:	460f      	mov	r7, r1
 800f574:	4652      	mov	r2, sl
 800f576:	465b      	mov	r3, fp
 800f578:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f57c:	f7f0 fe84 	bl	8000288 <__aeabi_dsub>
 800f580:	4622      	mov	r2, r4
 800f582:	462b      	mov	r3, r5
 800f584:	f7f1 f838 	bl	80005f8 <__aeabi_dmul>
 800f588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f58c:	4680      	mov	r8, r0
 800f58e:	4689      	mov	r9, r1
 800f590:	4630      	mov	r0, r6
 800f592:	4639      	mov	r1, r7
 800f594:	f7f1 f830 	bl	80005f8 <__aeabi_dmul>
 800f598:	4602      	mov	r2, r0
 800f59a:	460b      	mov	r3, r1
 800f59c:	4640      	mov	r0, r8
 800f59e:	4649      	mov	r1, r9
 800f5a0:	f7f0 fe74 	bl	800028c <__adddf3>
 800f5a4:	4652      	mov	r2, sl
 800f5a6:	465b      	mov	r3, fp
 800f5a8:	4606      	mov	r6, r0
 800f5aa:	460f      	mov	r7, r1
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	4629      	mov	r1, r5
 800f5b0:	f7f1 f822 	bl	80005f8 <__aeabi_dmul>
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	4680      	mov	r8, r0
 800f5ba:	4689      	mov	r9, r1
 800f5bc:	4630      	mov	r0, r6
 800f5be:	4639      	mov	r1, r7
 800f5c0:	f7f0 fe64 	bl	800028c <__adddf3>
 800f5c4:	4b17      	ldr	r3, [pc, #92]	@ (800f624 <__ieee754_pow+0x41c>)
 800f5c6:	4299      	cmp	r1, r3
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	460d      	mov	r5, r1
 800f5cc:	468a      	mov	sl, r1
 800f5ce:	468b      	mov	fp, r1
 800f5d0:	f340 82ef 	ble.w	800fbb2 <__ieee754_pow+0x9aa>
 800f5d4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f5d8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f5dc:	4303      	orrs	r3, r0
 800f5de:	f000 81e8 	beq.w	800f9b2 <__ieee754_pow+0x7aa>
 800f5e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	f7f1 fa77 	bl	8000adc <__aeabi_dcmplt>
 800f5ee:	3800      	subs	r0, #0
 800f5f0:	bf18      	it	ne
 800f5f2:	2001      	movne	r0, #1
 800f5f4:	e710      	b.n	800f418 <__ieee754_pow+0x210>
 800f5f6:	bf00      	nop
 800f5f8:	60000000 	.word	0x60000000
 800f5fc:	3ff71547 	.word	0x3ff71547
 800f600:	f85ddf44 	.word	0xf85ddf44
 800f604:	3e54ae0b 	.word	0x3e54ae0b
 800f608:	55555555 	.word	0x55555555
 800f60c:	3fd55555 	.word	0x3fd55555
 800f610:	652b82fe 	.word	0x652b82fe
 800f614:	3ff71547 	.word	0x3ff71547
 800f618:	3ff00000 	.word	0x3ff00000
 800f61c:	3fd00000 	.word	0x3fd00000
 800f620:	3fe00000 	.word	0x3fe00000
 800f624:	408fffff 	.word	0x408fffff
 800f628:	4bd5      	ldr	r3, [pc, #852]	@ (800f980 <__ieee754_pow+0x778>)
 800f62a:	402b      	ands	r3, r5
 800f62c:	2200      	movs	r2, #0
 800f62e:	b92b      	cbnz	r3, 800f63c <__ieee754_pow+0x434>
 800f630:	4bd4      	ldr	r3, [pc, #848]	@ (800f984 <__ieee754_pow+0x77c>)
 800f632:	f7f0 ffe1 	bl	80005f8 <__aeabi_dmul>
 800f636:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f63a:	468b      	mov	fp, r1
 800f63c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f640:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f644:	4413      	add	r3, r2
 800f646:	930a      	str	r3, [sp, #40]	@ 0x28
 800f648:	4bcf      	ldr	r3, [pc, #828]	@ (800f988 <__ieee754_pow+0x780>)
 800f64a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f64e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f652:	459b      	cmp	fp, r3
 800f654:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f658:	dd08      	ble.n	800f66c <__ieee754_pow+0x464>
 800f65a:	4bcc      	ldr	r3, [pc, #816]	@ (800f98c <__ieee754_pow+0x784>)
 800f65c:	459b      	cmp	fp, r3
 800f65e:	f340 81a5 	ble.w	800f9ac <__ieee754_pow+0x7a4>
 800f662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f664:	3301      	adds	r3, #1
 800f666:	930a      	str	r3, [sp, #40]	@ 0x28
 800f668:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f66c:	f04f 0a00 	mov.w	sl, #0
 800f670:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f674:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f676:	4bc6      	ldr	r3, [pc, #792]	@ (800f990 <__ieee754_pow+0x788>)
 800f678:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f67c:	ed93 7b00 	vldr	d7, [r3]
 800f680:	4629      	mov	r1, r5
 800f682:	ec53 2b17 	vmov	r2, r3, d7
 800f686:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f68a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f68e:	f7f0 fdfb 	bl	8000288 <__aeabi_dsub>
 800f692:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f696:	4606      	mov	r6, r0
 800f698:	460f      	mov	r7, r1
 800f69a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f69e:	f7f0 fdf5 	bl	800028c <__adddf3>
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	460b      	mov	r3, r1
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	49ba      	ldr	r1, [pc, #744]	@ (800f994 <__ieee754_pow+0x78c>)
 800f6aa:	f7f1 f8cf 	bl	800084c <__aeabi_ddiv>
 800f6ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	4639      	mov	r1, r7
 800f6ba:	f7f0 ff9d 	bl	80005f8 <__aeabi_dmul>
 800f6be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6c2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f6c6:	106d      	asrs	r5, r5, #1
 800f6c8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f6cc:	f04f 0b00 	mov.w	fp, #0
 800f6d0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f6d4:	4661      	mov	r1, ip
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f6dc:	4658      	mov	r0, fp
 800f6de:	46e1      	mov	r9, ip
 800f6e0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f6e4:	4614      	mov	r4, r2
 800f6e6:	461d      	mov	r5, r3
 800f6e8:	f7f0 ff86 	bl	80005f8 <__aeabi_dmul>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	4639      	mov	r1, r7
 800f6f4:	f7f0 fdc8 	bl	8000288 <__aeabi_dsub>
 800f6f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f6fc:	4606      	mov	r6, r0
 800f6fe:	460f      	mov	r7, r1
 800f700:	4620      	mov	r0, r4
 800f702:	4629      	mov	r1, r5
 800f704:	f7f0 fdc0 	bl	8000288 <__aeabi_dsub>
 800f708:	4602      	mov	r2, r0
 800f70a:	460b      	mov	r3, r1
 800f70c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f710:	f7f0 fdba 	bl	8000288 <__aeabi_dsub>
 800f714:	465a      	mov	r2, fp
 800f716:	464b      	mov	r3, r9
 800f718:	f7f0 ff6e 	bl	80005f8 <__aeabi_dmul>
 800f71c:	4602      	mov	r2, r0
 800f71e:	460b      	mov	r3, r1
 800f720:	4630      	mov	r0, r6
 800f722:	4639      	mov	r1, r7
 800f724:	f7f0 fdb0 	bl	8000288 <__aeabi_dsub>
 800f728:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f72c:	f7f0 ff64 	bl	80005f8 <__aeabi_dmul>
 800f730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f734:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f738:	4610      	mov	r0, r2
 800f73a:	4619      	mov	r1, r3
 800f73c:	f7f0 ff5c 	bl	80005f8 <__aeabi_dmul>
 800f740:	a37d      	add	r3, pc, #500	@ (adr r3, 800f938 <__ieee754_pow+0x730>)
 800f742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f746:	4604      	mov	r4, r0
 800f748:	460d      	mov	r5, r1
 800f74a:	f7f0 ff55 	bl	80005f8 <__aeabi_dmul>
 800f74e:	a37c      	add	r3, pc, #496	@ (adr r3, 800f940 <__ieee754_pow+0x738>)
 800f750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f754:	f7f0 fd9a 	bl	800028c <__adddf3>
 800f758:	4622      	mov	r2, r4
 800f75a:	462b      	mov	r3, r5
 800f75c:	f7f0 ff4c 	bl	80005f8 <__aeabi_dmul>
 800f760:	a379      	add	r3, pc, #484	@ (adr r3, 800f948 <__ieee754_pow+0x740>)
 800f762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f766:	f7f0 fd91 	bl	800028c <__adddf3>
 800f76a:	4622      	mov	r2, r4
 800f76c:	462b      	mov	r3, r5
 800f76e:	f7f0 ff43 	bl	80005f8 <__aeabi_dmul>
 800f772:	a377      	add	r3, pc, #476	@ (adr r3, 800f950 <__ieee754_pow+0x748>)
 800f774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f778:	f7f0 fd88 	bl	800028c <__adddf3>
 800f77c:	4622      	mov	r2, r4
 800f77e:	462b      	mov	r3, r5
 800f780:	f7f0 ff3a 	bl	80005f8 <__aeabi_dmul>
 800f784:	a374      	add	r3, pc, #464	@ (adr r3, 800f958 <__ieee754_pow+0x750>)
 800f786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78a:	f7f0 fd7f 	bl	800028c <__adddf3>
 800f78e:	4622      	mov	r2, r4
 800f790:	462b      	mov	r3, r5
 800f792:	f7f0 ff31 	bl	80005f8 <__aeabi_dmul>
 800f796:	a372      	add	r3, pc, #456	@ (adr r3, 800f960 <__ieee754_pow+0x758>)
 800f798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79c:	f7f0 fd76 	bl	800028c <__adddf3>
 800f7a0:	4622      	mov	r2, r4
 800f7a2:	4606      	mov	r6, r0
 800f7a4:	460f      	mov	r7, r1
 800f7a6:	462b      	mov	r3, r5
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	f7f0 ff24 	bl	80005f8 <__aeabi_dmul>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	4639      	mov	r1, r7
 800f7b8:	f7f0 ff1e 	bl	80005f8 <__aeabi_dmul>
 800f7bc:	465a      	mov	r2, fp
 800f7be:	4604      	mov	r4, r0
 800f7c0:	460d      	mov	r5, r1
 800f7c2:	464b      	mov	r3, r9
 800f7c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7c8:	f7f0 fd60 	bl	800028c <__adddf3>
 800f7cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7d0:	f7f0 ff12 	bl	80005f8 <__aeabi_dmul>
 800f7d4:	4622      	mov	r2, r4
 800f7d6:	462b      	mov	r3, r5
 800f7d8:	f7f0 fd58 	bl	800028c <__adddf3>
 800f7dc:	465a      	mov	r2, fp
 800f7de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f7e2:	464b      	mov	r3, r9
 800f7e4:	4658      	mov	r0, fp
 800f7e6:	4649      	mov	r1, r9
 800f7e8:	f7f0 ff06 	bl	80005f8 <__aeabi_dmul>
 800f7ec:	4b6a      	ldr	r3, [pc, #424]	@ (800f998 <__ieee754_pow+0x790>)
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	460f      	mov	r7, r1
 800f7f4:	f7f0 fd4a 	bl	800028c <__adddf3>
 800f7f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f7fc:	f7f0 fd46 	bl	800028c <__adddf3>
 800f800:	46d8      	mov	r8, fp
 800f802:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f806:	460d      	mov	r5, r1
 800f808:	465a      	mov	r2, fp
 800f80a:	460b      	mov	r3, r1
 800f80c:	4640      	mov	r0, r8
 800f80e:	4649      	mov	r1, r9
 800f810:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f814:	f7f0 fef0 	bl	80005f8 <__aeabi_dmul>
 800f818:	465c      	mov	r4, fp
 800f81a:	4680      	mov	r8, r0
 800f81c:	4689      	mov	r9, r1
 800f81e:	4b5e      	ldr	r3, [pc, #376]	@ (800f998 <__ieee754_pow+0x790>)
 800f820:	2200      	movs	r2, #0
 800f822:	4620      	mov	r0, r4
 800f824:	4629      	mov	r1, r5
 800f826:	f7f0 fd2f 	bl	8000288 <__aeabi_dsub>
 800f82a:	4632      	mov	r2, r6
 800f82c:	463b      	mov	r3, r7
 800f82e:	f7f0 fd2b 	bl	8000288 <__aeabi_dsub>
 800f832:	4602      	mov	r2, r0
 800f834:	460b      	mov	r3, r1
 800f836:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f83a:	f7f0 fd25 	bl	8000288 <__aeabi_dsub>
 800f83e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f842:	f7f0 fed9 	bl	80005f8 <__aeabi_dmul>
 800f846:	4622      	mov	r2, r4
 800f848:	4606      	mov	r6, r0
 800f84a:	460f      	mov	r7, r1
 800f84c:	462b      	mov	r3, r5
 800f84e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f852:	f7f0 fed1 	bl	80005f8 <__aeabi_dmul>
 800f856:	4602      	mov	r2, r0
 800f858:	460b      	mov	r3, r1
 800f85a:	4630      	mov	r0, r6
 800f85c:	4639      	mov	r1, r7
 800f85e:	f7f0 fd15 	bl	800028c <__adddf3>
 800f862:	4606      	mov	r6, r0
 800f864:	460f      	mov	r7, r1
 800f866:	4602      	mov	r2, r0
 800f868:	460b      	mov	r3, r1
 800f86a:	4640      	mov	r0, r8
 800f86c:	4649      	mov	r1, r9
 800f86e:	f7f0 fd0d 	bl	800028c <__adddf3>
 800f872:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f876:	a33c      	add	r3, pc, #240	@ (adr r3, 800f968 <__ieee754_pow+0x760>)
 800f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87c:	4658      	mov	r0, fp
 800f87e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f882:	460d      	mov	r5, r1
 800f884:	f7f0 feb8 	bl	80005f8 <__aeabi_dmul>
 800f888:	465c      	mov	r4, fp
 800f88a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f88e:	4642      	mov	r2, r8
 800f890:	464b      	mov	r3, r9
 800f892:	4620      	mov	r0, r4
 800f894:	4629      	mov	r1, r5
 800f896:	f7f0 fcf7 	bl	8000288 <__aeabi_dsub>
 800f89a:	4602      	mov	r2, r0
 800f89c:	460b      	mov	r3, r1
 800f89e:	4630      	mov	r0, r6
 800f8a0:	4639      	mov	r1, r7
 800f8a2:	f7f0 fcf1 	bl	8000288 <__aeabi_dsub>
 800f8a6:	a332      	add	r3, pc, #200	@ (adr r3, 800f970 <__ieee754_pow+0x768>)
 800f8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ac:	f7f0 fea4 	bl	80005f8 <__aeabi_dmul>
 800f8b0:	a331      	add	r3, pc, #196	@ (adr r3, 800f978 <__ieee754_pow+0x770>)
 800f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b6:	4606      	mov	r6, r0
 800f8b8:	460f      	mov	r7, r1
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	4629      	mov	r1, r5
 800f8be:	f7f0 fe9b 	bl	80005f8 <__aeabi_dmul>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	4639      	mov	r1, r7
 800f8ca:	f7f0 fcdf 	bl	800028c <__adddf3>
 800f8ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f8d0:	4b32      	ldr	r3, [pc, #200]	@ (800f99c <__ieee754_pow+0x794>)
 800f8d2:	4413      	add	r3, r2
 800f8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d8:	f7f0 fcd8 	bl	800028c <__adddf3>
 800f8dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f8e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f8e2:	f7f0 fe1f 	bl	8000524 <__aeabi_i2d>
 800f8e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f8e8:	4b2d      	ldr	r3, [pc, #180]	@ (800f9a0 <__ieee754_pow+0x798>)
 800f8ea:	4413      	add	r3, r2
 800f8ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8f0:	4606      	mov	r6, r0
 800f8f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f8f6:	460f      	mov	r7, r1
 800f8f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8fc:	f7f0 fcc6 	bl	800028c <__adddf3>
 800f900:	4642      	mov	r2, r8
 800f902:	464b      	mov	r3, r9
 800f904:	f7f0 fcc2 	bl	800028c <__adddf3>
 800f908:	4632      	mov	r2, r6
 800f90a:	463b      	mov	r3, r7
 800f90c:	f7f0 fcbe 	bl	800028c <__adddf3>
 800f910:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f914:	4632      	mov	r2, r6
 800f916:	463b      	mov	r3, r7
 800f918:	4658      	mov	r0, fp
 800f91a:	460d      	mov	r5, r1
 800f91c:	f7f0 fcb4 	bl	8000288 <__aeabi_dsub>
 800f920:	4642      	mov	r2, r8
 800f922:	464b      	mov	r3, r9
 800f924:	f7f0 fcb0 	bl	8000288 <__aeabi_dsub>
 800f928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f92c:	f7f0 fcac 	bl	8000288 <__aeabi_dsub>
 800f930:	465c      	mov	r4, fp
 800f932:	4602      	mov	r2, r0
 800f934:	e036      	b.n	800f9a4 <__ieee754_pow+0x79c>
 800f936:	bf00      	nop
 800f938:	4a454eef 	.word	0x4a454eef
 800f93c:	3fca7e28 	.word	0x3fca7e28
 800f940:	93c9db65 	.word	0x93c9db65
 800f944:	3fcd864a 	.word	0x3fcd864a
 800f948:	a91d4101 	.word	0xa91d4101
 800f94c:	3fd17460 	.word	0x3fd17460
 800f950:	518f264d 	.word	0x518f264d
 800f954:	3fd55555 	.word	0x3fd55555
 800f958:	db6fabff 	.word	0xdb6fabff
 800f95c:	3fdb6db6 	.word	0x3fdb6db6
 800f960:	33333303 	.word	0x33333303
 800f964:	3fe33333 	.word	0x3fe33333
 800f968:	e0000000 	.word	0xe0000000
 800f96c:	3feec709 	.word	0x3feec709
 800f970:	dc3a03fd 	.word	0xdc3a03fd
 800f974:	3feec709 	.word	0x3feec709
 800f978:	145b01f5 	.word	0x145b01f5
 800f97c:	be3e2fe0 	.word	0xbe3e2fe0
 800f980:	7ff00000 	.word	0x7ff00000
 800f984:	43400000 	.word	0x43400000
 800f988:	0003988e 	.word	0x0003988e
 800f98c:	000bb679 	.word	0x000bb679
 800f990:	08011198 	.word	0x08011198
 800f994:	3ff00000 	.word	0x3ff00000
 800f998:	40080000 	.word	0x40080000
 800f99c:	08011178 	.word	0x08011178
 800f9a0:	08011188 	.word	0x08011188
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f9aa:	e5d7      	b.n	800f55c <__ieee754_pow+0x354>
 800f9ac:	f04f 0a01 	mov.w	sl, #1
 800f9b0:	e65e      	b.n	800f670 <__ieee754_pow+0x468>
 800f9b2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800fc84 <__ieee754_pow+0xa7c>)
 800f9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	4639      	mov	r1, r7
 800f9bc:	f7f0 fc66 	bl	800028c <__adddf3>
 800f9c0:	4642      	mov	r2, r8
 800f9c2:	e9cd 0100 	strd	r0, r1, [sp]
 800f9c6:	464b      	mov	r3, r9
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	4629      	mov	r1, r5
 800f9cc:	f7f0 fc5c 	bl	8000288 <__aeabi_dsub>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9d8:	f7f1 f89e 	bl	8000b18 <__aeabi_dcmpgt>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	f47f ae00 	bne.w	800f5e2 <__ieee754_pow+0x3da>
 800f9e2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f9e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f9ea:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f9ee:	fa43 fa0a 	asr.w	sl, r3, sl
 800f9f2:	44da      	add	sl, fp
 800f9f4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f9f8:	489d      	ldr	r0, [pc, #628]	@ (800fc70 <__ieee754_pow+0xa68>)
 800f9fa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f9fe:	4108      	asrs	r0, r1
 800fa00:	ea00 030a 	and.w	r3, r0, sl
 800fa04:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fa08:	f1c1 0114 	rsb	r1, r1, #20
 800fa0c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800fa10:	fa4a fa01 	asr.w	sl, sl, r1
 800fa14:	f1bb 0f00 	cmp.w	fp, #0
 800fa18:	4640      	mov	r0, r8
 800fa1a:	4649      	mov	r1, r9
 800fa1c:	f04f 0200 	mov.w	r2, #0
 800fa20:	bfb8      	it	lt
 800fa22:	f1ca 0a00 	rsblt	sl, sl, #0
 800fa26:	f7f0 fc2f 	bl	8000288 <__aeabi_dsub>
 800fa2a:	4680      	mov	r8, r0
 800fa2c:	4689      	mov	r9, r1
 800fa2e:	4632      	mov	r2, r6
 800fa30:	463b      	mov	r3, r7
 800fa32:	4640      	mov	r0, r8
 800fa34:	4649      	mov	r1, r9
 800fa36:	f7f0 fc29 	bl	800028c <__adddf3>
 800fa3a:	2400      	movs	r4, #0
 800fa3c:	a37c      	add	r3, pc, #496	@ (adr r3, 800fc30 <__ieee754_pow+0xa28>)
 800fa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa42:	4620      	mov	r0, r4
 800fa44:	460d      	mov	r5, r1
 800fa46:	f7f0 fdd7 	bl	80005f8 <__aeabi_dmul>
 800fa4a:	4642      	mov	r2, r8
 800fa4c:	e9cd 0100 	strd	r0, r1, [sp]
 800fa50:	464b      	mov	r3, r9
 800fa52:	4620      	mov	r0, r4
 800fa54:	4629      	mov	r1, r5
 800fa56:	f7f0 fc17 	bl	8000288 <__aeabi_dsub>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	4630      	mov	r0, r6
 800fa60:	4639      	mov	r1, r7
 800fa62:	f7f0 fc11 	bl	8000288 <__aeabi_dsub>
 800fa66:	a374      	add	r3, pc, #464	@ (adr r3, 800fc38 <__ieee754_pow+0xa30>)
 800fa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6c:	f7f0 fdc4 	bl	80005f8 <__aeabi_dmul>
 800fa70:	a373      	add	r3, pc, #460	@ (adr r3, 800fc40 <__ieee754_pow+0xa38>)
 800fa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa76:	4680      	mov	r8, r0
 800fa78:	4689      	mov	r9, r1
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	4629      	mov	r1, r5
 800fa7e:	f7f0 fdbb 	bl	80005f8 <__aeabi_dmul>
 800fa82:	4602      	mov	r2, r0
 800fa84:	460b      	mov	r3, r1
 800fa86:	4640      	mov	r0, r8
 800fa88:	4649      	mov	r1, r9
 800fa8a:	f7f0 fbff 	bl	800028c <__adddf3>
 800fa8e:	4604      	mov	r4, r0
 800fa90:	460d      	mov	r5, r1
 800fa92:	4602      	mov	r2, r0
 800fa94:	460b      	mov	r3, r1
 800fa96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa9a:	f7f0 fbf7 	bl	800028c <__adddf3>
 800fa9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800faa2:	4680      	mov	r8, r0
 800faa4:	4689      	mov	r9, r1
 800faa6:	f7f0 fbef 	bl	8000288 <__aeabi_dsub>
 800faaa:	4602      	mov	r2, r0
 800faac:	460b      	mov	r3, r1
 800faae:	4620      	mov	r0, r4
 800fab0:	4629      	mov	r1, r5
 800fab2:	f7f0 fbe9 	bl	8000288 <__aeabi_dsub>
 800fab6:	4642      	mov	r2, r8
 800fab8:	4606      	mov	r6, r0
 800faba:	460f      	mov	r7, r1
 800fabc:	464b      	mov	r3, r9
 800fabe:	4640      	mov	r0, r8
 800fac0:	4649      	mov	r1, r9
 800fac2:	f7f0 fd99 	bl	80005f8 <__aeabi_dmul>
 800fac6:	a360      	add	r3, pc, #384	@ (adr r3, 800fc48 <__ieee754_pow+0xa40>)
 800fac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800facc:	4604      	mov	r4, r0
 800face:	460d      	mov	r5, r1
 800fad0:	f7f0 fd92 	bl	80005f8 <__aeabi_dmul>
 800fad4:	a35e      	add	r3, pc, #376	@ (adr r3, 800fc50 <__ieee754_pow+0xa48>)
 800fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fada:	f7f0 fbd5 	bl	8000288 <__aeabi_dsub>
 800fade:	4622      	mov	r2, r4
 800fae0:	462b      	mov	r3, r5
 800fae2:	f7f0 fd89 	bl	80005f8 <__aeabi_dmul>
 800fae6:	a35c      	add	r3, pc, #368	@ (adr r3, 800fc58 <__ieee754_pow+0xa50>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	f7f0 fbce 	bl	800028c <__adddf3>
 800faf0:	4622      	mov	r2, r4
 800faf2:	462b      	mov	r3, r5
 800faf4:	f7f0 fd80 	bl	80005f8 <__aeabi_dmul>
 800faf8:	a359      	add	r3, pc, #356	@ (adr r3, 800fc60 <__ieee754_pow+0xa58>)
 800fafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafe:	f7f0 fbc3 	bl	8000288 <__aeabi_dsub>
 800fb02:	4622      	mov	r2, r4
 800fb04:	462b      	mov	r3, r5
 800fb06:	f7f0 fd77 	bl	80005f8 <__aeabi_dmul>
 800fb0a:	a357      	add	r3, pc, #348	@ (adr r3, 800fc68 <__ieee754_pow+0xa60>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	f7f0 fbbc 	bl	800028c <__adddf3>
 800fb14:	4622      	mov	r2, r4
 800fb16:	462b      	mov	r3, r5
 800fb18:	f7f0 fd6e 	bl	80005f8 <__aeabi_dmul>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	460b      	mov	r3, r1
 800fb20:	4640      	mov	r0, r8
 800fb22:	4649      	mov	r1, r9
 800fb24:	f7f0 fbb0 	bl	8000288 <__aeabi_dsub>
 800fb28:	4604      	mov	r4, r0
 800fb2a:	460d      	mov	r5, r1
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	4640      	mov	r0, r8
 800fb32:	4649      	mov	r1, r9
 800fb34:	f7f0 fd60 	bl	80005f8 <__aeabi_dmul>
 800fb38:	2200      	movs	r2, #0
 800fb3a:	e9cd 0100 	strd	r0, r1, [sp]
 800fb3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fb42:	4620      	mov	r0, r4
 800fb44:	4629      	mov	r1, r5
 800fb46:	f7f0 fb9f 	bl	8000288 <__aeabi_dsub>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb52:	f7f0 fe7b 	bl	800084c <__aeabi_ddiv>
 800fb56:	4632      	mov	r2, r6
 800fb58:	4604      	mov	r4, r0
 800fb5a:	460d      	mov	r5, r1
 800fb5c:	463b      	mov	r3, r7
 800fb5e:	4640      	mov	r0, r8
 800fb60:	4649      	mov	r1, r9
 800fb62:	f7f0 fd49 	bl	80005f8 <__aeabi_dmul>
 800fb66:	4632      	mov	r2, r6
 800fb68:	463b      	mov	r3, r7
 800fb6a:	f7f0 fb8f 	bl	800028c <__adddf3>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	460b      	mov	r3, r1
 800fb72:	4620      	mov	r0, r4
 800fb74:	4629      	mov	r1, r5
 800fb76:	f7f0 fb87 	bl	8000288 <__aeabi_dsub>
 800fb7a:	4642      	mov	r2, r8
 800fb7c:	464b      	mov	r3, r9
 800fb7e:	f7f0 fb83 	bl	8000288 <__aeabi_dsub>
 800fb82:	460b      	mov	r3, r1
 800fb84:	4602      	mov	r2, r0
 800fb86:	493b      	ldr	r1, [pc, #236]	@ (800fc74 <__ieee754_pow+0xa6c>)
 800fb88:	2000      	movs	r0, #0
 800fb8a:	f7f0 fb7d 	bl	8000288 <__aeabi_dsub>
 800fb8e:	ec41 0b10 	vmov	d0, r0, r1
 800fb92:	ee10 3a90 	vmov	r3, s1
 800fb96:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fb9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fb9e:	da30      	bge.n	800fc02 <__ieee754_pow+0x9fa>
 800fba0:	4650      	mov	r0, sl
 800fba2:	f000 fcad 	bl	8010500 <scalbn>
 800fba6:	ec51 0b10 	vmov	r0, r1, d0
 800fbaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbae:	f7ff bbd2 	b.w	800f356 <__ieee754_pow+0x14e>
 800fbb2:	4c31      	ldr	r4, [pc, #196]	@ (800fc78 <__ieee754_pow+0xa70>)
 800fbb4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fbb8:	42a3      	cmp	r3, r4
 800fbba:	d91a      	bls.n	800fbf2 <__ieee754_pow+0x9ea>
 800fbbc:	4b2f      	ldr	r3, [pc, #188]	@ (800fc7c <__ieee754_pow+0xa74>)
 800fbbe:	440b      	add	r3, r1
 800fbc0:	4303      	orrs	r3, r0
 800fbc2:	d009      	beq.n	800fbd8 <__ieee754_pow+0x9d0>
 800fbc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	2300      	movs	r3, #0
 800fbcc:	f7f0 ff86 	bl	8000adc <__aeabi_dcmplt>
 800fbd0:	3800      	subs	r0, #0
 800fbd2:	bf18      	it	ne
 800fbd4:	2001      	movne	r0, #1
 800fbd6:	e42b      	b.n	800f430 <__ieee754_pow+0x228>
 800fbd8:	4642      	mov	r2, r8
 800fbda:	464b      	mov	r3, r9
 800fbdc:	f7f0 fb54 	bl	8000288 <__aeabi_dsub>
 800fbe0:	4632      	mov	r2, r6
 800fbe2:	463b      	mov	r3, r7
 800fbe4:	f7f0 ff8e 	bl	8000b04 <__aeabi_dcmpge>
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	d1eb      	bne.n	800fbc4 <__ieee754_pow+0x9bc>
 800fbec:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800fc8c <__ieee754_pow+0xa84>
 800fbf0:	e6f7      	b.n	800f9e2 <__ieee754_pow+0x7da>
 800fbf2:	469a      	mov	sl, r3
 800fbf4:	4b22      	ldr	r3, [pc, #136]	@ (800fc80 <__ieee754_pow+0xa78>)
 800fbf6:	459a      	cmp	sl, r3
 800fbf8:	f63f aef3 	bhi.w	800f9e2 <__ieee754_pow+0x7da>
 800fbfc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fc00:	e715      	b.n	800fa2e <__ieee754_pow+0x826>
 800fc02:	ec51 0b10 	vmov	r0, r1, d0
 800fc06:	4619      	mov	r1, r3
 800fc08:	e7cf      	b.n	800fbaa <__ieee754_pow+0x9a2>
 800fc0a:	491a      	ldr	r1, [pc, #104]	@ (800fc74 <__ieee754_pow+0xa6c>)
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	f7ff bb18 	b.w	800f242 <__ieee754_pow+0x3a>
 800fc12:	2000      	movs	r0, #0
 800fc14:	2100      	movs	r1, #0
 800fc16:	f7ff bb14 	b.w	800f242 <__ieee754_pow+0x3a>
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	4639      	mov	r1, r7
 800fc1e:	f7ff bb10 	b.w	800f242 <__ieee754_pow+0x3a>
 800fc22:	460c      	mov	r4, r1
 800fc24:	f7ff bb5e 	b.w	800f2e4 <__ieee754_pow+0xdc>
 800fc28:	2400      	movs	r4, #0
 800fc2a:	f7ff bb49 	b.w	800f2c0 <__ieee754_pow+0xb8>
 800fc2e:	bf00      	nop
 800fc30:	00000000 	.word	0x00000000
 800fc34:	3fe62e43 	.word	0x3fe62e43
 800fc38:	fefa39ef 	.word	0xfefa39ef
 800fc3c:	3fe62e42 	.word	0x3fe62e42
 800fc40:	0ca86c39 	.word	0x0ca86c39
 800fc44:	be205c61 	.word	0xbe205c61
 800fc48:	72bea4d0 	.word	0x72bea4d0
 800fc4c:	3e663769 	.word	0x3e663769
 800fc50:	c5d26bf1 	.word	0xc5d26bf1
 800fc54:	3ebbbd41 	.word	0x3ebbbd41
 800fc58:	af25de2c 	.word	0xaf25de2c
 800fc5c:	3f11566a 	.word	0x3f11566a
 800fc60:	16bebd93 	.word	0x16bebd93
 800fc64:	3f66c16c 	.word	0x3f66c16c
 800fc68:	5555553e 	.word	0x5555553e
 800fc6c:	3fc55555 	.word	0x3fc55555
 800fc70:	fff00000 	.word	0xfff00000
 800fc74:	3ff00000 	.word	0x3ff00000
 800fc78:	4090cbff 	.word	0x4090cbff
 800fc7c:	3f6f3400 	.word	0x3f6f3400
 800fc80:	3fe00000 	.word	0x3fe00000
 800fc84:	652b82fe 	.word	0x652b82fe
 800fc88:	3c971547 	.word	0x3c971547
 800fc8c:	4090cc00 	.word	0x4090cc00

0800fc90 <atan>:
 800fc90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc94:	ec55 4b10 	vmov	r4, r5, d0
 800fc98:	4bbf      	ldr	r3, [pc, #764]	@ (800ff98 <atan+0x308>)
 800fc9a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800fc9e:	429e      	cmp	r6, r3
 800fca0:	46ab      	mov	fp, r5
 800fca2:	d918      	bls.n	800fcd6 <atan+0x46>
 800fca4:	4bbd      	ldr	r3, [pc, #756]	@ (800ff9c <atan+0x30c>)
 800fca6:	429e      	cmp	r6, r3
 800fca8:	d801      	bhi.n	800fcae <atan+0x1e>
 800fcaa:	d109      	bne.n	800fcc0 <atan+0x30>
 800fcac:	b144      	cbz	r4, 800fcc0 <atan+0x30>
 800fcae:	4622      	mov	r2, r4
 800fcb0:	462b      	mov	r3, r5
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	f7f0 fae9 	bl	800028c <__adddf3>
 800fcba:	4604      	mov	r4, r0
 800fcbc:	460d      	mov	r5, r1
 800fcbe:	e006      	b.n	800fcce <atan+0x3e>
 800fcc0:	f1bb 0f00 	cmp.w	fp, #0
 800fcc4:	f340 812b 	ble.w	800ff1e <atan+0x28e>
 800fcc8:	a597      	add	r5, pc, #604	@ (adr r5, 800ff28 <atan+0x298>)
 800fcca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fcce:	ec45 4b10 	vmov	d0, r4, r5
 800fcd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd6:	4bb2      	ldr	r3, [pc, #712]	@ (800ffa0 <atan+0x310>)
 800fcd8:	429e      	cmp	r6, r3
 800fcda:	d813      	bhi.n	800fd04 <atan+0x74>
 800fcdc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800fce0:	429e      	cmp	r6, r3
 800fce2:	d80c      	bhi.n	800fcfe <atan+0x6e>
 800fce4:	a392      	add	r3, pc, #584	@ (adr r3, 800ff30 <atan+0x2a0>)
 800fce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcea:	4620      	mov	r0, r4
 800fcec:	4629      	mov	r1, r5
 800fcee:	f7f0 facd 	bl	800028c <__adddf3>
 800fcf2:	4bac      	ldr	r3, [pc, #688]	@ (800ffa4 <atan+0x314>)
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f7f0 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	d1e7      	bne.n	800fcce <atan+0x3e>
 800fcfe:	f04f 3aff 	mov.w	sl, #4294967295
 800fd02:	e029      	b.n	800fd58 <atan+0xc8>
 800fd04:	f7fe fdec 	bl	800e8e0 <fabs>
 800fd08:	4ba7      	ldr	r3, [pc, #668]	@ (800ffa8 <atan+0x318>)
 800fd0a:	429e      	cmp	r6, r3
 800fd0c:	ec55 4b10 	vmov	r4, r5, d0
 800fd10:	f200 80bc 	bhi.w	800fe8c <atan+0x1fc>
 800fd14:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800fd18:	429e      	cmp	r6, r3
 800fd1a:	f200 809e 	bhi.w	800fe5a <atan+0x1ca>
 800fd1e:	4622      	mov	r2, r4
 800fd20:	462b      	mov	r3, r5
 800fd22:	4620      	mov	r0, r4
 800fd24:	4629      	mov	r1, r5
 800fd26:	f7f0 fab1 	bl	800028c <__adddf3>
 800fd2a:	4b9e      	ldr	r3, [pc, #632]	@ (800ffa4 <atan+0x314>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f7f0 faab 	bl	8000288 <__aeabi_dsub>
 800fd32:	2200      	movs	r2, #0
 800fd34:	4606      	mov	r6, r0
 800fd36:	460f      	mov	r7, r1
 800fd38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	4629      	mov	r1, r5
 800fd40:	f7f0 faa4 	bl	800028c <__adddf3>
 800fd44:	4602      	mov	r2, r0
 800fd46:	460b      	mov	r3, r1
 800fd48:	4630      	mov	r0, r6
 800fd4a:	4639      	mov	r1, r7
 800fd4c:	f7f0 fd7e 	bl	800084c <__aeabi_ddiv>
 800fd50:	f04f 0a00 	mov.w	sl, #0
 800fd54:	4604      	mov	r4, r0
 800fd56:	460d      	mov	r5, r1
 800fd58:	4622      	mov	r2, r4
 800fd5a:	462b      	mov	r3, r5
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	4629      	mov	r1, r5
 800fd60:	f7f0 fc4a 	bl	80005f8 <__aeabi_dmul>
 800fd64:	4602      	mov	r2, r0
 800fd66:	460b      	mov	r3, r1
 800fd68:	4680      	mov	r8, r0
 800fd6a:	4689      	mov	r9, r1
 800fd6c:	f7f0 fc44 	bl	80005f8 <__aeabi_dmul>
 800fd70:	a371      	add	r3, pc, #452	@ (adr r3, 800ff38 <atan+0x2a8>)
 800fd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd76:	4606      	mov	r6, r0
 800fd78:	460f      	mov	r7, r1
 800fd7a:	f7f0 fc3d 	bl	80005f8 <__aeabi_dmul>
 800fd7e:	a370      	add	r3, pc, #448	@ (adr r3, 800ff40 <atan+0x2b0>)
 800fd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd84:	f7f0 fa82 	bl	800028c <__adddf3>
 800fd88:	4632      	mov	r2, r6
 800fd8a:	463b      	mov	r3, r7
 800fd8c:	f7f0 fc34 	bl	80005f8 <__aeabi_dmul>
 800fd90:	a36d      	add	r3, pc, #436	@ (adr r3, 800ff48 <atan+0x2b8>)
 800fd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd96:	f7f0 fa79 	bl	800028c <__adddf3>
 800fd9a:	4632      	mov	r2, r6
 800fd9c:	463b      	mov	r3, r7
 800fd9e:	f7f0 fc2b 	bl	80005f8 <__aeabi_dmul>
 800fda2:	a36b      	add	r3, pc, #428	@ (adr r3, 800ff50 <atan+0x2c0>)
 800fda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda8:	f7f0 fa70 	bl	800028c <__adddf3>
 800fdac:	4632      	mov	r2, r6
 800fdae:	463b      	mov	r3, r7
 800fdb0:	f7f0 fc22 	bl	80005f8 <__aeabi_dmul>
 800fdb4:	a368      	add	r3, pc, #416	@ (adr r3, 800ff58 <atan+0x2c8>)
 800fdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdba:	f7f0 fa67 	bl	800028c <__adddf3>
 800fdbe:	4632      	mov	r2, r6
 800fdc0:	463b      	mov	r3, r7
 800fdc2:	f7f0 fc19 	bl	80005f8 <__aeabi_dmul>
 800fdc6:	a366      	add	r3, pc, #408	@ (adr r3, 800ff60 <atan+0x2d0>)
 800fdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdcc:	f7f0 fa5e 	bl	800028c <__adddf3>
 800fdd0:	4642      	mov	r2, r8
 800fdd2:	464b      	mov	r3, r9
 800fdd4:	f7f0 fc10 	bl	80005f8 <__aeabi_dmul>
 800fdd8:	a363      	add	r3, pc, #396	@ (adr r3, 800ff68 <atan+0x2d8>)
 800fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdde:	4680      	mov	r8, r0
 800fde0:	4689      	mov	r9, r1
 800fde2:	4630      	mov	r0, r6
 800fde4:	4639      	mov	r1, r7
 800fde6:	f7f0 fc07 	bl	80005f8 <__aeabi_dmul>
 800fdea:	a361      	add	r3, pc, #388	@ (adr r3, 800ff70 <atan+0x2e0>)
 800fdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf0:	f7f0 fa4a 	bl	8000288 <__aeabi_dsub>
 800fdf4:	4632      	mov	r2, r6
 800fdf6:	463b      	mov	r3, r7
 800fdf8:	f7f0 fbfe 	bl	80005f8 <__aeabi_dmul>
 800fdfc:	a35e      	add	r3, pc, #376	@ (adr r3, 800ff78 <atan+0x2e8>)
 800fdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe02:	f7f0 fa41 	bl	8000288 <__aeabi_dsub>
 800fe06:	4632      	mov	r2, r6
 800fe08:	463b      	mov	r3, r7
 800fe0a:	f7f0 fbf5 	bl	80005f8 <__aeabi_dmul>
 800fe0e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ff80 <atan+0x2f0>)
 800fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe14:	f7f0 fa38 	bl	8000288 <__aeabi_dsub>
 800fe18:	4632      	mov	r2, r6
 800fe1a:	463b      	mov	r3, r7
 800fe1c:	f7f0 fbec 	bl	80005f8 <__aeabi_dmul>
 800fe20:	a359      	add	r3, pc, #356	@ (adr r3, 800ff88 <atan+0x2f8>)
 800fe22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe26:	f7f0 fa2f 	bl	8000288 <__aeabi_dsub>
 800fe2a:	4632      	mov	r2, r6
 800fe2c:	463b      	mov	r3, r7
 800fe2e:	f7f0 fbe3 	bl	80005f8 <__aeabi_dmul>
 800fe32:	4602      	mov	r2, r0
 800fe34:	460b      	mov	r3, r1
 800fe36:	4640      	mov	r0, r8
 800fe38:	4649      	mov	r1, r9
 800fe3a:	f7f0 fa27 	bl	800028c <__adddf3>
 800fe3e:	4622      	mov	r2, r4
 800fe40:	462b      	mov	r3, r5
 800fe42:	f7f0 fbd9 	bl	80005f8 <__aeabi_dmul>
 800fe46:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	460b      	mov	r3, r1
 800fe4e:	d148      	bne.n	800fee2 <atan+0x252>
 800fe50:	4620      	mov	r0, r4
 800fe52:	4629      	mov	r1, r5
 800fe54:	f7f0 fa18 	bl	8000288 <__aeabi_dsub>
 800fe58:	e72f      	b.n	800fcba <atan+0x2a>
 800fe5a:	4b52      	ldr	r3, [pc, #328]	@ (800ffa4 <atan+0x314>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	4620      	mov	r0, r4
 800fe60:	4629      	mov	r1, r5
 800fe62:	f7f0 fa11 	bl	8000288 <__aeabi_dsub>
 800fe66:	4b4f      	ldr	r3, [pc, #316]	@ (800ffa4 <atan+0x314>)
 800fe68:	4606      	mov	r6, r0
 800fe6a:	460f      	mov	r7, r1
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	4620      	mov	r0, r4
 800fe70:	4629      	mov	r1, r5
 800fe72:	f7f0 fa0b 	bl	800028c <__adddf3>
 800fe76:	4602      	mov	r2, r0
 800fe78:	460b      	mov	r3, r1
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	4639      	mov	r1, r7
 800fe7e:	f7f0 fce5 	bl	800084c <__aeabi_ddiv>
 800fe82:	f04f 0a01 	mov.w	sl, #1
 800fe86:	4604      	mov	r4, r0
 800fe88:	460d      	mov	r5, r1
 800fe8a:	e765      	b.n	800fd58 <atan+0xc8>
 800fe8c:	4b47      	ldr	r3, [pc, #284]	@ (800ffac <atan+0x31c>)
 800fe8e:	429e      	cmp	r6, r3
 800fe90:	d21c      	bcs.n	800fecc <atan+0x23c>
 800fe92:	4b47      	ldr	r3, [pc, #284]	@ (800ffb0 <atan+0x320>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	4620      	mov	r0, r4
 800fe98:	4629      	mov	r1, r5
 800fe9a:	f7f0 f9f5 	bl	8000288 <__aeabi_dsub>
 800fe9e:	4b44      	ldr	r3, [pc, #272]	@ (800ffb0 <atan+0x320>)
 800fea0:	4606      	mov	r6, r0
 800fea2:	460f      	mov	r7, r1
 800fea4:	2200      	movs	r2, #0
 800fea6:	4620      	mov	r0, r4
 800fea8:	4629      	mov	r1, r5
 800feaa:	f7f0 fba5 	bl	80005f8 <__aeabi_dmul>
 800feae:	4b3d      	ldr	r3, [pc, #244]	@ (800ffa4 <atan+0x314>)
 800feb0:	2200      	movs	r2, #0
 800feb2:	f7f0 f9eb 	bl	800028c <__adddf3>
 800feb6:	4602      	mov	r2, r0
 800feb8:	460b      	mov	r3, r1
 800feba:	4630      	mov	r0, r6
 800febc:	4639      	mov	r1, r7
 800febe:	f7f0 fcc5 	bl	800084c <__aeabi_ddiv>
 800fec2:	f04f 0a02 	mov.w	sl, #2
 800fec6:	4604      	mov	r4, r0
 800fec8:	460d      	mov	r5, r1
 800feca:	e745      	b.n	800fd58 <atan+0xc8>
 800fecc:	4622      	mov	r2, r4
 800fece:	462b      	mov	r3, r5
 800fed0:	4938      	ldr	r1, [pc, #224]	@ (800ffb4 <atan+0x324>)
 800fed2:	2000      	movs	r0, #0
 800fed4:	f7f0 fcba 	bl	800084c <__aeabi_ddiv>
 800fed8:	f04f 0a03 	mov.w	sl, #3
 800fedc:	4604      	mov	r4, r0
 800fede:	460d      	mov	r5, r1
 800fee0:	e73a      	b.n	800fd58 <atan+0xc8>
 800fee2:	4b35      	ldr	r3, [pc, #212]	@ (800ffb8 <atan+0x328>)
 800fee4:	4e35      	ldr	r6, [pc, #212]	@ (800ffbc <atan+0x32c>)
 800fee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800feea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feee:	f7f0 f9cb 	bl	8000288 <__aeabi_dsub>
 800fef2:	4622      	mov	r2, r4
 800fef4:	462b      	mov	r3, r5
 800fef6:	f7f0 f9c7 	bl	8000288 <__aeabi_dsub>
 800fefa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fefe:	4602      	mov	r2, r0
 800ff00:	460b      	mov	r3, r1
 800ff02:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ff06:	f7f0 f9bf 	bl	8000288 <__aeabi_dsub>
 800ff0a:	f1bb 0f00 	cmp.w	fp, #0
 800ff0e:	4604      	mov	r4, r0
 800ff10:	460d      	mov	r5, r1
 800ff12:	f6bf aedc 	bge.w	800fcce <atan+0x3e>
 800ff16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff1a:	461d      	mov	r5, r3
 800ff1c:	e6d7      	b.n	800fcce <atan+0x3e>
 800ff1e:	a51c      	add	r5, pc, #112	@ (adr r5, 800ff90 <atan+0x300>)
 800ff20:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ff24:	e6d3      	b.n	800fcce <atan+0x3e>
 800ff26:	bf00      	nop
 800ff28:	54442d18 	.word	0x54442d18
 800ff2c:	3ff921fb 	.word	0x3ff921fb
 800ff30:	8800759c 	.word	0x8800759c
 800ff34:	7e37e43c 	.word	0x7e37e43c
 800ff38:	e322da11 	.word	0xe322da11
 800ff3c:	3f90ad3a 	.word	0x3f90ad3a
 800ff40:	24760deb 	.word	0x24760deb
 800ff44:	3fa97b4b 	.word	0x3fa97b4b
 800ff48:	a0d03d51 	.word	0xa0d03d51
 800ff4c:	3fb10d66 	.word	0x3fb10d66
 800ff50:	c54c206e 	.word	0xc54c206e
 800ff54:	3fb745cd 	.word	0x3fb745cd
 800ff58:	920083ff 	.word	0x920083ff
 800ff5c:	3fc24924 	.word	0x3fc24924
 800ff60:	5555550d 	.word	0x5555550d
 800ff64:	3fd55555 	.word	0x3fd55555
 800ff68:	2c6a6c2f 	.word	0x2c6a6c2f
 800ff6c:	bfa2b444 	.word	0xbfa2b444
 800ff70:	52defd9a 	.word	0x52defd9a
 800ff74:	3fadde2d 	.word	0x3fadde2d
 800ff78:	af749a6d 	.word	0xaf749a6d
 800ff7c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ff80:	fe231671 	.word	0xfe231671
 800ff84:	3fbc71c6 	.word	0x3fbc71c6
 800ff88:	9998ebc4 	.word	0x9998ebc4
 800ff8c:	3fc99999 	.word	0x3fc99999
 800ff90:	54442d18 	.word	0x54442d18
 800ff94:	bff921fb 	.word	0xbff921fb
 800ff98:	440fffff 	.word	0x440fffff
 800ff9c:	7ff00000 	.word	0x7ff00000
 800ffa0:	3fdbffff 	.word	0x3fdbffff
 800ffa4:	3ff00000 	.word	0x3ff00000
 800ffa8:	3ff2ffff 	.word	0x3ff2ffff
 800ffac:	40038000 	.word	0x40038000
 800ffb0:	3ff80000 	.word	0x3ff80000
 800ffb4:	bff00000 	.word	0xbff00000
 800ffb8:	080111a8 	.word	0x080111a8
 800ffbc:	080111c8 	.word	0x080111c8

0800ffc0 <__kernel_cosf>:
 800ffc0:	ee10 3a10 	vmov	r3, s0
 800ffc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ffc8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ffcc:	eef0 6a40 	vmov.f32	s13, s0
 800ffd0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ffd4:	d204      	bcs.n	800ffe0 <__kernel_cosf+0x20>
 800ffd6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ffda:	ee17 2a90 	vmov	r2, s15
 800ffde:	b342      	cbz	r2, 8010032 <__kernel_cosf+0x72>
 800ffe0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ffe4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8010050 <__kernel_cosf+0x90>
 800ffe8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8010054 <__kernel_cosf+0x94>
 800ffec:	4a1a      	ldr	r2, [pc, #104]	@ (8010058 <__kernel_cosf+0x98>)
 800ffee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fff2:	4293      	cmp	r3, r2
 800fff4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801005c <__kernel_cosf+0x9c>
 800fff8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fffc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8010060 <__kernel_cosf+0xa0>
 8010000:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010004:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8010064 <__kernel_cosf+0xa4>
 8010008:	eee6 7a07 	vfma.f32	s15, s12, s14
 801000c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8010068 <__kernel_cosf+0xa8>
 8010010:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010014:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010018:	ee26 6a07 	vmul.f32	s12, s12, s14
 801001c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010020:	eee7 0a06 	vfma.f32	s1, s14, s12
 8010024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010028:	d804      	bhi.n	8010034 <__kernel_cosf+0x74>
 801002a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801002e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010032:	4770      	bx	lr
 8010034:	4a0d      	ldr	r2, [pc, #52]	@ (801006c <__kernel_cosf+0xac>)
 8010036:	4293      	cmp	r3, r2
 8010038:	bf9a      	itte	ls
 801003a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801003e:	ee07 3a10 	vmovls	s14, r3
 8010042:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8010046:	ee30 0a47 	vsub.f32	s0, s0, s14
 801004a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801004e:	e7ec      	b.n	801002a <__kernel_cosf+0x6a>
 8010050:	ad47d74e 	.word	0xad47d74e
 8010054:	310f74f6 	.word	0x310f74f6
 8010058:	3e999999 	.word	0x3e999999
 801005c:	b493f27c 	.word	0xb493f27c
 8010060:	37d00d01 	.word	0x37d00d01
 8010064:	bab60b61 	.word	0xbab60b61
 8010068:	3d2aaaab 	.word	0x3d2aaaab
 801006c:	3f480000 	.word	0x3f480000

08010070 <__kernel_sinf>:
 8010070:	ee10 3a10 	vmov	r3, s0
 8010074:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010078:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801007c:	d204      	bcs.n	8010088 <__kernel_sinf+0x18>
 801007e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010082:	ee17 3a90 	vmov	r3, s15
 8010086:	b35b      	cbz	r3, 80100e0 <__kernel_sinf+0x70>
 8010088:	ee20 7a00 	vmul.f32	s14, s0, s0
 801008c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80100e4 <__kernel_sinf+0x74>
 8010090:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80100e8 <__kernel_sinf+0x78>
 8010094:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010098:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80100ec <__kernel_sinf+0x7c>
 801009c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80100a0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80100f0 <__kernel_sinf+0x80>
 80100a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80100a8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80100f4 <__kernel_sinf+0x84>
 80100ac:	ee60 6a07 	vmul.f32	s13, s0, s14
 80100b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80100b4:	b930      	cbnz	r0, 80100c4 <__kernel_sinf+0x54>
 80100b6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80100f8 <__kernel_sinf+0x88>
 80100ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 80100be:	eea6 0a26 	vfma.f32	s0, s12, s13
 80100c2:	4770      	bx	lr
 80100c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80100c8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80100cc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80100d0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80100d4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80100fc <__kernel_sinf+0x8c>
 80100d8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80100dc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	2f2ec9d3 	.word	0x2f2ec9d3
 80100e8:	b2d72f34 	.word	0xb2d72f34
 80100ec:	3638ef1b 	.word	0x3638ef1b
 80100f0:	b9500d01 	.word	0xb9500d01
 80100f4:	3c088889 	.word	0x3c088889
 80100f8:	be2aaaab 	.word	0xbe2aaaab
 80100fc:	3e2aaaab 	.word	0x3e2aaaab

08010100 <__ieee754_expf>:
 8010100:	ee10 2a10 	vmov	r2, s0
 8010104:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8010108:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801010c:	d902      	bls.n	8010114 <__ieee754_expf+0x14>
 801010e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010112:	4770      	bx	lr
 8010114:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8010118:	d106      	bne.n	8010128 <__ieee754_expf+0x28>
 801011a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8010254 <__ieee754_expf+0x154>
 801011e:	2900      	cmp	r1, #0
 8010120:	bf18      	it	ne
 8010122:	eeb0 0a67 	vmovne.f32	s0, s15
 8010126:	4770      	bx	lr
 8010128:	484b      	ldr	r0, [pc, #300]	@ (8010258 <__ieee754_expf+0x158>)
 801012a:	4282      	cmp	r2, r0
 801012c:	dd02      	ble.n	8010134 <__ieee754_expf+0x34>
 801012e:	2000      	movs	r0, #0
 8010130:	f000 bb28 	b.w	8010784 <__math_oflowf>
 8010134:	2a00      	cmp	r2, #0
 8010136:	da05      	bge.n	8010144 <__ieee754_expf+0x44>
 8010138:	4a48      	ldr	r2, [pc, #288]	@ (801025c <__ieee754_expf+0x15c>)
 801013a:	4293      	cmp	r3, r2
 801013c:	d902      	bls.n	8010144 <__ieee754_expf+0x44>
 801013e:	2000      	movs	r0, #0
 8010140:	f000 bb1a 	b.w	8010778 <__math_uflowf>
 8010144:	4a46      	ldr	r2, [pc, #280]	@ (8010260 <__ieee754_expf+0x160>)
 8010146:	4293      	cmp	r3, r2
 8010148:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801014c:	d952      	bls.n	80101f4 <__ieee754_expf+0xf4>
 801014e:	4a45      	ldr	r2, [pc, #276]	@ (8010264 <__ieee754_expf+0x164>)
 8010150:	4293      	cmp	r3, r2
 8010152:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8010156:	d834      	bhi.n	80101c2 <__ieee754_expf+0xc2>
 8010158:	4b43      	ldr	r3, [pc, #268]	@ (8010268 <__ieee754_expf+0x168>)
 801015a:	4413      	add	r3, r2
 801015c:	ed93 7a00 	vldr	s14, [r3]
 8010160:	4b42      	ldr	r3, [pc, #264]	@ (801026c <__ieee754_expf+0x16c>)
 8010162:	4413      	add	r3, r2
 8010164:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010168:	f1c1 0201 	rsb	r2, r1, #1
 801016c:	edd3 7a00 	vldr	s15, [r3]
 8010170:	1a52      	subs	r2, r2, r1
 8010172:	ee37 0a67 	vsub.f32	s0, s14, s15
 8010176:	ee20 6a00 	vmul.f32	s12, s0, s0
 801017a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8010270 <__ieee754_expf+0x170>
 801017e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010274 <__ieee754_expf+0x174>
 8010182:	eee6 6a05 	vfma.f32	s13, s12, s10
 8010186:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8010278 <__ieee754_expf+0x178>
 801018a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801018e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801027c <__ieee754_expf+0x17c>
 8010192:	eee5 6a06 	vfma.f32	s13, s10, s12
 8010196:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8010280 <__ieee754_expf+0x180>
 801019a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801019e:	eef0 6a40 	vmov.f32	s13, s0
 80101a2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80101a6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80101aa:	ee20 5a26 	vmul.f32	s10, s0, s13
 80101ae:	bb92      	cbnz	r2, 8010216 <__ieee754_expf+0x116>
 80101b0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80101b4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80101b8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80101bc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80101c0:	4770      	bx	lr
 80101c2:	4b30      	ldr	r3, [pc, #192]	@ (8010284 <__ieee754_expf+0x184>)
 80101c4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8010288 <__ieee754_expf+0x188>
 80101c8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801028c <__ieee754_expf+0x18c>
 80101cc:	4413      	add	r3, r2
 80101ce:	edd3 7a00 	vldr	s15, [r3]
 80101d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80101d6:	eeb0 7a40 	vmov.f32	s14, s0
 80101da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101de:	ee17 2a90 	vmov	r2, s15
 80101e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101e6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80101ea:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8010290 <__ieee754_expf+0x190>
 80101ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80101f2:	e7be      	b.n	8010172 <__ieee754_expf+0x72>
 80101f4:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 80101f8:	d20b      	bcs.n	8010212 <__ieee754_expf+0x112>
 80101fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8010294 <__ieee754_expf+0x194>
 80101fe:	ee70 6a26 	vadd.f32	s13, s0, s13
 8010202:	eef4 6ae5 	vcmpe.f32	s13, s11
 8010206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801020a:	dd02      	ble.n	8010212 <__ieee754_expf+0x112>
 801020c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8010210:	4770      	bx	lr
 8010212:	2200      	movs	r2, #0
 8010214:	e7af      	b.n	8010176 <__ieee754_expf+0x76>
 8010216:	ee36 6a66 	vsub.f32	s12, s12, s13
 801021a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801021e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8010222:	bfb8      	it	lt
 8010224:	3264      	addlt	r2, #100	@ 0x64
 8010226:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801022a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801022e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8010232:	ee17 3a90 	vmov	r3, s15
 8010236:	bfab      	itete	ge
 8010238:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801023c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8010240:	ee00 3a10 	vmovge	s0, r3
 8010244:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8010298 <__ieee754_expf+0x198>
 8010248:	bfbc      	itt	lt
 801024a:	ee00 3a10 	vmovlt	s0, r3
 801024e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8010252:	4770      	bx	lr
 8010254:	00000000 	.word	0x00000000
 8010258:	42b17217 	.word	0x42b17217
 801025c:	42cff1b5 	.word	0x42cff1b5
 8010260:	3eb17218 	.word	0x3eb17218
 8010264:	3f851591 	.word	0x3f851591
 8010268:	080111f0 	.word	0x080111f0
 801026c:	080111e8 	.word	0x080111e8
 8010270:	3331bb4c 	.word	0x3331bb4c
 8010274:	b5ddea0e 	.word	0xb5ddea0e
 8010278:	388ab355 	.word	0x388ab355
 801027c:	bb360b61 	.word	0xbb360b61
 8010280:	3e2aaaab 	.word	0x3e2aaaab
 8010284:	080111f8 	.word	0x080111f8
 8010288:	3fb8aa3b 	.word	0x3fb8aa3b
 801028c:	3f317180 	.word	0x3f317180
 8010290:	3717f7d1 	.word	0x3717f7d1
 8010294:	7149f2ca 	.word	0x7149f2ca
 8010298:	0d800000 	.word	0x0d800000

0801029c <__ieee754_rem_pio2f>:
 801029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801029e:	ee10 6a10 	vmov	r6, s0
 80102a2:	4b88      	ldr	r3, [pc, #544]	@ (80104c4 <__ieee754_rem_pio2f+0x228>)
 80102a4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80102a8:	429d      	cmp	r5, r3
 80102aa:	b087      	sub	sp, #28
 80102ac:	4604      	mov	r4, r0
 80102ae:	d805      	bhi.n	80102bc <__ieee754_rem_pio2f+0x20>
 80102b0:	2300      	movs	r3, #0
 80102b2:	ed80 0a00 	vstr	s0, [r0]
 80102b6:	6043      	str	r3, [r0, #4]
 80102b8:	2000      	movs	r0, #0
 80102ba:	e022      	b.n	8010302 <__ieee754_rem_pio2f+0x66>
 80102bc:	4b82      	ldr	r3, [pc, #520]	@ (80104c8 <__ieee754_rem_pio2f+0x22c>)
 80102be:	429d      	cmp	r5, r3
 80102c0:	d83a      	bhi.n	8010338 <__ieee754_rem_pio2f+0x9c>
 80102c2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80102c6:	2e00      	cmp	r6, #0
 80102c8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80104cc <__ieee754_rem_pio2f+0x230>
 80102cc:	4a80      	ldr	r2, [pc, #512]	@ (80104d0 <__ieee754_rem_pio2f+0x234>)
 80102ce:	f023 030f 	bic.w	r3, r3, #15
 80102d2:	dd18      	ble.n	8010306 <__ieee754_rem_pio2f+0x6a>
 80102d4:	4293      	cmp	r3, r2
 80102d6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80102da:	bf09      	itett	eq
 80102dc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80104d4 <__ieee754_rem_pio2f+0x238>
 80102e0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80104d8 <__ieee754_rem_pio2f+0x23c>
 80102e4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80104dc <__ieee754_rem_pio2f+0x240>
 80102e8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80102ec:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80102f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102f4:	ed80 7a00 	vstr	s14, [r0]
 80102f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80102fc:	edc0 7a01 	vstr	s15, [r0, #4]
 8010300:	2001      	movs	r0, #1
 8010302:	b007      	add	sp, #28
 8010304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010306:	4293      	cmp	r3, r2
 8010308:	ee70 7a07 	vadd.f32	s15, s0, s14
 801030c:	bf09      	itett	eq
 801030e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80104d4 <__ieee754_rem_pio2f+0x238>
 8010312:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80104d8 <__ieee754_rem_pio2f+0x23c>
 8010316:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80104dc <__ieee754_rem_pio2f+0x240>
 801031a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801031e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010322:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010326:	ed80 7a00 	vstr	s14, [r0]
 801032a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801032e:	edc0 7a01 	vstr	s15, [r0, #4]
 8010332:	f04f 30ff 	mov.w	r0, #4294967295
 8010336:	e7e4      	b.n	8010302 <__ieee754_rem_pio2f+0x66>
 8010338:	4b69      	ldr	r3, [pc, #420]	@ (80104e0 <__ieee754_rem_pio2f+0x244>)
 801033a:	429d      	cmp	r5, r3
 801033c:	d873      	bhi.n	8010426 <__ieee754_rem_pio2f+0x18a>
 801033e:	f7fe fb51 	bl	800e9e4 <fabsf>
 8010342:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80104e4 <__ieee754_rem_pio2f+0x248>
 8010346:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801034a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801034e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010352:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010356:	ee17 0a90 	vmov	r0, s15
 801035a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80104cc <__ieee754_rem_pio2f+0x230>
 801035e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010362:	281f      	cmp	r0, #31
 8010364:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80104d8 <__ieee754_rem_pio2f+0x23c>
 8010368:	ee67 7a27 	vmul.f32	s15, s14, s15
 801036c:	eeb1 6a47 	vneg.f32	s12, s14
 8010370:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010374:	ee16 1a90 	vmov	r1, s13
 8010378:	dc09      	bgt.n	801038e <__ieee754_rem_pio2f+0xf2>
 801037a:	4a5b      	ldr	r2, [pc, #364]	@ (80104e8 <__ieee754_rem_pio2f+0x24c>)
 801037c:	1e47      	subs	r7, r0, #1
 801037e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010382:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8010386:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801038a:	4293      	cmp	r3, r2
 801038c:	d107      	bne.n	801039e <__ieee754_rem_pio2f+0x102>
 801038e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8010392:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010396:	2a08      	cmp	r2, #8
 8010398:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801039c:	dc14      	bgt.n	80103c8 <__ieee754_rem_pio2f+0x12c>
 801039e:	6021      	str	r1, [r4, #0]
 80103a0:	ed94 7a00 	vldr	s14, [r4]
 80103a4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80103a8:	2e00      	cmp	r6, #0
 80103aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80103ae:	ed84 0a01 	vstr	s0, [r4, #4]
 80103b2:	daa6      	bge.n	8010302 <__ieee754_rem_pio2f+0x66>
 80103b4:	eeb1 7a47 	vneg.f32	s14, s14
 80103b8:	eeb1 0a40 	vneg.f32	s0, s0
 80103bc:	ed84 7a00 	vstr	s14, [r4]
 80103c0:	ed84 0a01 	vstr	s0, [r4, #4]
 80103c4:	4240      	negs	r0, r0
 80103c6:	e79c      	b.n	8010302 <__ieee754_rem_pio2f+0x66>
 80103c8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80104d4 <__ieee754_rem_pio2f+0x238>
 80103cc:	eef0 6a40 	vmov.f32	s13, s0
 80103d0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80103d4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80103d8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80103dc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80104dc <__ieee754_rem_pio2f+0x240>
 80103e0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80103e4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80103e8:	ee15 2a90 	vmov	r2, s11
 80103ec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80103f0:	1a5b      	subs	r3, r3, r1
 80103f2:	2b19      	cmp	r3, #25
 80103f4:	dc04      	bgt.n	8010400 <__ieee754_rem_pio2f+0x164>
 80103f6:	edc4 5a00 	vstr	s11, [r4]
 80103fa:	eeb0 0a66 	vmov.f32	s0, s13
 80103fe:	e7cf      	b.n	80103a0 <__ieee754_rem_pio2f+0x104>
 8010400:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80104ec <__ieee754_rem_pio2f+0x250>
 8010404:	eeb0 0a66 	vmov.f32	s0, s13
 8010408:	eea6 0a25 	vfma.f32	s0, s12, s11
 801040c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010410:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80104f0 <__ieee754_rem_pio2f+0x254>
 8010414:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010418:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801041c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010420:	ed84 7a00 	vstr	s14, [r4]
 8010424:	e7bc      	b.n	80103a0 <__ieee754_rem_pio2f+0x104>
 8010426:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801042a:	d306      	bcc.n	801043a <__ieee754_rem_pio2f+0x19e>
 801042c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010430:	edc0 7a01 	vstr	s15, [r0, #4]
 8010434:	edc0 7a00 	vstr	s15, [r0]
 8010438:	e73e      	b.n	80102b8 <__ieee754_rem_pio2f+0x1c>
 801043a:	15ea      	asrs	r2, r5, #23
 801043c:	3a86      	subs	r2, #134	@ 0x86
 801043e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010442:	ee07 3a90 	vmov	s15, r3
 8010446:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801044a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80104f4 <__ieee754_rem_pio2f+0x258>
 801044e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010456:	ed8d 7a03 	vstr	s14, [sp, #12]
 801045a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801045e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010462:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801046a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801046e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010472:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047a:	edcd 7a05 	vstr	s15, [sp, #20]
 801047e:	d11e      	bne.n	80104be <__ieee754_rem_pio2f+0x222>
 8010480:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010488:	bf0c      	ite	eq
 801048a:	2301      	moveq	r3, #1
 801048c:	2302      	movne	r3, #2
 801048e:	491a      	ldr	r1, [pc, #104]	@ (80104f8 <__ieee754_rem_pio2f+0x25c>)
 8010490:	9101      	str	r1, [sp, #4]
 8010492:	2102      	movs	r1, #2
 8010494:	9100      	str	r1, [sp, #0]
 8010496:	a803      	add	r0, sp, #12
 8010498:	4621      	mov	r1, r4
 801049a:	f000 f979 	bl	8010790 <__kernel_rem_pio2f>
 801049e:	2e00      	cmp	r6, #0
 80104a0:	f6bf af2f 	bge.w	8010302 <__ieee754_rem_pio2f+0x66>
 80104a4:	edd4 7a00 	vldr	s15, [r4]
 80104a8:	eef1 7a67 	vneg.f32	s15, s15
 80104ac:	edc4 7a00 	vstr	s15, [r4]
 80104b0:	edd4 7a01 	vldr	s15, [r4, #4]
 80104b4:	eef1 7a67 	vneg.f32	s15, s15
 80104b8:	edc4 7a01 	vstr	s15, [r4, #4]
 80104bc:	e782      	b.n	80103c4 <__ieee754_rem_pio2f+0x128>
 80104be:	2303      	movs	r3, #3
 80104c0:	e7e5      	b.n	801048e <__ieee754_rem_pio2f+0x1f2>
 80104c2:	bf00      	nop
 80104c4:	3f490fd8 	.word	0x3f490fd8
 80104c8:	4016cbe3 	.word	0x4016cbe3
 80104cc:	3fc90f80 	.word	0x3fc90f80
 80104d0:	3fc90fd0 	.word	0x3fc90fd0
 80104d4:	37354400 	.word	0x37354400
 80104d8:	37354443 	.word	0x37354443
 80104dc:	2e85a308 	.word	0x2e85a308
 80104e0:	43490f80 	.word	0x43490f80
 80104e4:	3f22f984 	.word	0x3f22f984
 80104e8:	08011200 	.word	0x08011200
 80104ec:	2e85a300 	.word	0x2e85a300
 80104f0:	248d3132 	.word	0x248d3132
 80104f4:	43800000 	.word	0x43800000
 80104f8:	08011280 	.word	0x08011280
 80104fc:	00000000 	.word	0x00000000

08010500 <scalbn>:
 8010500:	b570      	push	{r4, r5, r6, lr}
 8010502:	ec55 4b10 	vmov	r4, r5, d0
 8010506:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801050a:	4606      	mov	r6, r0
 801050c:	462b      	mov	r3, r5
 801050e:	b991      	cbnz	r1, 8010536 <scalbn+0x36>
 8010510:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010514:	4323      	orrs	r3, r4
 8010516:	d03d      	beq.n	8010594 <scalbn+0x94>
 8010518:	4b35      	ldr	r3, [pc, #212]	@ (80105f0 <scalbn+0xf0>)
 801051a:	4620      	mov	r0, r4
 801051c:	4629      	mov	r1, r5
 801051e:	2200      	movs	r2, #0
 8010520:	f7f0 f86a 	bl	80005f8 <__aeabi_dmul>
 8010524:	4b33      	ldr	r3, [pc, #204]	@ (80105f4 <scalbn+0xf4>)
 8010526:	429e      	cmp	r6, r3
 8010528:	4604      	mov	r4, r0
 801052a:	460d      	mov	r5, r1
 801052c:	da0f      	bge.n	801054e <scalbn+0x4e>
 801052e:	a328      	add	r3, pc, #160	@ (adr r3, 80105d0 <scalbn+0xd0>)
 8010530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010534:	e01e      	b.n	8010574 <scalbn+0x74>
 8010536:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801053a:	4291      	cmp	r1, r2
 801053c:	d10b      	bne.n	8010556 <scalbn+0x56>
 801053e:	4622      	mov	r2, r4
 8010540:	4620      	mov	r0, r4
 8010542:	4629      	mov	r1, r5
 8010544:	f7ef fea2 	bl	800028c <__adddf3>
 8010548:	4604      	mov	r4, r0
 801054a:	460d      	mov	r5, r1
 801054c:	e022      	b.n	8010594 <scalbn+0x94>
 801054e:	460b      	mov	r3, r1
 8010550:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010554:	3936      	subs	r1, #54	@ 0x36
 8010556:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801055a:	4296      	cmp	r6, r2
 801055c:	dd0d      	ble.n	801057a <scalbn+0x7a>
 801055e:	2d00      	cmp	r5, #0
 8010560:	a11d      	add	r1, pc, #116	@ (adr r1, 80105d8 <scalbn+0xd8>)
 8010562:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010566:	da02      	bge.n	801056e <scalbn+0x6e>
 8010568:	a11d      	add	r1, pc, #116	@ (adr r1, 80105e0 <scalbn+0xe0>)
 801056a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801056e:	a31a      	add	r3, pc, #104	@ (adr r3, 80105d8 <scalbn+0xd8>)
 8010570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010574:	f7f0 f840 	bl	80005f8 <__aeabi_dmul>
 8010578:	e7e6      	b.n	8010548 <scalbn+0x48>
 801057a:	1872      	adds	r2, r6, r1
 801057c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010580:	428a      	cmp	r2, r1
 8010582:	dcec      	bgt.n	801055e <scalbn+0x5e>
 8010584:	2a00      	cmp	r2, #0
 8010586:	dd08      	ble.n	801059a <scalbn+0x9a>
 8010588:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801058c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010590:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010594:	ec45 4b10 	vmov	d0, r4, r5
 8010598:	bd70      	pop	{r4, r5, r6, pc}
 801059a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801059e:	da08      	bge.n	80105b2 <scalbn+0xb2>
 80105a0:	2d00      	cmp	r5, #0
 80105a2:	a10b      	add	r1, pc, #44	@ (adr r1, 80105d0 <scalbn+0xd0>)
 80105a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105a8:	dac1      	bge.n	801052e <scalbn+0x2e>
 80105aa:	a10f      	add	r1, pc, #60	@ (adr r1, 80105e8 <scalbn+0xe8>)
 80105ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105b0:	e7bd      	b.n	801052e <scalbn+0x2e>
 80105b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80105b6:	3236      	adds	r2, #54	@ 0x36
 80105b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80105bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80105c0:	4620      	mov	r0, r4
 80105c2:	4b0d      	ldr	r3, [pc, #52]	@ (80105f8 <scalbn+0xf8>)
 80105c4:	4629      	mov	r1, r5
 80105c6:	2200      	movs	r2, #0
 80105c8:	e7d4      	b.n	8010574 <scalbn+0x74>
 80105ca:	bf00      	nop
 80105cc:	f3af 8000 	nop.w
 80105d0:	c2f8f359 	.word	0xc2f8f359
 80105d4:	01a56e1f 	.word	0x01a56e1f
 80105d8:	8800759c 	.word	0x8800759c
 80105dc:	7e37e43c 	.word	0x7e37e43c
 80105e0:	8800759c 	.word	0x8800759c
 80105e4:	fe37e43c 	.word	0xfe37e43c
 80105e8:	c2f8f359 	.word	0xc2f8f359
 80105ec:	81a56e1f 	.word	0x81a56e1f
 80105f0:	43500000 	.word	0x43500000
 80105f4:	ffff3cb0 	.word	0xffff3cb0
 80105f8:	3c900000 	.word	0x3c900000

080105fc <with_errno>:
 80105fc:	b510      	push	{r4, lr}
 80105fe:	ed2d 8b02 	vpush	{d8}
 8010602:	eeb0 8a40 	vmov.f32	s16, s0
 8010606:	eef0 8a60 	vmov.f32	s17, s1
 801060a:	4604      	mov	r4, r0
 801060c:	f7fc f810 	bl	800c630 <__errno>
 8010610:	eeb0 0a48 	vmov.f32	s0, s16
 8010614:	eef0 0a68 	vmov.f32	s1, s17
 8010618:	ecbd 8b02 	vpop	{d8}
 801061c:	6004      	str	r4, [r0, #0]
 801061e:	bd10      	pop	{r4, pc}

08010620 <xflow>:
 8010620:	4603      	mov	r3, r0
 8010622:	b507      	push	{r0, r1, r2, lr}
 8010624:	ec51 0b10 	vmov	r0, r1, d0
 8010628:	b183      	cbz	r3, 801064c <xflow+0x2c>
 801062a:	4602      	mov	r2, r0
 801062c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010630:	e9cd 2300 	strd	r2, r3, [sp]
 8010634:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010638:	f7ef ffde 	bl	80005f8 <__aeabi_dmul>
 801063c:	ec41 0b10 	vmov	d0, r0, r1
 8010640:	2022      	movs	r0, #34	@ 0x22
 8010642:	b003      	add	sp, #12
 8010644:	f85d eb04 	ldr.w	lr, [sp], #4
 8010648:	f7ff bfd8 	b.w	80105fc <with_errno>
 801064c:	4602      	mov	r2, r0
 801064e:	460b      	mov	r3, r1
 8010650:	e7ee      	b.n	8010630 <xflow+0x10>
 8010652:	0000      	movs	r0, r0
 8010654:	0000      	movs	r0, r0
	...

08010658 <__math_uflow>:
 8010658:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010660 <__math_uflow+0x8>
 801065c:	f7ff bfe0 	b.w	8010620 <xflow>
 8010660:	00000000 	.word	0x00000000
 8010664:	10000000 	.word	0x10000000

08010668 <__math_oflow>:
 8010668:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010670 <__math_oflow+0x8>
 801066c:	f7ff bfd8 	b.w	8010620 <xflow>
 8010670:	00000000 	.word	0x00000000
 8010674:	70000000 	.word	0x70000000

08010678 <scalbnf>:
 8010678:	ee10 3a10 	vmov	r3, s0
 801067c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010680:	d02b      	beq.n	80106da <scalbnf+0x62>
 8010682:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010686:	d302      	bcc.n	801068e <scalbnf+0x16>
 8010688:	ee30 0a00 	vadd.f32	s0, s0, s0
 801068c:	4770      	bx	lr
 801068e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010692:	d123      	bne.n	80106dc <scalbnf+0x64>
 8010694:	4b24      	ldr	r3, [pc, #144]	@ (8010728 <scalbnf+0xb0>)
 8010696:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801072c <scalbnf+0xb4>
 801069a:	4298      	cmp	r0, r3
 801069c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80106a0:	db17      	blt.n	80106d2 <scalbnf+0x5a>
 80106a2:	ee10 3a10 	vmov	r3, s0
 80106a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80106aa:	3a19      	subs	r2, #25
 80106ac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80106b0:	4288      	cmp	r0, r1
 80106b2:	dd15      	ble.n	80106e0 <scalbnf+0x68>
 80106b4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010730 <scalbnf+0xb8>
 80106b8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010734 <scalbnf+0xbc>
 80106bc:	ee10 3a10 	vmov	r3, s0
 80106c0:	eeb0 7a67 	vmov.f32	s14, s15
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	bfb8      	it	lt
 80106c8:	eef0 7a66 	vmovlt.f32	s15, s13
 80106cc:	ee27 0a87 	vmul.f32	s0, s15, s14
 80106d0:	4770      	bx	lr
 80106d2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010738 <scalbnf+0xc0>
 80106d6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80106da:	4770      	bx	lr
 80106dc:	0dd2      	lsrs	r2, r2, #23
 80106de:	e7e5      	b.n	80106ac <scalbnf+0x34>
 80106e0:	4410      	add	r0, r2
 80106e2:	28fe      	cmp	r0, #254	@ 0xfe
 80106e4:	dce6      	bgt.n	80106b4 <scalbnf+0x3c>
 80106e6:	2800      	cmp	r0, #0
 80106e8:	dd06      	ble.n	80106f8 <scalbnf+0x80>
 80106ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80106ee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80106f2:	ee00 3a10 	vmov	s0, r3
 80106f6:	4770      	bx	lr
 80106f8:	f110 0f16 	cmn.w	r0, #22
 80106fc:	da09      	bge.n	8010712 <scalbnf+0x9a>
 80106fe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010738 <scalbnf+0xc0>
 8010702:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801073c <scalbnf+0xc4>
 8010706:	ee10 3a10 	vmov	r3, s0
 801070a:	eeb0 7a67 	vmov.f32	s14, s15
 801070e:	2b00      	cmp	r3, #0
 8010710:	e7d9      	b.n	80106c6 <scalbnf+0x4e>
 8010712:	3019      	adds	r0, #25
 8010714:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010718:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801071c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010740 <scalbnf+0xc8>
 8010720:	ee07 3a90 	vmov	s15, r3
 8010724:	e7d7      	b.n	80106d6 <scalbnf+0x5e>
 8010726:	bf00      	nop
 8010728:	ffff3cb0 	.word	0xffff3cb0
 801072c:	4c000000 	.word	0x4c000000
 8010730:	7149f2ca 	.word	0x7149f2ca
 8010734:	f149f2ca 	.word	0xf149f2ca
 8010738:	0da24260 	.word	0x0da24260
 801073c:	8da24260 	.word	0x8da24260
 8010740:	33000000 	.word	0x33000000

08010744 <with_errnof>:
 8010744:	b510      	push	{r4, lr}
 8010746:	ed2d 8b02 	vpush	{d8}
 801074a:	eeb0 8a40 	vmov.f32	s16, s0
 801074e:	4604      	mov	r4, r0
 8010750:	f7fb ff6e 	bl	800c630 <__errno>
 8010754:	eeb0 0a48 	vmov.f32	s0, s16
 8010758:	ecbd 8b02 	vpop	{d8}
 801075c:	6004      	str	r4, [r0, #0]
 801075e:	bd10      	pop	{r4, pc}

08010760 <xflowf>:
 8010760:	b130      	cbz	r0, 8010770 <xflowf+0x10>
 8010762:	eef1 7a40 	vneg.f32	s15, s0
 8010766:	ee27 0a80 	vmul.f32	s0, s15, s0
 801076a:	2022      	movs	r0, #34	@ 0x22
 801076c:	f7ff bfea 	b.w	8010744 <with_errnof>
 8010770:	eef0 7a40 	vmov.f32	s15, s0
 8010774:	e7f7      	b.n	8010766 <xflowf+0x6>
	...

08010778 <__math_uflowf>:
 8010778:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010780 <__math_uflowf+0x8>
 801077c:	f7ff bff0 	b.w	8010760 <xflowf>
 8010780:	10000000 	.word	0x10000000

08010784 <__math_oflowf>:
 8010784:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801078c <__math_oflowf+0x8>
 8010788:	f7ff bfea 	b.w	8010760 <xflowf>
 801078c:	70000000 	.word	0x70000000

08010790 <__kernel_rem_pio2f>:
 8010790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010794:	ed2d 8b04 	vpush	{d8-d9}
 8010798:	b0d9      	sub	sp, #356	@ 0x164
 801079a:	4690      	mov	r8, r2
 801079c:	9001      	str	r0, [sp, #4]
 801079e:	4ab9      	ldr	r2, [pc, #740]	@ (8010a84 <__kernel_rem_pio2f+0x2f4>)
 80107a0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80107a2:	f118 0f04 	cmn.w	r8, #4
 80107a6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80107aa:	460f      	mov	r7, r1
 80107ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80107b0:	db27      	blt.n	8010802 <__kernel_rem_pio2f+0x72>
 80107b2:	f1b8 0203 	subs.w	r2, r8, #3
 80107b6:	bf48      	it	mi
 80107b8:	f108 0204 	addmi.w	r2, r8, #4
 80107bc:	10d2      	asrs	r2, r2, #3
 80107be:	1c55      	adds	r5, r2, #1
 80107c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80107c2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8010a94 <__kernel_rem_pio2f+0x304>
 80107c6:	00e8      	lsls	r0, r5, #3
 80107c8:	eba2 060b 	sub.w	r6, r2, fp
 80107cc:	9002      	str	r0, [sp, #8]
 80107ce:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80107d2:	eb0a 0c0b 	add.w	ip, sl, fp
 80107d6:	ac1c      	add	r4, sp, #112	@ 0x70
 80107d8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80107dc:	2000      	movs	r0, #0
 80107de:	4560      	cmp	r0, ip
 80107e0:	dd11      	ble.n	8010806 <__kernel_rem_pio2f+0x76>
 80107e2:	a91c      	add	r1, sp, #112	@ 0x70
 80107e4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80107e8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80107ec:	f04f 0c00 	mov.w	ip, #0
 80107f0:	45d4      	cmp	ip, sl
 80107f2:	dc27      	bgt.n	8010844 <__kernel_rem_pio2f+0xb4>
 80107f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80107f8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8010a94 <__kernel_rem_pio2f+0x304>
 80107fc:	4606      	mov	r6, r0
 80107fe:	2400      	movs	r4, #0
 8010800:	e016      	b.n	8010830 <__kernel_rem_pio2f+0xa0>
 8010802:	2200      	movs	r2, #0
 8010804:	e7db      	b.n	80107be <__kernel_rem_pio2f+0x2e>
 8010806:	42c6      	cmn	r6, r0
 8010808:	bf5d      	ittte	pl
 801080a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801080e:	ee07 1a90 	vmovpl	s15, r1
 8010812:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010816:	eef0 7a47 	vmovmi.f32	s15, s14
 801081a:	ece4 7a01 	vstmia	r4!, {s15}
 801081e:	3001      	adds	r0, #1
 8010820:	e7dd      	b.n	80107de <__kernel_rem_pio2f+0x4e>
 8010822:	ecfe 6a01 	vldmia	lr!, {s13}
 8010826:	ed96 7a00 	vldr	s14, [r6]
 801082a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801082e:	3401      	adds	r4, #1
 8010830:	455c      	cmp	r4, fp
 8010832:	f1a6 0604 	sub.w	r6, r6, #4
 8010836:	ddf4      	ble.n	8010822 <__kernel_rem_pio2f+0x92>
 8010838:	ece9 7a01 	vstmia	r9!, {s15}
 801083c:	f10c 0c01 	add.w	ip, ip, #1
 8010840:	3004      	adds	r0, #4
 8010842:	e7d5      	b.n	80107f0 <__kernel_rem_pio2f+0x60>
 8010844:	a908      	add	r1, sp, #32
 8010846:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801084a:	9104      	str	r1, [sp, #16]
 801084c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801084e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8010a90 <__kernel_rem_pio2f+0x300>
 8010852:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8010a8c <__kernel_rem_pio2f+0x2fc>
 8010856:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801085a:	9203      	str	r2, [sp, #12]
 801085c:	4654      	mov	r4, sl
 801085e:	00a2      	lsls	r2, r4, #2
 8010860:	9205      	str	r2, [sp, #20]
 8010862:	aa58      	add	r2, sp, #352	@ 0x160
 8010864:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010868:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801086c:	a944      	add	r1, sp, #272	@ 0x110
 801086e:	aa08      	add	r2, sp, #32
 8010870:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010874:	4694      	mov	ip, r2
 8010876:	4626      	mov	r6, r4
 8010878:	2e00      	cmp	r6, #0
 801087a:	f1a0 0004 	sub.w	r0, r0, #4
 801087e:	dc4c      	bgt.n	801091a <__kernel_rem_pio2f+0x18a>
 8010880:	4628      	mov	r0, r5
 8010882:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010886:	f7ff fef7 	bl	8010678 <scalbnf>
 801088a:	eeb0 8a40 	vmov.f32	s16, s0
 801088e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010892:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010896:	f000 f9ed 	bl	8010c74 <floorf>
 801089a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801089e:	eea0 8a67 	vfms.f32	s16, s0, s15
 80108a2:	2d00      	cmp	r5, #0
 80108a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80108a8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80108ac:	ee17 9a90 	vmov	r9, s15
 80108b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108b4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80108b8:	dd41      	ble.n	801093e <__kernel_rem_pio2f+0x1ae>
 80108ba:	f104 3cff 	add.w	ip, r4, #4294967295
 80108be:	a908      	add	r1, sp, #32
 80108c0:	f1c5 0e08 	rsb	lr, r5, #8
 80108c4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80108c8:	fa46 f00e 	asr.w	r0, r6, lr
 80108cc:	4481      	add	r9, r0
 80108ce:	fa00 f00e 	lsl.w	r0, r0, lr
 80108d2:	1a36      	subs	r6, r6, r0
 80108d4:	f1c5 0007 	rsb	r0, r5, #7
 80108d8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80108dc:	4106      	asrs	r6, r0
 80108de:	2e00      	cmp	r6, #0
 80108e0:	dd3c      	ble.n	801095c <__kernel_rem_pio2f+0x1cc>
 80108e2:	f04f 0e00 	mov.w	lr, #0
 80108e6:	f109 0901 	add.w	r9, r9, #1
 80108ea:	4670      	mov	r0, lr
 80108ec:	4574      	cmp	r4, lr
 80108ee:	dc68      	bgt.n	80109c2 <__kernel_rem_pio2f+0x232>
 80108f0:	2d00      	cmp	r5, #0
 80108f2:	dd03      	ble.n	80108fc <__kernel_rem_pio2f+0x16c>
 80108f4:	2d01      	cmp	r5, #1
 80108f6:	d074      	beq.n	80109e2 <__kernel_rem_pio2f+0x252>
 80108f8:	2d02      	cmp	r5, #2
 80108fa:	d07d      	beq.n	80109f8 <__kernel_rem_pio2f+0x268>
 80108fc:	2e02      	cmp	r6, #2
 80108fe:	d12d      	bne.n	801095c <__kernel_rem_pio2f+0x1cc>
 8010900:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010904:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010908:	b340      	cbz	r0, 801095c <__kernel_rem_pio2f+0x1cc>
 801090a:	4628      	mov	r0, r5
 801090c:	9306      	str	r3, [sp, #24]
 801090e:	f7ff feb3 	bl	8010678 <scalbnf>
 8010912:	9b06      	ldr	r3, [sp, #24]
 8010914:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010918:	e020      	b.n	801095c <__kernel_rem_pio2f+0x1cc>
 801091a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801091e:	3e01      	subs	r6, #1
 8010920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010928:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801092c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010930:	ecac 0a01 	vstmia	ip!, {s0}
 8010934:	ed90 0a00 	vldr	s0, [r0]
 8010938:	ee37 0a80 	vadd.f32	s0, s15, s0
 801093c:	e79c      	b.n	8010878 <__kernel_rem_pio2f+0xe8>
 801093e:	d105      	bne.n	801094c <__kernel_rem_pio2f+0x1bc>
 8010940:	1e60      	subs	r0, r4, #1
 8010942:	a908      	add	r1, sp, #32
 8010944:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010948:	11f6      	asrs	r6, r6, #7
 801094a:	e7c8      	b.n	80108de <__kernel_rem_pio2f+0x14e>
 801094c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010950:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010958:	da31      	bge.n	80109be <__kernel_rem_pio2f+0x22e>
 801095a:	2600      	movs	r6, #0
 801095c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010964:	f040 8098 	bne.w	8010a98 <__kernel_rem_pio2f+0x308>
 8010968:	1e60      	subs	r0, r4, #1
 801096a:	2200      	movs	r2, #0
 801096c:	4550      	cmp	r0, sl
 801096e:	da4b      	bge.n	8010a08 <__kernel_rem_pio2f+0x278>
 8010970:	2a00      	cmp	r2, #0
 8010972:	d065      	beq.n	8010a40 <__kernel_rem_pio2f+0x2b0>
 8010974:	3c01      	subs	r4, #1
 8010976:	ab08      	add	r3, sp, #32
 8010978:	3d08      	subs	r5, #8
 801097a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d0f8      	beq.n	8010974 <__kernel_rem_pio2f+0x1e4>
 8010982:	4628      	mov	r0, r5
 8010984:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010988:	f7ff fe76 	bl	8010678 <scalbnf>
 801098c:	1c63      	adds	r3, r4, #1
 801098e:	aa44      	add	r2, sp, #272	@ 0x110
 8010990:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8010a90 <__kernel_rem_pio2f+0x300>
 8010994:	0099      	lsls	r1, r3, #2
 8010996:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801099a:	4623      	mov	r3, r4
 801099c:	2b00      	cmp	r3, #0
 801099e:	f280 80a9 	bge.w	8010af4 <__kernel_rem_pio2f+0x364>
 80109a2:	4623      	mov	r3, r4
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	f2c0 80c7 	blt.w	8010b38 <__kernel_rem_pio2f+0x3a8>
 80109aa:	aa44      	add	r2, sp, #272	@ 0x110
 80109ac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80109b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010a88 <__kernel_rem_pio2f+0x2f8>
 80109b4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8010a94 <__kernel_rem_pio2f+0x304>
 80109b8:	2000      	movs	r0, #0
 80109ba:	1ae2      	subs	r2, r4, r3
 80109bc:	e0b1      	b.n	8010b22 <__kernel_rem_pio2f+0x392>
 80109be:	2602      	movs	r6, #2
 80109c0:	e78f      	b.n	80108e2 <__kernel_rem_pio2f+0x152>
 80109c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80109c6:	b948      	cbnz	r0, 80109dc <__kernel_rem_pio2f+0x24c>
 80109c8:	b121      	cbz	r1, 80109d4 <__kernel_rem_pio2f+0x244>
 80109ca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80109ce:	f842 1c04 	str.w	r1, [r2, #-4]
 80109d2:	2101      	movs	r1, #1
 80109d4:	f10e 0e01 	add.w	lr, lr, #1
 80109d8:	4608      	mov	r0, r1
 80109da:	e787      	b.n	80108ec <__kernel_rem_pio2f+0x15c>
 80109dc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80109e0:	e7f5      	b.n	80109ce <__kernel_rem_pio2f+0x23e>
 80109e2:	f104 3cff 	add.w	ip, r4, #4294967295
 80109e6:	aa08      	add	r2, sp, #32
 80109e8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80109ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80109f0:	a908      	add	r1, sp, #32
 80109f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80109f6:	e781      	b.n	80108fc <__kernel_rem_pio2f+0x16c>
 80109f8:	f104 3cff 	add.w	ip, r4, #4294967295
 80109fc:	aa08      	add	r2, sp, #32
 80109fe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010a02:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010a06:	e7f3      	b.n	80109f0 <__kernel_rem_pio2f+0x260>
 8010a08:	a908      	add	r1, sp, #32
 8010a0a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010a0e:	3801      	subs	r0, #1
 8010a10:	430a      	orrs	r2, r1
 8010a12:	e7ab      	b.n	801096c <__kernel_rem_pio2f+0x1dc>
 8010a14:	3201      	adds	r2, #1
 8010a16:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010a1a:	2e00      	cmp	r6, #0
 8010a1c:	d0fa      	beq.n	8010a14 <__kernel_rem_pio2f+0x284>
 8010a1e:	9905      	ldr	r1, [sp, #20]
 8010a20:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010a24:	eb0d 0001 	add.w	r0, sp, r1
 8010a28:	18e6      	adds	r6, r4, r3
 8010a2a:	a91c      	add	r1, sp, #112	@ 0x70
 8010a2c:	f104 0c01 	add.w	ip, r4, #1
 8010a30:	384c      	subs	r0, #76	@ 0x4c
 8010a32:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010a36:	4422      	add	r2, r4
 8010a38:	4562      	cmp	r2, ip
 8010a3a:	da04      	bge.n	8010a46 <__kernel_rem_pio2f+0x2b6>
 8010a3c:	4614      	mov	r4, r2
 8010a3e:	e70e      	b.n	801085e <__kernel_rem_pio2f+0xce>
 8010a40:	9804      	ldr	r0, [sp, #16]
 8010a42:	2201      	movs	r2, #1
 8010a44:	e7e7      	b.n	8010a16 <__kernel_rem_pio2f+0x286>
 8010a46:	9903      	ldr	r1, [sp, #12]
 8010a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010a4c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8010a50:	9105      	str	r1, [sp, #20]
 8010a52:	ee07 1a90 	vmov	s15, r1
 8010a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a5a:	2400      	movs	r4, #0
 8010a5c:	ece6 7a01 	vstmia	r6!, {s15}
 8010a60:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8010a94 <__kernel_rem_pio2f+0x304>
 8010a64:	46b1      	mov	r9, r6
 8010a66:	455c      	cmp	r4, fp
 8010a68:	dd04      	ble.n	8010a74 <__kernel_rem_pio2f+0x2e4>
 8010a6a:	ece0 7a01 	vstmia	r0!, {s15}
 8010a6e:	f10c 0c01 	add.w	ip, ip, #1
 8010a72:	e7e1      	b.n	8010a38 <__kernel_rem_pio2f+0x2a8>
 8010a74:	ecfe 6a01 	vldmia	lr!, {s13}
 8010a78:	ed39 7a01 	vldmdb	r9!, {s14}
 8010a7c:	3401      	adds	r4, #1
 8010a7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010a82:	e7f0      	b.n	8010a66 <__kernel_rem_pio2f+0x2d6>
 8010a84:	080115c4 	.word	0x080115c4
 8010a88:	08011598 	.word	0x08011598
 8010a8c:	43800000 	.word	0x43800000
 8010a90:	3b800000 	.word	0x3b800000
 8010a94:	00000000 	.word	0x00000000
 8010a98:	9b02      	ldr	r3, [sp, #8]
 8010a9a:	eeb0 0a48 	vmov.f32	s0, s16
 8010a9e:	eba3 0008 	sub.w	r0, r3, r8
 8010aa2:	f7ff fde9 	bl	8010678 <scalbnf>
 8010aa6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010a8c <__kernel_rem_pio2f+0x2fc>
 8010aaa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab2:	db19      	blt.n	8010ae8 <__kernel_rem_pio2f+0x358>
 8010ab4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8010a90 <__kernel_rem_pio2f+0x300>
 8010ab8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010abc:	aa08      	add	r2, sp, #32
 8010abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ac2:	3508      	adds	r5, #8
 8010ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ac8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ad0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010ad4:	ee10 3a10 	vmov	r3, s0
 8010ad8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010adc:	ee17 3a90 	vmov	r3, s15
 8010ae0:	3401      	adds	r4, #1
 8010ae2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010ae6:	e74c      	b.n	8010982 <__kernel_rem_pio2f+0x1f2>
 8010ae8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010aec:	aa08      	add	r2, sp, #32
 8010aee:	ee10 3a10 	vmov	r3, s0
 8010af2:	e7f6      	b.n	8010ae2 <__kernel_rem_pio2f+0x352>
 8010af4:	a808      	add	r0, sp, #32
 8010af6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010afa:	9001      	str	r0, [sp, #4]
 8010afc:	ee07 0a90 	vmov	s15, r0
 8010b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b04:	3b01      	subs	r3, #1
 8010b06:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010b0a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010b0e:	ed62 7a01 	vstmdb	r2!, {s15}
 8010b12:	e743      	b.n	801099c <__kernel_rem_pio2f+0x20c>
 8010b14:	ecfc 6a01 	vldmia	ip!, {s13}
 8010b18:	ecb5 7a01 	vldmia	r5!, {s14}
 8010b1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010b20:	3001      	adds	r0, #1
 8010b22:	4550      	cmp	r0, sl
 8010b24:	dc01      	bgt.n	8010b2a <__kernel_rem_pio2f+0x39a>
 8010b26:	4282      	cmp	r2, r0
 8010b28:	daf4      	bge.n	8010b14 <__kernel_rem_pio2f+0x384>
 8010b2a:	a858      	add	r0, sp, #352	@ 0x160
 8010b2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010b30:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010b34:	3b01      	subs	r3, #1
 8010b36:	e735      	b.n	80109a4 <__kernel_rem_pio2f+0x214>
 8010b38:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010b3a:	2b02      	cmp	r3, #2
 8010b3c:	dc09      	bgt.n	8010b52 <__kernel_rem_pio2f+0x3c2>
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	dc2b      	bgt.n	8010b9a <__kernel_rem_pio2f+0x40a>
 8010b42:	d044      	beq.n	8010bce <__kernel_rem_pio2f+0x43e>
 8010b44:	f009 0007 	and.w	r0, r9, #7
 8010b48:	b059      	add	sp, #356	@ 0x164
 8010b4a:	ecbd 8b04 	vpop	{d8-d9}
 8010b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b52:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010b54:	2b03      	cmp	r3, #3
 8010b56:	d1f5      	bne.n	8010b44 <__kernel_rem_pio2f+0x3b4>
 8010b58:	aa30      	add	r2, sp, #192	@ 0xc0
 8010b5a:	1f0b      	subs	r3, r1, #4
 8010b5c:	4413      	add	r3, r2
 8010b5e:	461a      	mov	r2, r3
 8010b60:	4620      	mov	r0, r4
 8010b62:	2800      	cmp	r0, #0
 8010b64:	f1a2 0204 	sub.w	r2, r2, #4
 8010b68:	dc52      	bgt.n	8010c10 <__kernel_rem_pio2f+0x480>
 8010b6a:	4622      	mov	r2, r4
 8010b6c:	2a01      	cmp	r2, #1
 8010b6e:	f1a3 0304 	sub.w	r3, r3, #4
 8010b72:	dc5d      	bgt.n	8010c30 <__kernel_rem_pio2f+0x4a0>
 8010b74:	ab30      	add	r3, sp, #192	@ 0xc0
 8010b76:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8010a94 <__kernel_rem_pio2f+0x304>
 8010b7a:	440b      	add	r3, r1
 8010b7c:	2c01      	cmp	r4, #1
 8010b7e:	dc67      	bgt.n	8010c50 <__kernel_rem_pio2f+0x4c0>
 8010b80:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010b84:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8010b88:	2e00      	cmp	r6, #0
 8010b8a:	d167      	bne.n	8010c5c <__kernel_rem_pio2f+0x4cc>
 8010b8c:	edc7 6a00 	vstr	s13, [r7]
 8010b90:	ed87 7a01 	vstr	s14, [r7, #4]
 8010b94:	edc7 7a02 	vstr	s15, [r7, #8]
 8010b98:	e7d4      	b.n	8010b44 <__kernel_rem_pio2f+0x3b4>
 8010b9a:	ab30      	add	r3, sp, #192	@ 0xc0
 8010b9c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8010a94 <__kernel_rem_pio2f+0x304>
 8010ba0:	440b      	add	r3, r1
 8010ba2:	4622      	mov	r2, r4
 8010ba4:	2a00      	cmp	r2, #0
 8010ba6:	da24      	bge.n	8010bf2 <__kernel_rem_pio2f+0x462>
 8010ba8:	b34e      	cbz	r6, 8010bfe <__kernel_rem_pio2f+0x46e>
 8010baa:	eef1 7a47 	vneg.f32	s15, s14
 8010bae:	edc7 7a00 	vstr	s15, [r7]
 8010bb2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8010bb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010bba:	aa31      	add	r2, sp, #196	@ 0xc4
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	429c      	cmp	r4, r3
 8010bc0:	da20      	bge.n	8010c04 <__kernel_rem_pio2f+0x474>
 8010bc2:	b10e      	cbz	r6, 8010bc8 <__kernel_rem_pio2f+0x438>
 8010bc4:	eef1 7a67 	vneg.f32	s15, s15
 8010bc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8010bcc:	e7ba      	b.n	8010b44 <__kernel_rem_pio2f+0x3b4>
 8010bce:	ab30      	add	r3, sp, #192	@ 0xc0
 8010bd0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8010a94 <__kernel_rem_pio2f+0x304>
 8010bd4:	440b      	add	r3, r1
 8010bd6:	2c00      	cmp	r4, #0
 8010bd8:	da05      	bge.n	8010be6 <__kernel_rem_pio2f+0x456>
 8010bda:	b10e      	cbz	r6, 8010be0 <__kernel_rem_pio2f+0x450>
 8010bdc:	eef1 7a67 	vneg.f32	s15, s15
 8010be0:	edc7 7a00 	vstr	s15, [r7]
 8010be4:	e7ae      	b.n	8010b44 <__kernel_rem_pio2f+0x3b4>
 8010be6:	ed33 7a01 	vldmdb	r3!, {s14}
 8010bea:	3c01      	subs	r4, #1
 8010bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010bf0:	e7f1      	b.n	8010bd6 <__kernel_rem_pio2f+0x446>
 8010bf2:	ed73 7a01 	vldmdb	r3!, {s15}
 8010bf6:	3a01      	subs	r2, #1
 8010bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010bfc:	e7d2      	b.n	8010ba4 <__kernel_rem_pio2f+0x414>
 8010bfe:	eef0 7a47 	vmov.f32	s15, s14
 8010c02:	e7d4      	b.n	8010bae <__kernel_rem_pio2f+0x41e>
 8010c04:	ecb2 7a01 	vldmia	r2!, {s14}
 8010c08:	3301      	adds	r3, #1
 8010c0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010c0e:	e7d6      	b.n	8010bbe <__kernel_rem_pio2f+0x42e>
 8010c10:	edd2 7a00 	vldr	s15, [r2]
 8010c14:	edd2 6a01 	vldr	s13, [r2, #4]
 8010c18:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010c1c:	3801      	subs	r0, #1
 8010c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c22:	ed82 7a00 	vstr	s14, [r2]
 8010c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c2a:	edc2 7a01 	vstr	s15, [r2, #4]
 8010c2e:	e798      	b.n	8010b62 <__kernel_rem_pio2f+0x3d2>
 8010c30:	edd3 7a00 	vldr	s15, [r3]
 8010c34:	edd3 6a01 	vldr	s13, [r3, #4]
 8010c38:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010c3c:	3a01      	subs	r2, #1
 8010c3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c42:	ed83 7a00 	vstr	s14, [r3]
 8010c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c4a:	edc3 7a01 	vstr	s15, [r3, #4]
 8010c4e:	e78d      	b.n	8010b6c <__kernel_rem_pio2f+0x3dc>
 8010c50:	ed33 7a01 	vldmdb	r3!, {s14}
 8010c54:	3c01      	subs	r4, #1
 8010c56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010c5a:	e78f      	b.n	8010b7c <__kernel_rem_pio2f+0x3ec>
 8010c5c:	eef1 6a66 	vneg.f32	s13, s13
 8010c60:	eeb1 7a47 	vneg.f32	s14, s14
 8010c64:	edc7 6a00 	vstr	s13, [r7]
 8010c68:	ed87 7a01 	vstr	s14, [r7, #4]
 8010c6c:	eef1 7a67 	vneg.f32	s15, s15
 8010c70:	e790      	b.n	8010b94 <__kernel_rem_pio2f+0x404>
 8010c72:	bf00      	nop

08010c74 <floorf>:
 8010c74:	ee10 3a10 	vmov	r3, s0
 8010c78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010c7c:	3a7f      	subs	r2, #127	@ 0x7f
 8010c7e:	2a16      	cmp	r2, #22
 8010c80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010c84:	dc2b      	bgt.n	8010cde <floorf+0x6a>
 8010c86:	2a00      	cmp	r2, #0
 8010c88:	da12      	bge.n	8010cb0 <floorf+0x3c>
 8010c8a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010cf0 <floorf+0x7c>
 8010c8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010c92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c9a:	dd06      	ble.n	8010caa <floorf+0x36>
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	da24      	bge.n	8010cea <floorf+0x76>
 8010ca0:	2900      	cmp	r1, #0
 8010ca2:	4b14      	ldr	r3, [pc, #80]	@ (8010cf4 <floorf+0x80>)
 8010ca4:	bf08      	it	eq
 8010ca6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010caa:	ee00 3a10 	vmov	s0, r3
 8010cae:	4770      	bx	lr
 8010cb0:	4911      	ldr	r1, [pc, #68]	@ (8010cf8 <floorf+0x84>)
 8010cb2:	4111      	asrs	r1, r2
 8010cb4:	420b      	tst	r3, r1
 8010cb6:	d0fa      	beq.n	8010cae <floorf+0x3a>
 8010cb8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010cf0 <floorf+0x7c>
 8010cbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010cc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc8:	ddef      	ble.n	8010caa <floorf+0x36>
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	bfbe      	ittt	lt
 8010cce:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010cd2:	fa40 f202 	asrlt.w	r2, r0, r2
 8010cd6:	189b      	addlt	r3, r3, r2
 8010cd8:	ea23 0301 	bic.w	r3, r3, r1
 8010cdc:	e7e5      	b.n	8010caa <floorf+0x36>
 8010cde:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010ce2:	d3e4      	bcc.n	8010cae <floorf+0x3a>
 8010ce4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ce8:	4770      	bx	lr
 8010cea:	2300      	movs	r3, #0
 8010cec:	e7dd      	b.n	8010caa <floorf+0x36>
 8010cee:	bf00      	nop
 8010cf0:	7149f2ca 	.word	0x7149f2ca
 8010cf4:	bf800000 	.word	0xbf800000
 8010cf8:	007fffff 	.word	0x007fffff

08010cfc <_init>:
 8010cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cfe:	bf00      	nop
 8010d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d02:	bc08      	pop	{r3}
 8010d04:	469e      	mov	lr, r3
 8010d06:	4770      	bx	lr

08010d08 <_fini>:
 8010d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d0a:	bf00      	nop
 8010d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d0e:	bc08      	pop	{r3}
 8010d10:	469e      	mov	lr, r3
 8010d12:	4770      	bx	lr
