
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbfc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800cd90  0800cd90  0000dd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1b0  0800d1b0  0000f2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1b0  0800d1b0  0000e1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1b8  0800d1b8  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1b8  0800d1b8  0000e1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1bc  0800d1bc  0000e1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d1c0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c4  2**0
                  CONTENTS
 10 .bss          00001f84  200002c4  200002c4  0000f2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002248  20002248  0000f2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c8e  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038b1  00000000  00000000  00021f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00025838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9f  00000000  00000000  000267e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a84  00000000  00000000  0002737f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015477  00000000  00000000  00049e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be1bc  00000000  00000000  0005f27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d436  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050e8  00000000  00000000  0011d47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00122564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd74 	.word	0x0800cd74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800cd74 	.word	0x0800cd74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <API_PrintAngles>:
 * @param r Roll
 * @param r Pitch
 * @param r Yaw
 */
void API_PrintAngles(uint32_t timestamp, float r, float p, float y)
{
 8000f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f3c:	b08a      	sub	sp, #40	@ 0x28
 8000f3e:	af06      	add	r7, sp, #24
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f46:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f4a:	ed87 1a00 	vstr	s2, [r7]
	sprintf(txBuff, "A,%lu,%.4f,%.4f,%.4f\r\n", timestamp, r, p, y);
 8000f4e:	68b8      	ldr	r0, [r7, #8]
 8000f50:	f7ff fafa 	bl	8000548 <__aeabi_f2d>
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff faf5 	bl	8000548 <__aeabi_f2d>
 8000f5e:	4680      	mov	r8, r0
 8000f60:	4689      	mov	r9, r1
 8000f62:	6838      	ldr	r0, [r7, #0]
 8000f64:	f7ff faf0 	bl	8000548 <__aeabi_f2d>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f70:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f74:	e9cd 4500 	strd	r4, r5, [sp]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	490b      	ldr	r1, [pc, #44]	@ (8000fa8 <API_PrintAngles+0x70>)
 8000f7c:	480b      	ldr	r0, [pc, #44]	@ (8000fac <API_PrintAngles+0x74>)
 8000f7e:	f009 fc2f 	bl	800a7e0 <siprintf>
	while(CDC_Transmit_FS((uint8_t *) txBuff, strlen(txBuff)) == HAL_BUSY);
 8000f82:	bf00      	nop
 8000f84:	4809      	ldr	r0, [pc, #36]	@ (8000fac <API_PrintAngles+0x74>)
 8000f86:	f7ff f973 	bl	8000270 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4806      	ldr	r0, [pc, #24]	@ (8000fac <API_PrintAngles+0x74>)
 8000f92:	f008 faaf 	bl	80094f4 <CDC_Transmit_FS>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d0f3      	beq.n	8000f84 <API_PrintAngles+0x4c>
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fa8:	0800cd90 	.word	0x0800cd90
 8000fac:	20000464 	.word	0x20000464

08000fb0 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	887a      	ldrh	r2, [r7, #2]
 8000fce:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6a3a      	ldr	r2, [r7, #32]
 8000fd4:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000fda:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6858      	ldr	r0, [r3, #4]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	899b      	ldrh	r3, [r3, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f001 ffce 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f001 f967 	bl	80022d0 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6858      	ldr	r0, [r3, #4]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	899b      	ldrh	r3, [r3, #12]
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	f001 ffc3 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001012:	2032      	movs	r0, #50	@ 0x32
 8001014:	f001 f95c 	bl	80022d0 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8001018:	22b6      	movs	r2, #182	@ 0xb6
 800101a:	217e      	movs	r1, #126	@ 0x7e
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 f959 	bl	80012d4 <BMI088_WriteAccRegister>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	4413      	add	r3, r2
 800102a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 800102c:	2032      	movs	r0, #50	@ 0x32
 800102e:	f001 f94f 	bl	80022d0 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8001032:	f107 0316 	add.w	r3, r7, #22
 8001036:	461a      	mov	r2, r3
 8001038:	2100      	movs	r1, #0
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f000 f8d0 	bl	80011e0 <BMI088_ReadAccRegister>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	4413      	add	r3, r2
 8001048:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 800104a:	200a      	movs	r0, #10
 800104c:	f001 f940 	bl	80022d0 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8001050:	22a8      	movs	r2, #168	@ 0xa8
 8001052:	2140      	movs	r1, #64	@ 0x40
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 f93d 	bl	80012d4 <BMI088_WriteAccRegister>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	4413      	add	r3, r2
 8001062:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f001 f933 	bl	80022d0 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 800106a:	2200      	movs	r2, #0
 800106c:	2141      	movs	r1, #65	@ 0x41
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f930 	bl	80012d4 <BMI088_WriteAccRegister>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	4413      	add	r3, r2
 800107c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f001 f926 	bl	80022d0 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8001084:	220a      	movs	r2, #10
 8001086:	2153      	movs	r1, #83	@ 0x53
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f923 	bl	80012d4 <BMI088_WriteAccRegister>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	4413      	add	r3, r2
 8001096:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001098:	200a      	movs	r0, #10
 800109a:	f001 f919 	bl	80022d0 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 800109e:	2204      	movs	r2, #4
 80010a0:	2158      	movs	r1, #88	@ 0x58
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f916 	bl	80012d4 <BMI088_WriteAccRegister>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	4413      	add	r3, r2
 80010b0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f001 f90c 	bl	80022d0 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 80010b8:	2200      	movs	r2, #0
 80010ba:	217c      	movs	r1, #124	@ 0x7c
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 f909 	bl	80012d4 <BMI088_WriteAccRegister>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	4413      	add	r3, r2
 80010ca:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f001 f8ff 	bl	80022d0 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80010d2:	2204      	movs	r2, #4
 80010d4:	217d      	movs	r1, #125	@ 0x7d
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 f8fc 	bl	80012d4 <BMI088_WriteAccRegister>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	4413      	add	r3, r2
 80010e4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f001 f8f2 	bl	80022d0 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4a3a      	ldr	r2, [pc, #232]	@ (80011d8 <BMI088_Init+0x228>)
 80010f0:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2292      	movs	r2, #146	@ 0x92
 80010f6:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	89db      	ldrh	r3, [r3, #14]
 8001100:	2201      	movs	r2, #1
 8001102:	4619      	mov	r1, r3
 8001104:	f001 ff48 	bl	8002f98 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001108:	22b6      	movs	r2, #182	@ 0xb6
 800110a:	2114      	movs	r1, #20
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 f91b 	bl	8001348 <BMI088_WriteGyrRegister>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	4413      	add	r3, r2
 800111a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 800111c:	20fa      	movs	r0, #250	@ 0xfa
 800111e:	f001 f8d7 	bl	80022d0 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8001122:	f107 0316 	add.w	r3, r7, #22
 8001126:	461a      	mov	r2, r3
 8001128:	2100      	movs	r1, #0
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 f896 	bl	800125c <BMI088_ReadGyrRegister>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	4413      	add	r3, r2
 8001138:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 800113a:	200a      	movs	r0, #10
 800113c:	f001 f8c8 	bl	80022d0 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8001140:	2201      	movs	r2, #1
 8001142:	210f      	movs	r1, #15
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 f8ff 	bl	8001348 <BMI088_WriteGyrRegister>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	4413      	add	r3, r2
 8001152:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001154:	200a      	movs	r0, #10
 8001156:	f001 f8bb 	bl	80022d0 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 800115a:	2207      	movs	r2, #7
 800115c:	2110      	movs	r1, #16
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 f8f2 	bl	8001348 <BMI088_WriteGyrRegister>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	4413      	add	r3, r2
 800116c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800116e:	200a      	movs	r0, #10
 8001170:	f001 f8ae 	bl	80022d0 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8001174:	2280      	movs	r2, #128	@ 0x80
 8001176:	2115      	movs	r1, #21
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 f8e5 	bl	8001348 <BMI088_WriteGyrRegister>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	4413      	add	r3, r2
 8001186:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f001 f8a1 	bl	80022d0 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 800118e:	2201      	movs	r2, #1
 8001190:	2116      	movs	r1, #22
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f8d8 	bl	8001348 <BMI088_WriteGyrRegister>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	4413      	add	r3, r2
 80011a0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f001 f894 	bl	80022d0 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80011a8:	2201      	movs	r2, #1
 80011aa:	2118      	movs	r1, #24
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f000 f8cb 	bl	8001348 <BMI088_WriteGyrRegister>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	4413      	add	r3, r2
 80011ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f001 f887 	bl	80022d0 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <BMI088_Init+0x22c>)
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2282      	movs	r2, #130	@ 0x82
 80011cc:	769a      	strb	r2, [r3, #26]

	return status;
 80011ce:	7dfb      	ldrb	r3, [r7, #23]

}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	3a6b70a4 	.word	0x3a6b70a4
 80011dc:	3a0ba058 	.word	0x3a0ba058

080011e0 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	460b      	mov	r3, r1
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	753b      	strb	r3, [r7, #20]
 80011f8:	2300      	movs	r3, #0
 80011fa:	757b      	strb	r3, [r7, #21]
 80011fc:	2300      	movs	r3, #0
 80011fe:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6858      	ldr	r0, [r3, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	899b      	ldrh	r3, [r3, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	f001 fec4 	bl	8002f98 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	f107 0210 	add.w	r2, r7, #16
 8001218:	f107 0114 	add.w	r1, r7, #20
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2303      	movs	r3, #3
 8001224:	f003 ff91 	bl	800514a <HAL_SPI_TransmitReceive>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6858      	ldr	r0, [r3, #4]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	899b      	ldrh	r3, [r3, #12]
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	f001 fea9 	bl	8002f98 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 800124c:	7cba      	ldrb	r2, [r7, #18]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8001252:	7dfb      	ldrb	r3, [r7, #23]

}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af02      	add	r7, sp, #8
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	460b      	mov	r3, r1
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001270:	b2db      	uxtb	r3, r3
 8001272:	753b      	strb	r3, [r7, #20]
 8001274:	2300      	movs	r3, #0
 8001276:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6898      	ldr	r0, [r3, #8]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	89db      	ldrh	r3, [r3, #14]
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	f001 fe88 	bl	8002f98 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	f107 0210 	add.w	r2, r7, #16
 8001290:	f107 0114 	add.w	r1, r7, #20
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2302      	movs	r3, #2
 800129c:	f003 ff55 	bl	800514a <HAL_SPI_TransmitReceive>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf0c      	ite	eq
 80012a6:	2301      	moveq	r3, #1
 80012a8:	2300      	movne	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6898      	ldr	r0, [r3, #8]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	89db      	ldrh	r3, [r3, #14]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4619      	mov	r1, r3
 80012ba:	f001 fe6d 	bl	8002f98 <HAL_GPIO_WritePin>

	if (status == 1) {
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d102      	bne.n	80012ca <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80012c4:	7c7a      	ldrb	r2, [r7, #17]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80012ca:	7dfb      	ldrb	r3, [r7, #23]

}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
 80012e0:	4613      	mov	r3, r2
 80012e2:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	733b      	strb	r3, [r7, #12]
 80012e8:	78bb      	ldrb	r3, [r7, #2]
 80012ea:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6858      	ldr	r0, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	899b      	ldrh	r3, [r3, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	f001 fe4e 	bl	8002f98 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	f107 010c 	add.w	r1, r7, #12
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	2202      	movs	r2, #2
 800130a:	f003 fdda 	bl	8004ec2 <HAL_SPI_Transmit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800131c:	bf00      	nop
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f004 fad2 	bl	80058cc <HAL_SPI_GetState>
 8001328:	4603      	mov	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	d1f7      	bne.n	800131e <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6858      	ldr	r0, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	899b      	ldrh	r3, [r3, #12]
 8001336:	2201      	movs	r2, #1
 8001338:	4619      	mov	r1, r3
 800133a:	f001 fe2d 	bl	8002f98 <HAL_GPIO_WritePin>

	return status;
 800133e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
 8001354:	4613      	mov	r3, r2
 8001356:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	733b      	strb	r3, [r7, #12]
 800135c:	78bb      	ldrb	r3, [r7, #2]
 800135e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6898      	ldr	r0, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	89db      	ldrh	r3, [r3, #14]
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	f001 fe14 	bl	8002f98 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	f107 010c 	add.w	r1, r7, #12
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	2202      	movs	r2, #2
 800137e:	f003 fda0 	bl	8004ec2 <HAL_SPI_Transmit>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001390:	bf00      	nop
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f004 fa98 	bl	80058cc <HAL_SPI_GetState>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d1f7      	bne.n	8001392 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6898      	ldr	r0, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	89db      	ldrh	r3, [r3, #14]
 80013aa:	2201      	movs	r2, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	f001 fdf3 	bl	8002f98 <HAL_GPIO_WritePin>

	return status;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]

}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6858      	ldr	r0, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	899b      	ldrh	r3, [r3, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	f001 fde2 	bl	8002f98 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f103 0112 	add.w	r1, r3, #18
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80013e4:	2308      	movs	r3, #8
 80013e6:	f004 f859 	bl	800549c <HAL_SPI_TransmitReceive_DMA>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d104      	bne.n	80013fa <BMI088_ReadAccelerometerDMA+0x3e>

		imu->readingAcc = 1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	741a      	strb	r2, [r3, #16]
		return 1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e008      	b.n	800140c <BMI088_ReadAccelerometerDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6858      	ldr	r0, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f001 fdc7 	bl	8002f98 <HAL_GPIO_WritePin>
		return 0;
 800140a:	2300      	movs	r3, #0

	}

}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6858      	ldr	r0, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	899b      	ldrh	r3, [r3, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	4619      	mov	r1, r3
 8001428:	f001 fdb6 	bl	8002f98 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001438:	b2db      	uxtb	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001444:	b2db      	uxtb	r3, r3
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001452:	b2db      	uxtb	r3, r3
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800145e:	b2db      	uxtb	r3, r3
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800146c:	b2db      	uxtb	r3, r3
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b21a      	sxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001478:	b2db      	uxtb	r3, r3
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6898      	ldr	r0, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	89db      	ldrh	r3, [r3, #14]
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	f001 fd52 	bl	8002f98 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f103 011a 	add.w	r1, r3, #26
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001504:	2307      	movs	r3, #7
 8001506:	f003 ffc9 	bl	800549c <HAL_SPI_TransmitReceive_DMA>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d104      	bne.n	800151a <BMI088_ReadGyroscopeDMA+0x3e>

		imu->readingGyr = 1;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	745a      	strb	r2, [r3, #17]
		return 1;
 8001516:	2301      	movs	r3, #1
 8001518:	e008      	b.n	800152c <BMI088_ReadGyroscopeDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6898      	ldr	r0, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	89db      	ldrh	r3, [r3, #14]
 8001522:	2201      	movs	r2, #1
 8001524:	4619      	mov	r1, r3
 8001526:	f001 fd37 	bl	8002f98 <HAL_GPIO_WritePin>
		return 0;
 800152a:	2300      	movs	r3, #0

	}

}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6898      	ldr	r0, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	89db      	ldrh	r3, [r3, #14]
 8001544:	2201      	movs	r2, #1
 8001546:	4619      	mov	r1, r3
 8001548:	f001 fd26 	bl	8002f98 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001558:	b2db      	uxtb	r3, r3
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001564:	b2db      	uxtb	r3, r3
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001572:	b2db      	uxtb	r3, r3
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800157e:	b2db      	uxtb	r3, r3
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800158c:	b2db      	uxtb	r3, r3
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001598:	b2db      	uxtb	r3, r3
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <EKF_Predict>:
 * @brief Function to calculate the predict step of Extended Kalman Filter
 * @param dt delta time
 * @param gyro_data gyroscope measurements
 */
void EKF_Predict(float dt, float gyro_data[3])
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	ed87 0a01 	vstr	s0, [r7, #4]
 8001606:	6038      	str	r0, [r7, #0]
    float gx = gyro_data[0]; //- gyro_bias[0];
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	617b      	str	r3, [r7, #20]
    float gy = gyro_data[1] - gyro_bias[1];
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	3304      	adds	r3, #4
 8001612:	ed93 7a00 	vldr	s14, [r3]
 8001616:	4b21      	ldr	r3, [pc, #132]	@ (800169c <EKF_Predict+0xa0>)
 8001618:	edd3 7a01 	vldr	s15, [r3, #4]
 800161c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001620:	edc7 7a04 	vstr	s15, [r7, #16]
    float gz = gyro_data[2] - gyro_bias[2];
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3308      	adds	r3, #8
 8001628:	ed93 7a00 	vldr	s14, [r3]
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <EKF_Predict+0xa0>)
 800162e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001636:	edc7 7a03 	vstr	s15, [r7, #12]

    state[0] += gx * dt;
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <EKF_Predict+0xa4>)
 800163c:	ed93 7a00 	vldr	s14, [r3]
 8001640:	edd7 6a05 	vldr	s13, [r7, #20]
 8001644:	edd7 7a01 	vldr	s15, [r7, #4]
 8001648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <EKF_Predict+0xa4>)
 8001652:	edc3 7a00 	vstr	s15, [r3]
    state[1] += gy * dt;
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <EKF_Predict+0xa4>)
 8001658:	ed93 7a01 	vldr	s14, [r3, #4]
 800165c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001660:	edd7 7a01 	vldr	s15, [r7, #4]
 8001664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <EKF_Predict+0xa4>)
 800166e:	edc3 7a01 	vstr	s15, [r3, #4]
    state[2] += gz * dt;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <EKF_Predict+0xa4>)
 8001674:	ed93 7a02 	vldr	s14, [r3, #8]
 8001678:	edd7 6a03 	vldr	s13, [r7, #12]
 800167c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <EKF_Predict+0xa4>)
 800168a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800168e:	bf00      	nop
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200002ec 	.word	0x200002ec
 80016a0:	200002e0 	.word	0x200002e0
 80016a4:	00000000 	.word	0x00000000

080016a8 <EKF_Update>:
/**
 * @brief Function to calculate the update step of Extended Kalman Filter
 * @param accel_data accelerometer measurements
 */
void EKF_Update(float accel_data[3])
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	ed2d 8b02 	vpush	{d8}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    float accel_roll = atan2f(accel_data[1], accel_data[2]);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3304      	adds	r3, #4
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3308      	adds	r3, #8
 80016c0:	ed93 7a00 	vldr	s14, [r3]
 80016c4:	eef0 0a47 	vmov.f32	s1, s14
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	f00b f9b4 	bl	800ca38 <atan2f>
 80016d0:	ed87 0a05 	vstr	s0, [r7, #20]
    float accel_pitch = atan2f(-accel_data[0], sqrtf(accel_data[1] * accel_data[1] + accel_data[2] * accel_data[2]));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	eeb1 8a67 	vneg.f32	s16, s15
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3304      	adds	r3, #4
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3308      	adds	r3, #8
 80016f6:	edd3 6a00 	vldr	s13, [r3]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3308      	adds	r3, #8
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	f00b f995 	bl	800ca3c <sqrtf>
 8001712:	eef0 7a40 	vmov.f32	s15, s0
 8001716:	eef0 0a67 	vmov.f32	s1, s15
 800171a:	eeb0 0a48 	vmov.f32	s0, s16
 800171e:	f00b f98b 	bl	800ca38 <atan2f>
 8001722:	ed87 0a04 	vstr	s0, [r7, #16]

    float y[2] = {accel_roll - state[0], accel_pitch - state[1]};
 8001726:	4b2e      	ldr	r3, [pc, #184]	@ (80017e0 <EKF_Update+0x138>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001734:	edc7 7a02 	vstr	s15, [r7, #8]
 8001738:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <EKF_Update+0x138>)
 800173a:	edd3 7a01 	vldr	s15, [r3, #4]
 800173e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001746:	edc7 7a03 	vstr	s15, [r7, #12]

    state[0] += y[0] * 0.1;
 800174a:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <EKF_Update+0x138>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fefa 	bl	8000548 <__aeabi_f2d>
 8001754:	4604      	mov	r4, r0
 8001756:	460d      	mov	r5, r1
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fef4 	bl	8000548 <__aeabi_f2d>
 8001760:	a31d      	add	r3, pc, #116	@ (adr r3, 80017d8 <EKF_Update+0x130>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe ff47 	bl	80005f8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7fe fd8b 	bl	800028c <__adddf3>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa13 	bl	8000ba8 <__aeabi_d2f>
 8001782:	4603      	mov	r3, r0
 8001784:	4a16      	ldr	r2, [pc, #88]	@ (80017e0 <EKF_Update+0x138>)
 8001786:	6013      	str	r3, [r2, #0]
    state[1] += y[1] * 0.1;
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <EKF_Update+0x138>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fedb 	bl	8000548 <__aeabi_f2d>
 8001792:	4604      	mov	r4, r0
 8001794:	460d      	mov	r5, r1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fed5 	bl	8000548 <__aeabi_f2d>
 800179e:	a30e      	add	r3, pc, #56	@ (adr r3, 80017d8 <EKF_Update+0x130>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe ff28 	bl	80005f8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fd6c 	bl	800028c <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff f9f4 	bl	8000ba8 <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a07      	ldr	r2, [pc, #28]	@ (80017e0 <EKF_Update+0x138>)
 80017c4:	6053      	str	r3, [r2, #4]
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	ecbd 8b02 	vpop	{d8}
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	f3af 8000 	nop.w
 80017d8:	9999999a 	.word	0x9999999a
 80017dc:	3fb99999 	.word	0x3fb99999
 80017e0:	200002e0 	.word	0x200002e0
 80017e4:	00000000 	.word	0x00000000

080017e8 <EKF_FindAngles>:
 * @param accel_data accelerometer measurements
 * @param gyro_data gyroscope measurements
 * @param ret_angles variable where to write the calculated angles values
 */
void EKF_FindAngles(float accel_data[3], float gyro_data[3], float* ret_angles)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
    uint32_t curr_time = HAL_GetTick();
 80017f4:	f000 fd60 	bl	80022b8 <HAL_GetTick>
 80017f8:	6178      	str	r0, [r7, #20]
    float dt = (curr_time - prev_time) / 1000.0f;
 80017fa:	4b2f      	ldr	r3, [pc, #188]	@ (80018b8 <EKF_FindAngles+0xd0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180a:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80018bc <EKF_FindAngles+0xd4>
 800180e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001812:	edc7 7a04 	vstr	s15, [r7, #16]
    prev_time = curr_time;
 8001816:	4a28      	ldr	r2, [pc, #160]	@ (80018b8 <EKF_FindAngles+0xd0>)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	6013      	str	r3, [r2, #0]

    EKF_Predict(dt, gyro_data);
 800181c:	68b8      	ldr	r0, [r7, #8]
 800181e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001822:	f7ff feeb 	bl	80015fc <EKF_Predict>
    EKF_Update(accel_data);
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff ff3e 	bl	80016a8 <EKF_Update>

    ret_angles[0] = state[0] * (180.0 / M_PI);		// Roll
 800182c:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <EKF_FindAngles+0xd8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe89 	bl	8000548 <__aeabi_f2d>
 8001836:	a31e      	add	r3, pc, #120	@ (adr r3, 80018b0 <EKF_FindAngles+0xc8>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7fe fedc 	bl	80005f8 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f9ae 	bl	8000ba8 <__aeabi_d2f>
 800184c:	4602      	mov	r2, r0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
    ret_angles[1] = state[1] * (180.0 / M_PI);		// Pitch
 8001852:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <EKF_FindAngles+0xd8>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe76 	bl	8000548 <__aeabi_f2d>
 800185c:	a314      	add	r3, pc, #80	@ (adr r3, 80018b0 <EKF_FindAngles+0xc8>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fec9 	bl	80005f8 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	1d1c      	adds	r4, r3, #4
 8001872:	f7ff f999 	bl	8000ba8 <__aeabi_d2f>
 8001876:	4603      	mov	r3, r0
 8001878:	6023      	str	r3, [r4, #0]
    ret_angles[2] = state[2] * (180.0 / M_PI);		// Yaw
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <EKF_FindAngles+0xd8>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe62 	bl	8000548 <__aeabi_f2d>
 8001884:	a30a      	add	r3, pc, #40	@ (adr r3, 80018b0 <EKF_FindAngles+0xc8>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe feb5 	bl	80005f8 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f103 0408 	add.w	r4, r3, #8
 800189c:	f7ff f984 	bl	8000ba8 <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	6023      	str	r3, [r4, #0]

}
 80018a4:	bf00      	nop
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	1a63c1f8 	.word	0x1a63c1f8
 80018b4:	404ca5dc 	.word	0x404ca5dc
 80018b8:	200002f8 	.word	0x200002f8
 80018bc:	447a0000 	.word	0x447a0000
 80018c0:	200002e0 	.word	0x200002e0

080018c4 <HAL_GPIO_EXTI_Callback>:
uint32_t timerToggle = 0;



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d103      	bne.n	80018dc <HAL_GPIO_EXTI_Callback+0x18>
	{
		// we check if the interrupt pin is the accelerometer one
		BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 80018d4:	4806      	ldr	r0, [pc, #24]	@ (80018f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80018d6:	f7ff fd71 	bl	80013bc <BMI088_ReadAccelerometerDMA>
	else if(GPIO_Pin == INT_GYR_Pin)
	{
		// we check if the interrupt pin is the gyroscope one
		BMI088_ReadGyroscopeDMA(&imu);
	}
}
 80018da:	e005      	b.n	80018e8 <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == INT_GYR_Pin)
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d102      	bne.n	80018e8 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 80018e2:	4803      	ldr	r0, [pc, #12]	@ (80018f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80018e4:	f7ff fdfa 	bl	80014dc <BMI088_ReadGyroscopeDMA>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000414 	.word	0x20000414

080018f4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <HAL_SPI_TxRxCpltCallback+0x38>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10d      	bne.n	8001922 <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001908:	7c1b      	ldrb	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 800190e:	4808      	ldr	r0, [pc, #32]	@ (8001930 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001910:	f7ff fd80 	bl	8001414 <BMI088_ReadAccelerometerDMA_Complete>
		}

		if (imu.readingGyr)
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001916:	7c5b      	ldrb	r3, [r3, #17]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800191e:	f7ff fe09 	bl	8001534 <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40013000 	.word	0x40013000
 8001930:	20000414 	.word	0x20000414

08001934 <Take_IMU_Measurements>:


void Take_IMU_Measurements(BMI088 *imu)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	acc[0] = imu->acc_mps2[0];
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001940:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <Take_IMU_Measurements+0x44>)
 8001942:	6013      	str	r3, [r2, #0]
	acc[1] = imu->acc_mps2[1];
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001948:	4a0b      	ldr	r2, [pc, #44]	@ (8001978 <Take_IMU_Measurements+0x44>)
 800194a:	6053      	str	r3, [r2, #4]
	acc[2] = imu->acc_mps2[2];
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <Take_IMU_Measurements+0x44>)
 8001952:	6093      	str	r3, [r2, #8]
	gyr[0] = imu->gyr_rps[0];
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001958:	4a08      	ldr	r2, [pc, #32]	@ (800197c <Take_IMU_Measurements+0x48>)
 800195a:	6013      	str	r3, [r2, #0]
	gyr[1] = imu->gyr_rps[1];
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001960:	4a06      	ldr	r2, [pc, #24]	@ (800197c <Take_IMU_Measurements+0x48>)
 8001962:	6053      	str	r3, [r2, #4]
	gyr[2] = imu->gyr_rps[2];
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001968:	4a04      	ldr	r2, [pc, #16]	@ (800197c <Take_IMU_Measurements+0x48>)
 800196a:	6093      	str	r3, [r2, #8]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	200004e4 	.word	0x200004e4
 800197c:	200004f0 	.word	0x200004f0

08001980 <Toggle>:


void Toggle()
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	// Toggle to show if the code is running
	if ((HAL_GetTick() - timerToggle) >= SAMPLE_TIME_MS_TOGGLE)
 8001984:	f000 fc98 	bl	80022b8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <Toggle+0x38>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001994:	d308      	bcc.n	80019a8 <Toggle+0x28>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001996:	2110      	movs	r1, #16
 8001998:	4808      	ldr	r0, [pc, #32]	@ (80019bc <Toggle+0x3c>)
 800199a:	f001 fb16 	bl	8002fca <HAL_GPIO_TogglePin>
		timerToggle = HAL_GetTick();
 800199e:	f000 fc8b 	bl	80022b8 <HAL_GetTick>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <Toggle+0x38>)
 80019a6:	6013      	str	r3, [r2, #0]
	}
	timerUSB = HAL_GetTick();
 80019a8:	f000 fc86 	bl	80022b8 <HAL_GetTick>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a04      	ldr	r2, [pc, #16]	@ (80019c0 <Toggle+0x40>)
 80019b0:	6013      	str	r3, [r2, #0]
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000050c 	.word	0x2000050c
 80019bc:	40020400 	.word	0x40020400
 80019c0:	20000508 	.word	0x20000508

080019c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ca:	f000 fc0f 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ce:	f000 f853 	bl	8001a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d2:	f000 f919 	bl	8001c08 <MX_GPIO_Init>
  MX_DMA_Init();
 80019d6:	f000 f8ef 	bl	8001bb8 <MX_DMA_Init>
  MX_SPI1_Init();
 80019da:	f000 f8b7 	bl	8001b4c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80019de:	f007 fccb 	bl	8009378 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 80019e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e6:	f000 fc73 	bl	80022d0 <HAL_Delay>
  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 80019ea:	2310      	movs	r3, #16
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <main+0x94>)
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2310      	movs	r3, #16
 80019f4:	4a19      	ldr	r2, [pc, #100]	@ (8001a5c <main+0x98>)
 80019f6:	491a      	ldr	r1, [pc, #104]	@ (8001a60 <main+0x9c>)
 80019f8:	481a      	ldr	r0, [pc, #104]	@ (8001a64 <main+0xa0>)
 80019fa:	f7ff fad9 	bl	8000fb0 <BMI088_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //EKF_CalculateGyroBias(&imu, 500, bias);
  HAL_Delay(1000);
 80019fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a02:	f000 fc65 	bl	80022d0 <HAL_Delay>


  while (1)
  {
	if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB)
 8001a06:	f000 fc57 	bl	80022b8 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <main+0xa4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b09      	cmp	r3, #9
 8001a14:	d9f7      	bls.n	8001a06 <main+0x42>
	{
		Take_IMU_Measurements(&imu);
 8001a16:	4813      	ldr	r0, [pc, #76]	@ (8001a64 <main+0xa0>)
 8001a18:	f7ff ff8c 	bl	8001934 <Take_IMU_Measurements>
		EKF_FindAngles(acc, gyr, angles);
 8001a1c:	4a13      	ldr	r2, [pc, #76]	@ (8001a6c <main+0xa8>)
 8001a1e:	4914      	ldr	r1, [pc, #80]	@ (8001a70 <main+0xac>)
 8001a20:	4814      	ldr	r0, [pc, #80]	@ (8001a74 <main+0xb0>)
 8001a22:	f7ff fee1 	bl	80017e8 <EKF_FindAngles>

		Toggle();
 8001a26:	f7ff ffab 	bl	8001980 <Toggle>
		}
//#endif //USE_API
//#ifdef USE_API
		else
		{
			API_PrintAngles(HAL_GetTick(), angles[0], angles[1], angles[2]);
 8001a2a:	f000 fc45 	bl	80022b8 <HAL_GetTick>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <main+0xa8>)
 8001a32:	edd2 7a00 	vldr	s15, [r2]
 8001a36:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <main+0xa8>)
 8001a38:	ed92 7a01 	vldr	s14, [r2, #4]
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a6c <main+0xa8>)
 8001a3e:	edd2 6a02 	vldr	s13, [r2, #8]
 8001a42:	eeb0 1a66 	vmov.f32	s2, s13
 8001a46:	eef0 0a47 	vmov.f32	s1, s14
 8001a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fa72 	bl	8000f38 <API_PrintAngles>
	if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB)
 8001a54:	e7d7      	b.n	8001a06 <main+0x42>
 8001a56:	bf00      	nop
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	200002fc 	.word	0x200002fc
 8001a64:	20000414 	.word	0x20000414
 8001a68:	20000508 	.word	0x20000508
 8001a6c:	200004fc 	.word	0x200004fc
 8001a70:	200004f0 	.word	0x200004f0
 8001a74:	200004e4 	.word	0x200004e4

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b094      	sub	sp, #80	@ 0x50
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	2230      	movs	r2, #48	@ 0x30
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f008 ff0d 	bl	800a8a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <SystemClock_Config+0xcc>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	4a27      	ldr	r2, [pc, #156]	@ (8001b44 <SystemClock_Config+0xcc>)
 8001aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aac:	4b25      	ldr	r3, [pc, #148]	@ (8001b44 <SystemClock_Config+0xcc>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <SystemClock_Config+0xd0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a21      	ldr	r2, [pc, #132]	@ (8001b48 <SystemClock_Config+0xd0>)
 8001ac2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <SystemClock_Config+0xd0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ad8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ae2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001aec:	23a8      	movs	r3, #168	@ 0xa8
 8001aee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001af4:	2307      	movs	r3, #7
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af8:	f107 0320 	add.w	r3, r7, #32
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fce9 	bl	80044d4 <HAL_RCC_OscConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b08:	f000 f924 	bl	8001d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2105      	movs	r1, #5
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 ff4a 	bl	80049c4 <HAL_RCC_ClockConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b36:	f000 f90d 	bl	8001d54 <Error_Handler>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3750      	adds	r7, #80	@ 0x50
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40007000 	.word	0x40007000

08001b4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b50:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b52:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <MX_SPI1_Init+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b80:	2210      	movs	r2, #16
 8001b82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b90:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b98:	220a      	movs	r2, #10
 8001b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <MX_SPI1_Init+0x64>)
 8001b9e:	f003 f907 	bl	8004db0 <HAL_SPI_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ba8:	f000 f8d4 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200002fc 	.word	0x200002fc
 8001bb4:	40013000 	.word	0x40013000

08001bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <MX_DMA_Init+0x4c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c04 <MX_DMA_Init+0x4c>)
 8001bc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <MX_DMA_Init+0x4c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2038      	movs	r0, #56	@ 0x38
 8001be0:	f000 fc75 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001be4:	2038      	movs	r0, #56	@ 0x38
 8001be6:	f000 fc8e 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	203b      	movs	r0, #59	@ 0x3b
 8001bf0:	f000 fc6d 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001bf4:	203b      	movs	r0, #59	@ 0x3b
 8001bf6:	f000 fc86 	bl	8002506 <HAL_NVIC_EnableIRQ>

}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b48      	ldr	r3, [pc, #288]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a47      	ldr	r2, [pc, #284]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b45      	ldr	r3, [pc, #276]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b41      	ldr	r3, [pc, #260]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a40      	ldr	r2, [pc, #256]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a39      	ldr	r2, [pc, #228]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b37      	ldr	r3, [pc, #220]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a32      	ldr	r2, [pc, #200]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <MX_GPIO_Init+0x13c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2110      	movs	r1, #16
 8001c92:	482d      	ldr	r0, [pc, #180]	@ (8001d48 <MX_GPIO_Init+0x140>)
 8001c94:	f001 f980 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2110      	movs	r1, #16
 8001c9c:	482b      	ldr	r0, [pc, #172]	@ (8001d4c <MX_GPIO_Init+0x144>)
 8001c9e:	f001 f97b 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	482a      	ldr	r0, [pc, #168]	@ (8001d50 <MX_GPIO_Init+0x148>)
 8001ca8:	f001 f976 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8001cac:	230c      	movs	r3, #12
 8001cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4822      	ldr	r0, [pc, #136]	@ (8001d4c <MX_GPIO_Init+0x144>)
 8001cc2:	f000 ffcd 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 8001cc6:	2310      	movs	r3, #16
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	481a      	ldr	r0, [pc, #104]	@ (8001d48 <MX_GPIO_Init+0x140>)
 8001cde:	f000 ffbf 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 8001ce2:	2310      	movs	r3, #16
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4814      	ldr	r0, [pc, #80]	@ (8001d4c <MX_GPIO_Init+0x144>)
 8001cfa:	f000 ffb1 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cfe:	2310      	movs	r3, #16
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	480e      	ldr	r0, [pc, #56]	@ (8001d50 <MX_GPIO_Init+0x148>)
 8001d16:	f000 ffa3 	bl	8002c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2008      	movs	r0, #8
 8001d20:	f000 fbd5 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d24:	2008      	movs	r0, #8
 8001d26:	f000 fbee 	bl	8002506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2009      	movs	r0, #9
 8001d30:	f000 fbcd 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d34:	2009      	movs	r0, #9
 8001d36:	f000 fbe6 	bl	8002506 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	@ 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020400 	.word	0x40020400

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <Error_Handler+0x8>

08001d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <HAL_MspInit+0x4c>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001dac <HAL_MspInit+0x4c>)
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d76:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <HAL_MspInit+0x4c>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <HAL_MspInit+0x4c>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8001f00 <HAL_SPI_MspInit+0x150>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	f040 8092 	bne.w	8001ef8 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ddc:	4a49      	ldr	r2, [pc, #292]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001dde:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001de2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de4:	4b47      	ldr	r3, [pc, #284]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	4b43      	ldr	r3, [pc, #268]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	4a42      	ldr	r2, [pc, #264]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e00:	4b40      	ldr	r3, [pc, #256]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e0c:	23e0      	movs	r3, #224	@ 0xe0
 8001e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1c:	2305      	movs	r3, #5
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	4838      	ldr	r0, [pc, #224]	@ (8001f08 <HAL_SPI_MspInit+0x158>)
 8001e28:	f000 ff1a 	bl	8002c60 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001e2c:	4b37      	ldr	r3, [pc, #220]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e2e:	4a38      	ldr	r2, [pc, #224]	@ (8001f10 <HAL_SPI_MspInit+0x160>)
 8001e30:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001e32:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e34:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e38:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e3a:	4b34      	ldr	r3, [pc, #208]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e40:	4b32      	ldr	r3, [pc, #200]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e46:	4b31      	ldr	r3, [pc, #196]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e4c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e54:	4b2d      	ldr	r3, [pc, #180]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e66:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e68:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001e6e:	4827      	ldr	r0, [pc, #156]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e70:	f000 fb64 	bl	800253c <HAL_DMA_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001e7a:	f7ff ff6b 	bl	8001d54 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a22      	ldr	r2, [pc, #136]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e82:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001e84:	4a21      	ldr	r2, [pc, #132]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e8a:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001e8c:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <HAL_SPI_MspInit+0x168>)
 8001e8e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e90:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001e92:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e96:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001e9a:	2240      	movs	r2, #64	@ 0x40
 8001e9c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eaa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eac:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001ec0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ec4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ecc:	4811      	ldr	r0, [pc, #68]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001ece:	f000 fb35 	bl	800253c <HAL_DMA_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001ed8:	f7ff ff3c 	bl	8001d54 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001ee0:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8001f14 <HAL_SPI_MspInit+0x164>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2100      	movs	r1, #0
 8001eec:	2023      	movs	r0, #35	@ 0x23
 8001eee:	f000 faee 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ef2:	2023      	movs	r0, #35	@ 0x23
 8001ef4:	f000 fb07 	bl	8002506 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	@ 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40013000 	.word	0x40013000
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	20000354 	.word	0x20000354
 8001f10:	40026410 	.word	0x40026410
 8001f14:	200003b4 	.word	0x200003b4
 8001f18:	40026458 	.word	0x40026458

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <NMI_Handler+0x4>

08001f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <MemManage_Handler+0x4>

08001f34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f72:	f000 f98d 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8001f7e:	2004      	movs	r0, #4
 8001f80:	f001 f83e 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 8001f8c:	2008      	movs	r0, #8
 8001f8e:	f001 f837 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f9c:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <SPI1_IRQHandler+0x10>)
 8001f9e:	f003 fb79 	bl	8005694 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200002fc 	.word	0x200002fc

08001fac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001fb0:	4802      	ldr	r0, [pc, #8]	@ (8001fbc <DMA2_Stream0_IRQHandler+0x10>)
 8001fb2:	f000 fbeb 	bl	800278c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000354 	.word	0x20000354

08001fc0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fc4:	4802      	ldr	r0, [pc, #8]	@ (8001fd0 <DMA2_Stream3_IRQHandler+0x10>)
 8001fc6:	f000 fbe1 	bl	800278c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200003b4 	.word	0x200003b4

08001fd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fd8:	4802      	ldr	r0, [pc, #8]	@ (8001fe4 <OTG_FS_IRQHandler+0x10>)
 8001fda:	f001 f96d 	bl	80032b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200019f8 	.word	0x200019f8

08001fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_kill>:

int _kill(int pid, int sig)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002002:	f008 fca3 	bl	800a94c <__errno>
 8002006:	4603      	mov	r3, r0
 8002008:	2216      	movs	r2, #22
 800200a:	601a      	str	r2, [r3, #0]
  return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_exit>:

void _exit (int status)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffe7 	bl	8001ff8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800202a:	bf00      	nop
 800202c:	e7fd      	b.n	800202a <_exit+0x12>

0800202e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e00a      	b.n	8002056 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002040:	f3af 8000 	nop.w
 8002044:	4601      	mov	r1, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	60ba      	str	r2, [r7, #8]
 800204c:	b2ca      	uxtb	r2, r1
 800204e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	dbf0      	blt.n	8002040 <_read+0x12>
  }

  return len;
 800205e:	687b      	ldr	r3, [r7, #4]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	e009      	b.n	800208e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	60ba      	str	r2, [r7, #8]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	dbf1      	blt.n	800207a <_write+0x12>
  }
  return len;
 8002096:	687b      	ldr	r3, [r7, #4]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_close>:

int _close(int file)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c8:	605a      	str	r2, [r3, #4]
  return 0;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_isatty>:

int _isatty(int file)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020e0:	2301      	movs	r3, #1
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f008 fc08 	bl	800a94c <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20020000 	.word	0x20020000
 8002168:	00000400 	.word	0x00000400
 800216c:	20000510 	.word	0x20000510
 8002170:	20002248 	.word	0x20002248

08002174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	@ (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800219c:	f7ff ffea 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	@ (80021d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	@ (80021d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	@ (80021e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80021c6:	f008 fbc7 	bl	800a958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7ff fbfb 	bl	80019c4 <main>
  bx  lr    
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80021dc:	0800d1c0 	.word	0x0800d1c0
  ldr r2, =_sbss
 80021e0:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80021e4:	20002248 	.word	0x20002248

080021e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f0:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <HAL_Init+0x40>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <HAL_Init+0x40>)
 8002202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	@ (800222c <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	@ (800222c <HAL_Init+0x40>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 f94f 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	200f      	movs	r0, #15
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff fd9e 	bl	8001d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f967 	bl	8002522 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 f92f 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	@ (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000000 	.word	0x20000000
 8002288:	20000008 	.word	0x20000008
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000008 	.word	0x20000008
 80022b4:	20000514 	.word	0x20000514

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000514 	.word	0x20000514

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	@ (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	@ (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	@ 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	@ 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff29 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff3e 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8e 	bl	800240c <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff31 	bl	800237c <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002548:	f7ff feb6 	bl	80022b8 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e099      	b.n	800268c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002578:	e00f      	b.n	800259a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800257a:	f7ff fe9d 	bl	80022b8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b05      	cmp	r3, #5
 8002586:	d908      	bls.n	800259a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e078      	b.n	800268c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e8      	bne.n	800257a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4b38      	ldr	r3, [pc, #224]	@ (8002694 <HAL_DMA_Init+0x158>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d107      	bne.n	8002604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fc:	4313      	orrs	r3, r2
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f023 0307 	bic.w	r3, r3, #7
 800261a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	2b04      	cmp	r3, #4
 800262c:	d117      	bne.n	800265e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00e      	beq.n	800265e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fa91 	bl	8002b68 <DMA_CheckFifoParam>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2240      	movs	r2, #64	@ 0x40
 8002650:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800265a:	2301      	movs	r3, #1
 800265c:	e016      	b.n	800268c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa48 	bl	8002afc <DMA_CalcBaseAndBitshift>
 800266c:	4603      	mov	r3, r0
 800266e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	223f      	movs	r2, #63	@ 0x3f
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	f010803f 	.word	0xf010803f

08002698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_DMA_Start_IT+0x26>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e040      	b.n	8002740 <HAL_DMA_Start_IT+0xa8>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d12f      	bne.n	8002732 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f9da 	bl	8002aa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f0:	223f      	movs	r2, #63	@ 0x3f
 80026f2:	409a      	lsls	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0216 	orr.w	r2, r2, #22
 8002706:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0208 	orr.w	r2, r2, #8
 800271e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e005      	b.n	800273e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800273a:	2302      	movs	r3, #2
 800273c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800273e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d004      	beq.n	8002766 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2280      	movs	r2, #128	@ 0x80
 8002760:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e00c      	b.n	8002780 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2205      	movs	r2, #5
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002798:	4b8e      	ldr	r3, [pc, #568]	@ (80029d4 <HAL_DMA_IRQHandler+0x248>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a8e      	ldr	r2, [pc, #568]	@ (80029d8 <HAL_DMA_IRQHandler+0x24c>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0a9b      	lsrs	r3, r3, #10
 80027a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	2208      	movs	r2, #8
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01a      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0204 	bic.w	r2, r2, #4
 80027de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	2208      	movs	r2, #8
 80027e6:	409a      	lsls	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	2201      	movs	r2, #1
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281a:	2201      	movs	r2, #1
 800281c:	409a      	lsls	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002826:	f043 0202 	orr.w	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	2204      	movs	r2, #4
 8002834:	409a      	lsls	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d012      	beq.n	8002864 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00b      	beq.n	8002864 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002850:	2204      	movs	r2, #4
 8002852:	409a      	lsls	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285c:	f043 0204 	orr.w	r2, r3, #4
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	2210      	movs	r2, #16
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d043      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03c      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002886:	2210      	movs	r2, #16
 8002888:	409a      	lsls	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d018      	beq.n	80028ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d108      	bne.n	80028bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d024      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
 80028ba:	e01f      	b.n	80028fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e016      	b.n	80028fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0208 	bic.w	r2, r2, #8
 80028ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002900:	2220      	movs	r2, #32
 8002902:	409a      	lsls	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 808f 	beq.w	8002a2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8087 	beq.w	8002a2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002922:	2220      	movs	r2, #32
 8002924:	409a      	lsls	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b05      	cmp	r3, #5
 8002934:	d136      	bne.n	80029a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0216 	bic.w	r2, r2, #22
 8002944:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002954:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <HAL_DMA_IRQHandler+0x1da>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0208 	bic.w	r2, r2, #8
 8002974:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	223f      	movs	r2, #63	@ 0x3f
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002996:	2b00      	cmp	r3, #0
 8002998:	d07e      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
        }
        return;
 80029a2:	e079      	b.n	8002a98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01d      	beq.n	80029ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10d      	bne.n	80029dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d031      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
 80029d0:	e02c      	b.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
 80029d2:	bf00      	nop
 80029d4:	20000000 	.word	0x20000000
 80029d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d023      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
 80029ec:	e01e      	b.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10f      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0210 	bic.w	r2, r2, #16
 8002a0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d032      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d022      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2205      	movs	r2, #5
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d307      	bcc.n	8002a74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f2      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x2cc>
 8002a72:	e000      	b.n	8002a76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
 8002a96:	e000      	b.n	8002a9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a98:	bf00      	nop
    }
  }
}
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002abc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b40      	cmp	r3, #64	@ 0x40
 8002acc:	d108      	bne.n	8002ae0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ade:	e007      	b.n	8002af0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3b10      	subs	r3, #16
 8002b0c:	4a14      	ldr	r2, [pc, #80]	@ (8002b60 <DMA_CalcBaseAndBitshift+0x64>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b16:	4a13      	ldr	r2, [pc, #76]	@ (8002b64 <DMA_CalcBaseAndBitshift+0x68>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d909      	bls.n	8002b3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	1d1a      	adds	r2, r3, #4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b3c:	e007      	b.n	8002b4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	aaaaaaab 	.word	0xaaaaaaab
 8002b64:	0800ce00 	.word	0x0800ce00

08002b68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11f      	bne.n	8002bc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d856      	bhi.n	8002c36 <DMA_CheckFifoParam+0xce>
 8002b88:	a201      	add	r2, pc, #4	@ (adr r2, 8002b90 <DMA_CheckFifoParam+0x28>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002ba1 	.word	0x08002ba1
 8002b94:	08002bb3 	.word	0x08002bb3
 8002b98:	08002ba1 	.word	0x08002ba1
 8002b9c:	08002c37 	.word	0x08002c37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d046      	beq.n	8002c3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb0:	e043      	b.n	8002c3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bba:	d140      	bne.n	8002c3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc0:	e03d      	b.n	8002c3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bca:	d121      	bne.n	8002c10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d837      	bhi.n	8002c42 <DMA_CheckFifoParam+0xda>
 8002bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <DMA_CheckFifoParam+0x70>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002bef 	.word	0x08002bef
 8002be0:	08002be9 	.word	0x08002be9
 8002be4:	08002c01 	.word	0x08002c01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      break;
 8002bec:	e030      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d025      	beq.n	8002c46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfe:	e022      	b.n	8002c46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c08:	d11f      	bne.n	8002c4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c0e:	e01c      	b.n	8002c4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d903      	bls.n	8002c1e <DMA_CheckFifoParam+0xb6>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d003      	beq.n	8002c24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c1c:	e018      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      break;
 8002c22:	e015      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e00b      	b.n	8002c4e <DMA_CheckFifoParam+0xe6>
      break;
 8002c36:	bf00      	nop
 8002c38:	e00a      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e008      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e006      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e004      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	@ 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e16b      	b.n	8002f54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	f040 815a 	bne.w	8002f4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d005      	beq.n	8002cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d130      	bne.n	8002d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 0201 	and.w	r2, r3, #1
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d017      	beq.n	8002d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d123      	bne.n	8002da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	08da      	lsrs	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3208      	adds	r2, #8
 8002d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	220f      	movs	r2, #15
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	08da      	lsrs	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3208      	adds	r2, #8
 8002d9e:	69b9      	ldr	r1, [r7, #24]
 8002da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0203 	and.w	r2, r3, #3
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80b4 	beq.w	8002f4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	4b60      	ldr	r3, [pc, #384]	@ (8002f6c <HAL_GPIO_Init+0x30c>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	4a5f      	ldr	r2, [pc, #380]	@ (8002f6c <HAL_GPIO_Init+0x30c>)
 8002df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f6c <HAL_GPIO_Init+0x30c>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e02:	4a5b      	ldr	r2, [pc, #364]	@ (8002f70 <HAL_GPIO_Init+0x310>)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a52      	ldr	r2, [pc, #328]	@ (8002f74 <HAL_GPIO_Init+0x314>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d02b      	beq.n	8002e86 <HAL_GPIO_Init+0x226>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a51      	ldr	r2, [pc, #324]	@ (8002f78 <HAL_GPIO_Init+0x318>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d025      	beq.n	8002e82 <HAL_GPIO_Init+0x222>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a50      	ldr	r2, [pc, #320]	@ (8002f7c <HAL_GPIO_Init+0x31c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d01f      	beq.n	8002e7e <HAL_GPIO_Init+0x21e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4f      	ldr	r2, [pc, #316]	@ (8002f80 <HAL_GPIO_Init+0x320>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d019      	beq.n	8002e7a <HAL_GPIO_Init+0x21a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4e      	ldr	r2, [pc, #312]	@ (8002f84 <HAL_GPIO_Init+0x324>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_GPIO_Init+0x216>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4d      	ldr	r2, [pc, #308]	@ (8002f88 <HAL_GPIO_Init+0x328>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00d      	beq.n	8002e72 <HAL_GPIO_Init+0x212>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4c      	ldr	r2, [pc, #304]	@ (8002f8c <HAL_GPIO_Init+0x32c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <HAL_GPIO_Init+0x20e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4b      	ldr	r2, [pc, #300]	@ (8002f90 <HAL_GPIO_Init+0x330>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_GPIO_Init+0x20a>
 8002e66:	2307      	movs	r3, #7
 8002e68:	e00e      	b.n	8002e88 <HAL_GPIO_Init+0x228>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	e00c      	b.n	8002e88 <HAL_GPIO_Init+0x228>
 8002e6e:	2306      	movs	r3, #6
 8002e70:	e00a      	b.n	8002e88 <HAL_GPIO_Init+0x228>
 8002e72:	2305      	movs	r3, #5
 8002e74:	e008      	b.n	8002e88 <HAL_GPIO_Init+0x228>
 8002e76:	2304      	movs	r3, #4
 8002e78:	e006      	b.n	8002e88 <HAL_GPIO_Init+0x228>
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e004      	b.n	8002e88 <HAL_GPIO_Init+0x228>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e002      	b.n	8002e88 <HAL_GPIO_Init+0x228>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_GPIO_Init+0x228>
 8002e86:	2300      	movs	r3, #0
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	f002 0203 	and.w	r2, r2, #3
 8002e8e:	0092      	lsls	r2, r2, #2
 8002e90:	4093      	lsls	r3, r2
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e98:	4935      	ldr	r1, [pc, #212]	@ (8002f70 <HAL_GPIO_Init+0x310>)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8002f94 <HAL_GPIO_Init+0x334>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eca:	4a32      	ldr	r2, [pc, #200]	@ (8002f94 <HAL_GPIO_Init+0x334>)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed0:	4b30      	ldr	r3, [pc, #192]	@ (8002f94 <HAL_GPIO_Init+0x334>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef4:	4a27      	ldr	r2, [pc, #156]	@ (8002f94 <HAL_GPIO_Init+0x334>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002efa:	4b26      	ldr	r3, [pc, #152]	@ (8002f94 <HAL_GPIO_Init+0x334>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f94 <HAL_GPIO_Init+0x334>)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f24:	4b1b      	ldr	r3, [pc, #108]	@ (8002f94 <HAL_GPIO_Init+0x334>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f48:	4a12      	ldr	r2, [pc, #72]	@ (8002f94 <HAL_GPIO_Init+0x334>)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3301      	adds	r3, #1
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b0f      	cmp	r3, #15
 8002f58:	f67f ae90 	bls.w	8002c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3724      	adds	r7, #36	@ 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40020000 	.word	0x40020000
 8002f78:	40020400 	.word	0x40020400
 8002f7c:	40020800 	.word	0x40020800
 8002f80:	40020c00 	.word	0x40020c00
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40021400 	.word	0x40021400
 8002f8c:	40021800 	.word	0x40021800
 8002f90:	40021c00 	.word	0x40021c00
 8002f94:	40013c00 	.word	0x40013c00

08002f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa8:	787b      	ldrb	r3, [r7, #1]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fae:	887a      	ldrh	r2, [r7, #2]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fb4:	e003      	b.n	8002fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fb6:	887b      	ldrh	r3, [r7, #2]
 8002fb8:	041a      	lsls	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	619a      	str	r2, [r3, #24]
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	041a      	lsls	r2, r3, #16
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43d9      	mvns	r1, r3
 8002fe8:	887b      	ldrh	r3, [r7, #2]
 8002fea:	400b      	ands	r3, r1
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800300a:	4b08      	ldr	r3, [pc, #32]	@ (800302c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003016:	4a05      	ldr	r2, [pc, #20]	@ (800302c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fc50 	bl	80018c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40013c00 	.word	0x40013c00

08003030 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af02      	add	r7, sp, #8
 8003036:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e101      	b.n	8003246 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f006 fb91 	bl	8009784 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2203      	movs	r2, #3
 8003066:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003070:	d102      	bne.n	8003078 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f002 ff78 	bl	8005f72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7c1a      	ldrb	r2, [r3, #16]
 800308a:	f88d 2000 	strb.w	r2, [sp]
 800308e:	3304      	adds	r3, #4
 8003090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003092:	f002 fe57 	bl	8005d44 <USB_CoreInit>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0ce      	b.n	8003246 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 ff70 	bl	8005f94 <USB_SetCurrentMode>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0bf      	b.n	8003246 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e04a      	b.n	8003162 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	3315      	adds	r3, #21
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3314      	adds	r3, #20
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	b298      	uxth	r0, r3
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	332e      	adds	r3, #46	@ 0x2e
 8003108:	4602      	mov	r2, r0
 800310a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3318      	adds	r3, #24
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	331c      	adds	r3, #28
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	3320      	adds	r3, #32
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	3324      	adds	r3, #36	@ 0x24
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	3301      	adds	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	791b      	ldrb	r3, [r3, #4]
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	429a      	cmp	r2, r3
 800316a:	d3af      	bcc.n	80030cc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	e044      	b.n	80031fc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	3301      	adds	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	791b      	ldrb	r3, [r3, #4]
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	429a      	cmp	r2, r3
 8003204:	d3b5      	bcc.n	8003172 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	7c1a      	ldrb	r2, [r3, #16]
 800320e:	f88d 2000 	strb.w	r2, [sp]
 8003212:	3304      	adds	r3, #4
 8003214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003216:	f002 ff09 	bl	800602c <USB_DevInit>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e00c      	b.n	8003246 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f003 ff53 	bl	80070ea <USB_DevDisconnect>

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_PCD_Start+0x1c>
 8003266:	2302      	movs	r3, #2
 8003268:	e022      	b.n	80032b0 <HAL_PCD_Start+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003282:	2b01      	cmp	r3, #1
 8003284:	d105      	bne.n	8003292 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f002 fe5a 	bl	8005f50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 ff01 	bl	80070a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b08d      	sub	sp, #52	@ 0x34
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 ffbf 	bl	8007252 <USB_GetMode>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f040 848c 	bne.w	8003bf4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 ff23 	bl	800712c <USB_ReadInterrupts>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8482 	beq.w	8003bf2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f003 ff10 	bl	800712c <USB_ReadInterrupts>
 800330c:	4603      	mov	r3, r0
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d107      	bne.n	8003326 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f002 0202 	and.w	r2, r2, #2
 8003324:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fefe 	bl	800712c <USB_ReadInterrupts>
 8003330:	4603      	mov	r3, r0
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b10      	cmp	r3, #16
 8003338:	d161      	bne.n	80033fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699a      	ldr	r2, [r3, #24]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0210 	bic.w	r2, r2, #16
 8003348:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	3304      	adds	r3, #4
 8003368:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	0c5b      	lsrs	r3, r3, #17
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	2b02      	cmp	r3, #2
 8003374:	d124      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d035      	beq.n	80033ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800338c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003390:	b29b      	uxth	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	6a38      	ldr	r0, [r7, #32]
 8003396:	f003 fd35 	bl	8006e04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a6:	441a      	add	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033b8:	441a      	add	r2, r3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	615a      	str	r2, [r3, #20]
 80033be:	e016      	b.n	80033ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	0c5b      	lsrs	r3, r3, #17
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	2b06      	cmp	r3, #6
 80033ca:	d110      	bne.n	80033ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033d2:	2208      	movs	r2, #8
 80033d4:	4619      	mov	r1, r3
 80033d6:	6a38      	ldr	r0, [r7, #32]
 80033d8:	f003 fd14 	bl	8006e04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e8:	441a      	add	r2, r3
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0210 	orr.w	r2, r2, #16
 80033fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f003 fe92 	bl	800712c <USB_ReadInterrupts>
 8003408:	4603      	mov	r3, r0
 800340a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800340e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003412:	f040 80a7 	bne.w	8003564 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f003 fe97 	bl	8007152 <USB_ReadDevAllOutEpInterrupt>
 8003424:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003426:	e099      	b.n	800355c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 808e 	beq.w	8003550 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f003 febb 	bl	80071ba <USB_ReadDevOutEPInterrupt>
 8003444:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800345c:	461a      	mov	r2, r3
 800345e:	2301      	movs	r3, #1
 8003460:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003462:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fea3 	bl	80041b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00c      	beq.n	800348e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003480:	461a      	mov	r2, r3
 8003482:	2308      	movs	r3, #8
 8003484:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003486:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 ff79 	bl	8004380 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a4:	461a      	mov	r2, r3
 80034a6:	2310      	movs	r3, #16
 80034a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d030      	beq.n	8003516 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034bc:	2b80      	cmp	r3, #128	@ 0x80
 80034be:	d109      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	3304      	adds	r3, #4
 80034e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	78db      	ldrb	r3, [r3, #3]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d108      	bne.n	8003504 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f006 fa46 	bl	8009990 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003510:	461a      	mov	r2, r3
 8003512:	2302      	movs	r3, #2
 8003514:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	2320      	movs	r3, #32
 8003530:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003548:	461a      	mov	r2, r3
 800354a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800354e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	3301      	adds	r3, #1
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800355c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355e:	2b00      	cmp	r3, #0
 8003560:	f47f af62 	bne.w	8003428 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f003 fddf 	bl	800712c <USB_ReadInterrupts>
 800356e:	4603      	mov	r3, r0
 8003570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003574:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003578:	f040 80db 	bne.w	8003732 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f003 fe00 	bl	8007186 <USB_ReadDevAllInEpInterrupt>
 8003586:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800358c:	e0cd      	b.n	800372a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80c2 	beq.w	800371e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f003 fe26 	bl	80071f6 <USB_ReadDevInEPInterrupt>
 80035aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d057      	beq.n	8003666 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	2201      	movs	r2, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69f9      	ldr	r1, [r7, #28]
 80035d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035d6:	4013      	ands	r3, r2
 80035d8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e6:	461a      	mov	r2, r3
 80035e8:	2301      	movs	r3, #1
 80035ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	799b      	ldrb	r3, [r3, #6]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d132      	bne.n	800365a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3320      	adds	r3, #32
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4403      	add	r3, r0
 8003614:	331c      	adds	r3, #28
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4419      	add	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4403      	add	r3, r0
 8003628:	3320      	adds	r3, #32
 800362a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d113      	bne.n	800365a <HAL_PCD_IRQHandler+0x3a2>
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3324      	adds	r3, #36	@ 0x24
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d108      	bne.n	800365a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003652:	461a      	mov	r2, r3
 8003654:	2101      	movs	r1, #1
 8003656:	f003 fe2d 	bl	80072b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f006 f910 	bl	8009886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800367c:	461a      	mov	r2, r3
 800367e:	2308      	movs	r3, #8
 8003680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003698:	461a      	mov	r2, r3
 800369a:	2310      	movs	r3, #16
 800369c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b4:	461a      	mov	r2, r3
 80036b6:	2340      	movs	r3, #64	@ 0x40
 80036b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d023      	beq.n	800370c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036c6:	6a38      	ldr	r0, [r7, #32]
 80036c8:	f002 fe14 	bl	80062f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ce:	4613      	mov	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	3310      	adds	r3, #16
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	3304      	adds	r3, #4
 80036de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	78db      	ldrb	r3, [r3, #3]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d108      	bne.n	80036fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2200      	movs	r2, #0
 80036ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f006 f95d 	bl	80099b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003706:	461a      	mov	r2, r3
 8003708:	2302      	movs	r3, #2
 800370a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003716:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fcbd 	bl	8004098 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	3301      	adds	r3, #1
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800372a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	f47f af2e 	bne.w	800358e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f003 fcf8 	bl	800712c <USB_ReadInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003742:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003746:	d122      	bne.n	800378e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003762:	2b01      	cmp	r3, #1
 8003764:	d108      	bne.n	8003778 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800376e:	2100      	movs	r1, #0
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fea3 	bl	80044bc <HAL_PCDEx_LPM_Callback>
 8003776:	e002      	b.n	800377e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f006 f8fb 	bl	8009974 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800378c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 fcca 	bl	800712c <USB_ReadInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800379e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a2:	d112      	bne.n	80037ca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d102      	bne.n	80037ba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f006 f8b7 	bl	8009928 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80037c8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 fcac 	bl	800712c <USB_ReadInterrupts>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037de:	f040 80b7 	bne.w	8003950 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2110      	movs	r1, #16
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 fd79 	bl	80062f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003802:	2300      	movs	r3, #0
 8003804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003806:	e046      	b.n	8003896 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003814:	461a      	mov	r2, r3
 8003816:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800381a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800382c:	0151      	lsls	r1, r2, #5
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	440a      	add	r2, r1
 8003832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800383a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003848:	461a      	mov	r2, r3
 800384a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800384e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800386a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800386e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003880:	0151      	lsls	r1, r2, #5
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	440a      	add	r2, r1
 8003886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800388a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800388e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003892:	3301      	adds	r3, #1
 8003894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	791b      	ldrb	r3, [r3, #4]
 800389a:	461a      	mov	r2, r3
 800389c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389e:	4293      	cmp	r3, r2
 80038a0:	d3b2      	bcc.n	8003808 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80038b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	7bdb      	ldrb	r3, [r3, #15]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d016      	beq.n	80038ec <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ce:	f043 030b 	orr.w	r3, r3, #11
 80038d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038e4:	f043 030b 	orr.w	r3, r3, #11
 80038e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ea:	e015      	b.n	8003918 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038fe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003902:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003912:	f043 030b 	orr.w	r3, r3, #11
 8003916:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003926:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800392a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800393a:	461a      	mov	r2, r3
 800393c:	f003 fcba 	bl	80072b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800394e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fbe9 	bl	800712c <USB_ReadInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003964:	d123      	bne.n	80039ae <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f003 fc7f 	bl	800726e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f002 fd36 	bl	80063e6 <USB_GetDevSpeed>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681c      	ldr	r4, [r3, #0]
 8003986:	f001 fa07 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 800398a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003990:	461a      	mov	r2, r3
 8003992:	4620      	mov	r0, r4
 8003994:	f002 fa3a 	bl	8005e0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f005 ff9c 	bl	80098d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80039ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f003 fbba 	bl	800712c <USB_ReadInterrupts>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d10a      	bne.n	80039d8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f005 ff79 	bl	80098ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f002 0208 	and.w	r2, r2, #8
 80039d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f003 fba5 	bl	800712c <USB_ReadInterrupts>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e8:	2b80      	cmp	r3, #128	@ 0x80
 80039ea:	d123      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f8:	2301      	movs	r3, #1
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80039fc:	e014      	b.n	8003a28 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fb0a 	bl	8004036 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	3301      	adds	r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	791b      	ldrb	r3, [r3, #4]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d3e4      	bcc.n	80039fe <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f003 fb77 	bl	800712c <USB_ReadInterrupts>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a48:	d13c      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4e:	e02b      	b.n	8003aa8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3318      	adds	r3, #24
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d115      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	da12      	bge.n	8003aa2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3317      	adds	r3, #23
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 faca 	bl	8004036 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	791b      	ldrb	r3, [r3, #4]
 8003aac:	461a      	mov	r2, r3
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d3cd      	bcc.n	8003a50 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f003 fb2f 	bl	800712c <USB_ReadInterrupts>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ad4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ad8:	d156      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ada:	2301      	movs	r3, #1
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ade:	e045      	b.n	8003b6c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d12e      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	da2b      	bge.n	8003b66 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003b1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d121      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b62:	6053      	str	r3, [r2, #4]
            break;
 8003b64:	e008      	b.n	8003b78 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	3301      	adds	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	791b      	ldrb	r3, [r3, #4]
 8003b70:	461a      	mov	r2, r3
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d3b3      	bcc.n	8003ae0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f003 facd 	bl	800712c <USB_ReadInterrupts>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f005 ff1a 	bl	80099d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 fab7 	bl	800712c <USB_ReadInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d115      	bne.n	8003bf4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f005 ff0a 	bl	80099f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	e000      	b.n	8003bf4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003bf2:	bf00      	nop
    }
  }
}
 8003bf4:	3734      	adds	r7, #52	@ 0x34
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}

08003bfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_PCD_SetAddress+0x1a>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e012      	b.n	8003c3a <HAL_PCD_SetAddress+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f003 fa16 	bl	800705c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	4608      	mov	r0, r1
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4603      	mov	r3, r0
 8003c52:	70fb      	strb	r3, [r7, #3]
 8003c54:	460b      	mov	r3, r1
 8003c56:	803b      	strh	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	da0f      	bge.n	8003c88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 020f 	and.w	r2, r3, #15
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	3310      	adds	r3, #16
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	705a      	strb	r2, [r3, #1]
 8003c86:	e00f      	b.n	8003ca8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 020f 	and.w	r2, r3, #15
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003cb4:	883b      	ldrh	r3, [r7, #0]
 8003cb6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	78ba      	ldrb	r2, [r7, #2]
 8003cc2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	785b      	ldrb	r3, [r3, #1]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cd6:	78bb      	ldrb	r3, [r7, #2]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d102      	bne.n	8003ce2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_PCD_EP_Open+0xae>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e00e      	b.n	8003d0e <HAL_PCD_EP_Open+0xcc>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68f9      	ldr	r1, [r7, #12]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f002 fb96 	bl	8006430 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003d0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da0f      	bge.n	8003d4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	f003 020f 	and.w	r2, r3, #15
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	3310      	adds	r3, #16
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3304      	adds	r3, #4
 8003d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	705a      	strb	r2, [r3, #1]
 8003d48:	e00f      	b.n	8003d6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	f003 020f 	and.w	r2, r3, #15
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_PCD_EP_Close+0x6e>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e00e      	b.n	8003da2 <HAL_PCD_EP_Close+0x8c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68f9      	ldr	r1, [r7, #12]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f002 fbd4 	bl	8006540 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	460b      	mov	r3, r1
 8003db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	f003 020f 	and.w	r2, r3, #15
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2200      	movs	r2, #0
 8003de4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dec:	7afb      	ldrb	r3, [r7, #11]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	799b      	ldrb	r3, [r3, #6]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	799b      	ldrb	r3, [r3, #6]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6979      	ldr	r1, [r7, #20]
 8003e12:	f002 fc71 	bl	80066f8 <USB_EPStartXfer>

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	f003 020f 	and.w	r2, r3, #15
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	f003 020f 	and.w	r2, r3, #15
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	3310      	adds	r3, #16
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	3304      	adds	r3, #4
 8003e76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2200      	movs	r2, #0
 8003e88:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	799b      	ldrb	r3, [r3, #6]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d102      	bne.n	8003eaa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	799b      	ldrb	r3, [r3, #6]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6979      	ldr	r1, [r7, #20]
 8003eb6:	f002 fc1f 	bl	80066f8 <USB_EPStartXfer>

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	7912      	ldrb	r2, [r2, #4]
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e04f      	b.n	8003f82 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da0f      	bge.n	8003f0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	f003 020f 	and.w	r2, r3, #15
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	3310      	adds	r3, #16
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	3304      	adds	r3, #4
 8003f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	705a      	strb	r2, [r3, #1]
 8003f08:	e00d      	b.n	8003f26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_PCD_EP_SetStall+0x82>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e01d      	b.n	8003f82 <HAL_PCD_EP_SetStall+0xbe>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f002 ffad 	bl	8006eb4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	7999      	ldrb	r1, [r3, #6]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f72:	461a      	mov	r2, r3
 8003f74:	f003 f99e 	bl	80072b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	7912      	ldrb	r2, [r2, #4]
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e042      	b.n	800402e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da0f      	bge.n	8003fd0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	3310      	adds	r3, #16
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	705a      	strb	r2, [r3, #1]
 8003fce:	e00f      	b.n	8003ff0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_PCD_EP_ClrStall+0x86>
 800400c:	2302      	movs	r3, #2
 800400e:	e00e      	b.n	800402e <HAL_PCD_EP_ClrStall+0xa4>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68f9      	ldr	r1, [r7, #12]
 800401e:	4618      	mov	r0, r3
 8004020:	f002 ffb6 	bl	8006f90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	460b      	mov	r3, r1
 8004040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004046:	2b00      	cmp	r3, #0
 8004048:	da0c      	bge.n	8004064 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	f003 020f 	and.w	r2, r3, #15
 8004050:	4613      	mov	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	3310      	adds	r3, #16
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	3304      	adds	r3, #4
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e00c      	b.n	800407e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	f003 020f 	and.w	r2, r3, #15
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	3304      	adds	r3, #4
 800407c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	4618      	mov	r0, r3
 8004086:	f002 fdd5 	bl	8006c34 <USB_EPStopXfer>
 800408a:	4603      	mov	r3, r0
 800408c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800408e:	7afb      	ldrb	r3, [r7, #11]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	@ 0x28
 800409c:	af02      	add	r7, sp, #8
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	3310      	adds	r3, #16
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	4413      	add	r3, r2
 80040bc:	3304      	adds	r3, #4
 80040be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d901      	bls.n	80040d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e06b      	b.n	80041a8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d902      	bls.n	80040ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	3303      	adds	r3, #3
 80040f0:	089b      	lsrs	r3, r3, #2
 80040f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040f4:	e02a      	b.n	800414c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	429a      	cmp	r2, r3
 800410a:	d902      	bls.n	8004112 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3303      	adds	r3, #3
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68d9      	ldr	r1, [r3, #12]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	4603      	mov	r3, r0
 800412e:	6978      	ldr	r0, [r7, #20]
 8004130:	f002 fe2a 	bl	8006d88 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	441a      	add	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	441a      	add	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	429a      	cmp	r2, r3
 8004160:	d809      	bhi.n	8004176 <PCD_WriteEmptyTxFifo+0xde>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800416a:	429a      	cmp	r2, r3
 800416c:	d203      	bcs.n	8004176 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1bf      	bne.n	80040f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	429a      	cmp	r2, r3
 8004180:	d811      	bhi.n	80041a6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	2201      	movs	r2, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	43db      	mvns	r3, r3
 800419c:	6939      	ldr	r1, [r7, #16]
 800419e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041a2:	4013      	ands	r3, r2
 80041a4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	333c      	adds	r3, #60	@ 0x3c
 80041c8:	3304      	adds	r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	799b      	ldrb	r3, [r3, #6]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d17b      	bne.n	80042de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4a61      	ldr	r2, [pc, #388]	@ (8004378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	f240 80b9 	bls.w	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80b3 	beq.w	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004212:	461a      	mov	r2, r3
 8004214:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004218:	6093      	str	r3, [r2, #8]
 800421a:	e0a7      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004232:	461a      	mov	r2, r3
 8004234:	2320      	movs	r3, #32
 8004236:	6093      	str	r3, [r2, #8]
 8004238:	e098      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 8093 	bne.w	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4a4b      	ldr	r2, [pc, #300]	@ (8004378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d90f      	bls.n	800426e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004264:	461a      	mov	r2, r3
 8004266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800426a:	6093      	str	r3, [r2, #8]
 800426c:	e07e      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	3304      	adds	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1a      	ldr	r2, [r3, #32]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	0159      	lsls	r1, r3, #5
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	440b      	add	r3, r1
 8004290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429a:	1ad2      	subs	r2, r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d114      	bne.n	80042d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042b8:	461a      	mov	r2, r3
 80042ba:	2101      	movs	r1, #1
 80042bc:	f002 fffa 	bl	80072b4 <USB_EP0_OutStart>
 80042c0:	e006      	b.n	80042d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	441a      	add	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f005 faba 	bl	8009850 <HAL_PCD_DataOutStageCallback>
 80042dc:	e046      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	4a26      	ldr	r2, [pc, #152]	@ (800437c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d124      	bne.n	8004330 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042fc:	461a      	mov	r2, r3
 80042fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004302:	6093      	str	r3, [r2, #8]
 8004304:	e032      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800431c:	461a      	mov	r2, r3
 800431e:	2320      	movs	r3, #32
 8004320:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f005 fa91 	bl	8009850 <HAL_PCD_DataOutStageCallback>
 800432e:	e01d      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d114      	bne.n	8004360 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004358:	461a      	mov	r2, r3
 800435a:	2100      	movs	r1, #0
 800435c:	f002 ffaa 	bl	80072b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f005 fa72 	bl	8009850 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	4f54300a 	.word	0x4f54300a
 800437c:	4f54310a 	.word	0x4f54310a

08004380 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	333c      	adds	r3, #60	@ 0x3c
 8004398:	3304      	adds	r3, #4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <PCD_EP_OutSetupPacket_int+0x88>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d90e      	bls.n	80043d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	461a      	mov	r2, r3
 80043ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f005 fa29 	bl	800982c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004408 <PCD_EP_OutSetupPacket_int+0x88>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d90c      	bls.n	80043fc <PCD_EP_OutSetupPacket_int+0x7c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	799b      	ldrb	r3, [r3, #6]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d108      	bne.n	80043fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043f4:	461a      	mov	r2, r3
 80043f6:	2101      	movs	r1, #1
 80043f8:	f002 ff5c 	bl	80072b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	4f54300a 	.word	0x4f54300a

0800440c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	70fb      	strb	r3, [r7, #3]
 8004418:	4613      	mov	r3, r2
 800441a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800442a:	883b      	ldrh	r3, [r7, #0]
 800442c:	0419      	lsls	r1, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	430a      	orrs	r2, r1
 8004436:	629a      	str	r2, [r3, #40]	@ 0x28
 8004438:	e028      	b.n	800448c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	4413      	add	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e00d      	b.n	800446a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	3340      	adds	r3, #64	@ 0x40
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	3301      	adds	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
 800446a:	7bfa      	ldrb	r2, [r7, #15]
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	3b01      	subs	r3, #1
 8004470:	429a      	cmp	r2, r3
 8004472:	d3ec      	bcc.n	800444e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004474:	883b      	ldrh	r3, [r7, #0]
 8004476:	0418      	lsls	r0, r3, #16
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6819      	ldr	r1, [r3, #0]
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	3b01      	subs	r3, #1
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	4302      	orrs	r2, r0
 8004484:	3340      	adds	r3, #64	@ 0x40
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	887a      	ldrh	r2, [r7, #2]
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e267      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d075      	beq.n	80045de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044f2:	4b88      	ldr	r3, [pc, #544]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d00c      	beq.n	8004518 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fe:	4b85      	ldr	r3, [pc, #532]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004506:	2b08      	cmp	r3, #8
 8004508:	d112      	bne.n	8004530 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450a:	4b82      	ldr	r3, [pc, #520]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004516:	d10b      	bne.n	8004530 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	4b7e      	ldr	r3, [pc, #504]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d05b      	beq.n	80045dc <HAL_RCC_OscConfig+0x108>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d157      	bne.n	80045dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e242      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004538:	d106      	bne.n	8004548 <HAL_RCC_OscConfig+0x74>
 800453a:	4b76      	ldr	r3, [pc, #472]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a75      	ldr	r2, [pc, #468]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e01d      	b.n	8004584 <HAL_RCC_OscConfig+0xb0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0x98>
 8004552:	4b70      	ldr	r3, [pc, #448]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6f      	ldr	r2, [pc, #444]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b6d      	ldr	r3, [pc, #436]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6c      	ldr	r2, [pc, #432]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0xb0>
 800456c:	4b69      	ldr	r3, [pc, #420]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a68      	ldr	r2, [pc, #416]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b66      	ldr	r3, [pc, #408]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a65      	ldr	r2, [pc, #404]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 800457e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fd fe94 	bl	80022b8 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fd fe90 	bl	80022b8 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	@ 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e207      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0xc0>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fd fe80 	bl	80022b8 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fd fe7c 	bl	80022b8 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	@ 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1f3      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	4b51      	ldr	r3, [pc, #324]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0xe8>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d063      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f6:	4b47      	ldr	r3, [pc, #284]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004602:	4b44      	ldr	r3, [pc, #272]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	4b41      	ldr	r3, [pc, #260]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x152>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e1c7      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b3b      	ldr	r3, [pc, #236]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4937      	ldr	r1, [pc, #220]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004644:	4b34      	ldr	r3, [pc, #208]	@ (8004718 <HAL_RCC_OscConfig+0x244>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fd fe35 	bl	80022b8 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004652:	f7fd fe31 	bl	80022b8 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1a8      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	4b2b      	ldr	r3, [pc, #172]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004670:	4b28      	ldr	r3, [pc, #160]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4925      	ldr	r1, [pc, #148]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004686:	4b24      	ldr	r3, [pc, #144]	@ (8004718 <HAL_RCC_OscConfig+0x244>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fd fe14 	bl	80022b8 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004694:	f7fd fe10 	bl	80022b8 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e187      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d036      	beq.n	800472c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c6:	4b15      	ldr	r3, [pc, #84]	@ (800471c <HAL_RCC_OscConfig+0x248>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fd fdf4 	bl	80022b8 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fd fdf0 	bl	80022b8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e167      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <HAL_RCC_OscConfig+0x240>)
 80046e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x200>
 80046f2:	e01b      	b.n	800472c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f4:	4b09      	ldr	r3, [pc, #36]	@ (800471c <HAL_RCC_OscConfig+0x248>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fa:	f7fd fddd 	bl	80022b8 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	e00e      	b.n	8004720 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004702:	f7fd fdd9 	bl	80022b8 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d907      	bls.n	8004720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e150      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
 8004714:	40023800 	.word	0x40023800
 8004718:	42470000 	.word	0x42470000
 800471c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004720:	4b88      	ldr	r3, [pc, #544]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 8004722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ea      	bne.n	8004702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8097 	beq.w	8004868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473e:	4b81      	ldr	r3, [pc, #516]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	4b7d      	ldr	r3, [pc, #500]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	4a7c      	ldr	r2, [pc, #496]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	@ 0x40
 800475a:	4b7a      	ldr	r3, [pc, #488]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476a:	4b77      	ldr	r3, [pc, #476]	@ (8004948 <HAL_RCC_OscConfig+0x474>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004776:	4b74      	ldr	r3, [pc, #464]	@ (8004948 <HAL_RCC_OscConfig+0x474>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a73      	ldr	r2, [pc, #460]	@ (8004948 <HAL_RCC_OscConfig+0x474>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004782:	f7fd fd99 	bl	80022b8 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fd fd95 	bl	80022b8 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e10c      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	4b6a      	ldr	r3, [pc, #424]	@ (8004948 <HAL_RCC_OscConfig+0x474>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x2ea>
 80047b0:	4b64      	ldr	r3, [pc, #400]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b4:	4a63      	ldr	r2, [pc, #396]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80047bc:	e01c      	b.n	80047f8 <HAL_RCC_OscConfig+0x324>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x30c>
 80047c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80047cc:	f043 0304 	orr.w	r3, r3, #4
 80047d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0x324>
 80047e0:	4b58      	ldr	r3, [pc, #352]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e4:	4a57      	ldr	r2, [pc, #348]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ec:	4b55      	ldr	r3, [pc, #340]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f0:	4a54      	ldr	r2, [pc, #336]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80047f2:	f023 0304 	bic.w	r3, r3, #4
 80047f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fd fd5a 	bl	80022b8 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fd fd56 	bl	80022b8 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0cb      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481e:	4b49      	ldr	r3, [pc, #292]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0ee      	beq.n	8004808 <HAL_RCC_OscConfig+0x334>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482c:	f7fd fd44 	bl	80022b8 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004832:	e00a      	b.n	800484a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fd fd40 	bl	80022b8 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0b5      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484a:	4b3e      	ldr	r3, [pc, #248]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ee      	bne.n	8004834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d105      	bne.n	8004868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485c:	4b39      	ldr	r3, [pc, #228]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	4a38      	ldr	r2, [pc, #224]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004866:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80a1 	beq.w	80049b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004872:	4b34      	ldr	r3, [pc, #208]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b08      	cmp	r3, #8
 800487c:	d05c      	beq.n	8004938 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d141      	bne.n	800490a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b31      	ldr	r3, [pc, #196]	@ (800494c <HAL_RCC_OscConfig+0x478>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fd fd14 	bl	80022b8 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004894:	f7fd fd10 	bl	80022b8 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e087      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	4b27      	ldr	r3, [pc, #156]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	019b      	lsls	r3, r3, #6
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	085b      	lsrs	r3, r3, #1
 80048ca:	3b01      	subs	r3, #1
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	491b      	ldr	r1, [pc, #108]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048dc:	4b1b      	ldr	r3, [pc, #108]	@ (800494c <HAL_RCC_OscConfig+0x478>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e2:	f7fd fce9 	bl	80022b8 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fd fce5 	bl	80022b8 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e05c      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fc:	4b11      	ldr	r3, [pc, #68]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x416>
 8004908:	e054      	b.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b10      	ldr	r3, [pc, #64]	@ (800494c <HAL_RCC_OscConfig+0x478>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fd fcd2 	bl	80022b8 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004918:	f7fd fcce 	bl	80022b8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e045      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <HAL_RCC_OscConfig+0x470>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x444>
 8004936:	e03d      	b.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e038      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
 8004944:	40023800 	.word	0x40023800
 8004948:	40007000 	.word	0x40007000
 800494c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004950:	4b1b      	ldr	r3, [pc, #108]	@ (80049c0 <HAL_RCC_OscConfig+0x4ec>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d028      	beq.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d121      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d11a      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004988:	4293      	cmp	r3, r2
 800498a:	d111      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	3b01      	subs	r3, #1
 800499a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800

080049c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0cc      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049d8:	4b68      	ldr	r3, [pc, #416]	@ (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d90c      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b65      	ldr	r3, [pc, #404]	@ (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b63      	ldr	r3, [pc, #396]	@ (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0b8      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a18:	4b59      	ldr	r3, [pc, #356]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a58      	ldr	r2, [pc, #352]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a30:	4b53      	ldr	r3, [pc, #332]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4a52      	ldr	r2, [pc, #328]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a3c:	4b50      	ldr	r3, [pc, #320]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	494d      	ldr	r1, [pc, #308]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d044      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	4b47      	ldr	r3, [pc, #284]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d119      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e07f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d003      	beq.n	8004a82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d107      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a82:	4b3f      	ldr	r3, [pc, #252]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a92:	4b3b      	ldr	r3, [pc, #236]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e067      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa2:	4b37      	ldr	r3, [pc, #220]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 0203 	bic.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4934      	ldr	r1, [pc, #208]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab4:	f7fd fc00 	bl	80022b8 <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fd fbfc 	bl	80022b8 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e04f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 020c 	and.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d1eb      	bne.n	8004abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b25      	ldr	r3, [pc, #148]	@ (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d20c      	bcs.n	8004b0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b22      	ldr	r3, [pc, #136]	@ (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b20      	ldr	r3, [pc, #128]	@ (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e032      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b18:	4b19      	ldr	r3, [pc, #100]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4916      	ldr	r1, [pc, #88]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b36:	4b12      	ldr	r3, [pc, #72]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	490e      	ldr	r1, [pc, #56]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b4a:	f000 f821 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	490a      	ldr	r1, [pc, #40]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004b5c:	5ccb      	ldrb	r3, [r1, r3]
 8004b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b62:	4a09      	ldr	r2, [pc, #36]	@ (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b66:	4b09      	ldr	r3, [pc, #36]	@ (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fd fb60 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023c00 	.word	0x40023c00
 8004b80:	40023800 	.word	0x40023800
 8004b84:	0800cdf0 	.word	0x0800cdf0
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	20000004 	.word	0x20000004

08004b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b094      	sub	sp, #80	@ 0x50
 8004b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ba8:	4b79      	ldr	r3, [pc, #484]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	f200 80e1 	bhi.w	8004d7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x3a>
 8004bc2:	e0db      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc4:	4b73      	ldr	r3, [pc, #460]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bc8:	e0db      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bca:	4b72      	ldr	r3, [pc, #456]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bce:	e0d8      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bda:	4b6d      	ldr	r3, [pc, #436]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d063      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	2200      	movs	r2, #0
 8004bee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c02:	4622      	mov	r2, r4
 8004c04:	462b      	mov	r3, r5
 8004c06:	f04f 0000 	mov.w	r0, #0
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	0159      	lsls	r1, r3, #5
 8004c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c14:	0150      	lsls	r0, r2, #5
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	1a51      	subs	r1, r2, r1
 8004c1e:	6139      	str	r1, [r7, #16]
 8004c20:	4629      	mov	r1, r5
 8004c22:	eb63 0301 	sbc.w	r3, r3, r1
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c34:	4659      	mov	r1, fp
 8004c36:	018b      	lsls	r3, r1, #6
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c3e:	4651      	mov	r1, sl
 8004c40:	018a      	lsls	r2, r1, #6
 8004c42:	4651      	mov	r1, sl
 8004c44:	ebb2 0801 	subs.w	r8, r2, r1
 8004c48:	4659      	mov	r1, fp
 8004c4a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c62:	4690      	mov	r8, r2
 8004c64:	4699      	mov	r9, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	eb18 0303 	adds.w	r3, r8, r3
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	462b      	mov	r3, r5
 8004c70:	eb49 0303 	adc.w	r3, r9, r3
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c82:	4629      	mov	r1, r5
 8004c84:	028b      	lsls	r3, r1, #10
 8004c86:	4621      	mov	r1, r4
 8004c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	028a      	lsls	r2, r1, #10
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c96:	2200      	movs	r2, #0
 8004c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ca0:	f7fb ffd2 	bl	8000c48 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cac:	e058      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cae:	4b38      	ldr	r3, [pc, #224]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	4611      	mov	r1, r2
 8004cba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	f04f 0000 	mov.w	r0, #0
 8004cd0:	f04f 0100 	mov.w	r1, #0
 8004cd4:	0159      	lsls	r1, r3, #5
 8004cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cda:	0150      	lsls	r0, r2, #5
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d00:	ebb2 040a 	subs.w	r4, r2, sl
 8004d04:	eb63 050b 	sbc.w	r5, r3, fp
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	00eb      	lsls	r3, r5, #3
 8004d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d16:	00e2      	lsls	r2, r4, #3
 8004d18:	4614      	mov	r4, r2
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	4643      	mov	r3, r8
 8004d1e:	18e3      	adds	r3, r4, r3
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	464b      	mov	r3, r9
 8004d24:	eb45 0303 	adc.w	r3, r5, r3
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d36:	4629      	mov	r1, r5
 8004d38:	028b      	lsls	r3, r1, #10
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d40:	4621      	mov	r1, r4
 8004d42:	028a      	lsls	r2, r1, #10
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	61fa      	str	r2, [r7, #28]
 8004d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d54:	f7fb ff78 	bl	8000c48 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d60:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d7a:	e002      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3750      	adds	r7, #80	@ 0x50
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800
 8004d94:	00f42400 	.word	0x00f42400

08004d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d9c:	4b03      	ldr	r3, [pc, #12]	@ (8004dac <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000000 	.word	0x20000000

08004db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e07b      	b.n	8004eba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d108      	bne.n	8004ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd2:	d009      	beq.n	8004de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61da      	str	r2, [r3, #28]
 8004dda:	e005      	b.n	8004de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc ffd4 	bl	8001db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e6c:	ea42 0103 	orr.w	r1, r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	f003 0104 	and.w	r1, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	f003 0210 	and.w	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b088      	sub	sp, #32
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed2:	f7fd f9f1 	bl	80022b8 <HAL_GetTick>
 8004ed6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d001      	beq.n	8004eec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e12a      	b.n	8005142 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_SPI_Transmit+0x36>
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e122      	b.n	8005142 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_SPI_Transmit+0x48>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e11b      	b.n	8005142 <HAL_SPI_Transmit+0x280>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2203      	movs	r2, #3
 8004f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	88fa      	ldrh	r2, [r7, #6]
 8004f2a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	88fa      	ldrh	r2, [r7, #6]
 8004f30:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f58:	d10f      	bne.n	8004f7a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f84:	2b40      	cmp	r3, #64	@ 0x40
 8004f86:	d007      	beq.n	8004f98 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa0:	d152      	bne.n	8005048 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_SPI_Transmit+0xee>
 8004faa:	8b7b      	ldrh	r3, [r7, #26]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d145      	bne.n	800503c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	881a      	ldrh	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fd4:	e032      	b.n	800503c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d112      	bne.n	800500a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe8:	881a      	ldrh	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff4:	1c9a      	adds	r2, r3, #2
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005008:	e018      	b.n	800503c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800500a:	f7fd f955 	bl	80022b8 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d803      	bhi.n	8005022 <HAL_SPI_Transmit+0x160>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d102      	bne.n	8005028 <HAL_SPI_Transmit+0x166>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e082      	b.n	8005142 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1c7      	bne.n	8004fd6 <HAL_SPI_Transmit+0x114>
 8005046:	e053      	b.n	80050f0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_SPI_Transmit+0x194>
 8005050:	8b7b      	ldrh	r3, [r7, #26]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d147      	bne.n	80050e6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	7812      	ldrb	r2, [r2, #0]
 8005062:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800507c:	e033      	b.n	80050e6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b02      	cmp	r3, #2
 800508a:	d113      	bne.n	80050b4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	330c      	adds	r3, #12
 8005096:	7812      	ldrb	r2, [r2, #0]
 8005098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050b2:	e018      	b.n	80050e6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050b4:	f7fd f900 	bl	80022b8 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d803      	bhi.n	80050cc <HAL_SPI_Transmit+0x20a>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d102      	bne.n	80050d2 <HAL_SPI_Transmit+0x210>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e02d      	b.n	8005142 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1c6      	bne.n	800507e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	6839      	ldr	r1, [r7, #0]
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fdd1 	bl	8005c9c <SPI_EndRxTxTransaction>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005140:	2300      	movs	r3, #0
  }
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b08a      	sub	sp, #40	@ 0x28
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005158:	2301      	movs	r3, #1
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800515c:	f7fd f8ac 	bl	80022b8 <HAL_GetTick>
 8005160:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005168:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005170:	887b      	ldrh	r3, [r7, #2]
 8005172:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005174:	7ffb      	ldrb	r3, [r7, #31]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d00c      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x4a>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005180:	d106      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d102      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x46>
 800518a:	7ffb      	ldrb	r3, [r7, #31]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d001      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
 8005192:	e17f      	b.n	8005494 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_SPI_TransmitReceive+0x5c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_SPI_TransmitReceive+0x5c>
 80051a0:	887b      	ldrh	r3, [r7, #2]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e174      	b.n	8005494 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_SPI_TransmitReceive+0x6e>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e16d      	b.n	8005494 <HAL_SPI_TransmitReceive+0x34a>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d003      	beq.n	80051d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2205      	movs	r2, #5
 80051d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	887a      	ldrh	r2, [r7, #2]
 80051e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	887a      	ldrh	r2, [r7, #2]
 80051ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	887a      	ldrh	r2, [r7, #2]
 80051f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	887a      	ldrh	r2, [r7, #2]
 80051fc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005214:	2b40      	cmp	r3, #64	@ 0x40
 8005216:	d007      	beq.n	8005228 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005226:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005230:	d17e      	bne.n	8005330 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_SPI_TransmitReceive+0xf6>
 800523a:	8afb      	ldrh	r3, [r7, #22]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d16c      	bne.n	800531a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005244:	881a      	ldrh	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	1c9a      	adds	r2, r3, #2
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005264:	e059      	b.n	800531a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b02      	cmp	r3, #2
 8005272:	d11b      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x162>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <HAL_SPI_TransmitReceive+0x162>
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	2b01      	cmp	r3, #1
 8005282:	d113      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005288:	881a      	ldrh	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005294:	1c9a      	adds	r2, r3, #2
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d119      	bne.n	80052ee <HAL_SPI_TransmitReceive+0x1a4>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d014      	beq.n	80052ee <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ce:	b292      	uxth	r2, r2
 80052d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d6:	1c9a      	adds	r2, r3, #2
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052ea:	2301      	movs	r3, #1
 80052ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052ee:	f7fc ffe3 	bl	80022b8 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d80d      	bhi.n	800531a <HAL_SPI_TransmitReceive+0x1d0>
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d009      	beq.n	800531a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0bc      	b.n	8005494 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1a0      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x11c>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d19b      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x11c>
 800532e:	e082      	b.n	8005436 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_SPI_TransmitReceive+0x1f4>
 8005338:	8afb      	ldrh	r3, [r7, #22]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d171      	bne.n	8005422 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005364:	e05d      	b.n	8005422 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b02      	cmp	r3, #2
 8005372:	d11c      	bne.n	80053ae <HAL_SPI_TransmitReceive+0x264>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d017      	beq.n	80053ae <HAL_SPI_TransmitReceive+0x264>
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	2b01      	cmp	r3, #1
 8005382:	d114      	bne.n	80053ae <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	7812      	ldrb	r2, [r2, #0]
 8005390:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d119      	bne.n	80053f0 <HAL_SPI_TransmitReceive+0x2a6>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d014      	beq.n	80053f0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053ec:	2301      	movs	r3, #1
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053f0:	f7fc ff62 	bl	80022b8 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d803      	bhi.n	8005408 <HAL_SPI_TransmitReceive+0x2be>
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d102      	bne.n	800540e <HAL_SPI_TransmitReceive+0x2c4>
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e038      	b.n	8005494 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d19c      	bne.n	8005366 <HAL_SPI_TransmitReceive+0x21c>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d197      	bne.n	8005366 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005436:	6a3a      	ldr	r2, [r7, #32]
 8005438:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fc2e 	bl	8005c9c <SPI_EndRxTxTransaction>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2220      	movs	r2, #32
 800544a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e01d      	b.n	8005494 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005492:	2300      	movs	r3, #0
  }
}
 8005494:	4618      	mov	r0, r3
 8005496:	3728      	adds	r7, #40	@ 0x28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054b0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d00c      	beq.n	80054d8 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054c4:	d106      	bne.n	80054d4 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d102      	bne.n	80054d4 <HAL_SPI_TransmitReceive_DMA+0x38>
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d001      	beq.n	80054d8 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
 80054d6:	e0cf      	b.n	8005678 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_SPI_TransmitReceive_DMA+0x4e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_SPI_TransmitReceive_DMA+0x4e>
 80054e4:	887b      	ldrh	r3, [r7, #2]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0c4      	b.n	8005678 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_SPI_TransmitReceive_DMA+0x60>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e0bd      	b.n	8005678 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b04      	cmp	r3, #4
 800550e:	d003      	beq.n	8005518 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2205      	movs	r2, #5
 8005514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	887a      	ldrh	r2, [r7, #2]
 8005528:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	887a      	ldrh	r2, [r7, #2]
 800552e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	887a      	ldrh	r2, [r7, #2]
 800553a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	887a      	ldrh	r2, [r7, #2]
 8005540:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b04      	cmp	r3, #4
 8005558:	d108      	bne.n	800556c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800555e:	4a48      	ldr	r2, [pc, #288]	@ (8005680 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005560:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005566:	4a47      	ldr	r2, [pc, #284]	@ (8005684 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005568:	63da      	str	r2, [r3, #60]	@ 0x3c
 800556a:	e007      	b.n	800557c <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005570:	4a45      	ldr	r2, [pc, #276]	@ (8005688 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005572:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005578:	4a44      	ldr	r2, [pc, #272]	@ (800568c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800557a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005580:	4a43      	ldr	r2, [pc, #268]	@ (8005690 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005582:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005588:	2200      	movs	r2, #0
 800558a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	4619      	mov	r1, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80055a4:	f7fd f878 	bl	8002698 <HAL_DMA_Start_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b2:	f043 0210 	orr.w	r2, r3, #16
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e058      	b.n	8005678 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0201 	orr.w	r2, r2, #1
 80055d4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055da:	2200      	movs	r2, #0
 80055dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055e2:	2200      	movs	r2, #0
 80055e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ea:	2200      	movs	r2, #0
 80055ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f2:	2200      	movs	r2, #0
 80055f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fe:	4619      	mov	r1, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800560c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800560e:	f7fd f843 	bl	8002698 <HAL_DMA_Start_IT>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00b      	beq.n	8005630 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561c:	f043 0210 	orr.w	r2, r3, #16
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e023      	b.n	8005678 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	2b40      	cmp	r3, #64	@ 0x40
 800563c:	d007      	beq.n	800564e <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800564c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0220 	orr.w	r2, r2, #32
 8005664:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0202 	orr.w	r2, r2, #2
 8005674:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	08005a21 	.word	0x08005a21
 8005684:	080058e9 	.word	0x080058e9
 8005688:	08005a3d 	.word	0x08005a3d
 800568c:	08005991 	.word	0x08005991
 8005690:	08005a59 	.word	0x08005a59

08005694 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10e      	bne.n	80056d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
    return;
 80056d2:	e0ce      	b.n	8005872 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <HAL_SPI_IRQHandler+0x5e>
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	4798      	blx	r3
    return;
 80056f0:	e0bf      	b.n	8005872 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <HAL_SPI_IRQHandler+0x7e>
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d105      	bne.n	8005712 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80b0 	beq.w	8005872 <HAL_SPI_IRQHandler+0x1de>
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80aa 	beq.w	8005872 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d023      	beq.n	8005770 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b03      	cmp	r3, #3
 8005732:	d011      	beq.n	8005758 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005738:	f043 0204 	orr.w	r2, r3, #4
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	e00b      	b.n	8005770 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005758:	2300      	movs	r3, #0
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	693b      	ldr	r3, [r7, #16]
        return;
 800576e:	e080      	b.n	8005872 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d014      	beq.n	80057a4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577e:	f043 0201 	orr.w	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00c      	beq.n	80057c8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b2:	f043 0208 	orr.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80057ba:	2300      	movs	r3, #0
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d04f      	beq.n	8005870 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d104      	bne.n	80057fc <HAL_SPI_IRQHandler+0x168>
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d034      	beq.n	8005866 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0203 	bic.w	r2, r2, #3
 800580a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d011      	beq.n	8005838 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005818:	4a17      	ldr	r2, [pc, #92]	@ (8005878 <HAL_SPI_IRQHandler+0x1e4>)
 800581a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005820:	4618      	mov	r0, r3
 8005822:	f7fc ff91 	bl	8002748 <HAL_DMA_Abort_IT>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005830:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800583c:	2b00      	cmp	r3, #0
 800583e:	d016      	beq.n	800586e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005844:	4a0c      	ldr	r2, [pc, #48]	@ (8005878 <HAL_SPI_IRQHandler+0x1e4>)
 8005846:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800584c:	4618      	mov	r0, r3
 800584e:	f7fc ff7b 	bl	8002748 <HAL_DMA_Abort_IT>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005864:	e003      	b.n	800586e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f826 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800586c:	e000      	b.n	8005870 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800586e:	bf00      	nop
    return;
 8005870:	bf00      	nop
  }
}
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	08005a99 	.word	0x08005a99

0800587c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058da:	b2db      	uxtb	r3, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058f6:	f7fc fcdf 	bl	80022b8 <HAL_GetTick>
 80058fa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590a:	d03b      	beq.n	8005984 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0220 	bic.w	r2, r2, #32
 800591a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10d      	bne.n	8005940 <SPI_DMAReceiveCplt+0x58>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800592c:	d108      	bne.n	8005940 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0203 	bic.w	r2, r2, #3
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	e007      	b.n	8005950 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	2164      	movs	r1, #100	@ 0x64
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f93b 	bl	8005bd0 <SPI_EndRxTransaction>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f7ff ff9b 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005982:	e002      	b.n	800598a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff ff79 	bl	800587c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800599e:	f7fc fc8b 	bl	80022b8 <HAL_GetTick>
 80059a2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059b2:	d02f      	beq.n	8005a14 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0220 	bic.w	r2, r2, #32
 80059c2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	2164      	movs	r1, #100	@ 0x64
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f967 	bl	8005c9c <SPI_EndRxTxTransaction>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0203 	bic.w	r2, r2, #3
 80059ee:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff ff53 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005a12:	e002      	b.n	8005a1a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f7fb ff6d 	bl	80018f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff ff2e 	bl	8005890 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff ff2a 	bl	80058a4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a50:	bf00      	nop
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0203 	bic.w	r2, r2, #3
 8005a74:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a7a:	f043 0210 	orr.w	r2, r3, #16
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff ff14 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f7ff ff00 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ad0:	f7fc fbf2 	bl	80022b8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	4413      	add	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ae0:	f7fc fbea 	bl	80022b8 <HAL_GetTick>
 8005ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ae6:	4b39      	ldr	r3, [pc, #228]	@ (8005bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	015b      	lsls	r3, r3, #5
 8005aec:	0d1b      	lsrs	r3, r3, #20
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005af6:	e054      	b.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afe:	d050      	beq.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b00:	f7fc fbda 	bl	80022b8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d902      	bls.n	8005b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d13d      	bne.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b2e:	d111      	bne.n	8005b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b38:	d004      	beq.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b42:	d107      	bne.n	8005b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b5c:	d10f      	bne.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e017      	b.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4013      	ands	r3, r2
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d19b      	bne.n	8005af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000000 	.word	0x20000000

08005bd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005be4:	d111      	bne.n	8005c0a <SPI_EndRxTransaction+0x3a>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bee:	d004      	beq.n	8005bfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bf8:	d107      	bne.n	8005c0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c12:	d12a      	bne.n	8005c6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1c:	d012      	beq.n	8005c44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2200      	movs	r2, #0
 8005c26:	2180      	movs	r1, #128	@ 0x80
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff ff49 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d02d      	beq.n	8005c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c38:	f043 0220 	orr.w	r2, r3, #32
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e026      	b.n	8005c92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff ff36 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01a      	beq.n	8005c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5e:	f043 0220 	orr.w	r2, r3, #32
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e013      	b.n	8005c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2200      	movs	r2, #0
 8005c72:	2101      	movs	r1, #1
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7ff ff23 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c84:	f043 0220 	orr.w	r2, r3, #32
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e000      	b.n	8005c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff ff04 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc2:	f043 0220 	orr.w	r2, r3, #32
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e032      	b.n	8005d34 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cce:	4b1b      	ldr	r3, [pc, #108]	@ (8005d3c <SPI_EndRxTxTransaction+0xa0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d40 <SPI_EndRxTxTransaction+0xa4>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	0d5b      	lsrs	r3, r3, #21
 8005cda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cec:	d112      	bne.n	8005d14 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2180      	movs	r1, #128	@ 0x80
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff fee1 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d016      	beq.n	8005d32 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e00f      	b.n	8005d34 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2a:	2b80      	cmp	r3, #128	@ 0x80
 8005d2c:	d0f2      	beq.n	8005d14 <SPI_EndRxTxTransaction+0x78>
 8005d2e:	e000      	b.n	8005d32 <SPI_EndRxTxTransaction+0x96>
        break;
 8005d30:	bf00      	nop
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000000 	.word	0x20000000
 8005d40:	165e9f81 	.word	0x165e9f81

08005d44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d44:	b084      	sub	sp, #16
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	f107 001c 	add.w	r0, r7, #28
 8005d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d56:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d123      	bne.n	8005da6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d105      	bne.n	8005d9a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fae8 	bl	8007370 <USB_CoreReset>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]
 8005da4:	e01b      	b.n	8005dde <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f001 fadc 	bl	8007370 <USB_CoreReset>
 8005db8:	4603      	mov	r3, r0
 8005dba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dbc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	639a      	str	r2, [r3, #56]	@ 0x38
 8005dd0:	e005      	b.n	8005dde <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005dde:	7fbb      	ldrb	r3, [r7, #30]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d10b      	bne.n	8005dfc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f043 0206 	orr.w	r2, r3, #6
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e08:	b004      	add	sp, #16
 8005e0a:	4770      	bx	lr

08005e0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d165      	bne.n	8005eec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4a41      	ldr	r2, [pc, #260]	@ (8005f28 <USB_SetTurnaroundTime+0x11c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d906      	bls.n	8005e36 <USB_SetTurnaroundTime+0x2a>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4a40      	ldr	r2, [pc, #256]	@ (8005f2c <USB_SetTurnaroundTime+0x120>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d202      	bcs.n	8005e36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e30:	230f      	movs	r3, #15
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	e062      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4a3c      	ldr	r2, [pc, #240]	@ (8005f2c <USB_SetTurnaroundTime+0x120>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d306      	bcc.n	8005e4c <USB_SetTurnaroundTime+0x40>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	4a3b      	ldr	r2, [pc, #236]	@ (8005f30 <USB_SetTurnaroundTime+0x124>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d202      	bcs.n	8005e4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e46:	230e      	movs	r3, #14
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e057      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a38      	ldr	r2, [pc, #224]	@ (8005f30 <USB_SetTurnaroundTime+0x124>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d306      	bcc.n	8005e62 <USB_SetTurnaroundTime+0x56>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4a37      	ldr	r2, [pc, #220]	@ (8005f34 <USB_SetTurnaroundTime+0x128>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d202      	bcs.n	8005e62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e5c:	230d      	movs	r3, #13
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e04c      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4a33      	ldr	r2, [pc, #204]	@ (8005f34 <USB_SetTurnaroundTime+0x128>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d306      	bcc.n	8005e78 <USB_SetTurnaroundTime+0x6c>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4a32      	ldr	r2, [pc, #200]	@ (8005f38 <USB_SetTurnaroundTime+0x12c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d802      	bhi.n	8005e78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e72:	230c      	movs	r3, #12
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e041      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8005f38 <USB_SetTurnaroundTime+0x12c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d906      	bls.n	8005e8e <USB_SetTurnaroundTime+0x82>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4a2e      	ldr	r2, [pc, #184]	@ (8005f3c <USB_SetTurnaroundTime+0x130>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d802      	bhi.n	8005e8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e88:	230b      	movs	r3, #11
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	e036      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4a2a      	ldr	r2, [pc, #168]	@ (8005f3c <USB_SetTurnaroundTime+0x130>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d906      	bls.n	8005ea4 <USB_SetTurnaroundTime+0x98>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4a29      	ldr	r2, [pc, #164]	@ (8005f40 <USB_SetTurnaroundTime+0x134>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d802      	bhi.n	8005ea4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e9e:	230a      	movs	r3, #10
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e02b      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a26      	ldr	r2, [pc, #152]	@ (8005f40 <USB_SetTurnaroundTime+0x134>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d906      	bls.n	8005eba <USB_SetTurnaroundTime+0xae>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4a25      	ldr	r2, [pc, #148]	@ (8005f44 <USB_SetTurnaroundTime+0x138>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d202      	bcs.n	8005eba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005eb4:	2309      	movs	r3, #9
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e020      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4a21      	ldr	r2, [pc, #132]	@ (8005f44 <USB_SetTurnaroundTime+0x138>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d306      	bcc.n	8005ed0 <USB_SetTurnaroundTime+0xc4>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4a20      	ldr	r2, [pc, #128]	@ (8005f48 <USB_SetTurnaroundTime+0x13c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d802      	bhi.n	8005ed0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005eca:	2308      	movs	r3, #8
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e015      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f48 <USB_SetTurnaroundTime+0x13c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d906      	bls.n	8005ee6 <USB_SetTurnaroundTime+0xda>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4a1c      	ldr	r2, [pc, #112]	@ (8005f4c <USB_SetTurnaroundTime+0x140>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d202      	bcs.n	8005ee6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ee0:	2307      	movs	r3, #7
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e00a      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ee6:	2306      	movs	r3, #6
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	e007      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ef2:	2309      	movs	r3, #9
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e001      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ef8:	2309      	movs	r3, #9
 8005efa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005f14:	431a      	orrs	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	00d8acbf 	.word	0x00d8acbf
 8005f2c:	00e4e1c0 	.word	0x00e4e1c0
 8005f30:	00f42400 	.word	0x00f42400
 8005f34:	01067380 	.word	0x01067380
 8005f38:	011a499f 	.word	0x011a499f
 8005f3c:	01312cff 	.word	0x01312cff
 8005f40:	014ca43f 	.word	0x014ca43f
 8005f44:	016e3600 	.word	0x016e3600
 8005f48:	01a6ab1f 	.word	0x01a6ab1f
 8005f4c:	01e84800 	.word	0x01e84800

08005f50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f043 0201 	orr.w	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f023 0201 	bic.w	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d115      	bne.n	8005fe2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fc2:	200a      	movs	r0, #10
 8005fc4:	f7fc f984 	bl	80022d0 <HAL_Delay>
      ms += 10U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	330a      	adds	r3, #10
 8005fcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 f93f 	bl	8007252 <USB_GetMode>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d01e      	beq.n	8006018 <USB_SetCurrentMode+0x84>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fde:	d9f0      	bls.n	8005fc2 <USB_SetCurrentMode+0x2e>
 8005fe0:	e01a      	b.n	8006018 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d115      	bne.n	8006014 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ff4:	200a      	movs	r0, #10
 8005ff6:	f7fc f96b 	bl	80022d0 <HAL_Delay>
      ms += 10U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	330a      	adds	r3, #10
 8005ffe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 f926 	bl	8007252 <USB_GetMode>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <USB_SetCurrentMode+0x84>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006010:	d9f0      	bls.n	8005ff4 <USB_SetCurrentMode+0x60>
 8006012:	e001      	b.n	8006018 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e005      	b.n	8006024 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2bc8      	cmp	r3, #200	@ 0xc8
 800601c:	d101      	bne.n	8006022 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800602c:	b084      	sub	sp, #16
 800602e:	b580      	push	{r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800603a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	e009      	b.n	8006060 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	3340      	adds	r3, #64	@ 0x40
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	2200      	movs	r2, #0
 8006058:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3301      	adds	r3, #1
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b0e      	cmp	r3, #14
 8006064:	d9f2      	bls.n	800604c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006066:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800606a:	2b00      	cmp	r3, #0
 800606c:	d11c      	bne.n	80060a8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800607c:	f043 0302 	orr.w	r3, r3, #2
 8006080:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006086:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006092:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80060a6:	e00b      	b.n	80060c0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060c6:	461a      	mov	r2, r3
 80060c8:	2300      	movs	r3, #0
 80060ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d10d      	bne.n	80060f0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d104      	bne.n	80060e6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060dc:	2100      	movs	r1, #0
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f968 	bl	80063b4 <USB_SetDevSpeed>
 80060e4:	e008      	b.n	80060f8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060e6:	2101      	movs	r1, #1
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f963 	bl	80063b4 <USB_SetDevSpeed>
 80060ee:	e003      	b.n	80060f8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060f0:	2103      	movs	r1, #3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f95e 	bl	80063b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060f8:	2110      	movs	r1, #16
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f8fa 	bl	80062f4 <USB_FlushTxFifo>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f924 	bl	8006358 <USB_FlushRxFifo>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006120:	461a      	mov	r2, r3
 8006122:	2300      	movs	r3, #0
 8006124:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800612c:	461a      	mov	r2, r3
 800612e:	2300      	movs	r3, #0
 8006130:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006138:	461a      	mov	r2, r3
 800613a:	2300      	movs	r3, #0
 800613c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	e043      	b.n	80061cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006156:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800615a:	d118      	bne.n	800618e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616e:	461a      	mov	r2, r3
 8006170:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	e013      	b.n	80061a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006184:	461a      	mov	r2, r3
 8006186:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e008      	b.n	80061a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800619a:	461a      	mov	r2, r3
 800619c:	2300      	movs	r3, #0
 800619e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ac:	461a      	mov	r2, r3
 80061ae:	2300      	movs	r3, #0
 80061b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061be:	461a      	mov	r2, r3
 80061c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3301      	adds	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80061d0:	461a      	mov	r2, r3
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d3b5      	bcc.n	8006144 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061d8:	2300      	movs	r3, #0
 80061da:	613b      	str	r3, [r7, #16]
 80061dc:	e043      	b.n	8006266 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061f4:	d118      	bne.n	8006228 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006208:	461a      	mov	r2, r3
 800620a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	e013      	b.n	800623a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800621e:	461a      	mov	r2, r3
 8006220:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e008      	b.n	800623a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006234:	461a      	mov	r2, r3
 8006236:	2300      	movs	r3, #0
 8006238:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006246:	461a      	mov	r2, r3
 8006248:	2300      	movs	r3, #0
 800624a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006258:	461a      	mov	r2, r3
 800625a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800625e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	3301      	adds	r3, #1
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800626a:	461a      	mov	r2, r3
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4293      	cmp	r3, r2
 8006270:	d3b5      	bcc.n	80061de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006284:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006292:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006294:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	f043 0210 	orr.w	r2, r3, #16
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	4b10      	ldr	r3, [pc, #64]	@ (80062f0 <USB_DevInit+0x2c4>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	f043 0208 	orr.w	r2, r3, #8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d107      	bne.n	80062e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062d8:	f043 0304 	orr.w	r3, r3, #4
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062ec:	b004      	add	sp, #16
 80062ee:	4770      	bx	lr
 80062f0:	803c3800 	.word	0x803c3800

080062f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3301      	adds	r3, #1
 8006306:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800630e:	d901      	bls.n	8006314 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e01b      	b.n	800634c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	daf2      	bge.n	8006302 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	019b      	lsls	r3, r3, #6
 8006324:	f043 0220 	orr.w	r2, r3, #32
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006338:	d901      	bls.n	800633e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e006      	b.n	800634c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b20      	cmp	r3, #32
 8006348:	d0f0      	beq.n	800632c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3301      	adds	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006370:	d901      	bls.n	8006376 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e018      	b.n	80063a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	daf2      	bge.n	8006364 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2210      	movs	r2, #16
 8006386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006394:	d901      	bls.n	800639a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e006      	b.n	80063a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	2b10      	cmp	r3, #16
 80063a4:	d0f0      	beq.n	8006388 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	68f9      	ldr	r1, [r7, #12]
 80063d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063d4:	4313      	orrs	r3, r2
 80063d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b087      	sub	sp, #28
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0306 	and.w	r3, r3, #6
 80063fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]
 800640a:	e00a      	b.n	8006422 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d002      	beq.n	8006418 <USB_GetDevSpeed+0x32>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b06      	cmp	r3, #6
 8006416:	d102      	bne.n	800641e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006418:	2302      	movs	r3, #2
 800641a:	75fb      	strb	r3, [r7, #23]
 800641c:	e001      	b.n	8006422 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800641e:	230f      	movs	r3, #15
 8006420:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
}
 8006424:	4618      	mov	r0, r3
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d13a      	bne.n	80064c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	2101      	movs	r1, #1
 800645e:	fa01 f303 	lsl.w	r3, r1, r3
 8006462:	b29b      	uxth	r3, r3
 8006464:	68f9      	ldr	r1, [r7, #12]
 8006466:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800646a:	4313      	orrs	r3, r2
 800646c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d155      	bne.n	8006530 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	791b      	ldrb	r3, [r3, #4]
 800649e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	059b      	lsls	r3, r3, #22
 80064a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064a8:	4313      	orrs	r3, r2
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	e036      	b.n	8006530 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c8:	69da      	ldr	r2, [r3, #28]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	2101      	movs	r1, #1
 80064d4:	fa01 f303 	lsl.w	r3, r1, r3
 80064d8:	041b      	lsls	r3, r3, #16
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064e0:	4313      	orrs	r3, r2
 80064e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d11a      	bne.n	8006530 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	791b      	ldrb	r3, [r3, #4]
 8006514:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006516:	430b      	orrs	r3, r1
 8006518:	4313      	orrs	r3, r2
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800652a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800652e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d161      	bne.n	8006620 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800656e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006572:	d11f      	bne.n	80065b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800658e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006592:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	2101      	movs	r1, #1
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	43db      	mvns	r3, r3
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065d4:	4013      	ands	r3, r2
 80065d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	2101      	movs	r1, #1
 80065ea:	fa01 f303 	lsl.w	r3, r1, r3
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	43db      	mvns	r3, r3
 80065f2:	68f9      	ldr	r1, [r7, #12]
 80065f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065f8:	4013      	ands	r3, r2
 80065fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	0159      	lsls	r1, r3, #5
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	440b      	add	r3, r1
 8006612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006616:	4619      	mov	r1, r3
 8006618:	4b35      	ldr	r3, [pc, #212]	@ (80066f0 <USB_DeactivateEndpoint+0x1b0>)
 800661a:	4013      	ands	r3, r2
 800661c:	600b      	str	r3, [r1, #0]
 800661e:	e060      	b.n	80066e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006632:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006636:	d11f      	bne.n	8006678 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006652:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006656:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006672:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006676:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800667e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	2101      	movs	r1, #1
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	43db      	mvns	r3, r3
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006698:	4013      	ands	r3, r2
 800669a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	2101      	movs	r1, #1
 80066ae:	fa01 f303 	lsl.w	r3, r1, r3
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	43db      	mvns	r3, r3
 80066b6:	68f9      	ldr	r1, [r7, #12]
 80066b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066bc:	4013      	ands	r3, r2
 80066be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	0159      	lsls	r1, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	440b      	add	r3, r1
 80066d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066da:	4619      	mov	r1, r3
 80066dc:	4b05      	ldr	r3, [pc, #20]	@ (80066f4 <USB_DeactivateEndpoint+0x1b4>)
 80066de:	4013      	ands	r3, r2
 80066e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	ec337800 	.word	0xec337800
 80066f4:	eff37800 	.word	0xeff37800

080066f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08a      	sub	sp, #40	@ 0x28
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4613      	mov	r3, r2
 8006704:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b01      	cmp	r3, #1
 8006716:	f040 817f 	bne.w	8006a18 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d132      	bne.n	8006788 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	0151      	lsls	r1, r2, #5
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	440a      	add	r2, r1
 8006738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800673c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006740:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006744:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	0151      	lsls	r1, r2, #5
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	440a      	add	r2, r1
 800675c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006760:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006764:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006780:	0cdb      	lsrs	r3, r3, #19
 8006782:	04db      	lsls	r3, r3, #19
 8006784:	6113      	str	r3, [r2, #16]
 8006786:	e097      	b.n	80068b8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a2:	0cdb      	lsrs	r3, r3, #19
 80067a4:	04db      	lsls	r3, r3, #19
 80067a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d11a      	bne.n	8006808 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d903      	bls.n	80067e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006800:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006804:	6113      	str	r3, [r2, #16]
 8006806:	e044      	b.n	8006892 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	4413      	add	r3, r2
 8006812:	1e5a      	subs	r2, r3, #1
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	8afb      	ldrh	r3, [r7, #22]
 800682e:	04d9      	lsls	r1, r3, #19
 8006830:	4ba4      	ldr	r3, [pc, #656]	@ (8006ac4 <USB_EPStartXfer+0x3cc>)
 8006832:	400b      	ands	r3, r1
 8006834:	69b9      	ldr	r1, [r7, #24]
 8006836:	0148      	lsls	r0, r1, #5
 8006838:	69f9      	ldr	r1, [r7, #28]
 800683a:	4401      	add	r1, r0
 800683c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006840:	4313      	orrs	r3, r2
 8006842:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	791b      	ldrb	r3, [r3, #4]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d122      	bne.n	8006892 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006866:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800686a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	8afb      	ldrh	r3, [r7, #22]
 800687c:	075b      	lsls	r3, r3, #29
 800687e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006882:	69b9      	ldr	r1, [r7, #24]
 8006884:	0148      	lsls	r0, r1, #5
 8006886:	69f9      	ldr	r1, [r7, #28]
 8006888:	4401      	add	r1, r0
 800688a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800688e:	4313      	orrs	r3, r2
 8006890:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a8:	69b9      	ldr	r1, [r7, #24]
 80068aa:	0148      	lsls	r0, r1, #5
 80068ac:	69f9      	ldr	r1, [r7, #28]
 80068ae:	4401      	add	r1, r0
 80068b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068b4:	4313      	orrs	r3, r2
 80068b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d14b      	bne.n	8006956 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d2:	461a      	mov	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	791b      	ldrb	r3, [r3, #4]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d128      	bne.n	8006934 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d110      	bne.n	8006914 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800690c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	e00f      	b.n	8006934 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	440a      	add	r2, r1
 800692a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800692e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006932:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	440a      	add	r2, r1
 800694a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800694e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	e166      	b.n	8006c24 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	440a      	add	r2, r1
 800696c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006970:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006974:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	791b      	ldrb	r3, [r3, #4]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d015      	beq.n	80069aa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 814e 	beq.w	8006c24 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800698e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	2101      	movs	r1, #1
 800699a:	fa01 f303 	lsl.w	r3, r1, r3
 800699e:	69f9      	ldr	r1, [r7, #28]
 80069a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069a4:	4313      	orrs	r3, r2
 80069a6:	634b      	str	r3, [r1, #52]	@ 0x34
 80069a8:	e13c      	b.n	8006c24 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d110      	bne.n	80069dc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	e00f      	b.n	80069fc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	0151      	lsls	r1, r2, #5
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	440a      	add	r2, r1
 80069f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	68d9      	ldr	r1, [r3, #12]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	b298      	uxth	r0, r3
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	4603      	mov	r3, r0
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f9b9 	bl	8006d88 <USB_WritePacket>
 8006a16:	e105      	b.n	8006c24 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	0151      	lsls	r1, r2, #5
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a32:	0cdb      	lsrs	r3, r3, #19
 8006a34:	04db      	lsls	r3, r3, #19
 8006a36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a52:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a56:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a5a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d132      	bne.n	8006ac8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a90:	69b9      	ldr	r1, [r7, #24]
 8006a92:	0148      	lsls	r0, r1, #5
 8006a94:	69f9      	ldr	r1, [r7, #28]
 8006a96:	4401      	add	r1, r0
 8006a98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006abe:	6113      	str	r3, [r2, #16]
 8006ac0:	e062      	b.n	8006b88 <USB_EPStartXfer+0x490>
 8006ac2:	bf00      	nop
 8006ac4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d123      	bne.n	8006b18 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae6:	69b9      	ldr	r1, [r7, #24]
 8006ae8:	0148      	lsls	r0, r1, #5
 8006aea:	69f9      	ldr	r1, [r7, #28]
 8006aec:	4401      	add	r1, r0
 8006aee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006af2:	4313      	orrs	r3, r2
 8006af4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b14:	6113      	str	r3, [r2, #16]
 8006b16:	e037      	b.n	8006b88 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	4413      	add	r3, r2
 8006b22:	1e5a      	subs	r2, r3, #1
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	8afa      	ldrh	r2, [r7, #22]
 8006b34:	fb03 f202 	mul.w	r2, r3, r2
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	8afb      	ldrh	r3, [r7, #22]
 8006b4c:	04d9      	lsls	r1, r3, #19
 8006b4e:	4b38      	ldr	r3, [pc, #224]	@ (8006c30 <USB_EPStartXfer+0x538>)
 8006b50:	400b      	ands	r3, r1
 8006b52:	69b9      	ldr	r1, [r7, #24]
 8006b54:	0148      	lsls	r0, r1, #5
 8006b56:	69f9      	ldr	r1, [r7, #28]
 8006b58:	4401      	add	r1, r0
 8006b5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b78:	69b9      	ldr	r1, [r7, #24]
 8006b7a:	0148      	lsls	r0, r1, #5
 8006b7c:	69f9      	ldr	r1, [r7, #28]
 8006b7e:	4401      	add	r1, r0
 8006b80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b84:	4313      	orrs	r3, r2
 8006b86:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10d      	bne.n	8006baa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	68d9      	ldr	r1, [r3, #12]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	791b      	ldrb	r3, [r3, #4]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d128      	bne.n	8006c04 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d110      	bne.n	8006be4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	0151      	lsls	r1, r2, #5
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	440a      	add	r2, r1
 8006bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	e00f      	b.n	8006c04 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	0151      	lsls	r1, r2, #5
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	440a      	add	r2, r1
 8006c1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	1ff80000 	.word	0x1ff80000

08006c34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d14a      	bne.n	8006ce8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c6a:	f040 8086 	bne.w	8006d7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	7812      	ldrb	r2, [r2, #0]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	7812      	ldrb	r2, [r2, #0]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d902      	bls.n	8006ccc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cca:	e056      	b.n	8006d7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ce4:	d0e7      	beq.n	8006cb6 <USB_EPStopXfer+0x82>
 8006ce6:	e048      	b.n	8006d7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d00:	d13b      	bne.n	8006d7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	7812      	ldrb	r2, [r2, #0]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	7812      	ldrb	r2, [r2, #0]
 8006d3a:	0151      	lsls	r1, r2, #5
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	440a      	add	r2, r1
 8006d40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d902      	bls.n	8006d60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d5e:	e00c      	b.n	8006d7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d78:	d0e7      	beq.n	8006d4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b089      	sub	sp, #36	@ 0x24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	4611      	mov	r1, r2
 8006d94:	461a      	mov	r2, r3
 8006d96:	460b      	mov	r3, r1
 8006d98:	71fb      	strb	r3, [r7, #7]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006da6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d123      	bne.n	8006df6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dae:	88bb      	ldrh	r3, [r7, #4]
 8006db0:	3303      	adds	r3, #3
 8006db2:	089b      	lsrs	r3, r3, #2
 8006db4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006db6:	2300      	movs	r3, #0
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	e018      	b.n	8006dee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	031a      	lsls	r2, r3, #12
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dc8:	461a      	mov	r2, r3
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	3301      	adds	r3, #1
 8006de0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	3301      	adds	r3, #1
 8006de6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	3301      	adds	r3, #1
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d3e2      	bcc.n	8006dbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3724      	adds	r7, #36	@ 0x24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b08b      	sub	sp, #44	@ 0x2c
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	089b      	lsrs	r3, r3, #2
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	f003 0303 	and.w	r3, r3, #3
 8006e28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	623b      	str	r3, [r7, #32]
 8006e2e:	e014      	b.n	8006e5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	3301      	adds	r3, #1
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	3301      	adds	r3, #1
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	3301      	adds	r3, #1
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	3301      	adds	r3, #1
 8006e58:	623b      	str	r3, [r7, #32]
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d3e6      	bcc.n	8006e30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e62:	8bfb      	ldrh	r3, [r7, #30]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01e      	beq.n	8006ea6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e72:	461a      	mov	r2, r3
 8006e74:	f107 0310 	add.w	r3, r7, #16
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	701a      	strb	r2, [r3, #0]
      i++;
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	3301      	adds	r3, #1
 8006e92:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	3301      	adds	r3, #1
 8006e98:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006e9a:	8bfb      	ldrh	r3, [r7, #30]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ea0:	8bfb      	ldrh	r3, [r7, #30]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1ea      	bne.n	8006e7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	372c      	adds	r7, #44	@ 0x2c
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d12c      	bne.n	8006f2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	db12      	blt.n	8006f08 <USB_EPSetStall+0x54>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00f      	beq.n	8006f08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	e02b      	b.n	8006f82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	db12      	blt.n	8006f62 <USB_EPSetStall+0xae>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00f      	beq.n	8006f62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d128      	bne.n	8006ffe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	791b      	ldrb	r3, [r3, #4]
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d003      	beq.n	8006fdc <USB_EPClearStall+0x4c>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	791b      	ldrb	r3, [r3, #4]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d138      	bne.n	800704e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	e027      	b.n	800704e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007018:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800701c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	791b      	ldrb	r3, [r3, #4]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d003      	beq.n	800702e <USB_EPClearStall+0x9e>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	791b      	ldrb	r3, [r3, #4]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d10f      	bne.n	800704e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	0151      	lsls	r1, r2, #5
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	440a      	add	r2, r1
 8007044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800704c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800707a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800707e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007090:	68f9      	ldr	r1, [r7, #12]
 8007092:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007096:	4313      	orrs	r3, r2
 8007098:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070c2:	f023 0303 	bic.w	r3, r3, #3
 80070c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070d6:	f023 0302 	bic.w	r3, r3, #2
 80070da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b085      	sub	sp, #20
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007104:	f023 0303 	bic.w	r3, r3, #3
 8007108:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007118:	f043 0302 	orr.w	r3, r3, #2
 800711c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4013      	ands	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007144:	68fb      	ldr	r3, [r7, #12]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	4013      	ands	r3, r2
 8007174:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	0c1b      	lsrs	r3, r3, #16
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	4013      	ands	r3, r2
 80071a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	b29b      	uxth	r3, r3
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	4013      	ands	r3, r2
 80071e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071e8:	68bb      	ldr	r3, [r7, #8]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b087      	sub	sp, #28
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007218:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	f003 030f 	and.w	r3, r3, #15
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	fa22 f303 	lsr.w	r3, r2, r3
 8007226:	01db      	lsls	r3, r3, #7
 8007228:	b2db      	uxtb	r3, r3
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4013      	ands	r3, r2
 8007242:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007244:	68bb      	ldr	r3, [r7, #8]
}
 8007246:	4618      	mov	r0, r3
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f003 0301 	and.w	r3, r3, #1
}
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007288:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800728c:	f023 0307 	bic.w	r3, r3, #7
 8007290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	460b      	mov	r3, r1
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	333c      	adds	r3, #60	@ 0x3c
 80072ca:	3304      	adds	r3, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	4a26      	ldr	r2, [pc, #152]	@ (800736c <USB_EP0_OutStart+0xb8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d90a      	bls.n	80072ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072e8:	d101      	bne.n	80072ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e037      	b.n	800735e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f4:	461a      	mov	r2, r3
 80072f6:	2300      	movs	r3, #0
 80072f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007308:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800730c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800731c:	f043 0318 	orr.w	r3, r3, #24
 8007320:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007330:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007334:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007336:	7afb      	ldrb	r3, [r7, #11]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d10f      	bne.n	800735c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007356:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800735a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	4f54300a 	.word	0x4f54300a

08007370 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007388:	d901      	bls.n	800738e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e01b      	b.n	80073c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	daf2      	bge.n	800737c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f043 0201 	orr.w	r2, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3301      	adds	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073b2:	d901      	bls.n	80073b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e006      	b.n	80073c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d0f0      	beq.n	80073a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80073e4:	f002 fc9e 	bl	8009d24 <USBD_static_malloc>
 80073e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	32b0      	adds	r2, #176	@ 0xb0
 80073fa:	2100      	movs	r1, #0
 80073fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007400:	2302      	movs	r3, #2
 8007402:	e0d4      	b.n	80075ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007404:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007408:	2100      	movs	r1, #0
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f003 fa4b 	bl	800a8a6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	32b0      	adds	r2, #176	@ 0xb0
 800741a:	68f9      	ldr	r1, [r7, #12]
 800741c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	32b0      	adds	r2, #176	@ 0xb0
 800742a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	7c1b      	ldrb	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d138      	bne.n	80074ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800743c:	4b5e      	ldr	r3, [pc, #376]	@ (80075b8 <USBD_CDC_Init+0x1e4>)
 800743e:	7819      	ldrb	r1, [r3, #0]
 8007440:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007444:	2202      	movs	r2, #2
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f002 fb49 	bl	8009ade <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800744c:	4b5a      	ldr	r3, [pc, #360]	@ (80075b8 <USBD_CDC_Init+0x1e4>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 020f 	and.w	r2, r3, #15
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	3324      	adds	r3, #36	@ 0x24
 8007462:	2201      	movs	r2, #1
 8007464:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007466:	4b55      	ldr	r3, [pc, #340]	@ (80075bc <USBD_CDC_Init+0x1e8>)
 8007468:	7819      	ldrb	r1, [r3, #0]
 800746a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800746e:	2202      	movs	r2, #2
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f002 fb34 	bl	8009ade <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007476:	4b51      	ldr	r3, [pc, #324]	@ (80075bc <USBD_CDC_Init+0x1e8>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	f003 020f 	and.w	r2, r3, #15
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800748e:	2201      	movs	r2, #1
 8007490:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007492:	4b4b      	ldr	r3, [pc, #300]	@ (80075c0 <USBD_CDC_Init+0x1ec>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f003 020f 	and.w	r2, r3, #15
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	3326      	adds	r3, #38	@ 0x26
 80074a8:	2210      	movs	r2, #16
 80074aa:	801a      	strh	r2, [r3, #0]
 80074ac:	e035      	b.n	800751a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074ae:	4b42      	ldr	r3, [pc, #264]	@ (80075b8 <USBD_CDC_Init+0x1e4>)
 80074b0:	7819      	ldrb	r1, [r3, #0]
 80074b2:	2340      	movs	r3, #64	@ 0x40
 80074b4:	2202      	movs	r2, #2
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f002 fb11 	bl	8009ade <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80074bc:	4b3e      	ldr	r3, [pc, #248]	@ (80075b8 <USBD_CDC_Init+0x1e4>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	3324      	adds	r3, #36	@ 0x24
 80074d2:	2201      	movs	r2, #1
 80074d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074d6:	4b39      	ldr	r3, [pc, #228]	@ (80075bc <USBD_CDC_Init+0x1e8>)
 80074d8:	7819      	ldrb	r1, [r3, #0]
 80074da:	2340      	movs	r3, #64	@ 0x40
 80074dc:	2202      	movs	r2, #2
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f002 fafd 	bl	8009ade <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074e4:	4b35      	ldr	r3, [pc, #212]	@ (80075bc <USBD_CDC_Init+0x1e8>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	f003 020f 	and.w	r2, r3, #15
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074fc:	2201      	movs	r2, #1
 80074fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007500:	4b2f      	ldr	r3, [pc, #188]	@ (80075c0 <USBD_CDC_Init+0x1ec>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	3326      	adds	r3, #38	@ 0x26
 8007516:	2210      	movs	r2, #16
 8007518:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800751a:	4b29      	ldr	r3, [pc, #164]	@ (80075c0 <USBD_CDC_Init+0x1ec>)
 800751c:	7819      	ldrb	r1, [r3, #0]
 800751e:	2308      	movs	r3, #8
 8007520:	2203      	movs	r2, #3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f002 fadb 	bl	8009ade <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007528:	4b25      	ldr	r3, [pc, #148]	@ (80075c0 <USBD_CDC_Init+0x1ec>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	f003 020f 	and.w	r2, r3, #15
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	4613      	mov	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	3324      	adds	r3, #36	@ 0x24
 800753e:	2201      	movs	r2, #1
 8007540:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	33b0      	adds	r3, #176	@ 0xb0
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007578:	2302      	movs	r3, #2
 800757a:	e018      	b.n	80075ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	7c1b      	ldrb	r3, [r3, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007584:	4b0d      	ldr	r3, [pc, #52]	@ (80075bc <USBD_CDC_Init+0x1e8>)
 8007586:	7819      	ldrb	r1, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800758e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f002 fb92 	bl	8009cbc <USBD_LL_PrepareReceive>
 8007598:	e008      	b.n	80075ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800759a:	4b08      	ldr	r3, [pc, #32]	@ (80075bc <USBD_CDC_Init+0x1e8>)
 800759c:	7819      	ldrb	r1, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075a4:	2340      	movs	r3, #64	@ 0x40
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f002 fb88 	bl	8009cbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000093 	.word	0x20000093
 80075bc:	20000094 	.word	0x20000094
 80075c0:	20000095 	.word	0x20000095

080075c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80075d0:	4b3a      	ldr	r3, [pc, #232]	@ (80076bc <USBD_CDC_DeInit+0xf8>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f002 faa7 	bl	8009b2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80075dc:	4b37      	ldr	r3, [pc, #220]	@ (80076bc <USBD_CDC_DeInit+0xf8>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	f003 020f 	and.w	r2, r3, #15
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	3324      	adds	r3, #36	@ 0x24
 80075f2:	2200      	movs	r2, #0
 80075f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80075f6:	4b32      	ldr	r3, [pc, #200]	@ (80076c0 <USBD_CDC_DeInit+0xfc>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f002 fa94 	bl	8009b2a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007602:	4b2f      	ldr	r3, [pc, #188]	@ (80076c0 <USBD_CDC_DeInit+0xfc>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	f003 020f 	and.w	r2, r3, #15
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800761a:	2200      	movs	r2, #0
 800761c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800761e:	4b29      	ldr	r3, [pc, #164]	@ (80076c4 <USBD_CDC_DeInit+0x100>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f002 fa80 	bl	8009b2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800762a:	4b26      	ldr	r3, [pc, #152]	@ (80076c4 <USBD_CDC_DeInit+0x100>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	f003 020f 	and.w	r2, r3, #15
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	3324      	adds	r3, #36	@ 0x24
 8007640:	2200      	movs	r2, #0
 8007642:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007644:	4b1f      	ldr	r3, [pc, #124]	@ (80076c4 <USBD_CDC_DeInit+0x100>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f003 020f 	and.w	r2, r3, #15
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	3326      	adds	r3, #38	@ 0x26
 800765a:	2200      	movs	r2, #0
 800765c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	32b0      	adds	r2, #176	@ 0xb0
 8007668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01f      	beq.n	80076b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	33b0      	adds	r3, #176	@ 0xb0
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32b0      	adds	r2, #176	@ 0xb0
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	4618      	mov	r0, r3
 8007694:	f002 fb54 	bl	8009d40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	32b0      	adds	r2, #176	@ 0xb0
 80076a2:	2100      	movs	r1, #0
 80076a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000093 	.word	0x20000093
 80076c0:	20000094 	.word	0x20000094
 80076c4:	20000095 	.word	0x20000095

080076c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	32b0      	adds	r2, #176	@ 0xb0
 80076dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e0bf      	b.n	8007878 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007700:	2b00      	cmp	r3, #0
 8007702:	d050      	beq.n	80077a6 <USBD_CDC_Setup+0xde>
 8007704:	2b20      	cmp	r3, #32
 8007706:	f040 80af 	bne.w	8007868 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	88db      	ldrh	r3, [r3, #6]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d03a      	beq.n	8007788 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b25b      	sxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	da1b      	bge.n	8007754 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	33b0      	adds	r3, #176	@ 0xb0
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007732:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	88d2      	ldrh	r2, [r2, #6]
 8007738:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	88db      	ldrh	r3, [r3, #6]
 800773e:	2b07      	cmp	r3, #7
 8007740:	bf28      	it	cs
 8007742:	2307      	movcs	r3, #7
 8007744:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	89fa      	ldrh	r2, [r7, #14]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 fd93 	bl	8009278 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007752:	e090      	b.n	8007876 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	785a      	ldrb	r2, [r3, #1]
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	88db      	ldrh	r3, [r3, #6]
 8007762:	2b3f      	cmp	r3, #63	@ 0x3f
 8007764:	d803      	bhi.n	800776e <USBD_CDC_Setup+0xa6>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	88db      	ldrh	r3, [r3, #6]
 800776a:	b2da      	uxtb	r2, r3
 800776c:	e000      	b.n	8007770 <USBD_CDC_Setup+0xa8>
 800776e:	2240      	movs	r2, #64	@ 0x40
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007776:	6939      	ldr	r1, [r7, #16]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800777e:	461a      	mov	r2, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fda5 	bl	80092d0 <USBD_CtlPrepareRx>
      break;
 8007786:	e076      	b.n	8007876 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	33b0      	adds	r3, #176	@ 0xb0
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	7850      	ldrb	r0, [r2, #1]
 800779e:	2200      	movs	r2, #0
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	4798      	blx	r3
      break;
 80077a4:	e067      	b.n	8007876 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	2b0b      	cmp	r3, #11
 80077ac:	d851      	bhi.n	8007852 <USBD_CDC_Setup+0x18a>
 80077ae:	a201      	add	r2, pc, #4	@ (adr r2, 80077b4 <USBD_CDC_Setup+0xec>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077e5 	.word	0x080077e5
 80077b8:	08007861 	.word	0x08007861
 80077bc:	08007853 	.word	0x08007853
 80077c0:	08007853 	.word	0x08007853
 80077c4:	08007853 	.word	0x08007853
 80077c8:	08007853 	.word	0x08007853
 80077cc:	08007853 	.word	0x08007853
 80077d0:	08007853 	.word	0x08007853
 80077d4:	08007853 	.word	0x08007853
 80077d8:	08007853 	.word	0x08007853
 80077dc:	0800780f 	.word	0x0800780f
 80077e0:	08007839 	.word	0x08007839
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d107      	bne.n	8007800 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077f0:	f107 030a 	add.w	r3, r7, #10
 80077f4:	2202      	movs	r2, #2
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 fd3d 	bl	8009278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077fe:	e032      	b.n	8007866 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 fcbb 	bl	800917e <USBD_CtlError>
            ret = USBD_FAIL;
 8007808:	2303      	movs	r3, #3
 800780a:	75fb      	strb	r3, [r7, #23]
          break;
 800780c:	e02b      	b.n	8007866 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b03      	cmp	r3, #3
 8007818:	d107      	bne.n	800782a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800781a:	f107 030d 	add.w	r3, r7, #13
 800781e:	2201      	movs	r2, #1
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fd28 	bl	8009278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007828:	e01d      	b.n	8007866 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fca6 	bl	800917e <USBD_CtlError>
            ret = USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	75fb      	strb	r3, [r7, #23]
          break;
 8007836:	e016      	b.n	8007866 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b03      	cmp	r3, #3
 8007842:	d00f      	beq.n	8007864 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f001 fc99 	bl	800917e <USBD_CtlError>
            ret = USBD_FAIL;
 800784c:	2303      	movs	r3, #3
 800784e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007850:	e008      	b.n	8007864 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fc92 	bl	800917e <USBD_CtlError>
          ret = USBD_FAIL;
 800785a:	2303      	movs	r3, #3
 800785c:	75fb      	strb	r3, [r7, #23]
          break;
 800785e:	e002      	b.n	8007866 <USBD_CDC_Setup+0x19e>
          break;
 8007860:	bf00      	nop
 8007862:	e008      	b.n	8007876 <USBD_CDC_Setup+0x1ae>
          break;
 8007864:	bf00      	nop
      }
      break;
 8007866:	e006      	b.n	8007876 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 fc87 	bl	800917e <USBD_CtlError>
      ret = USBD_FAIL;
 8007870:	2303      	movs	r3, #3
 8007872:	75fb      	strb	r3, [r7, #23]
      break;
 8007874:	bf00      	nop
  }

  return (uint8_t)ret;
 8007876:	7dfb      	ldrb	r3, [r7, #23]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007892:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	32b0      	adds	r2, #176	@ 0xb0
 800789e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e065      	b.n	8007976 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	32b0      	adds	r2, #176	@ 0xb0
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	f003 020f 	and.w	r2, r3, #15
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	3318      	adds	r3, #24
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d02f      	beq.n	8007934 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	f003 020f 	and.w	r2, r3, #15
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	3318      	adds	r3, #24
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	f003 010f 	and.w	r1, r3, #15
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	460b      	mov	r3, r1
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	440b      	add	r3, r1
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4403      	add	r3, r0
 80078fc:	331c      	adds	r3, #28
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	fbb2 f1f3 	udiv	r1, r2, r3
 8007904:	fb01 f303 	mul.w	r3, r1, r3
 8007908:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800790a:	2b00      	cmp	r3, #0
 800790c:	d112      	bne.n	8007934 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800790e:	78fb      	ldrb	r3, [r7, #3]
 8007910:	f003 020f 	and.w	r2, r3, #15
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	440b      	add	r3, r1
 8007920:	3318      	adds	r3, #24
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007926:	78f9      	ldrb	r1, [r7, #3]
 8007928:	2300      	movs	r3, #0
 800792a:	2200      	movs	r2, #0
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f002 f9a4 	bl	8009c7a <USBD_LL_Transmit>
 8007932:	e01f      	b.n	8007974 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	33b0      	adds	r3, #176	@ 0xb0
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	33b0      	adds	r3, #176	@ 0xb0
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	32b0      	adds	r2, #176	@ 0xb0
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	32b0      	adds	r2, #176	@ 0xb0
 80079a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e01a      	b.n	80079e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f002 f9a2 	bl	8009cfe <USBD_LL_GetRxDataSize>
 80079ba:	4602      	mov	r2, r0
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	33b0      	adds	r3, #176	@ 0xb0
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80079e0:	4611      	mov	r1, r2
 80079e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	32b0      	adds	r2, #176	@ 0xb0
 8007a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e024      	b.n	8007a5a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	33b0      	adds	r3, #176	@ 0xb0
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d019      	beq.n	8007a58 <USBD_CDC_EP0_RxReady+0x6a>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007a2a:	2bff      	cmp	r3, #255	@ 0xff
 8007a2c:	d014      	beq.n	8007a58 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	33b0      	adds	r3, #176	@ 0xb0
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	22ff      	movs	r2, #255	@ 0xff
 8007a54:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a6c:	2182      	movs	r1, #130	@ 0x82
 8007a6e:	4818      	ldr	r0, [pc, #96]	@ (8007ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a70:	f000 fd4f 	bl	8008512 <USBD_GetEpDesc>
 8007a74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a76:	2101      	movs	r1, #1
 8007a78:	4815      	ldr	r0, [pc, #84]	@ (8007ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a7a:	f000 fd4a 	bl	8008512 <USBD_GetEpDesc>
 8007a7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a80:	2181      	movs	r1, #129	@ 0x81
 8007a82:	4813      	ldr	r0, [pc, #76]	@ (8007ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a84:	f000 fd45 	bl	8008512 <USBD_GetEpDesc>
 8007a88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2210      	movs	r2, #16
 8007a94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d006      	beq.n	8007aaa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aa4:	711a      	strb	r2, [r3, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d006      	beq.n	8007abe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ab8:	711a      	strb	r2, [r3, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2243      	movs	r2, #67	@ 0x43
 8007ac2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ac4:	4b02      	ldr	r3, [pc, #8]	@ (8007ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000050 	.word	0x20000050

08007ad4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007adc:	2182      	movs	r1, #130	@ 0x82
 8007ade:	4818      	ldr	r0, [pc, #96]	@ (8007b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ae0:	f000 fd17 	bl	8008512 <USBD_GetEpDesc>
 8007ae4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	4815      	ldr	r0, [pc, #84]	@ (8007b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007aea:	f000 fd12 	bl	8008512 <USBD_GetEpDesc>
 8007aee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007af0:	2181      	movs	r1, #129	@ 0x81
 8007af2:	4813      	ldr	r0, [pc, #76]	@ (8007b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007af4:	f000 fd0d 	bl	8008512 <USBD_GetEpDesc>
 8007af8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2210      	movs	r2, #16
 8007b04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d006      	beq.n	8007b1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	711a      	strb	r2, [r3, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f042 0202 	orr.w	r2, r2, #2
 8007b18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d006      	beq.n	8007b2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	711a      	strb	r2, [r3, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f042 0202 	orr.w	r2, r2, #2
 8007b2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2243      	movs	r2, #67	@ 0x43
 8007b32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b34:	4b02      	ldr	r3, [pc, #8]	@ (8007b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000050 	.word	0x20000050

08007b44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b4c:	2182      	movs	r1, #130	@ 0x82
 8007b4e:	4818      	ldr	r0, [pc, #96]	@ (8007bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b50:	f000 fcdf 	bl	8008512 <USBD_GetEpDesc>
 8007b54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b56:	2101      	movs	r1, #1
 8007b58:	4815      	ldr	r0, [pc, #84]	@ (8007bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b5a:	f000 fcda 	bl	8008512 <USBD_GetEpDesc>
 8007b5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b60:	2181      	movs	r1, #129	@ 0x81
 8007b62:	4813      	ldr	r0, [pc, #76]	@ (8007bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b64:	f000 fcd5 	bl	8008512 <USBD_GetEpDesc>
 8007b68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2210      	movs	r2, #16
 8007b74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d006      	beq.n	8007b8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b84:	711a      	strb	r2, [r3, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d006      	beq.n	8007b9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b98:	711a      	strb	r2, [r3, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2243      	movs	r2, #67	@ 0x43
 8007ba2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ba4:	4b02      	ldr	r3, [pc, #8]	@ (8007bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000050 	.word	0x20000050

08007bb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	220a      	movs	r2, #10
 8007bc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007bc2:	4b03      	ldr	r3, [pc, #12]	@ (8007bd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	2000000c 	.word	0x2000000c

08007bd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e009      	b.n	8007bfc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	33b0      	adds	r3, #176	@ 0xb0
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	32b0      	adds	r2, #176	@ 0xb0
 8007c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c22:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e008      	b.n	8007c40 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	371c      	adds	r7, #28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	32b0      	adds	r2, #176	@ 0xb0
 8007c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e004      	b.n	8007c7a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
	...

08007c88 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	32b0      	adds	r2, #176	@ 0xb0
 8007c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e025      	b.n	8007cfa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d11f      	bne.n	8007cf8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007cc0:	4b10      	ldr	r3, [pc, #64]	@ (8007d04 <USBD_CDC_TransmitPacket+0x7c>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	f003 020f 	and.w	r2, r3, #15
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4403      	add	r3, r0
 8007cda:	3318      	adds	r3, #24
 8007cdc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007cde:	4b09      	ldr	r3, [pc, #36]	@ (8007d04 <USBD_CDC_TransmitPacket+0x7c>)
 8007ce0:	7819      	ldrb	r1, [r3, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 ffc3 	bl	8009c7a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000093 	.word	0x20000093

08007d08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	32b0      	adds	r2, #176	@ 0xb0
 8007d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	32b0      	adds	r2, #176	@ 0xb0
 8007d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e018      	b.n	8007d68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7c1b      	ldrb	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d70 <USBD_CDC_ReceivePacket+0x68>)
 8007d40:	7819      	ldrb	r1, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 ffb5 	bl	8009cbc <USBD_LL_PrepareReceive>
 8007d52:	e008      	b.n	8007d66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d54:	4b06      	ldr	r3, [pc, #24]	@ (8007d70 <USBD_CDC_ReceivePacket+0x68>)
 8007d56:	7819      	ldrb	r1, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d5e:	2340      	movs	r3, #64	@ 0x40
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 ffab 	bl	8009cbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000094 	.word	0x20000094

08007d74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e01f      	b.n	8007dcc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	79fa      	ldrb	r2, [r7, #7]
 8007dbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f001 fe25 	bl	8009a10 <USBD_LL_Init>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e025      	b.n	8007e38 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	32ae      	adds	r2, #174	@ 0xae
 8007dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00f      	beq.n	8007e28 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	32ae      	adds	r2, #174	@ 0xae
 8007e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e18:	f107 020e 	add.w	r2, r7, #14
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	4602      	mov	r2, r0
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 fe2d 	bl	8009aa8 <USBD_LL_Start>
 8007e4e:	4603      	mov	r3, r0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e60:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d009      	beq.n	8007e9c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	78fa      	ldrb	r2, [r7, #3]
 8007e92:	4611      	mov	r1, r2
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	4798      	blx	r3
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	78fa      	ldrb	r2, [r7, #3]
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	4798      	blx	r3
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 f90c 	bl	800910a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f0e:	f003 031f 	and.w	r3, r3, #31
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d01a      	beq.n	8007f4c <USBD_LL_SetupStage+0x72>
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d822      	bhi.n	8007f60 <USBD_LL_SetupStage+0x86>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <USBD_LL_SetupStage+0x4a>
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d00a      	beq.n	8007f38 <USBD_LL_SetupStage+0x5e>
 8007f22:	e01d      	b.n	8007f60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fb63 	bl	80085f8 <USBD_StdDevReq>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73fb      	strb	r3, [r7, #15]
      break;
 8007f36:	e020      	b.n	8007f7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fbcb 	bl	80086dc <USBD_StdItfReq>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4a:	e016      	b.n	8007f7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fc2d 	bl	80087b4 <USBD_StdEPReq>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5e:	e00c      	b.n	8007f7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 fdfa 	bl	8009b68 <USBD_LL_StallEP>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]
      break;
 8007f78:	bf00      	nop
  }

  return ret;
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f96:	7afb      	ldrb	r3, [r7, #11]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d16e      	bne.n	800807a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007fa2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	f040 8098 	bne.w	80080e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d913      	bls.n	8007fe4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	1ad2      	subs	r2, r2, r3
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	bf28      	it	cs
 8007fd6:	4613      	movcs	r3, r2
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f001 f994 	bl	800930a <USBD_CtlContinueRx>
 8007fe2:	e07d      	b.n	80080e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007fea:	f003 031f 	and.w	r3, r3, #31
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d014      	beq.n	800801c <USBD_LL_DataOutStage+0x98>
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d81d      	bhi.n	8008032 <USBD_LL_DataOutStage+0xae>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <USBD_LL_DataOutStage+0x7c>
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d003      	beq.n	8008006 <USBD_LL_DataOutStage+0x82>
 8007ffe:	e018      	b.n	8008032 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	75bb      	strb	r3, [r7, #22]
            break;
 8008004:	e018      	b.n	8008038 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800800c:	b2db      	uxtb	r3, r3
 800800e:	4619      	mov	r1, r3
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 fa64 	bl	80084de <USBD_CoreFindIF>
 8008016:	4603      	mov	r3, r0
 8008018:	75bb      	strb	r3, [r7, #22]
            break;
 800801a:	e00d      	b.n	8008038 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008022:	b2db      	uxtb	r3, r3
 8008024:	4619      	mov	r1, r3
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 fa66 	bl	80084f8 <USBD_CoreFindEP>
 800802c:	4603      	mov	r3, r0
 800802e:	75bb      	strb	r3, [r7, #22]
            break;
 8008030:	e002      	b.n	8008038 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	75bb      	strb	r3, [r7, #22]
            break;
 8008036:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008038:	7dbb      	ldrb	r3, [r7, #22]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d119      	bne.n	8008072 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b03      	cmp	r3, #3
 8008048:	d113      	bne.n	8008072 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800804a:	7dba      	ldrb	r2, [r7, #22]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	32ae      	adds	r2, #174	@ 0xae
 8008050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00b      	beq.n	8008072 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800805a:	7dba      	ldrb	r2, [r7, #22]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008062:	7dba      	ldrb	r2, [r7, #22]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	32ae      	adds	r2, #174	@ 0xae
 8008068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f001 f95a 	bl	800932c <USBD_CtlSendStatus>
 8008078:	e032      	b.n	80080e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800807a:	7afb      	ldrb	r3, [r7, #11]
 800807c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008080:	b2db      	uxtb	r3, r3
 8008082:	4619      	mov	r1, r3
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fa37 	bl	80084f8 <USBD_CoreFindEP>
 800808a:	4603      	mov	r3, r0
 800808c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800808e:	7dbb      	ldrb	r3, [r7, #22]
 8008090:	2bff      	cmp	r3, #255	@ 0xff
 8008092:	d025      	beq.n	80080e0 <USBD_LL_DataOutStage+0x15c>
 8008094:	7dbb      	ldrb	r3, [r7, #22]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d122      	bne.n	80080e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d117      	bne.n	80080d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80080a6:	7dba      	ldrb	r2, [r7, #22]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	32ae      	adds	r2, #174	@ 0xae
 80080ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00f      	beq.n	80080d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80080b6:	7dba      	ldrb	r2, [r7, #22]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80080be:	7dba      	ldrb	r2, [r7, #22]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	32ae      	adds	r2, #174	@ 0xae
 80080c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	7afa      	ldrb	r2, [r7, #11]
 80080cc:	4611      	mov	r1, r2
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	4798      	blx	r3
 80080d2:	4603      	mov	r3, r0
 80080d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	e000      	b.n	80080e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b086      	sub	sp, #24
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	460b      	mov	r3, r1
 80080f4:	607a      	str	r2, [r7, #4]
 80080f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d16f      	bne.n	80081de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3314      	adds	r3, #20
 8008102:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800810a:	2b02      	cmp	r3, #2
 800810c:	d15a      	bne.n	80081c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	429a      	cmp	r2, r3
 8008118:	d914      	bls.n	8008144 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	689a      	ldr	r2, [r3, #8]
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	1ad2      	subs	r2, r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	461a      	mov	r2, r3
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f001 f8bc 	bl	80092ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008136:	2300      	movs	r3, #0
 8008138:	2200      	movs	r2, #0
 800813a:	2100      	movs	r1, #0
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f001 fdbd 	bl	8009cbc <USBD_LL_PrepareReceive>
 8008142:	e03f      	b.n	80081c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	429a      	cmp	r2, r3
 800814e:	d11c      	bne.n	800818a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008158:	429a      	cmp	r2, r3
 800815a:	d316      	bcc.n	800818a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008166:	429a      	cmp	r2, r3
 8008168:	d20f      	bcs.n	800818a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800816a:	2200      	movs	r2, #0
 800816c:	2100      	movs	r1, #0
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f001 f89d 	bl	80092ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800817c:	2300      	movs	r3, #0
 800817e:	2200      	movs	r2, #0
 8008180:	2100      	movs	r1, #0
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f001 fd9a 	bl	8009cbc <USBD_LL_PrepareReceive>
 8008188:	e01c      	b.n	80081c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b03      	cmp	r3, #3
 8008194:	d10f      	bne.n	80081b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081b6:	2180      	movs	r1, #128	@ 0x80
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f001 fcd5 	bl	8009b68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f001 f8c7 	bl	8009352 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d03a      	beq.n	8008244 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f7ff fe42 	bl	8007e58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80081dc:	e032      	b.n	8008244 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80081de:	7afb      	ldrb	r3, [r7, #11]
 80081e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	4619      	mov	r1, r3
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f985 	bl	80084f8 <USBD_CoreFindEP>
 80081ee:	4603      	mov	r3, r0
 80081f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	2bff      	cmp	r3, #255	@ 0xff
 80081f6:	d025      	beq.n	8008244 <USBD_LL_DataInStage+0x15a>
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d122      	bne.n	8008244 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b03      	cmp	r3, #3
 8008208:	d11c      	bne.n	8008244 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800820a:	7dfa      	ldrb	r2, [r7, #23]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	32ae      	adds	r2, #174	@ 0xae
 8008210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d014      	beq.n	8008244 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800821a:	7dfa      	ldrb	r2, [r7, #23]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008222:	7dfa      	ldrb	r2, [r7, #23]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	32ae      	adds	r2, #174	@ 0xae
 8008228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	7afa      	ldrb	r2, [r7, #11]
 8008230:	4611      	mov	r1, r2
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	4798      	blx	r3
 8008236:	4603      	mov	r3, r0
 8008238:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800823a:	7dbb      	ldrb	r3, [r7, #22]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008240:	7dbb      	ldrb	r3, [r7, #22]
 8008242:	e000      	b.n	8008246 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d014      	beq.n	80082b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00e      	beq.n	80082b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6852      	ldr	r2, [r2, #4]
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	4611      	mov	r1, r2
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	4798      	blx	r3
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80082b0:	2303      	movs	r3, #3
 80082b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082b4:	2340      	movs	r3, #64	@ 0x40
 80082b6:	2200      	movs	r2, #0
 80082b8:	2100      	movs	r1, #0
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fc0f 	bl	8009ade <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2240      	movs	r2, #64	@ 0x40
 80082cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082d0:	2340      	movs	r3, #64	@ 0x40
 80082d2:	2200      	movs	r2, #0
 80082d4:	2180      	movs	r1, #128	@ 0x80
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fc01 	bl	8009ade <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2240      	movs	r2, #64	@ 0x40
 80082e6:	621a      	str	r2, [r3, #32]

  return ret;
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	78fa      	ldrb	r2, [r7, #3]
 8008302:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b04      	cmp	r3, #4
 8008324:	d006      	beq.n	8008334 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800832c:	b2da      	uxtb	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2204      	movs	r2, #4
 8008338:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b04      	cmp	r3, #4
 800835c:	d106      	bne.n	800836c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008364:	b2da      	uxtb	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b03      	cmp	r3, #3
 800838c:	d110      	bne.n	80083b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d005      	beq.n	80083b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	32ae      	adds	r2, #174	@ 0xae
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80083d8:	2303      	movs	r3, #3
 80083da:	e01c      	b.n	8008416 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d115      	bne.n	8008414 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	32ae      	adds	r2, #174	@ 0xae
 80083f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	32ae      	adds	r2, #174	@ 0xae
 8008406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	78fa      	ldrb	r2, [r7, #3]
 800840e:	4611      	mov	r1, r2
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	460b      	mov	r3, r1
 8008428:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	32ae      	adds	r2, #174	@ 0xae
 8008434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	e01c      	b.n	800847a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b03      	cmp	r3, #3
 800844a:	d115      	bne.n	8008478 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	32ae      	adds	r2, #174	@ 0xae
 8008456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	32ae      	adds	r2, #174	@ 0xae
 800846a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008470:	78fa      	ldrb	r2, [r7, #3]
 8008472:	4611      	mov	r1, r2
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00e      	beq.n	80084d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	6852      	ldr	r2, [r2, #4]
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	4611      	mov	r1, r2
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80084d0:	2303      	movs	r3, #3
 80084d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008504:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b086      	sub	sp, #24
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	885b      	ldrh	r3, [r3, #2]
 800852e:	b29b      	uxth	r3, r3
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	7812      	ldrb	r2, [r2, #0]
 8008534:	4293      	cmp	r3, r2
 8008536:	d91f      	bls.n	8008578 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800853e:	e013      	b.n	8008568 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008540:	f107 030a 	add.w	r3, r7, #10
 8008544:	4619      	mov	r1, r3
 8008546:	6978      	ldr	r0, [r7, #20]
 8008548:	f000 f81b 	bl	8008582 <USBD_GetNextDesc>
 800854c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	785b      	ldrb	r3, [r3, #1]
 8008552:	2b05      	cmp	r3, #5
 8008554:	d108      	bne.n	8008568 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	789b      	ldrb	r3, [r3, #2]
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	429a      	cmp	r2, r3
 8008562:	d008      	beq.n	8008576 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	885b      	ldrh	r3, [r3, #2]
 800856c:	b29a      	uxth	r2, r3
 800856e:	897b      	ldrh	r3, [r7, #10]
 8008570:	429a      	cmp	r2, r3
 8008572:	d8e5      	bhi.n	8008540 <USBD_GetEpDesc+0x2e>
 8008574:	e000      	b.n	8008578 <USBD_GetEpDesc+0x66>
          break;
 8008576:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008578:	693b      	ldr	r3, [r7, #16]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008582:	b480      	push	{r7}
 8008584:	b085      	sub	sp, #20
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	7812      	ldrb	r2, [r2, #0]
 8008598:	4413      	add	r3, r2
 800859a:	b29a      	uxth	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4413      	add	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80085ac:	68fb      	ldr	r3, [r7, #12]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b087      	sub	sp, #28
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	3301      	adds	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085d8:	8a3b      	ldrh	r3, [r7, #16]
 80085da:	021b      	lsls	r3, r3, #8
 80085dc:	b21a      	sxth	r2, r3
 80085de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	b21b      	sxth	r3, r3
 80085e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80085e8:	89fb      	ldrh	r3, [r7, #14]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
	...

080085f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800860e:	2b40      	cmp	r3, #64	@ 0x40
 8008610:	d005      	beq.n	800861e <USBD_StdDevReq+0x26>
 8008612:	2b40      	cmp	r3, #64	@ 0x40
 8008614:	d857      	bhi.n	80086c6 <USBD_StdDevReq+0xce>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00f      	beq.n	800863a <USBD_StdDevReq+0x42>
 800861a:	2b20      	cmp	r3, #32
 800861c:	d153      	bne.n	80086c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	32ae      	adds	r2, #174	@ 0xae
 8008628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	4798      	blx	r3
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]
      break;
 8008638:	e04a      	b.n	80086d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	2b09      	cmp	r3, #9
 8008640:	d83b      	bhi.n	80086ba <USBD_StdDevReq+0xc2>
 8008642:	a201      	add	r2, pc, #4	@ (adr r2, 8008648 <USBD_StdDevReq+0x50>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	0800869d 	.word	0x0800869d
 800864c:	080086b1 	.word	0x080086b1
 8008650:	080086bb 	.word	0x080086bb
 8008654:	080086a7 	.word	0x080086a7
 8008658:	080086bb 	.word	0x080086bb
 800865c:	0800867b 	.word	0x0800867b
 8008660:	08008671 	.word	0x08008671
 8008664:	080086bb 	.word	0x080086bb
 8008668:	08008693 	.word	0x08008693
 800866c:	08008685 	.word	0x08008685
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa3c 	bl	8008af0 <USBD_GetDescriptor>
          break;
 8008678:	e024      	b.n	80086c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fba1 	bl	8008dc4 <USBD_SetAddress>
          break;
 8008682:	e01f      	b.n	80086c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fbe0 	bl	8008e4c <USBD_SetConfig>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]
          break;
 8008690:	e018      	b.n	80086c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fc83 	bl	8008fa0 <USBD_GetConfig>
          break;
 800869a:	e013      	b.n	80086c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fcb4 	bl	800900c <USBD_GetStatus>
          break;
 80086a4:	e00e      	b.n	80086c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fce3 	bl	8009074 <USBD_SetFeature>
          break;
 80086ae:	e009      	b.n	80086c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fd07 	bl	80090c6 <USBD_ClrFeature>
          break;
 80086b8:	e004      	b.n	80086c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fd5e 	bl	800917e <USBD_CtlError>
          break;
 80086c2:	bf00      	nop
      }
      break;
 80086c4:	e004      	b.n	80086d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fd58 	bl	800917e <USBD_CtlError>
      break;
 80086ce:	bf00      	nop
  }

  return ret;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop

080086dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086f2:	2b40      	cmp	r3, #64	@ 0x40
 80086f4:	d005      	beq.n	8008702 <USBD_StdItfReq+0x26>
 80086f6:	2b40      	cmp	r3, #64	@ 0x40
 80086f8:	d852      	bhi.n	80087a0 <USBD_StdItfReq+0xc4>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <USBD_StdItfReq+0x26>
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d14e      	bne.n	80087a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008708:	b2db      	uxtb	r3, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	2b02      	cmp	r3, #2
 800870e:	d840      	bhi.n	8008792 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	889b      	ldrh	r3, [r3, #4]
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b01      	cmp	r3, #1
 8008718:	d836      	bhi.n	8008788 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	889b      	ldrh	r3, [r3, #4]
 800871e:	b2db      	uxtb	r3, r3
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff fedb 	bl	80084de <USBD_CoreFindIF>
 8008728:	4603      	mov	r3, r0
 800872a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	2bff      	cmp	r3, #255	@ 0xff
 8008730:	d01d      	beq.n	800876e <USBD_StdItfReq+0x92>
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d11a      	bne.n	800876e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008738:	7bba      	ldrb	r2, [r7, #14]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	32ae      	adds	r2, #174	@ 0xae
 800873e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00f      	beq.n	8008768 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008748:	7bba      	ldrb	r2, [r7, #14]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008750:	7bba      	ldrb	r2, [r7, #14]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	32ae      	adds	r2, #174	@ 0xae
 8008756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	4798      	blx	r3
 8008762:	4603      	mov	r3, r0
 8008764:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008766:	e004      	b.n	8008772 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008768:	2303      	movs	r3, #3
 800876a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800876c:	e001      	b.n	8008772 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800876e:	2303      	movs	r3, #3
 8008770:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	88db      	ldrh	r3, [r3, #6]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d110      	bne.n	800879c <USBD_StdItfReq+0xc0>
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10d      	bne.n	800879c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fdd3 	bl	800932c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008786:	e009      	b.n	800879c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fcf7 	bl	800917e <USBD_CtlError>
          break;
 8008790:	e004      	b.n	800879c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fcf2 	bl	800917e <USBD_CtlError>
          break;
 800879a:	e000      	b.n	800879e <USBD_StdItfReq+0xc2>
          break;
 800879c:	bf00      	nop
      }
      break;
 800879e:	e004      	b.n	80087aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fceb 	bl	800917e <USBD_CtlError>
      break;
 80087a8:	bf00      	nop
  }

  return ret;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	889b      	ldrh	r3, [r3, #4]
 80087c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087d0:	2b40      	cmp	r3, #64	@ 0x40
 80087d2:	d007      	beq.n	80087e4 <USBD_StdEPReq+0x30>
 80087d4:	2b40      	cmp	r3, #64	@ 0x40
 80087d6:	f200 817f 	bhi.w	8008ad8 <USBD_StdEPReq+0x324>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d02a      	beq.n	8008834 <USBD_StdEPReq+0x80>
 80087de:	2b20      	cmp	r3, #32
 80087e0:	f040 817a 	bne.w	8008ad8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff fe85 	bl	80084f8 <USBD_CoreFindEP>
 80087ee:	4603      	mov	r3, r0
 80087f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087f2:	7b7b      	ldrb	r3, [r7, #13]
 80087f4:	2bff      	cmp	r3, #255	@ 0xff
 80087f6:	f000 8174 	beq.w	8008ae2 <USBD_StdEPReq+0x32e>
 80087fa:	7b7b      	ldrb	r3, [r7, #13]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f040 8170 	bne.w	8008ae2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008802:	7b7a      	ldrb	r2, [r7, #13]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800880a:	7b7a      	ldrb	r2, [r7, #13]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	32ae      	adds	r2, #174	@ 0xae
 8008810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 8163 	beq.w	8008ae2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800881c:	7b7a      	ldrb	r2, [r7, #13]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	32ae      	adds	r2, #174	@ 0xae
 8008822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	4798      	blx	r3
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008832:	e156      	b.n	8008ae2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	785b      	ldrb	r3, [r3, #1]
 8008838:	2b03      	cmp	r3, #3
 800883a:	d008      	beq.n	800884e <USBD_StdEPReq+0x9a>
 800883c:	2b03      	cmp	r3, #3
 800883e:	f300 8145 	bgt.w	8008acc <USBD_StdEPReq+0x318>
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 809b 	beq.w	800897e <USBD_StdEPReq+0x1ca>
 8008848:	2b01      	cmp	r3, #1
 800884a:	d03c      	beq.n	80088c6 <USBD_StdEPReq+0x112>
 800884c:	e13e      	b.n	8008acc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b02      	cmp	r3, #2
 8008858:	d002      	beq.n	8008860 <USBD_StdEPReq+0xac>
 800885a:	2b03      	cmp	r3, #3
 800885c:	d016      	beq.n	800888c <USBD_StdEPReq+0xd8>
 800885e:	e02c      	b.n	80088ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008860:	7bbb      	ldrb	r3, [r7, #14]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00d      	beq.n	8008882 <USBD_StdEPReq+0xce>
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b80      	cmp	r3, #128	@ 0x80
 800886a:	d00a      	beq.n	8008882 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 f979 	bl	8009b68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008876:	2180      	movs	r1, #128	@ 0x80
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 f975 	bl	8009b68 <USBD_LL_StallEP>
 800887e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008880:	e020      	b.n	80088c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fc7a 	bl	800917e <USBD_CtlError>
              break;
 800888a:	e01b      	b.n	80088c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	885b      	ldrh	r3, [r3, #2]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10e      	bne.n	80088b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00b      	beq.n	80088b2 <USBD_StdEPReq+0xfe>
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b80      	cmp	r3, #128	@ 0x80
 800889e:	d008      	beq.n	80088b2 <USBD_StdEPReq+0xfe>
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	88db      	ldrh	r3, [r3, #6]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d104      	bne.n	80088b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 f95b 	bl	8009b68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fd3a 	bl	800932c <USBD_CtlSendStatus>

              break;
 80088b8:	e004      	b.n	80088c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fc5e 	bl	800917e <USBD_CtlError>
              break;
 80088c2:	bf00      	nop
          }
          break;
 80088c4:	e107      	b.n	8008ad6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d002      	beq.n	80088d8 <USBD_StdEPReq+0x124>
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d016      	beq.n	8008904 <USBD_StdEPReq+0x150>
 80088d6:	e04b      	b.n	8008970 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00d      	beq.n	80088fa <USBD_StdEPReq+0x146>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b80      	cmp	r3, #128	@ 0x80
 80088e2:	d00a      	beq.n	80088fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 f93d 	bl	8009b68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ee:	2180      	movs	r1, #128	@ 0x80
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f939 	bl	8009b68 <USBD_LL_StallEP>
 80088f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088f8:	e040      	b.n	800897c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fc3e 	bl	800917e <USBD_CtlError>
              break;
 8008902:	e03b      	b.n	800897c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	885b      	ldrh	r3, [r3, #2]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d136      	bne.n	800897a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008912:	2b00      	cmp	r3, #0
 8008914:	d004      	beq.n	8008920 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 f943 	bl	8009ba6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fd03 	bl	800932c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fde4 	bl	80084f8 <USBD_CoreFindEP>
 8008930:	4603      	mov	r3, r0
 8008932:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008934:	7b7b      	ldrb	r3, [r7, #13]
 8008936:	2bff      	cmp	r3, #255	@ 0xff
 8008938:	d01f      	beq.n	800897a <USBD_StdEPReq+0x1c6>
 800893a:	7b7b      	ldrb	r3, [r7, #13]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d11c      	bne.n	800897a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008940:	7b7a      	ldrb	r2, [r7, #13]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008948:	7b7a      	ldrb	r2, [r7, #13]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	32ae      	adds	r2, #174	@ 0xae
 800894e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d010      	beq.n	800897a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008958:	7b7a      	ldrb	r2, [r7, #13]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	32ae      	adds	r2, #174	@ 0xae
 800895e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	4798      	blx	r3
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800896e:	e004      	b.n	800897a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fc03 	bl	800917e <USBD_CtlError>
              break;
 8008978:	e000      	b.n	800897c <USBD_StdEPReq+0x1c8>
              break;
 800897a:	bf00      	nop
          }
          break;
 800897c:	e0ab      	b.n	8008ad6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b02      	cmp	r3, #2
 8008988:	d002      	beq.n	8008990 <USBD_StdEPReq+0x1dc>
 800898a:	2b03      	cmp	r3, #3
 800898c:	d032      	beq.n	80089f4 <USBD_StdEPReq+0x240>
 800898e:	e097      	b.n	8008ac0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <USBD_StdEPReq+0x1f2>
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b80      	cmp	r3, #128	@ 0x80
 800899a:	d004      	beq.n	80089a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fbed 	bl	800917e <USBD_CtlError>
                break;
 80089a4:	e091      	b.n	8008aca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da0b      	bge.n	80089c6 <USBD_StdEPReq+0x212>
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	3310      	adds	r3, #16
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	4413      	add	r3, r2
 80089c2:	3304      	adds	r3, #4
 80089c4:	e00b      	b.n	80089de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	4413      	add	r3, r2
 80089dc:	3304      	adds	r3, #4
 80089de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2202      	movs	r2, #2
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fc43 	bl	8009278 <USBD_CtlSendData>
              break;
 80089f2:	e06a      	b.n	8008aca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	da11      	bge.n	8008a20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	f003 020f 	and.w	r2, r3, #15
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	3324      	adds	r3, #36	@ 0x24
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d117      	bne.n	8008a46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fbb0 	bl	800917e <USBD_CtlError>
                  break;
 8008a1e:	e054      	b.n	8008aca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	f003 020f 	and.w	r2, r3, #15
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d104      	bne.n	8008a46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fb9d 	bl	800917e <USBD_CtlError>
                  break;
 8008a44:	e041      	b.n	8008aca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	da0b      	bge.n	8008a66 <USBD_StdEPReq+0x2b2>
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a54:	4613      	mov	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	3310      	adds	r3, #16
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	4413      	add	r3, r2
 8008a62:	3304      	adds	r3, #4
 8008a64:	e00b      	b.n	8008a7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
 8008a68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <USBD_StdEPReq+0x2d8>
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	2b80      	cmp	r3, #128	@ 0x80
 8008a8a:	d103      	bne.n	8008a94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	e00e      	b.n	8008ab2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 f8a3 	bl	8009be4 <USBD_LL_IsStallEP>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	e002      	b.n	8008ab2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fbdd 	bl	8009278 <USBD_CtlSendData>
              break;
 8008abe:	e004      	b.n	8008aca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fb5b 	bl	800917e <USBD_CtlError>
              break;
 8008ac8:	bf00      	nop
          }
          break;
 8008aca:	e004      	b.n	8008ad6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fb55 	bl	800917e <USBD_CtlError>
          break;
 8008ad4:	bf00      	nop
      }
      break;
 8008ad6:	e005      	b.n	8008ae4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fb4f 	bl	800917e <USBD_CtlError>
      break;
 8008ae0:	e000      	b.n	8008ae4 <USBD_StdEPReq+0x330>
      break;
 8008ae2:	bf00      	nop
  }

  return ret;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	885b      	ldrh	r3, [r3, #2]
 8008b0a:	0a1b      	lsrs	r3, r3, #8
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	2b06      	cmp	r3, #6
 8008b12:	f200 8128 	bhi.w	8008d66 <USBD_GetDescriptor+0x276>
 8008b16:	a201      	add	r2, pc, #4	@ (adr r2, 8008b1c <USBD_GetDescriptor+0x2c>)
 8008b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1c:	08008b39 	.word	0x08008b39
 8008b20:	08008b51 	.word	0x08008b51
 8008b24:	08008b91 	.word	0x08008b91
 8008b28:	08008d67 	.word	0x08008d67
 8008b2c:	08008d67 	.word	0x08008d67
 8008b30:	08008d07 	.word	0x08008d07
 8008b34:	08008d33 	.word	0x08008d33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	7c12      	ldrb	r2, [r2, #16]
 8008b44:	f107 0108 	add.w	r1, r7, #8
 8008b48:	4610      	mov	r0, r2
 8008b4a:	4798      	blx	r3
 8008b4c:	60f8      	str	r0, [r7, #12]
      break;
 8008b4e:	e112      	b.n	8008d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	7c1b      	ldrb	r3, [r3, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10d      	bne.n	8008b74 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b60:	f107 0208 	add.w	r2, r7, #8
 8008b64:	4610      	mov	r0, r2
 8008b66:	4798      	blx	r3
 8008b68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	2202      	movs	r2, #2
 8008b70:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b72:	e100      	b.n	8008d76 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7c:	f107 0208 	add.w	r2, r7, #8
 8008b80:	4610      	mov	r0, r2
 8008b82:	4798      	blx	r3
 8008b84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	701a      	strb	r2, [r3, #0]
      break;
 8008b8e:	e0f2      	b.n	8008d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	885b      	ldrh	r3, [r3, #2]
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b05      	cmp	r3, #5
 8008b98:	f200 80ac 	bhi.w	8008cf4 <USBD_GetDescriptor+0x204>
 8008b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <USBD_GetDescriptor+0xb4>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008bbd 	.word	0x08008bbd
 8008ba8:	08008bf1 	.word	0x08008bf1
 8008bac:	08008c25 	.word	0x08008c25
 8008bb0:	08008c59 	.word	0x08008c59
 8008bb4:	08008c8d 	.word	0x08008c8d
 8008bb8:	08008cc1 	.word	0x08008cc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00b      	beq.n	8008be0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	7c12      	ldrb	r2, [r2, #16]
 8008bd4:	f107 0108 	add.w	r1, r7, #8
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
 8008bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bde:	e091      	b.n	8008d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 facb 	bl	800917e <USBD_CtlError>
            err++;
 8008be8:	7afb      	ldrb	r3, [r7, #11]
 8008bea:	3301      	adds	r3, #1
 8008bec:	72fb      	strb	r3, [r7, #11]
          break;
 8008bee:	e089      	b.n	8008d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00b      	beq.n	8008c14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	7c12      	ldrb	r2, [r2, #16]
 8008c08:	f107 0108 	add.w	r1, r7, #8
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
 8008c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c12:	e077      	b.n	8008d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fab1 	bl	800917e <USBD_CtlError>
            err++;
 8008c1c:	7afb      	ldrb	r3, [r7, #11]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	72fb      	strb	r3, [r7, #11]
          break;
 8008c22:	e06f      	b.n	8008d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00b      	beq.n	8008c48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	7c12      	ldrb	r2, [r2, #16]
 8008c3c:	f107 0108 	add.w	r1, r7, #8
 8008c40:	4610      	mov	r0, r2
 8008c42:	4798      	blx	r3
 8008c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c46:	e05d      	b.n	8008d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fa97 	bl	800917e <USBD_CtlError>
            err++;
 8008c50:	7afb      	ldrb	r3, [r7, #11]
 8008c52:	3301      	adds	r3, #1
 8008c54:	72fb      	strb	r3, [r7, #11]
          break;
 8008c56:	e055      	b.n	8008d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00b      	beq.n	8008c7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	7c12      	ldrb	r2, [r2, #16]
 8008c70:	f107 0108 	add.w	r1, r7, #8
 8008c74:	4610      	mov	r0, r2
 8008c76:	4798      	blx	r3
 8008c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c7a:	e043      	b.n	8008d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa7d 	bl	800917e <USBD_CtlError>
            err++;
 8008c84:	7afb      	ldrb	r3, [r7, #11]
 8008c86:	3301      	adds	r3, #1
 8008c88:	72fb      	strb	r3, [r7, #11]
          break;
 8008c8a:	e03b      	b.n	8008d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00b      	beq.n	8008cb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	7c12      	ldrb	r2, [r2, #16]
 8008ca4:	f107 0108 	add.w	r1, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cae:	e029      	b.n	8008d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fa63 	bl	800917e <USBD_CtlError>
            err++;
 8008cb8:	7afb      	ldrb	r3, [r7, #11]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cbe:	e021      	b.n	8008d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00b      	beq.n	8008ce4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	7c12      	ldrb	r2, [r2, #16]
 8008cd8:	f107 0108 	add.w	r1, r7, #8
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4798      	blx	r3
 8008ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ce2:	e00f      	b.n	8008d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa49 	bl	800917e <USBD_CtlError>
            err++;
 8008cec:	7afb      	ldrb	r3, [r7, #11]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cf2:	e007      	b.n	8008d04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa41 	bl	800917e <USBD_CtlError>
          err++;
 8008cfc:	7afb      	ldrb	r3, [r7, #11]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008d02:	bf00      	nop
      }
      break;
 8008d04:	e037      	b.n	8008d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	7c1b      	ldrb	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d109      	bne.n	8008d22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d16:	f107 0208 	add.w	r2, r7, #8
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	4798      	blx	r3
 8008d1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d20:	e029      	b.n	8008d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fa2a 	bl	800917e <USBD_CtlError>
        err++;
 8008d2a:	7afb      	ldrb	r3, [r7, #11]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d30:	e021      	b.n	8008d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	7c1b      	ldrb	r3, [r3, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10d      	bne.n	8008d56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d42:	f107 0208 	add.w	r2, r7, #8
 8008d46:	4610      	mov	r0, r2
 8008d48:	4798      	blx	r3
 8008d4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	2207      	movs	r2, #7
 8008d52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d54:	e00f      	b.n	8008d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fa10 	bl	800917e <USBD_CtlError>
        err++;
 8008d5e:	7afb      	ldrb	r3, [r7, #11]
 8008d60:	3301      	adds	r3, #1
 8008d62:	72fb      	strb	r3, [r7, #11]
      break;
 8008d64:	e007      	b.n	8008d76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fa08 	bl	800917e <USBD_CtlError>
      err++;
 8008d6e:	7afb      	ldrb	r3, [r7, #11]
 8008d70:	3301      	adds	r3, #1
 8008d72:	72fb      	strb	r3, [r7, #11]
      break;
 8008d74:	bf00      	nop
  }

  if (err != 0U)
 8008d76:	7afb      	ldrb	r3, [r7, #11]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d11e      	bne.n	8008dba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	88db      	ldrh	r3, [r3, #6]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d016      	beq.n	8008db2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008d84:	893b      	ldrh	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00e      	beq.n	8008da8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	88da      	ldrh	r2, [r3, #6]
 8008d8e:	893b      	ldrh	r3, [r7, #8]
 8008d90:	4293      	cmp	r3, r2
 8008d92:	bf28      	it	cs
 8008d94:	4613      	movcs	r3, r2
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d9a:	893b      	ldrh	r3, [r7, #8]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	68f9      	ldr	r1, [r7, #12]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fa69 	bl	8009278 <USBD_CtlSendData>
 8008da6:	e009      	b.n	8008dbc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f9e7 	bl	800917e <USBD_CtlError>
 8008db0:	e004      	b.n	8008dbc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 faba 	bl	800932c <USBD_CtlSendStatus>
 8008db8:	e000      	b.n	8008dbc <USBD_GetDescriptor+0x2cc>
    return;
 8008dba:	bf00      	nop
  }
}
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop

08008dc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	889b      	ldrh	r3, [r3, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d131      	bne.n	8008e3a <USBD_SetAddress+0x76>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	88db      	ldrh	r3, [r3, #6]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d12d      	bne.n	8008e3a <USBD_SetAddress+0x76>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	885b      	ldrh	r3, [r3, #2]
 8008de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008de4:	d829      	bhi.n	8008e3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	885b      	ldrh	r3, [r3, #2]
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008df0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d104      	bne.n	8008e08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f9bc 	bl	800917e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e06:	e01d      	b.n	8008e44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	7bfa      	ldrb	r2, [r7, #15]
 8008e0c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 ff11 	bl	8009c3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa86 	bl	800932c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d004      	beq.n	8008e30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2e:	e009      	b.n	8008e44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e38:	e004      	b.n	8008e44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f99e 	bl	800917e <USBD_CtlError>
  }
}
 8008e42:	bf00      	nop
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	885b      	ldrh	r3, [r3, #2]
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	4b4e      	ldr	r3, [pc, #312]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008e62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e64:	4b4d      	ldr	r3, [pc, #308]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d905      	bls.n	8008e78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f985 	bl	800917e <USBD_CtlError>
    return USBD_FAIL;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e08c      	b.n	8008f92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d002      	beq.n	8008e8a <USBD_SetConfig+0x3e>
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d029      	beq.n	8008edc <USBD_SetConfig+0x90>
 8008e88:	e075      	b.n	8008f76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e8a:	4b44      	ldr	r3, [pc, #272]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d020      	beq.n	8008ed4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e92:	4b42      	ldr	r3, [pc, #264]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7fe ffe3 	bl	8007e6e <USBD_SetClassConfig>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d008      	beq.n	8008ec4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f962 	bl	800917e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ec2:	e065      	b.n	8008f90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fa31 	bl	800932c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2203      	movs	r2, #3
 8008ece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ed2:	e05d      	b.n	8008f90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fa29 	bl	800932c <USBD_CtlSendStatus>
      break;
 8008eda:	e059      	b.n	8008f90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008edc:	4b2f      	ldr	r3, [pc, #188]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d112      	bne.n	8008f0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008eec:	4b2b      	ldr	r3, [pc, #172]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ef6:	4b29      	ldr	r3, [pc, #164]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7fe ffd2 	bl	8007ea6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fa12 	bl	800932c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f08:	e042      	b.n	8008f90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008f0a:	4b24      	ldr	r3, [pc, #144]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d02a      	beq.n	8008f6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fe ffc0 	bl	8007ea6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f26:	4b1d      	ldr	r3, [pc, #116]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f30:	4b1a      	ldr	r3, [pc, #104]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7fe ff99 	bl	8007e6e <USBD_SetClassConfig>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00f      	beq.n	8008f66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f918 	bl	800917e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fe ffa5 	bl	8007ea6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f64:	e014      	b.n	8008f90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f9e0 	bl	800932c <USBD_CtlSendStatus>
      break;
 8008f6c:	e010      	b.n	8008f90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f9dc 	bl	800932c <USBD_CtlSendStatus>
      break;
 8008f74:	e00c      	b.n	8008f90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f900 	bl	800917e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f7e:	4b07      	ldr	r3, [pc, #28]	@ (8008f9c <USBD_SetConfig+0x150>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7fe ff8e 	bl	8007ea6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f8e:	bf00      	nop
  }

  return ret;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20000518 	.word	0x20000518

08008fa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	88db      	ldrh	r3, [r3, #6]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d004      	beq.n	8008fbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f8e2 	bl	800917e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fba:	e023      	b.n	8009004 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	dc02      	bgt.n	8008fce <USBD_GetConfig+0x2e>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dc03      	bgt.n	8008fd4 <USBD_GetConfig+0x34>
 8008fcc:	e015      	b.n	8008ffa <USBD_GetConfig+0x5a>
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d00b      	beq.n	8008fea <USBD_GetConfig+0x4a>
 8008fd2:	e012      	b.n	8008ffa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3308      	adds	r3, #8
 8008fde:	2201      	movs	r2, #1
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f948 	bl	8009278 <USBD_CtlSendData>
        break;
 8008fe8:	e00c      	b.n	8009004 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3304      	adds	r3, #4
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f940 	bl	8009278 <USBD_CtlSendData>
        break;
 8008ff8:	e004      	b.n	8009004 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f8be 	bl	800917e <USBD_CtlError>
        break;
 8009002:	bf00      	nop
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800901c:	b2db      	uxtb	r3, r3
 800901e:	3b01      	subs	r3, #1
 8009020:	2b02      	cmp	r3, #2
 8009022:	d81e      	bhi.n	8009062 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	88db      	ldrh	r3, [r3, #6]
 8009028:	2b02      	cmp	r3, #2
 800902a:	d004      	beq.n	8009036 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f8a5 	bl	800917e <USBD_CtlError>
        break;
 8009034:	e01a      	b.n	800906c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009042:	2b00      	cmp	r3, #0
 8009044:	d005      	beq.n	8009052 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f043 0202 	orr.w	r2, r3, #2
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	330c      	adds	r3, #12
 8009056:	2202      	movs	r2, #2
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f90c 	bl	8009278 <USBD_CtlSendData>
      break;
 8009060:	e004      	b.n	800906c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f88a 	bl	800917e <USBD_CtlError>
      break;
 800906a:	bf00      	nop
  }
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	885b      	ldrh	r3, [r3, #2]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d107      	bne.n	8009096 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f94c 	bl	800932c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009094:	e013      	b.n	80090be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	885b      	ldrh	r3, [r3, #2]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d10b      	bne.n	80090b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	889b      	ldrh	r3, [r3, #4]
 80090a2:	0a1b      	lsrs	r3, r3, #8
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f93c 	bl	800932c <USBD_CtlSendStatus>
}
 80090b4:	e003      	b.n	80090be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f860 	bl	800917e <USBD_CtlError>
}
 80090be:	bf00      	nop
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d80b      	bhi.n	80090f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	885b      	ldrh	r3, [r3, #2]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d10c      	bne.n	8009100 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f91c 	bl	800932c <USBD_CtlSendStatus>
      }
      break;
 80090f4:	e004      	b.n	8009100 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f840 	bl	800917e <USBD_CtlError>
      break;
 80090fe:	e000      	b.n	8009102 <USBD_ClrFeature+0x3c>
      break;
 8009100:	bf00      	nop
  }
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	781a      	ldrb	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	3301      	adds	r3, #1
 8009124:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	781a      	ldrb	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3301      	adds	r3, #1
 8009132:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f7ff fa40 	bl	80085ba <SWAPBYTE>
 800913a:	4603      	mov	r3, r0
 800913c:	461a      	mov	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3301      	adds	r3, #1
 8009146:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3301      	adds	r3, #1
 800914c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f7ff fa33 	bl	80085ba <SWAPBYTE>
 8009154:	4603      	mov	r3, r0
 8009156:	461a      	mov	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f7ff fa26 	bl	80085ba <SWAPBYTE>
 800916e:	4603      	mov	r3, r0
 8009170:	461a      	mov	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	80da      	strh	r2, [r3, #6]
}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009188:	2180      	movs	r1, #128	@ 0x80
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fcec 	bl	8009b68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009190:	2100      	movs	r1, #0
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fce8 	bl	8009b68 <USBD_LL_StallEP>
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d042      	beq.n	800923c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80091ba:	6938      	ldr	r0, [r7, #16]
 80091bc:	f000 f842 	bl	8009244 <USBD_GetLen>
 80091c0:	4603      	mov	r3, r0
 80091c2:	3301      	adds	r3, #1
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ca:	d808      	bhi.n	80091de <USBD_GetString+0x3e>
 80091cc:	6938      	ldr	r0, [r7, #16]
 80091ce:	f000 f839 	bl	8009244 <USBD_GetLen>
 80091d2:	4603      	mov	r3, r0
 80091d4:	3301      	adds	r3, #1
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	e001      	b.n	80091e2 <USBD_GetString+0x42>
 80091de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	4413      	add	r3, r2
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	7812      	ldrb	r2, [r2, #0]
 80091f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	3301      	adds	r3, #1
 80091f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	4413      	add	r3, r2
 80091fe:	2203      	movs	r2, #3
 8009200:	701a      	strb	r2, [r3, #0]
  idx++;
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	3301      	adds	r3, #1
 8009206:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009208:	e013      	b.n	8009232 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	4413      	add	r3, r2
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	7812      	ldrb	r2, [r2, #0]
 8009214:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	3301      	adds	r3, #1
 800921a:	613b      	str	r3, [r7, #16]
    idx++;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	3301      	adds	r3, #1
 8009220:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	4413      	add	r3, r2
 8009228:	2200      	movs	r2, #0
 800922a:	701a      	strb	r2, [r3, #0]
    idx++;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
 800922e:	3301      	adds	r3, #1
 8009230:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e7      	bne.n	800920a <USBD_GetString+0x6a>
 800923a:	e000      	b.n	800923e <USBD_GetString+0x9e>
    return;
 800923c:	bf00      	nop
  }
}
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009254:	e005      	b.n	8009262 <USBD_GetLen+0x1e>
  {
    len++;
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	3301      	adds	r3, #1
 800925a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	3301      	adds	r3, #1
 8009260:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1f5      	bne.n	8009256 <USBD_GetLen+0x12>
  }

  return len;
 800926a:	7bfb      	ldrb	r3, [r7, #15]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2202      	movs	r2, #2
 8009288:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	2100      	movs	r1, #0
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 fceb 	bl	8009c7a <USBD_LL_Transmit>

  return USBD_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	2100      	movs	r1, #0
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 fcda 	bl	8009c7a <USBD_LL_Transmit>

  return USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2203      	movs	r2, #3
 80092e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	2100      	movs	r1, #0
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 fcde 	bl	8009cbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	2100      	movs	r1, #0
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 fccd 	bl	8009cbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2204      	movs	r2, #4
 8009338:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800933c:	2300      	movs	r3, #0
 800933e:	2200      	movs	r2, #0
 8009340:	2100      	movs	r1, #0
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fc99 	bl	8009c7a <USBD_LL_Transmit>

  return USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2205      	movs	r2, #5
 800935e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009362:	2300      	movs	r3, #0
 8009364:	2200      	movs	r2, #0
 8009366:	2100      	movs	r1, #0
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fca7 	bl	8009cbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800937c:	2200      	movs	r2, #0
 800937e:	4912      	ldr	r1, [pc, #72]	@ (80093c8 <MX_USB_DEVICE_Init+0x50>)
 8009380:	4812      	ldr	r0, [pc, #72]	@ (80093cc <MX_USB_DEVICE_Init+0x54>)
 8009382:	f7fe fcf7 	bl	8007d74 <USBD_Init>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800938c:	f7f8 fce2 	bl	8001d54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009390:	490f      	ldr	r1, [pc, #60]	@ (80093d0 <MX_USB_DEVICE_Init+0x58>)
 8009392:	480e      	ldr	r0, [pc, #56]	@ (80093cc <MX_USB_DEVICE_Init+0x54>)
 8009394:	f7fe fd1e 	bl	8007dd4 <USBD_RegisterClass>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800939e:	f7f8 fcd9 	bl	8001d54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093a2:	490c      	ldr	r1, [pc, #48]	@ (80093d4 <MX_USB_DEVICE_Init+0x5c>)
 80093a4:	4809      	ldr	r0, [pc, #36]	@ (80093cc <MX_USB_DEVICE_Init+0x54>)
 80093a6:	f7fe fc15 	bl	8007bd4 <USBD_CDC_RegisterInterface>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093b0:	f7f8 fcd0 	bl	8001d54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093b4:	4805      	ldr	r0, [pc, #20]	@ (80093cc <MX_USB_DEVICE_Init+0x54>)
 80093b6:	f7fe fd43 	bl	8007e40 <USBD_Start>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093c0:	f7f8 fcc8 	bl	8001d54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093c4:	bf00      	nop
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	200000ac 	.word	0x200000ac
 80093cc:	2000051c 	.word	0x2000051c
 80093d0:	20000018 	.word	0x20000018
 80093d4:	20000098 	.word	0x20000098

080093d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093dc:	2200      	movs	r2, #0
 80093de:	4905      	ldr	r1, [pc, #20]	@ (80093f4 <CDC_Init_FS+0x1c>)
 80093e0:	4805      	ldr	r0, [pc, #20]	@ (80093f8 <CDC_Init_FS+0x20>)
 80093e2:	f7fe fc11 	bl	8007c08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093e6:	4905      	ldr	r1, [pc, #20]	@ (80093fc <CDC_Init_FS+0x24>)
 80093e8:	4803      	ldr	r0, [pc, #12]	@ (80093f8 <CDC_Init_FS+0x20>)
 80093ea:	f7fe fc2f 	bl	8007c4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20000ff8 	.word	0x20000ff8
 80093f8:	2000051c 	.word	0x2000051c
 80093fc:	200007f8 	.word	0x200007f8

08009400 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009404:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009406:	4618      	mov	r0, r3
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	6039      	str	r1, [r7, #0]
 800941a:	71fb      	strb	r3, [r7, #7]
 800941c:	4613      	mov	r3, r2
 800941e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	2b23      	cmp	r3, #35	@ 0x23
 8009424:	d84a      	bhi.n	80094bc <CDC_Control_FS+0xac>
 8009426:	a201      	add	r2, pc, #4	@ (adr r2, 800942c <CDC_Control_FS+0x1c>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	080094bd 	.word	0x080094bd
 8009430:	080094bd 	.word	0x080094bd
 8009434:	080094bd 	.word	0x080094bd
 8009438:	080094bd 	.word	0x080094bd
 800943c:	080094bd 	.word	0x080094bd
 8009440:	080094bd 	.word	0x080094bd
 8009444:	080094bd 	.word	0x080094bd
 8009448:	080094bd 	.word	0x080094bd
 800944c:	080094bd 	.word	0x080094bd
 8009450:	080094bd 	.word	0x080094bd
 8009454:	080094bd 	.word	0x080094bd
 8009458:	080094bd 	.word	0x080094bd
 800945c:	080094bd 	.word	0x080094bd
 8009460:	080094bd 	.word	0x080094bd
 8009464:	080094bd 	.word	0x080094bd
 8009468:	080094bd 	.word	0x080094bd
 800946c:	080094bd 	.word	0x080094bd
 8009470:	080094bd 	.word	0x080094bd
 8009474:	080094bd 	.word	0x080094bd
 8009478:	080094bd 	.word	0x080094bd
 800947c:	080094bd 	.word	0x080094bd
 8009480:	080094bd 	.word	0x080094bd
 8009484:	080094bd 	.word	0x080094bd
 8009488:	080094bd 	.word	0x080094bd
 800948c:	080094bd 	.word	0x080094bd
 8009490:	080094bd 	.word	0x080094bd
 8009494:	080094bd 	.word	0x080094bd
 8009498:	080094bd 	.word	0x080094bd
 800949c:	080094bd 	.word	0x080094bd
 80094a0:	080094bd 	.word	0x080094bd
 80094a4:	080094bd 	.word	0x080094bd
 80094a8:	080094bd 	.word	0x080094bd
 80094ac:	080094bd 	.word	0x080094bd
 80094b0:	080094bd 	.word	0x080094bd
 80094b4:	080094bd 	.word	0x080094bd
 80094b8:	080094bd 	.word	0x080094bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094bc:	bf00      	nop
  }

  return (USBD_OK);
 80094be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4805      	ldr	r0, [pc, #20]	@ (80094f0 <CDC_Receive_FS+0x24>)
 80094da:	f7fe fbb7 	bl	8007c4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094de:	4804      	ldr	r0, [pc, #16]	@ (80094f0 <CDC_Receive_FS+0x24>)
 80094e0:	f7fe fc12 	bl	8007d08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	2000051c 	.word	0x2000051c

080094f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009504:	4b0d      	ldr	r3, [pc, #52]	@ (800953c <CDC_Transmit_FS+0x48>)
 8009506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800950a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009516:	2301      	movs	r3, #1
 8009518:	e00b      	b.n	8009532 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800951a:	887b      	ldrh	r3, [r7, #2]
 800951c:	461a      	mov	r2, r3
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4806      	ldr	r0, [pc, #24]	@ (800953c <CDC_Transmit_FS+0x48>)
 8009522:	f7fe fb71 	bl	8007c08 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009526:	4805      	ldr	r0, [pc, #20]	@ (800953c <CDC_Transmit_FS+0x48>)
 8009528:	f7fe fbae 	bl	8007c88 <USBD_CDC_TransmitPacket>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	2000051c 	.word	0x2000051c

08009540 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009556:	4618      	mov	r0, r3
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
	...

08009564 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	2212      	movs	r2, #18
 8009574:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009576:	4b03      	ldr	r3, [pc, #12]	@ (8009584 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	200000c8 	.word	0x200000c8

08009588 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	6039      	str	r1, [r7, #0]
 8009592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2204      	movs	r2, #4
 8009598:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800959a:	4b03      	ldr	r3, [pc, #12]	@ (80095a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800959c:	4618      	mov	r0, r3
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	200000dc 	.word	0x200000dc

080095ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	6039      	str	r1, [r7, #0]
 80095b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d105      	bne.n	80095ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4907      	ldr	r1, [pc, #28]	@ (80095e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80095c2:	4808      	ldr	r0, [pc, #32]	@ (80095e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80095c4:	f7ff fdec 	bl	80091a0 <USBD_GetString>
 80095c8:	e004      	b.n	80095d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4904      	ldr	r1, [pc, #16]	@ (80095e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80095ce:	4805      	ldr	r0, [pc, #20]	@ (80095e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80095d0:	f7ff fde6 	bl	80091a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d4:	4b02      	ldr	r3, [pc, #8]	@ (80095e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	200017f8 	.word	0x200017f8
 80095e4:	0800cda8 	.word	0x0800cda8

080095e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	4904      	ldr	r1, [pc, #16]	@ (8009608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80095f8:	4804      	ldr	r0, [pc, #16]	@ (800960c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80095fa:	f7ff fdd1 	bl	80091a0 <USBD_GetString>
  return USBD_StrDesc;
 80095fe:	4b02      	ldr	r3, [pc, #8]	@ (8009608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	200017f8 	.word	0x200017f8
 800960c:	0800cdc0 	.word	0x0800cdc0

08009610 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	6039      	str	r1, [r7, #0]
 800961a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	221a      	movs	r2, #26
 8009620:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009622:	f000 f843 	bl	80096ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009626:	4b02      	ldr	r3, [pc, #8]	@ (8009630 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	200000e0 	.word	0x200000e0

08009634 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	6039      	str	r1, [r7, #0]
 800963e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009640:	79fb      	ldrb	r3, [r7, #7]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d105      	bne.n	8009652 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	4907      	ldr	r1, [pc, #28]	@ (8009668 <USBD_FS_ConfigStrDescriptor+0x34>)
 800964a:	4808      	ldr	r0, [pc, #32]	@ (800966c <USBD_FS_ConfigStrDescriptor+0x38>)
 800964c:	f7ff fda8 	bl	80091a0 <USBD_GetString>
 8009650:	e004      	b.n	800965c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	4904      	ldr	r1, [pc, #16]	@ (8009668 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009656:	4805      	ldr	r0, [pc, #20]	@ (800966c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009658:	f7ff fda2 	bl	80091a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800965c:	4b02      	ldr	r3, [pc, #8]	@ (8009668 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	200017f8 	.word	0x200017f8
 800966c:	0800cdd4 	.word	0x0800cdd4

08009670 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	6039      	str	r1, [r7, #0]
 800967a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d105      	bne.n	800968e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4907      	ldr	r1, [pc, #28]	@ (80096a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009686:	4808      	ldr	r0, [pc, #32]	@ (80096a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009688:	f7ff fd8a 	bl	80091a0 <USBD_GetString>
 800968c:	e004      	b.n	8009698 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4904      	ldr	r1, [pc, #16]	@ (80096a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009692:	4805      	ldr	r0, [pc, #20]	@ (80096a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009694:	f7ff fd84 	bl	80091a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009698:	4b02      	ldr	r3, [pc, #8]	@ (80096a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	200017f8 	.word	0x200017f8
 80096a8:	0800cde0 	.word	0x0800cde0

080096ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096b2:	4b0f      	ldr	r3, [pc, #60]	@ (80096f0 <Get_SerialNum+0x44>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096b8:	4b0e      	ldr	r3, [pc, #56]	@ (80096f4 <Get_SerialNum+0x48>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096be:	4b0e      	ldr	r3, [pc, #56]	@ (80096f8 <Get_SerialNum+0x4c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4413      	add	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d009      	beq.n	80096e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096d2:	2208      	movs	r2, #8
 80096d4:	4909      	ldr	r1, [pc, #36]	@ (80096fc <Get_SerialNum+0x50>)
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 f814 	bl	8009704 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096dc:	2204      	movs	r2, #4
 80096de:	4908      	ldr	r1, [pc, #32]	@ (8009700 <Get_SerialNum+0x54>)
 80096e0:	68b8      	ldr	r0, [r7, #8]
 80096e2:	f000 f80f 	bl	8009704 <IntToUnicode>
  }
}
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	1fff7a10 	.word	0x1fff7a10
 80096f4:	1fff7a14 	.word	0x1fff7a14
 80096f8:	1fff7a18 	.word	0x1fff7a18
 80096fc:	200000e2 	.word	0x200000e2
 8009700:	200000f2 	.word	0x200000f2

08009704 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009716:	2300      	movs	r3, #0
 8009718:	75fb      	strb	r3, [r7, #23]
 800971a:	e027      	b.n	800976c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	0f1b      	lsrs	r3, r3, #28
 8009720:	2b09      	cmp	r3, #9
 8009722:	d80b      	bhi.n	800973c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	0f1b      	lsrs	r3, r3, #28
 8009728:	b2da      	uxtb	r2, r3
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	4619      	mov	r1, r3
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	440b      	add	r3, r1
 8009734:	3230      	adds	r2, #48	@ 0x30
 8009736:	b2d2      	uxtb	r2, r2
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	e00a      	b.n	8009752 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	0f1b      	lsrs	r3, r3, #28
 8009740:	b2da      	uxtb	r2, r3
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	4619      	mov	r1, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	440b      	add	r3, r1
 800974c:	3237      	adds	r2, #55	@ 0x37
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	011b      	lsls	r3, r3, #4
 8009756:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	3301      	adds	r3, #1
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	4413      	add	r3, r2
 8009762:	2200      	movs	r2, #0
 8009764:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	3301      	adds	r3, #1
 800976a:	75fb      	strb	r3, [r7, #23]
 800976c:	7dfa      	ldrb	r2, [r7, #23]
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	429a      	cmp	r2, r3
 8009772:	d3d3      	bcc.n	800971c <IntToUnicode+0x18>
  }
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	371c      	adds	r7, #28
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
	...

08009784 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	@ 0x28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800978c:	f107 0314 	add.w	r3, r7, #20
 8009790:	2200      	movs	r2, #0
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	605a      	str	r2, [r3, #4]
 8009796:	609a      	str	r2, [r3, #8]
 8009798:	60da      	str	r2, [r3, #12]
 800979a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097a4:	d13a      	bne.n	800981c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097a6:	2300      	movs	r3, #0
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	4b1e      	ldr	r3, [pc, #120]	@ (8009824 <HAL_PCD_MspInit+0xa0>)
 80097ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009824 <HAL_PCD_MspInit+0xa0>)
 80097b0:	f043 0301 	orr.w	r3, r3, #1
 80097b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80097b6:	4b1b      	ldr	r3, [pc, #108]	@ (8009824 <HAL_PCD_MspInit+0xa0>)
 80097b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	613b      	str	r3, [r7, #16]
 80097c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80097c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80097c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097c8:	2302      	movs	r3, #2
 80097ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097cc:	2300      	movs	r3, #0
 80097ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097d0:	2303      	movs	r3, #3
 80097d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80097d4:	230a      	movs	r3, #10
 80097d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097d8:	f107 0314 	add.w	r3, r7, #20
 80097dc:	4619      	mov	r1, r3
 80097de:	4812      	ldr	r0, [pc, #72]	@ (8009828 <HAL_PCD_MspInit+0xa4>)
 80097e0:	f7f9 fa3e 	bl	8002c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80097e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009824 <HAL_PCD_MspInit+0xa0>)
 80097e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009824 <HAL_PCD_MspInit+0xa0>)
 80097ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097ee:	6353      	str	r3, [r2, #52]	@ 0x34
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <HAL_PCD_MspInit+0xa0>)
 80097f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097f8:	4a0a      	ldr	r2, [pc, #40]	@ (8009824 <HAL_PCD_MspInit+0xa0>)
 80097fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80097fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8009800:	4b08      	ldr	r3, [pc, #32]	@ (8009824 <HAL_PCD_MspInit+0xa0>)
 8009802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009808:	60fb      	str	r3, [r7, #12]
 800980a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800980c:	2200      	movs	r2, #0
 800980e:	2100      	movs	r1, #0
 8009810:	2043      	movs	r0, #67	@ 0x43
 8009812:	f7f8 fe5c 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009816:	2043      	movs	r0, #67	@ 0x43
 8009818:	f7f8 fe75 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800981c:	bf00      	nop
 800981e:	3728      	adds	r7, #40	@ 0x28
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	40023800 	.word	0x40023800
 8009828:	40020000 	.word	0x40020000

0800982c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009840:	4619      	mov	r1, r3
 8009842:	4610      	mov	r0, r2
 8009844:	f7fe fb49 	bl	8007eda <USBD_LL_SetupStage>
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	6879      	ldr	r1, [r7, #4]
 8009866:	4613      	mov	r3, r2
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	4413      	add	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	440b      	add	r3, r1
 8009870:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	78fb      	ldrb	r3, [r7, #3]
 8009878:	4619      	mov	r1, r3
 800987a:	f7fe fb83 	bl	8007f84 <USBD_LL_DataOutStage>
}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009898:	78fa      	ldrb	r2, [r7, #3]
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	4613      	mov	r3, r2
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	4413      	add	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	440b      	add	r3, r1
 80098a6:	3320      	adds	r3, #32
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	4619      	mov	r1, r3
 80098ae:	f7fe fc1c 	bl	80080ea <USBD_LL_DataInStage>
}
 80098b2:	bf00      	nop
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b082      	sub	sp, #8
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe fd56 	bl	800837a <USBD_LL_SOF>
}
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098de:	2301      	movs	r3, #1
 80098e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	79db      	ldrb	r3, [r3, #7]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d102      	bne.n	80098f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
 80098ee:	e008      	b.n	8009902 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	79db      	ldrb	r3, [r3, #7]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d102      	bne.n	80098fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80098f8:	2301      	movs	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
 80098fc:	e001      	b.n	8009902 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80098fe:	f7f8 fa29 	bl	8001d54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009908:	7bfa      	ldrb	r2, [r7, #15]
 800990a:	4611      	mov	r1, r2
 800990c:	4618      	mov	r0, r3
 800990e:	f7fe fcf0 	bl	80082f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fc98 	bl	800824e <USBD_LL_Reset>
}
 800991e:	bf00      	nop
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe fceb 	bl	8008312 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	6812      	ldr	r2, [r2, #0]
 800994a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	7adb      	ldrb	r3, [r3, #11]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d005      	beq.n	8009968 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800995c:	4b04      	ldr	r3, [pc, #16]	@ (8009970 <HAL_PCD_SuspendCallback+0x48>)
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	4a03      	ldr	r2, [pc, #12]	@ (8009970 <HAL_PCD_SuspendCallback+0x48>)
 8009962:	f043 0306 	orr.w	r3, r3, #6
 8009966:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	e000ed00 	.word	0xe000ed00

08009974 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009982:	4618      	mov	r0, r3
 8009984:	f7fe fce1 	bl	800834a <USBD_LL_Resume>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	4611      	mov	r1, r2
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe fd39 	bl	800841e <USBD_LL_IsoOUTIncomplete>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099c6:	78fa      	ldrb	r2, [r7, #3]
 80099c8:	4611      	mov	r1, r2
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fcf5 	bl	80083ba <USBD_LL_IsoINIncomplete>
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe fd4b 	bl	8008482 <USBD_LL_DevConnected>
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fd48 	bl	8008498 <USBD_LL_DevDisconnected>
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d13c      	bne.n	8009a9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a20:	4a20      	ldr	r2, [pc, #128]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a2c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a30:	4b1c      	ldr	r3, [pc, #112]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009a36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a38:	4b1a      	ldr	r3, [pc, #104]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a3a:	2204      	movs	r2, #4
 8009a3c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a3e:	4b19      	ldr	r3, [pc, #100]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a40:	2202      	movs	r2, #2
 8009a42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a44:	4b17      	ldr	r3, [pc, #92]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a4a:	4b16      	ldr	r3, [pc, #88]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a50:	4b14      	ldr	r3, [pc, #80]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a56:	4b13      	ldr	r3, [pc, #76]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a5c:	4b11      	ldr	r3, [pc, #68]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a62:	4b10      	ldr	r3, [pc, #64]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a68:	4b0e      	ldr	r3, [pc, #56]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a6e:	480d      	ldr	r0, [pc, #52]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a70:	f7f9 fade 	bl	8003030 <HAL_PCD_Init>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009a7a:	f7f8 f96b 	bl	8001d54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a7e:	2180      	movs	r1, #128	@ 0x80
 8009a80:	4808      	ldr	r0, [pc, #32]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a82:	f7fa fd0a 	bl	800449a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a86:	2240      	movs	r2, #64	@ 0x40
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4806      	ldr	r0, [pc, #24]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a8c:	f7fa fcbe 	bl	800440c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a90:	2280      	movs	r2, #128	@ 0x80
 8009a92:	2101      	movs	r1, #1
 8009a94:	4803      	ldr	r0, [pc, #12]	@ (8009aa4 <USBD_LL_Init+0x94>)
 8009a96:	f7fa fcb9 	bl	800440c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	200019f8 	.word	0x200019f8

08009aa8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7f9 fbc5 	bl	800324e <HAL_PCD_Start>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 f942 	bl	8009d54 <USBD_Get_USB_Status>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	4608      	mov	r0, r1
 8009ae8:	4611      	mov	r1, r2
 8009aea:	461a      	mov	r2, r3
 8009aec:	4603      	mov	r3, r0
 8009aee:	70fb      	strb	r3, [r7, #3]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70bb      	strb	r3, [r7, #2]
 8009af4:	4613      	mov	r3, r2
 8009af6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afc:	2300      	movs	r3, #0
 8009afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b06:	78bb      	ldrb	r3, [r7, #2]
 8009b08:	883a      	ldrh	r2, [r7, #0]
 8009b0a:	78f9      	ldrb	r1, [r7, #3]
 8009b0c:	f7fa f899 	bl	8003c42 <HAL_PCD_EP_Open>
 8009b10:	4603      	mov	r3, r0
 8009b12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 f91c 	bl	8009d54 <USBD_Get_USB_Status>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	460b      	mov	r3, r1
 8009b34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b44:	78fa      	ldrb	r2, [r7, #3]
 8009b46:	4611      	mov	r1, r2
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fa f8e4 	bl	8003d16 <HAL_PCD_EP_Close>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 f8fd 	bl	8009d54 <USBD_Get_USB_Status>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b82:	78fa      	ldrb	r2, [r7, #3]
 8009b84:	4611      	mov	r1, r2
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fa f99c 	bl	8003ec4 <HAL_PCD_EP_SetStall>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 f8de 	bl	8009d54 <USBD_Get_USB_Status>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009bc0:	78fa      	ldrb	r2, [r7, #3]
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fa f9e0 	bl	8003f8a <HAL_PCD_EP_ClrStall>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 f8bf 	bl	8009d54 <USBD_Get_USB_Status>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009bf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	da0b      	bge.n	8009c18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c00:	78fb      	ldrb	r3, [r7, #3]
 8009c02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c06:	68f9      	ldr	r1, [r7, #12]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	4413      	add	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	440b      	add	r3, r1
 8009c12:	3316      	adds	r3, #22
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	e00b      	b.n	8009c30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	4613      	mov	r3, r2
 8009c22:	00db      	lsls	r3, r3, #3
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009c2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c56:	78fa      	ldrb	r2, [r7, #3]
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7f9 ffcd 	bl	8003bfa <HAL_PCD_SetAddress>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 f874 	bl	8009d54 <USBD_Get_USB_Status>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b086      	sub	sp, #24
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
 8009c86:	460b      	mov	r3, r1
 8009c88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009c98:	7af9      	ldrb	r1, [r7, #11]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	f7fa f8d7 	bl	8003e50 <HAL_PCD_EP_Transmit>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 f853 	bl	8009d54 <USBD_Get_USB_Status>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	607a      	str	r2, [r7, #4]
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009cda:	7af9      	ldrb	r1, [r7, #11]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	f7fa f863 	bl	8003daa <HAL_PCD_EP_Receive>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 f832 	bl	8009d54 <USBD_Get_USB_Status>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cf4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d10:	78fa      	ldrb	r2, [r7, #3]
 8009d12:	4611      	mov	r1, r2
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fa f883 	bl	8003e20 <HAL_PCD_EP_GetRxCount>
 8009d1a:	4603      	mov	r3, r0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d2c:	4b03      	ldr	r3, [pc, #12]	@ (8009d3c <USBD_static_malloc+0x18>)
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	20001edc 	.word	0x20001edc

08009d40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]

}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d817      	bhi.n	8009d98 <USBD_Get_USB_Status+0x44>
 8009d68:	a201      	add	r2, pc, #4	@ (adr r2, 8009d70 <USBD_Get_USB_Status+0x1c>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009d81 	.word	0x08009d81
 8009d74:	08009d87 	.word	0x08009d87
 8009d78:	08009d8d 	.word	0x08009d8d
 8009d7c:	08009d93 	.word	0x08009d93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73fb      	strb	r3, [r7, #15]
    break;
 8009d84:	e00b      	b.n	8009d9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d86:	2303      	movs	r3, #3
 8009d88:	73fb      	strb	r3, [r7, #15]
    break;
 8009d8a:	e008      	b.n	8009d9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d90:	e005      	b.n	8009d9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d92:	2303      	movs	r3, #3
 8009d94:	73fb      	strb	r3, [r7, #15]
    break;
 8009d96:	e002      	b.n	8009d9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d9c:	bf00      	nop
  }
  return usb_status;
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <__cvt>:
 8009dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009db0:	ec57 6b10 	vmov	r6, r7, d0
 8009db4:	2f00      	cmp	r7, #0
 8009db6:	460c      	mov	r4, r1
 8009db8:	4619      	mov	r1, r3
 8009dba:	463b      	mov	r3, r7
 8009dbc:	bfbb      	ittet	lt
 8009dbe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009dc2:	461f      	movlt	r7, r3
 8009dc4:	2300      	movge	r3, #0
 8009dc6:	232d      	movlt	r3, #45	@ 0x2d
 8009dc8:	700b      	strb	r3, [r1, #0]
 8009dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009dcc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009dd0:	4691      	mov	r9, r2
 8009dd2:	f023 0820 	bic.w	r8, r3, #32
 8009dd6:	bfbc      	itt	lt
 8009dd8:	4632      	movlt	r2, r6
 8009dda:	4616      	movlt	r6, r2
 8009ddc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009de0:	d005      	beq.n	8009dee <__cvt+0x42>
 8009de2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009de6:	d100      	bne.n	8009dea <__cvt+0x3e>
 8009de8:	3401      	adds	r4, #1
 8009dea:	2102      	movs	r1, #2
 8009dec:	e000      	b.n	8009df0 <__cvt+0x44>
 8009dee:	2103      	movs	r1, #3
 8009df0:	ab03      	add	r3, sp, #12
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	ab02      	add	r3, sp, #8
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	ec47 6b10 	vmov	d0, r6, r7
 8009dfc:	4653      	mov	r3, sl
 8009dfe:	4622      	mov	r2, r4
 8009e00:	f000 fe5a 	bl	800aab8 <_dtoa_r>
 8009e04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e08:	4605      	mov	r5, r0
 8009e0a:	d119      	bne.n	8009e40 <__cvt+0x94>
 8009e0c:	f019 0f01 	tst.w	r9, #1
 8009e10:	d00e      	beq.n	8009e30 <__cvt+0x84>
 8009e12:	eb00 0904 	add.w	r9, r0, r4
 8009e16:	2200      	movs	r2, #0
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	f7f6 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e22:	b108      	cbz	r0, 8009e28 <__cvt+0x7c>
 8009e24:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e28:	2230      	movs	r2, #48	@ 0x30
 8009e2a:	9b03      	ldr	r3, [sp, #12]
 8009e2c:	454b      	cmp	r3, r9
 8009e2e:	d31e      	bcc.n	8009e6e <__cvt+0xc2>
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e34:	1b5b      	subs	r3, r3, r5
 8009e36:	4628      	mov	r0, r5
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	b004      	add	sp, #16
 8009e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e44:	eb00 0904 	add.w	r9, r0, r4
 8009e48:	d1e5      	bne.n	8009e16 <__cvt+0x6a>
 8009e4a:	7803      	ldrb	r3, [r0, #0]
 8009e4c:	2b30      	cmp	r3, #48	@ 0x30
 8009e4e:	d10a      	bne.n	8009e66 <__cvt+0xba>
 8009e50:	2200      	movs	r2, #0
 8009e52:	2300      	movs	r3, #0
 8009e54:	4630      	mov	r0, r6
 8009e56:	4639      	mov	r1, r7
 8009e58:	f7f6 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e5c:	b918      	cbnz	r0, 8009e66 <__cvt+0xba>
 8009e5e:	f1c4 0401 	rsb	r4, r4, #1
 8009e62:	f8ca 4000 	str.w	r4, [sl]
 8009e66:	f8da 3000 	ldr.w	r3, [sl]
 8009e6a:	4499      	add	r9, r3
 8009e6c:	e7d3      	b.n	8009e16 <__cvt+0x6a>
 8009e6e:	1c59      	adds	r1, r3, #1
 8009e70:	9103      	str	r1, [sp, #12]
 8009e72:	701a      	strb	r2, [r3, #0]
 8009e74:	e7d9      	b.n	8009e2a <__cvt+0x7e>

08009e76 <__exponent>:
 8009e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e78:	2900      	cmp	r1, #0
 8009e7a:	bfba      	itte	lt
 8009e7c:	4249      	neglt	r1, r1
 8009e7e:	232d      	movlt	r3, #45	@ 0x2d
 8009e80:	232b      	movge	r3, #43	@ 0x2b
 8009e82:	2909      	cmp	r1, #9
 8009e84:	7002      	strb	r2, [r0, #0]
 8009e86:	7043      	strb	r3, [r0, #1]
 8009e88:	dd29      	ble.n	8009ede <__exponent+0x68>
 8009e8a:	f10d 0307 	add.w	r3, sp, #7
 8009e8e:	461d      	mov	r5, r3
 8009e90:	270a      	movs	r7, #10
 8009e92:	461a      	mov	r2, r3
 8009e94:	fbb1 f6f7 	udiv	r6, r1, r7
 8009e98:	fb07 1416 	mls	r4, r7, r6, r1
 8009e9c:	3430      	adds	r4, #48	@ 0x30
 8009e9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	2c63      	cmp	r4, #99	@ 0x63
 8009ea6:	f103 33ff 	add.w	r3, r3, #4294967295
 8009eaa:	4631      	mov	r1, r6
 8009eac:	dcf1      	bgt.n	8009e92 <__exponent+0x1c>
 8009eae:	3130      	adds	r1, #48	@ 0x30
 8009eb0:	1e94      	subs	r4, r2, #2
 8009eb2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009eb6:	1c41      	adds	r1, r0, #1
 8009eb8:	4623      	mov	r3, r4
 8009eba:	42ab      	cmp	r3, r5
 8009ebc:	d30a      	bcc.n	8009ed4 <__exponent+0x5e>
 8009ebe:	f10d 0309 	add.w	r3, sp, #9
 8009ec2:	1a9b      	subs	r3, r3, r2
 8009ec4:	42ac      	cmp	r4, r5
 8009ec6:	bf88      	it	hi
 8009ec8:	2300      	movhi	r3, #0
 8009eca:	3302      	adds	r3, #2
 8009ecc:	4403      	add	r3, r0
 8009ece:	1a18      	subs	r0, r3, r0
 8009ed0:	b003      	add	sp, #12
 8009ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ed8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009edc:	e7ed      	b.n	8009eba <__exponent+0x44>
 8009ede:	2330      	movs	r3, #48	@ 0x30
 8009ee0:	3130      	adds	r1, #48	@ 0x30
 8009ee2:	7083      	strb	r3, [r0, #2]
 8009ee4:	70c1      	strb	r1, [r0, #3]
 8009ee6:	1d03      	adds	r3, r0, #4
 8009ee8:	e7f1      	b.n	8009ece <__exponent+0x58>
	...

08009eec <_printf_float>:
 8009eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	b08d      	sub	sp, #52	@ 0x34
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ef8:	4616      	mov	r6, r2
 8009efa:	461f      	mov	r7, r3
 8009efc:	4605      	mov	r5, r0
 8009efe:	f000 fcdb 	bl	800a8b8 <_localeconv_r>
 8009f02:	6803      	ldr	r3, [r0, #0]
 8009f04:	9304      	str	r3, [sp, #16]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7f6 f9b2 	bl	8000270 <strlen>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f10:	f8d8 3000 	ldr.w	r3, [r8]
 8009f14:	9005      	str	r0, [sp, #20]
 8009f16:	3307      	adds	r3, #7
 8009f18:	f023 0307 	bic.w	r3, r3, #7
 8009f1c:	f103 0208 	add.w	r2, r3, #8
 8009f20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f24:	f8d4 b000 	ldr.w	fp, [r4]
 8009f28:	f8c8 2000 	str.w	r2, [r8]
 8009f2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009f34:	9307      	str	r3, [sp, #28]
 8009f36:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f42:	4b9c      	ldr	r3, [pc, #624]	@ (800a1b4 <_printf_float+0x2c8>)
 8009f44:	f04f 32ff 	mov.w	r2, #4294967295
 8009f48:	f7f6 fdf0 	bl	8000b2c <__aeabi_dcmpun>
 8009f4c:	bb70      	cbnz	r0, 8009fac <_printf_float+0xc0>
 8009f4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f52:	4b98      	ldr	r3, [pc, #608]	@ (800a1b4 <_printf_float+0x2c8>)
 8009f54:	f04f 32ff 	mov.w	r2, #4294967295
 8009f58:	f7f6 fdca 	bl	8000af0 <__aeabi_dcmple>
 8009f5c:	bb30      	cbnz	r0, 8009fac <_printf_float+0xc0>
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2300      	movs	r3, #0
 8009f62:	4640      	mov	r0, r8
 8009f64:	4649      	mov	r1, r9
 8009f66:	f7f6 fdb9 	bl	8000adc <__aeabi_dcmplt>
 8009f6a:	b110      	cbz	r0, 8009f72 <_printf_float+0x86>
 8009f6c:	232d      	movs	r3, #45	@ 0x2d
 8009f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f72:	4a91      	ldr	r2, [pc, #580]	@ (800a1b8 <_printf_float+0x2cc>)
 8009f74:	4b91      	ldr	r3, [pc, #580]	@ (800a1bc <_printf_float+0x2d0>)
 8009f76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009f7a:	bf94      	ite	ls
 8009f7c:	4690      	movls	r8, r2
 8009f7e:	4698      	movhi	r8, r3
 8009f80:	2303      	movs	r3, #3
 8009f82:	6123      	str	r3, [r4, #16]
 8009f84:	f02b 0304 	bic.w	r3, fp, #4
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	f04f 0900 	mov.w	r9, #0
 8009f8e:	9700      	str	r7, [sp, #0]
 8009f90:	4633      	mov	r3, r6
 8009f92:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009f94:	4621      	mov	r1, r4
 8009f96:	4628      	mov	r0, r5
 8009f98:	f000 f9d2 	bl	800a340 <_printf_common>
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	f040 808d 	bne.w	800a0bc <_printf_float+0x1d0>
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa6:	b00d      	add	sp, #52	@ 0x34
 8009fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fac:	4642      	mov	r2, r8
 8009fae:	464b      	mov	r3, r9
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	f7f6 fdba 	bl	8000b2c <__aeabi_dcmpun>
 8009fb8:	b140      	cbz	r0, 8009fcc <_printf_float+0xe0>
 8009fba:	464b      	mov	r3, r9
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bfbc      	itt	lt
 8009fc0:	232d      	movlt	r3, #45	@ 0x2d
 8009fc2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009fc6:	4a7e      	ldr	r2, [pc, #504]	@ (800a1c0 <_printf_float+0x2d4>)
 8009fc8:	4b7e      	ldr	r3, [pc, #504]	@ (800a1c4 <_printf_float+0x2d8>)
 8009fca:	e7d4      	b.n	8009f76 <_printf_float+0x8a>
 8009fcc:	6863      	ldr	r3, [r4, #4]
 8009fce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009fd2:	9206      	str	r2, [sp, #24]
 8009fd4:	1c5a      	adds	r2, r3, #1
 8009fd6:	d13b      	bne.n	800a050 <_printf_float+0x164>
 8009fd8:	2306      	movs	r3, #6
 8009fda:	6063      	str	r3, [r4, #4]
 8009fdc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	6022      	str	r2, [r4, #0]
 8009fe4:	9303      	str	r3, [sp, #12]
 8009fe6:	ab0a      	add	r3, sp, #40	@ 0x28
 8009fe8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009fec:	ab09      	add	r3, sp, #36	@ 0x24
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	6861      	ldr	r1, [r4, #4]
 8009ff2:	ec49 8b10 	vmov	d0, r8, r9
 8009ff6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f7ff fed6 	bl	8009dac <__cvt>
 800a000:	9b06      	ldr	r3, [sp, #24]
 800a002:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a004:	2b47      	cmp	r3, #71	@ 0x47
 800a006:	4680      	mov	r8, r0
 800a008:	d129      	bne.n	800a05e <_printf_float+0x172>
 800a00a:	1cc8      	adds	r0, r1, #3
 800a00c:	db02      	blt.n	800a014 <_printf_float+0x128>
 800a00e:	6863      	ldr	r3, [r4, #4]
 800a010:	4299      	cmp	r1, r3
 800a012:	dd41      	ble.n	800a098 <_printf_float+0x1ac>
 800a014:	f1aa 0a02 	sub.w	sl, sl, #2
 800a018:	fa5f fa8a 	uxtb.w	sl, sl
 800a01c:	3901      	subs	r1, #1
 800a01e:	4652      	mov	r2, sl
 800a020:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a024:	9109      	str	r1, [sp, #36]	@ 0x24
 800a026:	f7ff ff26 	bl	8009e76 <__exponent>
 800a02a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a02c:	1813      	adds	r3, r2, r0
 800a02e:	2a01      	cmp	r2, #1
 800a030:	4681      	mov	r9, r0
 800a032:	6123      	str	r3, [r4, #16]
 800a034:	dc02      	bgt.n	800a03c <_printf_float+0x150>
 800a036:	6822      	ldr	r2, [r4, #0]
 800a038:	07d2      	lsls	r2, r2, #31
 800a03a:	d501      	bpl.n	800a040 <_printf_float+0x154>
 800a03c:	3301      	adds	r3, #1
 800a03e:	6123      	str	r3, [r4, #16]
 800a040:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a044:	2b00      	cmp	r3, #0
 800a046:	d0a2      	beq.n	8009f8e <_printf_float+0xa2>
 800a048:	232d      	movs	r3, #45	@ 0x2d
 800a04a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a04e:	e79e      	b.n	8009f8e <_printf_float+0xa2>
 800a050:	9a06      	ldr	r2, [sp, #24]
 800a052:	2a47      	cmp	r2, #71	@ 0x47
 800a054:	d1c2      	bne.n	8009fdc <_printf_float+0xf0>
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1c0      	bne.n	8009fdc <_printf_float+0xf0>
 800a05a:	2301      	movs	r3, #1
 800a05c:	e7bd      	b.n	8009fda <_printf_float+0xee>
 800a05e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a062:	d9db      	bls.n	800a01c <_printf_float+0x130>
 800a064:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a068:	d118      	bne.n	800a09c <_printf_float+0x1b0>
 800a06a:	2900      	cmp	r1, #0
 800a06c:	6863      	ldr	r3, [r4, #4]
 800a06e:	dd0b      	ble.n	800a088 <_printf_float+0x19c>
 800a070:	6121      	str	r1, [r4, #16]
 800a072:	b913      	cbnz	r3, 800a07a <_printf_float+0x18e>
 800a074:	6822      	ldr	r2, [r4, #0]
 800a076:	07d0      	lsls	r0, r2, #31
 800a078:	d502      	bpl.n	800a080 <_printf_float+0x194>
 800a07a:	3301      	adds	r3, #1
 800a07c:	440b      	add	r3, r1
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a082:	f04f 0900 	mov.w	r9, #0
 800a086:	e7db      	b.n	800a040 <_printf_float+0x154>
 800a088:	b913      	cbnz	r3, 800a090 <_printf_float+0x1a4>
 800a08a:	6822      	ldr	r2, [r4, #0]
 800a08c:	07d2      	lsls	r2, r2, #31
 800a08e:	d501      	bpl.n	800a094 <_printf_float+0x1a8>
 800a090:	3302      	adds	r3, #2
 800a092:	e7f4      	b.n	800a07e <_printf_float+0x192>
 800a094:	2301      	movs	r3, #1
 800a096:	e7f2      	b.n	800a07e <_printf_float+0x192>
 800a098:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a09c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a09e:	4299      	cmp	r1, r3
 800a0a0:	db05      	blt.n	800a0ae <_printf_float+0x1c2>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	6121      	str	r1, [r4, #16]
 800a0a6:	07d8      	lsls	r0, r3, #31
 800a0a8:	d5ea      	bpl.n	800a080 <_printf_float+0x194>
 800a0aa:	1c4b      	adds	r3, r1, #1
 800a0ac:	e7e7      	b.n	800a07e <_printf_float+0x192>
 800a0ae:	2900      	cmp	r1, #0
 800a0b0:	bfd4      	ite	le
 800a0b2:	f1c1 0202 	rsble	r2, r1, #2
 800a0b6:	2201      	movgt	r2, #1
 800a0b8:	4413      	add	r3, r2
 800a0ba:	e7e0      	b.n	800a07e <_printf_float+0x192>
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	055a      	lsls	r2, r3, #21
 800a0c0:	d407      	bmi.n	800a0d2 <_printf_float+0x1e6>
 800a0c2:	6923      	ldr	r3, [r4, #16]
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d12b      	bne.n	800a128 <_printf_float+0x23c>
 800a0d0:	e767      	b.n	8009fa2 <_printf_float+0xb6>
 800a0d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0d6:	f240 80dd 	bls.w	800a294 <_printf_float+0x3a8>
 800a0da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f7f6 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d033      	beq.n	800a152 <_printf_float+0x266>
 800a0ea:	4a37      	ldr	r2, [pc, #220]	@ (800a1c8 <_printf_float+0x2dc>)
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	f43f af54 	beq.w	8009fa2 <_printf_float+0xb6>
 800a0fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a0fe:	4543      	cmp	r3, r8
 800a100:	db02      	blt.n	800a108 <_printf_float+0x21c>
 800a102:	6823      	ldr	r3, [r4, #0]
 800a104:	07d8      	lsls	r0, r3, #31
 800a106:	d50f      	bpl.n	800a128 <_printf_float+0x23c>
 800a108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a10c:	4631      	mov	r1, r6
 800a10e:	4628      	mov	r0, r5
 800a110:	47b8      	blx	r7
 800a112:	3001      	adds	r0, #1
 800a114:	f43f af45 	beq.w	8009fa2 <_printf_float+0xb6>
 800a118:	f04f 0900 	mov.w	r9, #0
 800a11c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a120:	f104 0a1a 	add.w	sl, r4, #26
 800a124:	45c8      	cmp	r8, r9
 800a126:	dc09      	bgt.n	800a13c <_printf_float+0x250>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	079b      	lsls	r3, r3, #30
 800a12c:	f100 8103 	bmi.w	800a336 <_printf_float+0x44a>
 800a130:	68e0      	ldr	r0, [r4, #12]
 800a132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a134:	4298      	cmp	r0, r3
 800a136:	bfb8      	it	lt
 800a138:	4618      	movlt	r0, r3
 800a13a:	e734      	b.n	8009fa6 <_printf_float+0xba>
 800a13c:	2301      	movs	r3, #1
 800a13e:	4652      	mov	r2, sl
 800a140:	4631      	mov	r1, r6
 800a142:	4628      	mov	r0, r5
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	f43f af2b 	beq.w	8009fa2 <_printf_float+0xb6>
 800a14c:	f109 0901 	add.w	r9, r9, #1
 800a150:	e7e8      	b.n	800a124 <_printf_float+0x238>
 800a152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a154:	2b00      	cmp	r3, #0
 800a156:	dc39      	bgt.n	800a1cc <_printf_float+0x2e0>
 800a158:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c8 <_printf_float+0x2dc>)
 800a15a:	2301      	movs	r3, #1
 800a15c:	4631      	mov	r1, r6
 800a15e:	4628      	mov	r0, r5
 800a160:	47b8      	blx	r7
 800a162:	3001      	adds	r0, #1
 800a164:	f43f af1d 	beq.w	8009fa2 <_printf_float+0xb6>
 800a168:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a16c:	ea59 0303 	orrs.w	r3, r9, r3
 800a170:	d102      	bne.n	800a178 <_printf_float+0x28c>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	07d9      	lsls	r1, r3, #31
 800a176:	d5d7      	bpl.n	800a128 <_printf_float+0x23c>
 800a178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a17c:	4631      	mov	r1, r6
 800a17e:	4628      	mov	r0, r5
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f af0d 	beq.w	8009fa2 <_printf_float+0xb6>
 800a188:	f04f 0a00 	mov.w	sl, #0
 800a18c:	f104 0b1a 	add.w	fp, r4, #26
 800a190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a192:	425b      	negs	r3, r3
 800a194:	4553      	cmp	r3, sl
 800a196:	dc01      	bgt.n	800a19c <_printf_float+0x2b0>
 800a198:	464b      	mov	r3, r9
 800a19a:	e793      	b.n	800a0c4 <_printf_float+0x1d8>
 800a19c:	2301      	movs	r3, #1
 800a19e:	465a      	mov	r2, fp
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	47b8      	blx	r7
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	f43f aefb 	beq.w	8009fa2 <_printf_float+0xb6>
 800a1ac:	f10a 0a01 	add.w	sl, sl, #1
 800a1b0:	e7ee      	b.n	800a190 <_printf_float+0x2a4>
 800a1b2:	bf00      	nop
 800a1b4:	7fefffff 	.word	0x7fefffff
 800a1b8:	0800ce08 	.word	0x0800ce08
 800a1bc:	0800ce0c 	.word	0x0800ce0c
 800a1c0:	0800ce10 	.word	0x0800ce10
 800a1c4:	0800ce14 	.word	0x0800ce14
 800a1c8:	0800ce18 	.word	0x0800ce18
 800a1cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a1ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1d2:	4553      	cmp	r3, sl
 800a1d4:	bfa8      	it	ge
 800a1d6:	4653      	movge	r3, sl
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	4699      	mov	r9, r3
 800a1dc:	dc36      	bgt.n	800a24c <_printf_float+0x360>
 800a1de:	f04f 0b00 	mov.w	fp, #0
 800a1e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1e6:	f104 021a 	add.w	r2, r4, #26
 800a1ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a1ec:	9306      	str	r3, [sp, #24]
 800a1ee:	eba3 0309 	sub.w	r3, r3, r9
 800a1f2:	455b      	cmp	r3, fp
 800a1f4:	dc31      	bgt.n	800a25a <_printf_float+0x36e>
 800a1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f8:	459a      	cmp	sl, r3
 800a1fa:	dc3a      	bgt.n	800a272 <_printf_float+0x386>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	07da      	lsls	r2, r3, #31
 800a200:	d437      	bmi.n	800a272 <_printf_float+0x386>
 800a202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a204:	ebaa 0903 	sub.w	r9, sl, r3
 800a208:	9b06      	ldr	r3, [sp, #24]
 800a20a:	ebaa 0303 	sub.w	r3, sl, r3
 800a20e:	4599      	cmp	r9, r3
 800a210:	bfa8      	it	ge
 800a212:	4699      	movge	r9, r3
 800a214:	f1b9 0f00 	cmp.w	r9, #0
 800a218:	dc33      	bgt.n	800a282 <_printf_float+0x396>
 800a21a:	f04f 0800 	mov.w	r8, #0
 800a21e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a222:	f104 0b1a 	add.w	fp, r4, #26
 800a226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a228:	ebaa 0303 	sub.w	r3, sl, r3
 800a22c:	eba3 0309 	sub.w	r3, r3, r9
 800a230:	4543      	cmp	r3, r8
 800a232:	f77f af79 	ble.w	800a128 <_printf_float+0x23c>
 800a236:	2301      	movs	r3, #1
 800a238:	465a      	mov	r2, fp
 800a23a:	4631      	mov	r1, r6
 800a23c:	4628      	mov	r0, r5
 800a23e:	47b8      	blx	r7
 800a240:	3001      	adds	r0, #1
 800a242:	f43f aeae 	beq.w	8009fa2 <_printf_float+0xb6>
 800a246:	f108 0801 	add.w	r8, r8, #1
 800a24a:	e7ec      	b.n	800a226 <_printf_float+0x33a>
 800a24c:	4642      	mov	r2, r8
 800a24e:	4631      	mov	r1, r6
 800a250:	4628      	mov	r0, r5
 800a252:	47b8      	blx	r7
 800a254:	3001      	adds	r0, #1
 800a256:	d1c2      	bne.n	800a1de <_printf_float+0x2f2>
 800a258:	e6a3      	b.n	8009fa2 <_printf_float+0xb6>
 800a25a:	2301      	movs	r3, #1
 800a25c:	4631      	mov	r1, r6
 800a25e:	4628      	mov	r0, r5
 800a260:	9206      	str	r2, [sp, #24]
 800a262:	47b8      	blx	r7
 800a264:	3001      	adds	r0, #1
 800a266:	f43f ae9c 	beq.w	8009fa2 <_printf_float+0xb6>
 800a26a:	9a06      	ldr	r2, [sp, #24]
 800a26c:	f10b 0b01 	add.w	fp, fp, #1
 800a270:	e7bb      	b.n	800a1ea <_printf_float+0x2fe>
 800a272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a276:	4631      	mov	r1, r6
 800a278:	4628      	mov	r0, r5
 800a27a:	47b8      	blx	r7
 800a27c:	3001      	adds	r0, #1
 800a27e:	d1c0      	bne.n	800a202 <_printf_float+0x316>
 800a280:	e68f      	b.n	8009fa2 <_printf_float+0xb6>
 800a282:	9a06      	ldr	r2, [sp, #24]
 800a284:	464b      	mov	r3, r9
 800a286:	4442      	add	r2, r8
 800a288:	4631      	mov	r1, r6
 800a28a:	4628      	mov	r0, r5
 800a28c:	47b8      	blx	r7
 800a28e:	3001      	adds	r0, #1
 800a290:	d1c3      	bne.n	800a21a <_printf_float+0x32e>
 800a292:	e686      	b.n	8009fa2 <_printf_float+0xb6>
 800a294:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a298:	f1ba 0f01 	cmp.w	sl, #1
 800a29c:	dc01      	bgt.n	800a2a2 <_printf_float+0x3b6>
 800a29e:	07db      	lsls	r3, r3, #31
 800a2a0:	d536      	bpl.n	800a310 <_printf_float+0x424>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b8      	blx	r7
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	f43f ae78 	beq.w	8009fa2 <_printf_float+0xb6>
 800a2b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	47b8      	blx	r7
 800a2bc:	3001      	adds	r0, #1
 800a2be:	f43f ae70 	beq.w	8009fa2 <_printf_float+0xb6>
 800a2c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2ce:	f7f6 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2d2:	b9c0      	cbnz	r0, 800a306 <_printf_float+0x41a>
 800a2d4:	4653      	mov	r3, sl
 800a2d6:	f108 0201 	add.w	r2, r8, #1
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4628      	mov	r0, r5
 800a2de:	47b8      	blx	r7
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	d10c      	bne.n	800a2fe <_printf_float+0x412>
 800a2e4:	e65d      	b.n	8009fa2 <_printf_float+0xb6>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	465a      	mov	r2, fp
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	47b8      	blx	r7
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	f43f ae56 	beq.w	8009fa2 <_printf_float+0xb6>
 800a2f6:	f108 0801 	add.w	r8, r8, #1
 800a2fa:	45d0      	cmp	r8, sl
 800a2fc:	dbf3      	blt.n	800a2e6 <_printf_float+0x3fa>
 800a2fe:	464b      	mov	r3, r9
 800a300:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a304:	e6df      	b.n	800a0c6 <_printf_float+0x1da>
 800a306:	f04f 0800 	mov.w	r8, #0
 800a30a:	f104 0b1a 	add.w	fp, r4, #26
 800a30e:	e7f4      	b.n	800a2fa <_printf_float+0x40e>
 800a310:	2301      	movs	r3, #1
 800a312:	4642      	mov	r2, r8
 800a314:	e7e1      	b.n	800a2da <_printf_float+0x3ee>
 800a316:	2301      	movs	r3, #1
 800a318:	464a      	mov	r2, r9
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	f43f ae3e 	beq.w	8009fa2 <_printf_float+0xb6>
 800a326:	f108 0801 	add.w	r8, r8, #1
 800a32a:	68e3      	ldr	r3, [r4, #12]
 800a32c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a32e:	1a5b      	subs	r3, r3, r1
 800a330:	4543      	cmp	r3, r8
 800a332:	dcf0      	bgt.n	800a316 <_printf_float+0x42a>
 800a334:	e6fc      	b.n	800a130 <_printf_float+0x244>
 800a336:	f04f 0800 	mov.w	r8, #0
 800a33a:	f104 0919 	add.w	r9, r4, #25
 800a33e:	e7f4      	b.n	800a32a <_printf_float+0x43e>

0800a340 <_printf_common>:
 800a340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a344:	4616      	mov	r6, r2
 800a346:	4698      	mov	r8, r3
 800a348:	688a      	ldr	r2, [r1, #8]
 800a34a:	690b      	ldr	r3, [r1, #16]
 800a34c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a350:	4293      	cmp	r3, r2
 800a352:	bfb8      	it	lt
 800a354:	4613      	movlt	r3, r2
 800a356:	6033      	str	r3, [r6, #0]
 800a358:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a35c:	4607      	mov	r7, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	b10a      	cbz	r2, 800a366 <_printf_common+0x26>
 800a362:	3301      	adds	r3, #1
 800a364:	6033      	str	r3, [r6, #0]
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	0699      	lsls	r1, r3, #26
 800a36a:	bf42      	ittt	mi
 800a36c:	6833      	ldrmi	r3, [r6, #0]
 800a36e:	3302      	addmi	r3, #2
 800a370:	6033      	strmi	r3, [r6, #0]
 800a372:	6825      	ldr	r5, [r4, #0]
 800a374:	f015 0506 	ands.w	r5, r5, #6
 800a378:	d106      	bne.n	800a388 <_printf_common+0x48>
 800a37a:	f104 0a19 	add.w	sl, r4, #25
 800a37e:	68e3      	ldr	r3, [r4, #12]
 800a380:	6832      	ldr	r2, [r6, #0]
 800a382:	1a9b      	subs	r3, r3, r2
 800a384:	42ab      	cmp	r3, r5
 800a386:	dc26      	bgt.n	800a3d6 <_printf_common+0x96>
 800a388:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a38c:	6822      	ldr	r2, [r4, #0]
 800a38e:	3b00      	subs	r3, #0
 800a390:	bf18      	it	ne
 800a392:	2301      	movne	r3, #1
 800a394:	0692      	lsls	r2, r2, #26
 800a396:	d42b      	bmi.n	800a3f0 <_printf_common+0xb0>
 800a398:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a39c:	4641      	mov	r1, r8
 800a39e:	4638      	mov	r0, r7
 800a3a0:	47c8      	blx	r9
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	d01e      	beq.n	800a3e4 <_printf_common+0xa4>
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	6922      	ldr	r2, [r4, #16]
 800a3aa:	f003 0306 	and.w	r3, r3, #6
 800a3ae:	2b04      	cmp	r3, #4
 800a3b0:	bf02      	ittt	eq
 800a3b2:	68e5      	ldreq	r5, [r4, #12]
 800a3b4:	6833      	ldreq	r3, [r6, #0]
 800a3b6:	1aed      	subeq	r5, r5, r3
 800a3b8:	68a3      	ldr	r3, [r4, #8]
 800a3ba:	bf0c      	ite	eq
 800a3bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3c0:	2500      	movne	r5, #0
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	bfc4      	itt	gt
 800a3c6:	1a9b      	subgt	r3, r3, r2
 800a3c8:	18ed      	addgt	r5, r5, r3
 800a3ca:	2600      	movs	r6, #0
 800a3cc:	341a      	adds	r4, #26
 800a3ce:	42b5      	cmp	r5, r6
 800a3d0:	d11a      	bne.n	800a408 <_printf_common+0xc8>
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	e008      	b.n	800a3e8 <_printf_common+0xa8>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	4652      	mov	r2, sl
 800a3da:	4641      	mov	r1, r8
 800a3dc:	4638      	mov	r0, r7
 800a3de:	47c8      	blx	r9
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d103      	bne.n	800a3ec <_printf_common+0xac>
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ec:	3501      	adds	r5, #1
 800a3ee:	e7c6      	b.n	800a37e <_printf_common+0x3e>
 800a3f0:	18e1      	adds	r1, r4, r3
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	2030      	movs	r0, #48	@ 0x30
 800a3f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a3fa:	4422      	add	r2, r4
 800a3fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a400:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a404:	3302      	adds	r3, #2
 800a406:	e7c7      	b.n	800a398 <_printf_common+0x58>
 800a408:	2301      	movs	r3, #1
 800a40a:	4622      	mov	r2, r4
 800a40c:	4641      	mov	r1, r8
 800a40e:	4638      	mov	r0, r7
 800a410:	47c8      	blx	r9
 800a412:	3001      	adds	r0, #1
 800a414:	d0e6      	beq.n	800a3e4 <_printf_common+0xa4>
 800a416:	3601      	adds	r6, #1
 800a418:	e7d9      	b.n	800a3ce <_printf_common+0x8e>
	...

0800a41c <_printf_i>:
 800a41c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a420:	7e0f      	ldrb	r7, [r1, #24]
 800a422:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a424:	2f78      	cmp	r7, #120	@ 0x78
 800a426:	4691      	mov	r9, r2
 800a428:	4680      	mov	r8, r0
 800a42a:	460c      	mov	r4, r1
 800a42c:	469a      	mov	sl, r3
 800a42e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a432:	d807      	bhi.n	800a444 <_printf_i+0x28>
 800a434:	2f62      	cmp	r7, #98	@ 0x62
 800a436:	d80a      	bhi.n	800a44e <_printf_i+0x32>
 800a438:	2f00      	cmp	r7, #0
 800a43a:	f000 80d2 	beq.w	800a5e2 <_printf_i+0x1c6>
 800a43e:	2f58      	cmp	r7, #88	@ 0x58
 800a440:	f000 80b9 	beq.w	800a5b6 <_printf_i+0x19a>
 800a444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a448:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a44c:	e03a      	b.n	800a4c4 <_printf_i+0xa8>
 800a44e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a452:	2b15      	cmp	r3, #21
 800a454:	d8f6      	bhi.n	800a444 <_printf_i+0x28>
 800a456:	a101      	add	r1, pc, #4	@ (adr r1, 800a45c <_printf_i+0x40>)
 800a458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a45c:	0800a4b5 	.word	0x0800a4b5
 800a460:	0800a4c9 	.word	0x0800a4c9
 800a464:	0800a445 	.word	0x0800a445
 800a468:	0800a445 	.word	0x0800a445
 800a46c:	0800a445 	.word	0x0800a445
 800a470:	0800a445 	.word	0x0800a445
 800a474:	0800a4c9 	.word	0x0800a4c9
 800a478:	0800a445 	.word	0x0800a445
 800a47c:	0800a445 	.word	0x0800a445
 800a480:	0800a445 	.word	0x0800a445
 800a484:	0800a445 	.word	0x0800a445
 800a488:	0800a5c9 	.word	0x0800a5c9
 800a48c:	0800a4f3 	.word	0x0800a4f3
 800a490:	0800a583 	.word	0x0800a583
 800a494:	0800a445 	.word	0x0800a445
 800a498:	0800a445 	.word	0x0800a445
 800a49c:	0800a5eb 	.word	0x0800a5eb
 800a4a0:	0800a445 	.word	0x0800a445
 800a4a4:	0800a4f3 	.word	0x0800a4f3
 800a4a8:	0800a445 	.word	0x0800a445
 800a4ac:	0800a445 	.word	0x0800a445
 800a4b0:	0800a58b 	.word	0x0800a58b
 800a4b4:	6833      	ldr	r3, [r6, #0]
 800a4b6:	1d1a      	adds	r2, r3, #4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6032      	str	r2, [r6, #0]
 800a4bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e09d      	b.n	800a604 <_printf_i+0x1e8>
 800a4c8:	6833      	ldr	r3, [r6, #0]
 800a4ca:	6820      	ldr	r0, [r4, #0]
 800a4cc:	1d19      	adds	r1, r3, #4
 800a4ce:	6031      	str	r1, [r6, #0]
 800a4d0:	0606      	lsls	r6, r0, #24
 800a4d2:	d501      	bpl.n	800a4d8 <_printf_i+0xbc>
 800a4d4:	681d      	ldr	r5, [r3, #0]
 800a4d6:	e003      	b.n	800a4e0 <_printf_i+0xc4>
 800a4d8:	0645      	lsls	r5, r0, #25
 800a4da:	d5fb      	bpl.n	800a4d4 <_printf_i+0xb8>
 800a4dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a4e0:	2d00      	cmp	r5, #0
 800a4e2:	da03      	bge.n	800a4ec <_printf_i+0xd0>
 800a4e4:	232d      	movs	r3, #45	@ 0x2d
 800a4e6:	426d      	negs	r5, r5
 800a4e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4ec:	4859      	ldr	r0, [pc, #356]	@ (800a654 <_printf_i+0x238>)
 800a4ee:	230a      	movs	r3, #10
 800a4f0:	e011      	b.n	800a516 <_printf_i+0xfa>
 800a4f2:	6821      	ldr	r1, [r4, #0]
 800a4f4:	6833      	ldr	r3, [r6, #0]
 800a4f6:	0608      	lsls	r0, r1, #24
 800a4f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a4fc:	d402      	bmi.n	800a504 <_printf_i+0xe8>
 800a4fe:	0649      	lsls	r1, r1, #25
 800a500:	bf48      	it	mi
 800a502:	b2ad      	uxthmi	r5, r5
 800a504:	2f6f      	cmp	r7, #111	@ 0x6f
 800a506:	4853      	ldr	r0, [pc, #332]	@ (800a654 <_printf_i+0x238>)
 800a508:	6033      	str	r3, [r6, #0]
 800a50a:	bf14      	ite	ne
 800a50c:	230a      	movne	r3, #10
 800a50e:	2308      	moveq	r3, #8
 800a510:	2100      	movs	r1, #0
 800a512:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a516:	6866      	ldr	r6, [r4, #4]
 800a518:	60a6      	str	r6, [r4, #8]
 800a51a:	2e00      	cmp	r6, #0
 800a51c:	bfa2      	ittt	ge
 800a51e:	6821      	ldrge	r1, [r4, #0]
 800a520:	f021 0104 	bicge.w	r1, r1, #4
 800a524:	6021      	strge	r1, [r4, #0]
 800a526:	b90d      	cbnz	r5, 800a52c <_printf_i+0x110>
 800a528:	2e00      	cmp	r6, #0
 800a52a:	d04b      	beq.n	800a5c4 <_printf_i+0x1a8>
 800a52c:	4616      	mov	r6, r2
 800a52e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a532:	fb03 5711 	mls	r7, r3, r1, r5
 800a536:	5dc7      	ldrb	r7, [r0, r7]
 800a538:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a53c:	462f      	mov	r7, r5
 800a53e:	42bb      	cmp	r3, r7
 800a540:	460d      	mov	r5, r1
 800a542:	d9f4      	bls.n	800a52e <_printf_i+0x112>
 800a544:	2b08      	cmp	r3, #8
 800a546:	d10b      	bne.n	800a560 <_printf_i+0x144>
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	07df      	lsls	r7, r3, #31
 800a54c:	d508      	bpl.n	800a560 <_printf_i+0x144>
 800a54e:	6923      	ldr	r3, [r4, #16]
 800a550:	6861      	ldr	r1, [r4, #4]
 800a552:	4299      	cmp	r1, r3
 800a554:	bfde      	ittt	le
 800a556:	2330      	movle	r3, #48	@ 0x30
 800a558:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a55c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a560:	1b92      	subs	r2, r2, r6
 800a562:	6122      	str	r2, [r4, #16]
 800a564:	f8cd a000 	str.w	sl, [sp]
 800a568:	464b      	mov	r3, r9
 800a56a:	aa03      	add	r2, sp, #12
 800a56c:	4621      	mov	r1, r4
 800a56e:	4640      	mov	r0, r8
 800a570:	f7ff fee6 	bl	800a340 <_printf_common>
 800a574:	3001      	adds	r0, #1
 800a576:	d14a      	bne.n	800a60e <_printf_i+0x1f2>
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	b004      	add	sp, #16
 800a57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	f043 0320 	orr.w	r3, r3, #32
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	4833      	ldr	r0, [pc, #204]	@ (800a658 <_printf_i+0x23c>)
 800a58c:	2778      	movs	r7, #120	@ 0x78
 800a58e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	6831      	ldr	r1, [r6, #0]
 800a596:	061f      	lsls	r7, r3, #24
 800a598:	f851 5b04 	ldr.w	r5, [r1], #4
 800a59c:	d402      	bmi.n	800a5a4 <_printf_i+0x188>
 800a59e:	065f      	lsls	r7, r3, #25
 800a5a0:	bf48      	it	mi
 800a5a2:	b2ad      	uxthmi	r5, r5
 800a5a4:	6031      	str	r1, [r6, #0]
 800a5a6:	07d9      	lsls	r1, r3, #31
 800a5a8:	bf44      	itt	mi
 800a5aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a5ae:	6023      	strmi	r3, [r4, #0]
 800a5b0:	b11d      	cbz	r5, 800a5ba <_printf_i+0x19e>
 800a5b2:	2310      	movs	r3, #16
 800a5b4:	e7ac      	b.n	800a510 <_printf_i+0xf4>
 800a5b6:	4827      	ldr	r0, [pc, #156]	@ (800a654 <_printf_i+0x238>)
 800a5b8:	e7e9      	b.n	800a58e <_printf_i+0x172>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	f023 0320 	bic.w	r3, r3, #32
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	e7f6      	b.n	800a5b2 <_printf_i+0x196>
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	e7bd      	b.n	800a544 <_printf_i+0x128>
 800a5c8:	6833      	ldr	r3, [r6, #0]
 800a5ca:	6825      	ldr	r5, [r4, #0]
 800a5cc:	6961      	ldr	r1, [r4, #20]
 800a5ce:	1d18      	adds	r0, r3, #4
 800a5d0:	6030      	str	r0, [r6, #0]
 800a5d2:	062e      	lsls	r6, r5, #24
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	d501      	bpl.n	800a5dc <_printf_i+0x1c0>
 800a5d8:	6019      	str	r1, [r3, #0]
 800a5da:	e002      	b.n	800a5e2 <_printf_i+0x1c6>
 800a5dc:	0668      	lsls	r0, r5, #25
 800a5de:	d5fb      	bpl.n	800a5d8 <_printf_i+0x1bc>
 800a5e0:	8019      	strh	r1, [r3, #0]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	6123      	str	r3, [r4, #16]
 800a5e6:	4616      	mov	r6, r2
 800a5e8:	e7bc      	b.n	800a564 <_printf_i+0x148>
 800a5ea:	6833      	ldr	r3, [r6, #0]
 800a5ec:	1d1a      	adds	r2, r3, #4
 800a5ee:	6032      	str	r2, [r6, #0]
 800a5f0:	681e      	ldr	r6, [r3, #0]
 800a5f2:	6862      	ldr	r2, [r4, #4]
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7f5 fdea 	bl	80001d0 <memchr>
 800a5fc:	b108      	cbz	r0, 800a602 <_printf_i+0x1e6>
 800a5fe:	1b80      	subs	r0, r0, r6
 800a600:	6060      	str	r0, [r4, #4]
 800a602:	6863      	ldr	r3, [r4, #4]
 800a604:	6123      	str	r3, [r4, #16]
 800a606:	2300      	movs	r3, #0
 800a608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a60c:	e7aa      	b.n	800a564 <_printf_i+0x148>
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	4632      	mov	r2, r6
 800a612:	4649      	mov	r1, r9
 800a614:	4640      	mov	r0, r8
 800a616:	47d0      	blx	sl
 800a618:	3001      	adds	r0, #1
 800a61a:	d0ad      	beq.n	800a578 <_printf_i+0x15c>
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	079b      	lsls	r3, r3, #30
 800a620:	d413      	bmi.n	800a64a <_printf_i+0x22e>
 800a622:	68e0      	ldr	r0, [r4, #12]
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	4298      	cmp	r0, r3
 800a628:	bfb8      	it	lt
 800a62a:	4618      	movlt	r0, r3
 800a62c:	e7a6      	b.n	800a57c <_printf_i+0x160>
 800a62e:	2301      	movs	r3, #1
 800a630:	4632      	mov	r2, r6
 800a632:	4649      	mov	r1, r9
 800a634:	4640      	mov	r0, r8
 800a636:	47d0      	blx	sl
 800a638:	3001      	adds	r0, #1
 800a63a:	d09d      	beq.n	800a578 <_printf_i+0x15c>
 800a63c:	3501      	adds	r5, #1
 800a63e:	68e3      	ldr	r3, [r4, #12]
 800a640:	9903      	ldr	r1, [sp, #12]
 800a642:	1a5b      	subs	r3, r3, r1
 800a644:	42ab      	cmp	r3, r5
 800a646:	dcf2      	bgt.n	800a62e <_printf_i+0x212>
 800a648:	e7eb      	b.n	800a622 <_printf_i+0x206>
 800a64a:	2500      	movs	r5, #0
 800a64c:	f104 0619 	add.w	r6, r4, #25
 800a650:	e7f5      	b.n	800a63e <_printf_i+0x222>
 800a652:	bf00      	nop
 800a654:	0800ce1a 	.word	0x0800ce1a
 800a658:	0800ce2b 	.word	0x0800ce2b

0800a65c <std>:
 800a65c:	2300      	movs	r3, #0
 800a65e:	b510      	push	{r4, lr}
 800a660:	4604      	mov	r4, r0
 800a662:	e9c0 3300 	strd	r3, r3, [r0]
 800a666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a66a:	6083      	str	r3, [r0, #8]
 800a66c:	8181      	strh	r1, [r0, #12]
 800a66e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a670:	81c2      	strh	r2, [r0, #14]
 800a672:	6183      	str	r3, [r0, #24]
 800a674:	4619      	mov	r1, r3
 800a676:	2208      	movs	r2, #8
 800a678:	305c      	adds	r0, #92	@ 0x5c
 800a67a:	f000 f914 	bl	800a8a6 <memset>
 800a67e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <std+0x58>)
 800a680:	6263      	str	r3, [r4, #36]	@ 0x24
 800a682:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b8 <std+0x5c>)
 800a684:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a686:	4b0d      	ldr	r3, [pc, #52]	@ (800a6bc <std+0x60>)
 800a688:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a68a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c0 <std+0x64>)
 800a68c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a68e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c4 <std+0x68>)
 800a690:	6224      	str	r4, [r4, #32]
 800a692:	429c      	cmp	r4, r3
 800a694:	d006      	beq.n	800a6a4 <std+0x48>
 800a696:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a69a:	4294      	cmp	r4, r2
 800a69c:	d002      	beq.n	800a6a4 <std+0x48>
 800a69e:	33d0      	adds	r3, #208	@ 0xd0
 800a6a0:	429c      	cmp	r4, r3
 800a6a2:	d105      	bne.n	800a6b0 <std+0x54>
 800a6a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ac:	f000 b978 	b.w	800a9a0 <__retarget_lock_init_recursive>
 800a6b0:	bd10      	pop	{r4, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800a821 	.word	0x0800a821
 800a6b8:	0800a843 	.word	0x0800a843
 800a6bc:	0800a87b 	.word	0x0800a87b
 800a6c0:	0800a89f 	.word	0x0800a89f
 800a6c4:	200020fc 	.word	0x200020fc

0800a6c8 <stdio_exit_handler>:
 800a6c8:	4a02      	ldr	r2, [pc, #8]	@ (800a6d4 <stdio_exit_handler+0xc>)
 800a6ca:	4903      	ldr	r1, [pc, #12]	@ (800a6d8 <stdio_exit_handler+0x10>)
 800a6cc:	4803      	ldr	r0, [pc, #12]	@ (800a6dc <stdio_exit_handler+0x14>)
 800a6ce:	f000 b869 	b.w	800a7a4 <_fwalk_sglue>
 800a6d2:	bf00      	nop
 800a6d4:	200000fc 	.word	0x200000fc
 800a6d8:	0800c2fd 	.word	0x0800c2fd
 800a6dc:	2000010c 	.word	0x2000010c

0800a6e0 <cleanup_stdio>:
 800a6e0:	6841      	ldr	r1, [r0, #4]
 800a6e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a714 <cleanup_stdio+0x34>)
 800a6e4:	4299      	cmp	r1, r3
 800a6e6:	b510      	push	{r4, lr}
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	d001      	beq.n	800a6f0 <cleanup_stdio+0x10>
 800a6ec:	f001 fe06 	bl	800c2fc <_fflush_r>
 800a6f0:	68a1      	ldr	r1, [r4, #8]
 800a6f2:	4b09      	ldr	r3, [pc, #36]	@ (800a718 <cleanup_stdio+0x38>)
 800a6f4:	4299      	cmp	r1, r3
 800a6f6:	d002      	beq.n	800a6fe <cleanup_stdio+0x1e>
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f001 fdff 	bl	800c2fc <_fflush_r>
 800a6fe:	68e1      	ldr	r1, [r4, #12]
 800a700:	4b06      	ldr	r3, [pc, #24]	@ (800a71c <cleanup_stdio+0x3c>)
 800a702:	4299      	cmp	r1, r3
 800a704:	d004      	beq.n	800a710 <cleanup_stdio+0x30>
 800a706:	4620      	mov	r0, r4
 800a708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a70c:	f001 bdf6 	b.w	800c2fc <_fflush_r>
 800a710:	bd10      	pop	{r4, pc}
 800a712:	bf00      	nop
 800a714:	200020fc 	.word	0x200020fc
 800a718:	20002164 	.word	0x20002164
 800a71c:	200021cc 	.word	0x200021cc

0800a720 <global_stdio_init.part.0>:
 800a720:	b510      	push	{r4, lr}
 800a722:	4b0b      	ldr	r3, [pc, #44]	@ (800a750 <global_stdio_init.part.0+0x30>)
 800a724:	4c0b      	ldr	r4, [pc, #44]	@ (800a754 <global_stdio_init.part.0+0x34>)
 800a726:	4a0c      	ldr	r2, [pc, #48]	@ (800a758 <global_stdio_init.part.0+0x38>)
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	4620      	mov	r0, r4
 800a72c:	2200      	movs	r2, #0
 800a72e:	2104      	movs	r1, #4
 800a730:	f7ff ff94 	bl	800a65c <std>
 800a734:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a738:	2201      	movs	r2, #1
 800a73a:	2109      	movs	r1, #9
 800a73c:	f7ff ff8e 	bl	800a65c <std>
 800a740:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a744:	2202      	movs	r2, #2
 800a746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a74a:	2112      	movs	r1, #18
 800a74c:	f7ff bf86 	b.w	800a65c <std>
 800a750:	20002234 	.word	0x20002234
 800a754:	200020fc 	.word	0x200020fc
 800a758:	0800a6c9 	.word	0x0800a6c9

0800a75c <__sfp_lock_acquire>:
 800a75c:	4801      	ldr	r0, [pc, #4]	@ (800a764 <__sfp_lock_acquire+0x8>)
 800a75e:	f000 b920 	b.w	800a9a2 <__retarget_lock_acquire_recursive>
 800a762:	bf00      	nop
 800a764:	2000223d 	.word	0x2000223d

0800a768 <__sfp_lock_release>:
 800a768:	4801      	ldr	r0, [pc, #4]	@ (800a770 <__sfp_lock_release+0x8>)
 800a76a:	f000 b91b 	b.w	800a9a4 <__retarget_lock_release_recursive>
 800a76e:	bf00      	nop
 800a770:	2000223d 	.word	0x2000223d

0800a774 <__sinit>:
 800a774:	b510      	push	{r4, lr}
 800a776:	4604      	mov	r4, r0
 800a778:	f7ff fff0 	bl	800a75c <__sfp_lock_acquire>
 800a77c:	6a23      	ldr	r3, [r4, #32]
 800a77e:	b11b      	cbz	r3, 800a788 <__sinit+0x14>
 800a780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a784:	f7ff bff0 	b.w	800a768 <__sfp_lock_release>
 800a788:	4b04      	ldr	r3, [pc, #16]	@ (800a79c <__sinit+0x28>)
 800a78a:	6223      	str	r3, [r4, #32]
 800a78c:	4b04      	ldr	r3, [pc, #16]	@ (800a7a0 <__sinit+0x2c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1f5      	bne.n	800a780 <__sinit+0xc>
 800a794:	f7ff ffc4 	bl	800a720 <global_stdio_init.part.0>
 800a798:	e7f2      	b.n	800a780 <__sinit+0xc>
 800a79a:	bf00      	nop
 800a79c:	0800a6e1 	.word	0x0800a6e1
 800a7a0:	20002234 	.word	0x20002234

0800a7a4 <_fwalk_sglue>:
 800a7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a8:	4607      	mov	r7, r0
 800a7aa:	4688      	mov	r8, r1
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	2600      	movs	r6, #0
 800a7b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7b4:	f1b9 0901 	subs.w	r9, r9, #1
 800a7b8:	d505      	bpl.n	800a7c6 <_fwalk_sglue+0x22>
 800a7ba:	6824      	ldr	r4, [r4, #0]
 800a7bc:	2c00      	cmp	r4, #0
 800a7be:	d1f7      	bne.n	800a7b0 <_fwalk_sglue+0xc>
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c6:	89ab      	ldrh	r3, [r5, #12]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d907      	bls.n	800a7dc <_fwalk_sglue+0x38>
 800a7cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	d003      	beq.n	800a7dc <_fwalk_sglue+0x38>
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	47c0      	blx	r8
 800a7da:	4306      	orrs	r6, r0
 800a7dc:	3568      	adds	r5, #104	@ 0x68
 800a7de:	e7e9      	b.n	800a7b4 <_fwalk_sglue+0x10>

0800a7e0 <siprintf>:
 800a7e0:	b40e      	push	{r1, r2, r3}
 800a7e2:	b500      	push	{lr}
 800a7e4:	b09c      	sub	sp, #112	@ 0x70
 800a7e6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a7e8:	9002      	str	r0, [sp, #8]
 800a7ea:	9006      	str	r0, [sp, #24]
 800a7ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a7f0:	4809      	ldr	r0, [pc, #36]	@ (800a818 <siprintf+0x38>)
 800a7f2:	9107      	str	r1, [sp, #28]
 800a7f4:	9104      	str	r1, [sp, #16]
 800a7f6:	4909      	ldr	r1, [pc, #36]	@ (800a81c <siprintf+0x3c>)
 800a7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fc:	9105      	str	r1, [sp, #20]
 800a7fe:	6800      	ldr	r0, [r0, #0]
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	a902      	add	r1, sp, #8
 800a804:	f001 fbfa 	bl	800bffc <_svfiprintf_r>
 800a808:	9b02      	ldr	r3, [sp, #8]
 800a80a:	2200      	movs	r2, #0
 800a80c:	701a      	strb	r2, [r3, #0]
 800a80e:	b01c      	add	sp, #112	@ 0x70
 800a810:	f85d eb04 	ldr.w	lr, [sp], #4
 800a814:	b003      	add	sp, #12
 800a816:	4770      	bx	lr
 800a818:	20000108 	.word	0x20000108
 800a81c:	ffff0208 	.word	0xffff0208

0800a820 <__sread>:
 800a820:	b510      	push	{r4, lr}
 800a822:	460c      	mov	r4, r1
 800a824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a828:	f000 f86c 	bl	800a904 <_read_r>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	bfab      	itete	ge
 800a830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a832:	89a3      	ldrhlt	r3, [r4, #12]
 800a834:	181b      	addge	r3, r3, r0
 800a836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a83a:	bfac      	ite	ge
 800a83c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a83e:	81a3      	strhlt	r3, [r4, #12]
 800a840:	bd10      	pop	{r4, pc}

0800a842 <__swrite>:
 800a842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	461f      	mov	r7, r3
 800a848:	898b      	ldrh	r3, [r1, #12]
 800a84a:	05db      	lsls	r3, r3, #23
 800a84c:	4605      	mov	r5, r0
 800a84e:	460c      	mov	r4, r1
 800a850:	4616      	mov	r6, r2
 800a852:	d505      	bpl.n	800a860 <__swrite+0x1e>
 800a854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a858:	2302      	movs	r3, #2
 800a85a:	2200      	movs	r2, #0
 800a85c:	f000 f840 	bl	800a8e0 <_lseek_r>
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a86a:	81a3      	strh	r3, [r4, #12]
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	4628      	mov	r0, r5
 800a872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a876:	f000 b857 	b.w	800a928 <_write_r>

0800a87a <__sseek>:
 800a87a:	b510      	push	{r4, lr}
 800a87c:	460c      	mov	r4, r1
 800a87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a882:	f000 f82d 	bl	800a8e0 <_lseek_r>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	bf15      	itete	ne
 800a88c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a88e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a896:	81a3      	strheq	r3, [r4, #12]
 800a898:	bf18      	it	ne
 800a89a:	81a3      	strhne	r3, [r4, #12]
 800a89c:	bd10      	pop	{r4, pc}

0800a89e <__sclose>:
 800a89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a2:	f000 b80d 	b.w	800a8c0 <_close_r>

0800a8a6 <memset>:
 800a8a6:	4402      	add	r2, r0
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d100      	bne.n	800a8b0 <memset+0xa>
 800a8ae:	4770      	bx	lr
 800a8b0:	f803 1b01 	strb.w	r1, [r3], #1
 800a8b4:	e7f9      	b.n	800a8aa <memset+0x4>
	...

0800a8b8 <_localeconv_r>:
 800a8b8:	4800      	ldr	r0, [pc, #0]	@ (800a8bc <_localeconv_r+0x4>)
 800a8ba:	4770      	bx	lr
 800a8bc:	20000248 	.word	0x20000248

0800a8c0 <_close_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4d06      	ldr	r5, [pc, #24]	@ (800a8dc <_close_r+0x1c>)
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	602b      	str	r3, [r5, #0]
 800a8cc:	f7f7 fbe8 	bl	80020a0 <_close>
 800a8d0:	1c43      	adds	r3, r0, #1
 800a8d2:	d102      	bne.n	800a8da <_close_r+0x1a>
 800a8d4:	682b      	ldr	r3, [r5, #0]
 800a8d6:	b103      	cbz	r3, 800a8da <_close_r+0x1a>
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	bd38      	pop	{r3, r4, r5, pc}
 800a8dc:	20002238 	.word	0x20002238

0800a8e0 <_lseek_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4d07      	ldr	r5, [pc, #28]	@ (800a900 <_lseek_r+0x20>)
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	4608      	mov	r0, r1
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	602a      	str	r2, [r5, #0]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	f7f7 fbfd 	bl	80020ee <_lseek>
 800a8f4:	1c43      	adds	r3, r0, #1
 800a8f6:	d102      	bne.n	800a8fe <_lseek_r+0x1e>
 800a8f8:	682b      	ldr	r3, [r5, #0]
 800a8fa:	b103      	cbz	r3, 800a8fe <_lseek_r+0x1e>
 800a8fc:	6023      	str	r3, [r4, #0]
 800a8fe:	bd38      	pop	{r3, r4, r5, pc}
 800a900:	20002238 	.word	0x20002238

0800a904 <_read_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	4d07      	ldr	r5, [pc, #28]	@ (800a924 <_read_r+0x20>)
 800a908:	4604      	mov	r4, r0
 800a90a:	4608      	mov	r0, r1
 800a90c:	4611      	mov	r1, r2
 800a90e:	2200      	movs	r2, #0
 800a910:	602a      	str	r2, [r5, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	f7f7 fb8b 	bl	800202e <_read>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_read_r+0x1e>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_read_r+0x1e>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	20002238 	.word	0x20002238

0800a928 <_write_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d07      	ldr	r5, [pc, #28]	@ (800a948 <_write_r+0x20>)
 800a92c:	4604      	mov	r4, r0
 800a92e:	4608      	mov	r0, r1
 800a930:	4611      	mov	r1, r2
 800a932:	2200      	movs	r2, #0
 800a934:	602a      	str	r2, [r5, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	f7f7 fb96 	bl	8002068 <_write>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_write_r+0x1e>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_write_r+0x1e>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20002238 	.word	0x20002238

0800a94c <__errno>:
 800a94c:	4b01      	ldr	r3, [pc, #4]	@ (800a954 <__errno+0x8>)
 800a94e:	6818      	ldr	r0, [r3, #0]
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	20000108 	.word	0x20000108

0800a958 <__libc_init_array>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	4d0d      	ldr	r5, [pc, #52]	@ (800a990 <__libc_init_array+0x38>)
 800a95c:	4c0d      	ldr	r4, [pc, #52]	@ (800a994 <__libc_init_array+0x3c>)
 800a95e:	1b64      	subs	r4, r4, r5
 800a960:	10a4      	asrs	r4, r4, #2
 800a962:	2600      	movs	r6, #0
 800a964:	42a6      	cmp	r6, r4
 800a966:	d109      	bne.n	800a97c <__libc_init_array+0x24>
 800a968:	4d0b      	ldr	r5, [pc, #44]	@ (800a998 <__libc_init_array+0x40>)
 800a96a:	4c0c      	ldr	r4, [pc, #48]	@ (800a99c <__libc_init_array+0x44>)
 800a96c:	f002 fa02 	bl	800cd74 <_init>
 800a970:	1b64      	subs	r4, r4, r5
 800a972:	10a4      	asrs	r4, r4, #2
 800a974:	2600      	movs	r6, #0
 800a976:	42a6      	cmp	r6, r4
 800a978:	d105      	bne.n	800a986 <__libc_init_array+0x2e>
 800a97a:	bd70      	pop	{r4, r5, r6, pc}
 800a97c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a980:	4798      	blx	r3
 800a982:	3601      	adds	r6, #1
 800a984:	e7ee      	b.n	800a964 <__libc_init_array+0xc>
 800a986:	f855 3b04 	ldr.w	r3, [r5], #4
 800a98a:	4798      	blx	r3
 800a98c:	3601      	adds	r6, #1
 800a98e:	e7f2      	b.n	800a976 <__libc_init_array+0x1e>
 800a990:	0800d1b8 	.word	0x0800d1b8
 800a994:	0800d1b8 	.word	0x0800d1b8
 800a998:	0800d1b8 	.word	0x0800d1b8
 800a99c:	0800d1bc 	.word	0x0800d1bc

0800a9a0 <__retarget_lock_init_recursive>:
 800a9a0:	4770      	bx	lr

0800a9a2 <__retarget_lock_acquire_recursive>:
 800a9a2:	4770      	bx	lr

0800a9a4 <__retarget_lock_release_recursive>:
 800a9a4:	4770      	bx	lr

0800a9a6 <quorem>:
 800a9a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	6903      	ldr	r3, [r0, #16]
 800a9ac:	690c      	ldr	r4, [r1, #16]
 800a9ae:	42a3      	cmp	r3, r4
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	db7e      	blt.n	800aab2 <quorem+0x10c>
 800a9b4:	3c01      	subs	r4, #1
 800a9b6:	f101 0814 	add.w	r8, r1, #20
 800a9ba:	00a3      	lsls	r3, r4, #2
 800a9bc:	f100 0514 	add.w	r5, r0, #20
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a9cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9dc:	d32e      	bcc.n	800aa3c <quorem+0x96>
 800a9de:	f04f 0a00 	mov.w	sl, #0
 800a9e2:	46c4      	mov	ip, r8
 800a9e4:	46ae      	mov	lr, r5
 800a9e6:	46d3      	mov	fp, sl
 800a9e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a9ec:	b298      	uxth	r0, r3
 800a9ee:	fb06 a000 	mla	r0, r6, r0, sl
 800a9f2:	0c02      	lsrs	r2, r0, #16
 800a9f4:	0c1b      	lsrs	r3, r3, #16
 800a9f6:	fb06 2303 	mla	r3, r6, r3, r2
 800a9fa:	f8de 2000 	ldr.w	r2, [lr]
 800a9fe:	b280      	uxth	r0, r0
 800aa00:	b292      	uxth	r2, r2
 800aa02:	1a12      	subs	r2, r2, r0
 800aa04:	445a      	add	r2, fp
 800aa06:	f8de 0000 	ldr.w	r0, [lr]
 800aa0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa18:	b292      	uxth	r2, r2
 800aa1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa1e:	45e1      	cmp	r9, ip
 800aa20:	f84e 2b04 	str.w	r2, [lr], #4
 800aa24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa28:	d2de      	bcs.n	800a9e8 <quorem+0x42>
 800aa2a:	9b00      	ldr	r3, [sp, #0]
 800aa2c:	58eb      	ldr	r3, [r5, r3]
 800aa2e:	b92b      	cbnz	r3, 800aa3c <quorem+0x96>
 800aa30:	9b01      	ldr	r3, [sp, #4]
 800aa32:	3b04      	subs	r3, #4
 800aa34:	429d      	cmp	r5, r3
 800aa36:	461a      	mov	r2, r3
 800aa38:	d32f      	bcc.n	800aa9a <quorem+0xf4>
 800aa3a:	613c      	str	r4, [r7, #16]
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	f001 f979 	bl	800bd34 <__mcmp>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	db25      	blt.n	800aa92 <quorem+0xec>
 800aa46:	4629      	mov	r1, r5
 800aa48:	2000      	movs	r0, #0
 800aa4a:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa4e:	f8d1 c000 	ldr.w	ip, [r1]
 800aa52:	fa1f fe82 	uxth.w	lr, r2
 800aa56:	fa1f f38c 	uxth.w	r3, ip
 800aa5a:	eba3 030e 	sub.w	r3, r3, lr
 800aa5e:	4403      	add	r3, r0
 800aa60:	0c12      	lsrs	r2, r2, #16
 800aa62:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aa66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa70:	45c1      	cmp	r9, r8
 800aa72:	f841 3b04 	str.w	r3, [r1], #4
 800aa76:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aa7a:	d2e6      	bcs.n	800aa4a <quorem+0xa4>
 800aa7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa84:	b922      	cbnz	r2, 800aa90 <quorem+0xea>
 800aa86:	3b04      	subs	r3, #4
 800aa88:	429d      	cmp	r5, r3
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	d30b      	bcc.n	800aaa6 <quorem+0x100>
 800aa8e:	613c      	str	r4, [r7, #16]
 800aa90:	3601      	adds	r6, #1
 800aa92:	4630      	mov	r0, r6
 800aa94:	b003      	add	sp, #12
 800aa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9a:	6812      	ldr	r2, [r2, #0]
 800aa9c:	3b04      	subs	r3, #4
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	d1cb      	bne.n	800aa3a <quorem+0x94>
 800aaa2:	3c01      	subs	r4, #1
 800aaa4:	e7c6      	b.n	800aa34 <quorem+0x8e>
 800aaa6:	6812      	ldr	r2, [r2, #0]
 800aaa8:	3b04      	subs	r3, #4
 800aaaa:	2a00      	cmp	r2, #0
 800aaac:	d1ef      	bne.n	800aa8e <quorem+0xe8>
 800aaae:	3c01      	subs	r4, #1
 800aab0:	e7ea      	b.n	800aa88 <quorem+0xe2>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e7ee      	b.n	800aa94 <quorem+0xee>
	...

0800aab8 <_dtoa_r>:
 800aab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aabc:	69c7      	ldr	r7, [r0, #28]
 800aabe:	b099      	sub	sp, #100	@ 0x64
 800aac0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aac4:	ec55 4b10 	vmov	r4, r5, d0
 800aac8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800aaca:	9109      	str	r1, [sp, #36]	@ 0x24
 800aacc:	4683      	mov	fp, r0
 800aace:	920e      	str	r2, [sp, #56]	@ 0x38
 800aad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aad2:	b97f      	cbnz	r7, 800aaf4 <_dtoa_r+0x3c>
 800aad4:	2010      	movs	r0, #16
 800aad6:	f000 fdfd 	bl	800b6d4 <malloc>
 800aada:	4602      	mov	r2, r0
 800aadc:	f8cb 001c 	str.w	r0, [fp, #28]
 800aae0:	b920      	cbnz	r0, 800aaec <_dtoa_r+0x34>
 800aae2:	4ba7      	ldr	r3, [pc, #668]	@ (800ad80 <_dtoa_r+0x2c8>)
 800aae4:	21ef      	movs	r1, #239	@ 0xef
 800aae6:	48a7      	ldr	r0, [pc, #668]	@ (800ad84 <_dtoa_r+0x2cc>)
 800aae8:	f001 fc68 	bl	800c3bc <__assert_func>
 800aaec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aaf0:	6007      	str	r7, [r0, #0]
 800aaf2:	60c7      	str	r7, [r0, #12]
 800aaf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aaf8:	6819      	ldr	r1, [r3, #0]
 800aafa:	b159      	cbz	r1, 800ab14 <_dtoa_r+0x5c>
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	604a      	str	r2, [r1, #4]
 800ab00:	2301      	movs	r3, #1
 800ab02:	4093      	lsls	r3, r2
 800ab04:	608b      	str	r3, [r1, #8]
 800ab06:	4658      	mov	r0, fp
 800ab08:	f000 feda 	bl	800b8c0 <_Bfree>
 800ab0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab10:	2200      	movs	r2, #0
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	1e2b      	subs	r3, r5, #0
 800ab16:	bfb9      	ittee	lt
 800ab18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab1c:	9303      	strlt	r3, [sp, #12]
 800ab1e:	2300      	movge	r3, #0
 800ab20:	6033      	strge	r3, [r6, #0]
 800ab22:	9f03      	ldr	r7, [sp, #12]
 800ab24:	4b98      	ldr	r3, [pc, #608]	@ (800ad88 <_dtoa_r+0x2d0>)
 800ab26:	bfbc      	itt	lt
 800ab28:	2201      	movlt	r2, #1
 800ab2a:	6032      	strlt	r2, [r6, #0]
 800ab2c:	43bb      	bics	r3, r7
 800ab2e:	d112      	bne.n	800ab56 <_dtoa_r+0x9e>
 800ab30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ab32:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab3c:	4323      	orrs	r3, r4
 800ab3e:	f000 854d 	beq.w	800b5dc <_dtoa_r+0xb24>
 800ab42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ad9c <_dtoa_r+0x2e4>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 854f 	beq.w	800b5ec <_dtoa_r+0xb34>
 800ab4e:	f10a 0303 	add.w	r3, sl, #3
 800ab52:	f000 bd49 	b.w	800b5e8 <_dtoa_r+0xb30>
 800ab56:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	ec51 0b17 	vmov	r0, r1, d7
 800ab60:	2300      	movs	r3, #0
 800ab62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ab66:	f7f5 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	b158      	cbz	r0, 800ab86 <_dtoa_r+0xce>
 800ab6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ab70:	2301      	movs	r3, #1
 800ab72:	6013      	str	r3, [r2, #0]
 800ab74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab76:	b113      	cbz	r3, 800ab7e <_dtoa_r+0xc6>
 800ab78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ab7a:	4b84      	ldr	r3, [pc, #528]	@ (800ad8c <_dtoa_r+0x2d4>)
 800ab7c:	6013      	str	r3, [r2, #0]
 800ab7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ada0 <_dtoa_r+0x2e8>
 800ab82:	f000 bd33 	b.w	800b5ec <_dtoa_r+0xb34>
 800ab86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ab8a:	aa16      	add	r2, sp, #88	@ 0x58
 800ab8c:	a917      	add	r1, sp, #92	@ 0x5c
 800ab8e:	4658      	mov	r0, fp
 800ab90:	f001 f980 	bl	800be94 <__d2b>
 800ab94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ab98:	4681      	mov	r9, r0
 800ab9a:	2e00      	cmp	r6, #0
 800ab9c:	d077      	beq.n	800ac8e <_dtoa_r+0x1d6>
 800ab9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aba0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800abb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800abb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800abb8:	4619      	mov	r1, r3
 800abba:	2200      	movs	r2, #0
 800abbc:	4b74      	ldr	r3, [pc, #464]	@ (800ad90 <_dtoa_r+0x2d8>)
 800abbe:	f7f5 fb63 	bl	8000288 <__aeabi_dsub>
 800abc2:	a369      	add	r3, pc, #420	@ (adr r3, 800ad68 <_dtoa_r+0x2b0>)
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	f7f5 fd16 	bl	80005f8 <__aeabi_dmul>
 800abcc:	a368      	add	r3, pc, #416	@ (adr r3, 800ad70 <_dtoa_r+0x2b8>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 fb5b 	bl	800028c <__adddf3>
 800abd6:	4604      	mov	r4, r0
 800abd8:	4630      	mov	r0, r6
 800abda:	460d      	mov	r5, r1
 800abdc:	f7f5 fca2 	bl	8000524 <__aeabi_i2d>
 800abe0:	a365      	add	r3, pc, #404	@ (adr r3, 800ad78 <_dtoa_r+0x2c0>)
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	f7f5 fd07 	bl	80005f8 <__aeabi_dmul>
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	4620      	mov	r0, r4
 800abf0:	4629      	mov	r1, r5
 800abf2:	f7f5 fb4b 	bl	800028c <__adddf3>
 800abf6:	4604      	mov	r4, r0
 800abf8:	460d      	mov	r5, r1
 800abfa:	f7f5 ffad 	bl	8000b58 <__aeabi_d2iz>
 800abfe:	2200      	movs	r2, #0
 800ac00:	4607      	mov	r7, r0
 800ac02:	2300      	movs	r3, #0
 800ac04:	4620      	mov	r0, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7f5 ff68 	bl	8000adc <__aeabi_dcmplt>
 800ac0c:	b140      	cbz	r0, 800ac20 <_dtoa_r+0x168>
 800ac0e:	4638      	mov	r0, r7
 800ac10:	f7f5 fc88 	bl	8000524 <__aeabi_i2d>
 800ac14:	4622      	mov	r2, r4
 800ac16:	462b      	mov	r3, r5
 800ac18:	f7f5 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac1c:	b900      	cbnz	r0, 800ac20 <_dtoa_r+0x168>
 800ac1e:	3f01      	subs	r7, #1
 800ac20:	2f16      	cmp	r7, #22
 800ac22:	d851      	bhi.n	800acc8 <_dtoa_r+0x210>
 800ac24:	4b5b      	ldr	r3, [pc, #364]	@ (800ad94 <_dtoa_r+0x2dc>)
 800ac26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac32:	f7f5 ff53 	bl	8000adc <__aeabi_dcmplt>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d048      	beq.n	800accc <_dtoa_r+0x214>
 800ac3a:	3f01      	subs	r7, #1
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ac40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac42:	1b9b      	subs	r3, r3, r6
 800ac44:	1e5a      	subs	r2, r3, #1
 800ac46:	bf44      	itt	mi
 800ac48:	f1c3 0801 	rsbmi	r8, r3, #1
 800ac4c:	2300      	movmi	r3, #0
 800ac4e:	9208      	str	r2, [sp, #32]
 800ac50:	bf54      	ite	pl
 800ac52:	f04f 0800 	movpl.w	r8, #0
 800ac56:	9308      	strmi	r3, [sp, #32]
 800ac58:	2f00      	cmp	r7, #0
 800ac5a:	db39      	blt.n	800acd0 <_dtoa_r+0x218>
 800ac5c:	9b08      	ldr	r3, [sp, #32]
 800ac5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ac60:	443b      	add	r3, r7
 800ac62:	9308      	str	r3, [sp, #32]
 800ac64:	2300      	movs	r3, #0
 800ac66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac6a:	2b09      	cmp	r3, #9
 800ac6c:	d864      	bhi.n	800ad38 <_dtoa_r+0x280>
 800ac6e:	2b05      	cmp	r3, #5
 800ac70:	bfc4      	itt	gt
 800ac72:	3b04      	subgt	r3, #4
 800ac74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ac76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac78:	f1a3 0302 	sub.w	r3, r3, #2
 800ac7c:	bfcc      	ite	gt
 800ac7e:	2400      	movgt	r4, #0
 800ac80:	2401      	movle	r4, #1
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d863      	bhi.n	800ad4e <_dtoa_r+0x296>
 800ac86:	e8df f003 	tbb	[pc, r3]
 800ac8a:	372a      	.short	0x372a
 800ac8c:	5535      	.short	0x5535
 800ac8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ac92:	441e      	add	r6, r3
 800ac94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ac98:	2b20      	cmp	r3, #32
 800ac9a:	bfc1      	itttt	gt
 800ac9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aca0:	409f      	lslgt	r7, r3
 800aca2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aca6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800acaa:	bfd6      	itet	le
 800acac:	f1c3 0320 	rsble	r3, r3, #32
 800acb0:	ea47 0003 	orrgt.w	r0, r7, r3
 800acb4:	fa04 f003 	lslle.w	r0, r4, r3
 800acb8:	f7f5 fc24 	bl	8000504 <__aeabi_ui2d>
 800acbc:	2201      	movs	r2, #1
 800acbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800acc2:	3e01      	subs	r6, #1
 800acc4:	9214      	str	r2, [sp, #80]	@ 0x50
 800acc6:	e777      	b.n	800abb8 <_dtoa_r+0x100>
 800acc8:	2301      	movs	r3, #1
 800acca:	e7b8      	b.n	800ac3e <_dtoa_r+0x186>
 800accc:	9012      	str	r0, [sp, #72]	@ 0x48
 800acce:	e7b7      	b.n	800ac40 <_dtoa_r+0x188>
 800acd0:	427b      	negs	r3, r7
 800acd2:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd4:	2300      	movs	r3, #0
 800acd6:	eba8 0807 	sub.w	r8, r8, r7
 800acda:	930f      	str	r3, [sp, #60]	@ 0x3c
 800acdc:	e7c4      	b.n	800ac68 <_dtoa_r+0x1b0>
 800acde:	2300      	movs	r3, #0
 800ace0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ace2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dc35      	bgt.n	800ad54 <_dtoa_r+0x29c>
 800ace8:	2301      	movs	r3, #1
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	9307      	str	r3, [sp, #28]
 800acee:	461a      	mov	r2, r3
 800acf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800acf2:	e00b      	b.n	800ad0c <_dtoa_r+0x254>
 800acf4:	2301      	movs	r3, #1
 800acf6:	e7f3      	b.n	800ace0 <_dtoa_r+0x228>
 800acf8:	2300      	movs	r3, #0
 800acfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acfe:	18fb      	adds	r3, r7, r3
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	3301      	adds	r3, #1
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	9307      	str	r3, [sp, #28]
 800ad08:	bfb8      	it	lt
 800ad0a:	2301      	movlt	r3, #1
 800ad0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ad10:	2100      	movs	r1, #0
 800ad12:	2204      	movs	r2, #4
 800ad14:	f102 0514 	add.w	r5, r2, #20
 800ad18:	429d      	cmp	r5, r3
 800ad1a:	d91f      	bls.n	800ad5c <_dtoa_r+0x2a4>
 800ad1c:	6041      	str	r1, [r0, #4]
 800ad1e:	4658      	mov	r0, fp
 800ad20:	f000 fd8e 	bl	800b840 <_Balloc>
 800ad24:	4682      	mov	sl, r0
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d13c      	bne.n	800ada4 <_dtoa_r+0x2ec>
 800ad2a:	4b1b      	ldr	r3, [pc, #108]	@ (800ad98 <_dtoa_r+0x2e0>)
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad32:	e6d8      	b.n	800aae6 <_dtoa_r+0x2e>
 800ad34:	2301      	movs	r3, #1
 800ad36:	e7e0      	b.n	800acfa <_dtoa_r+0x242>
 800ad38:	2401      	movs	r4, #1
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ad40:	f04f 33ff 	mov.w	r3, #4294967295
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	9307      	str	r3, [sp, #28]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2312      	movs	r3, #18
 800ad4c:	e7d0      	b.n	800acf0 <_dtoa_r+0x238>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad52:	e7f5      	b.n	800ad40 <_dtoa_r+0x288>
 800ad54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	9307      	str	r3, [sp, #28]
 800ad5a:	e7d7      	b.n	800ad0c <_dtoa_r+0x254>
 800ad5c:	3101      	adds	r1, #1
 800ad5e:	0052      	lsls	r2, r2, #1
 800ad60:	e7d8      	b.n	800ad14 <_dtoa_r+0x25c>
 800ad62:	bf00      	nop
 800ad64:	f3af 8000 	nop.w
 800ad68:	636f4361 	.word	0x636f4361
 800ad6c:	3fd287a7 	.word	0x3fd287a7
 800ad70:	8b60c8b3 	.word	0x8b60c8b3
 800ad74:	3fc68a28 	.word	0x3fc68a28
 800ad78:	509f79fb 	.word	0x509f79fb
 800ad7c:	3fd34413 	.word	0x3fd34413
 800ad80:	0800ce49 	.word	0x0800ce49
 800ad84:	0800ce60 	.word	0x0800ce60
 800ad88:	7ff00000 	.word	0x7ff00000
 800ad8c:	0800ce19 	.word	0x0800ce19
 800ad90:	3ff80000 	.word	0x3ff80000
 800ad94:	0800cf58 	.word	0x0800cf58
 800ad98:	0800ceb8 	.word	0x0800ceb8
 800ad9c:	0800ce45 	.word	0x0800ce45
 800ada0:	0800ce18 	.word	0x0800ce18
 800ada4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ada8:	6018      	str	r0, [r3, #0]
 800adaa:	9b07      	ldr	r3, [sp, #28]
 800adac:	2b0e      	cmp	r3, #14
 800adae:	f200 80a4 	bhi.w	800aefa <_dtoa_r+0x442>
 800adb2:	2c00      	cmp	r4, #0
 800adb4:	f000 80a1 	beq.w	800aefa <_dtoa_r+0x442>
 800adb8:	2f00      	cmp	r7, #0
 800adba:	dd33      	ble.n	800ae24 <_dtoa_r+0x36c>
 800adbc:	4bad      	ldr	r3, [pc, #692]	@ (800b074 <_dtoa_r+0x5bc>)
 800adbe:	f007 020f 	and.w	r2, r7, #15
 800adc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adc6:	ed93 7b00 	vldr	d7, [r3]
 800adca:	05f8      	lsls	r0, r7, #23
 800adcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800add0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800add4:	d516      	bpl.n	800ae04 <_dtoa_r+0x34c>
 800add6:	4ba8      	ldr	r3, [pc, #672]	@ (800b078 <_dtoa_r+0x5c0>)
 800add8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800addc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ade0:	f7f5 fd34 	bl	800084c <__aeabi_ddiv>
 800ade4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ade8:	f004 040f 	and.w	r4, r4, #15
 800adec:	2603      	movs	r6, #3
 800adee:	4da2      	ldr	r5, [pc, #648]	@ (800b078 <_dtoa_r+0x5c0>)
 800adf0:	b954      	cbnz	r4, 800ae08 <_dtoa_r+0x350>
 800adf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adfa:	f7f5 fd27 	bl	800084c <__aeabi_ddiv>
 800adfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae02:	e028      	b.n	800ae56 <_dtoa_r+0x39e>
 800ae04:	2602      	movs	r6, #2
 800ae06:	e7f2      	b.n	800adee <_dtoa_r+0x336>
 800ae08:	07e1      	lsls	r1, r4, #31
 800ae0a:	d508      	bpl.n	800ae1e <_dtoa_r+0x366>
 800ae0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae14:	f7f5 fbf0 	bl	80005f8 <__aeabi_dmul>
 800ae18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae1c:	3601      	adds	r6, #1
 800ae1e:	1064      	asrs	r4, r4, #1
 800ae20:	3508      	adds	r5, #8
 800ae22:	e7e5      	b.n	800adf0 <_dtoa_r+0x338>
 800ae24:	f000 80d2 	beq.w	800afcc <_dtoa_r+0x514>
 800ae28:	427c      	negs	r4, r7
 800ae2a:	4b92      	ldr	r3, [pc, #584]	@ (800b074 <_dtoa_r+0x5bc>)
 800ae2c:	4d92      	ldr	r5, [pc, #584]	@ (800b078 <_dtoa_r+0x5c0>)
 800ae2e:	f004 020f 	and.w	r2, r4, #15
 800ae32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae3e:	f7f5 fbdb 	bl	80005f8 <__aeabi_dmul>
 800ae42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae46:	1124      	asrs	r4, r4, #4
 800ae48:	2300      	movs	r3, #0
 800ae4a:	2602      	movs	r6, #2
 800ae4c:	2c00      	cmp	r4, #0
 800ae4e:	f040 80b2 	bne.w	800afb6 <_dtoa_r+0x4fe>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1d3      	bne.n	800adfe <_dtoa_r+0x346>
 800ae56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ae58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 80b7 	beq.w	800afd0 <_dtoa_r+0x518>
 800ae62:	4b86      	ldr	r3, [pc, #536]	@ (800b07c <_dtoa_r+0x5c4>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	4620      	mov	r0, r4
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f7f5 fe37 	bl	8000adc <__aeabi_dcmplt>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f000 80ae 	beq.w	800afd0 <_dtoa_r+0x518>
 800ae74:	9b07      	ldr	r3, [sp, #28]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f000 80aa 	beq.w	800afd0 <_dtoa_r+0x518>
 800ae7c:	9b00      	ldr	r3, [sp, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	dd37      	ble.n	800aef2 <_dtoa_r+0x43a>
 800ae82:	1e7b      	subs	r3, r7, #1
 800ae84:	9304      	str	r3, [sp, #16]
 800ae86:	4620      	mov	r0, r4
 800ae88:	4b7d      	ldr	r3, [pc, #500]	@ (800b080 <_dtoa_r+0x5c8>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	f7f5 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ae92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae96:	9c00      	ldr	r4, [sp, #0]
 800ae98:	3601      	adds	r6, #1
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f7f5 fb42 	bl	8000524 <__aeabi_i2d>
 800aea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aea4:	f7f5 fba8 	bl	80005f8 <__aeabi_dmul>
 800aea8:	4b76      	ldr	r3, [pc, #472]	@ (800b084 <_dtoa_r+0x5cc>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f7f5 f9ee 	bl	800028c <__adddf3>
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aeb6:	2c00      	cmp	r4, #0
 800aeb8:	f040 808d 	bne.w	800afd6 <_dtoa_r+0x51e>
 800aebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aec0:	4b71      	ldr	r3, [pc, #452]	@ (800b088 <_dtoa_r+0x5d0>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	f7f5 f9e0 	bl	8000288 <__aeabi_dsub>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aed0:	462a      	mov	r2, r5
 800aed2:	4633      	mov	r3, r6
 800aed4:	f7f5 fe20 	bl	8000b18 <__aeabi_dcmpgt>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	f040 828b 	bne.w	800b3f4 <_dtoa_r+0x93c>
 800aede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aee2:	462a      	mov	r2, r5
 800aee4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aee8:	f7f5 fdf8 	bl	8000adc <__aeabi_dcmplt>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	f040 8128 	bne.w	800b142 <_dtoa_r+0x68a>
 800aef2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aef6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aefa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f2c0 815a 	blt.w	800b1b6 <_dtoa_r+0x6fe>
 800af02:	2f0e      	cmp	r7, #14
 800af04:	f300 8157 	bgt.w	800b1b6 <_dtoa_r+0x6fe>
 800af08:	4b5a      	ldr	r3, [pc, #360]	@ (800b074 <_dtoa_r+0x5bc>)
 800af0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af0e:	ed93 7b00 	vldr	d7, [r3]
 800af12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af14:	2b00      	cmp	r3, #0
 800af16:	ed8d 7b00 	vstr	d7, [sp]
 800af1a:	da03      	bge.n	800af24 <_dtoa_r+0x46c>
 800af1c:	9b07      	ldr	r3, [sp, #28]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f340 8101 	ble.w	800b126 <_dtoa_r+0x66e>
 800af24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800af28:	4656      	mov	r6, sl
 800af2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af2e:	4620      	mov	r0, r4
 800af30:	4629      	mov	r1, r5
 800af32:	f7f5 fc8b 	bl	800084c <__aeabi_ddiv>
 800af36:	f7f5 fe0f 	bl	8000b58 <__aeabi_d2iz>
 800af3a:	4680      	mov	r8, r0
 800af3c:	f7f5 faf2 	bl	8000524 <__aeabi_i2d>
 800af40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af44:	f7f5 fb58 	bl	80005f8 <__aeabi_dmul>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	4620      	mov	r0, r4
 800af4e:	4629      	mov	r1, r5
 800af50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800af54:	f7f5 f998 	bl	8000288 <__aeabi_dsub>
 800af58:	f806 4b01 	strb.w	r4, [r6], #1
 800af5c:	9d07      	ldr	r5, [sp, #28]
 800af5e:	eba6 040a 	sub.w	r4, r6, sl
 800af62:	42a5      	cmp	r5, r4
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	f040 8117 	bne.w	800b19a <_dtoa_r+0x6e2>
 800af6c:	f7f5 f98e 	bl	800028c <__adddf3>
 800af70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af74:	4604      	mov	r4, r0
 800af76:	460d      	mov	r5, r1
 800af78:	f7f5 fdce 	bl	8000b18 <__aeabi_dcmpgt>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	f040 80f9 	bne.w	800b174 <_dtoa_r+0x6bc>
 800af82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af86:	4620      	mov	r0, r4
 800af88:	4629      	mov	r1, r5
 800af8a:	f7f5 fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800af8e:	b118      	cbz	r0, 800af98 <_dtoa_r+0x4e0>
 800af90:	f018 0f01 	tst.w	r8, #1
 800af94:	f040 80ee 	bne.w	800b174 <_dtoa_r+0x6bc>
 800af98:	4649      	mov	r1, r9
 800af9a:	4658      	mov	r0, fp
 800af9c:	f000 fc90 	bl	800b8c0 <_Bfree>
 800afa0:	2300      	movs	r3, #0
 800afa2:	7033      	strb	r3, [r6, #0]
 800afa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800afa6:	3701      	adds	r7, #1
 800afa8:	601f      	str	r7, [r3, #0]
 800afaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 831d 	beq.w	800b5ec <_dtoa_r+0xb34>
 800afb2:	601e      	str	r6, [r3, #0]
 800afb4:	e31a      	b.n	800b5ec <_dtoa_r+0xb34>
 800afb6:	07e2      	lsls	r2, r4, #31
 800afb8:	d505      	bpl.n	800afc6 <_dtoa_r+0x50e>
 800afba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afbe:	f7f5 fb1b 	bl	80005f8 <__aeabi_dmul>
 800afc2:	3601      	adds	r6, #1
 800afc4:	2301      	movs	r3, #1
 800afc6:	1064      	asrs	r4, r4, #1
 800afc8:	3508      	adds	r5, #8
 800afca:	e73f      	b.n	800ae4c <_dtoa_r+0x394>
 800afcc:	2602      	movs	r6, #2
 800afce:	e742      	b.n	800ae56 <_dtoa_r+0x39e>
 800afd0:	9c07      	ldr	r4, [sp, #28]
 800afd2:	9704      	str	r7, [sp, #16]
 800afd4:	e761      	b.n	800ae9a <_dtoa_r+0x3e2>
 800afd6:	4b27      	ldr	r3, [pc, #156]	@ (800b074 <_dtoa_r+0x5bc>)
 800afd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afe2:	4454      	add	r4, sl
 800afe4:	2900      	cmp	r1, #0
 800afe6:	d053      	beq.n	800b090 <_dtoa_r+0x5d8>
 800afe8:	4928      	ldr	r1, [pc, #160]	@ (800b08c <_dtoa_r+0x5d4>)
 800afea:	2000      	movs	r0, #0
 800afec:	f7f5 fc2e 	bl	800084c <__aeabi_ddiv>
 800aff0:	4633      	mov	r3, r6
 800aff2:	462a      	mov	r2, r5
 800aff4:	f7f5 f948 	bl	8000288 <__aeabi_dsub>
 800aff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800affc:	4656      	mov	r6, sl
 800affe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b002:	f7f5 fda9 	bl	8000b58 <__aeabi_d2iz>
 800b006:	4605      	mov	r5, r0
 800b008:	f7f5 fa8c 	bl	8000524 <__aeabi_i2d>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b014:	f7f5 f938 	bl	8000288 <__aeabi_dsub>
 800b018:	3530      	adds	r5, #48	@ 0x30
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b022:	f806 5b01 	strb.w	r5, [r6], #1
 800b026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b02a:	f7f5 fd57 	bl	8000adc <__aeabi_dcmplt>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d171      	bne.n	800b116 <_dtoa_r+0x65e>
 800b032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b036:	4911      	ldr	r1, [pc, #68]	@ (800b07c <_dtoa_r+0x5c4>)
 800b038:	2000      	movs	r0, #0
 800b03a:	f7f5 f925 	bl	8000288 <__aeabi_dsub>
 800b03e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b042:	f7f5 fd4b 	bl	8000adc <__aeabi_dcmplt>
 800b046:	2800      	cmp	r0, #0
 800b048:	f040 8095 	bne.w	800b176 <_dtoa_r+0x6be>
 800b04c:	42a6      	cmp	r6, r4
 800b04e:	f43f af50 	beq.w	800aef2 <_dtoa_r+0x43a>
 800b052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b056:	4b0a      	ldr	r3, [pc, #40]	@ (800b080 <_dtoa_r+0x5c8>)
 800b058:	2200      	movs	r2, #0
 800b05a:	f7f5 facd 	bl	80005f8 <__aeabi_dmul>
 800b05e:	4b08      	ldr	r3, [pc, #32]	@ (800b080 <_dtoa_r+0x5c8>)
 800b060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b064:	2200      	movs	r2, #0
 800b066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b06a:	f7f5 fac5 	bl	80005f8 <__aeabi_dmul>
 800b06e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b072:	e7c4      	b.n	800affe <_dtoa_r+0x546>
 800b074:	0800cf58 	.word	0x0800cf58
 800b078:	0800cf30 	.word	0x0800cf30
 800b07c:	3ff00000 	.word	0x3ff00000
 800b080:	40240000 	.word	0x40240000
 800b084:	401c0000 	.word	0x401c0000
 800b088:	40140000 	.word	0x40140000
 800b08c:	3fe00000 	.word	0x3fe00000
 800b090:	4631      	mov	r1, r6
 800b092:	4628      	mov	r0, r5
 800b094:	f7f5 fab0 	bl	80005f8 <__aeabi_dmul>
 800b098:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b09c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b09e:	4656      	mov	r6, sl
 800b0a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0a4:	f7f5 fd58 	bl	8000b58 <__aeabi_d2iz>
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	f7f5 fa3b 	bl	8000524 <__aeabi_i2d>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0b6:	f7f5 f8e7 	bl	8000288 <__aeabi_dsub>
 800b0ba:	3530      	adds	r5, #48	@ 0x30
 800b0bc:	f806 5b01 	strb.w	r5, [r6], #1
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	42a6      	cmp	r6, r4
 800b0c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0ca:	f04f 0200 	mov.w	r2, #0
 800b0ce:	d124      	bne.n	800b11a <_dtoa_r+0x662>
 800b0d0:	4bac      	ldr	r3, [pc, #688]	@ (800b384 <_dtoa_r+0x8cc>)
 800b0d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b0d6:	f7f5 f8d9 	bl	800028c <__adddf3>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0e2:	f7f5 fd19 	bl	8000b18 <__aeabi_dcmpgt>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d145      	bne.n	800b176 <_dtoa_r+0x6be>
 800b0ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b0ee:	49a5      	ldr	r1, [pc, #660]	@ (800b384 <_dtoa_r+0x8cc>)
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	f7f5 f8c9 	bl	8000288 <__aeabi_dsub>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0fe:	f7f5 fced 	bl	8000adc <__aeabi_dcmplt>
 800b102:	2800      	cmp	r0, #0
 800b104:	f43f aef5 	beq.w	800aef2 <_dtoa_r+0x43a>
 800b108:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b10a:	1e73      	subs	r3, r6, #1
 800b10c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b10e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b112:	2b30      	cmp	r3, #48	@ 0x30
 800b114:	d0f8      	beq.n	800b108 <_dtoa_r+0x650>
 800b116:	9f04      	ldr	r7, [sp, #16]
 800b118:	e73e      	b.n	800af98 <_dtoa_r+0x4e0>
 800b11a:	4b9b      	ldr	r3, [pc, #620]	@ (800b388 <_dtoa_r+0x8d0>)
 800b11c:	f7f5 fa6c 	bl	80005f8 <__aeabi_dmul>
 800b120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b124:	e7bc      	b.n	800b0a0 <_dtoa_r+0x5e8>
 800b126:	d10c      	bne.n	800b142 <_dtoa_r+0x68a>
 800b128:	4b98      	ldr	r3, [pc, #608]	@ (800b38c <_dtoa_r+0x8d4>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b130:	f7f5 fa62 	bl	80005f8 <__aeabi_dmul>
 800b134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b138:	f7f5 fce4 	bl	8000b04 <__aeabi_dcmpge>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	f000 8157 	beq.w	800b3f0 <_dtoa_r+0x938>
 800b142:	2400      	movs	r4, #0
 800b144:	4625      	mov	r5, r4
 800b146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b148:	43db      	mvns	r3, r3
 800b14a:	9304      	str	r3, [sp, #16]
 800b14c:	4656      	mov	r6, sl
 800b14e:	2700      	movs	r7, #0
 800b150:	4621      	mov	r1, r4
 800b152:	4658      	mov	r0, fp
 800b154:	f000 fbb4 	bl	800b8c0 <_Bfree>
 800b158:	2d00      	cmp	r5, #0
 800b15a:	d0dc      	beq.n	800b116 <_dtoa_r+0x65e>
 800b15c:	b12f      	cbz	r7, 800b16a <_dtoa_r+0x6b2>
 800b15e:	42af      	cmp	r7, r5
 800b160:	d003      	beq.n	800b16a <_dtoa_r+0x6b2>
 800b162:	4639      	mov	r1, r7
 800b164:	4658      	mov	r0, fp
 800b166:	f000 fbab 	bl	800b8c0 <_Bfree>
 800b16a:	4629      	mov	r1, r5
 800b16c:	4658      	mov	r0, fp
 800b16e:	f000 fba7 	bl	800b8c0 <_Bfree>
 800b172:	e7d0      	b.n	800b116 <_dtoa_r+0x65e>
 800b174:	9704      	str	r7, [sp, #16]
 800b176:	4633      	mov	r3, r6
 800b178:	461e      	mov	r6, r3
 800b17a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b17e:	2a39      	cmp	r2, #57	@ 0x39
 800b180:	d107      	bne.n	800b192 <_dtoa_r+0x6da>
 800b182:	459a      	cmp	sl, r3
 800b184:	d1f8      	bne.n	800b178 <_dtoa_r+0x6c0>
 800b186:	9a04      	ldr	r2, [sp, #16]
 800b188:	3201      	adds	r2, #1
 800b18a:	9204      	str	r2, [sp, #16]
 800b18c:	2230      	movs	r2, #48	@ 0x30
 800b18e:	f88a 2000 	strb.w	r2, [sl]
 800b192:	781a      	ldrb	r2, [r3, #0]
 800b194:	3201      	adds	r2, #1
 800b196:	701a      	strb	r2, [r3, #0]
 800b198:	e7bd      	b.n	800b116 <_dtoa_r+0x65e>
 800b19a:	4b7b      	ldr	r3, [pc, #492]	@ (800b388 <_dtoa_r+0x8d0>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	f7f5 fa2b 	bl	80005f8 <__aeabi_dmul>
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	460d      	mov	r5, r1
 800b1aa:	f7f5 fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	f43f aebb 	beq.w	800af2a <_dtoa_r+0x472>
 800b1b4:	e6f0      	b.n	800af98 <_dtoa_r+0x4e0>
 800b1b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b1b8:	2a00      	cmp	r2, #0
 800b1ba:	f000 80db 	beq.w	800b374 <_dtoa_r+0x8bc>
 800b1be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1c0:	2a01      	cmp	r2, #1
 800b1c2:	f300 80bf 	bgt.w	800b344 <_dtoa_r+0x88c>
 800b1c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	f000 80b7 	beq.w	800b33c <_dtoa_r+0x884>
 800b1ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b1d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1d4:	4646      	mov	r6, r8
 800b1d6:	9a08      	ldr	r2, [sp, #32]
 800b1d8:	2101      	movs	r1, #1
 800b1da:	441a      	add	r2, r3
 800b1dc:	4658      	mov	r0, fp
 800b1de:	4498      	add	r8, r3
 800b1e0:	9208      	str	r2, [sp, #32]
 800b1e2:	f000 fc21 	bl	800ba28 <__i2b>
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	b15e      	cbz	r6, 800b202 <_dtoa_r+0x74a>
 800b1ea:	9b08      	ldr	r3, [sp, #32]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	dd08      	ble.n	800b202 <_dtoa_r+0x74a>
 800b1f0:	42b3      	cmp	r3, r6
 800b1f2:	9a08      	ldr	r2, [sp, #32]
 800b1f4:	bfa8      	it	ge
 800b1f6:	4633      	movge	r3, r6
 800b1f8:	eba8 0803 	sub.w	r8, r8, r3
 800b1fc:	1af6      	subs	r6, r6, r3
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	9308      	str	r3, [sp, #32]
 800b202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b204:	b1f3      	cbz	r3, 800b244 <_dtoa_r+0x78c>
 800b206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f000 80b7 	beq.w	800b37c <_dtoa_r+0x8c4>
 800b20e:	b18c      	cbz	r4, 800b234 <_dtoa_r+0x77c>
 800b210:	4629      	mov	r1, r5
 800b212:	4622      	mov	r2, r4
 800b214:	4658      	mov	r0, fp
 800b216:	f000 fcc7 	bl	800bba8 <__pow5mult>
 800b21a:	464a      	mov	r2, r9
 800b21c:	4601      	mov	r1, r0
 800b21e:	4605      	mov	r5, r0
 800b220:	4658      	mov	r0, fp
 800b222:	f000 fc17 	bl	800ba54 <__multiply>
 800b226:	4649      	mov	r1, r9
 800b228:	9004      	str	r0, [sp, #16]
 800b22a:	4658      	mov	r0, fp
 800b22c:	f000 fb48 	bl	800b8c0 <_Bfree>
 800b230:	9b04      	ldr	r3, [sp, #16]
 800b232:	4699      	mov	r9, r3
 800b234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b236:	1b1a      	subs	r2, r3, r4
 800b238:	d004      	beq.n	800b244 <_dtoa_r+0x78c>
 800b23a:	4649      	mov	r1, r9
 800b23c:	4658      	mov	r0, fp
 800b23e:	f000 fcb3 	bl	800bba8 <__pow5mult>
 800b242:	4681      	mov	r9, r0
 800b244:	2101      	movs	r1, #1
 800b246:	4658      	mov	r0, fp
 800b248:	f000 fbee 	bl	800ba28 <__i2b>
 800b24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b24e:	4604      	mov	r4, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 81cf 	beq.w	800b5f4 <_dtoa_r+0xb3c>
 800b256:	461a      	mov	r2, r3
 800b258:	4601      	mov	r1, r0
 800b25a:	4658      	mov	r0, fp
 800b25c:	f000 fca4 	bl	800bba8 <__pow5mult>
 800b260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b262:	2b01      	cmp	r3, #1
 800b264:	4604      	mov	r4, r0
 800b266:	f300 8095 	bgt.w	800b394 <_dtoa_r+0x8dc>
 800b26a:	9b02      	ldr	r3, [sp, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f040 8087 	bne.w	800b380 <_dtoa_r+0x8c8>
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f040 8089 	bne.w	800b390 <_dtoa_r+0x8d8>
 800b27e:	9b03      	ldr	r3, [sp, #12]
 800b280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b284:	0d1b      	lsrs	r3, r3, #20
 800b286:	051b      	lsls	r3, r3, #20
 800b288:	b12b      	cbz	r3, 800b296 <_dtoa_r+0x7de>
 800b28a:	9b08      	ldr	r3, [sp, #32]
 800b28c:	3301      	adds	r3, #1
 800b28e:	9308      	str	r3, [sp, #32]
 800b290:	f108 0801 	add.w	r8, r8, #1
 800b294:	2301      	movs	r3, #1
 800b296:	930a      	str	r3, [sp, #40]	@ 0x28
 800b298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 81b0 	beq.w	800b600 <_dtoa_r+0xb48>
 800b2a0:	6923      	ldr	r3, [r4, #16]
 800b2a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2a6:	6918      	ldr	r0, [r3, #16]
 800b2a8:	f000 fb72 	bl	800b990 <__hi0bits>
 800b2ac:	f1c0 0020 	rsb	r0, r0, #32
 800b2b0:	9b08      	ldr	r3, [sp, #32]
 800b2b2:	4418      	add	r0, r3
 800b2b4:	f010 001f 	ands.w	r0, r0, #31
 800b2b8:	d077      	beq.n	800b3aa <_dtoa_r+0x8f2>
 800b2ba:	f1c0 0320 	rsb	r3, r0, #32
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	dd6b      	ble.n	800b39a <_dtoa_r+0x8e2>
 800b2c2:	9b08      	ldr	r3, [sp, #32]
 800b2c4:	f1c0 001c 	rsb	r0, r0, #28
 800b2c8:	4403      	add	r3, r0
 800b2ca:	4480      	add	r8, r0
 800b2cc:	4406      	add	r6, r0
 800b2ce:	9308      	str	r3, [sp, #32]
 800b2d0:	f1b8 0f00 	cmp.w	r8, #0
 800b2d4:	dd05      	ble.n	800b2e2 <_dtoa_r+0x82a>
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	4642      	mov	r2, r8
 800b2da:	4658      	mov	r0, fp
 800b2dc:	f000 fcbe 	bl	800bc5c <__lshift>
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	9b08      	ldr	r3, [sp, #32]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	dd05      	ble.n	800b2f4 <_dtoa_r+0x83c>
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4658      	mov	r0, fp
 800b2ee:	f000 fcb5 	bl	800bc5c <__lshift>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d059      	beq.n	800b3ae <_dtoa_r+0x8f6>
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4648      	mov	r0, r9
 800b2fe:	f000 fd19 	bl	800bd34 <__mcmp>
 800b302:	2800      	cmp	r0, #0
 800b304:	da53      	bge.n	800b3ae <_dtoa_r+0x8f6>
 800b306:	1e7b      	subs	r3, r7, #1
 800b308:	9304      	str	r3, [sp, #16]
 800b30a:	4649      	mov	r1, r9
 800b30c:	2300      	movs	r3, #0
 800b30e:	220a      	movs	r2, #10
 800b310:	4658      	mov	r0, fp
 800b312:	f000 faf7 	bl	800b904 <__multadd>
 800b316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b318:	4681      	mov	r9, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f000 8172 	beq.w	800b604 <_dtoa_r+0xb4c>
 800b320:	2300      	movs	r3, #0
 800b322:	4629      	mov	r1, r5
 800b324:	220a      	movs	r2, #10
 800b326:	4658      	mov	r0, fp
 800b328:	f000 faec 	bl	800b904 <__multadd>
 800b32c:	9b00      	ldr	r3, [sp, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	4605      	mov	r5, r0
 800b332:	dc67      	bgt.n	800b404 <_dtoa_r+0x94c>
 800b334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b336:	2b02      	cmp	r3, #2
 800b338:	dc41      	bgt.n	800b3be <_dtoa_r+0x906>
 800b33a:	e063      	b.n	800b404 <_dtoa_r+0x94c>
 800b33c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b33e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b342:	e746      	b.n	800b1d2 <_dtoa_r+0x71a>
 800b344:	9b07      	ldr	r3, [sp, #28]
 800b346:	1e5c      	subs	r4, r3, #1
 800b348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	bfbf      	itttt	lt
 800b34e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b350:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b352:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b354:	1ae3      	sublt	r3, r4, r3
 800b356:	bfb4      	ite	lt
 800b358:	18d2      	addlt	r2, r2, r3
 800b35a:	1b1c      	subge	r4, r3, r4
 800b35c:	9b07      	ldr	r3, [sp, #28]
 800b35e:	bfbc      	itt	lt
 800b360:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b362:	2400      	movlt	r4, #0
 800b364:	2b00      	cmp	r3, #0
 800b366:	bfb5      	itete	lt
 800b368:	eba8 0603 	sublt.w	r6, r8, r3
 800b36c:	9b07      	ldrge	r3, [sp, #28]
 800b36e:	2300      	movlt	r3, #0
 800b370:	4646      	movge	r6, r8
 800b372:	e730      	b.n	800b1d6 <_dtoa_r+0x71e>
 800b374:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b376:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b378:	4646      	mov	r6, r8
 800b37a:	e735      	b.n	800b1e8 <_dtoa_r+0x730>
 800b37c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b37e:	e75c      	b.n	800b23a <_dtoa_r+0x782>
 800b380:	2300      	movs	r3, #0
 800b382:	e788      	b.n	800b296 <_dtoa_r+0x7de>
 800b384:	3fe00000 	.word	0x3fe00000
 800b388:	40240000 	.word	0x40240000
 800b38c:	40140000 	.word	0x40140000
 800b390:	9b02      	ldr	r3, [sp, #8]
 800b392:	e780      	b.n	800b296 <_dtoa_r+0x7de>
 800b394:	2300      	movs	r3, #0
 800b396:	930a      	str	r3, [sp, #40]	@ 0x28
 800b398:	e782      	b.n	800b2a0 <_dtoa_r+0x7e8>
 800b39a:	d099      	beq.n	800b2d0 <_dtoa_r+0x818>
 800b39c:	9a08      	ldr	r2, [sp, #32]
 800b39e:	331c      	adds	r3, #28
 800b3a0:	441a      	add	r2, r3
 800b3a2:	4498      	add	r8, r3
 800b3a4:	441e      	add	r6, r3
 800b3a6:	9208      	str	r2, [sp, #32]
 800b3a8:	e792      	b.n	800b2d0 <_dtoa_r+0x818>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	e7f6      	b.n	800b39c <_dtoa_r+0x8e4>
 800b3ae:	9b07      	ldr	r3, [sp, #28]
 800b3b0:	9704      	str	r7, [sp, #16]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	dc20      	bgt.n	800b3f8 <_dtoa_r+0x940>
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	dd1e      	ble.n	800b3fc <_dtoa_r+0x944>
 800b3be:	9b00      	ldr	r3, [sp, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f47f aec0 	bne.w	800b146 <_dtoa_r+0x68e>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	2205      	movs	r2, #5
 800b3ca:	4658      	mov	r0, fp
 800b3cc:	f000 fa9a 	bl	800b904 <__multadd>
 800b3d0:	4601      	mov	r1, r0
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	4648      	mov	r0, r9
 800b3d6:	f000 fcad 	bl	800bd34 <__mcmp>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	f77f aeb3 	ble.w	800b146 <_dtoa_r+0x68e>
 800b3e0:	4656      	mov	r6, sl
 800b3e2:	2331      	movs	r3, #49	@ 0x31
 800b3e4:	f806 3b01 	strb.w	r3, [r6], #1
 800b3e8:	9b04      	ldr	r3, [sp, #16]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	9304      	str	r3, [sp, #16]
 800b3ee:	e6ae      	b.n	800b14e <_dtoa_r+0x696>
 800b3f0:	9c07      	ldr	r4, [sp, #28]
 800b3f2:	9704      	str	r7, [sp, #16]
 800b3f4:	4625      	mov	r5, r4
 800b3f6:	e7f3      	b.n	800b3e0 <_dtoa_r+0x928>
 800b3f8:	9b07      	ldr	r3, [sp, #28]
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 8104 	beq.w	800b60c <_dtoa_r+0xb54>
 800b404:	2e00      	cmp	r6, #0
 800b406:	dd05      	ble.n	800b414 <_dtoa_r+0x95c>
 800b408:	4629      	mov	r1, r5
 800b40a:	4632      	mov	r2, r6
 800b40c:	4658      	mov	r0, fp
 800b40e:	f000 fc25 	bl	800bc5c <__lshift>
 800b412:	4605      	mov	r5, r0
 800b414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b416:	2b00      	cmp	r3, #0
 800b418:	d05a      	beq.n	800b4d0 <_dtoa_r+0xa18>
 800b41a:	6869      	ldr	r1, [r5, #4]
 800b41c:	4658      	mov	r0, fp
 800b41e:	f000 fa0f 	bl	800b840 <_Balloc>
 800b422:	4606      	mov	r6, r0
 800b424:	b928      	cbnz	r0, 800b432 <_dtoa_r+0x97a>
 800b426:	4b84      	ldr	r3, [pc, #528]	@ (800b638 <_dtoa_r+0xb80>)
 800b428:	4602      	mov	r2, r0
 800b42a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b42e:	f7ff bb5a 	b.w	800aae6 <_dtoa_r+0x2e>
 800b432:	692a      	ldr	r2, [r5, #16]
 800b434:	3202      	adds	r2, #2
 800b436:	0092      	lsls	r2, r2, #2
 800b438:	f105 010c 	add.w	r1, r5, #12
 800b43c:	300c      	adds	r0, #12
 800b43e:	f000 ffaf 	bl	800c3a0 <memcpy>
 800b442:	2201      	movs	r2, #1
 800b444:	4631      	mov	r1, r6
 800b446:	4658      	mov	r0, fp
 800b448:	f000 fc08 	bl	800bc5c <__lshift>
 800b44c:	f10a 0301 	add.w	r3, sl, #1
 800b450:	9307      	str	r3, [sp, #28]
 800b452:	9b00      	ldr	r3, [sp, #0]
 800b454:	4453      	add	r3, sl
 800b456:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b458:	9b02      	ldr	r3, [sp, #8]
 800b45a:	f003 0301 	and.w	r3, r3, #1
 800b45e:	462f      	mov	r7, r5
 800b460:	930a      	str	r3, [sp, #40]	@ 0x28
 800b462:	4605      	mov	r5, r0
 800b464:	9b07      	ldr	r3, [sp, #28]
 800b466:	4621      	mov	r1, r4
 800b468:	3b01      	subs	r3, #1
 800b46a:	4648      	mov	r0, r9
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	f7ff fa9a 	bl	800a9a6 <quorem>
 800b472:	4639      	mov	r1, r7
 800b474:	9002      	str	r0, [sp, #8]
 800b476:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b47a:	4648      	mov	r0, r9
 800b47c:	f000 fc5a 	bl	800bd34 <__mcmp>
 800b480:	462a      	mov	r2, r5
 800b482:	9008      	str	r0, [sp, #32]
 800b484:	4621      	mov	r1, r4
 800b486:	4658      	mov	r0, fp
 800b488:	f000 fc70 	bl	800bd6c <__mdiff>
 800b48c:	68c2      	ldr	r2, [r0, #12]
 800b48e:	4606      	mov	r6, r0
 800b490:	bb02      	cbnz	r2, 800b4d4 <_dtoa_r+0xa1c>
 800b492:	4601      	mov	r1, r0
 800b494:	4648      	mov	r0, r9
 800b496:	f000 fc4d 	bl	800bd34 <__mcmp>
 800b49a:	4602      	mov	r2, r0
 800b49c:	4631      	mov	r1, r6
 800b49e:	4658      	mov	r0, fp
 800b4a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4a2:	f000 fa0d 	bl	800b8c0 <_Bfree>
 800b4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4aa:	9e07      	ldr	r6, [sp, #28]
 800b4ac:	ea43 0102 	orr.w	r1, r3, r2
 800b4b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4b2:	4319      	orrs	r1, r3
 800b4b4:	d110      	bne.n	800b4d8 <_dtoa_r+0xa20>
 800b4b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b4ba:	d029      	beq.n	800b510 <_dtoa_r+0xa58>
 800b4bc:	9b08      	ldr	r3, [sp, #32]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	dd02      	ble.n	800b4c8 <_dtoa_r+0xa10>
 800b4c2:	9b02      	ldr	r3, [sp, #8]
 800b4c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b4c8:	9b00      	ldr	r3, [sp, #0]
 800b4ca:	f883 8000 	strb.w	r8, [r3]
 800b4ce:	e63f      	b.n	800b150 <_dtoa_r+0x698>
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	e7bb      	b.n	800b44c <_dtoa_r+0x994>
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	e7e1      	b.n	800b49c <_dtoa_r+0x9e4>
 800b4d8:	9b08      	ldr	r3, [sp, #32]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	db04      	blt.n	800b4e8 <_dtoa_r+0xa30>
 800b4de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4e0:	430b      	orrs	r3, r1
 800b4e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	d120      	bne.n	800b52a <_dtoa_r+0xa72>
 800b4e8:	2a00      	cmp	r2, #0
 800b4ea:	dded      	ble.n	800b4c8 <_dtoa_r+0xa10>
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	4658      	mov	r0, fp
 800b4f2:	f000 fbb3 	bl	800bc5c <__lshift>
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	4681      	mov	r9, r0
 800b4fa:	f000 fc1b 	bl	800bd34 <__mcmp>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	dc03      	bgt.n	800b50a <_dtoa_r+0xa52>
 800b502:	d1e1      	bne.n	800b4c8 <_dtoa_r+0xa10>
 800b504:	f018 0f01 	tst.w	r8, #1
 800b508:	d0de      	beq.n	800b4c8 <_dtoa_r+0xa10>
 800b50a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b50e:	d1d8      	bne.n	800b4c2 <_dtoa_r+0xa0a>
 800b510:	9a00      	ldr	r2, [sp, #0]
 800b512:	2339      	movs	r3, #57	@ 0x39
 800b514:	7013      	strb	r3, [r2, #0]
 800b516:	4633      	mov	r3, r6
 800b518:	461e      	mov	r6, r3
 800b51a:	3b01      	subs	r3, #1
 800b51c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b520:	2a39      	cmp	r2, #57	@ 0x39
 800b522:	d052      	beq.n	800b5ca <_dtoa_r+0xb12>
 800b524:	3201      	adds	r2, #1
 800b526:	701a      	strb	r2, [r3, #0]
 800b528:	e612      	b.n	800b150 <_dtoa_r+0x698>
 800b52a:	2a00      	cmp	r2, #0
 800b52c:	dd07      	ble.n	800b53e <_dtoa_r+0xa86>
 800b52e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b532:	d0ed      	beq.n	800b510 <_dtoa_r+0xa58>
 800b534:	9a00      	ldr	r2, [sp, #0]
 800b536:	f108 0301 	add.w	r3, r8, #1
 800b53a:	7013      	strb	r3, [r2, #0]
 800b53c:	e608      	b.n	800b150 <_dtoa_r+0x698>
 800b53e:	9b07      	ldr	r3, [sp, #28]
 800b540:	9a07      	ldr	r2, [sp, #28]
 800b542:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b548:	4293      	cmp	r3, r2
 800b54a:	d028      	beq.n	800b59e <_dtoa_r+0xae6>
 800b54c:	4649      	mov	r1, r9
 800b54e:	2300      	movs	r3, #0
 800b550:	220a      	movs	r2, #10
 800b552:	4658      	mov	r0, fp
 800b554:	f000 f9d6 	bl	800b904 <__multadd>
 800b558:	42af      	cmp	r7, r5
 800b55a:	4681      	mov	r9, r0
 800b55c:	f04f 0300 	mov.w	r3, #0
 800b560:	f04f 020a 	mov.w	r2, #10
 800b564:	4639      	mov	r1, r7
 800b566:	4658      	mov	r0, fp
 800b568:	d107      	bne.n	800b57a <_dtoa_r+0xac2>
 800b56a:	f000 f9cb 	bl	800b904 <__multadd>
 800b56e:	4607      	mov	r7, r0
 800b570:	4605      	mov	r5, r0
 800b572:	9b07      	ldr	r3, [sp, #28]
 800b574:	3301      	adds	r3, #1
 800b576:	9307      	str	r3, [sp, #28]
 800b578:	e774      	b.n	800b464 <_dtoa_r+0x9ac>
 800b57a:	f000 f9c3 	bl	800b904 <__multadd>
 800b57e:	4629      	mov	r1, r5
 800b580:	4607      	mov	r7, r0
 800b582:	2300      	movs	r3, #0
 800b584:	220a      	movs	r2, #10
 800b586:	4658      	mov	r0, fp
 800b588:	f000 f9bc 	bl	800b904 <__multadd>
 800b58c:	4605      	mov	r5, r0
 800b58e:	e7f0      	b.n	800b572 <_dtoa_r+0xaba>
 800b590:	9b00      	ldr	r3, [sp, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	bfcc      	ite	gt
 800b596:	461e      	movgt	r6, r3
 800b598:	2601      	movle	r6, #1
 800b59a:	4456      	add	r6, sl
 800b59c:	2700      	movs	r7, #0
 800b59e:	4649      	mov	r1, r9
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	4658      	mov	r0, fp
 800b5a4:	f000 fb5a 	bl	800bc5c <__lshift>
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	4681      	mov	r9, r0
 800b5ac:	f000 fbc2 	bl	800bd34 <__mcmp>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	dcb0      	bgt.n	800b516 <_dtoa_r+0xa5e>
 800b5b4:	d102      	bne.n	800b5bc <_dtoa_r+0xb04>
 800b5b6:	f018 0f01 	tst.w	r8, #1
 800b5ba:	d1ac      	bne.n	800b516 <_dtoa_r+0xa5e>
 800b5bc:	4633      	mov	r3, r6
 800b5be:	461e      	mov	r6, r3
 800b5c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5c4:	2a30      	cmp	r2, #48	@ 0x30
 800b5c6:	d0fa      	beq.n	800b5be <_dtoa_r+0xb06>
 800b5c8:	e5c2      	b.n	800b150 <_dtoa_r+0x698>
 800b5ca:	459a      	cmp	sl, r3
 800b5cc:	d1a4      	bne.n	800b518 <_dtoa_r+0xa60>
 800b5ce:	9b04      	ldr	r3, [sp, #16]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	9304      	str	r3, [sp, #16]
 800b5d4:	2331      	movs	r3, #49	@ 0x31
 800b5d6:	f88a 3000 	strb.w	r3, [sl]
 800b5da:	e5b9      	b.n	800b150 <_dtoa_r+0x698>
 800b5dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b5de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b63c <_dtoa_r+0xb84>
 800b5e2:	b11b      	cbz	r3, 800b5ec <_dtoa_r+0xb34>
 800b5e4:	f10a 0308 	add.w	r3, sl, #8
 800b5e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b5ea:	6013      	str	r3, [r2, #0]
 800b5ec:	4650      	mov	r0, sl
 800b5ee:	b019      	add	sp, #100	@ 0x64
 800b5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	f77f ae37 	ble.w	800b26a <_dtoa_r+0x7b2>
 800b5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b600:	2001      	movs	r0, #1
 800b602:	e655      	b.n	800b2b0 <_dtoa_r+0x7f8>
 800b604:	9b00      	ldr	r3, [sp, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f77f aed6 	ble.w	800b3b8 <_dtoa_r+0x900>
 800b60c:	4656      	mov	r6, sl
 800b60e:	4621      	mov	r1, r4
 800b610:	4648      	mov	r0, r9
 800b612:	f7ff f9c8 	bl	800a9a6 <quorem>
 800b616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b61a:	f806 8b01 	strb.w	r8, [r6], #1
 800b61e:	9b00      	ldr	r3, [sp, #0]
 800b620:	eba6 020a 	sub.w	r2, r6, sl
 800b624:	4293      	cmp	r3, r2
 800b626:	ddb3      	ble.n	800b590 <_dtoa_r+0xad8>
 800b628:	4649      	mov	r1, r9
 800b62a:	2300      	movs	r3, #0
 800b62c:	220a      	movs	r2, #10
 800b62e:	4658      	mov	r0, fp
 800b630:	f000 f968 	bl	800b904 <__multadd>
 800b634:	4681      	mov	r9, r0
 800b636:	e7ea      	b.n	800b60e <_dtoa_r+0xb56>
 800b638:	0800ceb8 	.word	0x0800ceb8
 800b63c:	0800ce3c 	.word	0x0800ce3c

0800b640 <_free_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4605      	mov	r5, r0
 800b644:	2900      	cmp	r1, #0
 800b646:	d041      	beq.n	800b6cc <_free_r+0x8c>
 800b648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b64c:	1f0c      	subs	r4, r1, #4
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bfb8      	it	lt
 800b652:	18e4      	addlt	r4, r4, r3
 800b654:	f000 f8e8 	bl	800b828 <__malloc_lock>
 800b658:	4a1d      	ldr	r2, [pc, #116]	@ (800b6d0 <_free_r+0x90>)
 800b65a:	6813      	ldr	r3, [r2, #0]
 800b65c:	b933      	cbnz	r3, 800b66c <_free_r+0x2c>
 800b65e:	6063      	str	r3, [r4, #4]
 800b660:	6014      	str	r4, [r2, #0]
 800b662:	4628      	mov	r0, r5
 800b664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b668:	f000 b8e4 	b.w	800b834 <__malloc_unlock>
 800b66c:	42a3      	cmp	r3, r4
 800b66e:	d908      	bls.n	800b682 <_free_r+0x42>
 800b670:	6820      	ldr	r0, [r4, #0]
 800b672:	1821      	adds	r1, r4, r0
 800b674:	428b      	cmp	r3, r1
 800b676:	bf01      	itttt	eq
 800b678:	6819      	ldreq	r1, [r3, #0]
 800b67a:	685b      	ldreq	r3, [r3, #4]
 800b67c:	1809      	addeq	r1, r1, r0
 800b67e:	6021      	streq	r1, [r4, #0]
 800b680:	e7ed      	b.n	800b65e <_free_r+0x1e>
 800b682:	461a      	mov	r2, r3
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	b10b      	cbz	r3, 800b68c <_free_r+0x4c>
 800b688:	42a3      	cmp	r3, r4
 800b68a:	d9fa      	bls.n	800b682 <_free_r+0x42>
 800b68c:	6811      	ldr	r1, [r2, #0]
 800b68e:	1850      	adds	r0, r2, r1
 800b690:	42a0      	cmp	r0, r4
 800b692:	d10b      	bne.n	800b6ac <_free_r+0x6c>
 800b694:	6820      	ldr	r0, [r4, #0]
 800b696:	4401      	add	r1, r0
 800b698:	1850      	adds	r0, r2, r1
 800b69a:	4283      	cmp	r3, r0
 800b69c:	6011      	str	r1, [r2, #0]
 800b69e:	d1e0      	bne.n	800b662 <_free_r+0x22>
 800b6a0:	6818      	ldr	r0, [r3, #0]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	6053      	str	r3, [r2, #4]
 800b6a6:	4408      	add	r0, r1
 800b6a8:	6010      	str	r0, [r2, #0]
 800b6aa:	e7da      	b.n	800b662 <_free_r+0x22>
 800b6ac:	d902      	bls.n	800b6b4 <_free_r+0x74>
 800b6ae:	230c      	movs	r3, #12
 800b6b0:	602b      	str	r3, [r5, #0]
 800b6b2:	e7d6      	b.n	800b662 <_free_r+0x22>
 800b6b4:	6820      	ldr	r0, [r4, #0]
 800b6b6:	1821      	adds	r1, r4, r0
 800b6b8:	428b      	cmp	r3, r1
 800b6ba:	bf04      	itt	eq
 800b6bc:	6819      	ldreq	r1, [r3, #0]
 800b6be:	685b      	ldreq	r3, [r3, #4]
 800b6c0:	6063      	str	r3, [r4, #4]
 800b6c2:	bf04      	itt	eq
 800b6c4:	1809      	addeq	r1, r1, r0
 800b6c6:	6021      	streq	r1, [r4, #0]
 800b6c8:	6054      	str	r4, [r2, #4]
 800b6ca:	e7ca      	b.n	800b662 <_free_r+0x22>
 800b6cc:	bd38      	pop	{r3, r4, r5, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20002244 	.word	0x20002244

0800b6d4 <malloc>:
 800b6d4:	4b02      	ldr	r3, [pc, #8]	@ (800b6e0 <malloc+0xc>)
 800b6d6:	4601      	mov	r1, r0
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	f000 b825 	b.w	800b728 <_malloc_r>
 800b6de:	bf00      	nop
 800b6e0:	20000108 	.word	0x20000108

0800b6e4 <sbrk_aligned>:
 800b6e4:	b570      	push	{r4, r5, r6, lr}
 800b6e6:	4e0f      	ldr	r6, [pc, #60]	@ (800b724 <sbrk_aligned+0x40>)
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	6831      	ldr	r1, [r6, #0]
 800b6ec:	4605      	mov	r5, r0
 800b6ee:	b911      	cbnz	r1, 800b6f6 <sbrk_aligned+0x12>
 800b6f0:	f000 fe46 	bl	800c380 <_sbrk_r>
 800b6f4:	6030      	str	r0, [r6, #0]
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	f000 fe41 	bl	800c380 <_sbrk_r>
 800b6fe:	1c43      	adds	r3, r0, #1
 800b700:	d103      	bne.n	800b70a <sbrk_aligned+0x26>
 800b702:	f04f 34ff 	mov.w	r4, #4294967295
 800b706:	4620      	mov	r0, r4
 800b708:	bd70      	pop	{r4, r5, r6, pc}
 800b70a:	1cc4      	adds	r4, r0, #3
 800b70c:	f024 0403 	bic.w	r4, r4, #3
 800b710:	42a0      	cmp	r0, r4
 800b712:	d0f8      	beq.n	800b706 <sbrk_aligned+0x22>
 800b714:	1a21      	subs	r1, r4, r0
 800b716:	4628      	mov	r0, r5
 800b718:	f000 fe32 	bl	800c380 <_sbrk_r>
 800b71c:	3001      	adds	r0, #1
 800b71e:	d1f2      	bne.n	800b706 <sbrk_aligned+0x22>
 800b720:	e7ef      	b.n	800b702 <sbrk_aligned+0x1e>
 800b722:	bf00      	nop
 800b724:	20002240 	.word	0x20002240

0800b728 <_malloc_r>:
 800b728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b72c:	1ccd      	adds	r5, r1, #3
 800b72e:	f025 0503 	bic.w	r5, r5, #3
 800b732:	3508      	adds	r5, #8
 800b734:	2d0c      	cmp	r5, #12
 800b736:	bf38      	it	cc
 800b738:	250c      	movcc	r5, #12
 800b73a:	2d00      	cmp	r5, #0
 800b73c:	4606      	mov	r6, r0
 800b73e:	db01      	blt.n	800b744 <_malloc_r+0x1c>
 800b740:	42a9      	cmp	r1, r5
 800b742:	d904      	bls.n	800b74e <_malloc_r+0x26>
 800b744:	230c      	movs	r3, #12
 800b746:	6033      	str	r3, [r6, #0]
 800b748:	2000      	movs	r0, #0
 800b74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b74e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b824 <_malloc_r+0xfc>
 800b752:	f000 f869 	bl	800b828 <__malloc_lock>
 800b756:	f8d8 3000 	ldr.w	r3, [r8]
 800b75a:	461c      	mov	r4, r3
 800b75c:	bb44      	cbnz	r4, 800b7b0 <_malloc_r+0x88>
 800b75e:	4629      	mov	r1, r5
 800b760:	4630      	mov	r0, r6
 800b762:	f7ff ffbf 	bl	800b6e4 <sbrk_aligned>
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	4604      	mov	r4, r0
 800b76a:	d158      	bne.n	800b81e <_malloc_r+0xf6>
 800b76c:	f8d8 4000 	ldr.w	r4, [r8]
 800b770:	4627      	mov	r7, r4
 800b772:	2f00      	cmp	r7, #0
 800b774:	d143      	bne.n	800b7fe <_malloc_r+0xd6>
 800b776:	2c00      	cmp	r4, #0
 800b778:	d04b      	beq.n	800b812 <_malloc_r+0xea>
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	4639      	mov	r1, r7
 800b77e:	4630      	mov	r0, r6
 800b780:	eb04 0903 	add.w	r9, r4, r3
 800b784:	f000 fdfc 	bl	800c380 <_sbrk_r>
 800b788:	4581      	cmp	r9, r0
 800b78a:	d142      	bne.n	800b812 <_malloc_r+0xea>
 800b78c:	6821      	ldr	r1, [r4, #0]
 800b78e:	1a6d      	subs	r5, r5, r1
 800b790:	4629      	mov	r1, r5
 800b792:	4630      	mov	r0, r6
 800b794:	f7ff ffa6 	bl	800b6e4 <sbrk_aligned>
 800b798:	3001      	adds	r0, #1
 800b79a:	d03a      	beq.n	800b812 <_malloc_r+0xea>
 800b79c:	6823      	ldr	r3, [r4, #0]
 800b79e:	442b      	add	r3, r5
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	bb62      	cbnz	r2, 800b804 <_malloc_r+0xdc>
 800b7aa:	f8c8 7000 	str.w	r7, [r8]
 800b7ae:	e00f      	b.n	800b7d0 <_malloc_r+0xa8>
 800b7b0:	6822      	ldr	r2, [r4, #0]
 800b7b2:	1b52      	subs	r2, r2, r5
 800b7b4:	d420      	bmi.n	800b7f8 <_malloc_r+0xd0>
 800b7b6:	2a0b      	cmp	r2, #11
 800b7b8:	d917      	bls.n	800b7ea <_malloc_r+0xc2>
 800b7ba:	1961      	adds	r1, r4, r5
 800b7bc:	42a3      	cmp	r3, r4
 800b7be:	6025      	str	r5, [r4, #0]
 800b7c0:	bf18      	it	ne
 800b7c2:	6059      	strne	r1, [r3, #4]
 800b7c4:	6863      	ldr	r3, [r4, #4]
 800b7c6:	bf08      	it	eq
 800b7c8:	f8c8 1000 	streq.w	r1, [r8]
 800b7cc:	5162      	str	r2, [r4, r5]
 800b7ce:	604b      	str	r3, [r1, #4]
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f000 f82f 	bl	800b834 <__malloc_unlock>
 800b7d6:	f104 000b 	add.w	r0, r4, #11
 800b7da:	1d23      	adds	r3, r4, #4
 800b7dc:	f020 0007 	bic.w	r0, r0, #7
 800b7e0:	1ac2      	subs	r2, r0, r3
 800b7e2:	bf1c      	itt	ne
 800b7e4:	1a1b      	subne	r3, r3, r0
 800b7e6:	50a3      	strne	r3, [r4, r2]
 800b7e8:	e7af      	b.n	800b74a <_malloc_r+0x22>
 800b7ea:	6862      	ldr	r2, [r4, #4]
 800b7ec:	42a3      	cmp	r3, r4
 800b7ee:	bf0c      	ite	eq
 800b7f0:	f8c8 2000 	streq.w	r2, [r8]
 800b7f4:	605a      	strne	r2, [r3, #4]
 800b7f6:	e7eb      	b.n	800b7d0 <_malloc_r+0xa8>
 800b7f8:	4623      	mov	r3, r4
 800b7fa:	6864      	ldr	r4, [r4, #4]
 800b7fc:	e7ae      	b.n	800b75c <_malloc_r+0x34>
 800b7fe:	463c      	mov	r4, r7
 800b800:	687f      	ldr	r7, [r7, #4]
 800b802:	e7b6      	b.n	800b772 <_malloc_r+0x4a>
 800b804:	461a      	mov	r2, r3
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	42a3      	cmp	r3, r4
 800b80a:	d1fb      	bne.n	800b804 <_malloc_r+0xdc>
 800b80c:	2300      	movs	r3, #0
 800b80e:	6053      	str	r3, [r2, #4]
 800b810:	e7de      	b.n	800b7d0 <_malloc_r+0xa8>
 800b812:	230c      	movs	r3, #12
 800b814:	6033      	str	r3, [r6, #0]
 800b816:	4630      	mov	r0, r6
 800b818:	f000 f80c 	bl	800b834 <__malloc_unlock>
 800b81c:	e794      	b.n	800b748 <_malloc_r+0x20>
 800b81e:	6005      	str	r5, [r0, #0]
 800b820:	e7d6      	b.n	800b7d0 <_malloc_r+0xa8>
 800b822:	bf00      	nop
 800b824:	20002244 	.word	0x20002244

0800b828 <__malloc_lock>:
 800b828:	4801      	ldr	r0, [pc, #4]	@ (800b830 <__malloc_lock+0x8>)
 800b82a:	f7ff b8ba 	b.w	800a9a2 <__retarget_lock_acquire_recursive>
 800b82e:	bf00      	nop
 800b830:	2000223c 	.word	0x2000223c

0800b834 <__malloc_unlock>:
 800b834:	4801      	ldr	r0, [pc, #4]	@ (800b83c <__malloc_unlock+0x8>)
 800b836:	f7ff b8b5 	b.w	800a9a4 <__retarget_lock_release_recursive>
 800b83a:	bf00      	nop
 800b83c:	2000223c 	.word	0x2000223c

0800b840 <_Balloc>:
 800b840:	b570      	push	{r4, r5, r6, lr}
 800b842:	69c6      	ldr	r6, [r0, #28]
 800b844:	4604      	mov	r4, r0
 800b846:	460d      	mov	r5, r1
 800b848:	b976      	cbnz	r6, 800b868 <_Balloc+0x28>
 800b84a:	2010      	movs	r0, #16
 800b84c:	f7ff ff42 	bl	800b6d4 <malloc>
 800b850:	4602      	mov	r2, r0
 800b852:	61e0      	str	r0, [r4, #28]
 800b854:	b920      	cbnz	r0, 800b860 <_Balloc+0x20>
 800b856:	4b18      	ldr	r3, [pc, #96]	@ (800b8b8 <_Balloc+0x78>)
 800b858:	4818      	ldr	r0, [pc, #96]	@ (800b8bc <_Balloc+0x7c>)
 800b85a:	216b      	movs	r1, #107	@ 0x6b
 800b85c:	f000 fdae 	bl	800c3bc <__assert_func>
 800b860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b864:	6006      	str	r6, [r0, #0]
 800b866:	60c6      	str	r6, [r0, #12]
 800b868:	69e6      	ldr	r6, [r4, #28]
 800b86a:	68f3      	ldr	r3, [r6, #12]
 800b86c:	b183      	cbz	r3, 800b890 <_Balloc+0x50>
 800b86e:	69e3      	ldr	r3, [r4, #28]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b876:	b9b8      	cbnz	r0, 800b8a8 <_Balloc+0x68>
 800b878:	2101      	movs	r1, #1
 800b87a:	fa01 f605 	lsl.w	r6, r1, r5
 800b87e:	1d72      	adds	r2, r6, #5
 800b880:	0092      	lsls	r2, r2, #2
 800b882:	4620      	mov	r0, r4
 800b884:	f000 fdb8 	bl	800c3f8 <_calloc_r>
 800b888:	b160      	cbz	r0, 800b8a4 <_Balloc+0x64>
 800b88a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b88e:	e00e      	b.n	800b8ae <_Balloc+0x6e>
 800b890:	2221      	movs	r2, #33	@ 0x21
 800b892:	2104      	movs	r1, #4
 800b894:	4620      	mov	r0, r4
 800b896:	f000 fdaf 	bl	800c3f8 <_calloc_r>
 800b89a:	69e3      	ldr	r3, [r4, #28]
 800b89c:	60f0      	str	r0, [r6, #12]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1e4      	bne.n	800b86e <_Balloc+0x2e>
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	bd70      	pop	{r4, r5, r6, pc}
 800b8a8:	6802      	ldr	r2, [r0, #0]
 800b8aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8b4:	e7f7      	b.n	800b8a6 <_Balloc+0x66>
 800b8b6:	bf00      	nop
 800b8b8:	0800ce49 	.word	0x0800ce49
 800b8bc:	0800cec9 	.word	0x0800cec9

0800b8c0 <_Bfree>:
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	69c6      	ldr	r6, [r0, #28]
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	b976      	cbnz	r6, 800b8e8 <_Bfree+0x28>
 800b8ca:	2010      	movs	r0, #16
 800b8cc:	f7ff ff02 	bl	800b6d4 <malloc>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	61e8      	str	r0, [r5, #28]
 800b8d4:	b920      	cbnz	r0, 800b8e0 <_Bfree+0x20>
 800b8d6:	4b09      	ldr	r3, [pc, #36]	@ (800b8fc <_Bfree+0x3c>)
 800b8d8:	4809      	ldr	r0, [pc, #36]	@ (800b900 <_Bfree+0x40>)
 800b8da:	218f      	movs	r1, #143	@ 0x8f
 800b8dc:	f000 fd6e 	bl	800c3bc <__assert_func>
 800b8e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8e4:	6006      	str	r6, [r0, #0]
 800b8e6:	60c6      	str	r6, [r0, #12]
 800b8e8:	b13c      	cbz	r4, 800b8fa <_Bfree+0x3a>
 800b8ea:	69eb      	ldr	r3, [r5, #28]
 800b8ec:	6862      	ldr	r2, [r4, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8f4:	6021      	str	r1, [r4, #0]
 800b8f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}
 800b8fc:	0800ce49 	.word	0x0800ce49
 800b900:	0800cec9 	.word	0x0800cec9

0800b904 <__multadd>:
 800b904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b908:	690d      	ldr	r5, [r1, #16]
 800b90a:	4607      	mov	r7, r0
 800b90c:	460c      	mov	r4, r1
 800b90e:	461e      	mov	r6, r3
 800b910:	f101 0c14 	add.w	ip, r1, #20
 800b914:	2000      	movs	r0, #0
 800b916:	f8dc 3000 	ldr.w	r3, [ip]
 800b91a:	b299      	uxth	r1, r3
 800b91c:	fb02 6101 	mla	r1, r2, r1, r6
 800b920:	0c1e      	lsrs	r6, r3, #16
 800b922:	0c0b      	lsrs	r3, r1, #16
 800b924:	fb02 3306 	mla	r3, r2, r6, r3
 800b928:	b289      	uxth	r1, r1
 800b92a:	3001      	adds	r0, #1
 800b92c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b930:	4285      	cmp	r5, r0
 800b932:	f84c 1b04 	str.w	r1, [ip], #4
 800b936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b93a:	dcec      	bgt.n	800b916 <__multadd+0x12>
 800b93c:	b30e      	cbz	r6, 800b982 <__multadd+0x7e>
 800b93e:	68a3      	ldr	r3, [r4, #8]
 800b940:	42ab      	cmp	r3, r5
 800b942:	dc19      	bgt.n	800b978 <__multadd+0x74>
 800b944:	6861      	ldr	r1, [r4, #4]
 800b946:	4638      	mov	r0, r7
 800b948:	3101      	adds	r1, #1
 800b94a:	f7ff ff79 	bl	800b840 <_Balloc>
 800b94e:	4680      	mov	r8, r0
 800b950:	b928      	cbnz	r0, 800b95e <__multadd+0x5a>
 800b952:	4602      	mov	r2, r0
 800b954:	4b0c      	ldr	r3, [pc, #48]	@ (800b988 <__multadd+0x84>)
 800b956:	480d      	ldr	r0, [pc, #52]	@ (800b98c <__multadd+0x88>)
 800b958:	21ba      	movs	r1, #186	@ 0xba
 800b95a:	f000 fd2f 	bl	800c3bc <__assert_func>
 800b95e:	6922      	ldr	r2, [r4, #16]
 800b960:	3202      	adds	r2, #2
 800b962:	f104 010c 	add.w	r1, r4, #12
 800b966:	0092      	lsls	r2, r2, #2
 800b968:	300c      	adds	r0, #12
 800b96a:	f000 fd19 	bl	800c3a0 <memcpy>
 800b96e:	4621      	mov	r1, r4
 800b970:	4638      	mov	r0, r7
 800b972:	f7ff ffa5 	bl	800b8c0 <_Bfree>
 800b976:	4644      	mov	r4, r8
 800b978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b97c:	3501      	adds	r5, #1
 800b97e:	615e      	str	r6, [r3, #20]
 800b980:	6125      	str	r5, [r4, #16]
 800b982:	4620      	mov	r0, r4
 800b984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b988:	0800ceb8 	.word	0x0800ceb8
 800b98c:	0800cec9 	.word	0x0800cec9

0800b990 <__hi0bits>:
 800b990:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b994:	4603      	mov	r3, r0
 800b996:	bf36      	itet	cc
 800b998:	0403      	lslcc	r3, r0, #16
 800b99a:	2000      	movcs	r0, #0
 800b99c:	2010      	movcc	r0, #16
 800b99e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9a2:	bf3c      	itt	cc
 800b9a4:	021b      	lslcc	r3, r3, #8
 800b9a6:	3008      	addcc	r0, #8
 800b9a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9ac:	bf3c      	itt	cc
 800b9ae:	011b      	lslcc	r3, r3, #4
 800b9b0:	3004      	addcc	r0, #4
 800b9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9b6:	bf3c      	itt	cc
 800b9b8:	009b      	lslcc	r3, r3, #2
 800b9ba:	3002      	addcc	r0, #2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	db05      	blt.n	800b9cc <__hi0bits+0x3c>
 800b9c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9c4:	f100 0001 	add.w	r0, r0, #1
 800b9c8:	bf08      	it	eq
 800b9ca:	2020      	moveq	r0, #32
 800b9cc:	4770      	bx	lr

0800b9ce <__lo0bits>:
 800b9ce:	6803      	ldr	r3, [r0, #0]
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	f013 0007 	ands.w	r0, r3, #7
 800b9d6:	d00b      	beq.n	800b9f0 <__lo0bits+0x22>
 800b9d8:	07d9      	lsls	r1, r3, #31
 800b9da:	d421      	bmi.n	800ba20 <__lo0bits+0x52>
 800b9dc:	0798      	lsls	r0, r3, #30
 800b9de:	bf49      	itett	mi
 800b9e0:	085b      	lsrmi	r3, r3, #1
 800b9e2:	089b      	lsrpl	r3, r3, #2
 800b9e4:	2001      	movmi	r0, #1
 800b9e6:	6013      	strmi	r3, [r2, #0]
 800b9e8:	bf5c      	itt	pl
 800b9ea:	6013      	strpl	r3, [r2, #0]
 800b9ec:	2002      	movpl	r0, #2
 800b9ee:	4770      	bx	lr
 800b9f0:	b299      	uxth	r1, r3
 800b9f2:	b909      	cbnz	r1, 800b9f8 <__lo0bits+0x2a>
 800b9f4:	0c1b      	lsrs	r3, r3, #16
 800b9f6:	2010      	movs	r0, #16
 800b9f8:	b2d9      	uxtb	r1, r3
 800b9fa:	b909      	cbnz	r1, 800ba00 <__lo0bits+0x32>
 800b9fc:	3008      	adds	r0, #8
 800b9fe:	0a1b      	lsrs	r3, r3, #8
 800ba00:	0719      	lsls	r1, r3, #28
 800ba02:	bf04      	itt	eq
 800ba04:	091b      	lsreq	r3, r3, #4
 800ba06:	3004      	addeq	r0, #4
 800ba08:	0799      	lsls	r1, r3, #30
 800ba0a:	bf04      	itt	eq
 800ba0c:	089b      	lsreq	r3, r3, #2
 800ba0e:	3002      	addeq	r0, #2
 800ba10:	07d9      	lsls	r1, r3, #31
 800ba12:	d403      	bmi.n	800ba1c <__lo0bits+0x4e>
 800ba14:	085b      	lsrs	r3, r3, #1
 800ba16:	f100 0001 	add.w	r0, r0, #1
 800ba1a:	d003      	beq.n	800ba24 <__lo0bits+0x56>
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	4770      	bx	lr
 800ba20:	2000      	movs	r0, #0
 800ba22:	4770      	bx	lr
 800ba24:	2020      	movs	r0, #32
 800ba26:	4770      	bx	lr

0800ba28 <__i2b>:
 800ba28:	b510      	push	{r4, lr}
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	2101      	movs	r1, #1
 800ba2e:	f7ff ff07 	bl	800b840 <_Balloc>
 800ba32:	4602      	mov	r2, r0
 800ba34:	b928      	cbnz	r0, 800ba42 <__i2b+0x1a>
 800ba36:	4b05      	ldr	r3, [pc, #20]	@ (800ba4c <__i2b+0x24>)
 800ba38:	4805      	ldr	r0, [pc, #20]	@ (800ba50 <__i2b+0x28>)
 800ba3a:	f240 1145 	movw	r1, #325	@ 0x145
 800ba3e:	f000 fcbd 	bl	800c3bc <__assert_func>
 800ba42:	2301      	movs	r3, #1
 800ba44:	6144      	str	r4, [r0, #20]
 800ba46:	6103      	str	r3, [r0, #16]
 800ba48:	bd10      	pop	{r4, pc}
 800ba4a:	bf00      	nop
 800ba4c:	0800ceb8 	.word	0x0800ceb8
 800ba50:	0800cec9 	.word	0x0800cec9

0800ba54 <__multiply>:
 800ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	4614      	mov	r4, r2
 800ba5a:	690a      	ldr	r2, [r1, #16]
 800ba5c:	6923      	ldr	r3, [r4, #16]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	bfa8      	it	ge
 800ba62:	4623      	movge	r3, r4
 800ba64:	460f      	mov	r7, r1
 800ba66:	bfa4      	itt	ge
 800ba68:	460c      	movge	r4, r1
 800ba6a:	461f      	movge	r7, r3
 800ba6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba74:	68a3      	ldr	r3, [r4, #8]
 800ba76:	6861      	ldr	r1, [r4, #4]
 800ba78:	eb0a 0609 	add.w	r6, sl, r9
 800ba7c:	42b3      	cmp	r3, r6
 800ba7e:	b085      	sub	sp, #20
 800ba80:	bfb8      	it	lt
 800ba82:	3101      	addlt	r1, #1
 800ba84:	f7ff fedc 	bl	800b840 <_Balloc>
 800ba88:	b930      	cbnz	r0, 800ba98 <__multiply+0x44>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	4b44      	ldr	r3, [pc, #272]	@ (800bba0 <__multiply+0x14c>)
 800ba8e:	4845      	ldr	r0, [pc, #276]	@ (800bba4 <__multiply+0x150>)
 800ba90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba94:	f000 fc92 	bl	800c3bc <__assert_func>
 800ba98:	f100 0514 	add.w	r5, r0, #20
 800ba9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800baa0:	462b      	mov	r3, r5
 800baa2:	2200      	movs	r2, #0
 800baa4:	4543      	cmp	r3, r8
 800baa6:	d321      	bcc.n	800baec <__multiply+0x98>
 800baa8:	f107 0114 	add.w	r1, r7, #20
 800baac:	f104 0214 	add.w	r2, r4, #20
 800bab0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bab4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bab8:	9302      	str	r3, [sp, #8]
 800baba:	1b13      	subs	r3, r2, r4
 800babc:	3b15      	subs	r3, #21
 800babe:	f023 0303 	bic.w	r3, r3, #3
 800bac2:	3304      	adds	r3, #4
 800bac4:	f104 0715 	add.w	r7, r4, #21
 800bac8:	42ba      	cmp	r2, r7
 800baca:	bf38      	it	cc
 800bacc:	2304      	movcc	r3, #4
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	9b02      	ldr	r3, [sp, #8]
 800bad2:	9103      	str	r1, [sp, #12]
 800bad4:	428b      	cmp	r3, r1
 800bad6:	d80c      	bhi.n	800baf2 <__multiply+0x9e>
 800bad8:	2e00      	cmp	r6, #0
 800bada:	dd03      	ble.n	800bae4 <__multiply+0x90>
 800badc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d05b      	beq.n	800bb9c <__multiply+0x148>
 800bae4:	6106      	str	r6, [r0, #16]
 800bae6:	b005      	add	sp, #20
 800bae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baec:	f843 2b04 	str.w	r2, [r3], #4
 800baf0:	e7d8      	b.n	800baa4 <__multiply+0x50>
 800baf2:	f8b1 a000 	ldrh.w	sl, [r1]
 800baf6:	f1ba 0f00 	cmp.w	sl, #0
 800bafa:	d024      	beq.n	800bb46 <__multiply+0xf2>
 800bafc:	f104 0e14 	add.w	lr, r4, #20
 800bb00:	46a9      	mov	r9, r5
 800bb02:	f04f 0c00 	mov.w	ip, #0
 800bb06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb0a:	f8d9 3000 	ldr.w	r3, [r9]
 800bb0e:	fa1f fb87 	uxth.w	fp, r7
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bb1c:	f8d9 7000 	ldr.w	r7, [r9]
 800bb20:	4463      	add	r3, ip
 800bb22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb26:	fb0a c70b 	mla	r7, sl, fp, ip
 800bb2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb34:	4572      	cmp	r2, lr
 800bb36:	f849 3b04 	str.w	r3, [r9], #4
 800bb3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb3e:	d8e2      	bhi.n	800bb06 <__multiply+0xb2>
 800bb40:	9b01      	ldr	r3, [sp, #4]
 800bb42:	f845 c003 	str.w	ip, [r5, r3]
 800bb46:	9b03      	ldr	r3, [sp, #12]
 800bb48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb4c:	3104      	adds	r1, #4
 800bb4e:	f1b9 0f00 	cmp.w	r9, #0
 800bb52:	d021      	beq.n	800bb98 <__multiply+0x144>
 800bb54:	682b      	ldr	r3, [r5, #0]
 800bb56:	f104 0c14 	add.w	ip, r4, #20
 800bb5a:	46ae      	mov	lr, r5
 800bb5c:	f04f 0a00 	mov.w	sl, #0
 800bb60:	f8bc b000 	ldrh.w	fp, [ip]
 800bb64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb68:	fb09 770b 	mla	r7, r9, fp, r7
 800bb6c:	4457      	add	r7, sl
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb74:	f84e 3b04 	str.w	r3, [lr], #4
 800bb78:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb80:	f8be 3000 	ldrh.w	r3, [lr]
 800bb84:	fb09 330a 	mla	r3, r9, sl, r3
 800bb88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb8c:	4562      	cmp	r2, ip
 800bb8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb92:	d8e5      	bhi.n	800bb60 <__multiply+0x10c>
 800bb94:	9f01      	ldr	r7, [sp, #4]
 800bb96:	51eb      	str	r3, [r5, r7]
 800bb98:	3504      	adds	r5, #4
 800bb9a:	e799      	b.n	800bad0 <__multiply+0x7c>
 800bb9c:	3e01      	subs	r6, #1
 800bb9e:	e79b      	b.n	800bad8 <__multiply+0x84>
 800bba0:	0800ceb8 	.word	0x0800ceb8
 800bba4:	0800cec9 	.word	0x0800cec9

0800bba8 <__pow5mult>:
 800bba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbac:	4615      	mov	r5, r2
 800bbae:	f012 0203 	ands.w	r2, r2, #3
 800bbb2:	4607      	mov	r7, r0
 800bbb4:	460e      	mov	r6, r1
 800bbb6:	d007      	beq.n	800bbc8 <__pow5mult+0x20>
 800bbb8:	4c25      	ldr	r4, [pc, #148]	@ (800bc50 <__pow5mult+0xa8>)
 800bbba:	3a01      	subs	r2, #1
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbc2:	f7ff fe9f 	bl	800b904 <__multadd>
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	10ad      	asrs	r5, r5, #2
 800bbca:	d03d      	beq.n	800bc48 <__pow5mult+0xa0>
 800bbcc:	69fc      	ldr	r4, [r7, #28]
 800bbce:	b97c      	cbnz	r4, 800bbf0 <__pow5mult+0x48>
 800bbd0:	2010      	movs	r0, #16
 800bbd2:	f7ff fd7f 	bl	800b6d4 <malloc>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	61f8      	str	r0, [r7, #28]
 800bbda:	b928      	cbnz	r0, 800bbe8 <__pow5mult+0x40>
 800bbdc:	4b1d      	ldr	r3, [pc, #116]	@ (800bc54 <__pow5mult+0xac>)
 800bbde:	481e      	ldr	r0, [pc, #120]	@ (800bc58 <__pow5mult+0xb0>)
 800bbe0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bbe4:	f000 fbea 	bl	800c3bc <__assert_func>
 800bbe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbec:	6004      	str	r4, [r0, #0]
 800bbee:	60c4      	str	r4, [r0, #12]
 800bbf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bbf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbf8:	b94c      	cbnz	r4, 800bc0e <__pow5mult+0x66>
 800bbfa:	f240 2171 	movw	r1, #625	@ 0x271
 800bbfe:	4638      	mov	r0, r7
 800bc00:	f7ff ff12 	bl	800ba28 <__i2b>
 800bc04:	2300      	movs	r3, #0
 800bc06:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	6003      	str	r3, [r0, #0]
 800bc0e:	f04f 0900 	mov.w	r9, #0
 800bc12:	07eb      	lsls	r3, r5, #31
 800bc14:	d50a      	bpl.n	800bc2c <__pow5mult+0x84>
 800bc16:	4631      	mov	r1, r6
 800bc18:	4622      	mov	r2, r4
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	f7ff ff1a 	bl	800ba54 <__multiply>
 800bc20:	4631      	mov	r1, r6
 800bc22:	4680      	mov	r8, r0
 800bc24:	4638      	mov	r0, r7
 800bc26:	f7ff fe4b 	bl	800b8c0 <_Bfree>
 800bc2a:	4646      	mov	r6, r8
 800bc2c:	106d      	asrs	r5, r5, #1
 800bc2e:	d00b      	beq.n	800bc48 <__pow5mult+0xa0>
 800bc30:	6820      	ldr	r0, [r4, #0]
 800bc32:	b938      	cbnz	r0, 800bc44 <__pow5mult+0x9c>
 800bc34:	4622      	mov	r2, r4
 800bc36:	4621      	mov	r1, r4
 800bc38:	4638      	mov	r0, r7
 800bc3a:	f7ff ff0b 	bl	800ba54 <__multiply>
 800bc3e:	6020      	str	r0, [r4, #0]
 800bc40:	f8c0 9000 	str.w	r9, [r0]
 800bc44:	4604      	mov	r4, r0
 800bc46:	e7e4      	b.n	800bc12 <__pow5mult+0x6a>
 800bc48:	4630      	mov	r0, r6
 800bc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc4e:	bf00      	nop
 800bc50:	0800cf24 	.word	0x0800cf24
 800bc54:	0800ce49 	.word	0x0800ce49
 800bc58:	0800cec9 	.word	0x0800cec9

0800bc5c <__lshift>:
 800bc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc60:	460c      	mov	r4, r1
 800bc62:	6849      	ldr	r1, [r1, #4]
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc6a:	68a3      	ldr	r3, [r4, #8]
 800bc6c:	4607      	mov	r7, r0
 800bc6e:	4691      	mov	r9, r2
 800bc70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc74:	f108 0601 	add.w	r6, r8, #1
 800bc78:	42b3      	cmp	r3, r6
 800bc7a:	db0b      	blt.n	800bc94 <__lshift+0x38>
 800bc7c:	4638      	mov	r0, r7
 800bc7e:	f7ff fddf 	bl	800b840 <_Balloc>
 800bc82:	4605      	mov	r5, r0
 800bc84:	b948      	cbnz	r0, 800bc9a <__lshift+0x3e>
 800bc86:	4602      	mov	r2, r0
 800bc88:	4b28      	ldr	r3, [pc, #160]	@ (800bd2c <__lshift+0xd0>)
 800bc8a:	4829      	ldr	r0, [pc, #164]	@ (800bd30 <__lshift+0xd4>)
 800bc8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc90:	f000 fb94 	bl	800c3bc <__assert_func>
 800bc94:	3101      	adds	r1, #1
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	e7ee      	b.n	800bc78 <__lshift+0x1c>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f100 0114 	add.w	r1, r0, #20
 800bca0:	f100 0210 	add.w	r2, r0, #16
 800bca4:	4618      	mov	r0, r3
 800bca6:	4553      	cmp	r3, sl
 800bca8:	db33      	blt.n	800bd12 <__lshift+0xb6>
 800bcaa:	6920      	ldr	r0, [r4, #16]
 800bcac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcb0:	f104 0314 	add.w	r3, r4, #20
 800bcb4:	f019 091f 	ands.w	r9, r9, #31
 800bcb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcc0:	d02b      	beq.n	800bd1a <__lshift+0xbe>
 800bcc2:	f1c9 0e20 	rsb	lr, r9, #32
 800bcc6:	468a      	mov	sl, r1
 800bcc8:	2200      	movs	r2, #0
 800bcca:	6818      	ldr	r0, [r3, #0]
 800bccc:	fa00 f009 	lsl.w	r0, r0, r9
 800bcd0:	4310      	orrs	r0, r2
 800bcd2:	f84a 0b04 	str.w	r0, [sl], #4
 800bcd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcda:	459c      	cmp	ip, r3
 800bcdc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bce0:	d8f3      	bhi.n	800bcca <__lshift+0x6e>
 800bce2:	ebac 0304 	sub.w	r3, ip, r4
 800bce6:	3b15      	subs	r3, #21
 800bce8:	f023 0303 	bic.w	r3, r3, #3
 800bcec:	3304      	adds	r3, #4
 800bcee:	f104 0015 	add.w	r0, r4, #21
 800bcf2:	4584      	cmp	ip, r0
 800bcf4:	bf38      	it	cc
 800bcf6:	2304      	movcc	r3, #4
 800bcf8:	50ca      	str	r2, [r1, r3]
 800bcfa:	b10a      	cbz	r2, 800bd00 <__lshift+0xa4>
 800bcfc:	f108 0602 	add.w	r6, r8, #2
 800bd00:	3e01      	subs	r6, #1
 800bd02:	4638      	mov	r0, r7
 800bd04:	612e      	str	r6, [r5, #16]
 800bd06:	4621      	mov	r1, r4
 800bd08:	f7ff fdda 	bl	800b8c0 <_Bfree>
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd12:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd16:	3301      	adds	r3, #1
 800bd18:	e7c5      	b.n	800bca6 <__lshift+0x4a>
 800bd1a:	3904      	subs	r1, #4
 800bd1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd20:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd24:	459c      	cmp	ip, r3
 800bd26:	d8f9      	bhi.n	800bd1c <__lshift+0xc0>
 800bd28:	e7ea      	b.n	800bd00 <__lshift+0xa4>
 800bd2a:	bf00      	nop
 800bd2c:	0800ceb8 	.word	0x0800ceb8
 800bd30:	0800cec9 	.word	0x0800cec9

0800bd34 <__mcmp>:
 800bd34:	690a      	ldr	r2, [r1, #16]
 800bd36:	4603      	mov	r3, r0
 800bd38:	6900      	ldr	r0, [r0, #16]
 800bd3a:	1a80      	subs	r0, r0, r2
 800bd3c:	b530      	push	{r4, r5, lr}
 800bd3e:	d10e      	bne.n	800bd5e <__mcmp+0x2a>
 800bd40:	3314      	adds	r3, #20
 800bd42:	3114      	adds	r1, #20
 800bd44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd54:	4295      	cmp	r5, r2
 800bd56:	d003      	beq.n	800bd60 <__mcmp+0x2c>
 800bd58:	d205      	bcs.n	800bd66 <__mcmp+0x32>
 800bd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5e:	bd30      	pop	{r4, r5, pc}
 800bd60:	42a3      	cmp	r3, r4
 800bd62:	d3f3      	bcc.n	800bd4c <__mcmp+0x18>
 800bd64:	e7fb      	b.n	800bd5e <__mcmp+0x2a>
 800bd66:	2001      	movs	r0, #1
 800bd68:	e7f9      	b.n	800bd5e <__mcmp+0x2a>
	...

0800bd6c <__mdiff>:
 800bd6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd70:	4689      	mov	r9, r1
 800bd72:	4606      	mov	r6, r0
 800bd74:	4611      	mov	r1, r2
 800bd76:	4648      	mov	r0, r9
 800bd78:	4614      	mov	r4, r2
 800bd7a:	f7ff ffdb 	bl	800bd34 <__mcmp>
 800bd7e:	1e05      	subs	r5, r0, #0
 800bd80:	d112      	bne.n	800bda8 <__mdiff+0x3c>
 800bd82:	4629      	mov	r1, r5
 800bd84:	4630      	mov	r0, r6
 800bd86:	f7ff fd5b 	bl	800b840 <_Balloc>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	b928      	cbnz	r0, 800bd9a <__mdiff+0x2e>
 800bd8e:	4b3f      	ldr	r3, [pc, #252]	@ (800be8c <__mdiff+0x120>)
 800bd90:	f240 2137 	movw	r1, #567	@ 0x237
 800bd94:	483e      	ldr	r0, [pc, #248]	@ (800be90 <__mdiff+0x124>)
 800bd96:	f000 fb11 	bl	800c3bc <__assert_func>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bda0:	4610      	mov	r0, r2
 800bda2:	b003      	add	sp, #12
 800bda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda8:	bfbc      	itt	lt
 800bdaa:	464b      	movlt	r3, r9
 800bdac:	46a1      	movlt	r9, r4
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdb4:	bfba      	itte	lt
 800bdb6:	461c      	movlt	r4, r3
 800bdb8:	2501      	movlt	r5, #1
 800bdba:	2500      	movge	r5, #0
 800bdbc:	f7ff fd40 	bl	800b840 <_Balloc>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	b918      	cbnz	r0, 800bdcc <__mdiff+0x60>
 800bdc4:	4b31      	ldr	r3, [pc, #196]	@ (800be8c <__mdiff+0x120>)
 800bdc6:	f240 2145 	movw	r1, #581	@ 0x245
 800bdca:	e7e3      	b.n	800bd94 <__mdiff+0x28>
 800bdcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bdd0:	6926      	ldr	r6, [r4, #16]
 800bdd2:	60c5      	str	r5, [r0, #12]
 800bdd4:	f109 0310 	add.w	r3, r9, #16
 800bdd8:	f109 0514 	add.w	r5, r9, #20
 800bddc:	f104 0e14 	add.w	lr, r4, #20
 800bde0:	f100 0b14 	add.w	fp, r0, #20
 800bde4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bde8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	46d9      	mov	r9, fp
 800bdf0:	f04f 0c00 	mov.w	ip, #0
 800bdf4:	9b01      	ldr	r3, [sp, #4]
 800bdf6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bdfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bdfe:	9301      	str	r3, [sp, #4]
 800be00:	fa1f f38a 	uxth.w	r3, sl
 800be04:	4619      	mov	r1, r3
 800be06:	b283      	uxth	r3, r0
 800be08:	1acb      	subs	r3, r1, r3
 800be0a:	0c00      	lsrs	r0, r0, #16
 800be0c:	4463      	add	r3, ip
 800be0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be16:	b29b      	uxth	r3, r3
 800be18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be1c:	4576      	cmp	r6, lr
 800be1e:	f849 3b04 	str.w	r3, [r9], #4
 800be22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be26:	d8e5      	bhi.n	800bdf4 <__mdiff+0x88>
 800be28:	1b33      	subs	r3, r6, r4
 800be2a:	3b15      	subs	r3, #21
 800be2c:	f023 0303 	bic.w	r3, r3, #3
 800be30:	3415      	adds	r4, #21
 800be32:	3304      	adds	r3, #4
 800be34:	42a6      	cmp	r6, r4
 800be36:	bf38      	it	cc
 800be38:	2304      	movcc	r3, #4
 800be3a:	441d      	add	r5, r3
 800be3c:	445b      	add	r3, fp
 800be3e:	461e      	mov	r6, r3
 800be40:	462c      	mov	r4, r5
 800be42:	4544      	cmp	r4, r8
 800be44:	d30e      	bcc.n	800be64 <__mdiff+0xf8>
 800be46:	f108 0103 	add.w	r1, r8, #3
 800be4a:	1b49      	subs	r1, r1, r5
 800be4c:	f021 0103 	bic.w	r1, r1, #3
 800be50:	3d03      	subs	r5, #3
 800be52:	45a8      	cmp	r8, r5
 800be54:	bf38      	it	cc
 800be56:	2100      	movcc	r1, #0
 800be58:	440b      	add	r3, r1
 800be5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be5e:	b191      	cbz	r1, 800be86 <__mdiff+0x11a>
 800be60:	6117      	str	r7, [r2, #16]
 800be62:	e79d      	b.n	800bda0 <__mdiff+0x34>
 800be64:	f854 1b04 	ldr.w	r1, [r4], #4
 800be68:	46e6      	mov	lr, ip
 800be6a:	0c08      	lsrs	r0, r1, #16
 800be6c:	fa1c fc81 	uxtah	ip, ip, r1
 800be70:	4471      	add	r1, lr
 800be72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be76:	b289      	uxth	r1, r1
 800be78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be7c:	f846 1b04 	str.w	r1, [r6], #4
 800be80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be84:	e7dd      	b.n	800be42 <__mdiff+0xd6>
 800be86:	3f01      	subs	r7, #1
 800be88:	e7e7      	b.n	800be5a <__mdiff+0xee>
 800be8a:	bf00      	nop
 800be8c:	0800ceb8 	.word	0x0800ceb8
 800be90:	0800cec9 	.word	0x0800cec9

0800be94 <__d2b>:
 800be94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be98:	460f      	mov	r7, r1
 800be9a:	2101      	movs	r1, #1
 800be9c:	ec59 8b10 	vmov	r8, r9, d0
 800bea0:	4616      	mov	r6, r2
 800bea2:	f7ff fccd 	bl	800b840 <_Balloc>
 800bea6:	4604      	mov	r4, r0
 800bea8:	b930      	cbnz	r0, 800beb8 <__d2b+0x24>
 800beaa:	4602      	mov	r2, r0
 800beac:	4b23      	ldr	r3, [pc, #140]	@ (800bf3c <__d2b+0xa8>)
 800beae:	4824      	ldr	r0, [pc, #144]	@ (800bf40 <__d2b+0xac>)
 800beb0:	f240 310f 	movw	r1, #783	@ 0x30f
 800beb4:	f000 fa82 	bl	800c3bc <__assert_func>
 800beb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bec0:	b10d      	cbz	r5, 800bec6 <__d2b+0x32>
 800bec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bec6:	9301      	str	r3, [sp, #4]
 800bec8:	f1b8 0300 	subs.w	r3, r8, #0
 800becc:	d023      	beq.n	800bf16 <__d2b+0x82>
 800bece:	4668      	mov	r0, sp
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	f7ff fd7c 	bl	800b9ce <__lo0bits>
 800bed6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800beda:	b1d0      	cbz	r0, 800bf12 <__d2b+0x7e>
 800bedc:	f1c0 0320 	rsb	r3, r0, #32
 800bee0:	fa02 f303 	lsl.w	r3, r2, r3
 800bee4:	430b      	orrs	r3, r1
 800bee6:	40c2      	lsrs	r2, r0
 800bee8:	6163      	str	r3, [r4, #20]
 800beea:	9201      	str	r2, [sp, #4]
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	61a3      	str	r3, [r4, #24]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	bf0c      	ite	eq
 800bef4:	2201      	moveq	r2, #1
 800bef6:	2202      	movne	r2, #2
 800bef8:	6122      	str	r2, [r4, #16]
 800befa:	b1a5      	cbz	r5, 800bf26 <__d2b+0x92>
 800befc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf00:	4405      	add	r5, r0
 800bf02:	603d      	str	r5, [r7, #0]
 800bf04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf08:	6030      	str	r0, [r6, #0]
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	b003      	add	sp, #12
 800bf0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf12:	6161      	str	r1, [r4, #20]
 800bf14:	e7ea      	b.n	800beec <__d2b+0x58>
 800bf16:	a801      	add	r0, sp, #4
 800bf18:	f7ff fd59 	bl	800b9ce <__lo0bits>
 800bf1c:	9b01      	ldr	r3, [sp, #4]
 800bf1e:	6163      	str	r3, [r4, #20]
 800bf20:	3020      	adds	r0, #32
 800bf22:	2201      	movs	r2, #1
 800bf24:	e7e8      	b.n	800bef8 <__d2b+0x64>
 800bf26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf2e:	6038      	str	r0, [r7, #0]
 800bf30:	6918      	ldr	r0, [r3, #16]
 800bf32:	f7ff fd2d 	bl	800b990 <__hi0bits>
 800bf36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf3a:	e7e5      	b.n	800bf08 <__d2b+0x74>
 800bf3c:	0800ceb8 	.word	0x0800ceb8
 800bf40:	0800cec9 	.word	0x0800cec9

0800bf44 <__ssputs_r>:
 800bf44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf48:	688e      	ldr	r6, [r1, #8]
 800bf4a:	461f      	mov	r7, r3
 800bf4c:	42be      	cmp	r6, r7
 800bf4e:	680b      	ldr	r3, [r1, #0]
 800bf50:	4682      	mov	sl, r0
 800bf52:	460c      	mov	r4, r1
 800bf54:	4690      	mov	r8, r2
 800bf56:	d82d      	bhi.n	800bfb4 <__ssputs_r+0x70>
 800bf58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bf60:	d026      	beq.n	800bfb0 <__ssputs_r+0x6c>
 800bf62:	6965      	ldr	r5, [r4, #20]
 800bf64:	6909      	ldr	r1, [r1, #16]
 800bf66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf6a:	eba3 0901 	sub.w	r9, r3, r1
 800bf6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf72:	1c7b      	adds	r3, r7, #1
 800bf74:	444b      	add	r3, r9
 800bf76:	106d      	asrs	r5, r5, #1
 800bf78:	429d      	cmp	r5, r3
 800bf7a:	bf38      	it	cc
 800bf7c:	461d      	movcc	r5, r3
 800bf7e:	0553      	lsls	r3, r2, #21
 800bf80:	d527      	bpl.n	800bfd2 <__ssputs_r+0x8e>
 800bf82:	4629      	mov	r1, r5
 800bf84:	f7ff fbd0 	bl	800b728 <_malloc_r>
 800bf88:	4606      	mov	r6, r0
 800bf8a:	b360      	cbz	r0, 800bfe6 <__ssputs_r+0xa2>
 800bf8c:	6921      	ldr	r1, [r4, #16]
 800bf8e:	464a      	mov	r2, r9
 800bf90:	f000 fa06 	bl	800c3a0 <memcpy>
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bf9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf9e:	81a3      	strh	r3, [r4, #12]
 800bfa0:	6126      	str	r6, [r4, #16]
 800bfa2:	6165      	str	r5, [r4, #20]
 800bfa4:	444e      	add	r6, r9
 800bfa6:	eba5 0509 	sub.w	r5, r5, r9
 800bfaa:	6026      	str	r6, [r4, #0]
 800bfac:	60a5      	str	r5, [r4, #8]
 800bfae:	463e      	mov	r6, r7
 800bfb0:	42be      	cmp	r6, r7
 800bfb2:	d900      	bls.n	800bfb6 <__ssputs_r+0x72>
 800bfb4:	463e      	mov	r6, r7
 800bfb6:	6820      	ldr	r0, [r4, #0]
 800bfb8:	4632      	mov	r2, r6
 800bfba:	4641      	mov	r1, r8
 800bfbc:	f000 f9c6 	bl	800c34c <memmove>
 800bfc0:	68a3      	ldr	r3, [r4, #8]
 800bfc2:	1b9b      	subs	r3, r3, r6
 800bfc4:	60a3      	str	r3, [r4, #8]
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	4433      	add	r3, r6
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	2000      	movs	r0, #0
 800bfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd2:	462a      	mov	r2, r5
 800bfd4:	f000 fa36 	bl	800c444 <_realloc_r>
 800bfd8:	4606      	mov	r6, r0
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d1e0      	bne.n	800bfa0 <__ssputs_r+0x5c>
 800bfde:	6921      	ldr	r1, [r4, #16]
 800bfe0:	4650      	mov	r0, sl
 800bfe2:	f7ff fb2d 	bl	800b640 <_free_r>
 800bfe6:	230c      	movs	r3, #12
 800bfe8:	f8ca 3000 	str.w	r3, [sl]
 800bfec:	89a3      	ldrh	r3, [r4, #12]
 800bfee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bff2:	81a3      	strh	r3, [r4, #12]
 800bff4:	f04f 30ff 	mov.w	r0, #4294967295
 800bff8:	e7e9      	b.n	800bfce <__ssputs_r+0x8a>
	...

0800bffc <_svfiprintf_r>:
 800bffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c000:	4698      	mov	r8, r3
 800c002:	898b      	ldrh	r3, [r1, #12]
 800c004:	061b      	lsls	r3, r3, #24
 800c006:	b09d      	sub	sp, #116	@ 0x74
 800c008:	4607      	mov	r7, r0
 800c00a:	460d      	mov	r5, r1
 800c00c:	4614      	mov	r4, r2
 800c00e:	d510      	bpl.n	800c032 <_svfiprintf_r+0x36>
 800c010:	690b      	ldr	r3, [r1, #16]
 800c012:	b973      	cbnz	r3, 800c032 <_svfiprintf_r+0x36>
 800c014:	2140      	movs	r1, #64	@ 0x40
 800c016:	f7ff fb87 	bl	800b728 <_malloc_r>
 800c01a:	6028      	str	r0, [r5, #0]
 800c01c:	6128      	str	r0, [r5, #16]
 800c01e:	b930      	cbnz	r0, 800c02e <_svfiprintf_r+0x32>
 800c020:	230c      	movs	r3, #12
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	f04f 30ff 	mov.w	r0, #4294967295
 800c028:	b01d      	add	sp, #116	@ 0x74
 800c02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c02e:	2340      	movs	r3, #64	@ 0x40
 800c030:	616b      	str	r3, [r5, #20]
 800c032:	2300      	movs	r3, #0
 800c034:	9309      	str	r3, [sp, #36]	@ 0x24
 800c036:	2320      	movs	r3, #32
 800c038:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c040:	2330      	movs	r3, #48	@ 0x30
 800c042:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c1e0 <_svfiprintf_r+0x1e4>
 800c046:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c04a:	f04f 0901 	mov.w	r9, #1
 800c04e:	4623      	mov	r3, r4
 800c050:	469a      	mov	sl, r3
 800c052:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c056:	b10a      	cbz	r2, 800c05c <_svfiprintf_r+0x60>
 800c058:	2a25      	cmp	r2, #37	@ 0x25
 800c05a:	d1f9      	bne.n	800c050 <_svfiprintf_r+0x54>
 800c05c:	ebba 0b04 	subs.w	fp, sl, r4
 800c060:	d00b      	beq.n	800c07a <_svfiprintf_r+0x7e>
 800c062:	465b      	mov	r3, fp
 800c064:	4622      	mov	r2, r4
 800c066:	4629      	mov	r1, r5
 800c068:	4638      	mov	r0, r7
 800c06a:	f7ff ff6b 	bl	800bf44 <__ssputs_r>
 800c06e:	3001      	adds	r0, #1
 800c070:	f000 80a7 	beq.w	800c1c2 <_svfiprintf_r+0x1c6>
 800c074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c076:	445a      	add	r2, fp
 800c078:	9209      	str	r2, [sp, #36]	@ 0x24
 800c07a:	f89a 3000 	ldrb.w	r3, [sl]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 809f 	beq.w	800c1c2 <_svfiprintf_r+0x1c6>
 800c084:	2300      	movs	r3, #0
 800c086:	f04f 32ff 	mov.w	r2, #4294967295
 800c08a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c08e:	f10a 0a01 	add.w	sl, sl, #1
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	9307      	str	r3, [sp, #28]
 800c096:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c09a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c09c:	4654      	mov	r4, sl
 800c09e:	2205      	movs	r2, #5
 800c0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0a4:	484e      	ldr	r0, [pc, #312]	@ (800c1e0 <_svfiprintf_r+0x1e4>)
 800c0a6:	f7f4 f893 	bl	80001d0 <memchr>
 800c0aa:	9a04      	ldr	r2, [sp, #16]
 800c0ac:	b9d8      	cbnz	r0, 800c0e6 <_svfiprintf_r+0xea>
 800c0ae:	06d0      	lsls	r0, r2, #27
 800c0b0:	bf44      	itt	mi
 800c0b2:	2320      	movmi	r3, #32
 800c0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0b8:	0711      	lsls	r1, r2, #28
 800c0ba:	bf44      	itt	mi
 800c0bc:	232b      	movmi	r3, #43	@ 0x2b
 800c0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0c8:	d015      	beq.n	800c0f6 <_svfiprintf_r+0xfa>
 800c0ca:	9a07      	ldr	r2, [sp, #28]
 800c0cc:	4654      	mov	r4, sl
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	f04f 0c0a 	mov.w	ip, #10
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0da:	3b30      	subs	r3, #48	@ 0x30
 800c0dc:	2b09      	cmp	r3, #9
 800c0de:	d94b      	bls.n	800c178 <_svfiprintf_r+0x17c>
 800c0e0:	b1b0      	cbz	r0, 800c110 <_svfiprintf_r+0x114>
 800c0e2:	9207      	str	r2, [sp, #28]
 800c0e4:	e014      	b.n	800c110 <_svfiprintf_r+0x114>
 800c0e6:	eba0 0308 	sub.w	r3, r0, r8
 800c0ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	9304      	str	r3, [sp, #16]
 800c0f2:	46a2      	mov	sl, r4
 800c0f4:	e7d2      	b.n	800c09c <_svfiprintf_r+0xa0>
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	1d19      	adds	r1, r3, #4
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	9103      	str	r1, [sp, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	bfbb      	ittet	lt
 800c102:	425b      	neglt	r3, r3
 800c104:	f042 0202 	orrlt.w	r2, r2, #2
 800c108:	9307      	strge	r3, [sp, #28]
 800c10a:	9307      	strlt	r3, [sp, #28]
 800c10c:	bfb8      	it	lt
 800c10e:	9204      	strlt	r2, [sp, #16]
 800c110:	7823      	ldrb	r3, [r4, #0]
 800c112:	2b2e      	cmp	r3, #46	@ 0x2e
 800c114:	d10a      	bne.n	800c12c <_svfiprintf_r+0x130>
 800c116:	7863      	ldrb	r3, [r4, #1]
 800c118:	2b2a      	cmp	r3, #42	@ 0x2a
 800c11a:	d132      	bne.n	800c182 <_svfiprintf_r+0x186>
 800c11c:	9b03      	ldr	r3, [sp, #12]
 800c11e:	1d1a      	adds	r2, r3, #4
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	9203      	str	r2, [sp, #12]
 800c124:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c128:	3402      	adds	r4, #2
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c1f0 <_svfiprintf_r+0x1f4>
 800c130:	7821      	ldrb	r1, [r4, #0]
 800c132:	2203      	movs	r2, #3
 800c134:	4650      	mov	r0, sl
 800c136:	f7f4 f84b 	bl	80001d0 <memchr>
 800c13a:	b138      	cbz	r0, 800c14c <_svfiprintf_r+0x150>
 800c13c:	9b04      	ldr	r3, [sp, #16]
 800c13e:	eba0 000a 	sub.w	r0, r0, sl
 800c142:	2240      	movs	r2, #64	@ 0x40
 800c144:	4082      	lsls	r2, r0
 800c146:	4313      	orrs	r3, r2
 800c148:	3401      	adds	r4, #1
 800c14a:	9304      	str	r3, [sp, #16]
 800c14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c150:	4824      	ldr	r0, [pc, #144]	@ (800c1e4 <_svfiprintf_r+0x1e8>)
 800c152:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c156:	2206      	movs	r2, #6
 800c158:	f7f4 f83a 	bl	80001d0 <memchr>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	d036      	beq.n	800c1ce <_svfiprintf_r+0x1d2>
 800c160:	4b21      	ldr	r3, [pc, #132]	@ (800c1e8 <_svfiprintf_r+0x1ec>)
 800c162:	bb1b      	cbnz	r3, 800c1ac <_svfiprintf_r+0x1b0>
 800c164:	9b03      	ldr	r3, [sp, #12]
 800c166:	3307      	adds	r3, #7
 800c168:	f023 0307 	bic.w	r3, r3, #7
 800c16c:	3308      	adds	r3, #8
 800c16e:	9303      	str	r3, [sp, #12]
 800c170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c172:	4433      	add	r3, r6
 800c174:	9309      	str	r3, [sp, #36]	@ 0x24
 800c176:	e76a      	b.n	800c04e <_svfiprintf_r+0x52>
 800c178:	fb0c 3202 	mla	r2, ip, r2, r3
 800c17c:	460c      	mov	r4, r1
 800c17e:	2001      	movs	r0, #1
 800c180:	e7a8      	b.n	800c0d4 <_svfiprintf_r+0xd8>
 800c182:	2300      	movs	r3, #0
 800c184:	3401      	adds	r4, #1
 800c186:	9305      	str	r3, [sp, #20]
 800c188:	4619      	mov	r1, r3
 800c18a:	f04f 0c0a 	mov.w	ip, #10
 800c18e:	4620      	mov	r0, r4
 800c190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c194:	3a30      	subs	r2, #48	@ 0x30
 800c196:	2a09      	cmp	r2, #9
 800c198:	d903      	bls.n	800c1a2 <_svfiprintf_r+0x1a6>
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d0c6      	beq.n	800c12c <_svfiprintf_r+0x130>
 800c19e:	9105      	str	r1, [sp, #20]
 800c1a0:	e7c4      	b.n	800c12c <_svfiprintf_r+0x130>
 800c1a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e7f0      	b.n	800c18e <_svfiprintf_r+0x192>
 800c1ac:	ab03      	add	r3, sp, #12
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	462a      	mov	r2, r5
 800c1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800c1ec <_svfiprintf_r+0x1f0>)
 800c1b4:	a904      	add	r1, sp, #16
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	f7fd fe98 	bl	8009eec <_printf_float>
 800c1bc:	1c42      	adds	r2, r0, #1
 800c1be:	4606      	mov	r6, r0
 800c1c0:	d1d6      	bne.n	800c170 <_svfiprintf_r+0x174>
 800c1c2:	89ab      	ldrh	r3, [r5, #12]
 800c1c4:	065b      	lsls	r3, r3, #25
 800c1c6:	f53f af2d 	bmi.w	800c024 <_svfiprintf_r+0x28>
 800c1ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1cc:	e72c      	b.n	800c028 <_svfiprintf_r+0x2c>
 800c1ce:	ab03      	add	r3, sp, #12
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	462a      	mov	r2, r5
 800c1d4:	4b05      	ldr	r3, [pc, #20]	@ (800c1ec <_svfiprintf_r+0x1f0>)
 800c1d6:	a904      	add	r1, sp, #16
 800c1d8:	4638      	mov	r0, r7
 800c1da:	f7fe f91f 	bl	800a41c <_printf_i>
 800c1de:	e7ed      	b.n	800c1bc <_svfiprintf_r+0x1c0>
 800c1e0:	0800d020 	.word	0x0800d020
 800c1e4:	0800d02a 	.word	0x0800d02a
 800c1e8:	08009eed 	.word	0x08009eed
 800c1ec:	0800bf45 	.word	0x0800bf45
 800c1f0:	0800d026 	.word	0x0800d026

0800c1f4 <__sflush_r>:
 800c1f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fc:	0716      	lsls	r6, r2, #28
 800c1fe:	4605      	mov	r5, r0
 800c200:	460c      	mov	r4, r1
 800c202:	d454      	bmi.n	800c2ae <__sflush_r+0xba>
 800c204:	684b      	ldr	r3, [r1, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	dc02      	bgt.n	800c210 <__sflush_r+0x1c>
 800c20a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	dd48      	ble.n	800c2a2 <__sflush_r+0xae>
 800c210:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c212:	2e00      	cmp	r6, #0
 800c214:	d045      	beq.n	800c2a2 <__sflush_r+0xae>
 800c216:	2300      	movs	r3, #0
 800c218:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c21c:	682f      	ldr	r7, [r5, #0]
 800c21e:	6a21      	ldr	r1, [r4, #32]
 800c220:	602b      	str	r3, [r5, #0]
 800c222:	d030      	beq.n	800c286 <__sflush_r+0x92>
 800c224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	0759      	lsls	r1, r3, #29
 800c22a:	d505      	bpl.n	800c238 <__sflush_r+0x44>
 800c22c:	6863      	ldr	r3, [r4, #4]
 800c22e:	1ad2      	subs	r2, r2, r3
 800c230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c232:	b10b      	cbz	r3, 800c238 <__sflush_r+0x44>
 800c234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c236:	1ad2      	subs	r2, r2, r3
 800c238:	2300      	movs	r3, #0
 800c23a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c23c:	6a21      	ldr	r1, [r4, #32]
 800c23e:	4628      	mov	r0, r5
 800c240:	47b0      	blx	r6
 800c242:	1c43      	adds	r3, r0, #1
 800c244:	89a3      	ldrh	r3, [r4, #12]
 800c246:	d106      	bne.n	800c256 <__sflush_r+0x62>
 800c248:	6829      	ldr	r1, [r5, #0]
 800c24a:	291d      	cmp	r1, #29
 800c24c:	d82b      	bhi.n	800c2a6 <__sflush_r+0xb2>
 800c24e:	4a2a      	ldr	r2, [pc, #168]	@ (800c2f8 <__sflush_r+0x104>)
 800c250:	410a      	asrs	r2, r1
 800c252:	07d6      	lsls	r6, r2, #31
 800c254:	d427      	bmi.n	800c2a6 <__sflush_r+0xb2>
 800c256:	2200      	movs	r2, #0
 800c258:	6062      	str	r2, [r4, #4]
 800c25a:	04d9      	lsls	r1, r3, #19
 800c25c:	6922      	ldr	r2, [r4, #16]
 800c25e:	6022      	str	r2, [r4, #0]
 800c260:	d504      	bpl.n	800c26c <__sflush_r+0x78>
 800c262:	1c42      	adds	r2, r0, #1
 800c264:	d101      	bne.n	800c26a <__sflush_r+0x76>
 800c266:	682b      	ldr	r3, [r5, #0]
 800c268:	b903      	cbnz	r3, 800c26c <__sflush_r+0x78>
 800c26a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c26e:	602f      	str	r7, [r5, #0]
 800c270:	b1b9      	cbz	r1, 800c2a2 <__sflush_r+0xae>
 800c272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c276:	4299      	cmp	r1, r3
 800c278:	d002      	beq.n	800c280 <__sflush_r+0x8c>
 800c27a:	4628      	mov	r0, r5
 800c27c:	f7ff f9e0 	bl	800b640 <_free_r>
 800c280:	2300      	movs	r3, #0
 800c282:	6363      	str	r3, [r4, #52]	@ 0x34
 800c284:	e00d      	b.n	800c2a2 <__sflush_r+0xae>
 800c286:	2301      	movs	r3, #1
 800c288:	4628      	mov	r0, r5
 800c28a:	47b0      	blx	r6
 800c28c:	4602      	mov	r2, r0
 800c28e:	1c50      	adds	r0, r2, #1
 800c290:	d1c9      	bne.n	800c226 <__sflush_r+0x32>
 800c292:	682b      	ldr	r3, [r5, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d0c6      	beq.n	800c226 <__sflush_r+0x32>
 800c298:	2b1d      	cmp	r3, #29
 800c29a:	d001      	beq.n	800c2a0 <__sflush_r+0xac>
 800c29c:	2b16      	cmp	r3, #22
 800c29e:	d11e      	bne.n	800c2de <__sflush_r+0xea>
 800c2a0:	602f      	str	r7, [r5, #0]
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	e022      	b.n	800c2ec <__sflush_r+0xf8>
 800c2a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2aa:	b21b      	sxth	r3, r3
 800c2ac:	e01b      	b.n	800c2e6 <__sflush_r+0xf2>
 800c2ae:	690f      	ldr	r7, [r1, #16]
 800c2b0:	2f00      	cmp	r7, #0
 800c2b2:	d0f6      	beq.n	800c2a2 <__sflush_r+0xae>
 800c2b4:	0793      	lsls	r3, r2, #30
 800c2b6:	680e      	ldr	r6, [r1, #0]
 800c2b8:	bf08      	it	eq
 800c2ba:	694b      	ldreq	r3, [r1, #20]
 800c2bc:	600f      	str	r7, [r1, #0]
 800c2be:	bf18      	it	ne
 800c2c0:	2300      	movne	r3, #0
 800c2c2:	eba6 0807 	sub.w	r8, r6, r7
 800c2c6:	608b      	str	r3, [r1, #8]
 800c2c8:	f1b8 0f00 	cmp.w	r8, #0
 800c2cc:	dde9      	ble.n	800c2a2 <__sflush_r+0xae>
 800c2ce:	6a21      	ldr	r1, [r4, #32]
 800c2d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c2d2:	4643      	mov	r3, r8
 800c2d4:	463a      	mov	r2, r7
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	47b0      	blx	r6
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	dc08      	bgt.n	800c2f0 <__sflush_r+0xfc>
 800c2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2e6:	81a3      	strh	r3, [r4, #12]
 800c2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f0:	4407      	add	r7, r0
 800c2f2:	eba8 0800 	sub.w	r8, r8, r0
 800c2f6:	e7e7      	b.n	800c2c8 <__sflush_r+0xd4>
 800c2f8:	dfbffffe 	.word	0xdfbffffe

0800c2fc <_fflush_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	690b      	ldr	r3, [r1, #16]
 800c300:	4605      	mov	r5, r0
 800c302:	460c      	mov	r4, r1
 800c304:	b913      	cbnz	r3, 800c30c <_fflush_r+0x10>
 800c306:	2500      	movs	r5, #0
 800c308:	4628      	mov	r0, r5
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	b118      	cbz	r0, 800c316 <_fflush_r+0x1a>
 800c30e:	6a03      	ldr	r3, [r0, #32]
 800c310:	b90b      	cbnz	r3, 800c316 <_fflush_r+0x1a>
 800c312:	f7fe fa2f 	bl	800a774 <__sinit>
 800c316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d0f3      	beq.n	800c306 <_fflush_r+0xa>
 800c31e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c320:	07d0      	lsls	r0, r2, #31
 800c322:	d404      	bmi.n	800c32e <_fflush_r+0x32>
 800c324:	0599      	lsls	r1, r3, #22
 800c326:	d402      	bmi.n	800c32e <_fflush_r+0x32>
 800c328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c32a:	f7fe fb3a 	bl	800a9a2 <__retarget_lock_acquire_recursive>
 800c32e:	4628      	mov	r0, r5
 800c330:	4621      	mov	r1, r4
 800c332:	f7ff ff5f 	bl	800c1f4 <__sflush_r>
 800c336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c338:	07da      	lsls	r2, r3, #31
 800c33a:	4605      	mov	r5, r0
 800c33c:	d4e4      	bmi.n	800c308 <_fflush_r+0xc>
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	059b      	lsls	r3, r3, #22
 800c342:	d4e1      	bmi.n	800c308 <_fflush_r+0xc>
 800c344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c346:	f7fe fb2d 	bl	800a9a4 <__retarget_lock_release_recursive>
 800c34a:	e7dd      	b.n	800c308 <_fflush_r+0xc>

0800c34c <memmove>:
 800c34c:	4288      	cmp	r0, r1
 800c34e:	b510      	push	{r4, lr}
 800c350:	eb01 0402 	add.w	r4, r1, r2
 800c354:	d902      	bls.n	800c35c <memmove+0x10>
 800c356:	4284      	cmp	r4, r0
 800c358:	4623      	mov	r3, r4
 800c35a:	d807      	bhi.n	800c36c <memmove+0x20>
 800c35c:	1e43      	subs	r3, r0, #1
 800c35e:	42a1      	cmp	r1, r4
 800c360:	d008      	beq.n	800c374 <memmove+0x28>
 800c362:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c36a:	e7f8      	b.n	800c35e <memmove+0x12>
 800c36c:	4402      	add	r2, r0
 800c36e:	4601      	mov	r1, r0
 800c370:	428a      	cmp	r2, r1
 800c372:	d100      	bne.n	800c376 <memmove+0x2a>
 800c374:	bd10      	pop	{r4, pc}
 800c376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c37a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c37e:	e7f7      	b.n	800c370 <memmove+0x24>

0800c380 <_sbrk_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4d06      	ldr	r5, [pc, #24]	@ (800c39c <_sbrk_r+0x1c>)
 800c384:	2300      	movs	r3, #0
 800c386:	4604      	mov	r4, r0
 800c388:	4608      	mov	r0, r1
 800c38a:	602b      	str	r3, [r5, #0]
 800c38c:	f7f5 febc 	bl	8002108 <_sbrk>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_sbrk_r+0x1a>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_sbrk_r+0x1a>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	20002238 	.word	0x20002238

0800c3a0 <memcpy>:
 800c3a0:	440a      	add	r2, r1
 800c3a2:	4291      	cmp	r1, r2
 800c3a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3a8:	d100      	bne.n	800c3ac <memcpy+0xc>
 800c3aa:	4770      	bx	lr
 800c3ac:	b510      	push	{r4, lr}
 800c3ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3b6:	4291      	cmp	r1, r2
 800c3b8:	d1f9      	bne.n	800c3ae <memcpy+0xe>
 800c3ba:	bd10      	pop	{r4, pc}

0800c3bc <__assert_func>:
 800c3bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3be:	4614      	mov	r4, r2
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4b09      	ldr	r3, [pc, #36]	@ (800c3e8 <__assert_func+0x2c>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	68d8      	ldr	r0, [r3, #12]
 800c3ca:	b954      	cbnz	r4, 800c3e2 <__assert_func+0x26>
 800c3cc:	4b07      	ldr	r3, [pc, #28]	@ (800c3ec <__assert_func+0x30>)
 800c3ce:	461c      	mov	r4, r3
 800c3d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3d4:	9100      	str	r1, [sp, #0]
 800c3d6:	462b      	mov	r3, r5
 800c3d8:	4905      	ldr	r1, [pc, #20]	@ (800c3f0 <__assert_func+0x34>)
 800c3da:	f000 f86f 	bl	800c4bc <fiprintf>
 800c3de:	f000 f87f 	bl	800c4e0 <abort>
 800c3e2:	4b04      	ldr	r3, [pc, #16]	@ (800c3f4 <__assert_func+0x38>)
 800c3e4:	e7f4      	b.n	800c3d0 <__assert_func+0x14>
 800c3e6:	bf00      	nop
 800c3e8:	20000108 	.word	0x20000108
 800c3ec:	0800d076 	.word	0x0800d076
 800c3f0:	0800d048 	.word	0x0800d048
 800c3f4:	0800d03b 	.word	0x0800d03b

0800c3f8 <_calloc_r>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	fba1 5402 	umull	r5, r4, r1, r2
 800c3fe:	b93c      	cbnz	r4, 800c410 <_calloc_r+0x18>
 800c400:	4629      	mov	r1, r5
 800c402:	f7ff f991 	bl	800b728 <_malloc_r>
 800c406:	4606      	mov	r6, r0
 800c408:	b928      	cbnz	r0, 800c416 <_calloc_r+0x1e>
 800c40a:	2600      	movs	r6, #0
 800c40c:	4630      	mov	r0, r6
 800c40e:	bd70      	pop	{r4, r5, r6, pc}
 800c410:	220c      	movs	r2, #12
 800c412:	6002      	str	r2, [r0, #0]
 800c414:	e7f9      	b.n	800c40a <_calloc_r+0x12>
 800c416:	462a      	mov	r2, r5
 800c418:	4621      	mov	r1, r4
 800c41a:	f7fe fa44 	bl	800a8a6 <memset>
 800c41e:	e7f5      	b.n	800c40c <_calloc_r+0x14>

0800c420 <__ascii_mbtowc>:
 800c420:	b082      	sub	sp, #8
 800c422:	b901      	cbnz	r1, 800c426 <__ascii_mbtowc+0x6>
 800c424:	a901      	add	r1, sp, #4
 800c426:	b142      	cbz	r2, 800c43a <__ascii_mbtowc+0x1a>
 800c428:	b14b      	cbz	r3, 800c43e <__ascii_mbtowc+0x1e>
 800c42a:	7813      	ldrb	r3, [r2, #0]
 800c42c:	600b      	str	r3, [r1, #0]
 800c42e:	7812      	ldrb	r2, [r2, #0]
 800c430:	1e10      	subs	r0, r2, #0
 800c432:	bf18      	it	ne
 800c434:	2001      	movne	r0, #1
 800c436:	b002      	add	sp, #8
 800c438:	4770      	bx	lr
 800c43a:	4610      	mov	r0, r2
 800c43c:	e7fb      	b.n	800c436 <__ascii_mbtowc+0x16>
 800c43e:	f06f 0001 	mvn.w	r0, #1
 800c442:	e7f8      	b.n	800c436 <__ascii_mbtowc+0x16>

0800c444 <_realloc_r>:
 800c444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c448:	4680      	mov	r8, r0
 800c44a:	4615      	mov	r5, r2
 800c44c:	460c      	mov	r4, r1
 800c44e:	b921      	cbnz	r1, 800c45a <_realloc_r+0x16>
 800c450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c454:	4611      	mov	r1, r2
 800c456:	f7ff b967 	b.w	800b728 <_malloc_r>
 800c45a:	b92a      	cbnz	r2, 800c468 <_realloc_r+0x24>
 800c45c:	f7ff f8f0 	bl	800b640 <_free_r>
 800c460:	2400      	movs	r4, #0
 800c462:	4620      	mov	r0, r4
 800c464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c468:	f000 f841 	bl	800c4ee <_malloc_usable_size_r>
 800c46c:	4285      	cmp	r5, r0
 800c46e:	4606      	mov	r6, r0
 800c470:	d802      	bhi.n	800c478 <_realloc_r+0x34>
 800c472:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c476:	d8f4      	bhi.n	800c462 <_realloc_r+0x1e>
 800c478:	4629      	mov	r1, r5
 800c47a:	4640      	mov	r0, r8
 800c47c:	f7ff f954 	bl	800b728 <_malloc_r>
 800c480:	4607      	mov	r7, r0
 800c482:	2800      	cmp	r0, #0
 800c484:	d0ec      	beq.n	800c460 <_realloc_r+0x1c>
 800c486:	42b5      	cmp	r5, r6
 800c488:	462a      	mov	r2, r5
 800c48a:	4621      	mov	r1, r4
 800c48c:	bf28      	it	cs
 800c48e:	4632      	movcs	r2, r6
 800c490:	f7ff ff86 	bl	800c3a0 <memcpy>
 800c494:	4621      	mov	r1, r4
 800c496:	4640      	mov	r0, r8
 800c498:	f7ff f8d2 	bl	800b640 <_free_r>
 800c49c:	463c      	mov	r4, r7
 800c49e:	e7e0      	b.n	800c462 <_realloc_r+0x1e>

0800c4a0 <__ascii_wctomb>:
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	4608      	mov	r0, r1
 800c4a4:	b141      	cbz	r1, 800c4b8 <__ascii_wctomb+0x18>
 800c4a6:	2aff      	cmp	r2, #255	@ 0xff
 800c4a8:	d904      	bls.n	800c4b4 <__ascii_wctomb+0x14>
 800c4aa:	228a      	movs	r2, #138	@ 0x8a
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b2:	4770      	bx	lr
 800c4b4:	700a      	strb	r2, [r1, #0]
 800c4b6:	2001      	movs	r0, #1
 800c4b8:	4770      	bx	lr
	...

0800c4bc <fiprintf>:
 800c4bc:	b40e      	push	{r1, r2, r3}
 800c4be:	b503      	push	{r0, r1, lr}
 800c4c0:	4601      	mov	r1, r0
 800c4c2:	ab03      	add	r3, sp, #12
 800c4c4:	4805      	ldr	r0, [pc, #20]	@ (800c4dc <fiprintf+0x20>)
 800c4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ca:	6800      	ldr	r0, [r0, #0]
 800c4cc:	9301      	str	r3, [sp, #4]
 800c4ce:	f000 f83f 	bl	800c550 <_vfiprintf_r>
 800c4d2:	b002      	add	sp, #8
 800c4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4d8:	b003      	add	sp, #12
 800c4da:	4770      	bx	lr
 800c4dc:	20000108 	.word	0x20000108

0800c4e0 <abort>:
 800c4e0:	b508      	push	{r3, lr}
 800c4e2:	2006      	movs	r0, #6
 800c4e4:	f000 fa08 	bl	800c8f8 <raise>
 800c4e8:	2001      	movs	r0, #1
 800c4ea:	f7f5 fd95 	bl	8002018 <_exit>

0800c4ee <_malloc_usable_size_r>:
 800c4ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f2:	1f18      	subs	r0, r3, #4
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bfbc      	itt	lt
 800c4f8:	580b      	ldrlt	r3, [r1, r0]
 800c4fa:	18c0      	addlt	r0, r0, r3
 800c4fc:	4770      	bx	lr

0800c4fe <__sfputc_r>:
 800c4fe:	6893      	ldr	r3, [r2, #8]
 800c500:	3b01      	subs	r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	b410      	push	{r4}
 800c506:	6093      	str	r3, [r2, #8]
 800c508:	da08      	bge.n	800c51c <__sfputc_r+0x1e>
 800c50a:	6994      	ldr	r4, [r2, #24]
 800c50c:	42a3      	cmp	r3, r4
 800c50e:	db01      	blt.n	800c514 <__sfputc_r+0x16>
 800c510:	290a      	cmp	r1, #10
 800c512:	d103      	bne.n	800c51c <__sfputc_r+0x1e>
 800c514:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c518:	f000 b932 	b.w	800c780 <__swbuf_r>
 800c51c:	6813      	ldr	r3, [r2, #0]
 800c51e:	1c58      	adds	r0, r3, #1
 800c520:	6010      	str	r0, [r2, #0]
 800c522:	7019      	strb	r1, [r3, #0]
 800c524:	4608      	mov	r0, r1
 800c526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <__sfputs_r>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	4606      	mov	r6, r0
 800c530:	460f      	mov	r7, r1
 800c532:	4614      	mov	r4, r2
 800c534:	18d5      	adds	r5, r2, r3
 800c536:	42ac      	cmp	r4, r5
 800c538:	d101      	bne.n	800c53e <__sfputs_r+0x12>
 800c53a:	2000      	movs	r0, #0
 800c53c:	e007      	b.n	800c54e <__sfputs_r+0x22>
 800c53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c542:	463a      	mov	r2, r7
 800c544:	4630      	mov	r0, r6
 800c546:	f7ff ffda 	bl	800c4fe <__sfputc_r>
 800c54a:	1c43      	adds	r3, r0, #1
 800c54c:	d1f3      	bne.n	800c536 <__sfputs_r+0xa>
 800c54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c550 <_vfiprintf_r>:
 800c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	460d      	mov	r5, r1
 800c556:	b09d      	sub	sp, #116	@ 0x74
 800c558:	4614      	mov	r4, r2
 800c55a:	4698      	mov	r8, r3
 800c55c:	4606      	mov	r6, r0
 800c55e:	b118      	cbz	r0, 800c568 <_vfiprintf_r+0x18>
 800c560:	6a03      	ldr	r3, [r0, #32]
 800c562:	b90b      	cbnz	r3, 800c568 <_vfiprintf_r+0x18>
 800c564:	f7fe f906 	bl	800a774 <__sinit>
 800c568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c56a:	07d9      	lsls	r1, r3, #31
 800c56c:	d405      	bmi.n	800c57a <_vfiprintf_r+0x2a>
 800c56e:	89ab      	ldrh	r3, [r5, #12]
 800c570:	059a      	lsls	r2, r3, #22
 800c572:	d402      	bmi.n	800c57a <_vfiprintf_r+0x2a>
 800c574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c576:	f7fe fa14 	bl	800a9a2 <__retarget_lock_acquire_recursive>
 800c57a:	89ab      	ldrh	r3, [r5, #12]
 800c57c:	071b      	lsls	r3, r3, #28
 800c57e:	d501      	bpl.n	800c584 <_vfiprintf_r+0x34>
 800c580:	692b      	ldr	r3, [r5, #16]
 800c582:	b99b      	cbnz	r3, 800c5ac <_vfiprintf_r+0x5c>
 800c584:	4629      	mov	r1, r5
 800c586:	4630      	mov	r0, r6
 800c588:	f000 f938 	bl	800c7fc <__swsetup_r>
 800c58c:	b170      	cbz	r0, 800c5ac <_vfiprintf_r+0x5c>
 800c58e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c590:	07dc      	lsls	r4, r3, #31
 800c592:	d504      	bpl.n	800c59e <_vfiprintf_r+0x4e>
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	b01d      	add	sp, #116	@ 0x74
 800c59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59e:	89ab      	ldrh	r3, [r5, #12]
 800c5a0:	0598      	lsls	r0, r3, #22
 800c5a2:	d4f7      	bmi.n	800c594 <_vfiprintf_r+0x44>
 800c5a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5a6:	f7fe f9fd 	bl	800a9a4 <__retarget_lock_release_recursive>
 800c5aa:	e7f3      	b.n	800c594 <_vfiprintf_r+0x44>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b0:	2320      	movs	r3, #32
 800c5b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ba:	2330      	movs	r3, #48	@ 0x30
 800c5bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c76c <_vfiprintf_r+0x21c>
 800c5c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5c4:	f04f 0901 	mov.w	r9, #1
 800c5c8:	4623      	mov	r3, r4
 800c5ca:	469a      	mov	sl, r3
 800c5cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5d0:	b10a      	cbz	r2, 800c5d6 <_vfiprintf_r+0x86>
 800c5d2:	2a25      	cmp	r2, #37	@ 0x25
 800c5d4:	d1f9      	bne.n	800c5ca <_vfiprintf_r+0x7a>
 800c5d6:	ebba 0b04 	subs.w	fp, sl, r4
 800c5da:	d00b      	beq.n	800c5f4 <_vfiprintf_r+0xa4>
 800c5dc:	465b      	mov	r3, fp
 800c5de:	4622      	mov	r2, r4
 800c5e0:	4629      	mov	r1, r5
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f7ff ffa2 	bl	800c52c <__sfputs_r>
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	f000 80a7 	beq.w	800c73c <_vfiprintf_r+0x1ec>
 800c5ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5f0:	445a      	add	r2, fp
 800c5f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 809f 	beq.w	800c73c <_vfiprintf_r+0x1ec>
 800c5fe:	2300      	movs	r3, #0
 800c600:	f04f 32ff 	mov.w	r2, #4294967295
 800c604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c608:	f10a 0a01 	add.w	sl, sl, #1
 800c60c:	9304      	str	r3, [sp, #16]
 800c60e:	9307      	str	r3, [sp, #28]
 800c610:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c614:	931a      	str	r3, [sp, #104]	@ 0x68
 800c616:	4654      	mov	r4, sl
 800c618:	2205      	movs	r2, #5
 800c61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c61e:	4853      	ldr	r0, [pc, #332]	@ (800c76c <_vfiprintf_r+0x21c>)
 800c620:	f7f3 fdd6 	bl	80001d0 <memchr>
 800c624:	9a04      	ldr	r2, [sp, #16]
 800c626:	b9d8      	cbnz	r0, 800c660 <_vfiprintf_r+0x110>
 800c628:	06d1      	lsls	r1, r2, #27
 800c62a:	bf44      	itt	mi
 800c62c:	2320      	movmi	r3, #32
 800c62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c632:	0713      	lsls	r3, r2, #28
 800c634:	bf44      	itt	mi
 800c636:	232b      	movmi	r3, #43	@ 0x2b
 800c638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c63c:	f89a 3000 	ldrb.w	r3, [sl]
 800c640:	2b2a      	cmp	r3, #42	@ 0x2a
 800c642:	d015      	beq.n	800c670 <_vfiprintf_r+0x120>
 800c644:	9a07      	ldr	r2, [sp, #28]
 800c646:	4654      	mov	r4, sl
 800c648:	2000      	movs	r0, #0
 800c64a:	f04f 0c0a 	mov.w	ip, #10
 800c64e:	4621      	mov	r1, r4
 800c650:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c654:	3b30      	subs	r3, #48	@ 0x30
 800c656:	2b09      	cmp	r3, #9
 800c658:	d94b      	bls.n	800c6f2 <_vfiprintf_r+0x1a2>
 800c65a:	b1b0      	cbz	r0, 800c68a <_vfiprintf_r+0x13a>
 800c65c:	9207      	str	r2, [sp, #28]
 800c65e:	e014      	b.n	800c68a <_vfiprintf_r+0x13a>
 800c660:	eba0 0308 	sub.w	r3, r0, r8
 800c664:	fa09 f303 	lsl.w	r3, r9, r3
 800c668:	4313      	orrs	r3, r2
 800c66a:	9304      	str	r3, [sp, #16]
 800c66c:	46a2      	mov	sl, r4
 800c66e:	e7d2      	b.n	800c616 <_vfiprintf_r+0xc6>
 800c670:	9b03      	ldr	r3, [sp, #12]
 800c672:	1d19      	adds	r1, r3, #4
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	9103      	str	r1, [sp, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	bfbb      	ittet	lt
 800c67c:	425b      	neglt	r3, r3
 800c67e:	f042 0202 	orrlt.w	r2, r2, #2
 800c682:	9307      	strge	r3, [sp, #28]
 800c684:	9307      	strlt	r3, [sp, #28]
 800c686:	bfb8      	it	lt
 800c688:	9204      	strlt	r2, [sp, #16]
 800c68a:	7823      	ldrb	r3, [r4, #0]
 800c68c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c68e:	d10a      	bne.n	800c6a6 <_vfiprintf_r+0x156>
 800c690:	7863      	ldrb	r3, [r4, #1]
 800c692:	2b2a      	cmp	r3, #42	@ 0x2a
 800c694:	d132      	bne.n	800c6fc <_vfiprintf_r+0x1ac>
 800c696:	9b03      	ldr	r3, [sp, #12]
 800c698:	1d1a      	adds	r2, r3, #4
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	9203      	str	r2, [sp, #12]
 800c69e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6a2:	3402      	adds	r4, #2
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c77c <_vfiprintf_r+0x22c>
 800c6aa:	7821      	ldrb	r1, [r4, #0]
 800c6ac:	2203      	movs	r2, #3
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	f7f3 fd8e 	bl	80001d0 <memchr>
 800c6b4:	b138      	cbz	r0, 800c6c6 <_vfiprintf_r+0x176>
 800c6b6:	9b04      	ldr	r3, [sp, #16]
 800c6b8:	eba0 000a 	sub.w	r0, r0, sl
 800c6bc:	2240      	movs	r2, #64	@ 0x40
 800c6be:	4082      	lsls	r2, r0
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	3401      	adds	r4, #1
 800c6c4:	9304      	str	r3, [sp, #16]
 800c6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ca:	4829      	ldr	r0, [pc, #164]	@ (800c770 <_vfiprintf_r+0x220>)
 800c6cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6d0:	2206      	movs	r2, #6
 800c6d2:	f7f3 fd7d 	bl	80001d0 <memchr>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d03f      	beq.n	800c75a <_vfiprintf_r+0x20a>
 800c6da:	4b26      	ldr	r3, [pc, #152]	@ (800c774 <_vfiprintf_r+0x224>)
 800c6dc:	bb1b      	cbnz	r3, 800c726 <_vfiprintf_r+0x1d6>
 800c6de:	9b03      	ldr	r3, [sp, #12]
 800c6e0:	3307      	adds	r3, #7
 800c6e2:	f023 0307 	bic.w	r3, r3, #7
 800c6e6:	3308      	adds	r3, #8
 800c6e8:	9303      	str	r3, [sp, #12]
 800c6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ec:	443b      	add	r3, r7
 800c6ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f0:	e76a      	b.n	800c5c8 <_vfiprintf_r+0x78>
 800c6f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	2001      	movs	r0, #1
 800c6fa:	e7a8      	b.n	800c64e <_vfiprintf_r+0xfe>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	3401      	adds	r4, #1
 800c700:	9305      	str	r3, [sp, #20]
 800c702:	4619      	mov	r1, r3
 800c704:	f04f 0c0a 	mov.w	ip, #10
 800c708:	4620      	mov	r0, r4
 800c70a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c70e:	3a30      	subs	r2, #48	@ 0x30
 800c710:	2a09      	cmp	r2, #9
 800c712:	d903      	bls.n	800c71c <_vfiprintf_r+0x1cc>
 800c714:	2b00      	cmp	r3, #0
 800c716:	d0c6      	beq.n	800c6a6 <_vfiprintf_r+0x156>
 800c718:	9105      	str	r1, [sp, #20]
 800c71a:	e7c4      	b.n	800c6a6 <_vfiprintf_r+0x156>
 800c71c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c720:	4604      	mov	r4, r0
 800c722:	2301      	movs	r3, #1
 800c724:	e7f0      	b.n	800c708 <_vfiprintf_r+0x1b8>
 800c726:	ab03      	add	r3, sp, #12
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	462a      	mov	r2, r5
 800c72c:	4b12      	ldr	r3, [pc, #72]	@ (800c778 <_vfiprintf_r+0x228>)
 800c72e:	a904      	add	r1, sp, #16
 800c730:	4630      	mov	r0, r6
 800c732:	f7fd fbdb 	bl	8009eec <_printf_float>
 800c736:	4607      	mov	r7, r0
 800c738:	1c78      	adds	r0, r7, #1
 800c73a:	d1d6      	bne.n	800c6ea <_vfiprintf_r+0x19a>
 800c73c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c73e:	07d9      	lsls	r1, r3, #31
 800c740:	d405      	bmi.n	800c74e <_vfiprintf_r+0x1fe>
 800c742:	89ab      	ldrh	r3, [r5, #12]
 800c744:	059a      	lsls	r2, r3, #22
 800c746:	d402      	bmi.n	800c74e <_vfiprintf_r+0x1fe>
 800c748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c74a:	f7fe f92b 	bl	800a9a4 <__retarget_lock_release_recursive>
 800c74e:	89ab      	ldrh	r3, [r5, #12]
 800c750:	065b      	lsls	r3, r3, #25
 800c752:	f53f af1f 	bmi.w	800c594 <_vfiprintf_r+0x44>
 800c756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c758:	e71e      	b.n	800c598 <_vfiprintf_r+0x48>
 800c75a:	ab03      	add	r3, sp, #12
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	462a      	mov	r2, r5
 800c760:	4b05      	ldr	r3, [pc, #20]	@ (800c778 <_vfiprintf_r+0x228>)
 800c762:	a904      	add	r1, sp, #16
 800c764:	4630      	mov	r0, r6
 800c766:	f7fd fe59 	bl	800a41c <_printf_i>
 800c76a:	e7e4      	b.n	800c736 <_vfiprintf_r+0x1e6>
 800c76c:	0800d020 	.word	0x0800d020
 800c770:	0800d02a 	.word	0x0800d02a
 800c774:	08009eed 	.word	0x08009eed
 800c778:	0800c52d 	.word	0x0800c52d
 800c77c:	0800d026 	.word	0x0800d026

0800c780 <__swbuf_r>:
 800c780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c782:	460e      	mov	r6, r1
 800c784:	4614      	mov	r4, r2
 800c786:	4605      	mov	r5, r0
 800c788:	b118      	cbz	r0, 800c792 <__swbuf_r+0x12>
 800c78a:	6a03      	ldr	r3, [r0, #32]
 800c78c:	b90b      	cbnz	r3, 800c792 <__swbuf_r+0x12>
 800c78e:	f7fd fff1 	bl	800a774 <__sinit>
 800c792:	69a3      	ldr	r3, [r4, #24]
 800c794:	60a3      	str	r3, [r4, #8]
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	071a      	lsls	r2, r3, #28
 800c79a:	d501      	bpl.n	800c7a0 <__swbuf_r+0x20>
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	b943      	cbnz	r3, 800c7b2 <__swbuf_r+0x32>
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f000 f82a 	bl	800c7fc <__swsetup_r>
 800c7a8:	b118      	cbz	r0, 800c7b2 <__swbuf_r+0x32>
 800c7aa:	f04f 37ff 	mov.w	r7, #4294967295
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	6922      	ldr	r2, [r4, #16]
 800c7b6:	1a98      	subs	r0, r3, r2
 800c7b8:	6963      	ldr	r3, [r4, #20]
 800c7ba:	b2f6      	uxtb	r6, r6
 800c7bc:	4283      	cmp	r3, r0
 800c7be:	4637      	mov	r7, r6
 800c7c0:	dc05      	bgt.n	800c7ce <__swbuf_r+0x4e>
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f7ff fd99 	bl	800c2fc <_fflush_r>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d1ed      	bne.n	800c7aa <__swbuf_r+0x2a>
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	60a3      	str	r3, [r4, #8]
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	6022      	str	r2, [r4, #0]
 800c7da:	701e      	strb	r6, [r3, #0]
 800c7dc:	6962      	ldr	r2, [r4, #20]
 800c7de:	1c43      	adds	r3, r0, #1
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d004      	beq.n	800c7ee <__swbuf_r+0x6e>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	07db      	lsls	r3, r3, #31
 800c7e8:	d5e1      	bpl.n	800c7ae <__swbuf_r+0x2e>
 800c7ea:	2e0a      	cmp	r6, #10
 800c7ec:	d1df      	bne.n	800c7ae <__swbuf_r+0x2e>
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f7ff fd83 	bl	800c2fc <_fflush_r>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0d9      	beq.n	800c7ae <__swbuf_r+0x2e>
 800c7fa:	e7d6      	b.n	800c7aa <__swbuf_r+0x2a>

0800c7fc <__swsetup_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	4b29      	ldr	r3, [pc, #164]	@ (800c8a4 <__swsetup_r+0xa8>)
 800c800:	4605      	mov	r5, r0
 800c802:	6818      	ldr	r0, [r3, #0]
 800c804:	460c      	mov	r4, r1
 800c806:	b118      	cbz	r0, 800c810 <__swsetup_r+0x14>
 800c808:	6a03      	ldr	r3, [r0, #32]
 800c80a:	b90b      	cbnz	r3, 800c810 <__swsetup_r+0x14>
 800c80c:	f7fd ffb2 	bl	800a774 <__sinit>
 800c810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c814:	0719      	lsls	r1, r3, #28
 800c816:	d422      	bmi.n	800c85e <__swsetup_r+0x62>
 800c818:	06da      	lsls	r2, r3, #27
 800c81a:	d407      	bmi.n	800c82c <__swsetup_r+0x30>
 800c81c:	2209      	movs	r2, #9
 800c81e:	602a      	str	r2, [r5, #0]
 800c820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c824:	81a3      	strh	r3, [r4, #12]
 800c826:	f04f 30ff 	mov.w	r0, #4294967295
 800c82a:	e033      	b.n	800c894 <__swsetup_r+0x98>
 800c82c:	0758      	lsls	r0, r3, #29
 800c82e:	d512      	bpl.n	800c856 <__swsetup_r+0x5a>
 800c830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c832:	b141      	cbz	r1, 800c846 <__swsetup_r+0x4a>
 800c834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c838:	4299      	cmp	r1, r3
 800c83a:	d002      	beq.n	800c842 <__swsetup_r+0x46>
 800c83c:	4628      	mov	r0, r5
 800c83e:	f7fe feff 	bl	800b640 <_free_r>
 800c842:	2300      	movs	r3, #0
 800c844:	6363      	str	r3, [r4, #52]	@ 0x34
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c84c:	81a3      	strh	r3, [r4, #12]
 800c84e:	2300      	movs	r3, #0
 800c850:	6063      	str	r3, [r4, #4]
 800c852:	6923      	ldr	r3, [r4, #16]
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	f043 0308 	orr.w	r3, r3, #8
 800c85c:	81a3      	strh	r3, [r4, #12]
 800c85e:	6923      	ldr	r3, [r4, #16]
 800c860:	b94b      	cbnz	r3, 800c876 <__swsetup_r+0x7a>
 800c862:	89a3      	ldrh	r3, [r4, #12]
 800c864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c86c:	d003      	beq.n	800c876 <__swsetup_r+0x7a>
 800c86e:	4621      	mov	r1, r4
 800c870:	4628      	mov	r0, r5
 800c872:	f000 f883 	bl	800c97c <__smakebuf_r>
 800c876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c87a:	f013 0201 	ands.w	r2, r3, #1
 800c87e:	d00a      	beq.n	800c896 <__swsetup_r+0x9a>
 800c880:	2200      	movs	r2, #0
 800c882:	60a2      	str	r2, [r4, #8]
 800c884:	6962      	ldr	r2, [r4, #20]
 800c886:	4252      	negs	r2, r2
 800c888:	61a2      	str	r2, [r4, #24]
 800c88a:	6922      	ldr	r2, [r4, #16]
 800c88c:	b942      	cbnz	r2, 800c8a0 <__swsetup_r+0xa4>
 800c88e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c892:	d1c5      	bne.n	800c820 <__swsetup_r+0x24>
 800c894:	bd38      	pop	{r3, r4, r5, pc}
 800c896:	0799      	lsls	r1, r3, #30
 800c898:	bf58      	it	pl
 800c89a:	6962      	ldrpl	r2, [r4, #20]
 800c89c:	60a2      	str	r2, [r4, #8]
 800c89e:	e7f4      	b.n	800c88a <__swsetup_r+0x8e>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	e7f7      	b.n	800c894 <__swsetup_r+0x98>
 800c8a4:	20000108 	.word	0x20000108

0800c8a8 <_raise_r>:
 800c8a8:	291f      	cmp	r1, #31
 800c8aa:	b538      	push	{r3, r4, r5, lr}
 800c8ac:	4605      	mov	r5, r0
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	d904      	bls.n	800c8bc <_raise_r+0x14>
 800c8b2:	2316      	movs	r3, #22
 800c8b4:	6003      	str	r3, [r0, #0]
 800c8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c8be:	b112      	cbz	r2, 800c8c6 <_raise_r+0x1e>
 800c8c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8c4:	b94b      	cbnz	r3, 800c8da <_raise_r+0x32>
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f000 f830 	bl	800c92c <_getpid_r>
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	4601      	mov	r1, r0
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d6:	f000 b817 	b.w	800c908 <_kill_r>
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d00a      	beq.n	800c8f4 <_raise_r+0x4c>
 800c8de:	1c59      	adds	r1, r3, #1
 800c8e0:	d103      	bne.n	800c8ea <_raise_r+0x42>
 800c8e2:	2316      	movs	r3, #22
 800c8e4:	6003      	str	r3, [r0, #0]
 800c8e6:	2001      	movs	r0, #1
 800c8e8:	e7e7      	b.n	800c8ba <_raise_r+0x12>
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	4798      	blx	r3
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	e7e0      	b.n	800c8ba <_raise_r+0x12>

0800c8f8 <raise>:
 800c8f8:	4b02      	ldr	r3, [pc, #8]	@ (800c904 <raise+0xc>)
 800c8fa:	4601      	mov	r1, r0
 800c8fc:	6818      	ldr	r0, [r3, #0]
 800c8fe:	f7ff bfd3 	b.w	800c8a8 <_raise_r>
 800c902:	bf00      	nop
 800c904:	20000108 	.word	0x20000108

0800c908 <_kill_r>:
 800c908:	b538      	push	{r3, r4, r5, lr}
 800c90a:	4d07      	ldr	r5, [pc, #28]	@ (800c928 <_kill_r+0x20>)
 800c90c:	2300      	movs	r3, #0
 800c90e:	4604      	mov	r4, r0
 800c910:	4608      	mov	r0, r1
 800c912:	4611      	mov	r1, r2
 800c914:	602b      	str	r3, [r5, #0]
 800c916:	f7f5 fb6f 	bl	8001ff8 <_kill>
 800c91a:	1c43      	adds	r3, r0, #1
 800c91c:	d102      	bne.n	800c924 <_kill_r+0x1c>
 800c91e:	682b      	ldr	r3, [r5, #0]
 800c920:	b103      	cbz	r3, 800c924 <_kill_r+0x1c>
 800c922:	6023      	str	r3, [r4, #0]
 800c924:	bd38      	pop	{r3, r4, r5, pc}
 800c926:	bf00      	nop
 800c928:	20002238 	.word	0x20002238

0800c92c <_getpid_r>:
 800c92c:	f7f5 bb5c 	b.w	8001fe8 <_getpid>

0800c930 <__swhatbuf_r>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	460c      	mov	r4, r1
 800c934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c938:	2900      	cmp	r1, #0
 800c93a:	b096      	sub	sp, #88	@ 0x58
 800c93c:	4615      	mov	r5, r2
 800c93e:	461e      	mov	r6, r3
 800c940:	da0d      	bge.n	800c95e <__swhatbuf_r+0x2e>
 800c942:	89a3      	ldrh	r3, [r4, #12]
 800c944:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c948:	f04f 0100 	mov.w	r1, #0
 800c94c:	bf14      	ite	ne
 800c94e:	2340      	movne	r3, #64	@ 0x40
 800c950:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c954:	2000      	movs	r0, #0
 800c956:	6031      	str	r1, [r6, #0]
 800c958:	602b      	str	r3, [r5, #0]
 800c95a:	b016      	add	sp, #88	@ 0x58
 800c95c:	bd70      	pop	{r4, r5, r6, pc}
 800c95e:	466a      	mov	r2, sp
 800c960:	f000 f848 	bl	800c9f4 <_fstat_r>
 800c964:	2800      	cmp	r0, #0
 800c966:	dbec      	blt.n	800c942 <__swhatbuf_r+0x12>
 800c968:	9901      	ldr	r1, [sp, #4]
 800c96a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c96e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c972:	4259      	negs	r1, r3
 800c974:	4159      	adcs	r1, r3
 800c976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c97a:	e7eb      	b.n	800c954 <__swhatbuf_r+0x24>

0800c97c <__smakebuf_r>:
 800c97c:	898b      	ldrh	r3, [r1, #12]
 800c97e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c980:	079d      	lsls	r5, r3, #30
 800c982:	4606      	mov	r6, r0
 800c984:	460c      	mov	r4, r1
 800c986:	d507      	bpl.n	800c998 <__smakebuf_r+0x1c>
 800c988:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	6123      	str	r3, [r4, #16]
 800c990:	2301      	movs	r3, #1
 800c992:	6163      	str	r3, [r4, #20]
 800c994:	b003      	add	sp, #12
 800c996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c998:	ab01      	add	r3, sp, #4
 800c99a:	466a      	mov	r2, sp
 800c99c:	f7ff ffc8 	bl	800c930 <__swhatbuf_r>
 800c9a0:	9f00      	ldr	r7, [sp, #0]
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	f7fe febe 	bl	800b728 <_malloc_r>
 800c9ac:	b948      	cbnz	r0, 800c9c2 <__smakebuf_r+0x46>
 800c9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b2:	059a      	lsls	r2, r3, #22
 800c9b4:	d4ee      	bmi.n	800c994 <__smakebuf_r+0x18>
 800c9b6:	f023 0303 	bic.w	r3, r3, #3
 800c9ba:	f043 0302 	orr.w	r3, r3, #2
 800c9be:	81a3      	strh	r3, [r4, #12]
 800c9c0:	e7e2      	b.n	800c988 <__smakebuf_r+0xc>
 800c9c2:	89a3      	ldrh	r3, [r4, #12]
 800c9c4:	6020      	str	r0, [r4, #0]
 800c9c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ca:	81a3      	strh	r3, [r4, #12]
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c9d2:	b15b      	cbz	r3, 800c9ec <__smakebuf_r+0x70>
 800c9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9d8:	4630      	mov	r0, r6
 800c9da:	f000 f81d 	bl	800ca18 <_isatty_r>
 800c9de:	b128      	cbz	r0, 800c9ec <__smakebuf_r+0x70>
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	f023 0303 	bic.w	r3, r3, #3
 800c9e6:	f043 0301 	orr.w	r3, r3, #1
 800c9ea:	81a3      	strh	r3, [r4, #12]
 800c9ec:	89a3      	ldrh	r3, [r4, #12]
 800c9ee:	431d      	orrs	r5, r3
 800c9f0:	81a5      	strh	r5, [r4, #12]
 800c9f2:	e7cf      	b.n	800c994 <__smakebuf_r+0x18>

0800c9f4 <_fstat_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4d07      	ldr	r5, [pc, #28]	@ (800ca14 <_fstat_r+0x20>)
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	4608      	mov	r0, r1
 800c9fe:	4611      	mov	r1, r2
 800ca00:	602b      	str	r3, [r5, #0]
 800ca02:	f7f5 fb59 	bl	80020b8 <_fstat>
 800ca06:	1c43      	adds	r3, r0, #1
 800ca08:	d102      	bne.n	800ca10 <_fstat_r+0x1c>
 800ca0a:	682b      	ldr	r3, [r5, #0]
 800ca0c:	b103      	cbz	r3, 800ca10 <_fstat_r+0x1c>
 800ca0e:	6023      	str	r3, [r4, #0]
 800ca10:	bd38      	pop	{r3, r4, r5, pc}
 800ca12:	bf00      	nop
 800ca14:	20002238 	.word	0x20002238

0800ca18 <_isatty_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4d06      	ldr	r5, [pc, #24]	@ (800ca34 <_isatty_r+0x1c>)
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	4604      	mov	r4, r0
 800ca20:	4608      	mov	r0, r1
 800ca22:	602b      	str	r3, [r5, #0]
 800ca24:	f7f5 fb58 	bl	80020d8 <_isatty>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d102      	bne.n	800ca32 <_isatty_r+0x1a>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	b103      	cbz	r3, 800ca32 <_isatty_r+0x1a>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	20002238 	.word	0x20002238

0800ca38 <atan2f>:
 800ca38:	f000 b828 	b.w	800ca8c <__ieee754_atan2f>

0800ca3c <sqrtf>:
 800ca3c:	b508      	push	{r3, lr}
 800ca3e:	ed2d 8b02 	vpush	{d8}
 800ca42:	eeb0 8a40 	vmov.f32	s16, s0
 800ca46:	f000 f81e 	bl	800ca86 <__ieee754_sqrtf>
 800ca4a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ca4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca52:	d60c      	bvs.n	800ca6e <sqrtf+0x32>
 800ca54:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ca74 <sqrtf+0x38>
 800ca58:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ca5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca60:	d505      	bpl.n	800ca6e <sqrtf+0x32>
 800ca62:	f7fd ff73 	bl	800a94c <__errno>
 800ca66:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ca6a:	2321      	movs	r3, #33	@ 0x21
 800ca6c:	6003      	str	r3, [r0, #0]
 800ca6e:	ecbd 8b02 	vpop	{d8}
 800ca72:	bd08      	pop	{r3, pc}
 800ca74:	00000000 	.word	0x00000000

0800ca78 <fabsf>:
 800ca78:	ee10 3a10 	vmov	r3, s0
 800ca7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca80:	ee00 3a10 	vmov	s0, r3
 800ca84:	4770      	bx	lr

0800ca86 <__ieee754_sqrtf>:
 800ca86:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ca8a:	4770      	bx	lr

0800ca8c <__ieee754_atan2f>:
 800ca8c:	ee10 2a90 	vmov	r2, s1
 800ca90:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ca94:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	eef0 7a40 	vmov.f32	s15, s0
 800ca9e:	d806      	bhi.n	800caae <__ieee754_atan2f+0x22>
 800caa0:	ee10 0a10 	vmov	r0, s0
 800caa4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800caa8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800caac:	d904      	bls.n	800cab8 <__ieee754_atan2f+0x2c>
 800caae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cab2:	eeb0 0a67 	vmov.f32	s0, s15
 800cab6:	bd10      	pop	{r4, pc}
 800cab8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800cabc:	d103      	bne.n	800cac6 <__ieee754_atan2f+0x3a>
 800cabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac2:	f000 b883 	b.w	800cbcc <atanf>
 800cac6:	1794      	asrs	r4, r2, #30
 800cac8:	f004 0402 	and.w	r4, r4, #2
 800cacc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800cad0:	b943      	cbnz	r3, 800cae4 <__ieee754_atan2f+0x58>
 800cad2:	2c02      	cmp	r4, #2
 800cad4:	d05e      	beq.n	800cb94 <__ieee754_atan2f+0x108>
 800cad6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800cba8 <__ieee754_atan2f+0x11c>
 800cada:	2c03      	cmp	r4, #3
 800cadc:	bf08      	it	eq
 800cade:	eef0 7a47 	vmoveq.f32	s15, s14
 800cae2:	e7e6      	b.n	800cab2 <__ieee754_atan2f+0x26>
 800cae4:	b941      	cbnz	r1, 800caf8 <__ieee754_atan2f+0x6c>
 800cae6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800cbac <__ieee754_atan2f+0x120>
 800caea:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800cbb0 <__ieee754_atan2f+0x124>
 800caee:	2800      	cmp	r0, #0
 800caf0:	bfb8      	it	lt
 800caf2:	eef0 7a47 	vmovlt.f32	s15, s14
 800caf6:	e7dc      	b.n	800cab2 <__ieee754_atan2f+0x26>
 800caf8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cafc:	d110      	bne.n	800cb20 <__ieee754_atan2f+0x94>
 800cafe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb02:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb06:	d107      	bne.n	800cb18 <__ieee754_atan2f+0x8c>
 800cb08:	2c02      	cmp	r4, #2
 800cb0a:	d846      	bhi.n	800cb9a <__ieee754_atan2f+0x10e>
 800cb0c:	4b29      	ldr	r3, [pc, #164]	@ (800cbb4 <__ieee754_atan2f+0x128>)
 800cb0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cb12:	edd3 7a00 	vldr	s15, [r3]
 800cb16:	e7cc      	b.n	800cab2 <__ieee754_atan2f+0x26>
 800cb18:	2c02      	cmp	r4, #2
 800cb1a:	d841      	bhi.n	800cba0 <__ieee754_atan2f+0x114>
 800cb1c:	4b26      	ldr	r3, [pc, #152]	@ (800cbb8 <__ieee754_atan2f+0x12c>)
 800cb1e:	e7f6      	b.n	800cb0e <__ieee754_atan2f+0x82>
 800cb20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb24:	d0df      	beq.n	800cae6 <__ieee754_atan2f+0x5a>
 800cb26:	1a5b      	subs	r3, r3, r1
 800cb28:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800cb2c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800cb30:	da1a      	bge.n	800cb68 <__ieee754_atan2f+0xdc>
 800cb32:	2a00      	cmp	r2, #0
 800cb34:	da01      	bge.n	800cb3a <__ieee754_atan2f+0xae>
 800cb36:	313c      	adds	r1, #60	@ 0x3c
 800cb38:	db19      	blt.n	800cb6e <__ieee754_atan2f+0xe2>
 800cb3a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800cb3e:	f7ff ff9b 	bl	800ca78 <fabsf>
 800cb42:	f000 f843 	bl	800cbcc <atanf>
 800cb46:	eef0 7a40 	vmov.f32	s15, s0
 800cb4a:	2c01      	cmp	r4, #1
 800cb4c:	d012      	beq.n	800cb74 <__ieee754_atan2f+0xe8>
 800cb4e:	2c02      	cmp	r4, #2
 800cb50:	d017      	beq.n	800cb82 <__ieee754_atan2f+0xf6>
 800cb52:	2c00      	cmp	r4, #0
 800cb54:	d0ad      	beq.n	800cab2 <__ieee754_atan2f+0x26>
 800cb56:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800cbbc <__ieee754_atan2f+0x130>
 800cb5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb5e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800cbc0 <__ieee754_atan2f+0x134>
 800cb62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb66:	e7a4      	b.n	800cab2 <__ieee754_atan2f+0x26>
 800cb68:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800cbac <__ieee754_atan2f+0x120>
 800cb6c:	e7ed      	b.n	800cb4a <__ieee754_atan2f+0xbe>
 800cb6e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cbc4 <__ieee754_atan2f+0x138>
 800cb72:	e7ea      	b.n	800cb4a <__ieee754_atan2f+0xbe>
 800cb74:	ee17 3a90 	vmov	r3, s15
 800cb78:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cb7c:	ee07 3a90 	vmov	s15, r3
 800cb80:	e797      	b.n	800cab2 <__ieee754_atan2f+0x26>
 800cb82:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800cbbc <__ieee754_atan2f+0x130>
 800cb86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb8a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800cbc0 <__ieee754_atan2f+0x134>
 800cb8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb92:	e78e      	b.n	800cab2 <__ieee754_atan2f+0x26>
 800cb94:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800cbc0 <__ieee754_atan2f+0x134>
 800cb98:	e78b      	b.n	800cab2 <__ieee754_atan2f+0x26>
 800cb9a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800cbc8 <__ieee754_atan2f+0x13c>
 800cb9e:	e788      	b.n	800cab2 <__ieee754_atan2f+0x26>
 800cba0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cbc4 <__ieee754_atan2f+0x138>
 800cba4:	e785      	b.n	800cab2 <__ieee754_atan2f+0x26>
 800cba6:	bf00      	nop
 800cba8:	c0490fdb 	.word	0xc0490fdb
 800cbac:	3fc90fdb 	.word	0x3fc90fdb
 800cbb0:	bfc90fdb 	.word	0xbfc90fdb
 800cbb4:	0800d184 	.word	0x0800d184
 800cbb8:	0800d178 	.word	0x0800d178
 800cbbc:	33bbbd2e 	.word	0x33bbbd2e
 800cbc0:	40490fdb 	.word	0x40490fdb
 800cbc4:	00000000 	.word	0x00000000
 800cbc8:	3f490fdb 	.word	0x3f490fdb

0800cbcc <atanf>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	ee10 5a10 	vmov	r5, s0
 800cbd2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800cbd6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800cbda:	eef0 7a40 	vmov.f32	s15, s0
 800cbde:	d310      	bcc.n	800cc02 <atanf+0x36>
 800cbe0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800cbe4:	d904      	bls.n	800cbf0 <atanf+0x24>
 800cbe6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cbea:	eeb0 0a67 	vmov.f32	s0, s15
 800cbee:	bd38      	pop	{r3, r4, r5, pc}
 800cbf0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800cd28 <atanf+0x15c>
 800cbf4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800cd2c <atanf+0x160>
 800cbf8:	2d00      	cmp	r5, #0
 800cbfa:	bfc8      	it	gt
 800cbfc:	eef0 7a47 	vmovgt.f32	s15, s14
 800cc00:	e7f3      	b.n	800cbea <atanf+0x1e>
 800cc02:	4b4b      	ldr	r3, [pc, #300]	@ (800cd30 <atanf+0x164>)
 800cc04:	429c      	cmp	r4, r3
 800cc06:	d810      	bhi.n	800cc2a <atanf+0x5e>
 800cc08:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800cc0c:	d20a      	bcs.n	800cc24 <atanf+0x58>
 800cc0e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800cd34 <atanf+0x168>
 800cc12:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cc16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc1a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc22:	dce2      	bgt.n	800cbea <atanf+0x1e>
 800cc24:	f04f 33ff 	mov.w	r3, #4294967295
 800cc28:	e013      	b.n	800cc52 <atanf+0x86>
 800cc2a:	f7ff ff25 	bl	800ca78 <fabsf>
 800cc2e:	4b42      	ldr	r3, [pc, #264]	@ (800cd38 <atanf+0x16c>)
 800cc30:	429c      	cmp	r4, r3
 800cc32:	d84f      	bhi.n	800ccd4 <atanf+0x108>
 800cc34:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800cc38:	429c      	cmp	r4, r3
 800cc3a:	d841      	bhi.n	800ccc0 <atanf+0xf4>
 800cc3c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cc40:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cc44:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cc48:	2300      	movs	r3, #0
 800cc4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cc58:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800cd3c <atanf+0x170>
 800cc5c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800cd40 <atanf+0x174>
 800cc60:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800cd44 <atanf+0x178>
 800cc64:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cc68:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cc6c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800cd48 <atanf+0x17c>
 800cc70:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cc74:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800cd4c <atanf+0x180>
 800cc78:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cc7c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800cd50 <atanf+0x184>
 800cc80:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cc84:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800cd54 <atanf+0x188>
 800cc88:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cc8c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800cd58 <atanf+0x18c>
 800cc90:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cc94:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800cd5c <atanf+0x190>
 800cc98:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cc9c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800cd60 <atanf+0x194>
 800cca0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cca4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800cd64 <atanf+0x198>
 800cca8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ccac:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ccb0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ccb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ccb8:	d121      	bne.n	800ccfe <atanf+0x132>
 800ccba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccbe:	e794      	b.n	800cbea <atanf+0x1e>
 800ccc0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ccc4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ccc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cccc:	2301      	movs	r3, #1
 800ccce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ccd2:	e7be      	b.n	800cc52 <atanf+0x86>
 800ccd4:	4b24      	ldr	r3, [pc, #144]	@ (800cd68 <atanf+0x19c>)
 800ccd6:	429c      	cmp	r4, r3
 800ccd8:	d80b      	bhi.n	800ccf2 <atanf+0x126>
 800ccda:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ccde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cce2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cce6:	2302      	movs	r3, #2
 800cce8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ccec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccf0:	e7af      	b.n	800cc52 <atanf+0x86>
 800ccf2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ccf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	e7a9      	b.n	800cc52 <atanf+0x86>
 800ccfe:	4a1b      	ldr	r2, [pc, #108]	@ (800cd6c <atanf+0x1a0>)
 800cd00:	491b      	ldr	r1, [pc, #108]	@ (800cd70 <atanf+0x1a4>)
 800cd02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cd06:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cd0a:	edd3 6a00 	vldr	s13, [r3]
 800cd0e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cd12:	2d00      	cmp	r5, #0
 800cd14:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd18:	edd2 7a00 	vldr	s15, [r2]
 800cd1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd20:	bfb8      	it	lt
 800cd22:	eef1 7a67 	vneglt.f32	s15, s15
 800cd26:	e760      	b.n	800cbea <atanf+0x1e>
 800cd28:	bfc90fdb 	.word	0xbfc90fdb
 800cd2c:	3fc90fdb 	.word	0x3fc90fdb
 800cd30:	3edfffff 	.word	0x3edfffff
 800cd34:	7149f2ca 	.word	0x7149f2ca
 800cd38:	3f97ffff 	.word	0x3f97ffff
 800cd3c:	3c8569d7 	.word	0x3c8569d7
 800cd40:	3d4bda59 	.word	0x3d4bda59
 800cd44:	bd6ef16b 	.word	0xbd6ef16b
 800cd48:	3d886b35 	.word	0x3d886b35
 800cd4c:	3dba2e6e 	.word	0x3dba2e6e
 800cd50:	3e124925 	.word	0x3e124925
 800cd54:	3eaaaaab 	.word	0x3eaaaaab
 800cd58:	bd15a221 	.word	0xbd15a221
 800cd5c:	bd9d8795 	.word	0xbd9d8795
 800cd60:	bde38e38 	.word	0xbde38e38
 800cd64:	be4ccccd 	.word	0xbe4ccccd
 800cd68:	401bffff 	.word	0x401bffff
 800cd6c:	0800d1a0 	.word	0x0800d1a0
 800cd70:	0800d190 	.word	0x0800d190

0800cd74 <_init>:
 800cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd76:	bf00      	nop
 800cd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7a:	bc08      	pop	{r3}
 800cd7c:	469e      	mov	lr, r3
 800cd7e:	4770      	bx	lr

0800cd80 <_fini>:
 800cd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd82:	bf00      	nop
 800cd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd86:	bc08      	pop	{r3}
 800cd88:	469e      	mov	lr, r3
 800cd8a:	4770      	bx	lr
