
Read_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c518  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800c6a8  0800c6a8  0000d6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cae8  0800cae8  0000e2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cae8  0800cae8  0000dae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800caf0  0800caf0  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800caf0  0800caf0  0000daf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800caf4  0800caf4  0000daf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800caf8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e2c4  2**0
                  CONTENTS
 10 .bss          00001f3c  200002c4  200002c4  0000e2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002200  20002200  0000e2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121ec  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035bf  00000000  00000000  000204e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00023aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b63  00000000  00000000  000249f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223ba  00000000  00000000  00025553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000142be  00000000  00000000  0004790d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd877  00000000  00000000  0005bbcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119442  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ee4  00000000  00000000  00119488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0011e36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c690 	.word	0x0800c690

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800c690 	.word	0x0800c690

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6a3a      	ldr	r2, [r7, #32]
 8000ebc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000ec2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6858      	ldr	r0, [r3, #4]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	899b      	ldrh	r3, [r3, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f001 fea0 	bl	8002c24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f001 f839 	bl	8001f5c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6858      	ldr	r0, [r3, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	899b      	ldrh	r3, [r3, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f001 fe95 	bl	8002c24 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000efa:	2032      	movs	r0, #50	@ 0x32
 8000efc:	f001 f82e 	bl	8001f5c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000f00:	22b6      	movs	r2, #182	@ 0xb6
 8000f02:	217e      	movs	r1, #126	@ 0x7e
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 f991 	bl	800122c <BMI088_WriteAccRegister>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	4413      	add	r3, r2
 8000f12:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000f14:	2032      	movs	r0, #50	@ 0x32
 8000f16:	f001 f821 	bl	8001f5c <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8000f1a:	f107 0316 	add.w	r3, r7, #22
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 f908 	bl	8001138 <BMI088_ReadAccRegister>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	4413      	add	r3, r2
 8000f30:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000f32:	200a      	movs	r0, #10
 8000f34:	f001 f812 	bl	8001f5c <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000f38:	22a8      	movs	r2, #168	@ 0xa8
 8000f3a:	2140      	movs	r1, #64	@ 0x40
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f000 f975 	bl	800122c <BMI088_WriteAccRegister>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	4413      	add	r3, r2
 8000f4a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f001 f805 	bl	8001f5c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8000f52:	2200      	movs	r2, #0
 8000f54:	2141      	movs	r1, #65	@ 0x41
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f000 f968 	bl	800122c <BMI088_WriteAccRegister>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	4413      	add	r3, r2
 8000f64:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f000 fff8 	bl	8001f5c <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	2153      	movs	r1, #83	@ 0x53
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 f95b 	bl	800122c <BMI088_WriteAccRegister>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f000 ffeb 	bl	8001f5c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000f86:	2204      	movs	r2, #4
 8000f88:	2158      	movs	r1, #88	@ 0x58
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 f94e 	bl	800122c <BMI088_WriteAccRegister>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	4413      	add	r3, r2
 8000f98:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f000 ffde 	bl	8001f5c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	217c      	movs	r1, #124	@ 0x7c
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f941 	bl	800122c <BMI088_WriteAccRegister>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f000 ffd1 	bl	8001f5c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000fba:	2204      	movs	r2, #4
 8000fbc:	217d      	movs	r1, #125	@ 0x7d
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f934 	bl	800122c <BMI088_WriteAccRegister>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	4413      	add	r3, r2
 8000fcc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f000 ffc4 	bl	8001f5c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4a3a      	ldr	r2, [pc, #232]	@ (80010c0 <BMI088_Init+0x228>)
 8000fd8:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2292      	movs	r2, #146	@ 0x92
 8000fde:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6898      	ldr	r0, [r3, #8]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	89db      	ldrh	r3, [r3, #14]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	f001 fe1a 	bl	8002c24 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8000ff0:	22b6      	movs	r2, #182	@ 0xb6
 8000ff2:	2114      	movs	r1, #20
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f953 	bl	80012a0 <BMI088_WriteGyrRegister>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	4413      	add	r3, r2
 8001002:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8001004:	20fa      	movs	r0, #250	@ 0xfa
 8001006:	f000 ffa9 	bl	8001f5c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 800100a:	f107 0316 	add.w	r3, r7, #22
 800100e:	461a      	mov	r2, r3
 8001010:	2100      	movs	r1, #0
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 f8ce 	bl	80011b4 <BMI088_ReadGyrRegister>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	4413      	add	r3, r2
 8001020:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 8001022:	200a      	movs	r0, #10
 8001024:	f000 ff9a 	bl	8001f5c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8001028:	2201      	movs	r2, #1
 800102a:	210f      	movs	r1, #15
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f937 	bl	80012a0 <BMI088_WriteGyrRegister>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	4413      	add	r3, r2
 800103a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800103c:	200a      	movs	r0, #10
 800103e:	f000 ff8d 	bl	8001f5c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 8001042:	2207      	movs	r2, #7
 8001044:	2110      	movs	r1, #16
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f000 f92a 	bl	80012a0 <BMI088_WriteGyrRegister>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	4413      	add	r3, r2
 8001054:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001056:	200a      	movs	r0, #10
 8001058:	f000 ff80 	bl	8001f5c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 800105c:	2280      	movs	r2, #128	@ 0x80
 800105e:	2115      	movs	r1, #21
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f91d 	bl	80012a0 <BMI088_WriteGyrRegister>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	4413      	add	r3, r2
 800106e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f000 ff73 	bl	8001f5c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001076:	2201      	movs	r2, #1
 8001078:	2116      	movs	r1, #22
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 f910 	bl	80012a0 <BMI088_WriteGyrRegister>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	4413      	add	r3, r2
 8001088:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800108a:	200a      	movs	r0, #10
 800108c:	f000 ff66 	bl	8001f5c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8001090:	2201      	movs	r2, #1
 8001092:	2118      	movs	r1, #24
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f903 	bl	80012a0 <BMI088_WriteGyrRegister>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	4413      	add	r3, r2
 80010a2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 ff59 	bl	8001f5c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <BMI088_Init+0x22c>)
 80010ae:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2282      	movs	r2, #130	@ 0x82
 80010b4:	769a      	strb	r2, [r3, #26]

	return status;
 80010b6:	7dfb      	ldrb	r3, [r7, #23]

}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	3a6b70a4 	.word	0x3a6b70a4
 80010c4:	3a0ba058 	.word	0x3a0ba058

080010c8 <BMI088_InitCalibration>:

/* FUNCTION TO FIND OFFSETS OF THE GYROSCOPE AND ACCELEROMETER DUE TO IMPERFECTIONS OF THE SENSORS */
void BMI088_InitCalibration(BMI088 *imu, uint8_t caliLength)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0a2      	sub	sp, #136	@ 0x88
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	LED_Control(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);	// This led ON indicate that the sensor doesn't has to move.
 80010d4:	2201      	movs	r2, #1
 80010d6:	2110      	movs	r1, #16
 80010d8:	4815      	ldr	r0, [pc, #84]	@ (8001130 <BMI088_InitCalibration+0x68>)
 80010da:	f000 fa3b 	bl	8001554 <LED_Control>

	HAL_Delay(1000);
 80010de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e2:	f000 ff3b 	bl	8001f5c <HAL_Delay>

	char txBuf[128];

	sprintf(txBuf, "Calibration, don't move the sensor\n\r");
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4912      	ldr	r1, [pc, #72]	@ (8001134 <BMI088_InitCalibration+0x6c>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f009 f9a3 	bl	800a438 <siprintf>
	while (CDC_Transmit_FS((uint8_t *)txBuf, strlen(txBuf)) == USBD_BUSY) {}
 80010f2:	bf00      	nop
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f8b9 	bl	8000270 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f008 f81f 	bl	800914c <CDC_Transmit_FS>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d0ef      	beq.n	80010f4 <BMI088_InitCalibration+0x2c>




	LED_Control(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  // Calibration ended
 8001114:	2200      	movs	r2, #0
 8001116:	2110      	movs	r1, #16
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <BMI088_InitCalibration+0x68>)
 800111a:	f000 fa1b 	bl	8001554 <LED_Control>

	HAL_Delay(1000);
 800111e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001122:	f000 ff1b 	bl	8001f5c <HAL_Delay>



}
 8001126:	bf00      	nop
 8001128:	3788      	adds	r7, #136	@ 0x88
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40020400 	.word	0x40020400
 8001134:	0800c6a8 	.word	0x0800c6a8

08001138 <BMI088_ReadAccRegister>:
 *
 */


/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	460b      	mov	r3, r1
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8001146:	7afb      	ldrb	r3, [r7, #11]
 8001148:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800114c:	b2db      	uxtb	r3, r3
 800114e:	753b      	strb	r3, [r7, #20]
 8001150:	2300      	movs	r3, #0
 8001152:	757b      	strb	r3, [r7, #21]
 8001154:	2300      	movs	r3, #0
 8001156:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6858      	ldr	r0, [r3, #4]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	899b      	ldrh	r3, [r3, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	f001 fd5e 	bl	8002c24 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	f107 0210 	add.w	r2, r7, #16
 8001170:	f107 0114 	add.w	r1, r7, #20
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2303      	movs	r3, #3
 800117c:	f003 fe11 	bl	8004da2 <HAL_SPI_TransmitReceive>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	bf0c      	ite	eq
 8001186:	2301      	moveq	r3, #1
 8001188:	2300      	movne	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6858      	ldr	r0, [r3, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	899b      	ldrh	r3, [r3, #12]
 8001196:	2201      	movs	r2, #1
 8001198:	4619      	mov	r1, r3
 800119a:	f001 fd43 	bl	8002c24 <HAL_GPIO_WritePin>

	if (status == 1) {
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d102      	bne.n	80011aa <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 80011a4:	7cba      	ldrb	r2, [r7, #18]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80011aa:	7dfb      	ldrb	r3, [r7, #23]

}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	460b      	mov	r3, r1
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	753b      	strb	r3, [r7, #20]
 80011cc:	2300      	movs	r3, #0
 80011ce:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6898      	ldr	r0, [r3, #8]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	89db      	ldrh	r3, [r3, #14]
 80011d8:	2200      	movs	r2, #0
 80011da:	4619      	mov	r1, r3
 80011dc:	f001 fd22 	bl	8002c24 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	f107 0210 	add.w	r2, r7, #16
 80011e8:	f107 0114 	add.w	r1, r7, #20
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2302      	movs	r3, #2
 80011f4:	f003 fdd5 	bl	8004da2 <HAL_SPI_TransmitReceive>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6898      	ldr	r0, [r3, #8]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	89db      	ldrh	r3, [r3, #14]
 800120e:	2201      	movs	r2, #1
 8001210:	4619      	mov	r1, r3
 8001212:	f001 fd07 	bl	8002c24 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d102      	bne.n	8001222 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 800121c:	7c7a      	ldrb	r2, [r7, #17]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8001222:	7dfb      	ldrb	r3, [r7, #23]

}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
 8001238:	4613      	mov	r3, r2
 800123a:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	733b      	strb	r3, [r7, #12]
 8001240:	78bb      	ldrb	r3, [r7, #2]
 8001242:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6858      	ldr	r0, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	899b      	ldrh	r3, [r3, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	f001 fce8 	bl	8002c24 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	f107 010c 	add.w	r1, r7, #12
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	2202      	movs	r2, #2
 8001262:	f003 fc5a 	bl	8004b1a <HAL_SPI_Transmit>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf0c      	ite	eq
 800126c:	2301      	moveq	r3, #1
 800126e:	2300      	movne	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001274:	bf00      	nop
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f004 f952 	bl	8005524 <HAL_SPI_GetState>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d1f7      	bne.n	8001276 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6858      	ldr	r0, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	899b      	ldrh	r3, [r3, #12]
 800128e:	2201      	movs	r2, #1
 8001290:	4619      	mov	r1, r3
 8001292:	f001 fcc7 	bl	8002c24 <HAL_GPIO_WritePin>

	return status;
 8001296:	7bfb      	ldrb	r3, [r7, #15]

}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
 80012ac:	4613      	mov	r3, r2
 80012ae:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	733b      	strb	r3, [r7, #12]
 80012b4:	78bb      	ldrb	r3, [r7, #2]
 80012b6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6898      	ldr	r0, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	89db      	ldrh	r3, [r3, #14]
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	f001 fcae 	bl	8002c24 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	f107 010c 	add.w	r1, r7, #12
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	2202      	movs	r2, #2
 80012d6:	f003 fc20 	bl	8004b1a <HAL_SPI_Transmit>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80012e8:	bf00      	nop
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 f918 	bl	8005524 <HAL_SPI_GetState>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d1f7      	bne.n	80012ea <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6898      	ldr	r0, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	89db      	ldrh	r3, [r3, #14]
 8001302:	2201      	movs	r2, #1
 8001304:	4619      	mov	r1, r3
 8001306:	f001 fc8d 	bl	8002c24 <HAL_GPIO_WritePin>

	return status;
 800130a:	7bfb      	ldrb	r3, [r7, #15]

}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6858      	ldr	r0, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	899b      	ldrh	r3, [r3, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	f001 fc7c 	bl	8002c24 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f103 0112 	add.w	r1, r3, #18
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800133c:	2308      	movs	r3, #8
 800133e:	f003 fed9 	bl	80050f4 <HAL_SPI_TransmitReceive_DMA>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d104      	bne.n	8001352 <BMI088_ReadAccelerometerDMA+0x3e>

		imu->readingAcc = 1;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	741a      	strb	r2, [r3, #16]
		return 1;
 800134e:	2301      	movs	r3, #1
 8001350:	e008      	b.n	8001364 <BMI088_ReadAccelerometerDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6858      	ldr	r0, [r3, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	899b      	ldrh	r3, [r3, #12]
 800135a:	2201      	movs	r2, #1
 800135c:	4619      	mov	r1, r3
 800135e:	f001 fc61 	bl	8002c24 <HAL_GPIO_WritePin>
		return 0;
 8001362:	2300      	movs	r3, #0

	}

}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6858      	ldr	r0, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	899b      	ldrh	r3, [r3, #12]
 800137c:	2201      	movs	r2, #1
 800137e:	4619      	mov	r1, r3
 8001380:	f001 fc50 	bl	8002c24 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001390:	b2db      	uxtb	r3, r3
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	b21a      	sxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800139c:	b2db      	uxtb	r3, r3
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80013de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80013fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001416:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6898      	ldr	r0, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	89db      	ldrh	r3, [r3, #14]
 8001444:	2200      	movs	r2, #0
 8001446:	4619      	mov	r1, r3
 8001448:	f001 fbec 	bl	8002c24 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f103 011a 	add.w	r1, r3, #26
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800145c:	2307      	movs	r3, #7
 800145e:	f003 fe49 	bl	80050f4 <HAL_SPI_TransmitReceive_DMA>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <BMI088_ReadGyroscopeDMA+0x3e>

		imu->readingGyr = 1;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	745a      	strb	r2, [r3, #17]
		return 1;
 800146e:	2301      	movs	r3, #1
 8001470:	e008      	b.n	8001484 <BMI088_ReadGyroscopeDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6898      	ldr	r0, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	89db      	ldrh	r3, [r3, #14]
 800147a:	2201      	movs	r2, #1
 800147c:	4619      	mov	r1, r3
 800147e:	f001 fbd1 	bl	8002c24 <HAL_GPIO_WritePin>
		return 0;
 8001482:	2300      	movs	r3, #0

	}

}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6898      	ldr	r0, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	89db      	ldrh	r3, [r3, #14]
 800149c:	2201      	movs	r2, #1
 800149e:	4619      	mov	r1, r3
 80014a0:	f001 fbc0 	bl	8002c24 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800151a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001536:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <LED_Control>:
/* USER CODE BEGIN 0 */
char logBuf[128];


void LED_Control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState state)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
    if (state != 0)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <LED_Control+0x24>
    {
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);  // Switch ON the led
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	2201      	movs	r2, #1
 800156e:	4619      	mov	r1, r3
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f001 fb57 	bl	8002c24 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);  // Switch OFF the led
    }
}
 8001576:	e005      	b.n	8001584 <LED_Control+0x30>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);  // Switch OFF the led
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f001 fb50 	bl	8002c24 <HAL_GPIO_WritePin>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   // we have an interrupt
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	2b04      	cmp	r3, #4
 800159a:	d103      	bne.n	80015a4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		// we check if the interrupt pin is the accelerometer one
		BMI088_ReadAccelerometerDMA(&imu);	// if yes read from the DMA memory
 800159c:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 800159e:	f7ff feb9 	bl	8001314 <BMI088_ReadAccelerometerDMA>
	else if(GPIO_Pin == INT_GYR_Pin)
	{
		// we check if the interrupt pin is the gyroscope one
		BMI088_ReadGyroscopeDMA(&imu);
	}
}
 80015a2:	e005      	b.n	80015b0 <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == INT_GYR_Pin)
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d102      	bne.n	80015b0 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 80015aa:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80015ac:	f7ff ff42 	bl	8001434 <BMI088_ReadGyroscopeDMA>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200003f8 	.word	0x200003f8

080015bc <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)		// It tells us that the transfer has been completed
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)		// Check if it is the correct SPI (we want SPI1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <HAL_SPI_TxRxCpltCallback+0x38>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d10d      	bne.n	80015ea <HAL_SPI_TxRxCpltCallback+0x2e>
	{
		if (imu.readingAcc)
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80015d0:	7c1b      	ldrb	r3, [r3, #16]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <HAL_SPI_TxRxCpltCallback+0x20>
		{
			BMI088_ReadAccelerometerDMA_Complete(&imu);
 80015d6:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80015d8:	f7ff fec8 	bl	800136c <BMI088_ReadAccelerometerDMA_Complete>
		}

		if (imu.readingGyr)
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80015de:	7c5b      	ldrb	r3, [r3, #17]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <HAL_SPI_TxRxCpltCallback+0x2e>
		{
			BMI088_ReadGyroscopeDMA_Complete(&imu);
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80015e6:	f7ff ff51 	bl	800148c <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40013000 	.word	0x40013000
 80015f8:	200003f8 	.word	0x200003f8

080015fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001600:	b090      	sub	sp, #64	@ 0x40
 8001602:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001604:	f000 fc38 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f87c 	bl	8001704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f000 f942 	bl	8001894 <MX_GPIO_Init>
  MX_DMA_Init();
 8001610:	f000 f918 	bl	8001844 <MX_DMA_Init>
  MX_SPI1_Init();
 8001614:	f000 f8e0 	bl	80017d8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001618:	f007 fcda 	bl	8008fd0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //Init_BMI088();


  BMI088_Init(&imu, &hspi1, GPIOA, GPIO_PIN_4, GPIOC, GPIO_PIN_4);
 800161c:	2310      	movs	r3, #16
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <main+0xf0>)
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2310      	movs	r3, #16
 8001626:	4a32      	ldr	r2, [pc, #200]	@ (80016f0 <main+0xf4>)
 8001628:	4932      	ldr	r1, [pc, #200]	@ (80016f4 <main+0xf8>)
 800162a:	4833      	ldr	r0, [pc, #204]	@ (80016f8 <main+0xfc>)
 800162c:	f7ff fc34 	bl	8000e98 <BMI088_Init>
  BMI088_InitCalibration(&imu, NUM_SAMPLES_CALI);
 8001630:	2132      	movs	r1, #50	@ 0x32
 8001632:	4831      	ldr	r0, [pc, #196]	@ (80016f8 <main+0xfc>)
 8001634:	f7ff fd48 	bl	80010c8 <BMI088_InitCalibration>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Timers:
  uint32_t timerUSB = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  while (1)
  {

  /* Log data via USB */
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB)
 800163c:	f000 fc82 	bl	8001f44 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b09      	cmp	r3, #9
 8001648:	d9f8      	bls.n	800163c <main+0x40>
	  {

		  sprintf(logBuf, "aX=%.3f,\taY=%.3f,\taZ=%.3f,\tgX=%.3f,\tgY=%.3f,\tgZ=%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 800164a:	4b2b      	ldr	r3, [pc, #172]	@ (80016f8 <main+0xfc>)
 800164c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff7a 	bl	8000548 <__aeabi_f2d>
 8001654:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001658:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <main+0xfc>)
 800165a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
 8001666:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <main+0xfc>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff6c 	bl	8000548 <__aeabi_f2d>
 8001670:	4680      	mov	r8, r0
 8001672:	4689      	mov	r9, r1
															   imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]);
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <main+0xfc>)
 8001676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
		  sprintf(logBuf, "aX=%.3f,\taY=%.3f,\taZ=%.3f,\tgX=%.3f,\tgY=%.3f,\tgZ=%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff65 	bl	8000548 <__aeabi_f2d>
 800167e:	4682      	mov	sl, r0
 8001680:	468b      	mov	fp, r1
															   imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]);
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <main+0xfc>)
 8001684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
		  sprintf(logBuf, "aX=%.3f,\taY=%.3f,\taZ=%.3f,\tgX=%.3f,\tgY=%.3f,\tgZ=%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff5e 	bl	8000548 <__aeabi_f2d>
 800168c:	e9c7 0100 	strd	r0, r1, [r7]
															   imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]);
 8001690:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <main+0xfc>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		  sprintf(logBuf, "aX=%.3f,\taY=%.3f,\taZ=%.3f,\tgX=%.3f,\tgY=%.3f,\tgZ=%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff57 	bl	8000548 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80016a2:	ed97 7b00 	vldr	d7, [r7]
 80016a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80016aa:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80016ae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80016b2:	e9cd 4500 	strd	r4, r5, [sp]
 80016b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ba:	4910      	ldr	r1, [pc, #64]	@ (80016fc <main+0x100>)
 80016bc:	4810      	ldr	r0, [pc, #64]	@ (8001700 <main+0x104>)
 80016be:	f008 febb 	bl	800a438 <siprintf>

		  while (CDC_Transmit_FS((uint8_t *)logBuf, strlen(logBuf)) == USBD_BUSY) {}
 80016c2:	bf00      	nop
 80016c4:	480e      	ldr	r0, [pc, #56]	@ (8001700 <main+0x104>)
 80016c6:	f7fe fdd3 	bl	8000270 <strlen>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	480b      	ldr	r0, [pc, #44]	@ (8001700 <main+0x104>)
 80016d2:	f007 fd3b 	bl	800914c <CDC_Transmit_FS>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d0f3      	beq.n	80016c4 <main+0xc8>

		  BMI088_InitCalibration(&imu, NUM_SAMPLES_CALI);
 80016dc:	2132      	movs	r1, #50	@ 0x32
 80016de:	4806      	ldr	r0, [pc, #24]	@ (80016f8 <main+0xfc>)
 80016e0:	f7ff fcf2 	bl	80010c8 <BMI088_InitCalibration>
		  timerUSB = HAL_GetTick();
 80016e4:	f000 fc2e 	bl	8001f44 <HAL_GetTick>
 80016e8:	6178      	str	r0, [r7, #20]
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB)
 80016ea:	e7a7      	b.n	800163c <main+0x40>
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	200002e0 	.word	0x200002e0
 80016f8:	200003f8 	.word	0x200003f8
 80016fc:	0800c6e0 	.word	0x0800c6e0
 8001700:	20000448 	.word	0x20000448

08001704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	@ 0x50
 8001708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	2230      	movs	r2, #48	@ 0x30
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f008 fef3 	bl	800a4fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <SystemClock_Config+0xcc>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	4a27      	ldr	r2, [pc, #156]	@ (80017d0 <SystemClock_Config+0xcc>)
 8001732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001736:	6413      	str	r3, [r2, #64]	@ 0x40
 8001738:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <SystemClock_Config+0xcc>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	4b22      	ldr	r3, [pc, #136]	@ (80017d4 <SystemClock_Config+0xd0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a21      	ldr	r2, [pc, #132]	@ (80017d4 <SystemClock_Config+0xd0>)
 800174e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <SystemClock_Config+0xd0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	2302      	movs	r3, #2
 800176c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001774:	2308      	movs	r3, #8
 8001776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001778:	23a8      	movs	r3, #168	@ 0xa8
 800177a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800177c:	2302      	movs	r3, #2
 800177e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001780:	2307      	movs	r3, #7
 8001782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	f107 0320 	add.w	r3, r7, #32
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fccf 	bl	800412c <HAL_RCC_OscConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001794:	f000 f924 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179c:	2302      	movs	r3, #2
 800179e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2105      	movs	r1, #5
 80017b6:	4618      	mov	r0, r3
 80017b8:	f002 ff30 	bl	800461c <HAL_RCC_ClockConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017c2:	f000 f90d 	bl	80019e0 <Error_Handler>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3750      	adds	r7, #80	@ 0x50
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000

080017d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <MX_SPI1_Init+0x64>)
 80017de:	4a18      	ldr	r2, [pc, #96]	@ (8001840 <MX_SPI1_Init+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <MX_SPI1_Init+0x64>)
 80017e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <MX_SPI1_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <MX_SPI1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <MX_SPI1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_SPI1_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <MX_SPI1_Init+0x64>)
 8001804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001808:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_SPI1_Init+0x64>)
 800180c:	2210      	movs	r2, #16
 800180e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <MX_SPI1_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_SPI1_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <MX_SPI1_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <MX_SPI1_Init+0x64>)
 8001824:	220a      	movs	r2, #10
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <MX_SPI1_Init+0x64>)
 800182a:	f003 f8ed 	bl	8004a08 <HAL_SPI_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001834:	f000 f8d4 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200002e0 	.word	0x200002e0
 8001840:	40013000 	.word	0x40013000

08001844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <MX_DMA_Init+0x4c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a0f      	ldr	r2, [pc, #60]	@ (8001890 <MX_DMA_Init+0x4c>)
 8001854:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <MX_DMA_Init+0x4c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	2038      	movs	r0, #56	@ 0x38
 800186c:	f000 fc75 	bl	800215a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001870:	2038      	movs	r0, #56	@ 0x38
 8001872:	f000 fc8e 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	203b      	movs	r0, #59	@ 0x3b
 800187c:	f000 fc6d 	bl	800215a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001880:	203b      	movs	r0, #59	@ 0x3b
 8001882:	f000 fc86 	bl	8002192 <HAL_NVIC_EnableIRQ>

}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	@ 0x28
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b48      	ldr	r3, [pc, #288]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a47      	ldr	r2, [pc, #284]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b45      	ldr	r3, [pc, #276]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b41      	ldr	r3, [pc, #260]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a40      	ldr	r2, [pc, #256]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b3e      	ldr	r3, [pc, #248]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b3a      	ldr	r3, [pc, #232]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a39      	ldr	r2, [pc, #228]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b37      	ldr	r3, [pc, #220]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b33      	ldr	r3, [pc, #204]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a32      	ldr	r2, [pc, #200]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b30      	ldr	r3, [pc, #192]	@ (80019d0 <MX_GPIO_Init+0x13c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_NCS_GPIO_Port, ACC_NCS_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2110      	movs	r1, #16
 800191e:	482d      	ldr	r0, [pc, #180]	@ (80019d4 <MX_GPIO_Init+0x140>)
 8001920:	f001 f980 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYR_NCS_GPIO_Port, GYR_NCS_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	482b      	ldr	r0, [pc, #172]	@ (80019d8 <MX_GPIO_Init+0x144>)
 800192a:	f001 f97b 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2110      	movs	r1, #16
 8001932:	482a      	ldr	r0, [pc, #168]	@ (80019dc <MX_GPIO_Init+0x148>)
 8001934:	f001 f976 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8001938:	230c      	movs	r3, #12
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800193c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4822      	ldr	r0, [pc, #136]	@ (80019d8 <MX_GPIO_Init+0x144>)
 800194e:	f000 ffcd 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_NCS_Pin */
  GPIO_InitStruct.Pin = ACC_NCS_Pin;
 8001952:	2310      	movs	r3, #16
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	2301      	movs	r3, #1
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_NCS_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	481a      	ldr	r0, [pc, #104]	@ (80019d4 <MX_GPIO_Init+0x140>)
 800196a:	f000 ffbf 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GYR_NCS_Pin */
  GPIO_InitStruct.Pin = GYR_NCS_Pin;
 800196e:	2310      	movs	r3, #16
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001972:	2301      	movs	r3, #1
 8001974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYR_NCS_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4814      	ldr	r0, [pc, #80]	@ (80019d8 <MX_GPIO_Init+0x144>)
 8001986:	f000 ffb1 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800198a:	2310      	movs	r3, #16
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	480e      	ldr	r0, [pc, #56]	@ (80019dc <MX_GPIO_Init+0x148>)
 80019a2:	f000 ffa3 	bl	80028ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2008      	movs	r0, #8
 80019ac:	f000 fbd5 	bl	800215a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80019b0:	2008      	movs	r0, #8
 80019b2:	f000 fbee 	bl	8002192 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2009      	movs	r0, #9
 80019bc:	f000 fbcd 	bl	800215a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80019c0:	2009      	movs	r0, #9
 80019c2:	f000 fbe6 	bl	8002192 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	@ 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020400 	.word	0x40020400

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <Error_Handler+0x8>

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001a38 <HAL_MspInit+0x4c>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	4a08      	ldr	r2, [pc, #32]	@ (8001a38 <HAL_MspInit+0x4c>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1e:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_MspInit+0x4c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	@ (8001b8c <HAL_SPI_MspInit+0x150>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	f040 8092 	bne.w	8001b84 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	4b4a      	ldr	r3, [pc, #296]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a68:	4a49      	ldr	r2, [pc, #292]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a70:	4b47      	ldr	r3, [pc, #284]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	4b43      	ldr	r3, [pc, #268]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a84:	4a42      	ldr	r2, [pc, #264]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8c:	4b40      	ldr	r3, [pc, #256]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a98:	23e0      	movs	r3, #224	@ 0xe0
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa8:	2305      	movs	r3, #5
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4838      	ldr	r0, [pc, #224]	@ (8001b94 <HAL_SPI_MspInit+0x158>)
 8001ab4:	f000 ff1a 	bl	80028ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001ab8:	4b37      	ldr	r3, [pc, #220]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001aba:	4a38      	ldr	r2, [pc, #224]	@ (8001b9c <HAL_SPI_MspInit+0x160>)
 8001abc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001abe:	4b36      	ldr	r3, [pc, #216]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001ac0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001ac4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac6:	4b34      	ldr	r3, [pc, #208]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001acc:	4b32      	ldr	r3, [pc, #200]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad2:	4b31      	ldr	r3, [pc, #196]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001ad4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ad8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ada:	4b2f      	ldr	r3, [pc, #188]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001aec:	4b2a      	ldr	r3, [pc, #168]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001aee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001af2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af4:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001afa:	4827      	ldr	r0, [pc, #156]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001afc:	f000 fb64 	bl	80021c8 <HAL_DMA_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001b06:	f7ff ff6b 	bl	80019e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a22      	ldr	r2, [pc, #136]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001b0e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001b10:	4a21      	ldr	r2, [pc, #132]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001b16:	4b22      	ldr	r3, [pc, #136]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b18:	4a22      	ldr	r2, [pc, #136]	@ (8001ba4 <HAL_SPI_MspInit+0x168>)
 8001b1a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001b1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b1e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001b22:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b26:	2240      	movs	r2, #64	@ 0x40
 8001b28:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b36:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b38:	4b19      	ldr	r3, [pc, #100]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b44:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b50:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b52:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b58:	4811      	ldr	r0, [pc, #68]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b5a:	f000 fb35 	bl	80021c8 <HAL_DMA_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001b64:	f7ff ff3c 	bl	80019e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b6c:	649a      	str	r2, [r3, #72]	@ 0x48
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	2023      	movs	r0, #35	@ 0x23
 8001b7a:	f000 faee 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b7e:	2023      	movs	r0, #35	@ 0x23
 8001b80:	f000 fb07 	bl	8002192 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b84:	bf00      	nop
 8001b86:	3728      	adds	r7, #40	@ 0x28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40013000 	.word	0x40013000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	20000338 	.word	0x20000338
 8001b9c:	40026410 	.word	0x40026410
 8001ba0:	20000398 	.word	0x20000398
 8001ba4:	40026458 	.word	0x40026458

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <NMI_Handler+0x4>

08001bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <MemManage_Handler+0x4>

08001bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfe:	f000 f98d 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8001c0a:	2004      	movs	r0, #4
 8001c0c:	f001 f824 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYR_Pin);
 8001c18:	2008      	movs	r0, #8
 8001c1a:	f001 f81d 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <SPI1_IRQHandler+0x10>)
 8001c2a:	f003 fb5f 	bl	80052ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200002e0 	.word	0x200002e0

08001c38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <DMA2_Stream0_IRQHandler+0x10>)
 8001c3e:	f000 fbeb 	bl	8002418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000338 	.word	0x20000338

08001c4c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <DMA2_Stream3_IRQHandler+0x10>)
 8001c52:	f000 fbe1 	bl	8002418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000398 	.word	0x20000398

08001c60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <OTG_FS_IRQHandler+0x10>)
 8001c66:	f001 f953 	bl	8002f10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200019b0 	.word	0x200019b0

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_kill>:

int _kill(int pid, int sig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8e:	f008 fc89 	bl	800a5a4 <__errno>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2216      	movs	r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
  return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_exit>:

void _exit (int status)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe7 	bl	8001c84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb6:	bf00      	nop
 8001cb8:	e7fd      	b.n	8001cb6 <_exit+0x12>

08001cba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e00a      	b.n	8001ce2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	60ba      	str	r2, [r7, #8]
 8001cd8:	b2ca      	uxtb	r2, r1
 8001cda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbf0      	blt.n	8001ccc <_read+0x12>
  }

  return len;
 8001cea:	687b      	ldr	r3, [r7, #4]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e009      	b.n	8001d1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	60ba      	str	r2, [r7, #8]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3301      	adds	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	dbf1      	blt.n	8001d06 <_write+0x12>
  }
  return len;
 8001d22:	687b      	ldr	r3, [r7, #4]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_close>:

int _close(int file)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d54:	605a      	str	r2, [r3, #4]
  return 0;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_isatty>:

int _isatty(int file)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6c:	2301      	movs	r3, #1
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	@ (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f008 fbee 	bl	800a5a4 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20020000 	.word	0x20020000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	200004c8 	.word	0x200004c8
 8001dfc:	20002200 	.word	0x20002200

08001e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	@ (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e28:	f7ff ffea 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	@ (8001e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	@ (8001e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f008 fbad 	bl	800a5b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7ff fbd1 	bl	80015fc <main>
  bx  lr    
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001e68:	0800caf8 	.word	0x0800caf8
  ldr r2, =_sbss
 8001e6c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001e70:	20002200 	.word	0x20002200

08001e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <HAL_Init+0x40>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e88:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <HAL_Init+0x40>)
 8001e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	@ (8001eb8 <HAL_Init+0x40>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 f94f 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f000 f808 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eac:	f7ff fd9e 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <HAL_InitTick+0x54>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <HAL_InitTick+0x58>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f967 	bl	80021ae <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00e      	b.n	8001f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d80a      	bhi.n	8001f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f000 f92f 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efc:	4a06      	ldr	r2, [pc, #24]	@ (8001f18 <HAL_InitTick+0x5c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_IncTick+0x20>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_IncTick+0x24>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <HAL_IncTick+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	200004cc 	.word	0x200004cc

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	200004cc 	.word	0x200004cc

08001f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff ffee 	bl	8001f44 <HAL_GetTick>
 8001f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d005      	beq.n	8001f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_Delay+0x44>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f82:	bf00      	nop
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d8f7      	bhi.n	8001f84 <HAL_Delay+0x28>
  {
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000008 	.word	0x20000008

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	@ (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	@ (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	@ (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	@ 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	@ 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff8e 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff29 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff3e 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff8e 	bl	8002098 <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff31 	bl	8002008 <__NVIC_EnableIRQ>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffa2 	bl	8002100 <SysTick_Config>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff feb6 	bl	8001f44 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e099      	b.n	8002318 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002204:	e00f      	b.n	8002226 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002206:	f7ff fe9d 	bl	8001f44 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b05      	cmp	r3, #5
 8002212:	d908      	bls.n	8002226 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2203      	movs	r2, #3
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e078      	b.n	8002318 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e8      	bne.n	8002206 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4b38      	ldr	r3, [pc, #224]	@ (8002320 <HAL_DMA_Init+0x158>)
 8002240:	4013      	ands	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002252:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	2b04      	cmp	r3, #4
 800227e:	d107      	bne.n	8002290 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002288:	4313      	orrs	r3, r2
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f023 0307 	bic.w	r3, r3, #7
 80022a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d117      	bne.n	80022ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00e      	beq.n	80022ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 fa91 	bl	80027f4 <DMA_CheckFifoParam>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2240      	movs	r2, #64	@ 0x40
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022e6:	2301      	movs	r3, #1
 80022e8:	e016      	b.n	8002318 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fa48 	bl	8002788 <DMA_CalcBaseAndBitshift>
 80022f8:	4603      	mov	r3, r0
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	223f      	movs	r2, #63	@ 0x3f
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	f010803f 	.word	0xf010803f

08002324 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_DMA_Start_IT+0x26>
 8002346:	2302      	movs	r3, #2
 8002348:	e040      	b.n	80023cc <HAL_DMA_Start_IT+0xa8>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d12f      	bne.n	80023be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2202      	movs	r2, #2
 8002362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f9da 	bl	800272c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	223f      	movs	r2, #63	@ 0x3f
 800237e:	409a      	lsls	r2, r3
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0216 	orr.w	r2, r2, #22
 8002392:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0208 	orr.w	r2, r2, #8
 80023aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e005      	b.n	80023ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023c6:	2302      	movs	r3, #2
 80023c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d004      	beq.n	80023f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2280      	movs	r2, #128	@ 0x80
 80023ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00c      	b.n	800240c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2205      	movs	r2, #5
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002424:	4b8e      	ldr	r3, [pc, #568]	@ (8002660 <HAL_DMA_IRQHandler+0x248>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a8e      	ldr	r2, [pc, #568]	@ (8002664 <HAL_DMA_IRQHandler+0x24c>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0a9b      	lsrs	r3, r3, #10
 8002430:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002442:	2208      	movs	r2, #8
 8002444:	409a      	lsls	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01a      	beq.n	8002484 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0204 	bic.w	r2, r2, #4
 800246a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002470:	2208      	movs	r2, #8
 8002472:	409a      	lsls	r2, r3
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002488:	2201      	movs	r2, #1
 800248a:	409a      	lsls	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d012      	beq.n	80024ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a6:	2201      	movs	r2, #1
 80024a8:	409a      	lsls	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	f043 0202 	orr.w	r2, r3, #2
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	2204      	movs	r2, #4
 80024c0:	409a      	lsls	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d012      	beq.n	80024f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024dc:	2204      	movs	r2, #4
 80024de:	409a      	lsls	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e8:	f043 0204 	orr.w	r2, r3, #4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f4:	2210      	movs	r2, #16
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d043      	beq.n	8002588 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d03c      	beq.n	8002588 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002512:	2210      	movs	r2, #16
 8002514:	409a      	lsls	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d018      	beq.n	800255a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d108      	bne.n	8002548 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d024      	beq.n	8002588 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
 8002546:	e01f      	b.n	8002588 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01b      	beq.n	8002588 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
 8002558:	e016      	b.n	8002588 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0208 	bic.w	r2, r2, #8
 8002576:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258c:	2220      	movs	r2, #32
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 808f 	beq.w	80026b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 8087 	beq.w	80026b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ae:	2220      	movs	r2, #32
 80025b0:	409a      	lsls	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b05      	cmp	r3, #5
 80025c0:	d136      	bne.n	8002630 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0216 	bic.w	r2, r2, #22
 80025d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <HAL_DMA_IRQHandler+0x1da>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0208 	bic.w	r2, r2, #8
 8002600:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002606:	223f      	movs	r2, #63	@ 0x3f
 8002608:	409a      	lsls	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002622:	2b00      	cmp	r3, #0
 8002624:	d07e      	beq.n	8002724 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
        }
        return;
 800262e:	e079      	b.n	8002724 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01d      	beq.n	800267a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10d      	bne.n	8002668 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002650:	2b00      	cmp	r3, #0
 8002652:	d031      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
 800265c:	e02c      	b.n	80026b8 <HAL_DMA_IRQHandler+0x2a0>
 800265e:	bf00      	nop
 8002660:	20000000 	.word	0x20000000
 8002664:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
 8002678:	e01e      	b.n	80026b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10f      	bne.n	80026a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0210 	bic.w	r2, r2, #16
 8002696:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d032      	beq.n	8002726 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d022      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2205      	movs	r2, #5
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	3301      	adds	r3, #1
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d307      	bcc.n	8002700 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f2      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x2cc>
 80026fe:	e000      	b.n	8002702 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002700:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
 8002722:	e000      	b.n	8002726 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002724:	bf00      	nop
    }
  }
}
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002748:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b40      	cmp	r3, #64	@ 0x40
 8002758:	d108      	bne.n	800276c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800276a:	e007      	b.n	800277c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	3b10      	subs	r3, #16
 8002798:	4a14      	ldr	r2, [pc, #80]	@ (80027ec <DMA_CalcBaseAndBitshift+0x64>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027a2:	4a13      	ldr	r2, [pc, #76]	@ (80027f0 <DMA_CalcBaseAndBitshift+0x68>)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d909      	bls.n	80027ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	1d1a      	adds	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80027c8:	e007      	b.n	80027da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027d2:	f023 0303 	bic.w	r3, r3, #3
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	aaaaaaab 	.word	0xaaaaaaab
 80027f0:	0800c770 	.word	0x0800c770

080027f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d11f      	bne.n	800284e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d856      	bhi.n	80028c2 <DMA_CheckFifoParam+0xce>
 8002814:	a201      	add	r2, pc, #4	@ (adr r2, 800281c <DMA_CheckFifoParam+0x28>)
 8002816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281a:	bf00      	nop
 800281c:	0800282d 	.word	0x0800282d
 8002820:	0800283f 	.word	0x0800283f
 8002824:	0800282d 	.word	0x0800282d
 8002828:	080028c3 	.word	0x080028c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002830:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d046      	beq.n	80028c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800283c:	e043      	b.n	80028c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002842:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002846:	d140      	bne.n	80028ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284c:	e03d      	b.n	80028ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002856:	d121      	bne.n	800289c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d837      	bhi.n	80028ce <DMA_CheckFifoParam+0xda>
 800285e:	a201      	add	r2, pc, #4	@ (adr r2, 8002864 <DMA_CheckFifoParam+0x70>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002875 	.word	0x08002875
 8002868:	0800287b 	.word	0x0800287b
 800286c:	08002875 	.word	0x08002875
 8002870:	0800288d 	.word	0x0800288d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      break;
 8002878:	e030      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d025      	beq.n	80028d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800288a:	e022      	b.n	80028d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002894:	d11f      	bne.n	80028d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800289a:	e01c      	b.n	80028d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d903      	bls.n	80028aa <DMA_CheckFifoParam+0xb6>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d003      	beq.n	80028b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028a8:	e018      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      break;
 80028ae:	e015      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00e      	beq.n	80028da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      break;
 80028c0:	e00b      	b.n	80028da <DMA_CheckFifoParam+0xe6>
      break;
 80028c2:	bf00      	nop
 80028c4:	e00a      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;
 80028c6:	bf00      	nop
 80028c8:	e008      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;
 80028ca:	bf00      	nop
 80028cc:	e006      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;
 80028ce:	bf00      	nop
 80028d0:	e004      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;
 80028d2:	bf00      	nop
 80028d4:	e002      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;   
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
    }
  } 
  
  return status; 
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop

080028ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	@ 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e16b      	b.n	8002be0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002908:	2201      	movs	r2, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 815a 	bne.w	8002bda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d005      	beq.n	800293e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	2b02      	cmp	r3, #2
 800293c:	d130      	bne.n	80029a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d017      	beq.n	80029dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d123      	bne.n	8002a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80b4 	beq.w	8002bda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b60      	ldr	r3, [pc, #384]	@ (8002bf8 <HAL_GPIO_Init+0x30c>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf8 <HAL_GPIO_Init+0x30c>)
 8002a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a82:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf8 <HAL_GPIO_Init+0x30c>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bfc <HAL_GPIO_Init+0x310>)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	3302      	adds	r3, #2
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	@ (8002c00 <HAL_GPIO_Init+0x314>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d02b      	beq.n	8002b12 <HAL_GPIO_Init+0x226>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a51      	ldr	r2, [pc, #324]	@ (8002c04 <HAL_GPIO_Init+0x318>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d025      	beq.n	8002b0e <HAL_GPIO_Init+0x222>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a50      	ldr	r2, [pc, #320]	@ (8002c08 <HAL_GPIO_Init+0x31c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01f      	beq.n	8002b0a <HAL_GPIO_Init+0x21e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4f      	ldr	r2, [pc, #316]	@ (8002c0c <HAL_GPIO_Init+0x320>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x21a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8002c10 <HAL_GPIO_Init+0x324>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x216>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4d      	ldr	r2, [pc, #308]	@ (8002c14 <HAL_GPIO_Init+0x328>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x212>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8002c18 <HAL_GPIO_Init+0x32c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x20e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4b      	ldr	r2, [pc, #300]	@ (8002c1c <HAL_GPIO_Init+0x330>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x20a>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e00e      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002af6:	2308      	movs	r3, #8
 8002af8:	e00c      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002afa:	2306      	movs	r3, #6
 8002afc:	e00a      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002afe:	2305      	movs	r3, #5
 8002b00:	e008      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b02:	2304      	movs	r3, #4
 8002b04:	e006      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b06:	2303      	movs	r3, #3
 8002b08:	e004      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e002      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b12:	2300      	movs	r3, #0
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f002 0203 	and.w	r2, r2, #3
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	4093      	lsls	r3, r2
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b24:	4935      	ldr	r1, [pc, #212]	@ (8002bfc <HAL_GPIO_Init+0x310>)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b32:	4b3b      	ldr	r3, [pc, #236]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b56:	4a32      	ldr	r2, [pc, #200]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b5c:	4b30      	ldr	r3, [pc, #192]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b80:	4a27      	ldr	r2, [pc, #156]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b86:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002baa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd4:	4a12      	ldr	r2, [pc, #72]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b0f      	cmp	r3, #15
 8002be4:	f67f ae90 	bls.w	8002908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3724      	adds	r7, #36	@ 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40013800 	.word	0x40013800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40020400 	.word	0x40020400
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	40020c00 	.word	0x40020c00
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40021400 	.word	0x40021400
 8002c18:	40021800 	.word	0x40021800
 8002c1c:	40021c00 	.word	0x40021c00
 8002c20:	40013c00 	.word	0x40013c00

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c40:	e003      	b.n	8002c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	041a      	lsls	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	619a      	str	r2, [r3, #24]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c62:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c6e:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe fc88 	bl	800158c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40013c00 	.word	0x40013c00

08002c88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e101      	b.n	8002e9e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f006 fb91 	bl	80093dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cc8:	d102      	bne.n	8002cd0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 ff78 	bl	8005bca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7c1a      	ldrb	r2, [r3, #16]
 8002ce2:	f88d 2000 	strb.w	r2, [sp]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cea:	f002 fe57 	bl	800599c <USB_CoreInit>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0ce      	b.n	8002e9e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f002 ff70 	bl	8005bec <USB_SetCurrentMode>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0bf      	b.n	8002e9e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e04a      	b.n	8002dba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3315      	adds	r3, #21
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3314      	adds	r3, #20
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	b298      	uxth	r0, r3
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	332e      	adds	r3, #46	@ 0x2e
 8002d60:	4602      	mov	r2, r0
 8002d62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3318      	adds	r3, #24
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	331c      	adds	r3, #28
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3320      	adds	r3, #32
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3324      	adds	r3, #36	@ 0x24
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	3301      	adds	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	791b      	ldrb	r3, [r3, #4]
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d3af      	bcc.n	8002d24 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	e044      	b.n	8002e54 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002df2:	7bfa      	ldrb	r2, [r7, #15]
 8002df4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e22:	7bfa      	ldrb	r2, [r7, #15]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	3301      	adds	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	791b      	ldrb	r3, [r3, #4]
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d3b5      	bcc.n	8002dca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7c1a      	ldrb	r2, [r3, #16]
 8002e66:	f88d 2000 	strb.w	r2, [sp]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e6e:	f002 ff09 	bl	8005c84 <USB_DevInit>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e00c      	b.n	8002e9e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 ff53 	bl	8006d42 <USB_DevDisconnect>

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_PCD_Start+0x1c>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e022      	b.n	8002f08 <HAL_PCD_Start+0x62>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d105      	bne.n	8002eea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 fe5a 	bl	8005ba8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 ff01 	bl	8006d00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b08d      	sub	sp, #52	@ 0x34
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 ffbf 	bl	8006eaa <USB_GetMode>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 848c 	bne.w	800384c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 ff23 	bl	8006d84 <USB_ReadInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8482 	beq.w	800384a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 ff10 	bl	8006d84 <USB_ReadInterrupts>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d107      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f002 0202 	and.w	r2, r2, #2
 8002f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fefe 	bl	8006d84 <USB_ReadInterrupts>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d161      	bne.n	8003056 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0210 	bic.w	r2, r2, #16
 8002fa0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f003 020f 	and.w	r2, r3, #15
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	0c5b      	lsrs	r3, r3, #17
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d124      	bne.n	8003018 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d035      	beq.n	8003046 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	6a38      	ldr	r0, [r7, #32]
 8002fee:	f003 fd35 	bl	8006a5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ffe:	441a      	add	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003010:	441a      	add	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	615a      	str	r2, [r3, #20]
 8003016:	e016      	b.n	8003046 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	0c5b      	lsrs	r3, r3, #17
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	2b06      	cmp	r3, #6
 8003022:	d110      	bne.n	8003046 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800302a:	2208      	movs	r2, #8
 800302c:	4619      	mov	r1, r3
 800302e:	6a38      	ldr	r0, [r7, #32]
 8003030:	f003 fd14 	bl	8006a5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003040:	441a      	add	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0210 	orr.w	r2, r2, #16
 8003054:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f003 fe92 	bl	8006d84 <USB_ReadInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003066:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800306a:	f040 80a7 	bne.w	80031bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fe97 	bl	8006daa <USB_ReadDevAllOutEpInterrupt>
 800307c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800307e:	e099      	b.n	80031b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 808e 	beq.w	80031a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f003 febb 	bl	8006e12 <USB_ReadDevOutEPInterrupt>
 800309c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00c      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030b4:	461a      	mov	r2, r3
 80030b6:	2301      	movs	r3, #1
 80030b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fea3 	bl	8003e08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00c      	beq.n	80030e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d8:	461a      	mov	r2, r3
 80030da:	2308      	movs	r3, #8
 80030dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 ff79 	bl	8003fd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030fc:	461a      	mov	r2, r3
 80030fe:	2310      	movs	r3, #16
 8003100:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d030      	beq.n	800316e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003114:	2b80      	cmp	r3, #128	@ 0x80
 8003116:	d109      	bne.n	800312c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800312a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800312c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	3304      	adds	r3, #4
 8003140:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	78db      	ldrb	r3, [r3, #3]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	b2db      	uxtb	r3, r3
 8003154:	4619      	mov	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f006 fa46 	bl	80095e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003168:	461a      	mov	r2, r3
 800316a:	2302      	movs	r3, #2
 800316c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003184:	461a      	mov	r2, r3
 8003186:	2320      	movs	r3, #32
 8003188:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031a0:	461a      	mov	r2, r3
 80031a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	3301      	adds	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80031b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f47f af62 	bne.w	8003080 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fddf 	bl	8006d84 <USB_ReadInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031d0:	f040 80db 	bne.w	800338a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fe00 	bl	8006dde <USB_ReadDevAllInEpInterrupt>
 80031de:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80031e4:	e0cd      	b.n	8003382 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80c2 	beq.w	8003376 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 fe26 	bl	8006e4e <USB_ReadDevInEPInterrupt>
 8003202:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d057      	beq.n	80032be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	2201      	movs	r2, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43db      	mvns	r3, r3
 8003228:	69f9      	ldr	r1, [r7, #28]
 800322a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800322e:	4013      	ands	r3, r2
 8003230:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800323e:	461a      	mov	r2, r3
 8003240:	2301      	movs	r3, #1
 8003242:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	799b      	ldrb	r3, [r3, #6]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d132      	bne.n	80032b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3320      	adds	r3, #32
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4403      	add	r3, r0
 800326c:	331c      	adds	r3, #28
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4419      	add	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4403      	add	r3, r0
 8003280:	3320      	adds	r3, #32
 8003282:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	2b00      	cmp	r3, #0
 8003288:	d113      	bne.n	80032b2 <HAL_PCD_IRQHandler+0x3a2>
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3324      	adds	r3, #36	@ 0x24
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d108      	bne.n	80032b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032aa:	461a      	mov	r2, r3
 80032ac:	2101      	movs	r1, #1
 80032ae:	f003 fe2d 	bl	8006f0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f006 f910 	bl	80094de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032d4:	461a      	mov	r2, r3
 80032d6:	2308      	movs	r3, #8
 80032d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032f0:	461a      	mov	r2, r3
 80032f2:	2310      	movs	r3, #16
 80032f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800330c:	461a      	mov	r2, r3
 800330e:	2340      	movs	r3, #64	@ 0x40
 8003310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d023      	beq.n	8003364 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800331c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800331e:	6a38      	ldr	r0, [r7, #32]
 8003320:	f002 fe14 	bl	8005f4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	3310      	adds	r3, #16
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	78db      	ldrb	r3, [r3, #3]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d108      	bne.n	8003352 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2200      	movs	r2, #0
 8003344:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f006 f95d 	bl	800960c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800335e:	461a      	mov	r2, r3
 8003360:	2302      	movs	r3, #2
 8003362:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800336e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fcbd 	bl	8003cf0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	3301      	adds	r3, #1
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	f47f af2e 	bne.w	80031e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fcf8 	bl	8006d84 <USB_ReadInterrupts>
 8003394:	4603      	mov	r3, r0
 8003396:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800339a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800339e:	d122      	bne.n	80033e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d108      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80033c6:	2100      	movs	r1, #0
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fea3 	bl	8004114 <HAL_PCDEx_LPM_Callback>
 80033ce:	e002      	b.n	80033d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f006 f8fb 	bl	80095cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80033e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fcca 	bl	8006d84 <USB_ReadInterrupts>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033fa:	d112      	bne.n	8003422 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d102      	bne.n	8003412 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f006 f8b7 	bl	8009580 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003420:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f003 fcac 	bl	8006d84 <USB_ReadInterrupts>
 800342c:	4603      	mov	r3, r0
 800342e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003436:	f040 80b7 	bne.w	80035a8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2110      	movs	r1, #16
 8003454:	4618      	mov	r0, r3
 8003456:	f002 fd79 	bl	8005f4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345a:	2300      	movs	r3, #0
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800345e:	e046      	b.n	80034ee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800346c:	461a      	mov	r2, r3
 800346e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003472:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003484:	0151      	lsls	r1, r2, #5
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	440a      	add	r2, r1
 800348a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800348e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003492:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a0:	461a      	mov	r2, r3
 80034a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80034a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034b8:	0151      	lsls	r1, r2, #5
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	440a      	add	r2, r1
 80034be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80034c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d8:	0151      	lsls	r1, r2, #5
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	440a      	add	r2, r1
 80034de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ea:	3301      	adds	r3, #1
 80034ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	791b      	ldrb	r3, [r3, #4]
 80034f2:	461a      	mov	r2, r3
 80034f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d3b2      	bcc.n	8003460 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003508:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800350c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	7bdb      	ldrb	r3, [r3, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003526:	f043 030b 	orr.w	r3, r3, #11
 800352a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800353c:	f043 030b 	orr.w	r3, r3, #11
 8003540:	6453      	str	r3, [r2, #68]	@ 0x44
 8003542:	e015      	b.n	8003570 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003552:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003556:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800355a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800356a:	f043 030b 	orr.w	r3, r3, #11
 800356e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800357e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003582:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003592:	461a      	mov	r2, r3
 8003594:	f003 fcba 	bl	8006f0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80035a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fbe9 	bl	8006d84 <USB_ReadInterrupts>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035bc:	d123      	bne.n	8003606 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 fc7f 	bl	8006ec6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 fd36 	bl	800603e <USB_GetDevSpeed>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681c      	ldr	r4, [r3, #0]
 80035de:	f001 fa07 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 80035e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035e8:	461a      	mov	r2, r3
 80035ea:	4620      	mov	r0, r4
 80035ec:	f002 fa3a 	bl	8005a64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f005 ff9c 	bl	800952e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003604:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fbba 	bl	8006d84 <USB_ReadInterrupts>
 8003610:	4603      	mov	r3, r0
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b08      	cmp	r3, #8
 8003618:	d10a      	bne.n	8003630 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f005 ff79 	bl	8009512 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f002 0208 	and.w	r2, r2, #8
 800362e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f003 fba5 	bl	8006d84 <USB_ReadInterrupts>
 800363a:	4603      	mov	r3, r0
 800363c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003640:	2b80      	cmp	r3, #128	@ 0x80
 8003642:	d123      	bne.n	800368c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003650:	2301      	movs	r3, #1
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
 8003654:	e014      	b.n	8003680 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365a:	4613      	mov	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fb0a 	bl	8003c8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	3301      	adds	r3, #1
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	791b      	ldrb	r3, [r3, #4]
 8003684:	461a      	mov	r2, r3
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	4293      	cmp	r3, r2
 800368a:	d3e4      	bcc.n	8003656 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f003 fb77 	bl	8006d84 <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800369c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a0:	d13c      	bne.n	800371c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036a2:	2301      	movs	r3, #1
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a6:	e02b      	b.n	8003700 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3318      	adds	r3, #24
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d115      	bne.n	80036fa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80036ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	da12      	bge.n	80036fa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	3317      	adds	r3, #23
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 faca 	bl	8003c8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	3301      	adds	r3, #1
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	791b      	ldrb	r3, [r3, #4]
 8003704:	461a      	mov	r2, r3
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	4293      	cmp	r3, r2
 800370a:	d3cd      	bcc.n	80036a8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800371a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f003 fb2f 	bl	8006d84 <USB_ReadInterrupts>
 8003726:	4603      	mov	r3, r0
 8003728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800372c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003730:	d156      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003732:	2301      	movs	r3, #1
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
 8003736:	e045      	b.n	80037c4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d12e      	bne.n	80037be <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003760:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003762:	2b00      	cmp	r3, #0
 8003764:	da2b      	bge.n	80037be <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003772:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003776:	429a      	cmp	r2, r3
 8003778:	d121      	bne.n	80037be <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037ba:	6053      	str	r3, [r2, #4]
            break;
 80037bc:	e008      	b.n	80037d0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	3301      	adds	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	791b      	ldrb	r3, [r3, #4]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d3b3      	bcc.n	8003738 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80037de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 facd 	bl	8006d84 <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f4:	d10a      	bne.n	800380c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f005 ff1a 	bl	8009630 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695a      	ldr	r2, [r3, #20]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800380a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f003 fab7 	bl	8006d84 <USB_ReadInterrupts>
 8003816:	4603      	mov	r3, r0
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d115      	bne.n	800384c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f005 ff0a 	bl	800964c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	e000      	b.n	800384c <HAL_PCD_IRQHandler+0x93c>
      return;
 800384a:	bf00      	nop
    }
  }
}
 800384c:	3734      	adds	r7, #52	@ 0x34
 800384e:	46bd      	mov	sp, r7
 8003850:	bd90      	pop	{r4, r7, pc}

08003852 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_PCD_SetAddress+0x1a>
 8003868:	2302      	movs	r3, #2
 800386a:	e012      	b.n	8003892 <HAL_PCD_SetAddress+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f003 fa16 	bl	8006cb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	4608      	mov	r0, r1
 80038a4:	4611      	mov	r1, r2
 80038a6:	461a      	mov	r2, r3
 80038a8:	4603      	mov	r3, r0
 80038aa:	70fb      	strb	r3, [r7, #3]
 80038ac:	460b      	mov	r3, r1
 80038ae:	803b      	strh	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da0f      	bge.n	80038e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	3310      	adds	r3, #16
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	3304      	adds	r3, #4
 80038d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	705a      	strb	r2, [r3, #1]
 80038de:	e00f      	b.n	8003900 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 020f 	and.w	r2, r3, #15
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	3304      	adds	r3, #4
 80038f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800390c:	883b      	ldrh	r3, [r7, #0]
 800390e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	78ba      	ldrb	r2, [r7, #2]
 800391a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	785b      	ldrb	r3, [r3, #1]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800392e:	78bb      	ldrb	r3, [r7, #2]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d102      	bne.n	800393a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_PCD_EP_Open+0xae>
 8003944:	2302      	movs	r3, #2
 8003946:	e00e      	b.n	8003966 <HAL_PCD_EP_Open+0xcc>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68f9      	ldr	r1, [r7, #12]
 8003956:	4618      	mov	r0, r3
 8003958:	f002 fb96 	bl	8006088 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003964:	7afb      	ldrb	r3, [r7, #11]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800397a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800397e:	2b00      	cmp	r3, #0
 8003980:	da0f      	bge.n	80039a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 020f 	and.w	r2, r3, #15
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	3310      	adds	r3, #16
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	705a      	strb	r2, [r3, #1]
 80039a0:	e00f      	b.n	80039c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	f003 020f 	and.w	r2, r3, #15
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4413      	add	r3, r2
 80039b8:	3304      	adds	r3, #4
 80039ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_PCD_EP_Close+0x6e>
 80039d8:	2302      	movs	r3, #2
 80039da:	e00e      	b.n	80039fa <HAL_PCD_EP_Close+0x8c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68f9      	ldr	r1, [r7, #12]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f002 fbd4 	bl	8006198 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a12:	7afb      	ldrb	r3, [r7, #11]
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	3304      	adds	r3, #4
 8003a2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2200      	movs	r2, #0
 8003a42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a44:	7afb      	ldrb	r3, [r7, #11]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	799b      	ldrb	r3, [r3, #6]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d102      	bne.n	8003a5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	799b      	ldrb	r3, [r3, #6]
 8003a66:	461a      	mov	r2, r3
 8003a68:	6979      	ldr	r1, [r7, #20]
 8003a6a:	f002 fc71 	bl	8006350 <USB_EPStartXfer>

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	f003 020f 	and.w	r2, r3, #15
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	f003 020f 	and.w	r2, r3, #15
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	3310      	adds	r3, #16
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	3304      	adds	r3, #4
 8003ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae8:	7afb      	ldrb	r3, [r7, #11]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	799b      	ldrb	r3, [r3, #6]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d102      	bne.n	8003b02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	799b      	ldrb	r3, [r3, #6]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6979      	ldr	r1, [r7, #20]
 8003b0e:	f002 fc1f 	bl	8006350 <USB_EPStartXfer>

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	7912      	ldrb	r2, [r2, #4]
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e04f      	b.n	8003bda <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	da0f      	bge.n	8003b62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	f003 020f 	and.w	r2, r3, #15
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	3310      	adds	r3, #16
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	3304      	adds	r3, #4
 8003b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	705a      	strb	r2, [r3, #1]
 8003b60:	e00d      	b.n	8003b7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	3304      	adds	r3, #4
 8003b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_PCD_EP_SetStall+0x82>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e01d      	b.n	8003bda <HAL_PCD_EP_SetStall+0xbe>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68f9      	ldr	r1, [r7, #12]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f002 ffad 	bl	8006b0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d109      	bne.n	8003bd0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7999      	ldrb	r1, [r3, #6]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f003 f99e 	bl	8006f0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	7912      	ldrb	r2, [r2, #4]
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e042      	b.n	8003c86 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	da0f      	bge.n	8003c28 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 020f 	and.w	r2, r3, #15
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	3310      	adds	r3, #16
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	705a      	strb	r2, [r3, #1]
 8003c26:	e00f      	b.n	8003c48 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	f003 020f 	and.w	r2, r3, #15
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3304      	adds	r3, #4
 8003c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_PCD_EP_ClrStall+0x86>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e00e      	b.n	8003c86 <HAL_PCD_EP_ClrStall+0xa4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68f9      	ldr	r1, [r7, #12]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f002 ffb6 	bl	8006be8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	460b      	mov	r3, r1
 8003c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	da0c      	bge.n	8003cbc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	3310      	adds	r3, #16
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e00c      	b.n	8003cd6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 020f 	and.w	r2, r3, #15
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68f9      	ldr	r1, [r7, #12]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f002 fdd5 	bl	800688c <USB_EPStopXfer>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	@ 0x28
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	3310      	adds	r3, #16
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	4413      	add	r3, r2
 8003d14:	3304      	adds	r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d901      	bls.n	8003d28 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e06b      	b.n	8003e00 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d902      	bls.n	8003d44 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	3303      	adds	r3, #3
 8003d48:	089b      	lsrs	r3, r3, #2
 8003d4a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d4c:	e02a      	b.n	8003da4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d902      	bls.n	8003d6a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3303      	adds	r3, #3
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	68d9      	ldr	r1, [r3, #12]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4603      	mov	r3, r0
 8003d86:	6978      	ldr	r0, [r7, #20]
 8003d88:	f002 fe2a 	bl	80069e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	441a      	add	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	441a      	add	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d809      	bhi.n	8003dce <PCD_WriteEmptyTxFifo+0xde>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d203      	bcs.n	8003dce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1bf      	bne.n	8003d4e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d811      	bhi.n	8003dfe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	2201      	movs	r2, #1
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	6939      	ldr	r1, [r7, #16]
 8003df6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	333c      	adds	r3, #60	@ 0x3c
 8003e20:	3304      	adds	r3, #4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	799b      	ldrb	r3, [r3, #6]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d17b      	bne.n	8003f36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d015      	beq.n	8003e74 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4a61      	ldr	r2, [pc, #388]	@ (8003fd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	f240 80b9 	bls.w	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80b3 	beq.w	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e70:	6093      	str	r3, [r2, #8]
 8003e72:	e0a7      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	6093      	str	r3, [r2, #8]
 8003e90:	e098      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f040 8093 	bne.w	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8003fd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d90f      	bls.n	8003ec6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ec2:	6093      	str	r3, [r2, #8]
 8003ec4:	e07e      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3304      	adds	r3, #4
 8003eda:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1a      	ldr	r2, [r3, #32]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	0159      	lsls	r1, r3, #5
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	440b      	add	r3, r1
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d114      	bne.n	8003f28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f10:	461a      	mov	r2, r3
 8003f12:	2101      	movs	r1, #1
 8003f14:	f002 fffa 	bl	8006f0c <USB_EP0_OutStart>
 8003f18:	e006      	b.n	8003f28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f005 faba 	bl	80094a8 <HAL_PCD_DataOutStageCallback>
 8003f34:	e046      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	4a26      	ldr	r2, [pc, #152]	@ (8003fd4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d124      	bne.n	8003f88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f54:	461a      	mov	r2, r3
 8003f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f5a:	6093      	str	r3, [r2, #8]
 8003f5c:	e032      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f74:	461a      	mov	r2, r3
 8003f76:	2320      	movs	r3, #32
 8003f78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f005 fa91 	bl	80094a8 <HAL_PCD_DataOutStageCallback>
 8003f86:	e01d      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d114      	bne.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d108      	bne.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	f002 ffaa 	bl	8006f0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f005 fa72 	bl	80094a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	4f54300a 	.word	0x4f54300a
 8003fd4:	4f54310a 	.word	0x4f54310a

08003fd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	333c      	adds	r3, #60	@ 0x3c
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a15      	ldr	r2, [pc, #84]	@ (8004060 <PCD_EP_OutSetupPacket_int+0x88>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d90e      	bls.n	800402c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004024:	461a      	mov	r2, r3
 8004026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800402a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f005 fa29 	bl	8009484 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a0a      	ldr	r2, [pc, #40]	@ (8004060 <PCD_EP_OutSetupPacket_int+0x88>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d90c      	bls.n	8004054 <PCD_EP_OutSetupPacket_int+0x7c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	799b      	ldrb	r3, [r3, #6]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d108      	bne.n	8004054 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800404c:	461a      	mov	r2, r3
 800404e:	2101      	movs	r1, #1
 8004050:	f002 ff5c 	bl	8006f0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	4f54300a 	.word	0x4f54300a

08004064 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
 8004070:	4613      	mov	r3, r2
 8004072:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d107      	bne.n	8004092 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004082:	883b      	ldrh	r3, [r7, #0]
 8004084:	0419      	lsls	r1, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	430a      	orrs	r2, r1
 800408e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004090:	e028      	b.n	80040e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	4413      	add	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	e00d      	b.n	80040c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	3340      	adds	r3, #64	@ 0x40
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	4413      	add	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	3301      	adds	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d3ec      	bcc.n	80040a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040cc:	883b      	ldrh	r3, [r7, #0]
 80040ce:	0418      	lsls	r0, r3, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	4302      	orrs	r2, r0
 80040dc:	3340      	adds	r3, #64	@ 0x40
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	887a      	ldrh	r2, [r7, #2]
 8004104:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e267      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d075      	beq.n	8004236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800414a:	4b88      	ldr	r3, [pc, #544]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b04      	cmp	r3, #4
 8004154:	d00c      	beq.n	8004170 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004156:	4b85      	ldr	r3, [pc, #532]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800415e:	2b08      	cmp	r3, #8
 8004160:	d112      	bne.n	8004188 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004162:	4b82      	ldr	r3, [pc, #520]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800416a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800416e:	d10b      	bne.n	8004188 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	4b7e      	ldr	r3, [pc, #504]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d05b      	beq.n	8004234 <HAL_RCC_OscConfig+0x108>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d157      	bne.n	8004234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e242      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004190:	d106      	bne.n	80041a0 <HAL_RCC_OscConfig+0x74>
 8004192:	4b76      	ldr	r3, [pc, #472]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a75      	ldr	r2, [pc, #468]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e01d      	b.n	80041dc <HAL_RCC_OscConfig+0xb0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x98>
 80041aa:	4b70      	ldr	r3, [pc, #448]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6f      	ldr	r2, [pc, #444]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80041b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	4b6d      	ldr	r3, [pc, #436]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a6c      	ldr	r2, [pc, #432]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e00b      	b.n	80041dc <HAL_RCC_OscConfig+0xb0>
 80041c4:	4b69      	ldr	r3, [pc, #420]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a68      	ldr	r2, [pc, #416]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80041ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	4b66      	ldr	r3, [pc, #408]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a65      	ldr	r2, [pc, #404]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80041d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d013      	beq.n	800420c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fd feae 	bl	8001f44 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fd feaa 	bl	8001f44 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	@ 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e207      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b5b      	ldr	r3, [pc, #364]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0xc0>
 800420a:	e014      	b.n	8004236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7fd fe9a 	bl	8001f44 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004214:	f7fd fe96 	bl	8001f44 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b64      	cmp	r3, #100	@ 0x64
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e1f3      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004226:	4b51      	ldr	r3, [pc, #324]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0xe8>
 8004232:	e000      	b.n	8004236 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d063      	beq.n	800430a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004242:	4b4a      	ldr	r3, [pc, #296]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00b      	beq.n	8004266 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424e:	4b47      	ldr	r3, [pc, #284]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004256:	2b08      	cmp	r3, #8
 8004258:	d11c      	bne.n	8004294 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800425a:	4b44      	ldr	r3, [pc, #272]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d116      	bne.n	8004294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004266:	4b41      	ldr	r3, [pc, #260]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_RCC_OscConfig+0x152>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d001      	beq.n	800427e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e1c7      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427e:	4b3b      	ldr	r3, [pc, #236]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	4937      	ldr	r1, [pc, #220]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 800428e:	4313      	orrs	r3, r2
 8004290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004292:	e03a      	b.n	800430a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800429c:	4b34      	ldr	r3, [pc, #208]	@ (8004370 <HAL_RCC_OscConfig+0x244>)
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd fe4f 	bl	8001f44 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042aa:	f7fd fe4b 	bl	8001f44 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e1a8      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042bc:	4b2b      	ldr	r3, [pc, #172]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c8:	4b28      	ldr	r3, [pc, #160]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4925      	ldr	r1, [pc, #148]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	600b      	str	r3, [r1, #0]
 80042dc:	e015      	b.n	800430a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042de:	4b24      	ldr	r3, [pc, #144]	@ (8004370 <HAL_RCC_OscConfig+0x244>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fd fe2e 	bl	8001f44 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ec:	f7fd fe2a 	bl	8001f44 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e187      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fe:	4b1b      	ldr	r3, [pc, #108]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d036      	beq.n	8004384 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d016      	beq.n	800434c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800431e:	4b15      	ldr	r3, [pc, #84]	@ (8004374 <HAL_RCC_OscConfig+0x248>)
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fd fe0e 	bl	8001f44 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432c:	f7fd fe0a 	bl	8001f44 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e167      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433e:	4b0b      	ldr	r3, [pc, #44]	@ (800436c <HAL_RCC_OscConfig+0x240>)
 8004340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x200>
 800434a:	e01b      	b.n	8004384 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434c:	4b09      	ldr	r3, [pc, #36]	@ (8004374 <HAL_RCC_OscConfig+0x248>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004352:	f7fd fdf7 	bl	8001f44 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004358:	e00e      	b.n	8004378 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800435a:	f7fd fdf3 	bl	8001f44 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d907      	bls.n	8004378 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e150      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
 800436c:	40023800 	.word	0x40023800
 8004370:	42470000 	.word	0x42470000
 8004374:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004378:	4b88      	ldr	r3, [pc, #544]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 800437a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1ea      	bne.n	800435a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8097 	beq.w	80044c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004392:	2300      	movs	r3, #0
 8004394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004396:	4b81      	ldr	r3, [pc, #516]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10f      	bne.n	80043c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	4b7d      	ldr	r3, [pc, #500]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	4a7c      	ldr	r2, [pc, #496]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 80043ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043b2:	4b7a      	ldr	r3, [pc, #488]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043be:	2301      	movs	r3, #1
 80043c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c2:	4b77      	ldr	r3, [pc, #476]	@ (80045a0 <HAL_RCC_OscConfig+0x474>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d118      	bne.n	8004400 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ce:	4b74      	ldr	r3, [pc, #464]	@ (80045a0 <HAL_RCC_OscConfig+0x474>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a73      	ldr	r2, [pc, #460]	@ (80045a0 <HAL_RCC_OscConfig+0x474>)
 80043d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043da:	f7fd fdb3 	bl	8001f44 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e2:	f7fd fdaf 	bl	8001f44 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e10c      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f4:	4b6a      	ldr	r3, [pc, #424]	@ (80045a0 <HAL_RCC_OscConfig+0x474>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x2ea>
 8004408:	4b64      	ldr	r3, [pc, #400]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440c:	4a63      	ldr	r2, [pc, #396]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6713      	str	r3, [r2, #112]	@ 0x70
 8004414:	e01c      	b.n	8004450 <HAL_RCC_OscConfig+0x324>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b05      	cmp	r3, #5
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0x30c>
 800441e:	4b5f      	ldr	r3, [pc, #380]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	4a5e      	ldr	r2, [pc, #376]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 8004424:	f043 0304 	orr.w	r3, r3, #4
 8004428:	6713      	str	r3, [r2, #112]	@ 0x70
 800442a:	4b5c      	ldr	r3, [pc, #368]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442e:	4a5b      	ldr	r2, [pc, #364]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	6713      	str	r3, [r2, #112]	@ 0x70
 8004436:	e00b      	b.n	8004450 <HAL_RCC_OscConfig+0x324>
 8004438:	4b58      	ldr	r3, [pc, #352]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443c:	4a57      	ldr	r2, [pc, #348]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	6713      	str	r3, [r2, #112]	@ 0x70
 8004444:	4b55      	ldr	r3, [pc, #340]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004448:	4a54      	ldr	r2, [pc, #336]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 800444a:	f023 0304 	bic.w	r3, r3, #4
 800444e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d015      	beq.n	8004484 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004458:	f7fd fd74 	bl	8001f44 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445e:	e00a      	b.n	8004476 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004460:	f7fd fd70 	bl	8001f44 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0cb      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004476:	4b49      	ldr	r3, [pc, #292]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0ee      	beq.n	8004460 <HAL_RCC_OscConfig+0x334>
 8004482:	e014      	b.n	80044ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004484:	f7fd fd5e 	bl	8001f44 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448c:	f7fd fd5a 	bl	8001f44 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e0b5      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a2:	4b3e      	ldr	r3, [pc, #248]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1ee      	bne.n	800448c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d105      	bne.n	80044c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b4:	4b39      	ldr	r3, [pc, #228]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	4a38      	ldr	r2, [pc, #224]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 80044ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80a1 	beq.w	800460c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044ca:	4b34      	ldr	r3, [pc, #208]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d05c      	beq.n	8004590 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d141      	bne.n	8004562 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044de:	4b31      	ldr	r3, [pc, #196]	@ (80045a4 <HAL_RCC_OscConfig+0x478>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fd fd2e 	bl	8001f44 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fd fd2a 	bl	8001f44 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e087      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fe:	4b27      	ldr	r3, [pc, #156]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69da      	ldr	r2, [r3, #28]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	019b      	lsls	r3, r3, #6
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	3b01      	subs	r3, #1
 8004524:	041b      	lsls	r3, r3, #16
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	061b      	lsls	r3, r3, #24
 800452e:	491b      	ldr	r1, [pc, #108]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004534:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <HAL_RCC_OscConfig+0x478>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453a:	f7fd fd03 	bl	8001f44 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004542:	f7fd fcff 	bl	8001f44 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e05c      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004554:	4b11      	ldr	r3, [pc, #68]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x416>
 8004560:	e054      	b.n	800460c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004562:	4b10      	ldr	r3, [pc, #64]	@ (80045a4 <HAL_RCC_OscConfig+0x478>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fd fcec 	bl	8001f44 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004570:	f7fd fce8 	bl	8001f44 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e045      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	4b06      	ldr	r3, [pc, #24]	@ (800459c <HAL_RCC_OscConfig+0x470>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x444>
 800458e:	e03d      	b.n	800460c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d107      	bne.n	80045a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e038      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
 800459c:	40023800 	.word	0x40023800
 80045a0:	40007000 	.word	0x40007000
 80045a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004618 <HAL_RCC_OscConfig+0x4ec>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d028      	beq.n	8004608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d121      	bne.n	8004608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d11a      	bne.n	8004608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045d8:	4013      	ands	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d111      	bne.n	8004608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	3b01      	subs	r3, #1
 80045f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d107      	bne.n	8004608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004602:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d001      	beq.n	800460c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800

0800461c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0cc      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004630:	4b68      	ldr	r3, [pc, #416]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d90c      	bls.n	8004658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463e:	4b65      	ldr	r3, [pc, #404]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	4b63      	ldr	r3, [pc, #396]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0b8      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d020      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004670:	4b59      	ldr	r3, [pc, #356]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a58      	ldr	r2, [pc, #352]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800467a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004688:	4b53      	ldr	r3, [pc, #332]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4a52      	ldr	r2, [pc, #328]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004694:	4b50      	ldr	r3, [pc, #320]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	494d      	ldr	r1, [pc, #308]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d044      	beq.n	800473c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d107      	bne.n	80046ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	4b47      	ldr	r3, [pc, #284]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d119      	bne.n	80046fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e07f      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d003      	beq.n	80046da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046da:	4b3f      	ldr	r3, [pc, #252]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e06f      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ea:	4b3b      	ldr	r3, [pc, #236]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e067      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046fa:	4b37      	ldr	r3, [pc, #220]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f023 0203 	bic.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4934      	ldr	r1, [pc, #208]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800470c:	f7fd fc1a 	bl	8001f44 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	e00a      	b.n	800472a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004714:	f7fd fc16 	bl	8001f44 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e04f      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472a:	4b2b      	ldr	r3, [pc, #172]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 020c 	and.w	r2, r3, #12
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	429a      	cmp	r2, r3
 800473a:	d1eb      	bne.n	8004714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800473c:	4b25      	ldr	r3, [pc, #148]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d20c      	bcs.n	8004764 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474a:	4b22      	ldr	r3, [pc, #136]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b20      	ldr	r3, [pc, #128]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e032      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004770:	4b19      	ldr	r3, [pc, #100]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4916      	ldr	r1, [pc, #88]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800478e:	4b12      	ldr	r3, [pc, #72]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	490e      	ldr	r1, [pc, #56]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047a2:	f000 f821 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 80047a6:	4602      	mov	r2, r0
 80047a8:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	490a      	ldr	r1, [pc, #40]	@ (80047dc <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	5ccb      	ldrb	r3, [r1, r3]
 80047b6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ba:	4a09      	ldr	r2, [pc, #36]	@ (80047e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047be:	4b09      	ldr	r3, [pc, #36]	@ (80047e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fd fb7a 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40023c00 	.word	0x40023c00
 80047d8:	40023800 	.word	0x40023800
 80047dc:	0800c760 	.word	0x0800c760
 80047e0:	20000000 	.word	0x20000000
 80047e4:	20000004 	.word	0x20000004

080047e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ec:	b094      	sub	sp, #80	@ 0x50
 80047ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004800:	4b79      	ldr	r3, [pc, #484]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b08      	cmp	r3, #8
 800480a:	d00d      	beq.n	8004828 <HAL_RCC_GetSysClockFreq+0x40>
 800480c:	2b08      	cmp	r3, #8
 800480e:	f200 80e1 	bhi.w	80049d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x34>
 8004816:	2b04      	cmp	r3, #4
 8004818:	d003      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x3a>
 800481a:	e0db      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800481c:	4b73      	ldr	r3, [pc, #460]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x204>)
 800481e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004820:	e0db      	b.n	80049da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004822:	4b72      	ldr	r3, [pc, #456]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x204>)
 8004824:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004826:	e0d8      	b.n	80049da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004828:	4b6f      	ldr	r3, [pc, #444]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004830:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004832:	4b6d      	ldr	r3, [pc, #436]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d063      	beq.n	8004906 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800483e:	4b6a      	ldr	r3, [pc, #424]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	099b      	lsrs	r3, r3, #6
 8004844:	2200      	movs	r2, #0
 8004846:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004848:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800484a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004850:	633b      	str	r3, [r7, #48]	@ 0x30
 8004852:	2300      	movs	r3, #0
 8004854:	637b      	str	r3, [r7, #52]	@ 0x34
 8004856:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800485a:	4622      	mov	r2, r4
 800485c:	462b      	mov	r3, r5
 800485e:	f04f 0000 	mov.w	r0, #0
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	0159      	lsls	r1, r3, #5
 8004868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800486c:	0150      	lsls	r0, r2, #5
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4621      	mov	r1, r4
 8004874:	1a51      	subs	r1, r2, r1
 8004876:	6139      	str	r1, [r7, #16]
 8004878:	4629      	mov	r1, r5
 800487a:	eb63 0301 	sbc.w	r3, r3, r1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800488c:	4659      	mov	r1, fp
 800488e:	018b      	lsls	r3, r1, #6
 8004890:	4651      	mov	r1, sl
 8004892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004896:	4651      	mov	r1, sl
 8004898:	018a      	lsls	r2, r1, #6
 800489a:	4651      	mov	r1, sl
 800489c:	ebb2 0801 	subs.w	r8, r2, r1
 80048a0:	4659      	mov	r1, fp
 80048a2:	eb63 0901 	sbc.w	r9, r3, r1
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ba:	4690      	mov	r8, r2
 80048bc:	4699      	mov	r9, r3
 80048be:	4623      	mov	r3, r4
 80048c0:	eb18 0303 	adds.w	r3, r8, r3
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	462b      	mov	r3, r5
 80048c8:	eb49 0303 	adc.w	r3, r9, r3
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048da:	4629      	mov	r1, r5
 80048dc:	028b      	lsls	r3, r1, #10
 80048de:	4621      	mov	r1, r4
 80048e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048e4:	4621      	mov	r1, r4
 80048e6:	028a      	lsls	r2, r1, #10
 80048e8:	4610      	mov	r0, r2
 80048ea:	4619      	mov	r1, r3
 80048ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ee:	2200      	movs	r2, #0
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048f8:	f7fc f956 	bl	8000ba8 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4613      	mov	r3, r2
 8004902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004904:	e058      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004906:	4b38      	ldr	r3, [pc, #224]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	099b      	lsrs	r3, r3, #6
 800490c:	2200      	movs	r2, #0
 800490e:	4618      	mov	r0, r3
 8004910:	4611      	mov	r1, r2
 8004912:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004916:	623b      	str	r3, [r7, #32]
 8004918:	2300      	movs	r3, #0
 800491a:	627b      	str	r3, [r7, #36]	@ 0x24
 800491c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	f04f 0000 	mov.w	r0, #0
 8004928:	f04f 0100 	mov.w	r1, #0
 800492c:	0159      	lsls	r1, r3, #5
 800492e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004932:	0150      	lsls	r0, r2, #5
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4641      	mov	r1, r8
 800493a:	ebb2 0a01 	subs.w	sl, r2, r1
 800493e:	4649      	mov	r1, r9
 8004940:	eb63 0b01 	sbc.w	fp, r3, r1
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004950:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004954:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004958:	ebb2 040a 	subs.w	r4, r2, sl
 800495c:	eb63 050b 	sbc.w	r5, r3, fp
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	00eb      	lsls	r3, r5, #3
 800496a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800496e:	00e2      	lsls	r2, r4, #3
 8004970:	4614      	mov	r4, r2
 8004972:	461d      	mov	r5, r3
 8004974:	4643      	mov	r3, r8
 8004976:	18e3      	adds	r3, r4, r3
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	464b      	mov	r3, r9
 800497c:	eb45 0303 	adc.w	r3, r5, r3
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800498e:	4629      	mov	r1, r5
 8004990:	028b      	lsls	r3, r1, #10
 8004992:	4621      	mov	r1, r4
 8004994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004998:	4621      	mov	r1, r4
 800499a:	028a      	lsls	r2, r1, #10
 800499c:	4610      	mov	r0, r2
 800499e:	4619      	mov	r1, r3
 80049a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a2:	2200      	movs	r2, #0
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	61fa      	str	r2, [r7, #28]
 80049a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ac:	f7fc f8fc 	bl	8000ba8 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4613      	mov	r3, r2
 80049b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049b8:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	3301      	adds	r3, #1
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80049c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049d2:	e002      	b.n	80049da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049d4:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x204>)
 80049d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3750      	adds	r7, #80	@ 0x50
 80049e0:	46bd      	mov	sp, r7
 80049e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800
 80049ec:	00f42400 	.word	0x00f42400

080049f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b03      	ldr	r3, [pc, #12]	@ (8004a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000000 	.word	0x20000000

08004a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e07b      	b.n	8004b12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d108      	bne.n	8004a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a2a:	d009      	beq.n	8004a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	61da      	str	r2, [r3, #28]
 8004a32:	e005      	b.n	8004a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc ffee 	bl	8001a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac4:	ea42 0103 	orr.w	r1, r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	0c1b      	lsrs	r3, r3, #16
 8004ade:	f003 0104 	and.w	r1, r3, #4
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	f003 0210 	and.w	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b088      	sub	sp, #32
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b2a:	f7fd fa0b 	bl	8001f44 <HAL_GetTick>
 8004b2e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d001      	beq.n	8004b44 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
 8004b42:	e12a      	b.n	8004d9a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_SPI_Transmit+0x36>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e122      	b.n	8004d9a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_SPI_Transmit+0x48>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e11b      	b.n	8004d9a <HAL_SPI_Transmit+0x280>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb0:	d10f      	bne.n	8004bd2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d007      	beq.n	8004bf0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bf8:	d152      	bne.n	8004ca0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Transmit+0xee>
 8004c02:	8b7b      	ldrh	r3, [r7, #26]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d145      	bne.n	8004c94 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0c:	881a      	ldrh	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c18:	1c9a      	adds	r2, r3, #2
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c2c:	e032      	b.n	8004c94 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d112      	bne.n	8004c62 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4c:	1c9a      	adds	r2, r3, #2
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c60:	e018      	b.n	8004c94 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c62:	f7fd f96f 	bl	8001f44 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d803      	bhi.n	8004c7a <HAL_SPI_Transmit+0x160>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d102      	bne.n	8004c80 <HAL_SPI_Transmit+0x166>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e082      	b.n	8004d9a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1c7      	bne.n	8004c2e <HAL_SPI_Transmit+0x114>
 8004c9e:	e053      	b.n	8004d48 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_SPI_Transmit+0x194>
 8004ca8:	8b7b      	ldrh	r3, [r7, #26]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d147      	bne.n	8004d3e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cd4:	e033      	b.n	8004d3e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d113      	bne.n	8004d0c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	7812      	ldrb	r2, [r2, #0]
 8004cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d0a:	e018      	b.n	8004d3e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d0c:	f7fd f91a 	bl	8001f44 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d803      	bhi.n	8004d24 <HAL_SPI_Transmit+0x20a>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d102      	bne.n	8004d2a <HAL_SPI_Transmit+0x210>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e02d      	b.n	8004d9a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1c6      	bne.n	8004cd6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fdd1 	bl	80058f4 <SPI_EndRxTxTransaction>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
  }
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b08a      	sub	sp, #40	@ 0x28
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004db0:	2301      	movs	r3, #1
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db4:	f7fd f8c6 	bl	8001f44 <HAL_GetTick>
 8004db8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dc0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004dc8:	887b      	ldrh	r3, [r7, #2]
 8004dca:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dcc:	7ffb      	ldrb	r3, [r7, #31]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d00c      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x4a>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd8:	d106      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x46>
 8004de2:	7ffb      	ldrb	r3, [r7, #31]
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d001      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
 8004dea:	e17f      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0x5c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0x5c>
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e174      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x6e>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e16d      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34a>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d003      	beq.n	8004e2c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2205      	movs	r2, #5
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	887a      	ldrh	r2, [r7, #2]
 8004e42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	887a      	ldrh	r2, [r7, #2]
 8004e4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6c:	2b40      	cmp	r3, #64	@ 0x40
 8004e6e:	d007      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e88:	d17e      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_SPI_TransmitReceive+0xf6>
 8004e92:	8afb      	ldrh	r3, [r7, #22]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d16c      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	881a      	ldrh	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea8:	1c9a      	adds	r2, r3, #2
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ebc:	e059      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d11b      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x162>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <HAL_SPI_TransmitReceive+0x162>
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d113      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee0:	881a      	ldrh	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	1c9a      	adds	r2, r3, #2
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d119      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x1a4>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d014      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	b292      	uxth	r2, r2
 8004f28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2e:	1c9a      	adds	r2, r3, #2
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f42:	2301      	movs	r3, #1
 8004f44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f46:	f7fc fffd 	bl	8001f44 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d80d      	bhi.n	8004f72 <HAL_SPI_TransmitReceive+0x1d0>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d009      	beq.n	8004f72 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e0bc      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1a0      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x11c>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d19b      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x11c>
 8004f86:	e082      	b.n	800508e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_SPI_TransmitReceive+0x1f4>
 8004f90:	8afb      	ldrh	r3, [r7, #22]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d171      	bne.n	800507a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fbc:	e05d      	b.n	800507a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d11c      	bne.n	8005006 <HAL_SPI_TransmitReceive+0x264>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d017      	beq.n	8005006 <HAL_SPI_TransmitReceive+0x264>
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d114      	bne.n	8005006 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	7812      	ldrb	r2, [r2, #0]
 8004fe8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d119      	bne.n	8005048 <HAL_SPI_TransmitReceive+0x2a6>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d014      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005044:	2301      	movs	r3, #1
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005048:	f7fc ff7c 	bl	8001f44 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005054:	429a      	cmp	r2, r3
 8005056:	d803      	bhi.n	8005060 <HAL_SPI_TransmitReceive+0x2be>
 8005058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d102      	bne.n	8005066 <HAL_SPI_TransmitReceive+0x2c4>
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e038      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d19c      	bne.n	8004fbe <HAL_SPI_TransmitReceive+0x21c>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d197      	bne.n	8004fbe <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800508e:	6a3a      	ldr	r2, [r7, #32]
 8005090:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fc2e 	bl	80058f4 <SPI_EndRxTxTransaction>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e01d      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050b8:	2300      	movs	r3, #0
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
  }
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3728      	adds	r7, #40	@ 0x28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005108:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d00c      	beq.n	8005130 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511c:	d106      	bne.n	800512c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <HAL_SPI_TransmitReceive_DMA+0x38>
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d001      	beq.n	8005130 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
 800512e:	e0cf      	b.n	80052d0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800513c:	887b      	ldrh	r3, [r7, #2]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0c4      	b.n	80052d0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x60>
 8005150:	2302      	movs	r3, #2
 8005152:	e0bd      	b.n	80052d0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b04      	cmp	r3, #4
 8005166:	d003      	beq.n	8005170 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2205      	movs	r2, #5
 800516c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	887a      	ldrh	r2, [r7, #2]
 8005186:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	887a      	ldrh	r2, [r7, #2]
 8005192:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	887a      	ldrh	r2, [r7, #2]
 8005198:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d108      	bne.n	80051c4 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b6:	4a48      	ldr	r2, [pc, #288]	@ (80052d8 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80051b8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051be:	4a47      	ldr	r2, [pc, #284]	@ (80052dc <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80051c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051c2:	e007      	b.n	80051d4 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c8:	4a45      	ldr	r2, [pc, #276]	@ (80052e0 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80051ca:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d0:	4a44      	ldr	r2, [pc, #272]	@ (80052e4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80051d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d8:	4a43      	ldr	r2, [pc, #268]	@ (80052e8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80051da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e0:	2200      	movs	r2, #0
 80051e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	4619      	mov	r1, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80051fc:	f7fd f892 	bl	8002324 <HAL_DMA_Start_IT>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520a:	f043 0210 	orr.w	r2, r3, #16
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e058      	b.n	80052d0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0201 	orr.w	r2, r2, #1
 800522c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005232:	2200      	movs	r2, #0
 8005234:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523a:	2200      	movs	r2, #0
 800523c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005242:	2200      	movs	r2, #0
 8005244:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800524a:	2200      	movs	r2, #0
 800524c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005256:	4619      	mov	r1, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005264:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005266:	f7fd f85d 	bl	8002324 <HAL_DMA_Start_IT>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005274:	f043 0210 	orr.w	r2, r3, #16
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e023      	b.n	80052d0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005292:	2b40      	cmp	r3, #64	@ 0x40
 8005294:	d007      	beq.n	80052a6 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052a4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0220 	orr.w	r2, r2, #32
 80052bc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0202 	orr.w	r2, r2, #2
 80052cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	08005679 	.word	0x08005679
 80052dc:	08005541 	.word	0x08005541
 80052e0:	08005695 	.word	0x08005695
 80052e4:	080055e9 	.word	0x080055e9
 80052e8:	080056b1 	.word	0x080056b1

080052ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10e      	bne.n	800532c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4798      	blx	r3
    return;
 800532a:	e0ce      	b.n	80054ca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_SPI_IRQHandler+0x5e>
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
    return;
 8005348:	e0bf      	b.n	80054ca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <HAL_SPI_IRQHandler+0x7e>
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80b0 	beq.w	80054ca <HAL_SPI_IRQHandler+0x1de>
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80aa 	beq.w	80054ca <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d023      	beq.n	80053c8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b03      	cmp	r3, #3
 800538a:	d011      	beq.n	80053b0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005390:	f043 0204 	orr.w	r2, r3, #4
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	e00b      	b.n	80053c8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	693b      	ldr	r3, [r7, #16]
        return;
 80053c6:	e080      	b.n	80054ca <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d6:	f043 0201 	orr.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540a:	f043 0208 	orr.w	r2, r3, #8
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005424:	2b00      	cmp	r3, #0
 8005426:	d04f      	beq.n	80054c8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005436:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <HAL_SPI_IRQHandler+0x168>
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d034      	beq.n	80054be <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0203 	bic.w	r2, r2, #3
 8005462:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d011      	beq.n	8005490 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005470:	4a17      	ldr	r2, [pc, #92]	@ (80054d0 <HAL_SPI_IRQHandler+0x1e4>)
 8005472:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005478:	4618      	mov	r0, r3
 800547a:	f7fc ffab 	bl	80023d4 <HAL_DMA_Abort_IT>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005488:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005494:	2b00      	cmp	r3, #0
 8005496:	d016      	beq.n	80054c6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800549c:	4a0c      	ldr	r2, [pc, #48]	@ (80054d0 <HAL_SPI_IRQHandler+0x1e4>)
 800549e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fc ff95 	bl	80023d4 <HAL_DMA_Abort_IT>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80054bc:	e003      	b.n	80054c6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f826 	bl	8005510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80054c4:	e000      	b.n	80054c8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80054c6:	bf00      	nop
    return;
 80054c8:	bf00      	nop
  }
}
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	080056f1 	.word	0x080056f1

080054d4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005532:	b2db      	uxtb	r3, r3
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800554e:	f7fc fcf9 	bl	8001f44 <HAL_GetTick>
 8005552:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005562:	d03b      	beq.n	80055dc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0220 	bic.w	r2, r2, #32
 8005572:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10d      	bne.n	8005598 <SPI_DMAReceiveCplt+0x58>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005584:	d108      	bne.n	8005598 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0203 	bic.w	r2, r2, #3
 8005594:	605a      	str	r2, [r3, #4]
 8005596:	e007      	b.n	80055a8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	2164      	movs	r1, #100	@ 0x64
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f93b 	bl	8005828 <SPI_EndRxTransaction>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff ff9b 	bl	8005510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80055da:	e002      	b.n	80055e2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff ff79 	bl	80054d4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f6:	f7fc fca5 	bl	8001f44 <HAL_GetTick>
 80055fa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800560a:	d02f      	beq.n	800566c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0220 	bic.w	r2, r2, #32
 800561a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	2164      	movs	r1, #100	@ 0x64
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f967 	bl	80058f4 <SPI_EndRxTxTransaction>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005630:	f043 0220 	orr.w	r2, r3, #32
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0203 	bic.w	r2, r2, #3
 8005646:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f7ff ff53 	bl	8005510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800566a:	e002      	b.n	8005672 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7fb ffa5 	bl	80015bc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff ff2e 	bl	80054e8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff ff2a 	bl	80054fc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0203 	bic.w	r2, r2, #3
 80056cc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d2:	f043 0210 	orr.w	r2, r3, #16
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff ff14 	bl	8005510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056e8:	bf00      	nop
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7ff ff00 	bl	8005510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005710:	bf00      	nop
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005728:	f7fc fc0c 	bl	8001f44 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	4413      	add	r3, r2
 8005736:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005738:	f7fc fc04 	bl	8001f44 <HAL_GetTick>
 800573c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800573e:	4b39      	ldr	r3, [pc, #228]	@ (8005824 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	015b      	lsls	r3, r3, #5
 8005744:	0d1b      	lsrs	r3, r3, #20
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	fb02 f303 	mul.w	r3, r2, r3
 800574c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800574e:	e054      	b.n	80057fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d050      	beq.n	80057fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005758:	f7fc fbf4 	bl	8001f44 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	429a      	cmp	r2, r3
 8005766:	d902      	bls.n	800576e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d13d      	bne.n	80057ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800577c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005786:	d111      	bne.n	80057ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005790:	d004      	beq.n	800579c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579a:	d107      	bne.n	80057ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b4:	d10f      	bne.n	80057d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e017      	b.n	800581a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4013      	ands	r3, r2
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	429a      	cmp	r2, r3
 8005808:	bf0c      	ite	eq
 800580a:	2301      	moveq	r3, #1
 800580c:	2300      	movne	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	429a      	cmp	r2, r3
 8005816:	d19b      	bne.n	8005750 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000000 	.word	0x20000000

08005828 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af02      	add	r7, sp, #8
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800583c:	d111      	bne.n	8005862 <SPI_EndRxTransaction+0x3a>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005846:	d004      	beq.n	8005852 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005850:	d107      	bne.n	8005862 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005860:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800586a:	d12a      	bne.n	80058c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005874:	d012      	beq.n	800589c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	2180      	movs	r1, #128	@ 0x80
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f7ff ff49 	bl	8005718 <SPI_WaitFlagStateUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d02d      	beq.n	80058e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005890:	f043 0220 	orr.w	r2, r3, #32
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e026      	b.n	80058ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2200      	movs	r2, #0
 80058a4:	2101      	movs	r1, #1
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff ff36 	bl	8005718 <SPI_WaitFlagStateUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01a      	beq.n	80058e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b6:	f043 0220 	orr.w	r2, r3, #32
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e013      	b.n	80058ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2200      	movs	r2, #0
 80058ca:	2101      	movs	r1, #1
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff ff23 	bl	8005718 <SPI_WaitFlagStateUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e000      	b.n	80058ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2201      	movs	r2, #1
 8005908:	2102      	movs	r1, #2
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff ff04 	bl	8005718 <SPI_WaitFlagStateUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800591a:	f043 0220 	orr.w	r2, r3, #32
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e032      	b.n	800598c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005926:	4b1b      	ldr	r3, [pc, #108]	@ (8005994 <SPI_EndRxTxTransaction+0xa0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1b      	ldr	r2, [pc, #108]	@ (8005998 <SPI_EndRxTxTransaction+0xa4>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	0d5b      	lsrs	r3, r3, #21
 8005932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005944:	d112      	bne.n	800596c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	2180      	movs	r1, #128	@ 0x80
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff fee1 	bl	8005718 <SPI_WaitFlagStateUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d016      	beq.n	800598a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e00f      	b.n	800598c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	3b01      	subs	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005982:	2b80      	cmp	r3, #128	@ 0x80
 8005984:	d0f2      	beq.n	800596c <SPI_EndRxTxTransaction+0x78>
 8005986:	e000      	b.n	800598a <SPI_EndRxTxTransaction+0x96>
        break;
 8005988:	bf00      	nop
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000000 	.word	0x20000000
 8005998:	165e9f81 	.word	0x165e9f81

0800599c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800599c:	b084      	sub	sp, #16
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	f107 001c 	add.w	r0, r7, #28
 80059aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d123      	bne.n	80059fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80059ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d105      	bne.n	80059f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f001 fae8 	bl	8006fc8 <USB_CoreReset>
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]
 80059fc:	e01b      	b.n	8005a36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 fadc 	bl	8006fc8 <USB_CoreReset>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a28:	e005      	b.n	8005a36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a36:	7fbb      	ldrb	r3, [r7, #30]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d10b      	bne.n	8005a54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f043 0206 	orr.w	r2, r3, #6
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a60:	b004      	add	sp, #16
 8005a62:	4770      	bx	lr

08005a64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d165      	bne.n	8005b44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4a41      	ldr	r2, [pc, #260]	@ (8005b80 <USB_SetTurnaroundTime+0x11c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d906      	bls.n	8005a8e <USB_SetTurnaroundTime+0x2a>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4a40      	ldr	r2, [pc, #256]	@ (8005b84 <USB_SetTurnaroundTime+0x120>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d202      	bcs.n	8005a8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a88:	230f      	movs	r3, #15
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	e062      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4a3c      	ldr	r2, [pc, #240]	@ (8005b84 <USB_SetTurnaroundTime+0x120>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d306      	bcc.n	8005aa4 <USB_SetTurnaroundTime+0x40>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4a3b      	ldr	r2, [pc, #236]	@ (8005b88 <USB_SetTurnaroundTime+0x124>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d202      	bcs.n	8005aa4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a9e:	230e      	movs	r3, #14
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e057      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4a38      	ldr	r2, [pc, #224]	@ (8005b88 <USB_SetTurnaroundTime+0x124>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d306      	bcc.n	8005aba <USB_SetTurnaroundTime+0x56>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4a37      	ldr	r2, [pc, #220]	@ (8005b8c <USB_SetTurnaroundTime+0x128>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d202      	bcs.n	8005aba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ab4:	230d      	movs	r3, #13
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	e04c      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4a33      	ldr	r2, [pc, #204]	@ (8005b8c <USB_SetTurnaroundTime+0x128>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d306      	bcc.n	8005ad0 <USB_SetTurnaroundTime+0x6c>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4a32      	ldr	r2, [pc, #200]	@ (8005b90 <USB_SetTurnaroundTime+0x12c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d802      	bhi.n	8005ad0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005aca:	230c      	movs	r3, #12
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e041      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8005b90 <USB_SetTurnaroundTime+0x12c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d906      	bls.n	8005ae6 <USB_SetTurnaroundTime+0x82>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4a2e      	ldr	r2, [pc, #184]	@ (8005b94 <USB_SetTurnaroundTime+0x130>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d802      	bhi.n	8005ae6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ae0:	230b      	movs	r3, #11
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e036      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8005b94 <USB_SetTurnaroundTime+0x130>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d906      	bls.n	8005afc <USB_SetTurnaroundTime+0x98>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4a29      	ldr	r2, [pc, #164]	@ (8005b98 <USB_SetTurnaroundTime+0x134>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d802      	bhi.n	8005afc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005af6:	230a      	movs	r3, #10
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	e02b      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4a26      	ldr	r2, [pc, #152]	@ (8005b98 <USB_SetTurnaroundTime+0x134>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d906      	bls.n	8005b12 <USB_SetTurnaroundTime+0xae>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4a25      	ldr	r2, [pc, #148]	@ (8005b9c <USB_SetTurnaroundTime+0x138>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d202      	bcs.n	8005b12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b0c:	2309      	movs	r3, #9
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	e020      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4a21      	ldr	r2, [pc, #132]	@ (8005b9c <USB_SetTurnaroundTime+0x138>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d306      	bcc.n	8005b28 <USB_SetTurnaroundTime+0xc4>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4a20      	ldr	r2, [pc, #128]	@ (8005ba0 <USB_SetTurnaroundTime+0x13c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d802      	bhi.n	8005b28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b22:	2308      	movs	r3, #8
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	e015      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba0 <USB_SetTurnaroundTime+0x13c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d906      	bls.n	8005b3e <USB_SetTurnaroundTime+0xda>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba4 <USB_SetTurnaroundTime+0x140>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d202      	bcs.n	8005b3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b38:	2307      	movs	r3, #7
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e00a      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b3e:	2306      	movs	r3, #6
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	e007      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b44:	79fb      	ldrb	r3, [r7, #7]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b4a:	2309      	movs	r3, #9
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	e001      	b.n	8005b54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b50:	2309      	movs	r3, #9
 8005b52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	029b      	lsls	r3, r3, #10
 8005b68:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	00d8acbf 	.word	0x00d8acbf
 8005b84:	00e4e1c0 	.word	0x00e4e1c0
 8005b88:	00f42400 	.word	0x00f42400
 8005b8c:	01067380 	.word	0x01067380
 8005b90:	011a499f 	.word	0x011a499f
 8005b94:	01312cff 	.word	0x01312cff
 8005b98:	014ca43f 	.word	0x014ca43f
 8005b9c:	016e3600 	.word	0x016e3600
 8005ba0:	01a6ab1f 	.word	0x01a6ab1f
 8005ba4:	01e84800 	.word	0x01e84800

08005ba8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f043 0201 	orr.w	r2, r3, #1
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f023 0201 	bic.w	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d115      	bne.n	8005c3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c1a:	200a      	movs	r0, #10
 8005c1c:	f7fc f99e 	bl	8001f5c <HAL_Delay>
      ms += 10U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	330a      	adds	r3, #10
 8005c24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 f93f 	bl	8006eaa <USB_GetMode>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d01e      	beq.n	8005c70 <USB_SetCurrentMode+0x84>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c36:	d9f0      	bls.n	8005c1a <USB_SetCurrentMode+0x2e>
 8005c38:	e01a      	b.n	8005c70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d115      	bne.n	8005c6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c4c:	200a      	movs	r0, #10
 8005c4e:	f7fc f985 	bl	8001f5c <HAL_Delay>
      ms += 10U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	330a      	adds	r3, #10
 8005c56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 f926 	bl	8006eaa <USB_GetMode>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <USB_SetCurrentMode+0x84>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c68:	d9f0      	bls.n	8005c4c <USB_SetCurrentMode+0x60>
 8005c6a:	e001      	b.n	8005c70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e005      	b.n	8005c7c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2bc8      	cmp	r3, #200	@ 0xc8
 8005c74:	d101      	bne.n	8005c7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e000      	b.n	8005c7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c84:	b084      	sub	sp, #16
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	e009      	b.n	8005cb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3340      	adds	r3, #64	@ 0x40
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b0e      	cmp	r3, #14
 8005cbc:	d9f2      	bls.n	8005ca4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d11c      	bne.n	8005d00 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd4:	f043 0302 	orr.w	r3, r3, #2
 8005cd8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	639a      	str	r2, [r3, #56]	@ 0x38
 8005cfe:	e00b      	b.n	8005d18 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d10d      	bne.n	8005d48 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d34:	2100      	movs	r1, #0
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f968 	bl	800600c <USB_SetDevSpeed>
 8005d3c:	e008      	b.n	8005d50 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d3e:	2101      	movs	r1, #1
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f963 	bl	800600c <USB_SetDevSpeed>
 8005d46:	e003      	b.n	8005d50 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d48:	2103      	movs	r1, #3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f95e 	bl	800600c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d50:	2110      	movs	r1, #16
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f8fa 	bl	8005f4c <USB_FlushTxFifo>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f924 	bl	8005fb0 <USB_FlushRxFifo>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d78:	461a      	mov	r2, r3
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d84:	461a      	mov	r2, r3
 8005d86:	2300      	movs	r3, #0
 8005d88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d90:	461a      	mov	r2, r3
 8005d92:	2300      	movs	r3, #0
 8005d94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d96:	2300      	movs	r3, #0
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	e043      	b.n	8005e24 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005db2:	d118      	bne.n	8005de6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e013      	b.n	8005df8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	e008      	b.n	8005df8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df2:	461a      	mov	r2, r3
 8005df4:	2300      	movs	r3, #0
 8005df6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e04:	461a      	mov	r2, r3
 8005e06:	2300      	movs	r3, #0
 8005e08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e16:	461a      	mov	r2, r3
 8005e18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	3301      	adds	r3, #1
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e28:	461a      	mov	r2, r3
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d3b5      	bcc.n	8005d9c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	e043      	b.n	8005ebe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e4c:	d118      	bne.n	8005e80 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e60:	461a      	mov	r2, r3
 8005e62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	e013      	b.n	8005e92 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e76:	461a      	mov	r2, r3
 8005e78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e008      	b.n	8005e92 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005eb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d3b5      	bcc.n	8005e36 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005edc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005eea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005eec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d105      	bne.n	8005f00 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	f043 0210 	orr.w	r2, r3, #16
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	4b10      	ldr	r3, [pc, #64]	@ (8005f48 <USB_DevInit+0x2c4>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f043 0208 	orr.w	r2, r3, #8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d107      	bne.n	8005f38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f30:	f043 0304 	orr.w	r3, r3, #4
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f44:	b004      	add	sp, #16
 8005f46:	4770      	bx	lr
 8005f48:	803c3800 	.word	0x803c3800

08005f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f66:	d901      	bls.n	8005f6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e01b      	b.n	8005fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	daf2      	bge.n	8005f5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	019b      	lsls	r3, r3, #6
 8005f7c:	f043 0220 	orr.w	r2, r3, #32
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3301      	adds	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f90:	d901      	bls.n	8005f96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e006      	b.n	8005fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d0f0      	beq.n	8005f84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fc8:	d901      	bls.n	8005fce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e018      	b.n	8006000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	daf2      	bge.n	8005fbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2210      	movs	r2, #16
 8005fde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fec:	d901      	bls.n	8005ff2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e006      	b.n	8006000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d0f0      	beq.n	8005fe0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	68f9      	ldr	r1, [r7, #12]
 8006028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800602c:	4313      	orrs	r3, r2
 800602e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800603e:	b480      	push	{r7}
 8006040:	b087      	sub	sp, #28
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 0306 	and.w	r3, r3, #6
 8006056:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d102      	bne.n	8006064 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]
 8006062:	e00a      	b.n	800607a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d002      	beq.n	8006070 <USB_GetDevSpeed+0x32>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b06      	cmp	r3, #6
 800606e:	d102      	bne.n	8006076 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006070:	2302      	movs	r3, #2
 8006072:	75fb      	strb	r3, [r7, #23]
 8006074:	e001      	b.n	800607a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006076:	230f      	movs	r3, #15
 8006078:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800607a:	7dfb      	ldrb	r3, [r7, #23]
}
 800607c:	4618      	mov	r0, r3
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d13a      	bne.n	800611a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	2101      	movs	r1, #1
 80060b6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d155      	bne.n	8006188 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	791b      	ldrb	r3, [r3, #4]
 80060f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	059b      	lsls	r3, r3, #22
 80060fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006100:	4313      	orrs	r3, r2
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	e036      	b.n	8006188 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006120:	69da      	ldr	r2, [r3, #28]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	2101      	movs	r1, #1
 800612c:	fa01 f303 	lsl.w	r3, r1, r3
 8006130:	041b      	lsls	r3, r3, #16
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006138:	4313      	orrs	r3, r2
 800613a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d11a      	bne.n	8006188 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	791b      	ldrb	r3, [r3, #4]
 800616c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800616e:	430b      	orrs	r3, r1
 8006170:	4313      	orrs	r3, r2
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	440a      	add	r2, r1
 800617a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800617e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006186:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d161      	bne.n	8006278 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ca:	d11f      	bne.n	800620c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006206:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800620a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	2101      	movs	r1, #1
 800621e:	fa01 f303 	lsl.w	r3, r1, r3
 8006222:	b29b      	uxth	r3, r3
 8006224:	43db      	mvns	r3, r3
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800622c:	4013      	ands	r3, r2
 800622e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	2101      	movs	r1, #1
 8006242:	fa01 f303 	lsl.w	r3, r1, r3
 8006246:	b29b      	uxth	r3, r3
 8006248:	43db      	mvns	r3, r3
 800624a:	68f9      	ldr	r1, [r7, #12]
 800624c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006250:	4013      	ands	r3, r2
 8006252:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	0159      	lsls	r1, r3, #5
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	440b      	add	r3, r1
 800626a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626e:	4619      	mov	r1, r3
 8006270:	4b35      	ldr	r3, [pc, #212]	@ (8006348 <USB_DeactivateEndpoint+0x1b0>)
 8006272:	4013      	ands	r3, r2
 8006274:	600b      	str	r3, [r1, #0]
 8006276:	e060      	b.n	800633a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800628a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800628e:	d11f      	bne.n	80062d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	2101      	movs	r1, #1
 80062e2:	fa01 f303 	lsl.w	r3, r1, r3
 80062e6:	041b      	lsls	r3, r3, #16
 80062e8:	43db      	mvns	r3, r3
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062f0:	4013      	ands	r3, r2
 80062f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	2101      	movs	r1, #1
 8006306:	fa01 f303 	lsl.w	r3, r1, r3
 800630a:	041b      	lsls	r3, r3, #16
 800630c:	43db      	mvns	r3, r3
 800630e:	68f9      	ldr	r1, [r7, #12]
 8006310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006314:	4013      	ands	r3, r2
 8006316:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	0159      	lsls	r1, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	440b      	add	r3, r1
 800632e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006332:	4619      	mov	r1, r3
 8006334:	4b05      	ldr	r3, [pc, #20]	@ (800634c <USB_DeactivateEndpoint+0x1b4>)
 8006336:	4013      	ands	r3, r2
 8006338:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	ec337800 	.word	0xec337800
 800634c:	eff37800 	.word	0xeff37800

08006350 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	@ 0x28
 8006354:	af02      	add	r7, sp, #8
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b01      	cmp	r3, #1
 800636e:	f040 817f 	bne.w	8006670 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d132      	bne.n	80063e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006394:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006398:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800639c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d8:	0cdb      	lsrs	r3, r3, #19
 80063da:	04db      	lsls	r3, r3, #19
 80063dc:	6113      	str	r3, [r2, #16]
 80063de:	e097      	b.n	8006510 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063fa:	0cdb      	lsrs	r3, r3, #19
 80063fc:	04db      	lsls	r3, r3, #19
 80063fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	440a      	add	r2, r1
 8006416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800641a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800641e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006422:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11a      	bne.n	8006460 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691a      	ldr	r2, [r3, #16]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	d903      	bls.n	800643e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006458:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800645c:	6113      	str	r3, [r2, #16]
 800645e:	e044      	b.n	80064ea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	4413      	add	r3, r2
 800646a:	1e5a      	subs	r2, r3, #1
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	fbb2 f3f3 	udiv	r3, r2, r3
 8006474:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	8afb      	ldrh	r3, [r7, #22]
 8006486:	04d9      	lsls	r1, r3, #19
 8006488:	4ba4      	ldr	r3, [pc, #656]	@ (800671c <USB_EPStartXfer+0x3cc>)
 800648a:	400b      	ands	r3, r1
 800648c:	69b9      	ldr	r1, [r7, #24]
 800648e:	0148      	lsls	r0, r1, #5
 8006490:	69f9      	ldr	r1, [r7, #28]
 8006492:	4401      	add	r1, r0
 8006494:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006498:	4313      	orrs	r3, r2
 800649a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	791b      	ldrb	r3, [r3, #4]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d122      	bne.n	80064ea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064be:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80064c2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d0:	691a      	ldr	r2, [r3, #16]
 80064d2:	8afb      	ldrh	r3, [r7, #22]
 80064d4:	075b      	lsls	r3, r3, #29
 80064d6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80064da:	69b9      	ldr	r1, [r7, #24]
 80064dc:	0148      	lsls	r0, r1, #5
 80064de:	69f9      	ldr	r1, [r7, #28]
 80064e0:	4401      	add	r1, r0
 80064e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80064e6:	4313      	orrs	r3, r2
 80064e8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006500:	69b9      	ldr	r1, [r7, #24]
 8006502:	0148      	lsls	r0, r1, #5
 8006504:	69f9      	ldr	r1, [r7, #28]
 8006506:	4401      	add	r1, r0
 8006508:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800650c:	4313      	orrs	r3, r2
 800650e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d14b      	bne.n	80065ae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800652a:	461a      	mov	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	791b      	ldrb	r3, [r3, #4]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d128      	bne.n	800658c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006546:	2b00      	cmp	r3, #0
 8006548:	d110      	bne.n	800656c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	440a      	add	r2, r1
 8006560:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006564:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e00f      	b.n	800658c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	440a      	add	r2, r1
 8006582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800658a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e166      	b.n	800687c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	791b      	ldrb	r3, [r3, #4]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d015      	beq.n	8006602 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 814e 	beq.w	800687c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	2101      	movs	r1, #1
 80065f2:	fa01 f303 	lsl.w	r3, r1, r3
 80065f6:	69f9      	ldr	r1, [r7, #28]
 80065f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065fc:	4313      	orrs	r3, r2
 80065fe:	634b      	str	r3, [r1, #52]	@ 0x34
 8006600:	e13c      	b.n	800687c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800660e:	2b00      	cmp	r3, #0
 8006610:	d110      	bne.n	8006634 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	0151      	lsls	r1, r2, #5
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	440a      	add	r2, r1
 8006628:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800662c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	e00f      	b.n	8006654 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	440a      	add	r2, r1
 800664a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800664e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006652:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	68d9      	ldr	r1, [r3, #12]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	b298      	uxth	r0, r3
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	4603      	mov	r3, r0
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f9b9 	bl	80069e0 <USB_WritePacket>
 800666e:	e105      	b.n	800687c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	440a      	add	r2, r1
 8006686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800668a:	0cdb      	lsrs	r3, r3, #19
 800668c:	04db      	lsls	r3, r3, #19
 800668e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80066ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80066b2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d132      	bne.n	8006720 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066e8:	69b9      	ldr	r1, [r7, #24]
 80066ea:	0148      	lsls	r0, r1, #5
 80066ec:	69f9      	ldr	r1, [r7, #28]
 80066ee:	4401      	add	r1, r0
 80066f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80066f4:	4313      	orrs	r3, r2
 80066f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	440a      	add	r2, r1
 800670e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006712:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006716:	6113      	str	r3, [r2, #16]
 8006718:	e062      	b.n	80067e0 <USB_EPStartXfer+0x490>
 800671a:	bf00      	nop
 800671c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d123      	bne.n	8006770 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800673e:	69b9      	ldr	r1, [r7, #24]
 8006740:	0148      	lsls	r0, r1, #5
 8006742:	69f9      	ldr	r1, [r7, #28]
 8006744:	4401      	add	r1, r0
 8006746:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800674a:	4313      	orrs	r3, r2
 800674c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006768:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800676c:	6113      	str	r3, [r2, #16]
 800676e:	e037      	b.n	80067e0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4413      	add	r3, r2
 800677a:	1e5a      	subs	r2, r3, #1
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	fbb2 f3f3 	udiv	r3, r2, r3
 8006784:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	8afa      	ldrh	r2, [r7, #22]
 800678c:	fb03 f202 	mul.w	r2, r3, r2
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a0:	691a      	ldr	r2, [r3, #16]
 80067a2:	8afb      	ldrh	r3, [r7, #22]
 80067a4:	04d9      	lsls	r1, r3, #19
 80067a6:	4b38      	ldr	r3, [pc, #224]	@ (8006888 <USB_EPStartXfer+0x538>)
 80067a8:	400b      	ands	r3, r1
 80067aa:	69b9      	ldr	r1, [r7, #24]
 80067ac:	0148      	lsls	r0, r1, #5
 80067ae:	69f9      	ldr	r1, [r7, #28]
 80067b0:	4401      	add	r1, r0
 80067b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067b6:	4313      	orrs	r3, r2
 80067b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067d0:	69b9      	ldr	r1, [r7, #24]
 80067d2:	0148      	lsls	r0, r1, #5
 80067d4:	69f9      	ldr	r1, [r7, #28]
 80067d6:	4401      	add	r1, r0
 80067d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067dc:	4313      	orrs	r3, r2
 80067de:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d10d      	bne.n	8006802 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	68d9      	ldr	r1, [r3, #12]
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fe:	460a      	mov	r2, r1
 8006800:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	791b      	ldrb	r3, [r3, #4]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d128      	bne.n	800685c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006816:	2b00      	cmp	r3, #0
 8006818:	d110      	bne.n	800683c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	0151      	lsls	r1, r2, #5
 800682c:	69fa      	ldr	r2, [r7, #28]
 800682e:	440a      	add	r2, r1
 8006830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006834:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	e00f      	b.n	800685c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	0151      	lsls	r1, r2, #5
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	440a      	add	r2, r1
 8006852:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800685a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	69fa      	ldr	r2, [r7, #28]
 8006870:	440a      	add	r2, r1
 8006872:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006876:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800687a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	1ff80000 	.word	0x1ff80000

0800688c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d14a      	bne.n	8006940 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068c2:	f040 8086 	bne.w	80069d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	7812      	ldrb	r2, [r2, #0]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	7812      	ldrb	r2, [r2, #0]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006908:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800690c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3301      	adds	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f242 7210 	movw	r2, #10000	@ 0x2710
 800691a:	4293      	cmp	r3, r2
 800691c:	d902      	bls.n	8006924 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	75fb      	strb	r3, [r7, #23]
          break;
 8006922:	e056      	b.n	80069d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006938:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800693c:	d0e7      	beq.n	800690e <USB_EPStopXfer+0x82>
 800693e:	e048      	b.n	80069d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006954:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006958:	d13b      	bne.n	80069d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	440a      	add	r2, r1
 8006974:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006978:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800697c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	7812      	ldrb	r2, [r2, #0]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	440a      	add	r2, r1
 8006998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800699c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3301      	adds	r3, #1
 80069a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d902      	bls.n	80069b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
          break;
 80069b6:	e00c      	b.n	80069d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069d0:	d0e7      	beq.n	80069a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b089      	sub	sp, #36	@ 0x24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4611      	mov	r1, r2
 80069ec:	461a      	mov	r2, r3
 80069ee:	460b      	mov	r3, r1
 80069f0:	71fb      	strb	r3, [r7, #7]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80069fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d123      	bne.n	8006a4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a06:	88bb      	ldrh	r3, [r7, #4]
 8006a08:	3303      	adds	r3, #3
 8006a0a:	089b      	lsrs	r3, r3, #2
 8006a0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	e018      	b.n	8006a46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	031a      	lsls	r2, r3, #12
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a20:	461a      	mov	r2, r3
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	3301      	adds	r3, #1
 8006a32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	3301      	adds	r3, #1
 8006a38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	3301      	adds	r3, #1
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d3e2      	bcc.n	8006a14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3724      	adds	r7, #36	@ 0x24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b08b      	sub	sp, #44	@ 0x2c
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	089b      	lsrs	r3, r3, #2
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a82:	2300      	movs	r3, #0
 8006a84:	623b      	str	r3, [r7, #32]
 8006a86:	e014      	b.n	8006ab2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	3301      	adds	r3, #1
 8006a98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	623b      	str	r3, [r7, #32]
 8006ab2:	6a3a      	ldr	r2, [r7, #32]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d3e6      	bcc.n	8006a88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006aba:	8bfb      	ldrh	r3, [r7, #30]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01e      	beq.n	8006afe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aca:	461a      	mov	r2, r3
 8006acc:	f107 0310 	add.w	r3, r7, #16
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	701a      	strb	r2, [r3, #0]
      i++;
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	623b      	str	r3, [r7, #32]
      pDest++;
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aee:	3301      	adds	r3, #1
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006af2:	8bfb      	ldrh	r3, [r7, #30]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006af8:	8bfb      	ldrh	r3, [r7, #30]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1ea      	bne.n	8006ad4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	372c      	adds	r7, #44	@ 0x2c
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	785b      	ldrb	r3, [r3, #1]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d12c      	bne.n	8006b82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	db12      	blt.n	8006b60 <USB_EPSetStall+0x54>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	e02b      	b.n	8006bda <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	db12      	blt.n	8006bba <USB_EPSetStall+0xae>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00f      	beq.n	8006bba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006bb8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006bd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d128      	bne.n	8006c56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	0151      	lsls	r1, r2, #5
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	440a      	add	r2, r1
 8006c1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	791b      	ldrb	r3, [r3, #4]
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d003      	beq.n	8006c34 <USB_EPClearStall+0x4c>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	791b      	ldrb	r3, [r3, #4]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d138      	bne.n	8006ca6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	e027      	b.n	8006ca6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	791b      	ldrb	r3, [r3, #4]
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d003      	beq.n	8006c86 <USB_EPClearStall+0x9e>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	791b      	ldrb	r3, [r3, #4]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d10f      	bne.n	8006ca6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	0151      	lsls	r1, r2, #5
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	440a      	add	r2, r1
 8006c9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ca4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cd2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006cd6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006ce8:	68f9      	ldr	r1, [r7, #12]
 8006cea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d1a:	f023 0303 	bic.w	r3, r3, #3
 8006d1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d2e:	f023 0302 	bic.w	r3, r3, #2
 8006d32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d5c:	f023 0303 	bic.w	r3, r3, #3
 8006d60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d70:	f043 0302 	orr.w	r3, r3, #2
 8006d74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	0c1b      	lsrs	r3, r3, #16
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	b29b      	uxth	r3, r3
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e40:	68bb      	ldr	r3, [r7, #8]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b087      	sub	sp, #28
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7e:	01db      	lsls	r3, r3, #7
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ee0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006ee4:	f023 0307 	bic.w	r3, r3, #7
 8006ee8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006efc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	460b      	mov	r3, r1
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	333c      	adds	r3, #60	@ 0x3c
 8006f22:	3304      	adds	r3, #4
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4a26      	ldr	r2, [pc, #152]	@ (8006fc4 <USB_EP0_OutStart+0xb8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d90a      	bls.n	8006f46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f40:	d101      	bne.n	8006f46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e037      	b.n	8006fb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f74:	f043 0318 	orr.w	r3, r3, #24
 8006f78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f88:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006f8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f8e:	7afb      	ldrb	r3, [r7, #11]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d10f      	bne.n	8006fb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006fb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	4f54300a 	.word	0x4f54300a

08006fc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fe0:	d901      	bls.n	8006fe6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e01b      	b.n	800701e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	daf2      	bge.n	8006fd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f043 0201 	orr.w	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800700a:	d901      	bls.n	8007010 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e006      	b.n	800701e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b01      	cmp	r3, #1
 800701a:	d0f0      	beq.n	8006ffe <USB_CoreReset+0x36>

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007038:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800703c:	f002 fc9e 	bl	800997c <USBD_static_malloc>
 8007040:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d109      	bne.n	800705c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	32b0      	adds	r2, #176	@ 0xb0
 8007052:	2100      	movs	r1, #0
 8007054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007058:	2302      	movs	r3, #2
 800705a:	e0d4      	b.n	8007206 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800705c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007060:	2100      	movs	r1, #0
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f003 fa4b 	bl	800a4fe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	32b0      	adds	r2, #176	@ 0xb0
 8007072:	68f9      	ldr	r1, [r7, #12]
 8007074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	32b0      	adds	r2, #176	@ 0xb0
 8007082:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	7c1b      	ldrb	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d138      	bne.n	8007106 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007094:	4b5e      	ldr	r3, [pc, #376]	@ (8007210 <USBD_CDC_Init+0x1e4>)
 8007096:	7819      	ldrb	r1, [r3, #0]
 8007098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800709c:	2202      	movs	r2, #2
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f002 fb49 	bl	8009736 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80070a4:	4b5a      	ldr	r3, [pc, #360]	@ (8007210 <USBD_CDC_Init+0x1e4>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	3324      	adds	r3, #36	@ 0x24
 80070ba:	2201      	movs	r2, #1
 80070bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80070be:	4b55      	ldr	r3, [pc, #340]	@ (8007214 <USBD_CDC_Init+0x1e8>)
 80070c0:	7819      	ldrb	r1, [r3, #0]
 80070c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070c6:	2202      	movs	r2, #2
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f002 fb34 	bl	8009736 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070ce:	4b51      	ldr	r3, [pc, #324]	@ (8007214 <USBD_CDC_Init+0x1e8>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f003 020f 	and.w	r2, r3, #15
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80070e6:	2201      	movs	r2, #1
 80070e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80070ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007218 <USBD_CDC_Init+0x1ec>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f003 020f 	and.w	r2, r3, #15
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	4613      	mov	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	440b      	add	r3, r1
 80070fe:	3326      	adds	r3, #38	@ 0x26
 8007100:	2210      	movs	r2, #16
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	e035      	b.n	8007172 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007106:	4b42      	ldr	r3, [pc, #264]	@ (8007210 <USBD_CDC_Init+0x1e4>)
 8007108:	7819      	ldrb	r1, [r3, #0]
 800710a:	2340      	movs	r3, #64	@ 0x40
 800710c:	2202      	movs	r2, #2
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f002 fb11 	bl	8009736 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007114:	4b3e      	ldr	r3, [pc, #248]	@ (8007210 <USBD_CDC_Init+0x1e4>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	f003 020f 	and.w	r2, r3, #15
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	3324      	adds	r3, #36	@ 0x24
 800712a:	2201      	movs	r2, #1
 800712c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800712e:	4b39      	ldr	r3, [pc, #228]	@ (8007214 <USBD_CDC_Init+0x1e8>)
 8007130:	7819      	ldrb	r1, [r3, #0]
 8007132:	2340      	movs	r3, #64	@ 0x40
 8007134:	2202      	movs	r2, #2
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f002 fafd 	bl	8009736 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800713c:	4b35      	ldr	r3, [pc, #212]	@ (8007214 <USBD_CDC_Init+0x1e8>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	f003 020f 	and.w	r2, r3, #15
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007154:	2201      	movs	r2, #1
 8007156:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007158:	4b2f      	ldr	r3, [pc, #188]	@ (8007218 <USBD_CDC_Init+0x1ec>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 020f 	and.w	r2, r3, #15
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	3326      	adds	r3, #38	@ 0x26
 800716e:	2210      	movs	r2, #16
 8007170:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007172:	4b29      	ldr	r3, [pc, #164]	@ (8007218 <USBD_CDC_Init+0x1ec>)
 8007174:	7819      	ldrb	r1, [r3, #0]
 8007176:	2308      	movs	r3, #8
 8007178:	2203      	movs	r2, #3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f002 fadb 	bl	8009736 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007180:	4b25      	ldr	r3, [pc, #148]	@ (8007218 <USBD_CDC_Init+0x1ec>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f003 020f 	and.w	r2, r3, #15
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	3324      	adds	r3, #36	@ 0x24
 8007196:	2201      	movs	r2, #1
 8007198:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	33b0      	adds	r3, #176	@ 0xb0
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80071d0:	2302      	movs	r3, #2
 80071d2:	e018      	b.n	8007206 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	7c1b      	ldrb	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <USBD_CDC_Init+0x1e8>)
 80071de:	7819      	ldrb	r1, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f002 fb92 	bl	8009914 <USBD_LL_PrepareReceive>
 80071f0:	e008      	b.n	8007204 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071f2:	4b08      	ldr	r3, [pc, #32]	@ (8007214 <USBD_CDC_Init+0x1e8>)
 80071f4:	7819      	ldrb	r1, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071fc:	2340      	movs	r3, #64	@ 0x40
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f002 fb88 	bl	8009914 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20000093 	.word	0x20000093
 8007214:	20000094 	.word	0x20000094
 8007218:	20000095 	.word	0x20000095

0800721c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007228:	4b3a      	ldr	r3, [pc, #232]	@ (8007314 <USBD_CDC_DeInit+0xf8>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f002 faa7 	bl	8009782 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007234:	4b37      	ldr	r3, [pc, #220]	@ (8007314 <USBD_CDC_DeInit+0xf8>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	f003 020f 	and.w	r2, r3, #15
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	3324      	adds	r3, #36	@ 0x24
 800724a:	2200      	movs	r2, #0
 800724c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800724e:	4b32      	ldr	r3, [pc, #200]	@ (8007318 <USBD_CDC_DeInit+0xfc>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f002 fa94 	bl	8009782 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800725a:	4b2f      	ldr	r3, [pc, #188]	@ (8007318 <USBD_CDC_DeInit+0xfc>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	f003 020f 	and.w	r2, r3, #15
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007272:	2200      	movs	r2, #0
 8007274:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007276:	4b29      	ldr	r3, [pc, #164]	@ (800731c <USBD_CDC_DeInit+0x100>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f002 fa80 	bl	8009782 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007282:	4b26      	ldr	r3, [pc, #152]	@ (800731c <USBD_CDC_DeInit+0x100>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	f003 020f 	and.w	r2, r3, #15
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	440b      	add	r3, r1
 8007296:	3324      	adds	r3, #36	@ 0x24
 8007298:	2200      	movs	r2, #0
 800729a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800729c:	4b1f      	ldr	r3, [pc, #124]	@ (800731c <USBD_CDC_DeInit+0x100>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f003 020f 	and.w	r2, r3, #15
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	3326      	adds	r3, #38	@ 0x26
 80072b2:	2200      	movs	r2, #0
 80072b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	32b0      	adds	r2, #176	@ 0xb0
 80072c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01f      	beq.n	8007308 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	33b0      	adds	r3, #176	@ 0xb0
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	32b0      	adds	r2, #176	@ 0xb0
 80072e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 fb54 	bl	8009998 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	32b0      	adds	r2, #176	@ 0xb0
 80072fa:	2100      	movs	r1, #0
 80072fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000093 	.word	0x20000093
 8007318:	20000094 	.word	0x20000094
 800731c:	20000095 	.word	0x20000095

08007320 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	32b0      	adds	r2, #176	@ 0xb0
 8007334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007338:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800734c:	2303      	movs	r3, #3
 800734e:	e0bf      	b.n	80074d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007358:	2b00      	cmp	r3, #0
 800735a:	d050      	beq.n	80073fe <USBD_CDC_Setup+0xde>
 800735c:	2b20      	cmp	r3, #32
 800735e:	f040 80af 	bne.w	80074c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	88db      	ldrh	r3, [r3, #6]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d03a      	beq.n	80073e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	b25b      	sxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	da1b      	bge.n	80073ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	33b0      	adds	r3, #176	@ 0xb0
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800738a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	88d2      	ldrh	r2, [r2, #6]
 8007390:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	88db      	ldrh	r3, [r3, #6]
 8007396:	2b07      	cmp	r3, #7
 8007398:	bf28      	it	cs
 800739a:	2307      	movcs	r3, #7
 800739c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	89fa      	ldrh	r2, [r7, #14]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 fd93 	bl	8008ed0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80073aa:	e090      	b.n	80074ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	785a      	ldrb	r2, [r3, #1]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	88db      	ldrh	r3, [r3, #6]
 80073ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80073bc:	d803      	bhi.n	80073c6 <USBD_CDC_Setup+0xa6>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	88db      	ldrh	r3, [r3, #6]
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	e000      	b.n	80073c8 <USBD_CDC_Setup+0xa8>
 80073c6:	2240      	movs	r2, #64	@ 0x40
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80073ce:	6939      	ldr	r1, [r7, #16]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80073d6:	461a      	mov	r2, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 fda5 	bl	8008f28 <USBD_CtlPrepareRx>
      break;
 80073de:	e076      	b.n	80074ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	33b0      	adds	r3, #176	@ 0xb0
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	7850      	ldrb	r0, [r2, #1]
 80073f6:	2200      	movs	r2, #0
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	4798      	blx	r3
      break;
 80073fc:	e067      	b.n	80074ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	785b      	ldrb	r3, [r3, #1]
 8007402:	2b0b      	cmp	r3, #11
 8007404:	d851      	bhi.n	80074aa <USBD_CDC_Setup+0x18a>
 8007406:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <USBD_CDC_Setup+0xec>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	0800743d 	.word	0x0800743d
 8007410:	080074b9 	.word	0x080074b9
 8007414:	080074ab 	.word	0x080074ab
 8007418:	080074ab 	.word	0x080074ab
 800741c:	080074ab 	.word	0x080074ab
 8007420:	080074ab 	.word	0x080074ab
 8007424:	080074ab 	.word	0x080074ab
 8007428:	080074ab 	.word	0x080074ab
 800742c:	080074ab 	.word	0x080074ab
 8007430:	080074ab 	.word	0x080074ab
 8007434:	08007467 	.word	0x08007467
 8007438:	08007491 	.word	0x08007491
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b03      	cmp	r3, #3
 8007446:	d107      	bne.n	8007458 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007448:	f107 030a 	add.w	r3, r7, #10
 800744c:	2202      	movs	r2, #2
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 fd3d 	bl	8008ed0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007456:	e032      	b.n	80074be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f001 fcbb 	bl	8008dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	75fb      	strb	r3, [r7, #23]
          break;
 8007464:	e02b      	b.n	80074be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b03      	cmp	r3, #3
 8007470:	d107      	bne.n	8007482 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007472:	f107 030d 	add.w	r3, r7, #13
 8007476:	2201      	movs	r2, #1
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 fd28 	bl	8008ed0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007480:	e01d      	b.n	80074be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 fca6 	bl	8008dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800748a:	2303      	movs	r3, #3
 800748c:	75fb      	strb	r3, [r7, #23]
          break;
 800748e:	e016      	b.n	80074be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b03      	cmp	r3, #3
 800749a:	d00f      	beq.n	80074bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 fc99 	bl	8008dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 80074a4:	2303      	movs	r3, #3
 80074a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80074a8:	e008      	b.n	80074bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fc92 	bl	8008dd6 <USBD_CtlError>
          ret = USBD_FAIL;
 80074b2:	2303      	movs	r3, #3
 80074b4:	75fb      	strb	r3, [r7, #23]
          break;
 80074b6:	e002      	b.n	80074be <USBD_CDC_Setup+0x19e>
          break;
 80074b8:	bf00      	nop
 80074ba:	e008      	b.n	80074ce <USBD_CDC_Setup+0x1ae>
          break;
 80074bc:	bf00      	nop
      }
      break;
 80074be:	e006      	b.n	80074ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 fc87 	bl	8008dd6 <USBD_CtlError>
      ret = USBD_FAIL;
 80074c8:	2303      	movs	r3, #3
 80074ca:	75fb      	strb	r3, [r7, #23]
      break;
 80074cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	32b0      	adds	r2, #176	@ 0xb0
 80074f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80074fe:	2303      	movs	r3, #3
 8007500:	e065      	b.n	80075ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	32b0      	adds	r2, #176	@ 0xb0
 800750c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007510:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	f003 020f 	and.w	r2, r3, #15
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	440b      	add	r3, r1
 8007524:	3318      	adds	r3, #24
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d02f      	beq.n	800758c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	f003 020f 	and.w	r2, r3, #15
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	4613      	mov	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	3318      	adds	r3, #24
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	78fb      	ldrb	r3, [r7, #3]
 8007544:	f003 010f 	and.w	r1, r3, #15
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	460b      	mov	r3, r1
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	440b      	add	r3, r1
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4403      	add	r3, r0
 8007554:	331c      	adds	r3, #28
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	fbb2 f1f3 	udiv	r1, r2, r3
 800755c:	fb01 f303 	mul.w	r3, r1, r3
 8007560:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007562:	2b00      	cmp	r3, #0
 8007564:	d112      	bne.n	800758c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007566:	78fb      	ldrb	r3, [r7, #3]
 8007568:	f003 020f 	and.w	r2, r3, #15
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	440b      	add	r3, r1
 8007578:	3318      	adds	r3, #24
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800757e:	78f9      	ldrb	r1, [r7, #3]
 8007580:	2300      	movs	r3, #0
 8007582:	2200      	movs	r2, #0
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f002 f9a4 	bl	80098d2 <USBD_LL_Transmit>
 800758a:	e01f      	b.n	80075cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	33b0      	adds	r3, #176	@ 0xb0
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d010      	beq.n	80075cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	33b0      	adds	r3, #176	@ 0xb0
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80075c8:	78fa      	ldrb	r2, [r7, #3]
 80075ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	32b0      	adds	r2, #176	@ 0xb0
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	32b0      	adds	r2, #176	@ 0xb0
 80075fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007604:	2303      	movs	r3, #3
 8007606:	e01a      	b.n	800763e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f002 f9a2 	bl	8009956 <USBD_LL_GetRxDataSize>
 8007612:	4602      	mov	r2, r0
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	33b0      	adds	r3, #176	@ 0xb0
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007638:	4611      	mov	r1, r2
 800763a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	32b0      	adds	r2, #176	@ 0xb0
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007664:	2303      	movs	r3, #3
 8007666:	e024      	b.n	80076b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	33b0      	adds	r3, #176	@ 0xb0
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d019      	beq.n	80076b0 <USBD_CDC_EP0_RxReady+0x6a>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007682:	2bff      	cmp	r3, #255	@ 0xff
 8007684:	d014      	beq.n	80076b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	33b0      	adds	r3, #176	@ 0xb0
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800769e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	22ff      	movs	r2, #255	@ 0xff
 80076ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076c4:	2182      	movs	r1, #130	@ 0x82
 80076c6:	4818      	ldr	r0, [pc, #96]	@ (8007728 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076c8:	f000 fd4f 	bl	800816a <USBD_GetEpDesc>
 80076cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076ce:	2101      	movs	r1, #1
 80076d0:	4815      	ldr	r0, [pc, #84]	@ (8007728 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076d2:	f000 fd4a 	bl	800816a <USBD_GetEpDesc>
 80076d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076d8:	2181      	movs	r1, #129	@ 0x81
 80076da:	4813      	ldr	r0, [pc, #76]	@ (8007728 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076dc:	f000 fd45 	bl	800816a <USBD_GetEpDesc>
 80076e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2210      	movs	r2, #16
 80076ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d006      	beq.n	8007702 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076fc:	711a      	strb	r2, [r3, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d006      	beq.n	8007716 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007710:	711a      	strb	r2, [r3, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2243      	movs	r2, #67	@ 0x43
 800771a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800771c:	4b02      	ldr	r3, [pc, #8]	@ (8007728 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000050 	.word	0x20000050

0800772c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007734:	2182      	movs	r1, #130	@ 0x82
 8007736:	4818      	ldr	r0, [pc, #96]	@ (8007798 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007738:	f000 fd17 	bl	800816a <USBD_GetEpDesc>
 800773c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800773e:	2101      	movs	r1, #1
 8007740:	4815      	ldr	r0, [pc, #84]	@ (8007798 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007742:	f000 fd12 	bl	800816a <USBD_GetEpDesc>
 8007746:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007748:	2181      	movs	r1, #129	@ 0x81
 800774a:	4813      	ldr	r0, [pc, #76]	@ (8007798 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800774c:	f000 fd0d 	bl	800816a <USBD_GetEpDesc>
 8007750:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2210      	movs	r2, #16
 800775c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d006      	beq.n	8007772 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	2200      	movs	r2, #0
 8007768:	711a      	strb	r2, [r3, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f042 0202 	orr.w	r2, r2, #2
 8007770:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d006      	beq.n	8007786 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	711a      	strb	r2, [r3, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f042 0202 	orr.w	r2, r2, #2
 8007784:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2243      	movs	r2, #67	@ 0x43
 800778a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800778c:	4b02      	ldr	r3, [pc, #8]	@ (8007798 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000050 	.word	0x20000050

0800779c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077a4:	2182      	movs	r1, #130	@ 0x82
 80077a6:	4818      	ldr	r0, [pc, #96]	@ (8007808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077a8:	f000 fcdf 	bl	800816a <USBD_GetEpDesc>
 80077ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077ae:	2101      	movs	r1, #1
 80077b0:	4815      	ldr	r0, [pc, #84]	@ (8007808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077b2:	f000 fcda 	bl	800816a <USBD_GetEpDesc>
 80077b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077b8:	2181      	movs	r1, #129	@ 0x81
 80077ba:	4813      	ldr	r0, [pc, #76]	@ (8007808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077bc:	f000 fcd5 	bl	800816a <USBD_GetEpDesc>
 80077c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2210      	movs	r2, #16
 80077cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d006      	beq.n	80077e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077dc:	711a      	strb	r2, [r3, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d006      	beq.n	80077f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077f0:	711a      	strb	r2, [r3, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2243      	movs	r2, #67	@ 0x43
 80077fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80077fc:	4b02      	ldr	r3, [pc, #8]	@ (8007808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000050 	.word	0x20000050

0800780c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	220a      	movs	r2, #10
 8007818:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800781a:	4b03      	ldr	r3, [pc, #12]	@ (8007828 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	2000000c 	.word	0x2000000c

0800782c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	e009      	b.n	8007854 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	33b0      	adds	r3, #176	@ 0xb0
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	32b0      	adds	r2, #176	@ 0xb0
 8007876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007882:	2303      	movs	r3, #3
 8007884:	e008      	b.n	8007898 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	371c      	adds	r7, #28
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	32b0      	adds	r2, #176	@ 0xb0
 80078b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e004      	b.n	80078d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
	...

080078e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32b0      	adds	r2, #176	@ 0xb0
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80078f8:	2301      	movs	r3, #1
 80078fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	e025      	b.n	8007952 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800790c:	2b00      	cmp	r3, #0
 800790e:	d11f      	bne.n	8007950 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2201      	movs	r2, #1
 8007914:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007918:	4b10      	ldr	r3, [pc, #64]	@ (800795c <USBD_CDC_TransmitPacket+0x7c>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	f003 020f 	and.w	r2, r3, #15
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	4613      	mov	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4403      	add	r3, r0
 8007932:	3318      	adds	r3, #24
 8007934:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007936:	4b09      	ldr	r3, [pc, #36]	@ (800795c <USBD_CDC_TransmitPacket+0x7c>)
 8007938:	7819      	ldrb	r1, [r3, #0]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 ffc3 	bl	80098d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000093 	.word	0x20000093

08007960 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	32b0      	adds	r2, #176	@ 0xb0
 8007972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007976:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	32b0      	adds	r2, #176	@ 0xb0
 8007982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800798a:	2303      	movs	r3, #3
 800798c:	e018      	b.n	80079c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7c1b      	ldrb	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10a      	bne.n	80079ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007996:	4b0c      	ldr	r3, [pc, #48]	@ (80079c8 <USBD_CDC_ReceivePacket+0x68>)
 8007998:	7819      	ldrb	r1, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 ffb5 	bl	8009914 <USBD_LL_PrepareReceive>
 80079aa:	e008      	b.n	80079be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079ac:	4b06      	ldr	r3, [pc, #24]	@ (80079c8 <USBD_CDC_ReceivePacket+0x68>)
 80079ae:	7819      	ldrb	r1, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079b6:	2340      	movs	r3, #64	@ 0x40
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 ffab 	bl	8009914 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	20000094 	.word	0x20000094

080079cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	4613      	mov	r3, r2
 80079d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e01f      	b.n	8007a24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	79fa      	ldrb	r2, [r7, #7]
 8007a16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f001 fe25 	bl	8009668 <USBD_LL_Init>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e025      	b.n	8007a90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	32ae      	adds	r2, #174	@ 0xae
 8007a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00f      	beq.n	8007a80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	32ae      	adds	r2, #174	@ 0xae
 8007a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a70:	f107 020e 	add.w	r2, r7, #14
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	4602      	mov	r2, r0
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 fe2d 	bl	8009700 <USBD_LL_Start>
 8007aa6:	4603      	mov	r3, r0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ab8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	4611      	mov	r1, r2
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	4798      	blx	r3
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	460b      	mov	r3, r1
 8007b08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	78fa      	ldrb	r2, [r7, #3]
 8007b18:	4611      	mov	r1, r2
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 f90c 	bl	8008d62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007b58:	461a      	mov	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b66:	f003 031f 	and.w	r3, r3, #31
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d01a      	beq.n	8007ba4 <USBD_LL_SetupStage+0x72>
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d822      	bhi.n	8007bb8 <USBD_LL_SetupStage+0x86>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <USBD_LL_SetupStage+0x4a>
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d00a      	beq.n	8007b90 <USBD_LL_SetupStage+0x5e>
 8007b7a:	e01d      	b.n	8007bb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fb63 	bl	8008250 <USBD_StdDevReq>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b8e:	e020      	b.n	8007bd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fbcb 	bl	8008334 <USBD_StdItfReq>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba2:	e016      	b.n	8007bd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fc2d 	bl	800840c <USBD_StdEPReq>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb6:	e00c      	b.n	8007bd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007bbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 fdfa 	bl	80097c0 <USBD_LL_StallEP>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd0:	bf00      	nop
  }

  return ret;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	460b      	mov	r3, r1
 8007be6:	607a      	str	r2, [r7, #4]
 8007be8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d16e      	bne.n	8007cd2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007bfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	f040 8098 	bne.w	8007d38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	689a      	ldr	r2, [r3, #8]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d913      	bls.n	8007c3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	1ad2      	subs	r2, r2, r3
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	bf28      	it	cs
 8007c2e:	4613      	movcs	r3, r2
 8007c30:	461a      	mov	r2, r3
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f001 f994 	bl	8008f62 <USBD_CtlContinueRx>
 8007c3a:	e07d      	b.n	8007d38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c42:	f003 031f 	and.w	r3, r3, #31
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d014      	beq.n	8007c74 <USBD_LL_DataOutStage+0x98>
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d81d      	bhi.n	8007c8a <USBD_LL_DataOutStage+0xae>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <USBD_LL_DataOutStage+0x7c>
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d003      	beq.n	8007c5e <USBD_LL_DataOutStage+0x82>
 8007c56:	e018      	b.n	8007c8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	75bb      	strb	r3, [r7, #22]
            break;
 8007c5c:	e018      	b.n	8007c90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	4619      	mov	r1, r3
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fa64 	bl	8008136 <USBD_CoreFindIF>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75bb      	strb	r3, [r7, #22]
            break;
 8007c72:	e00d      	b.n	8007c90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 fa66 	bl	8008150 <USBD_CoreFindEP>
 8007c84:	4603      	mov	r3, r0
 8007c86:	75bb      	strb	r3, [r7, #22]
            break;
 8007c88:	e002      	b.n	8007c90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75bb      	strb	r3, [r7, #22]
            break;
 8007c8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007c90:	7dbb      	ldrb	r3, [r7, #22]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d119      	bne.n	8007cca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d113      	bne.n	8007cca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007ca2:	7dba      	ldrb	r2, [r7, #22]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	32ae      	adds	r2, #174	@ 0xae
 8007ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007cb2:	7dba      	ldrb	r2, [r7, #22]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007cba:	7dba      	ldrb	r2, [r7, #22]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	32ae      	adds	r2, #174	@ 0xae
 8007cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f001 f95a 	bl	8008f84 <USBD_CtlSendStatus>
 8007cd0:	e032      	b.n	8007d38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	4619      	mov	r1, r3
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 fa37 	bl	8008150 <USBD_CoreFindEP>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ce6:	7dbb      	ldrb	r3, [r7, #22]
 8007ce8:	2bff      	cmp	r3, #255	@ 0xff
 8007cea:	d025      	beq.n	8007d38 <USBD_LL_DataOutStage+0x15c>
 8007cec:	7dbb      	ldrb	r3, [r7, #22]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d122      	bne.n	8007d38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d117      	bne.n	8007d2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007cfe:	7dba      	ldrb	r2, [r7, #22]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	32ae      	adds	r2, #174	@ 0xae
 8007d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00f      	beq.n	8007d2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d0e:	7dba      	ldrb	r2, [r7, #22]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d16:	7dba      	ldrb	r2, [r7, #22]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	32ae      	adds	r2, #174	@ 0xae
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	7afa      	ldrb	r2, [r7, #11]
 8007d24:	4611      	mov	r1, r2
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	4798      	blx	r3
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	e000      	b.n	8007d3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b086      	sub	sp, #24
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d16f      	bne.n	8007e36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3314      	adds	r3, #20
 8007d5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d15a      	bne.n	8007e1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d914      	bls.n	8007d9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	1ad2      	subs	r2, r2, r3
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	461a      	mov	r2, r3
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f001 f8bc 	bl	8008f06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2200      	movs	r2, #0
 8007d92:	2100      	movs	r1, #0
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f001 fdbd 	bl	8009914 <USBD_LL_PrepareReceive>
 8007d9a:	e03f      	b.n	8007e1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d11c      	bne.n	8007de2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d316      	bcc.n	8007de2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d20f      	bcs.n	8007de2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f001 f89d 	bl	8008f06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2100      	movs	r1, #0
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f001 fd9a 	bl	8009914 <USBD_LL_PrepareReceive>
 8007de0:	e01c      	b.n	8007e1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d10f      	bne.n	8007e0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d009      	beq.n	8007e0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e0e:	2180      	movs	r1, #128	@ 0x80
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f001 fcd5 	bl	80097c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f001 f8c7 	bl	8008faa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d03a      	beq.n	8007e9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7ff fe42 	bl	8007ab0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007e34:	e032      	b.n	8007e9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e36:	7afb      	ldrb	r3, [r7, #11]
 8007e38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	4619      	mov	r1, r3
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 f985 	bl	8008150 <USBD_CoreFindEP>
 8007e46:	4603      	mov	r3, r0
 8007e48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e4a:	7dfb      	ldrb	r3, [r7, #23]
 8007e4c:	2bff      	cmp	r3, #255	@ 0xff
 8007e4e:	d025      	beq.n	8007e9c <USBD_LL_DataInStage+0x15a>
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d122      	bne.n	8007e9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d11c      	bne.n	8007e9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e62:	7dfa      	ldrb	r2, [r7, #23]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	32ae      	adds	r2, #174	@ 0xae
 8007e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d014      	beq.n	8007e9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007e72:	7dfa      	ldrb	r2, [r7, #23]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007e7a:	7dfa      	ldrb	r2, [r7, #23]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	32ae      	adds	r2, #174	@ 0xae
 8007e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	7afa      	ldrb	r2, [r7, #11]
 8007e88:	4611      	mov	r1, r2
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	4798      	blx	r3
 8007e8e:	4603      	mov	r3, r0
 8007e90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007e92:	7dbb      	ldrb	r3, [r7, #22]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007e98:	7dbb      	ldrb	r3, [r7, #22]
 8007e9a:	e000      	b.n	8007e9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d014      	beq.n	8007f0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00e      	beq.n	8007f0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	6852      	ldr	r2, [r2, #4]
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	4611      	mov	r1, r2
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	4798      	blx	r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f0c:	2340      	movs	r3, #64	@ 0x40
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2100      	movs	r1, #0
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 fc0f 	bl	8009736 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2240      	movs	r2, #64	@ 0x40
 8007f24:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f28:	2340      	movs	r3, #64	@ 0x40
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2180      	movs	r1, #128	@ 0x80
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 fc01 	bl	8009736 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2240      	movs	r2, #64	@ 0x40
 8007f3e:	621a      	str	r2, [r3, #32]

  return ret;
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	460b      	mov	r3, r1
 8007f54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d006      	beq.n	8007f8c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2204      	movs	r2, #4
 8007f90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d106      	bne.n	8007fc4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d110      	bne.n	8008008 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	460b      	mov	r3, r1
 800801c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	32ae      	adds	r2, #174	@ 0xae
 8008028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	e01c      	b.n	800806e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b03      	cmp	r3, #3
 800803e:	d115      	bne.n	800806c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	32ae      	adds	r2, #174	@ 0xae
 800804a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	32ae      	adds	r2, #174	@ 0xae
 800805e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	4611      	mov	r1, r2
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	460b      	mov	r3, r1
 8008080:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	32ae      	adds	r2, #174	@ 0xae
 800808c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008094:	2303      	movs	r3, #3
 8008096:	e01c      	b.n	80080d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d115      	bne.n	80080d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	32ae      	adds	r2, #174	@ 0xae
 80080ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	32ae      	adds	r2, #174	@ 0xae
 80080c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	4611      	mov	r1, r2
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00e      	beq.n	800812c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6852      	ldr	r2, [r2, #4]
 800811a:	b2d2      	uxtb	r2, r2
 800811c:	4611      	mov	r1, r2
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	4798      	blx	r3
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008128:	2303      	movs	r3, #3
 800812a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008142:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800815c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b086      	sub	sp, #24
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	885b      	ldrh	r3, [r3, #2]
 8008186:	b29b      	uxth	r3, r3
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	7812      	ldrb	r2, [r2, #0]
 800818c:	4293      	cmp	r3, r2
 800818e:	d91f      	bls.n	80081d0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008196:	e013      	b.n	80081c0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008198:	f107 030a 	add.w	r3, r7, #10
 800819c:	4619      	mov	r1, r3
 800819e:	6978      	ldr	r0, [r7, #20]
 80081a0:	f000 f81b 	bl	80081da <USBD_GetNextDesc>
 80081a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	785b      	ldrb	r3, [r3, #1]
 80081aa:	2b05      	cmp	r3, #5
 80081ac:	d108      	bne.n	80081c0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	789b      	ldrb	r3, [r3, #2]
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d008      	beq.n	80081ce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	885b      	ldrh	r3, [r3, #2]
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	897b      	ldrh	r3, [r7, #10]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d8e5      	bhi.n	8008198 <USBD_GetEpDesc+0x2e>
 80081cc:	e000      	b.n	80081d0 <USBD_GetEpDesc+0x66>
          break;
 80081ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80081d0:	693b      	ldr	r3, [r7, #16]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	4413      	add	r3, r2
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4413      	add	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008204:	68fb      	ldr	r3, [r7, #12]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008212:	b480      	push	{r7}
 8008214:	b087      	sub	sp, #28
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	3301      	adds	r3, #1
 8008228:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008230:	8a3b      	ldrh	r3, [r7, #16]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	b21a      	sxth	r2, r3
 8008236:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800823a:	4313      	orrs	r3, r2
 800823c:	b21b      	sxth	r3, r3
 800823e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008240:	89fb      	ldrh	r3, [r7, #14]
}
 8008242:	4618      	mov	r0, r3
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
	...

08008250 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008266:	2b40      	cmp	r3, #64	@ 0x40
 8008268:	d005      	beq.n	8008276 <USBD_StdDevReq+0x26>
 800826a:	2b40      	cmp	r3, #64	@ 0x40
 800826c:	d857      	bhi.n	800831e <USBD_StdDevReq+0xce>
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00f      	beq.n	8008292 <USBD_StdDevReq+0x42>
 8008272:	2b20      	cmp	r3, #32
 8008274:	d153      	bne.n	800831e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	32ae      	adds	r2, #174	@ 0xae
 8008280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	4798      	blx	r3
 800828c:	4603      	mov	r3, r0
 800828e:	73fb      	strb	r3, [r7, #15]
      break;
 8008290:	e04a      	b.n	8008328 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	2b09      	cmp	r3, #9
 8008298:	d83b      	bhi.n	8008312 <USBD_StdDevReq+0xc2>
 800829a:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <USBD_StdDevReq+0x50>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082f5 	.word	0x080082f5
 80082a4:	08008309 	.word	0x08008309
 80082a8:	08008313 	.word	0x08008313
 80082ac:	080082ff 	.word	0x080082ff
 80082b0:	08008313 	.word	0x08008313
 80082b4:	080082d3 	.word	0x080082d3
 80082b8:	080082c9 	.word	0x080082c9
 80082bc:	08008313 	.word	0x08008313
 80082c0:	080082eb 	.word	0x080082eb
 80082c4:	080082dd 	.word	0x080082dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa3c 	bl	8008748 <USBD_GetDescriptor>
          break;
 80082d0:	e024      	b.n	800831c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fba1 	bl	8008a1c <USBD_SetAddress>
          break;
 80082da:	e01f      	b.n	800831c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fbe0 	bl	8008aa4 <USBD_SetConfig>
 80082e4:	4603      	mov	r3, r0
 80082e6:	73fb      	strb	r3, [r7, #15]
          break;
 80082e8:	e018      	b.n	800831c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fc83 	bl	8008bf8 <USBD_GetConfig>
          break;
 80082f2:	e013      	b.n	800831c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fcb4 	bl	8008c64 <USBD_GetStatus>
          break;
 80082fc:	e00e      	b.n	800831c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fce3 	bl	8008ccc <USBD_SetFeature>
          break;
 8008306:	e009      	b.n	800831c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fd07 	bl	8008d1e <USBD_ClrFeature>
          break;
 8008310:	e004      	b.n	800831c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fd5e 	bl	8008dd6 <USBD_CtlError>
          break;
 800831a:	bf00      	nop
      }
      break;
 800831c:	e004      	b.n	8008328 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fd58 	bl	8008dd6 <USBD_CtlError>
      break;
 8008326:	bf00      	nop
  }

  return ret;
 8008328:	7bfb      	ldrb	r3, [r7, #15]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop

08008334 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800834a:	2b40      	cmp	r3, #64	@ 0x40
 800834c:	d005      	beq.n	800835a <USBD_StdItfReq+0x26>
 800834e:	2b40      	cmp	r3, #64	@ 0x40
 8008350:	d852      	bhi.n	80083f8 <USBD_StdItfReq+0xc4>
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <USBD_StdItfReq+0x26>
 8008356:	2b20      	cmp	r3, #32
 8008358:	d14e      	bne.n	80083f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008360:	b2db      	uxtb	r3, r3
 8008362:	3b01      	subs	r3, #1
 8008364:	2b02      	cmp	r3, #2
 8008366:	d840      	bhi.n	80083ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	889b      	ldrh	r3, [r3, #4]
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b01      	cmp	r3, #1
 8008370:	d836      	bhi.n	80083e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	889b      	ldrh	r3, [r3, #4]
 8008376:	b2db      	uxtb	r3, r3
 8008378:	4619      	mov	r1, r3
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7ff fedb 	bl	8008136 <USBD_CoreFindIF>
 8008380:	4603      	mov	r3, r0
 8008382:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2bff      	cmp	r3, #255	@ 0xff
 8008388:	d01d      	beq.n	80083c6 <USBD_StdItfReq+0x92>
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d11a      	bne.n	80083c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008390:	7bba      	ldrb	r2, [r7, #14]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	32ae      	adds	r2, #174	@ 0xae
 8008396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00f      	beq.n	80083c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80083a0:	7bba      	ldrb	r2, [r7, #14]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083a8:	7bba      	ldrb	r2, [r7, #14]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	32ae      	adds	r2, #174	@ 0xae
 80083ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	4798      	blx	r3
 80083ba:	4603      	mov	r3, r0
 80083bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083be:	e004      	b.n	80083ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083c4:	e001      	b.n	80083ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083c6:	2303      	movs	r3, #3
 80083c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	88db      	ldrh	r3, [r3, #6]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d110      	bne.n	80083f4 <USBD_StdItfReq+0xc0>
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10d      	bne.n	80083f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fdd3 	bl	8008f84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083de:	e009      	b.n	80083f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fcf7 	bl	8008dd6 <USBD_CtlError>
          break;
 80083e8:	e004      	b.n	80083f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fcf2 	bl	8008dd6 <USBD_CtlError>
          break;
 80083f2:	e000      	b.n	80083f6 <USBD_StdItfReq+0xc2>
          break;
 80083f4:	bf00      	nop
      }
      break;
 80083f6:	e004      	b.n	8008402 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fceb 	bl	8008dd6 <USBD_CtlError>
      break;
 8008400:	bf00      	nop
  }

  return ret;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	889b      	ldrh	r3, [r3, #4]
 800841e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008428:	2b40      	cmp	r3, #64	@ 0x40
 800842a:	d007      	beq.n	800843c <USBD_StdEPReq+0x30>
 800842c:	2b40      	cmp	r3, #64	@ 0x40
 800842e:	f200 817f 	bhi.w	8008730 <USBD_StdEPReq+0x324>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d02a      	beq.n	800848c <USBD_StdEPReq+0x80>
 8008436:	2b20      	cmp	r3, #32
 8008438:	f040 817a 	bne.w	8008730 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7ff fe85 	bl	8008150 <USBD_CoreFindEP>
 8008446:	4603      	mov	r3, r0
 8008448:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800844a:	7b7b      	ldrb	r3, [r7, #13]
 800844c:	2bff      	cmp	r3, #255	@ 0xff
 800844e:	f000 8174 	beq.w	800873a <USBD_StdEPReq+0x32e>
 8008452:	7b7b      	ldrb	r3, [r7, #13]
 8008454:	2b00      	cmp	r3, #0
 8008456:	f040 8170 	bne.w	800873a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800845a:	7b7a      	ldrb	r2, [r7, #13]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008462:	7b7a      	ldrb	r2, [r7, #13]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	32ae      	adds	r2, #174	@ 0xae
 8008468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 8163 	beq.w	800873a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008474:	7b7a      	ldrb	r2, [r7, #13]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	32ae      	adds	r2, #174	@ 0xae
 800847a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
 8008486:	4603      	mov	r3, r0
 8008488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800848a:	e156      	b.n	800873a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	785b      	ldrb	r3, [r3, #1]
 8008490:	2b03      	cmp	r3, #3
 8008492:	d008      	beq.n	80084a6 <USBD_StdEPReq+0x9a>
 8008494:	2b03      	cmp	r3, #3
 8008496:	f300 8145 	bgt.w	8008724 <USBD_StdEPReq+0x318>
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 809b 	beq.w	80085d6 <USBD_StdEPReq+0x1ca>
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d03c      	beq.n	800851e <USBD_StdEPReq+0x112>
 80084a4:	e13e      	b.n	8008724 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d002      	beq.n	80084b8 <USBD_StdEPReq+0xac>
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d016      	beq.n	80084e4 <USBD_StdEPReq+0xd8>
 80084b6:	e02c      	b.n	8008512 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00d      	beq.n	80084da <USBD_StdEPReq+0xce>
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	2b80      	cmp	r3, #128	@ 0x80
 80084c2:	d00a      	beq.n	80084da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 f979 	bl	80097c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084ce:	2180      	movs	r1, #128	@ 0x80
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 f975 	bl	80097c0 <USBD_LL_StallEP>
 80084d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084d8:	e020      	b.n	800851c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fc7a 	bl	8008dd6 <USBD_CtlError>
              break;
 80084e2:	e01b      	b.n	800851c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	885b      	ldrh	r3, [r3, #2]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10e      	bne.n	800850a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00b      	beq.n	800850a <USBD_StdEPReq+0xfe>
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	2b80      	cmp	r3, #128	@ 0x80
 80084f6:	d008      	beq.n	800850a <USBD_StdEPReq+0xfe>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	88db      	ldrh	r3, [r3, #6]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d104      	bne.n	800850a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 f95b 	bl	80097c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fd3a 	bl	8008f84 <USBD_CtlSendStatus>

              break;
 8008510:	e004      	b.n	800851c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fc5e 	bl	8008dd6 <USBD_CtlError>
              break;
 800851a:	bf00      	nop
          }
          break;
 800851c:	e107      	b.n	800872e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d002      	beq.n	8008530 <USBD_StdEPReq+0x124>
 800852a:	2b03      	cmp	r3, #3
 800852c:	d016      	beq.n	800855c <USBD_StdEPReq+0x150>
 800852e:	e04b      	b.n	80085c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00d      	beq.n	8008552 <USBD_StdEPReq+0x146>
 8008536:	7bbb      	ldrb	r3, [r7, #14]
 8008538:	2b80      	cmp	r3, #128	@ 0x80
 800853a:	d00a      	beq.n	8008552 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 f93d 	bl	80097c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008546:	2180      	movs	r1, #128	@ 0x80
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f939 	bl	80097c0 <USBD_LL_StallEP>
 800854e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008550:	e040      	b.n	80085d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fc3e 	bl	8008dd6 <USBD_CtlError>
              break;
 800855a:	e03b      	b.n	80085d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	885b      	ldrh	r3, [r3, #2]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d136      	bne.n	80085d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800856a:	2b00      	cmp	r3, #0
 800856c:	d004      	beq.n	8008578 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 f943 	bl	80097fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fd03 	bl	8008f84 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff fde4 	bl	8008150 <USBD_CoreFindEP>
 8008588:	4603      	mov	r3, r0
 800858a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800858c:	7b7b      	ldrb	r3, [r7, #13]
 800858e:	2bff      	cmp	r3, #255	@ 0xff
 8008590:	d01f      	beq.n	80085d2 <USBD_StdEPReq+0x1c6>
 8008592:	7b7b      	ldrb	r3, [r7, #13]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d11c      	bne.n	80085d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008598:	7b7a      	ldrb	r2, [r7, #13]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80085a0:	7b7a      	ldrb	r2, [r7, #13]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	32ae      	adds	r2, #174	@ 0xae
 80085a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d010      	beq.n	80085d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085b0:	7b7a      	ldrb	r2, [r7, #13]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	32ae      	adds	r2, #174	@ 0xae
 80085b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085c6:	e004      	b.n	80085d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fc03 	bl	8008dd6 <USBD_CtlError>
              break;
 80085d0:	e000      	b.n	80085d4 <USBD_StdEPReq+0x1c8>
              break;
 80085d2:	bf00      	nop
          }
          break;
 80085d4:	e0ab      	b.n	800872e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d002      	beq.n	80085e8 <USBD_StdEPReq+0x1dc>
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d032      	beq.n	800864c <USBD_StdEPReq+0x240>
 80085e6:	e097      	b.n	8008718 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <USBD_StdEPReq+0x1f2>
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	2b80      	cmp	r3, #128	@ 0x80
 80085f2:	d004      	beq.n	80085fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fbed 	bl	8008dd6 <USBD_CtlError>
                break;
 80085fc:	e091      	b.n	8008722 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008602:	2b00      	cmp	r3, #0
 8008604:	da0b      	bge.n	800861e <USBD_StdEPReq+0x212>
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	3310      	adds	r3, #16
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	4413      	add	r3, r2
 800861a:	3304      	adds	r3, #4
 800861c:	e00b      	b.n	8008636 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	4413      	add	r3, r2
 8008634:	3304      	adds	r3, #4
 8008636:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2202      	movs	r2, #2
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fc43 	bl	8008ed0 <USBD_CtlSendData>
              break;
 800864a:	e06a      	b.n	8008722 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800864c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008650:	2b00      	cmp	r3, #0
 8008652:	da11      	bge.n	8008678 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	f003 020f 	and.w	r2, r3, #15
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	4613      	mov	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	440b      	add	r3, r1
 8008666:	3324      	adds	r3, #36	@ 0x24
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d117      	bne.n	800869e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fbb0 	bl	8008dd6 <USBD_CtlError>
                  break;
 8008676:	e054      	b.n	8008722 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	f003 020f 	and.w	r2, r3, #15
 800867e:	6879      	ldr	r1, [r7, #4]
 8008680:	4613      	mov	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	440b      	add	r3, r1
 800868a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d104      	bne.n	800869e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fb9d 	bl	8008dd6 <USBD_CtlError>
                  break;
 800869c:	e041      	b.n	8008722 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800869e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da0b      	bge.n	80086be <USBD_StdEPReq+0x2b2>
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	3310      	adds	r3, #16
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	4413      	add	r3, r2
 80086ba:	3304      	adds	r3, #4
 80086bc:	e00b      	b.n	80086d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086c4:	4613      	mov	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	4413      	add	r3, r2
 80086d4:	3304      	adds	r3, #4
 80086d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <USBD_StdEPReq+0x2d8>
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b80      	cmp	r3, #128	@ 0x80
 80086e2:	d103      	bne.n	80086ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	e00e      	b.n	800870a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f8a3 	bl	800983c <USBD_LL_IsStallEP>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2201      	movs	r2, #1
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	e002      	b.n	800870a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2202      	movs	r2, #2
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fbdd 	bl	8008ed0 <USBD_CtlSendData>
              break;
 8008716:	e004      	b.n	8008722 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fb5b 	bl	8008dd6 <USBD_CtlError>
              break;
 8008720:	bf00      	nop
          }
          break;
 8008722:	e004      	b.n	800872e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fb55 	bl	8008dd6 <USBD_CtlError>
          break;
 800872c:	bf00      	nop
      }
      break;
 800872e:	e005      	b.n	800873c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fb4f 	bl	8008dd6 <USBD_CtlError>
      break;
 8008738:	e000      	b.n	800873c <USBD_StdEPReq+0x330>
      break;
 800873a:	bf00      	nop
  }

  return ret;
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	b29b      	uxth	r3, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	2b06      	cmp	r3, #6
 800876a:	f200 8128 	bhi.w	80089be <USBD_GetDescriptor+0x276>
 800876e:	a201      	add	r2, pc, #4	@ (adr r2, 8008774 <USBD_GetDescriptor+0x2c>)
 8008770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008774:	08008791 	.word	0x08008791
 8008778:	080087a9 	.word	0x080087a9
 800877c:	080087e9 	.word	0x080087e9
 8008780:	080089bf 	.word	0x080089bf
 8008784:	080089bf 	.word	0x080089bf
 8008788:	0800895f 	.word	0x0800895f
 800878c:	0800898b 	.word	0x0800898b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	7c12      	ldrb	r2, [r2, #16]
 800879c:	f107 0108 	add.w	r1, r7, #8
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	60f8      	str	r0, [r7, #12]
      break;
 80087a6:	e112      	b.n	80089ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	7c1b      	ldrb	r3, [r3, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10d      	bne.n	80087cc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b8:	f107 0208 	add.w	r2, r7, #8
 80087bc:	4610      	mov	r0, r2
 80087be:	4798      	blx	r3
 80087c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3301      	adds	r3, #1
 80087c6:	2202      	movs	r2, #2
 80087c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087ca:	e100      	b.n	80089ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d4:	f107 0208 	add.w	r2, r7, #8
 80087d8:	4610      	mov	r0, r2
 80087da:	4798      	blx	r3
 80087dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3301      	adds	r3, #1
 80087e2:	2202      	movs	r2, #2
 80087e4:	701a      	strb	r2, [r3, #0]
      break;
 80087e6:	e0f2      	b.n	80089ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	885b      	ldrh	r3, [r3, #2]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b05      	cmp	r3, #5
 80087f0:	f200 80ac 	bhi.w	800894c <USBD_GetDescriptor+0x204>
 80087f4:	a201      	add	r2, pc, #4	@ (adr r2, 80087fc <USBD_GetDescriptor+0xb4>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	08008815 	.word	0x08008815
 8008800:	08008849 	.word	0x08008849
 8008804:	0800887d 	.word	0x0800887d
 8008808:	080088b1 	.word	0x080088b1
 800880c:	080088e5 	.word	0x080088e5
 8008810:	08008919 	.word	0x08008919
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00b      	beq.n	8008838 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	7c12      	ldrb	r2, [r2, #16]
 800882c:	f107 0108 	add.w	r1, r7, #8
 8008830:	4610      	mov	r0, r2
 8008832:	4798      	blx	r3
 8008834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008836:	e091      	b.n	800895c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 facb 	bl	8008dd6 <USBD_CtlError>
            err++;
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	3301      	adds	r3, #1
 8008844:	72fb      	strb	r3, [r7, #11]
          break;
 8008846:	e089      	b.n	800895c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00b      	beq.n	800886c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	7c12      	ldrb	r2, [r2, #16]
 8008860:	f107 0108 	add.w	r1, r7, #8
 8008864:	4610      	mov	r0, r2
 8008866:	4798      	blx	r3
 8008868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800886a:	e077      	b.n	800895c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fab1 	bl	8008dd6 <USBD_CtlError>
            err++;
 8008874:	7afb      	ldrb	r3, [r7, #11]
 8008876:	3301      	adds	r3, #1
 8008878:	72fb      	strb	r3, [r7, #11]
          break;
 800887a:	e06f      	b.n	800895c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	7c12      	ldrb	r2, [r2, #16]
 8008894:	f107 0108 	add.w	r1, r7, #8
 8008898:	4610      	mov	r0, r2
 800889a:	4798      	blx	r3
 800889c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800889e:	e05d      	b.n	800895c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fa97 	bl	8008dd6 <USBD_CtlError>
            err++;
 80088a8:	7afb      	ldrb	r3, [r7, #11]
 80088aa:	3301      	adds	r3, #1
 80088ac:	72fb      	strb	r3, [r7, #11]
          break;
 80088ae:	e055      	b.n	800895c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	7c12      	ldrb	r2, [r2, #16]
 80088c8:	f107 0108 	add.w	r1, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088d2:	e043      	b.n	800895c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fa7d 	bl	8008dd6 <USBD_CtlError>
            err++;
 80088dc:	7afb      	ldrb	r3, [r7, #11]
 80088de:	3301      	adds	r3, #1
 80088e0:	72fb      	strb	r3, [r7, #11]
          break;
 80088e2:	e03b      	b.n	800895c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00b      	beq.n	8008908 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	7c12      	ldrb	r2, [r2, #16]
 80088fc:	f107 0108 	add.w	r1, r7, #8
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008906:	e029      	b.n	800895c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa63 	bl	8008dd6 <USBD_CtlError>
            err++;
 8008910:	7afb      	ldrb	r3, [r7, #11]
 8008912:	3301      	adds	r3, #1
 8008914:	72fb      	strb	r3, [r7, #11]
          break;
 8008916:	e021      	b.n	800895c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	7c12      	ldrb	r2, [r2, #16]
 8008930:	f107 0108 	add.w	r1, r7, #8
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
 8008938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800893a:	e00f      	b.n	800895c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa49 	bl	8008dd6 <USBD_CtlError>
            err++;
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	3301      	adds	r3, #1
 8008948:	72fb      	strb	r3, [r7, #11]
          break;
 800894a:	e007      	b.n	800895c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fa41 	bl	8008dd6 <USBD_CtlError>
          err++;
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	3301      	adds	r3, #1
 8008958:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800895a:	bf00      	nop
      }
      break;
 800895c:	e037      	b.n	80089ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	7c1b      	ldrb	r3, [r3, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d109      	bne.n	800897a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800896c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800896e:	f107 0208 	add.w	r2, r7, #8
 8008972:	4610      	mov	r0, r2
 8008974:	4798      	blx	r3
 8008976:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008978:	e029      	b.n	80089ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fa2a 	bl	8008dd6 <USBD_CtlError>
        err++;
 8008982:	7afb      	ldrb	r3, [r7, #11]
 8008984:	3301      	adds	r3, #1
 8008986:	72fb      	strb	r3, [r7, #11]
      break;
 8008988:	e021      	b.n	80089ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	7c1b      	ldrb	r3, [r3, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10d      	bne.n	80089ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899a:	f107 0208 	add.w	r2, r7, #8
 800899e:	4610      	mov	r0, r2
 80089a0:	4798      	blx	r3
 80089a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3301      	adds	r3, #1
 80089a8:	2207      	movs	r2, #7
 80089aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089ac:	e00f      	b.n	80089ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fa10 	bl	8008dd6 <USBD_CtlError>
        err++;
 80089b6:	7afb      	ldrb	r3, [r7, #11]
 80089b8:	3301      	adds	r3, #1
 80089ba:	72fb      	strb	r3, [r7, #11]
      break;
 80089bc:	e007      	b.n	80089ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fa08 	bl	8008dd6 <USBD_CtlError>
      err++;
 80089c6:	7afb      	ldrb	r3, [r7, #11]
 80089c8:	3301      	adds	r3, #1
 80089ca:	72fb      	strb	r3, [r7, #11]
      break;
 80089cc:	bf00      	nop
  }

  if (err != 0U)
 80089ce:	7afb      	ldrb	r3, [r7, #11]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d11e      	bne.n	8008a12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	88db      	ldrh	r3, [r3, #6]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d016      	beq.n	8008a0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80089dc:	893b      	ldrh	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00e      	beq.n	8008a00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	88da      	ldrh	r2, [r3, #6]
 80089e6:	893b      	ldrh	r3, [r7, #8]
 80089e8:	4293      	cmp	r3, r2
 80089ea:	bf28      	it	cs
 80089ec:	4613      	movcs	r3, r2
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80089f2:	893b      	ldrh	r3, [r7, #8]
 80089f4:	461a      	mov	r2, r3
 80089f6:	68f9      	ldr	r1, [r7, #12]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fa69 	bl	8008ed0 <USBD_CtlSendData>
 80089fe:	e009      	b.n	8008a14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f9e7 	bl	8008dd6 <USBD_CtlError>
 8008a08:	e004      	b.n	8008a14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 faba 	bl	8008f84 <USBD_CtlSendStatus>
 8008a10:	e000      	b.n	8008a14 <USBD_GetDescriptor+0x2cc>
    return;
 8008a12:	bf00      	nop
  }
}
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop

08008a1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	889b      	ldrh	r3, [r3, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d131      	bne.n	8008a92 <USBD_SetAddress+0x76>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	88db      	ldrh	r3, [r3, #6]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d12d      	bne.n	8008a92 <USBD_SetAddress+0x76>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	885b      	ldrh	r3, [r3, #2]
 8008a3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a3c:	d829      	bhi.n	8008a92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	885b      	ldrh	r3, [r3, #2]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d104      	bne.n	8008a60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f9bc 	bl	8008dd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a5e:	e01d      	b.n	8008a9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	7bfa      	ldrb	r2, [r7, #15]
 8008a64:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 ff11 	bl	8009894 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fa86 	bl	8008f84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2202      	movs	r2, #2
 8008a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a86:	e009      	b.n	8008a9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a90:	e004      	b.n	8008a9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f99e 	bl	8008dd6 <USBD_CtlError>
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	bf00      	nop
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	885b      	ldrh	r3, [r3, #2]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	4b4e      	ldr	r3, [pc, #312]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008aba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008abc:	4b4d      	ldr	r3, [pc, #308]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d905      	bls.n	8008ad0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f985 	bl	8008dd6 <USBD_CtlError>
    return USBD_FAIL;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e08c      	b.n	8008bea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d002      	beq.n	8008ae2 <USBD_SetConfig+0x3e>
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d029      	beq.n	8008b34 <USBD_SetConfig+0x90>
 8008ae0:	e075      	b.n	8008bce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ae2:	4b44      	ldr	r3, [pc, #272]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d020      	beq.n	8008b2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008aea:	4b42      	ldr	r3, [pc, #264]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008af4:	4b3f      	ldr	r3, [pc, #252]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7fe ffe3 	bl	8007ac6 <USBD_SetClassConfig>
 8008b00:	4603      	mov	r3, r0
 8008b02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d008      	beq.n	8008b1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f962 	bl	8008dd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2202      	movs	r2, #2
 8008b16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b1a:	e065      	b.n	8008be8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa31 	bl	8008f84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2203      	movs	r2, #3
 8008b26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b2a:	e05d      	b.n	8008be8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fa29 	bl	8008f84 <USBD_CtlSendStatus>
      break;
 8008b32:	e059      	b.n	8008be8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b34:	4b2f      	ldr	r3, [pc, #188]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d112      	bne.n	8008b62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008b44:	4b2b      	ldr	r3, [pc, #172]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b4e:	4b29      	ldr	r3, [pc, #164]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7fe ffd2 	bl	8007afe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fa12 	bl	8008f84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b60:	e042      	b.n	8008be8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008b62:	4b24      	ldr	r3, [pc, #144]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d02a      	beq.n	8008bc6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7fe ffc0 	bl	8007afe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b88:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7fe ff99 	bl	8007ac6 <USBD_SetClassConfig>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00f      	beq.n	8008bbe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f918 	bl	8008dd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7fe ffa5 	bl	8007afe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008bbc:	e014      	b.n	8008be8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f9e0 	bl	8008f84 <USBD_CtlSendStatus>
      break;
 8008bc4:	e010      	b.n	8008be8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f9dc 	bl	8008f84 <USBD_CtlSendStatus>
      break;
 8008bcc:	e00c      	b.n	8008be8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f900 	bl	8008dd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bd6:	4b07      	ldr	r3, [pc, #28]	@ (8008bf4 <USBD_SetConfig+0x150>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7fe ff8e 	bl	8007afe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008be2:	2303      	movs	r3, #3
 8008be4:	73fb      	strb	r3, [r7, #15]
      break;
 8008be6:	bf00      	nop
  }

  return ret;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200004d0 	.word	0x200004d0

08008bf8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	88db      	ldrh	r3, [r3, #6]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d004      	beq.n	8008c14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f8e2 	bl	8008dd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c12:	e023      	b.n	8008c5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	dc02      	bgt.n	8008c26 <USBD_GetConfig+0x2e>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	dc03      	bgt.n	8008c2c <USBD_GetConfig+0x34>
 8008c24:	e015      	b.n	8008c52 <USBD_GetConfig+0x5a>
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d00b      	beq.n	8008c42 <USBD_GetConfig+0x4a>
 8008c2a:	e012      	b.n	8008c52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	3308      	adds	r3, #8
 8008c36:	2201      	movs	r2, #1
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f948 	bl	8008ed0 <USBD_CtlSendData>
        break;
 8008c40:	e00c      	b.n	8008c5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3304      	adds	r3, #4
 8008c46:	2201      	movs	r2, #1
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f940 	bl	8008ed0 <USBD_CtlSendData>
        break;
 8008c50:	e004      	b.n	8008c5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f8be 	bl	8008dd6 <USBD_CtlError>
        break;
 8008c5a:	bf00      	nop
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d81e      	bhi.n	8008cba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	88db      	ldrh	r3, [r3, #6]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d004      	beq.n	8008c8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f8a5 	bl	8008dd6 <USBD_CtlError>
        break;
 8008c8c:	e01a      	b.n	8008cc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d005      	beq.n	8008caa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	f043 0202 	orr.w	r2, r3, #2
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	330c      	adds	r3, #12
 8008cae:	2202      	movs	r2, #2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f90c 	bl	8008ed0 <USBD_CtlSendData>
      break;
 8008cb8:	e004      	b.n	8008cc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f88a 	bl	8008dd6 <USBD_CtlError>
      break;
 8008cc2:	bf00      	nop
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	885b      	ldrh	r3, [r3, #2]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d107      	bne.n	8008cee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f94c 	bl	8008f84 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008cec:	e013      	b.n	8008d16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	885b      	ldrh	r3, [r3, #2]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d10b      	bne.n	8008d0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	889b      	ldrh	r3, [r3, #4]
 8008cfa:	0a1b      	lsrs	r3, r3, #8
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f93c 	bl	8008f84 <USBD_CtlSendStatus>
}
 8008d0c:	e003      	b.n	8008d16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f860 	bl	8008dd6 <USBD_CtlError>
}
 8008d16:	bf00      	nop
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	3b01      	subs	r3, #1
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d80b      	bhi.n	8008d4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	885b      	ldrh	r3, [r3, #2]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d10c      	bne.n	8008d58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f91c 	bl	8008f84 <USBD_CtlSendStatus>
      }
      break;
 8008d4c:	e004      	b.n	8008d58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f840 	bl	8008dd6 <USBD_CtlError>
      break;
 8008d56:	e000      	b.n	8008d5a <USBD_ClrFeature+0x3c>
      break;
 8008d58:	bf00      	nop
  }
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	781a      	ldrb	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff fa40 	bl	8008212 <SWAPBYTE>
 8008d92:	4603      	mov	r3, r0
 8008d94:	461a      	mov	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3301      	adds	r3, #1
 8008da4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f7ff fa33 	bl	8008212 <SWAPBYTE>
 8008dac:	4603      	mov	r3, r0
 8008dae:	461a      	mov	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3301      	adds	r3, #1
 8008db8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7ff fa26 	bl	8008212 <SWAPBYTE>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	461a      	mov	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	80da      	strh	r2, [r3, #6]
}
 8008dce:	bf00      	nop
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008de0:	2180      	movs	r1, #128	@ 0x80
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fcec 	bl	80097c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008de8:	2100      	movs	r1, #0
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fce8 	bl	80097c0 <USBD_LL_StallEP>
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d042      	beq.n	8008e94 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008e12:	6938      	ldr	r0, [r7, #16]
 8008e14:	f000 f842 	bl	8008e9c <USBD_GetLen>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e22:	d808      	bhi.n	8008e36 <USBD_GetString+0x3e>
 8008e24:	6938      	ldr	r0, [r7, #16]
 8008e26:	f000 f839 	bl	8008e9c <USBD_GetLen>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	e001      	b.n	8008e3a <USBD_GetString+0x42>
 8008e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	4413      	add	r3, r2
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	7812      	ldrb	r2, [r2, #0]
 8008e48:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	4413      	add	r3, r2
 8008e56:	2203      	movs	r2, #3
 8008e58:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e60:	e013      	b.n	8008e8a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	4413      	add	r3, r2
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	7812      	ldrb	r2, [r2, #0]
 8008e6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	3301      	adds	r3, #1
 8008e72:	613b      	str	r3, [r7, #16]
    idx++;
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	3301      	adds	r3, #1
 8008e78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	4413      	add	r3, r2
 8008e80:	2200      	movs	r2, #0
 8008e82:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	3301      	adds	r3, #1
 8008e88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e7      	bne.n	8008e62 <USBD_GetString+0x6a>
 8008e92:	e000      	b.n	8008e96 <USBD_GetString+0x9e>
    return;
 8008e94:	bf00      	nop
  }
}
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008eac:	e005      	b.n	8008eba <USBD_GetLen+0x1e>
  {
    len++;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1f5      	bne.n	8008eae <USBD_GetLen+0x12>
  }

  return len;
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 fceb 	bl	80098d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	2100      	movs	r1, #0
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 fcda 	bl	80098d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2203      	movs	r2, #3
 8008f38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	2100      	movs	r1, #0
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 fcde 	bl	8009914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	2100      	movs	r1, #0
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 fccd 	bl	8009914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2204      	movs	r2, #4
 8008f90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f94:	2300      	movs	r3, #0
 8008f96:	2200      	movs	r2, #0
 8008f98:	2100      	movs	r1, #0
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fc99 	bl	80098d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2205      	movs	r2, #5
 8008fb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fba:	2300      	movs	r3, #0
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fca7 	bl	8009914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4912      	ldr	r1, [pc, #72]	@ (8009020 <MX_USB_DEVICE_Init+0x50>)
 8008fd8:	4812      	ldr	r0, [pc, #72]	@ (8009024 <MX_USB_DEVICE_Init+0x54>)
 8008fda:	f7fe fcf7 	bl	80079cc <USBD_Init>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008fe4:	f7f8 fcfc 	bl	80019e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008fe8:	490f      	ldr	r1, [pc, #60]	@ (8009028 <MX_USB_DEVICE_Init+0x58>)
 8008fea:	480e      	ldr	r0, [pc, #56]	@ (8009024 <MX_USB_DEVICE_Init+0x54>)
 8008fec:	f7fe fd1e 	bl	8007a2c <USBD_RegisterClass>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ff6:	f7f8 fcf3 	bl	80019e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ffa:	490c      	ldr	r1, [pc, #48]	@ (800902c <MX_USB_DEVICE_Init+0x5c>)
 8008ffc:	4809      	ldr	r0, [pc, #36]	@ (8009024 <MX_USB_DEVICE_Init+0x54>)
 8008ffe:	f7fe fc15 	bl	800782c <USBD_CDC_RegisterInterface>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009008:	f7f8 fcea 	bl	80019e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800900c:	4805      	ldr	r0, [pc, #20]	@ (8009024 <MX_USB_DEVICE_Init+0x54>)
 800900e:	f7fe fd43 	bl	8007a98 <USBD_Start>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009018:	f7f8 fce2 	bl	80019e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800901c:	bf00      	nop
 800901e:	bd80      	pop	{r7, pc}
 8009020:	200000ac 	.word	0x200000ac
 8009024:	200004d4 	.word	0x200004d4
 8009028:	20000018 	.word	0x20000018
 800902c:	20000098 	.word	0x20000098

08009030 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009034:	2200      	movs	r2, #0
 8009036:	4905      	ldr	r1, [pc, #20]	@ (800904c <CDC_Init_FS+0x1c>)
 8009038:	4805      	ldr	r0, [pc, #20]	@ (8009050 <CDC_Init_FS+0x20>)
 800903a:	f7fe fc11 	bl	8007860 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800903e:	4905      	ldr	r1, [pc, #20]	@ (8009054 <CDC_Init_FS+0x24>)
 8009040:	4803      	ldr	r0, [pc, #12]	@ (8009050 <CDC_Init_FS+0x20>)
 8009042:	f7fe fc2f 	bl	80078a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009046:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009048:	4618      	mov	r0, r3
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20000fb0 	.word	0x20000fb0
 8009050:	200004d4 	.word	0x200004d4
 8009054:	200007b0 	.word	0x200007b0

08009058 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009058:	b480      	push	{r7}
 800905a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800905c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800905e:	4618      	mov	r0, r3
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	6039      	str	r1, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
 8009074:	4613      	mov	r3, r2
 8009076:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009078:	79fb      	ldrb	r3, [r7, #7]
 800907a:	2b23      	cmp	r3, #35	@ 0x23
 800907c:	d84a      	bhi.n	8009114 <CDC_Control_FS+0xac>
 800907e:	a201      	add	r2, pc, #4	@ (adr r2, 8009084 <CDC_Control_FS+0x1c>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	08009115 	.word	0x08009115
 8009088:	08009115 	.word	0x08009115
 800908c:	08009115 	.word	0x08009115
 8009090:	08009115 	.word	0x08009115
 8009094:	08009115 	.word	0x08009115
 8009098:	08009115 	.word	0x08009115
 800909c:	08009115 	.word	0x08009115
 80090a0:	08009115 	.word	0x08009115
 80090a4:	08009115 	.word	0x08009115
 80090a8:	08009115 	.word	0x08009115
 80090ac:	08009115 	.word	0x08009115
 80090b0:	08009115 	.word	0x08009115
 80090b4:	08009115 	.word	0x08009115
 80090b8:	08009115 	.word	0x08009115
 80090bc:	08009115 	.word	0x08009115
 80090c0:	08009115 	.word	0x08009115
 80090c4:	08009115 	.word	0x08009115
 80090c8:	08009115 	.word	0x08009115
 80090cc:	08009115 	.word	0x08009115
 80090d0:	08009115 	.word	0x08009115
 80090d4:	08009115 	.word	0x08009115
 80090d8:	08009115 	.word	0x08009115
 80090dc:	08009115 	.word	0x08009115
 80090e0:	08009115 	.word	0x08009115
 80090e4:	08009115 	.word	0x08009115
 80090e8:	08009115 	.word	0x08009115
 80090ec:	08009115 	.word	0x08009115
 80090f0:	08009115 	.word	0x08009115
 80090f4:	08009115 	.word	0x08009115
 80090f8:	08009115 	.word	0x08009115
 80090fc:	08009115 	.word	0x08009115
 8009100:	08009115 	.word	0x08009115
 8009104:	08009115 	.word	0x08009115
 8009108:	08009115 	.word	0x08009115
 800910c:	08009115 	.word	0x08009115
 8009110:	08009115 	.word	0x08009115
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009114:	bf00      	nop
  }

  return (USBD_OK);
 8009116:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	4805      	ldr	r0, [pc, #20]	@ (8009148 <CDC_Receive_FS+0x24>)
 8009132:	f7fe fbb7 	bl	80078a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009136:	4804      	ldr	r0, [pc, #16]	@ (8009148 <CDC_Receive_FS+0x24>)
 8009138:	f7fe fc12 	bl	8007960 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800913c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	200004d4 	.word	0x200004d4

0800914c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800915c:	4b0d      	ldr	r3, [pc, #52]	@ (8009194 <CDC_Transmit_FS+0x48>)
 800915e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009162:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800916e:	2301      	movs	r3, #1
 8009170:	e00b      	b.n	800918a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009172:	887b      	ldrh	r3, [r7, #2]
 8009174:	461a      	mov	r2, r3
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	4806      	ldr	r0, [pc, #24]	@ (8009194 <CDC_Transmit_FS+0x48>)
 800917a:	f7fe fb71 	bl	8007860 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800917e:	4805      	ldr	r0, [pc, #20]	@ (8009194 <CDC_Transmit_FS+0x48>)
 8009180:	f7fe fbae 	bl	80078e0 <USBD_CDC_TransmitPacket>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009188:	7bfb      	ldrb	r3, [r7, #15]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	200004d4 	.word	0x200004d4

08009198 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	4613      	mov	r3, r2
 80091a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80091aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
	...

080091bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2212      	movs	r2, #18
 80091cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091ce:	4b03      	ldr	r3, [pc, #12]	@ (80091dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	200000c8 	.word	0x200000c8

080091e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2204      	movs	r2, #4
 80091f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091f2:	4b03      	ldr	r3, [pc, #12]	@ (8009200 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	200000dc 	.word	0x200000dc

08009204 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d105      	bne.n	8009222 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	4907      	ldr	r1, [pc, #28]	@ (8009238 <USBD_FS_ProductStrDescriptor+0x34>)
 800921a:	4808      	ldr	r0, [pc, #32]	@ (800923c <USBD_FS_ProductStrDescriptor+0x38>)
 800921c:	f7ff fdec 	bl	8008df8 <USBD_GetString>
 8009220:	e004      	b.n	800922c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	4904      	ldr	r1, [pc, #16]	@ (8009238 <USBD_FS_ProductStrDescriptor+0x34>)
 8009226:	4805      	ldr	r0, [pc, #20]	@ (800923c <USBD_FS_ProductStrDescriptor+0x38>)
 8009228:	f7ff fde6 	bl	8008df8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800922c:	4b02      	ldr	r3, [pc, #8]	@ (8009238 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	200017b0 	.word	0x200017b0
 800923c:	0800c718 	.word	0x0800c718

08009240 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	6039      	str	r1, [r7, #0]
 800924a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	4904      	ldr	r1, [pc, #16]	@ (8009260 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009250:	4804      	ldr	r0, [pc, #16]	@ (8009264 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009252:	f7ff fdd1 	bl	8008df8 <USBD_GetString>
  return USBD_StrDesc;
 8009256:	4b02      	ldr	r3, [pc, #8]	@ (8009260 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	200017b0 	.word	0x200017b0
 8009264:	0800c730 	.word	0x0800c730

08009268 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	221a      	movs	r2, #26
 8009278:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800927a:	f000 f843 	bl	8009304 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800927e:	4b02      	ldr	r3, [pc, #8]	@ (8009288 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	200000e0 	.word	0x200000e0

0800928c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	6039      	str	r1, [r7, #0]
 8009296:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d105      	bne.n	80092aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	4907      	ldr	r1, [pc, #28]	@ (80092c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092a2:	4808      	ldr	r0, [pc, #32]	@ (80092c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092a4:	f7ff fda8 	bl	8008df8 <USBD_GetString>
 80092a8:	e004      	b.n	80092b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4904      	ldr	r1, [pc, #16]	@ (80092c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092ae:	4805      	ldr	r0, [pc, #20]	@ (80092c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092b0:	f7ff fda2 	bl	8008df8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092b4:	4b02      	ldr	r3, [pc, #8]	@ (80092c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	200017b0 	.word	0x200017b0
 80092c4:	0800c744 	.word	0x0800c744

080092c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092d4:	79fb      	ldrb	r3, [r7, #7]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d105      	bne.n	80092e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	4907      	ldr	r1, [pc, #28]	@ (80092fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092de:	4808      	ldr	r0, [pc, #32]	@ (8009300 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092e0:	f7ff fd8a 	bl	8008df8 <USBD_GetString>
 80092e4:	e004      	b.n	80092f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	4904      	ldr	r1, [pc, #16]	@ (80092fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ea:	4805      	ldr	r0, [pc, #20]	@ (8009300 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092ec:	f7ff fd84 	bl	8008df8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092f0:	4b02      	ldr	r3, [pc, #8]	@ (80092fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	200017b0 	.word	0x200017b0
 8009300:	0800c750 	.word	0x0800c750

08009304 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800930a:	4b0f      	ldr	r3, [pc, #60]	@ (8009348 <Get_SerialNum+0x44>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009310:	4b0e      	ldr	r3, [pc, #56]	@ (800934c <Get_SerialNum+0x48>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009316:	4b0e      	ldr	r3, [pc, #56]	@ (8009350 <Get_SerialNum+0x4c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4413      	add	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800932a:	2208      	movs	r2, #8
 800932c:	4909      	ldr	r1, [pc, #36]	@ (8009354 <Get_SerialNum+0x50>)
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 f814 	bl	800935c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009334:	2204      	movs	r2, #4
 8009336:	4908      	ldr	r1, [pc, #32]	@ (8009358 <Get_SerialNum+0x54>)
 8009338:	68b8      	ldr	r0, [r7, #8]
 800933a:	f000 f80f 	bl	800935c <IntToUnicode>
  }
}
 800933e:	bf00      	nop
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	1fff7a10 	.word	0x1fff7a10
 800934c:	1fff7a14 	.word	0x1fff7a14
 8009350:	1fff7a18 	.word	0x1fff7a18
 8009354:	200000e2 	.word	0x200000e2
 8009358:	200000f2 	.word	0x200000f2

0800935c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800936e:	2300      	movs	r3, #0
 8009370:	75fb      	strb	r3, [r7, #23]
 8009372:	e027      	b.n	80093c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	0f1b      	lsrs	r3, r3, #28
 8009378:	2b09      	cmp	r3, #9
 800937a:	d80b      	bhi.n	8009394 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	0f1b      	lsrs	r3, r3, #28
 8009380:	b2da      	uxtb	r2, r3
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	4619      	mov	r1, r3
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	440b      	add	r3, r1
 800938c:	3230      	adds	r2, #48	@ 0x30
 800938e:	b2d2      	uxtb	r2, r2
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	e00a      	b.n	80093aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	0f1b      	lsrs	r3, r3, #28
 8009398:	b2da      	uxtb	r2, r3
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	4619      	mov	r1, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	440b      	add	r3, r1
 80093a4:	3237      	adds	r2, #55	@ 0x37
 80093a6:	b2d2      	uxtb	r2, r2
 80093a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	3301      	adds	r3, #1
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	4413      	add	r3, r2
 80093ba:	2200      	movs	r2, #0
 80093bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	3301      	adds	r3, #1
 80093c2:	75fb      	strb	r3, [r7, #23]
 80093c4:	7dfa      	ldrb	r2, [r7, #23]
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d3d3      	bcc.n	8009374 <IntToUnicode+0x18>
  }
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
	...

080093dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08a      	sub	sp, #40	@ 0x28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093e4:	f107 0314 	add.w	r3, r7, #20
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	605a      	str	r2, [r3, #4]
 80093ee:	609a      	str	r2, [r3, #8]
 80093f0:	60da      	str	r2, [r3, #12]
 80093f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093fc:	d13a      	bne.n	8009474 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093fe:	2300      	movs	r3, #0
 8009400:	613b      	str	r3, [r7, #16]
 8009402:	4b1e      	ldr	r3, [pc, #120]	@ (800947c <HAL_PCD_MspInit+0xa0>)
 8009404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009406:	4a1d      	ldr	r2, [pc, #116]	@ (800947c <HAL_PCD_MspInit+0xa0>)
 8009408:	f043 0301 	orr.w	r3, r3, #1
 800940c:	6313      	str	r3, [r2, #48]	@ 0x30
 800940e:	4b1b      	ldr	r3, [pc, #108]	@ (800947c <HAL_PCD_MspInit+0xa0>)
 8009410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	613b      	str	r3, [r7, #16]
 8009418:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800941a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800941e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009420:	2302      	movs	r3, #2
 8009422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009424:	2300      	movs	r3, #0
 8009426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009428:	2303      	movs	r3, #3
 800942a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800942c:	230a      	movs	r3, #10
 800942e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009430:	f107 0314 	add.w	r3, r7, #20
 8009434:	4619      	mov	r1, r3
 8009436:	4812      	ldr	r0, [pc, #72]	@ (8009480 <HAL_PCD_MspInit+0xa4>)
 8009438:	f7f9 fa58 	bl	80028ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800943c:	4b0f      	ldr	r3, [pc, #60]	@ (800947c <HAL_PCD_MspInit+0xa0>)
 800943e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009440:	4a0e      	ldr	r2, [pc, #56]	@ (800947c <HAL_PCD_MspInit+0xa0>)
 8009442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009446:	6353      	str	r3, [r2, #52]	@ 0x34
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	4b0b      	ldr	r3, [pc, #44]	@ (800947c <HAL_PCD_MspInit+0xa0>)
 800944e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009450:	4a0a      	ldr	r2, [pc, #40]	@ (800947c <HAL_PCD_MspInit+0xa0>)
 8009452:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009456:	6453      	str	r3, [r2, #68]	@ 0x44
 8009458:	4b08      	ldr	r3, [pc, #32]	@ (800947c <HAL_PCD_MspInit+0xa0>)
 800945a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800945c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009460:	60fb      	str	r3, [r7, #12]
 8009462:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009464:	2200      	movs	r2, #0
 8009466:	2100      	movs	r1, #0
 8009468:	2043      	movs	r0, #67	@ 0x43
 800946a:	f7f8 fe76 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800946e:	2043      	movs	r0, #67	@ 0x43
 8009470:	f7f8 fe8f 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009474:	bf00      	nop
 8009476:	3728      	adds	r7, #40	@ 0x28
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	40023800 	.word	0x40023800
 8009480:	40020000 	.word	0x40020000

08009484 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009498:	4619      	mov	r1, r3
 800949a:	4610      	mov	r0, r2
 800949c:	f7fe fb49 	bl	8007b32 <USBD_LL_SetupStage>
}
 80094a0:	bf00      	nop
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	4619      	mov	r1, r3
 80094d2:	f7fe fb83 	bl	8007bdc <USBD_LL_DataOutStage>
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	460b      	mov	r3, r1
 80094e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4613      	mov	r3, r2
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	3320      	adds	r3, #32
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	4619      	mov	r1, r3
 8009506:	f7fe fc1c 	bl	8007d42 <USBD_LL_DataInStage>
}
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009520:	4618      	mov	r0, r3
 8009522:	f7fe fd56 	bl	8007fd2 <USBD_LL_SOF>
}
 8009526:	bf00      	nop
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009536:	2301      	movs	r3, #1
 8009538:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	79db      	ldrb	r3, [r3, #7]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d102      	bne.n	8009548 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]
 8009546:	e008      	b.n	800955a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	79db      	ldrb	r3, [r3, #7]
 800954c:	2b02      	cmp	r3, #2
 800954e:	d102      	bne.n	8009556 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009550:	2301      	movs	r3, #1
 8009552:	73fb      	strb	r3, [r7, #15]
 8009554:	e001      	b.n	800955a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009556:	f7f8 fa43 	bl	80019e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009560:	7bfa      	ldrb	r2, [r7, #15]
 8009562:	4611      	mov	r1, r2
 8009564:	4618      	mov	r0, r3
 8009566:	f7fe fcf0 	bl	8007f4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009570:	4618      	mov	r0, r3
 8009572:	f7fe fc98 	bl	8007ea6 <USBD_LL_Reset>
}
 8009576:	bf00      	nop
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800958e:	4618      	mov	r0, r3
 8009590:	f7fe fceb 	bl	8007f6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6812      	ldr	r2, [r2, #0]
 80095a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80095a6:	f043 0301 	orr.w	r3, r3, #1
 80095aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	7adb      	ldrb	r3, [r3, #11]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095b4:	4b04      	ldr	r3, [pc, #16]	@ (80095c8 <HAL_PCD_SuspendCallback+0x48>)
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	4a03      	ldr	r2, [pc, #12]	@ (80095c8 <HAL_PCD_SuspendCallback+0x48>)
 80095ba:	f043 0306 	orr.w	r3, r3, #6
 80095be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	e000ed00 	.word	0xe000ed00

080095cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fce1 	bl	8007fa2 <USBD_LL_Resume>
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095fa:	78fa      	ldrb	r2, [r7, #3]
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fd39 	bl	8008076 <USBD_LL_IsoOUTIncomplete>
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fcf5 	bl	8008012 <USBD_LL_IsoINIncomplete>
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fd4b 	bl	80080da <USBD_LL_DevConnected>
}
 8009644:	bf00      	nop
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fd48 	bl	80080f0 <USBD_LL_DevDisconnected>
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d13c      	bne.n	80096f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009678:	4a20      	ldr	r2, [pc, #128]	@ (80096fc <USBD_LL_Init+0x94>)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a1e      	ldr	r2, [pc, #120]	@ (80096fc <USBD_LL_Init+0x94>)
 8009684:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009688:	4b1c      	ldr	r3, [pc, #112]	@ (80096fc <USBD_LL_Init+0x94>)
 800968a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800968e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009690:	4b1a      	ldr	r3, [pc, #104]	@ (80096fc <USBD_LL_Init+0x94>)
 8009692:	2204      	movs	r2, #4
 8009694:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009696:	4b19      	ldr	r3, [pc, #100]	@ (80096fc <USBD_LL_Init+0x94>)
 8009698:	2202      	movs	r2, #2
 800969a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800969c:	4b17      	ldr	r3, [pc, #92]	@ (80096fc <USBD_LL_Init+0x94>)
 800969e:	2200      	movs	r2, #0
 80096a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096a2:	4b16      	ldr	r3, [pc, #88]	@ (80096fc <USBD_LL_Init+0x94>)
 80096a4:	2202      	movs	r2, #2
 80096a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096a8:	4b14      	ldr	r3, [pc, #80]	@ (80096fc <USBD_LL_Init+0x94>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80096ae:	4b13      	ldr	r3, [pc, #76]	@ (80096fc <USBD_LL_Init+0x94>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80096b4:	4b11      	ldr	r3, [pc, #68]	@ (80096fc <USBD_LL_Init+0x94>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80096ba:	4b10      	ldr	r3, [pc, #64]	@ (80096fc <USBD_LL_Init+0x94>)
 80096bc:	2200      	movs	r2, #0
 80096be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80096c0:	4b0e      	ldr	r3, [pc, #56]	@ (80096fc <USBD_LL_Init+0x94>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80096c6:	480d      	ldr	r0, [pc, #52]	@ (80096fc <USBD_LL_Init+0x94>)
 80096c8:	f7f9 fade 	bl	8002c88 <HAL_PCD_Init>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80096d2:	f7f8 f985 	bl	80019e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80096d6:	2180      	movs	r1, #128	@ 0x80
 80096d8:	4808      	ldr	r0, [pc, #32]	@ (80096fc <USBD_LL_Init+0x94>)
 80096da:	f7fa fd0a 	bl	80040f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80096de:	2240      	movs	r2, #64	@ 0x40
 80096e0:	2100      	movs	r1, #0
 80096e2:	4806      	ldr	r0, [pc, #24]	@ (80096fc <USBD_LL_Init+0x94>)
 80096e4:	f7fa fcbe 	bl	8004064 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80096e8:	2280      	movs	r2, #128	@ 0x80
 80096ea:	2101      	movs	r1, #1
 80096ec:	4803      	ldr	r0, [pc, #12]	@ (80096fc <USBD_LL_Init+0x94>)
 80096ee:	f7fa fcb9 	bl	8004064 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	200019b0 	.word	0x200019b0

08009700 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009716:	4618      	mov	r0, r3
 8009718:	f7f9 fbc5 	bl	8002ea6 <HAL_PCD_Start>
 800971c:	4603      	mov	r3, r0
 800971e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009720:	7bfb      	ldrb	r3, [r7, #15]
 8009722:	4618      	mov	r0, r3
 8009724:	f000 f942 	bl	80099ac <USBD_Get_USB_Status>
 8009728:	4603      	mov	r3, r0
 800972a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800972c:	7bbb      	ldrb	r3, [r7, #14]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	4608      	mov	r0, r1
 8009740:	4611      	mov	r1, r2
 8009742:	461a      	mov	r2, r3
 8009744:	4603      	mov	r3, r0
 8009746:	70fb      	strb	r3, [r7, #3]
 8009748:	460b      	mov	r3, r1
 800974a:	70bb      	strb	r3, [r7, #2]
 800974c:	4613      	mov	r3, r2
 800974e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800975e:	78bb      	ldrb	r3, [r7, #2]
 8009760:	883a      	ldrh	r2, [r7, #0]
 8009762:	78f9      	ldrb	r1, [r7, #3]
 8009764:	f7fa f899 	bl	800389a <HAL_PCD_EP_Open>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f91c 	bl	80099ac <USBD_Get_USB_Status>
 8009774:	4603      	mov	r3, r0
 8009776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009778:	7bbb      	ldrb	r3, [r7, #14]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	460b      	mov	r3, r1
 800978c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800979c:	78fa      	ldrb	r2, [r7, #3]
 800979e:	4611      	mov	r1, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fa f8e4 	bl	800396e <HAL_PCD_EP_Close>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 f8fd 	bl	80099ac <USBD_Get_USB_Status>
 80097b2:	4603      	mov	r3, r0
 80097b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	460b      	mov	r3, r1
 80097ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097da:	78fa      	ldrb	r2, [r7, #3]
 80097dc:	4611      	mov	r1, r2
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fa f99c 	bl	8003b1c <HAL_PCD_EP_SetStall>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 f8de 	bl	80099ac <USBD_Get_USB_Status>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	460b      	mov	r3, r1
 8009808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009818:	78fa      	ldrb	r2, [r7, #3]
 800981a:	4611      	mov	r1, r2
 800981c:	4618      	mov	r0, r3
 800981e:	f7fa f9e0 	bl	8003be2 <HAL_PCD_EP_ClrStall>
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 f8bf 	bl	80099ac <USBD_Get_USB_Status>
 800982e:	4603      	mov	r3, r0
 8009830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009832:	7bbb      	ldrb	r3, [r7, #14]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800984e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009854:	2b00      	cmp	r3, #0
 8009856:	da0b      	bge.n	8009870 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800985e:	68f9      	ldr	r1, [r7, #12]
 8009860:	4613      	mov	r3, r2
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	4413      	add	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	440b      	add	r3, r1
 800986a:	3316      	adds	r3, #22
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	e00b      	b.n	8009888 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009876:	68f9      	ldr	r1, [r7, #12]
 8009878:	4613      	mov	r3, r2
 800987a:	00db      	lsls	r3, r3, #3
 800987c:	4413      	add	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	440b      	add	r3, r1
 8009882:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009886:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098ae:	78fa      	ldrb	r2, [r7, #3]
 80098b0:	4611      	mov	r1, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7f9 ffcd 	bl	8003852 <HAL_PCD_SetAddress>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 f874 	bl	80099ac <USBD_Get_USB_Status>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b086      	sub	sp, #24
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	607a      	str	r2, [r7, #4]
 80098dc:	603b      	str	r3, [r7, #0]
 80098de:	460b      	mov	r3, r1
 80098e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80098f0:	7af9      	ldrb	r1, [r7, #11]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	f7fa f8d7 	bl	8003aa8 <HAL_PCD_EP_Transmit>
 80098fa:	4603      	mov	r3, r0
 80098fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	4618      	mov	r0, r3
 8009902:	f000 f853 	bl	80099ac <USBD_Get_USB_Status>
 8009906:	4603      	mov	r3, r0
 8009908:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800990a:	7dbb      	ldrb	r3, [r7, #22]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	607a      	str	r2, [r7, #4]
 800991e:	603b      	str	r3, [r7, #0]
 8009920:	460b      	mov	r3, r1
 8009922:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009932:	7af9      	ldrb	r1, [r7, #11]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	f7fa f863 	bl	8003a02 <HAL_PCD_EP_Receive>
 800993c:	4603      	mov	r3, r0
 800993e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009940:	7dfb      	ldrb	r3, [r7, #23]
 8009942:	4618      	mov	r0, r3
 8009944:	f000 f832 	bl	80099ac <USBD_Get_USB_Status>
 8009948:	4603      	mov	r3, r0
 800994a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800994c:	7dbb      	ldrb	r3, [r7, #22]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	4611      	mov	r1, r2
 800996c:	4618      	mov	r0, r3
 800996e:	f7fa f883 	bl	8003a78 <HAL_PCD_EP_GetRxCount>
 8009972:	4603      	mov	r3, r0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009984:	4b03      	ldr	r3, [pc, #12]	@ (8009994 <USBD_static_malloc+0x18>)
}
 8009986:	4618      	mov	r0, r3
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20001e94 	.word	0x20001e94

08009998 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]

}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	4603      	mov	r3, r0
 80099b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d817      	bhi.n	80099f0 <USBD_Get_USB_Status+0x44>
 80099c0:	a201      	add	r2, pc, #4	@ (adr r2, 80099c8 <USBD_Get_USB_Status+0x1c>)
 80099c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c6:	bf00      	nop
 80099c8:	080099d9 	.word	0x080099d9
 80099cc:	080099df 	.word	0x080099df
 80099d0:	080099e5 	.word	0x080099e5
 80099d4:	080099eb 	.word	0x080099eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]
    break;
 80099dc:	e00b      	b.n	80099f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099de:	2303      	movs	r3, #3
 80099e0:	73fb      	strb	r3, [r7, #15]
    break;
 80099e2:	e008      	b.n	80099f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099e4:	2301      	movs	r3, #1
 80099e6:	73fb      	strb	r3, [r7, #15]
    break;
 80099e8:	e005      	b.n	80099f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099ea:	2303      	movs	r3, #3
 80099ec:	73fb      	strb	r3, [r7, #15]
    break;
 80099ee:	e002      	b.n	80099f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099f0:	2303      	movs	r3, #3
 80099f2:	73fb      	strb	r3, [r7, #15]
    break;
 80099f4:	bf00      	nop
  }
  return usb_status;
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <__cvt>:
 8009a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a08:	ec57 6b10 	vmov	r6, r7, d0
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	4619      	mov	r1, r3
 8009a12:	463b      	mov	r3, r7
 8009a14:	bfbb      	ittet	lt
 8009a16:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009a1a:	461f      	movlt	r7, r3
 8009a1c:	2300      	movge	r3, #0
 8009a1e:	232d      	movlt	r3, #45	@ 0x2d
 8009a20:	700b      	strb	r3, [r1, #0]
 8009a22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a24:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009a28:	4691      	mov	r9, r2
 8009a2a:	f023 0820 	bic.w	r8, r3, #32
 8009a2e:	bfbc      	itt	lt
 8009a30:	4632      	movlt	r2, r6
 8009a32:	4616      	movlt	r6, r2
 8009a34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a38:	d005      	beq.n	8009a46 <__cvt+0x42>
 8009a3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a3e:	d100      	bne.n	8009a42 <__cvt+0x3e>
 8009a40:	3401      	adds	r4, #1
 8009a42:	2102      	movs	r1, #2
 8009a44:	e000      	b.n	8009a48 <__cvt+0x44>
 8009a46:	2103      	movs	r1, #3
 8009a48:	ab03      	add	r3, sp, #12
 8009a4a:	9301      	str	r3, [sp, #4]
 8009a4c:	ab02      	add	r3, sp, #8
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	ec47 6b10 	vmov	d0, r6, r7
 8009a54:	4653      	mov	r3, sl
 8009a56:	4622      	mov	r2, r4
 8009a58:	f000 fe5a 	bl	800a710 <_dtoa_r>
 8009a5c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a60:	4605      	mov	r5, r0
 8009a62:	d119      	bne.n	8009a98 <__cvt+0x94>
 8009a64:	f019 0f01 	tst.w	r9, #1
 8009a68:	d00e      	beq.n	8009a88 <__cvt+0x84>
 8009a6a:	eb00 0904 	add.w	r9, r0, r4
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2300      	movs	r3, #0
 8009a72:	4630      	mov	r0, r6
 8009a74:	4639      	mov	r1, r7
 8009a76:	f7f7 f827 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a7a:	b108      	cbz	r0, 8009a80 <__cvt+0x7c>
 8009a7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a80:	2230      	movs	r2, #48	@ 0x30
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	454b      	cmp	r3, r9
 8009a86:	d31e      	bcc.n	8009ac6 <__cvt+0xc2>
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a8c:	1b5b      	subs	r3, r3, r5
 8009a8e:	4628      	mov	r0, r5
 8009a90:	6013      	str	r3, [r2, #0]
 8009a92:	b004      	add	sp, #16
 8009a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a9c:	eb00 0904 	add.w	r9, r0, r4
 8009aa0:	d1e5      	bne.n	8009a6e <__cvt+0x6a>
 8009aa2:	7803      	ldrb	r3, [r0, #0]
 8009aa4:	2b30      	cmp	r3, #48	@ 0x30
 8009aa6:	d10a      	bne.n	8009abe <__cvt+0xba>
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	2300      	movs	r3, #0
 8009aac:	4630      	mov	r0, r6
 8009aae:	4639      	mov	r1, r7
 8009ab0:	f7f7 f80a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ab4:	b918      	cbnz	r0, 8009abe <__cvt+0xba>
 8009ab6:	f1c4 0401 	rsb	r4, r4, #1
 8009aba:	f8ca 4000 	str.w	r4, [sl]
 8009abe:	f8da 3000 	ldr.w	r3, [sl]
 8009ac2:	4499      	add	r9, r3
 8009ac4:	e7d3      	b.n	8009a6e <__cvt+0x6a>
 8009ac6:	1c59      	adds	r1, r3, #1
 8009ac8:	9103      	str	r1, [sp, #12]
 8009aca:	701a      	strb	r2, [r3, #0]
 8009acc:	e7d9      	b.n	8009a82 <__cvt+0x7e>

08009ace <__exponent>:
 8009ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ad0:	2900      	cmp	r1, #0
 8009ad2:	bfba      	itte	lt
 8009ad4:	4249      	neglt	r1, r1
 8009ad6:	232d      	movlt	r3, #45	@ 0x2d
 8009ad8:	232b      	movge	r3, #43	@ 0x2b
 8009ada:	2909      	cmp	r1, #9
 8009adc:	7002      	strb	r2, [r0, #0]
 8009ade:	7043      	strb	r3, [r0, #1]
 8009ae0:	dd29      	ble.n	8009b36 <__exponent+0x68>
 8009ae2:	f10d 0307 	add.w	r3, sp, #7
 8009ae6:	461d      	mov	r5, r3
 8009ae8:	270a      	movs	r7, #10
 8009aea:	461a      	mov	r2, r3
 8009aec:	fbb1 f6f7 	udiv	r6, r1, r7
 8009af0:	fb07 1416 	mls	r4, r7, r6, r1
 8009af4:	3430      	adds	r4, #48	@ 0x30
 8009af6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009afa:	460c      	mov	r4, r1
 8009afc:	2c63      	cmp	r4, #99	@ 0x63
 8009afe:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b02:	4631      	mov	r1, r6
 8009b04:	dcf1      	bgt.n	8009aea <__exponent+0x1c>
 8009b06:	3130      	adds	r1, #48	@ 0x30
 8009b08:	1e94      	subs	r4, r2, #2
 8009b0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b0e:	1c41      	adds	r1, r0, #1
 8009b10:	4623      	mov	r3, r4
 8009b12:	42ab      	cmp	r3, r5
 8009b14:	d30a      	bcc.n	8009b2c <__exponent+0x5e>
 8009b16:	f10d 0309 	add.w	r3, sp, #9
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	42ac      	cmp	r4, r5
 8009b1e:	bf88      	it	hi
 8009b20:	2300      	movhi	r3, #0
 8009b22:	3302      	adds	r3, #2
 8009b24:	4403      	add	r3, r0
 8009b26:	1a18      	subs	r0, r3, r0
 8009b28:	b003      	add	sp, #12
 8009b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b2c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b30:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b34:	e7ed      	b.n	8009b12 <__exponent+0x44>
 8009b36:	2330      	movs	r3, #48	@ 0x30
 8009b38:	3130      	adds	r1, #48	@ 0x30
 8009b3a:	7083      	strb	r3, [r0, #2]
 8009b3c:	70c1      	strb	r1, [r0, #3]
 8009b3e:	1d03      	adds	r3, r0, #4
 8009b40:	e7f1      	b.n	8009b26 <__exponent+0x58>
	...

08009b44 <_printf_float>:
 8009b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b48:	b08d      	sub	sp, #52	@ 0x34
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b50:	4616      	mov	r6, r2
 8009b52:	461f      	mov	r7, r3
 8009b54:	4605      	mov	r5, r0
 8009b56:	f000 fcdb 	bl	800a510 <_localeconv_r>
 8009b5a:	6803      	ldr	r3, [r0, #0]
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7f6 fb86 	bl	8000270 <strlen>
 8009b64:	2300      	movs	r3, #0
 8009b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b68:	f8d8 3000 	ldr.w	r3, [r8]
 8009b6c:	9005      	str	r0, [sp, #20]
 8009b6e:	3307      	adds	r3, #7
 8009b70:	f023 0307 	bic.w	r3, r3, #7
 8009b74:	f103 0208 	add.w	r2, r3, #8
 8009b78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b7c:	f8d4 b000 	ldr.w	fp, [r4]
 8009b80:	f8c8 2000 	str.w	r2, [r8]
 8009b84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b8c:	9307      	str	r3, [sp, #28]
 8009b8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8009e0c <_printf_float+0x2c8>)
 8009b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba0:	f7f6 ffc4 	bl	8000b2c <__aeabi_dcmpun>
 8009ba4:	bb70      	cbnz	r0, 8009c04 <_printf_float+0xc0>
 8009ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009baa:	4b98      	ldr	r3, [pc, #608]	@ (8009e0c <_printf_float+0x2c8>)
 8009bac:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb0:	f7f6 ff9e 	bl	8000af0 <__aeabi_dcmple>
 8009bb4:	bb30      	cbnz	r0, 8009c04 <_printf_float+0xc0>
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4640      	mov	r0, r8
 8009bbc:	4649      	mov	r1, r9
 8009bbe:	f7f6 ff8d 	bl	8000adc <__aeabi_dcmplt>
 8009bc2:	b110      	cbz	r0, 8009bca <_printf_float+0x86>
 8009bc4:	232d      	movs	r3, #45	@ 0x2d
 8009bc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bca:	4a91      	ldr	r2, [pc, #580]	@ (8009e10 <_printf_float+0x2cc>)
 8009bcc:	4b91      	ldr	r3, [pc, #580]	@ (8009e14 <_printf_float+0x2d0>)
 8009bce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009bd2:	bf94      	ite	ls
 8009bd4:	4690      	movls	r8, r2
 8009bd6:	4698      	movhi	r8, r3
 8009bd8:	2303      	movs	r3, #3
 8009bda:	6123      	str	r3, [r4, #16]
 8009bdc:	f02b 0304 	bic.w	r3, fp, #4
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	f04f 0900 	mov.w	r9, #0
 8009be6:	9700      	str	r7, [sp, #0]
 8009be8:	4633      	mov	r3, r6
 8009bea:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009bec:	4621      	mov	r1, r4
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f000 f9d2 	bl	8009f98 <_printf_common>
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	f040 808d 	bne.w	8009d14 <_printf_float+0x1d0>
 8009bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfe:	b00d      	add	sp, #52	@ 0x34
 8009c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c04:	4642      	mov	r2, r8
 8009c06:	464b      	mov	r3, r9
 8009c08:	4640      	mov	r0, r8
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	f7f6 ff8e 	bl	8000b2c <__aeabi_dcmpun>
 8009c10:	b140      	cbz	r0, 8009c24 <_printf_float+0xe0>
 8009c12:	464b      	mov	r3, r9
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	bfbc      	itt	lt
 8009c18:	232d      	movlt	r3, #45	@ 0x2d
 8009c1a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8009e18 <_printf_float+0x2d4>)
 8009c20:	4b7e      	ldr	r3, [pc, #504]	@ (8009e1c <_printf_float+0x2d8>)
 8009c22:	e7d4      	b.n	8009bce <_printf_float+0x8a>
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009c2a:	9206      	str	r2, [sp, #24]
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	d13b      	bne.n	8009ca8 <_printf_float+0x164>
 8009c30:	2306      	movs	r3, #6
 8009c32:	6063      	str	r3, [r4, #4]
 8009c34:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c38:	2300      	movs	r3, #0
 8009c3a:	6022      	str	r2, [r4, #0]
 8009c3c:	9303      	str	r3, [sp, #12]
 8009c3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c40:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c44:	ab09      	add	r3, sp, #36	@ 0x24
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	6861      	ldr	r1, [r4, #4]
 8009c4a:	ec49 8b10 	vmov	d0, r8, r9
 8009c4e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c52:	4628      	mov	r0, r5
 8009c54:	f7ff fed6 	bl	8009a04 <__cvt>
 8009c58:	9b06      	ldr	r3, [sp, #24]
 8009c5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c5c:	2b47      	cmp	r3, #71	@ 0x47
 8009c5e:	4680      	mov	r8, r0
 8009c60:	d129      	bne.n	8009cb6 <_printf_float+0x172>
 8009c62:	1cc8      	adds	r0, r1, #3
 8009c64:	db02      	blt.n	8009c6c <_printf_float+0x128>
 8009c66:	6863      	ldr	r3, [r4, #4]
 8009c68:	4299      	cmp	r1, r3
 8009c6a:	dd41      	ble.n	8009cf0 <_printf_float+0x1ac>
 8009c6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c70:	fa5f fa8a 	uxtb.w	sl, sl
 8009c74:	3901      	subs	r1, #1
 8009c76:	4652      	mov	r2, sl
 8009c78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c7e:	f7ff ff26 	bl	8009ace <__exponent>
 8009c82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c84:	1813      	adds	r3, r2, r0
 8009c86:	2a01      	cmp	r2, #1
 8009c88:	4681      	mov	r9, r0
 8009c8a:	6123      	str	r3, [r4, #16]
 8009c8c:	dc02      	bgt.n	8009c94 <_printf_float+0x150>
 8009c8e:	6822      	ldr	r2, [r4, #0]
 8009c90:	07d2      	lsls	r2, r2, #31
 8009c92:	d501      	bpl.n	8009c98 <_printf_float+0x154>
 8009c94:	3301      	adds	r3, #1
 8009c96:	6123      	str	r3, [r4, #16]
 8009c98:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0a2      	beq.n	8009be6 <_printf_float+0xa2>
 8009ca0:	232d      	movs	r3, #45	@ 0x2d
 8009ca2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ca6:	e79e      	b.n	8009be6 <_printf_float+0xa2>
 8009ca8:	9a06      	ldr	r2, [sp, #24]
 8009caa:	2a47      	cmp	r2, #71	@ 0x47
 8009cac:	d1c2      	bne.n	8009c34 <_printf_float+0xf0>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1c0      	bne.n	8009c34 <_printf_float+0xf0>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e7bd      	b.n	8009c32 <_printf_float+0xee>
 8009cb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cba:	d9db      	bls.n	8009c74 <_printf_float+0x130>
 8009cbc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009cc0:	d118      	bne.n	8009cf4 <_printf_float+0x1b0>
 8009cc2:	2900      	cmp	r1, #0
 8009cc4:	6863      	ldr	r3, [r4, #4]
 8009cc6:	dd0b      	ble.n	8009ce0 <_printf_float+0x19c>
 8009cc8:	6121      	str	r1, [r4, #16]
 8009cca:	b913      	cbnz	r3, 8009cd2 <_printf_float+0x18e>
 8009ccc:	6822      	ldr	r2, [r4, #0]
 8009cce:	07d0      	lsls	r0, r2, #31
 8009cd0:	d502      	bpl.n	8009cd8 <_printf_float+0x194>
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	440b      	add	r3, r1
 8009cd6:	6123      	str	r3, [r4, #16]
 8009cd8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009cda:	f04f 0900 	mov.w	r9, #0
 8009cde:	e7db      	b.n	8009c98 <_printf_float+0x154>
 8009ce0:	b913      	cbnz	r3, 8009ce8 <_printf_float+0x1a4>
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	07d2      	lsls	r2, r2, #31
 8009ce6:	d501      	bpl.n	8009cec <_printf_float+0x1a8>
 8009ce8:	3302      	adds	r3, #2
 8009cea:	e7f4      	b.n	8009cd6 <_printf_float+0x192>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e7f2      	b.n	8009cd6 <_printf_float+0x192>
 8009cf0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cf6:	4299      	cmp	r1, r3
 8009cf8:	db05      	blt.n	8009d06 <_printf_float+0x1c2>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	6121      	str	r1, [r4, #16]
 8009cfe:	07d8      	lsls	r0, r3, #31
 8009d00:	d5ea      	bpl.n	8009cd8 <_printf_float+0x194>
 8009d02:	1c4b      	adds	r3, r1, #1
 8009d04:	e7e7      	b.n	8009cd6 <_printf_float+0x192>
 8009d06:	2900      	cmp	r1, #0
 8009d08:	bfd4      	ite	le
 8009d0a:	f1c1 0202 	rsble	r2, r1, #2
 8009d0e:	2201      	movgt	r2, #1
 8009d10:	4413      	add	r3, r2
 8009d12:	e7e0      	b.n	8009cd6 <_printf_float+0x192>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	055a      	lsls	r2, r3, #21
 8009d18:	d407      	bmi.n	8009d2a <_printf_float+0x1e6>
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	4642      	mov	r2, r8
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4628      	mov	r0, r5
 8009d22:	47b8      	blx	r7
 8009d24:	3001      	adds	r0, #1
 8009d26:	d12b      	bne.n	8009d80 <_printf_float+0x23c>
 8009d28:	e767      	b.n	8009bfa <_printf_float+0xb6>
 8009d2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d2e:	f240 80dd 	bls.w	8009eec <_printf_float+0x3a8>
 8009d32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d36:	2200      	movs	r2, #0
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f7f6 fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d033      	beq.n	8009daa <_printf_float+0x266>
 8009d42:	4a37      	ldr	r2, [pc, #220]	@ (8009e20 <_printf_float+0x2dc>)
 8009d44:	2301      	movs	r3, #1
 8009d46:	4631      	mov	r1, r6
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b8      	blx	r7
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	f43f af54 	beq.w	8009bfa <_printf_float+0xb6>
 8009d52:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d56:	4543      	cmp	r3, r8
 8009d58:	db02      	blt.n	8009d60 <_printf_float+0x21c>
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	07d8      	lsls	r0, r3, #31
 8009d5e:	d50f      	bpl.n	8009d80 <_printf_float+0x23c>
 8009d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d64:	4631      	mov	r1, r6
 8009d66:	4628      	mov	r0, r5
 8009d68:	47b8      	blx	r7
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	f43f af45 	beq.w	8009bfa <_printf_float+0xb6>
 8009d70:	f04f 0900 	mov.w	r9, #0
 8009d74:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d78:	f104 0a1a 	add.w	sl, r4, #26
 8009d7c:	45c8      	cmp	r8, r9
 8009d7e:	dc09      	bgt.n	8009d94 <_printf_float+0x250>
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	079b      	lsls	r3, r3, #30
 8009d84:	f100 8103 	bmi.w	8009f8e <_printf_float+0x44a>
 8009d88:	68e0      	ldr	r0, [r4, #12]
 8009d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d8c:	4298      	cmp	r0, r3
 8009d8e:	bfb8      	it	lt
 8009d90:	4618      	movlt	r0, r3
 8009d92:	e734      	b.n	8009bfe <_printf_float+0xba>
 8009d94:	2301      	movs	r3, #1
 8009d96:	4652      	mov	r2, sl
 8009d98:	4631      	mov	r1, r6
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	47b8      	blx	r7
 8009d9e:	3001      	adds	r0, #1
 8009da0:	f43f af2b 	beq.w	8009bfa <_printf_float+0xb6>
 8009da4:	f109 0901 	add.w	r9, r9, #1
 8009da8:	e7e8      	b.n	8009d7c <_printf_float+0x238>
 8009daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	dc39      	bgt.n	8009e24 <_printf_float+0x2e0>
 8009db0:	4a1b      	ldr	r2, [pc, #108]	@ (8009e20 <_printf_float+0x2dc>)
 8009db2:	2301      	movs	r3, #1
 8009db4:	4631      	mov	r1, r6
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f af1d 	beq.w	8009bfa <_printf_float+0xb6>
 8009dc0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009dc4:	ea59 0303 	orrs.w	r3, r9, r3
 8009dc8:	d102      	bne.n	8009dd0 <_printf_float+0x28c>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	07d9      	lsls	r1, r3, #31
 8009dce:	d5d7      	bpl.n	8009d80 <_printf_float+0x23c>
 8009dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	47b8      	blx	r7
 8009dda:	3001      	adds	r0, #1
 8009ddc:	f43f af0d 	beq.w	8009bfa <_printf_float+0xb6>
 8009de0:	f04f 0a00 	mov.w	sl, #0
 8009de4:	f104 0b1a 	add.w	fp, r4, #26
 8009de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dea:	425b      	negs	r3, r3
 8009dec:	4553      	cmp	r3, sl
 8009dee:	dc01      	bgt.n	8009df4 <_printf_float+0x2b0>
 8009df0:	464b      	mov	r3, r9
 8009df2:	e793      	b.n	8009d1c <_printf_float+0x1d8>
 8009df4:	2301      	movs	r3, #1
 8009df6:	465a      	mov	r2, fp
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b8      	blx	r7
 8009dfe:	3001      	adds	r0, #1
 8009e00:	f43f aefb 	beq.w	8009bfa <_printf_float+0xb6>
 8009e04:	f10a 0a01 	add.w	sl, sl, #1
 8009e08:	e7ee      	b.n	8009de8 <_printf_float+0x2a4>
 8009e0a:	bf00      	nop
 8009e0c:	7fefffff 	.word	0x7fefffff
 8009e10:	0800c778 	.word	0x0800c778
 8009e14:	0800c77c 	.word	0x0800c77c
 8009e18:	0800c780 	.word	0x0800c780
 8009e1c:	0800c784 	.word	0x0800c784
 8009e20:	0800c788 	.word	0x0800c788
 8009e24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e2a:	4553      	cmp	r3, sl
 8009e2c:	bfa8      	it	ge
 8009e2e:	4653      	movge	r3, sl
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	4699      	mov	r9, r3
 8009e34:	dc36      	bgt.n	8009ea4 <_printf_float+0x360>
 8009e36:	f04f 0b00 	mov.w	fp, #0
 8009e3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e3e:	f104 021a 	add.w	r2, r4, #26
 8009e42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e44:	9306      	str	r3, [sp, #24]
 8009e46:	eba3 0309 	sub.w	r3, r3, r9
 8009e4a:	455b      	cmp	r3, fp
 8009e4c:	dc31      	bgt.n	8009eb2 <_printf_float+0x36e>
 8009e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e50:	459a      	cmp	sl, r3
 8009e52:	dc3a      	bgt.n	8009eca <_printf_float+0x386>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	07da      	lsls	r2, r3, #31
 8009e58:	d437      	bmi.n	8009eca <_printf_float+0x386>
 8009e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e5c:	ebaa 0903 	sub.w	r9, sl, r3
 8009e60:	9b06      	ldr	r3, [sp, #24]
 8009e62:	ebaa 0303 	sub.w	r3, sl, r3
 8009e66:	4599      	cmp	r9, r3
 8009e68:	bfa8      	it	ge
 8009e6a:	4699      	movge	r9, r3
 8009e6c:	f1b9 0f00 	cmp.w	r9, #0
 8009e70:	dc33      	bgt.n	8009eda <_printf_float+0x396>
 8009e72:	f04f 0800 	mov.w	r8, #0
 8009e76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e7a:	f104 0b1a 	add.w	fp, r4, #26
 8009e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e80:	ebaa 0303 	sub.w	r3, sl, r3
 8009e84:	eba3 0309 	sub.w	r3, r3, r9
 8009e88:	4543      	cmp	r3, r8
 8009e8a:	f77f af79 	ble.w	8009d80 <_printf_float+0x23c>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	465a      	mov	r2, fp
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b8      	blx	r7
 8009e98:	3001      	adds	r0, #1
 8009e9a:	f43f aeae 	beq.w	8009bfa <_printf_float+0xb6>
 8009e9e:	f108 0801 	add.w	r8, r8, #1
 8009ea2:	e7ec      	b.n	8009e7e <_printf_float+0x33a>
 8009ea4:	4642      	mov	r2, r8
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b8      	blx	r7
 8009eac:	3001      	adds	r0, #1
 8009eae:	d1c2      	bne.n	8009e36 <_printf_float+0x2f2>
 8009eb0:	e6a3      	b.n	8009bfa <_printf_float+0xb6>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	9206      	str	r2, [sp, #24]
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	f43f ae9c 	beq.w	8009bfa <_printf_float+0xb6>
 8009ec2:	9a06      	ldr	r2, [sp, #24]
 8009ec4:	f10b 0b01 	add.w	fp, fp, #1
 8009ec8:	e7bb      	b.n	8009e42 <_printf_float+0x2fe>
 8009eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	47b8      	blx	r7
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d1c0      	bne.n	8009e5a <_printf_float+0x316>
 8009ed8:	e68f      	b.n	8009bfa <_printf_float+0xb6>
 8009eda:	9a06      	ldr	r2, [sp, #24]
 8009edc:	464b      	mov	r3, r9
 8009ede:	4442      	add	r2, r8
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	47b8      	blx	r7
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d1c3      	bne.n	8009e72 <_printf_float+0x32e>
 8009eea:	e686      	b.n	8009bfa <_printf_float+0xb6>
 8009eec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ef0:	f1ba 0f01 	cmp.w	sl, #1
 8009ef4:	dc01      	bgt.n	8009efa <_printf_float+0x3b6>
 8009ef6:	07db      	lsls	r3, r3, #31
 8009ef8:	d536      	bpl.n	8009f68 <_printf_float+0x424>
 8009efa:	2301      	movs	r3, #1
 8009efc:	4642      	mov	r2, r8
 8009efe:	4631      	mov	r1, r6
 8009f00:	4628      	mov	r0, r5
 8009f02:	47b8      	blx	r7
 8009f04:	3001      	adds	r0, #1
 8009f06:	f43f ae78 	beq.w	8009bfa <_printf_float+0xb6>
 8009f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b8      	blx	r7
 8009f14:	3001      	adds	r0, #1
 8009f16:	f43f ae70 	beq.w	8009bfa <_printf_float+0xb6>
 8009f1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2300      	movs	r3, #0
 8009f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f26:	f7f6 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f2a:	b9c0      	cbnz	r0, 8009f5e <_printf_float+0x41a>
 8009f2c:	4653      	mov	r3, sl
 8009f2e:	f108 0201 	add.w	r2, r8, #1
 8009f32:	4631      	mov	r1, r6
 8009f34:	4628      	mov	r0, r5
 8009f36:	47b8      	blx	r7
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d10c      	bne.n	8009f56 <_printf_float+0x412>
 8009f3c:	e65d      	b.n	8009bfa <_printf_float+0xb6>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	465a      	mov	r2, fp
 8009f42:	4631      	mov	r1, r6
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b8      	blx	r7
 8009f48:	3001      	adds	r0, #1
 8009f4a:	f43f ae56 	beq.w	8009bfa <_printf_float+0xb6>
 8009f4e:	f108 0801 	add.w	r8, r8, #1
 8009f52:	45d0      	cmp	r8, sl
 8009f54:	dbf3      	blt.n	8009f3e <_printf_float+0x3fa>
 8009f56:	464b      	mov	r3, r9
 8009f58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f5c:	e6df      	b.n	8009d1e <_printf_float+0x1da>
 8009f5e:	f04f 0800 	mov.w	r8, #0
 8009f62:	f104 0b1a 	add.w	fp, r4, #26
 8009f66:	e7f4      	b.n	8009f52 <_printf_float+0x40e>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	4642      	mov	r2, r8
 8009f6c:	e7e1      	b.n	8009f32 <_printf_float+0x3ee>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	464a      	mov	r2, r9
 8009f72:	4631      	mov	r1, r6
 8009f74:	4628      	mov	r0, r5
 8009f76:	47b8      	blx	r7
 8009f78:	3001      	adds	r0, #1
 8009f7a:	f43f ae3e 	beq.w	8009bfa <_printf_float+0xb6>
 8009f7e:	f108 0801 	add.w	r8, r8, #1
 8009f82:	68e3      	ldr	r3, [r4, #12]
 8009f84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f86:	1a5b      	subs	r3, r3, r1
 8009f88:	4543      	cmp	r3, r8
 8009f8a:	dcf0      	bgt.n	8009f6e <_printf_float+0x42a>
 8009f8c:	e6fc      	b.n	8009d88 <_printf_float+0x244>
 8009f8e:	f04f 0800 	mov.w	r8, #0
 8009f92:	f104 0919 	add.w	r9, r4, #25
 8009f96:	e7f4      	b.n	8009f82 <_printf_float+0x43e>

08009f98 <_printf_common>:
 8009f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f9c:	4616      	mov	r6, r2
 8009f9e:	4698      	mov	r8, r3
 8009fa0:	688a      	ldr	r2, [r1, #8]
 8009fa2:	690b      	ldr	r3, [r1, #16]
 8009fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	bfb8      	it	lt
 8009fac:	4613      	movlt	r3, r2
 8009fae:	6033      	str	r3, [r6, #0]
 8009fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	b10a      	cbz	r2, 8009fbe <_printf_common+0x26>
 8009fba:	3301      	adds	r3, #1
 8009fbc:	6033      	str	r3, [r6, #0]
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	0699      	lsls	r1, r3, #26
 8009fc2:	bf42      	ittt	mi
 8009fc4:	6833      	ldrmi	r3, [r6, #0]
 8009fc6:	3302      	addmi	r3, #2
 8009fc8:	6033      	strmi	r3, [r6, #0]
 8009fca:	6825      	ldr	r5, [r4, #0]
 8009fcc:	f015 0506 	ands.w	r5, r5, #6
 8009fd0:	d106      	bne.n	8009fe0 <_printf_common+0x48>
 8009fd2:	f104 0a19 	add.w	sl, r4, #25
 8009fd6:	68e3      	ldr	r3, [r4, #12]
 8009fd8:	6832      	ldr	r2, [r6, #0]
 8009fda:	1a9b      	subs	r3, r3, r2
 8009fdc:	42ab      	cmp	r3, r5
 8009fde:	dc26      	bgt.n	800a02e <_printf_common+0x96>
 8009fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fe4:	6822      	ldr	r2, [r4, #0]
 8009fe6:	3b00      	subs	r3, #0
 8009fe8:	bf18      	it	ne
 8009fea:	2301      	movne	r3, #1
 8009fec:	0692      	lsls	r2, r2, #26
 8009fee:	d42b      	bmi.n	800a048 <_printf_common+0xb0>
 8009ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ff4:	4641      	mov	r1, r8
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	47c8      	blx	r9
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	d01e      	beq.n	800a03c <_printf_common+0xa4>
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	6922      	ldr	r2, [r4, #16]
 800a002:	f003 0306 	and.w	r3, r3, #6
 800a006:	2b04      	cmp	r3, #4
 800a008:	bf02      	ittt	eq
 800a00a:	68e5      	ldreq	r5, [r4, #12]
 800a00c:	6833      	ldreq	r3, [r6, #0]
 800a00e:	1aed      	subeq	r5, r5, r3
 800a010:	68a3      	ldr	r3, [r4, #8]
 800a012:	bf0c      	ite	eq
 800a014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a018:	2500      	movne	r5, #0
 800a01a:	4293      	cmp	r3, r2
 800a01c:	bfc4      	itt	gt
 800a01e:	1a9b      	subgt	r3, r3, r2
 800a020:	18ed      	addgt	r5, r5, r3
 800a022:	2600      	movs	r6, #0
 800a024:	341a      	adds	r4, #26
 800a026:	42b5      	cmp	r5, r6
 800a028:	d11a      	bne.n	800a060 <_printf_common+0xc8>
 800a02a:	2000      	movs	r0, #0
 800a02c:	e008      	b.n	800a040 <_printf_common+0xa8>
 800a02e:	2301      	movs	r3, #1
 800a030:	4652      	mov	r2, sl
 800a032:	4641      	mov	r1, r8
 800a034:	4638      	mov	r0, r7
 800a036:	47c8      	blx	r9
 800a038:	3001      	adds	r0, #1
 800a03a:	d103      	bne.n	800a044 <_printf_common+0xac>
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295
 800a040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a044:	3501      	adds	r5, #1
 800a046:	e7c6      	b.n	8009fd6 <_printf_common+0x3e>
 800a048:	18e1      	adds	r1, r4, r3
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	2030      	movs	r0, #48	@ 0x30
 800a04e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a052:	4422      	add	r2, r4
 800a054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a05c:	3302      	adds	r3, #2
 800a05e:	e7c7      	b.n	8009ff0 <_printf_common+0x58>
 800a060:	2301      	movs	r3, #1
 800a062:	4622      	mov	r2, r4
 800a064:	4641      	mov	r1, r8
 800a066:	4638      	mov	r0, r7
 800a068:	47c8      	blx	r9
 800a06a:	3001      	adds	r0, #1
 800a06c:	d0e6      	beq.n	800a03c <_printf_common+0xa4>
 800a06e:	3601      	adds	r6, #1
 800a070:	e7d9      	b.n	800a026 <_printf_common+0x8e>
	...

0800a074 <_printf_i>:
 800a074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a078:	7e0f      	ldrb	r7, [r1, #24]
 800a07a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a07c:	2f78      	cmp	r7, #120	@ 0x78
 800a07e:	4691      	mov	r9, r2
 800a080:	4680      	mov	r8, r0
 800a082:	460c      	mov	r4, r1
 800a084:	469a      	mov	sl, r3
 800a086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a08a:	d807      	bhi.n	800a09c <_printf_i+0x28>
 800a08c:	2f62      	cmp	r7, #98	@ 0x62
 800a08e:	d80a      	bhi.n	800a0a6 <_printf_i+0x32>
 800a090:	2f00      	cmp	r7, #0
 800a092:	f000 80d2 	beq.w	800a23a <_printf_i+0x1c6>
 800a096:	2f58      	cmp	r7, #88	@ 0x58
 800a098:	f000 80b9 	beq.w	800a20e <_printf_i+0x19a>
 800a09c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0a4:	e03a      	b.n	800a11c <_printf_i+0xa8>
 800a0a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0aa:	2b15      	cmp	r3, #21
 800a0ac:	d8f6      	bhi.n	800a09c <_printf_i+0x28>
 800a0ae:	a101      	add	r1, pc, #4	@ (adr r1, 800a0b4 <_printf_i+0x40>)
 800a0b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0b4:	0800a10d 	.word	0x0800a10d
 800a0b8:	0800a121 	.word	0x0800a121
 800a0bc:	0800a09d 	.word	0x0800a09d
 800a0c0:	0800a09d 	.word	0x0800a09d
 800a0c4:	0800a09d 	.word	0x0800a09d
 800a0c8:	0800a09d 	.word	0x0800a09d
 800a0cc:	0800a121 	.word	0x0800a121
 800a0d0:	0800a09d 	.word	0x0800a09d
 800a0d4:	0800a09d 	.word	0x0800a09d
 800a0d8:	0800a09d 	.word	0x0800a09d
 800a0dc:	0800a09d 	.word	0x0800a09d
 800a0e0:	0800a221 	.word	0x0800a221
 800a0e4:	0800a14b 	.word	0x0800a14b
 800a0e8:	0800a1db 	.word	0x0800a1db
 800a0ec:	0800a09d 	.word	0x0800a09d
 800a0f0:	0800a09d 	.word	0x0800a09d
 800a0f4:	0800a243 	.word	0x0800a243
 800a0f8:	0800a09d 	.word	0x0800a09d
 800a0fc:	0800a14b 	.word	0x0800a14b
 800a100:	0800a09d 	.word	0x0800a09d
 800a104:	0800a09d 	.word	0x0800a09d
 800a108:	0800a1e3 	.word	0x0800a1e3
 800a10c:	6833      	ldr	r3, [r6, #0]
 800a10e:	1d1a      	adds	r2, r3, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6032      	str	r2, [r6, #0]
 800a114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a11c:	2301      	movs	r3, #1
 800a11e:	e09d      	b.n	800a25c <_printf_i+0x1e8>
 800a120:	6833      	ldr	r3, [r6, #0]
 800a122:	6820      	ldr	r0, [r4, #0]
 800a124:	1d19      	adds	r1, r3, #4
 800a126:	6031      	str	r1, [r6, #0]
 800a128:	0606      	lsls	r6, r0, #24
 800a12a:	d501      	bpl.n	800a130 <_printf_i+0xbc>
 800a12c:	681d      	ldr	r5, [r3, #0]
 800a12e:	e003      	b.n	800a138 <_printf_i+0xc4>
 800a130:	0645      	lsls	r5, r0, #25
 800a132:	d5fb      	bpl.n	800a12c <_printf_i+0xb8>
 800a134:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a138:	2d00      	cmp	r5, #0
 800a13a:	da03      	bge.n	800a144 <_printf_i+0xd0>
 800a13c:	232d      	movs	r3, #45	@ 0x2d
 800a13e:	426d      	negs	r5, r5
 800a140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a144:	4859      	ldr	r0, [pc, #356]	@ (800a2ac <_printf_i+0x238>)
 800a146:	230a      	movs	r3, #10
 800a148:	e011      	b.n	800a16e <_printf_i+0xfa>
 800a14a:	6821      	ldr	r1, [r4, #0]
 800a14c:	6833      	ldr	r3, [r6, #0]
 800a14e:	0608      	lsls	r0, r1, #24
 800a150:	f853 5b04 	ldr.w	r5, [r3], #4
 800a154:	d402      	bmi.n	800a15c <_printf_i+0xe8>
 800a156:	0649      	lsls	r1, r1, #25
 800a158:	bf48      	it	mi
 800a15a:	b2ad      	uxthmi	r5, r5
 800a15c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a15e:	4853      	ldr	r0, [pc, #332]	@ (800a2ac <_printf_i+0x238>)
 800a160:	6033      	str	r3, [r6, #0]
 800a162:	bf14      	ite	ne
 800a164:	230a      	movne	r3, #10
 800a166:	2308      	moveq	r3, #8
 800a168:	2100      	movs	r1, #0
 800a16a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a16e:	6866      	ldr	r6, [r4, #4]
 800a170:	60a6      	str	r6, [r4, #8]
 800a172:	2e00      	cmp	r6, #0
 800a174:	bfa2      	ittt	ge
 800a176:	6821      	ldrge	r1, [r4, #0]
 800a178:	f021 0104 	bicge.w	r1, r1, #4
 800a17c:	6021      	strge	r1, [r4, #0]
 800a17e:	b90d      	cbnz	r5, 800a184 <_printf_i+0x110>
 800a180:	2e00      	cmp	r6, #0
 800a182:	d04b      	beq.n	800a21c <_printf_i+0x1a8>
 800a184:	4616      	mov	r6, r2
 800a186:	fbb5 f1f3 	udiv	r1, r5, r3
 800a18a:	fb03 5711 	mls	r7, r3, r1, r5
 800a18e:	5dc7      	ldrb	r7, [r0, r7]
 800a190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a194:	462f      	mov	r7, r5
 800a196:	42bb      	cmp	r3, r7
 800a198:	460d      	mov	r5, r1
 800a19a:	d9f4      	bls.n	800a186 <_printf_i+0x112>
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d10b      	bne.n	800a1b8 <_printf_i+0x144>
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	07df      	lsls	r7, r3, #31
 800a1a4:	d508      	bpl.n	800a1b8 <_printf_i+0x144>
 800a1a6:	6923      	ldr	r3, [r4, #16]
 800a1a8:	6861      	ldr	r1, [r4, #4]
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	bfde      	ittt	le
 800a1ae:	2330      	movle	r3, #48	@ 0x30
 800a1b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1b8:	1b92      	subs	r2, r2, r6
 800a1ba:	6122      	str	r2, [r4, #16]
 800a1bc:	f8cd a000 	str.w	sl, [sp]
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	aa03      	add	r2, sp, #12
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	f7ff fee6 	bl	8009f98 <_printf_common>
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d14a      	bne.n	800a266 <_printf_i+0x1f2>
 800a1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d4:	b004      	add	sp, #16
 800a1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	f043 0320 	orr.w	r3, r3, #32
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	4833      	ldr	r0, [pc, #204]	@ (800a2b0 <_printf_i+0x23c>)
 800a1e4:	2778      	movs	r7, #120	@ 0x78
 800a1e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	6831      	ldr	r1, [r6, #0]
 800a1ee:	061f      	lsls	r7, r3, #24
 800a1f0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1f4:	d402      	bmi.n	800a1fc <_printf_i+0x188>
 800a1f6:	065f      	lsls	r7, r3, #25
 800a1f8:	bf48      	it	mi
 800a1fa:	b2ad      	uxthmi	r5, r5
 800a1fc:	6031      	str	r1, [r6, #0]
 800a1fe:	07d9      	lsls	r1, r3, #31
 800a200:	bf44      	itt	mi
 800a202:	f043 0320 	orrmi.w	r3, r3, #32
 800a206:	6023      	strmi	r3, [r4, #0]
 800a208:	b11d      	cbz	r5, 800a212 <_printf_i+0x19e>
 800a20a:	2310      	movs	r3, #16
 800a20c:	e7ac      	b.n	800a168 <_printf_i+0xf4>
 800a20e:	4827      	ldr	r0, [pc, #156]	@ (800a2ac <_printf_i+0x238>)
 800a210:	e7e9      	b.n	800a1e6 <_printf_i+0x172>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	f023 0320 	bic.w	r3, r3, #32
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	e7f6      	b.n	800a20a <_printf_i+0x196>
 800a21c:	4616      	mov	r6, r2
 800a21e:	e7bd      	b.n	800a19c <_printf_i+0x128>
 800a220:	6833      	ldr	r3, [r6, #0]
 800a222:	6825      	ldr	r5, [r4, #0]
 800a224:	6961      	ldr	r1, [r4, #20]
 800a226:	1d18      	adds	r0, r3, #4
 800a228:	6030      	str	r0, [r6, #0]
 800a22a:	062e      	lsls	r6, r5, #24
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	d501      	bpl.n	800a234 <_printf_i+0x1c0>
 800a230:	6019      	str	r1, [r3, #0]
 800a232:	e002      	b.n	800a23a <_printf_i+0x1c6>
 800a234:	0668      	lsls	r0, r5, #25
 800a236:	d5fb      	bpl.n	800a230 <_printf_i+0x1bc>
 800a238:	8019      	strh	r1, [r3, #0]
 800a23a:	2300      	movs	r3, #0
 800a23c:	6123      	str	r3, [r4, #16]
 800a23e:	4616      	mov	r6, r2
 800a240:	e7bc      	b.n	800a1bc <_printf_i+0x148>
 800a242:	6833      	ldr	r3, [r6, #0]
 800a244:	1d1a      	adds	r2, r3, #4
 800a246:	6032      	str	r2, [r6, #0]
 800a248:	681e      	ldr	r6, [r3, #0]
 800a24a:	6862      	ldr	r2, [r4, #4]
 800a24c:	2100      	movs	r1, #0
 800a24e:	4630      	mov	r0, r6
 800a250:	f7f5 ffbe 	bl	80001d0 <memchr>
 800a254:	b108      	cbz	r0, 800a25a <_printf_i+0x1e6>
 800a256:	1b80      	subs	r0, r0, r6
 800a258:	6060      	str	r0, [r4, #4]
 800a25a:	6863      	ldr	r3, [r4, #4]
 800a25c:	6123      	str	r3, [r4, #16]
 800a25e:	2300      	movs	r3, #0
 800a260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a264:	e7aa      	b.n	800a1bc <_printf_i+0x148>
 800a266:	6923      	ldr	r3, [r4, #16]
 800a268:	4632      	mov	r2, r6
 800a26a:	4649      	mov	r1, r9
 800a26c:	4640      	mov	r0, r8
 800a26e:	47d0      	blx	sl
 800a270:	3001      	adds	r0, #1
 800a272:	d0ad      	beq.n	800a1d0 <_printf_i+0x15c>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	079b      	lsls	r3, r3, #30
 800a278:	d413      	bmi.n	800a2a2 <_printf_i+0x22e>
 800a27a:	68e0      	ldr	r0, [r4, #12]
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	4298      	cmp	r0, r3
 800a280:	bfb8      	it	lt
 800a282:	4618      	movlt	r0, r3
 800a284:	e7a6      	b.n	800a1d4 <_printf_i+0x160>
 800a286:	2301      	movs	r3, #1
 800a288:	4632      	mov	r2, r6
 800a28a:	4649      	mov	r1, r9
 800a28c:	4640      	mov	r0, r8
 800a28e:	47d0      	blx	sl
 800a290:	3001      	adds	r0, #1
 800a292:	d09d      	beq.n	800a1d0 <_printf_i+0x15c>
 800a294:	3501      	adds	r5, #1
 800a296:	68e3      	ldr	r3, [r4, #12]
 800a298:	9903      	ldr	r1, [sp, #12]
 800a29a:	1a5b      	subs	r3, r3, r1
 800a29c:	42ab      	cmp	r3, r5
 800a29e:	dcf2      	bgt.n	800a286 <_printf_i+0x212>
 800a2a0:	e7eb      	b.n	800a27a <_printf_i+0x206>
 800a2a2:	2500      	movs	r5, #0
 800a2a4:	f104 0619 	add.w	r6, r4, #25
 800a2a8:	e7f5      	b.n	800a296 <_printf_i+0x222>
 800a2aa:	bf00      	nop
 800a2ac:	0800c78a 	.word	0x0800c78a
 800a2b0:	0800c79b 	.word	0x0800c79b

0800a2b4 <std>:
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	b510      	push	{r4, lr}
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a2be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2c2:	6083      	str	r3, [r0, #8]
 800a2c4:	8181      	strh	r1, [r0, #12]
 800a2c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2c8:	81c2      	strh	r2, [r0, #14]
 800a2ca:	6183      	str	r3, [r0, #24]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	2208      	movs	r2, #8
 800a2d0:	305c      	adds	r0, #92	@ 0x5c
 800a2d2:	f000 f914 	bl	800a4fe <memset>
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a30c <std+0x58>)
 800a2d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2da:	4b0d      	ldr	r3, [pc, #52]	@ (800a310 <std+0x5c>)
 800a2dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2de:	4b0d      	ldr	r3, [pc, #52]	@ (800a314 <std+0x60>)
 800a2e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a318 <std+0x64>)
 800a2e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a31c <std+0x68>)
 800a2e8:	6224      	str	r4, [r4, #32]
 800a2ea:	429c      	cmp	r4, r3
 800a2ec:	d006      	beq.n	800a2fc <std+0x48>
 800a2ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2f2:	4294      	cmp	r4, r2
 800a2f4:	d002      	beq.n	800a2fc <std+0x48>
 800a2f6:	33d0      	adds	r3, #208	@ 0xd0
 800a2f8:	429c      	cmp	r4, r3
 800a2fa:	d105      	bne.n	800a308 <std+0x54>
 800a2fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a304:	f000 b978 	b.w	800a5f8 <__retarget_lock_init_recursive>
 800a308:	bd10      	pop	{r4, pc}
 800a30a:	bf00      	nop
 800a30c:	0800a479 	.word	0x0800a479
 800a310:	0800a49b 	.word	0x0800a49b
 800a314:	0800a4d3 	.word	0x0800a4d3
 800a318:	0800a4f7 	.word	0x0800a4f7
 800a31c:	200020b4 	.word	0x200020b4

0800a320 <stdio_exit_handler>:
 800a320:	4a02      	ldr	r2, [pc, #8]	@ (800a32c <stdio_exit_handler+0xc>)
 800a322:	4903      	ldr	r1, [pc, #12]	@ (800a330 <stdio_exit_handler+0x10>)
 800a324:	4803      	ldr	r0, [pc, #12]	@ (800a334 <stdio_exit_handler+0x14>)
 800a326:	f000 b869 	b.w	800a3fc <_fwalk_sglue>
 800a32a:	bf00      	nop
 800a32c:	200000fc 	.word	0x200000fc
 800a330:	0800bf55 	.word	0x0800bf55
 800a334:	2000010c 	.word	0x2000010c

0800a338 <cleanup_stdio>:
 800a338:	6841      	ldr	r1, [r0, #4]
 800a33a:	4b0c      	ldr	r3, [pc, #48]	@ (800a36c <cleanup_stdio+0x34>)
 800a33c:	4299      	cmp	r1, r3
 800a33e:	b510      	push	{r4, lr}
 800a340:	4604      	mov	r4, r0
 800a342:	d001      	beq.n	800a348 <cleanup_stdio+0x10>
 800a344:	f001 fe06 	bl	800bf54 <_fflush_r>
 800a348:	68a1      	ldr	r1, [r4, #8]
 800a34a:	4b09      	ldr	r3, [pc, #36]	@ (800a370 <cleanup_stdio+0x38>)
 800a34c:	4299      	cmp	r1, r3
 800a34e:	d002      	beq.n	800a356 <cleanup_stdio+0x1e>
 800a350:	4620      	mov	r0, r4
 800a352:	f001 fdff 	bl	800bf54 <_fflush_r>
 800a356:	68e1      	ldr	r1, [r4, #12]
 800a358:	4b06      	ldr	r3, [pc, #24]	@ (800a374 <cleanup_stdio+0x3c>)
 800a35a:	4299      	cmp	r1, r3
 800a35c:	d004      	beq.n	800a368 <cleanup_stdio+0x30>
 800a35e:	4620      	mov	r0, r4
 800a360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a364:	f001 bdf6 	b.w	800bf54 <_fflush_r>
 800a368:	bd10      	pop	{r4, pc}
 800a36a:	bf00      	nop
 800a36c:	200020b4 	.word	0x200020b4
 800a370:	2000211c 	.word	0x2000211c
 800a374:	20002184 	.word	0x20002184

0800a378 <global_stdio_init.part.0>:
 800a378:	b510      	push	{r4, lr}
 800a37a:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a8 <global_stdio_init.part.0+0x30>)
 800a37c:	4c0b      	ldr	r4, [pc, #44]	@ (800a3ac <global_stdio_init.part.0+0x34>)
 800a37e:	4a0c      	ldr	r2, [pc, #48]	@ (800a3b0 <global_stdio_init.part.0+0x38>)
 800a380:	601a      	str	r2, [r3, #0]
 800a382:	4620      	mov	r0, r4
 800a384:	2200      	movs	r2, #0
 800a386:	2104      	movs	r1, #4
 800a388:	f7ff ff94 	bl	800a2b4 <std>
 800a38c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a390:	2201      	movs	r2, #1
 800a392:	2109      	movs	r1, #9
 800a394:	f7ff ff8e 	bl	800a2b4 <std>
 800a398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a39c:	2202      	movs	r2, #2
 800a39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a2:	2112      	movs	r1, #18
 800a3a4:	f7ff bf86 	b.w	800a2b4 <std>
 800a3a8:	200021ec 	.word	0x200021ec
 800a3ac:	200020b4 	.word	0x200020b4
 800a3b0:	0800a321 	.word	0x0800a321

0800a3b4 <__sfp_lock_acquire>:
 800a3b4:	4801      	ldr	r0, [pc, #4]	@ (800a3bc <__sfp_lock_acquire+0x8>)
 800a3b6:	f000 b920 	b.w	800a5fa <__retarget_lock_acquire_recursive>
 800a3ba:	bf00      	nop
 800a3bc:	200021f5 	.word	0x200021f5

0800a3c0 <__sfp_lock_release>:
 800a3c0:	4801      	ldr	r0, [pc, #4]	@ (800a3c8 <__sfp_lock_release+0x8>)
 800a3c2:	f000 b91b 	b.w	800a5fc <__retarget_lock_release_recursive>
 800a3c6:	bf00      	nop
 800a3c8:	200021f5 	.word	0x200021f5

0800a3cc <__sinit>:
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	f7ff fff0 	bl	800a3b4 <__sfp_lock_acquire>
 800a3d4:	6a23      	ldr	r3, [r4, #32]
 800a3d6:	b11b      	cbz	r3, 800a3e0 <__sinit+0x14>
 800a3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3dc:	f7ff bff0 	b.w	800a3c0 <__sfp_lock_release>
 800a3e0:	4b04      	ldr	r3, [pc, #16]	@ (800a3f4 <__sinit+0x28>)
 800a3e2:	6223      	str	r3, [r4, #32]
 800a3e4:	4b04      	ldr	r3, [pc, #16]	@ (800a3f8 <__sinit+0x2c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1f5      	bne.n	800a3d8 <__sinit+0xc>
 800a3ec:	f7ff ffc4 	bl	800a378 <global_stdio_init.part.0>
 800a3f0:	e7f2      	b.n	800a3d8 <__sinit+0xc>
 800a3f2:	bf00      	nop
 800a3f4:	0800a339 	.word	0x0800a339
 800a3f8:	200021ec 	.word	0x200021ec

0800a3fc <_fwalk_sglue>:
 800a3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a400:	4607      	mov	r7, r0
 800a402:	4688      	mov	r8, r1
 800a404:	4614      	mov	r4, r2
 800a406:	2600      	movs	r6, #0
 800a408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a40c:	f1b9 0901 	subs.w	r9, r9, #1
 800a410:	d505      	bpl.n	800a41e <_fwalk_sglue+0x22>
 800a412:	6824      	ldr	r4, [r4, #0]
 800a414:	2c00      	cmp	r4, #0
 800a416:	d1f7      	bne.n	800a408 <_fwalk_sglue+0xc>
 800a418:	4630      	mov	r0, r6
 800a41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d907      	bls.n	800a434 <_fwalk_sglue+0x38>
 800a424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a428:	3301      	adds	r3, #1
 800a42a:	d003      	beq.n	800a434 <_fwalk_sglue+0x38>
 800a42c:	4629      	mov	r1, r5
 800a42e:	4638      	mov	r0, r7
 800a430:	47c0      	blx	r8
 800a432:	4306      	orrs	r6, r0
 800a434:	3568      	adds	r5, #104	@ 0x68
 800a436:	e7e9      	b.n	800a40c <_fwalk_sglue+0x10>

0800a438 <siprintf>:
 800a438:	b40e      	push	{r1, r2, r3}
 800a43a:	b500      	push	{lr}
 800a43c:	b09c      	sub	sp, #112	@ 0x70
 800a43e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a440:	9002      	str	r0, [sp, #8]
 800a442:	9006      	str	r0, [sp, #24]
 800a444:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a448:	4809      	ldr	r0, [pc, #36]	@ (800a470 <siprintf+0x38>)
 800a44a:	9107      	str	r1, [sp, #28]
 800a44c:	9104      	str	r1, [sp, #16]
 800a44e:	4909      	ldr	r1, [pc, #36]	@ (800a474 <siprintf+0x3c>)
 800a450:	f853 2b04 	ldr.w	r2, [r3], #4
 800a454:	9105      	str	r1, [sp, #20]
 800a456:	6800      	ldr	r0, [r0, #0]
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	a902      	add	r1, sp, #8
 800a45c:	f001 fbfa 	bl	800bc54 <_svfiprintf_r>
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	2200      	movs	r2, #0
 800a464:	701a      	strb	r2, [r3, #0]
 800a466:	b01c      	add	sp, #112	@ 0x70
 800a468:	f85d eb04 	ldr.w	lr, [sp], #4
 800a46c:	b003      	add	sp, #12
 800a46e:	4770      	bx	lr
 800a470:	20000108 	.word	0x20000108
 800a474:	ffff0208 	.word	0xffff0208

0800a478 <__sread>:
 800a478:	b510      	push	{r4, lr}
 800a47a:	460c      	mov	r4, r1
 800a47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a480:	f000 f86c 	bl	800a55c <_read_r>
 800a484:	2800      	cmp	r0, #0
 800a486:	bfab      	itete	ge
 800a488:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a48a:	89a3      	ldrhlt	r3, [r4, #12]
 800a48c:	181b      	addge	r3, r3, r0
 800a48e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a492:	bfac      	ite	ge
 800a494:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a496:	81a3      	strhlt	r3, [r4, #12]
 800a498:	bd10      	pop	{r4, pc}

0800a49a <__swrite>:
 800a49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a49e:	461f      	mov	r7, r3
 800a4a0:	898b      	ldrh	r3, [r1, #12]
 800a4a2:	05db      	lsls	r3, r3, #23
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	4616      	mov	r6, r2
 800a4aa:	d505      	bpl.n	800a4b8 <__swrite+0x1e>
 800a4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f000 f840 	bl	800a538 <_lseek_r>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4c2:	81a3      	strh	r3, [r4, #12]
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	463b      	mov	r3, r7
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ce:	f000 b857 	b.w	800a580 <_write_r>

0800a4d2 <__sseek>:
 800a4d2:	b510      	push	{r4, lr}
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4da:	f000 f82d 	bl	800a538 <_lseek_r>
 800a4de:	1c43      	adds	r3, r0, #1
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	bf15      	itete	ne
 800a4e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4ee:	81a3      	strheq	r3, [r4, #12]
 800a4f0:	bf18      	it	ne
 800a4f2:	81a3      	strhne	r3, [r4, #12]
 800a4f4:	bd10      	pop	{r4, pc}

0800a4f6 <__sclose>:
 800a4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fa:	f000 b80d 	b.w	800a518 <_close_r>

0800a4fe <memset>:
 800a4fe:	4402      	add	r2, r0
 800a500:	4603      	mov	r3, r0
 800a502:	4293      	cmp	r3, r2
 800a504:	d100      	bne.n	800a508 <memset+0xa>
 800a506:	4770      	bx	lr
 800a508:	f803 1b01 	strb.w	r1, [r3], #1
 800a50c:	e7f9      	b.n	800a502 <memset+0x4>
	...

0800a510 <_localeconv_r>:
 800a510:	4800      	ldr	r0, [pc, #0]	@ (800a514 <_localeconv_r+0x4>)
 800a512:	4770      	bx	lr
 800a514:	20000248 	.word	0x20000248

0800a518 <_close_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4d06      	ldr	r5, [pc, #24]	@ (800a534 <_close_r+0x1c>)
 800a51c:	2300      	movs	r3, #0
 800a51e:	4604      	mov	r4, r0
 800a520:	4608      	mov	r0, r1
 800a522:	602b      	str	r3, [r5, #0]
 800a524:	f7f7 fc02 	bl	8001d2c <_close>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d102      	bne.n	800a532 <_close_r+0x1a>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	b103      	cbz	r3, 800a532 <_close_r+0x1a>
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	200021f0 	.word	0x200021f0

0800a538 <_lseek_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4d07      	ldr	r5, [pc, #28]	@ (800a558 <_lseek_r+0x20>)
 800a53c:	4604      	mov	r4, r0
 800a53e:	4608      	mov	r0, r1
 800a540:	4611      	mov	r1, r2
 800a542:	2200      	movs	r2, #0
 800a544:	602a      	str	r2, [r5, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	f7f7 fc17 	bl	8001d7a <_lseek>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d102      	bne.n	800a556 <_lseek_r+0x1e>
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	b103      	cbz	r3, 800a556 <_lseek_r+0x1e>
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	200021f0 	.word	0x200021f0

0800a55c <_read_r>:
 800a55c:	b538      	push	{r3, r4, r5, lr}
 800a55e:	4d07      	ldr	r5, [pc, #28]	@ (800a57c <_read_r+0x20>)
 800a560:	4604      	mov	r4, r0
 800a562:	4608      	mov	r0, r1
 800a564:	4611      	mov	r1, r2
 800a566:	2200      	movs	r2, #0
 800a568:	602a      	str	r2, [r5, #0]
 800a56a:	461a      	mov	r2, r3
 800a56c:	f7f7 fba5 	bl	8001cba <_read>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d102      	bne.n	800a57a <_read_r+0x1e>
 800a574:	682b      	ldr	r3, [r5, #0]
 800a576:	b103      	cbz	r3, 800a57a <_read_r+0x1e>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	200021f0 	.word	0x200021f0

0800a580 <_write_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4d07      	ldr	r5, [pc, #28]	@ (800a5a0 <_write_r+0x20>)
 800a584:	4604      	mov	r4, r0
 800a586:	4608      	mov	r0, r1
 800a588:	4611      	mov	r1, r2
 800a58a:	2200      	movs	r2, #0
 800a58c:	602a      	str	r2, [r5, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	f7f7 fbb0 	bl	8001cf4 <_write>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <_write_r+0x1e>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	b103      	cbz	r3, 800a59e <_write_r+0x1e>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	bd38      	pop	{r3, r4, r5, pc}
 800a5a0:	200021f0 	.word	0x200021f0

0800a5a4 <__errno>:
 800a5a4:	4b01      	ldr	r3, [pc, #4]	@ (800a5ac <__errno+0x8>)
 800a5a6:	6818      	ldr	r0, [r3, #0]
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	20000108 	.word	0x20000108

0800a5b0 <__libc_init_array>:
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	4d0d      	ldr	r5, [pc, #52]	@ (800a5e8 <__libc_init_array+0x38>)
 800a5b4:	4c0d      	ldr	r4, [pc, #52]	@ (800a5ec <__libc_init_array+0x3c>)
 800a5b6:	1b64      	subs	r4, r4, r5
 800a5b8:	10a4      	asrs	r4, r4, #2
 800a5ba:	2600      	movs	r6, #0
 800a5bc:	42a6      	cmp	r6, r4
 800a5be:	d109      	bne.n	800a5d4 <__libc_init_array+0x24>
 800a5c0:	4d0b      	ldr	r5, [pc, #44]	@ (800a5f0 <__libc_init_array+0x40>)
 800a5c2:	4c0c      	ldr	r4, [pc, #48]	@ (800a5f4 <__libc_init_array+0x44>)
 800a5c4:	f002 f864 	bl	800c690 <_init>
 800a5c8:	1b64      	subs	r4, r4, r5
 800a5ca:	10a4      	asrs	r4, r4, #2
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	42a6      	cmp	r6, r4
 800a5d0:	d105      	bne.n	800a5de <__libc_init_array+0x2e>
 800a5d2:	bd70      	pop	{r4, r5, r6, pc}
 800a5d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d8:	4798      	blx	r3
 800a5da:	3601      	adds	r6, #1
 800a5dc:	e7ee      	b.n	800a5bc <__libc_init_array+0xc>
 800a5de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e2:	4798      	blx	r3
 800a5e4:	3601      	adds	r6, #1
 800a5e6:	e7f2      	b.n	800a5ce <__libc_init_array+0x1e>
 800a5e8:	0800caf0 	.word	0x0800caf0
 800a5ec:	0800caf0 	.word	0x0800caf0
 800a5f0:	0800caf0 	.word	0x0800caf0
 800a5f4:	0800caf4 	.word	0x0800caf4

0800a5f8 <__retarget_lock_init_recursive>:
 800a5f8:	4770      	bx	lr

0800a5fa <__retarget_lock_acquire_recursive>:
 800a5fa:	4770      	bx	lr

0800a5fc <__retarget_lock_release_recursive>:
 800a5fc:	4770      	bx	lr

0800a5fe <quorem>:
 800a5fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a602:	6903      	ldr	r3, [r0, #16]
 800a604:	690c      	ldr	r4, [r1, #16]
 800a606:	42a3      	cmp	r3, r4
 800a608:	4607      	mov	r7, r0
 800a60a:	db7e      	blt.n	800a70a <quorem+0x10c>
 800a60c:	3c01      	subs	r4, #1
 800a60e:	f101 0814 	add.w	r8, r1, #20
 800a612:	00a3      	lsls	r3, r4, #2
 800a614:	f100 0514 	add.w	r5, r0, #20
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a628:	3301      	adds	r3, #1
 800a62a:	429a      	cmp	r2, r3
 800a62c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a630:	fbb2 f6f3 	udiv	r6, r2, r3
 800a634:	d32e      	bcc.n	800a694 <quorem+0x96>
 800a636:	f04f 0a00 	mov.w	sl, #0
 800a63a:	46c4      	mov	ip, r8
 800a63c:	46ae      	mov	lr, r5
 800a63e:	46d3      	mov	fp, sl
 800a640:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a644:	b298      	uxth	r0, r3
 800a646:	fb06 a000 	mla	r0, r6, r0, sl
 800a64a:	0c02      	lsrs	r2, r0, #16
 800a64c:	0c1b      	lsrs	r3, r3, #16
 800a64e:	fb06 2303 	mla	r3, r6, r3, r2
 800a652:	f8de 2000 	ldr.w	r2, [lr]
 800a656:	b280      	uxth	r0, r0
 800a658:	b292      	uxth	r2, r2
 800a65a:	1a12      	subs	r2, r2, r0
 800a65c:	445a      	add	r2, fp
 800a65e:	f8de 0000 	ldr.w	r0, [lr]
 800a662:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a666:	b29b      	uxth	r3, r3
 800a668:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a66c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a670:	b292      	uxth	r2, r2
 800a672:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a676:	45e1      	cmp	r9, ip
 800a678:	f84e 2b04 	str.w	r2, [lr], #4
 800a67c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a680:	d2de      	bcs.n	800a640 <quorem+0x42>
 800a682:	9b00      	ldr	r3, [sp, #0]
 800a684:	58eb      	ldr	r3, [r5, r3]
 800a686:	b92b      	cbnz	r3, 800a694 <quorem+0x96>
 800a688:	9b01      	ldr	r3, [sp, #4]
 800a68a:	3b04      	subs	r3, #4
 800a68c:	429d      	cmp	r5, r3
 800a68e:	461a      	mov	r2, r3
 800a690:	d32f      	bcc.n	800a6f2 <quorem+0xf4>
 800a692:	613c      	str	r4, [r7, #16]
 800a694:	4638      	mov	r0, r7
 800a696:	f001 f979 	bl	800b98c <__mcmp>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	db25      	blt.n	800a6ea <quorem+0xec>
 800a69e:	4629      	mov	r1, r5
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6a6:	f8d1 c000 	ldr.w	ip, [r1]
 800a6aa:	fa1f fe82 	uxth.w	lr, r2
 800a6ae:	fa1f f38c 	uxth.w	r3, ip
 800a6b2:	eba3 030e 	sub.w	r3, r3, lr
 800a6b6:	4403      	add	r3, r0
 800a6b8:	0c12      	lsrs	r2, r2, #16
 800a6ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a6be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6c8:	45c1      	cmp	r9, r8
 800a6ca:	f841 3b04 	str.w	r3, [r1], #4
 800a6ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6d2:	d2e6      	bcs.n	800a6a2 <quorem+0xa4>
 800a6d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6dc:	b922      	cbnz	r2, 800a6e8 <quorem+0xea>
 800a6de:	3b04      	subs	r3, #4
 800a6e0:	429d      	cmp	r5, r3
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	d30b      	bcc.n	800a6fe <quorem+0x100>
 800a6e6:	613c      	str	r4, [r7, #16]
 800a6e8:	3601      	adds	r6, #1
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	b003      	add	sp, #12
 800a6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f2:	6812      	ldr	r2, [r2, #0]
 800a6f4:	3b04      	subs	r3, #4
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	d1cb      	bne.n	800a692 <quorem+0x94>
 800a6fa:	3c01      	subs	r4, #1
 800a6fc:	e7c6      	b.n	800a68c <quorem+0x8e>
 800a6fe:	6812      	ldr	r2, [r2, #0]
 800a700:	3b04      	subs	r3, #4
 800a702:	2a00      	cmp	r2, #0
 800a704:	d1ef      	bne.n	800a6e6 <quorem+0xe8>
 800a706:	3c01      	subs	r4, #1
 800a708:	e7ea      	b.n	800a6e0 <quorem+0xe2>
 800a70a:	2000      	movs	r0, #0
 800a70c:	e7ee      	b.n	800a6ec <quorem+0xee>
	...

0800a710 <_dtoa_r>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	69c7      	ldr	r7, [r0, #28]
 800a716:	b099      	sub	sp, #100	@ 0x64
 800a718:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a71c:	ec55 4b10 	vmov	r4, r5, d0
 800a720:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a722:	9109      	str	r1, [sp, #36]	@ 0x24
 800a724:	4683      	mov	fp, r0
 800a726:	920e      	str	r2, [sp, #56]	@ 0x38
 800a728:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a72a:	b97f      	cbnz	r7, 800a74c <_dtoa_r+0x3c>
 800a72c:	2010      	movs	r0, #16
 800a72e:	f000 fdfd 	bl	800b32c <malloc>
 800a732:	4602      	mov	r2, r0
 800a734:	f8cb 001c 	str.w	r0, [fp, #28]
 800a738:	b920      	cbnz	r0, 800a744 <_dtoa_r+0x34>
 800a73a:	4ba7      	ldr	r3, [pc, #668]	@ (800a9d8 <_dtoa_r+0x2c8>)
 800a73c:	21ef      	movs	r1, #239	@ 0xef
 800a73e:	48a7      	ldr	r0, [pc, #668]	@ (800a9dc <_dtoa_r+0x2cc>)
 800a740:	f001 fc68 	bl	800c014 <__assert_func>
 800a744:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a748:	6007      	str	r7, [r0, #0]
 800a74a:	60c7      	str	r7, [r0, #12]
 800a74c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a750:	6819      	ldr	r1, [r3, #0]
 800a752:	b159      	cbz	r1, 800a76c <_dtoa_r+0x5c>
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	604a      	str	r2, [r1, #4]
 800a758:	2301      	movs	r3, #1
 800a75a:	4093      	lsls	r3, r2
 800a75c:	608b      	str	r3, [r1, #8]
 800a75e:	4658      	mov	r0, fp
 800a760:	f000 feda 	bl	800b518 <_Bfree>
 800a764:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	1e2b      	subs	r3, r5, #0
 800a76e:	bfb9      	ittee	lt
 800a770:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a774:	9303      	strlt	r3, [sp, #12]
 800a776:	2300      	movge	r3, #0
 800a778:	6033      	strge	r3, [r6, #0]
 800a77a:	9f03      	ldr	r7, [sp, #12]
 800a77c:	4b98      	ldr	r3, [pc, #608]	@ (800a9e0 <_dtoa_r+0x2d0>)
 800a77e:	bfbc      	itt	lt
 800a780:	2201      	movlt	r2, #1
 800a782:	6032      	strlt	r2, [r6, #0]
 800a784:	43bb      	bics	r3, r7
 800a786:	d112      	bne.n	800a7ae <_dtoa_r+0x9e>
 800a788:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a78a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a794:	4323      	orrs	r3, r4
 800a796:	f000 854d 	beq.w	800b234 <_dtoa_r+0xb24>
 800a79a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a79c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a9f4 <_dtoa_r+0x2e4>
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 854f 	beq.w	800b244 <_dtoa_r+0xb34>
 800a7a6:	f10a 0303 	add.w	r3, sl, #3
 800a7aa:	f000 bd49 	b.w	800b240 <_dtoa_r+0xb30>
 800a7ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	ec51 0b17 	vmov	r0, r1, d7
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a7be:	f7f6 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7c2:	4680      	mov	r8, r0
 800a7c4:	b158      	cbz	r0, 800a7de <_dtoa_r+0xce>
 800a7c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7ce:	b113      	cbz	r3, 800a7d6 <_dtoa_r+0xc6>
 800a7d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a7d2:	4b84      	ldr	r3, [pc, #528]	@ (800a9e4 <_dtoa_r+0x2d4>)
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a9f8 <_dtoa_r+0x2e8>
 800a7da:	f000 bd33 	b.w	800b244 <_dtoa_r+0xb34>
 800a7de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a7e2:	aa16      	add	r2, sp, #88	@ 0x58
 800a7e4:	a917      	add	r1, sp, #92	@ 0x5c
 800a7e6:	4658      	mov	r0, fp
 800a7e8:	f001 f980 	bl	800baec <__d2b>
 800a7ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a7f0:	4681      	mov	r9, r0
 800a7f2:	2e00      	cmp	r6, #0
 800a7f4:	d077      	beq.n	800a8e6 <_dtoa_r+0x1d6>
 800a7f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a7fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a804:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a808:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a80c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a810:	4619      	mov	r1, r3
 800a812:	2200      	movs	r2, #0
 800a814:	4b74      	ldr	r3, [pc, #464]	@ (800a9e8 <_dtoa_r+0x2d8>)
 800a816:	f7f5 fd37 	bl	8000288 <__aeabi_dsub>
 800a81a:	a369      	add	r3, pc, #420	@ (adr r3, 800a9c0 <_dtoa_r+0x2b0>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f7f5 feea 	bl	80005f8 <__aeabi_dmul>
 800a824:	a368      	add	r3, pc, #416	@ (adr r3, 800a9c8 <_dtoa_r+0x2b8>)
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f7f5 fd2f 	bl	800028c <__adddf3>
 800a82e:	4604      	mov	r4, r0
 800a830:	4630      	mov	r0, r6
 800a832:	460d      	mov	r5, r1
 800a834:	f7f5 fe76 	bl	8000524 <__aeabi_i2d>
 800a838:	a365      	add	r3, pc, #404	@ (adr r3, 800a9d0 <_dtoa_r+0x2c0>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f7f5 fedb 	bl	80005f8 <__aeabi_dmul>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	4620      	mov	r0, r4
 800a848:	4629      	mov	r1, r5
 800a84a:	f7f5 fd1f 	bl	800028c <__adddf3>
 800a84e:	4604      	mov	r4, r0
 800a850:	460d      	mov	r5, r1
 800a852:	f7f6 f981 	bl	8000b58 <__aeabi_d2iz>
 800a856:	2200      	movs	r2, #0
 800a858:	4607      	mov	r7, r0
 800a85a:	2300      	movs	r3, #0
 800a85c:	4620      	mov	r0, r4
 800a85e:	4629      	mov	r1, r5
 800a860:	f7f6 f93c 	bl	8000adc <__aeabi_dcmplt>
 800a864:	b140      	cbz	r0, 800a878 <_dtoa_r+0x168>
 800a866:	4638      	mov	r0, r7
 800a868:	f7f5 fe5c 	bl	8000524 <__aeabi_i2d>
 800a86c:	4622      	mov	r2, r4
 800a86e:	462b      	mov	r3, r5
 800a870:	f7f6 f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a874:	b900      	cbnz	r0, 800a878 <_dtoa_r+0x168>
 800a876:	3f01      	subs	r7, #1
 800a878:	2f16      	cmp	r7, #22
 800a87a:	d851      	bhi.n	800a920 <_dtoa_r+0x210>
 800a87c:	4b5b      	ldr	r3, [pc, #364]	@ (800a9ec <_dtoa_r+0x2dc>)
 800a87e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a88a:	f7f6 f927 	bl	8000adc <__aeabi_dcmplt>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d048      	beq.n	800a924 <_dtoa_r+0x214>
 800a892:	3f01      	subs	r7, #1
 800a894:	2300      	movs	r3, #0
 800a896:	9312      	str	r3, [sp, #72]	@ 0x48
 800a898:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a89a:	1b9b      	subs	r3, r3, r6
 800a89c:	1e5a      	subs	r2, r3, #1
 800a89e:	bf44      	itt	mi
 800a8a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a8a4:	2300      	movmi	r3, #0
 800a8a6:	9208      	str	r2, [sp, #32]
 800a8a8:	bf54      	ite	pl
 800a8aa:	f04f 0800 	movpl.w	r8, #0
 800a8ae:	9308      	strmi	r3, [sp, #32]
 800a8b0:	2f00      	cmp	r7, #0
 800a8b2:	db39      	blt.n	800a928 <_dtoa_r+0x218>
 800a8b4:	9b08      	ldr	r3, [sp, #32]
 800a8b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a8b8:	443b      	add	r3, r7
 800a8ba:	9308      	str	r3, [sp, #32]
 800a8bc:	2300      	movs	r3, #0
 800a8be:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c2:	2b09      	cmp	r3, #9
 800a8c4:	d864      	bhi.n	800a990 <_dtoa_r+0x280>
 800a8c6:	2b05      	cmp	r3, #5
 800a8c8:	bfc4      	itt	gt
 800a8ca:	3b04      	subgt	r3, #4
 800a8cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d0:	f1a3 0302 	sub.w	r3, r3, #2
 800a8d4:	bfcc      	ite	gt
 800a8d6:	2400      	movgt	r4, #0
 800a8d8:	2401      	movle	r4, #1
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d863      	bhi.n	800a9a6 <_dtoa_r+0x296>
 800a8de:	e8df f003 	tbb	[pc, r3]
 800a8e2:	372a      	.short	0x372a
 800a8e4:	5535      	.short	0x5535
 800a8e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a8ea:	441e      	add	r6, r3
 800a8ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a8f0:	2b20      	cmp	r3, #32
 800a8f2:	bfc1      	itttt	gt
 800a8f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a8f8:	409f      	lslgt	r7, r3
 800a8fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a8fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a902:	bfd6      	itet	le
 800a904:	f1c3 0320 	rsble	r3, r3, #32
 800a908:	ea47 0003 	orrgt.w	r0, r7, r3
 800a90c:	fa04 f003 	lslle.w	r0, r4, r3
 800a910:	f7f5 fdf8 	bl	8000504 <__aeabi_ui2d>
 800a914:	2201      	movs	r2, #1
 800a916:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a91a:	3e01      	subs	r6, #1
 800a91c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a91e:	e777      	b.n	800a810 <_dtoa_r+0x100>
 800a920:	2301      	movs	r3, #1
 800a922:	e7b8      	b.n	800a896 <_dtoa_r+0x186>
 800a924:	9012      	str	r0, [sp, #72]	@ 0x48
 800a926:	e7b7      	b.n	800a898 <_dtoa_r+0x188>
 800a928:	427b      	negs	r3, r7
 800a92a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a92c:	2300      	movs	r3, #0
 800a92e:	eba8 0807 	sub.w	r8, r8, r7
 800a932:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a934:	e7c4      	b.n	800a8c0 <_dtoa_r+0x1b0>
 800a936:	2300      	movs	r3, #0
 800a938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a93a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	dc35      	bgt.n	800a9ac <_dtoa_r+0x29c>
 800a940:	2301      	movs	r3, #1
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	9307      	str	r3, [sp, #28]
 800a946:	461a      	mov	r2, r3
 800a948:	920e      	str	r2, [sp, #56]	@ 0x38
 800a94a:	e00b      	b.n	800a964 <_dtoa_r+0x254>
 800a94c:	2301      	movs	r3, #1
 800a94e:	e7f3      	b.n	800a938 <_dtoa_r+0x228>
 800a950:	2300      	movs	r3, #0
 800a952:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a956:	18fb      	adds	r3, r7, r3
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	3301      	adds	r3, #1
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	9307      	str	r3, [sp, #28]
 800a960:	bfb8      	it	lt
 800a962:	2301      	movlt	r3, #1
 800a964:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a968:	2100      	movs	r1, #0
 800a96a:	2204      	movs	r2, #4
 800a96c:	f102 0514 	add.w	r5, r2, #20
 800a970:	429d      	cmp	r5, r3
 800a972:	d91f      	bls.n	800a9b4 <_dtoa_r+0x2a4>
 800a974:	6041      	str	r1, [r0, #4]
 800a976:	4658      	mov	r0, fp
 800a978:	f000 fd8e 	bl	800b498 <_Balloc>
 800a97c:	4682      	mov	sl, r0
 800a97e:	2800      	cmp	r0, #0
 800a980:	d13c      	bne.n	800a9fc <_dtoa_r+0x2ec>
 800a982:	4b1b      	ldr	r3, [pc, #108]	@ (800a9f0 <_dtoa_r+0x2e0>)
 800a984:	4602      	mov	r2, r0
 800a986:	f240 11af 	movw	r1, #431	@ 0x1af
 800a98a:	e6d8      	b.n	800a73e <_dtoa_r+0x2e>
 800a98c:	2301      	movs	r3, #1
 800a98e:	e7e0      	b.n	800a952 <_dtoa_r+0x242>
 800a990:	2401      	movs	r4, #1
 800a992:	2300      	movs	r3, #0
 800a994:	9309      	str	r3, [sp, #36]	@ 0x24
 800a996:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a998:	f04f 33ff 	mov.w	r3, #4294967295
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	9307      	str	r3, [sp, #28]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2312      	movs	r3, #18
 800a9a4:	e7d0      	b.n	800a948 <_dtoa_r+0x238>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9aa:	e7f5      	b.n	800a998 <_dtoa_r+0x288>
 800a9ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	9307      	str	r3, [sp, #28]
 800a9b2:	e7d7      	b.n	800a964 <_dtoa_r+0x254>
 800a9b4:	3101      	adds	r1, #1
 800a9b6:	0052      	lsls	r2, r2, #1
 800a9b8:	e7d8      	b.n	800a96c <_dtoa_r+0x25c>
 800a9ba:	bf00      	nop
 800a9bc:	f3af 8000 	nop.w
 800a9c0:	636f4361 	.word	0x636f4361
 800a9c4:	3fd287a7 	.word	0x3fd287a7
 800a9c8:	8b60c8b3 	.word	0x8b60c8b3
 800a9cc:	3fc68a28 	.word	0x3fc68a28
 800a9d0:	509f79fb 	.word	0x509f79fb
 800a9d4:	3fd34413 	.word	0x3fd34413
 800a9d8:	0800c7b9 	.word	0x0800c7b9
 800a9dc:	0800c7d0 	.word	0x0800c7d0
 800a9e0:	7ff00000 	.word	0x7ff00000
 800a9e4:	0800c789 	.word	0x0800c789
 800a9e8:	3ff80000 	.word	0x3ff80000
 800a9ec:	0800c8c8 	.word	0x0800c8c8
 800a9f0:	0800c828 	.word	0x0800c828
 800a9f4:	0800c7b5 	.word	0x0800c7b5
 800a9f8:	0800c788 	.word	0x0800c788
 800a9fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa00:	6018      	str	r0, [r3, #0]
 800aa02:	9b07      	ldr	r3, [sp, #28]
 800aa04:	2b0e      	cmp	r3, #14
 800aa06:	f200 80a4 	bhi.w	800ab52 <_dtoa_r+0x442>
 800aa0a:	2c00      	cmp	r4, #0
 800aa0c:	f000 80a1 	beq.w	800ab52 <_dtoa_r+0x442>
 800aa10:	2f00      	cmp	r7, #0
 800aa12:	dd33      	ble.n	800aa7c <_dtoa_r+0x36c>
 800aa14:	4bad      	ldr	r3, [pc, #692]	@ (800accc <_dtoa_r+0x5bc>)
 800aa16:	f007 020f 	and.w	r2, r7, #15
 800aa1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa1e:	ed93 7b00 	vldr	d7, [r3]
 800aa22:	05f8      	lsls	r0, r7, #23
 800aa24:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aa28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aa2c:	d516      	bpl.n	800aa5c <_dtoa_r+0x34c>
 800aa2e:	4ba8      	ldr	r3, [pc, #672]	@ (800acd0 <_dtoa_r+0x5c0>)
 800aa30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa38:	f7f5 ff08 	bl	800084c <__aeabi_ddiv>
 800aa3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa40:	f004 040f 	and.w	r4, r4, #15
 800aa44:	2603      	movs	r6, #3
 800aa46:	4da2      	ldr	r5, [pc, #648]	@ (800acd0 <_dtoa_r+0x5c0>)
 800aa48:	b954      	cbnz	r4, 800aa60 <_dtoa_r+0x350>
 800aa4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa52:	f7f5 fefb 	bl	800084c <__aeabi_ddiv>
 800aa56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa5a:	e028      	b.n	800aaae <_dtoa_r+0x39e>
 800aa5c:	2602      	movs	r6, #2
 800aa5e:	e7f2      	b.n	800aa46 <_dtoa_r+0x336>
 800aa60:	07e1      	lsls	r1, r4, #31
 800aa62:	d508      	bpl.n	800aa76 <_dtoa_r+0x366>
 800aa64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa6c:	f7f5 fdc4 	bl	80005f8 <__aeabi_dmul>
 800aa70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa74:	3601      	adds	r6, #1
 800aa76:	1064      	asrs	r4, r4, #1
 800aa78:	3508      	adds	r5, #8
 800aa7a:	e7e5      	b.n	800aa48 <_dtoa_r+0x338>
 800aa7c:	f000 80d2 	beq.w	800ac24 <_dtoa_r+0x514>
 800aa80:	427c      	negs	r4, r7
 800aa82:	4b92      	ldr	r3, [pc, #584]	@ (800accc <_dtoa_r+0x5bc>)
 800aa84:	4d92      	ldr	r5, [pc, #584]	@ (800acd0 <_dtoa_r+0x5c0>)
 800aa86:	f004 020f 	and.w	r2, r4, #15
 800aa8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa96:	f7f5 fdaf 	bl	80005f8 <__aeabi_dmul>
 800aa9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa9e:	1124      	asrs	r4, r4, #4
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	2602      	movs	r6, #2
 800aaa4:	2c00      	cmp	r4, #0
 800aaa6:	f040 80b2 	bne.w	800ac0e <_dtoa_r+0x4fe>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1d3      	bne.n	800aa56 <_dtoa_r+0x346>
 800aaae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aab0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 80b7 	beq.w	800ac28 <_dtoa_r+0x518>
 800aaba:	4b86      	ldr	r3, [pc, #536]	@ (800acd4 <_dtoa_r+0x5c4>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	4620      	mov	r0, r4
 800aac0:	4629      	mov	r1, r5
 800aac2:	f7f6 f80b 	bl	8000adc <__aeabi_dcmplt>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f000 80ae 	beq.w	800ac28 <_dtoa_r+0x518>
 800aacc:	9b07      	ldr	r3, [sp, #28]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f000 80aa 	beq.w	800ac28 <_dtoa_r+0x518>
 800aad4:	9b00      	ldr	r3, [sp, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	dd37      	ble.n	800ab4a <_dtoa_r+0x43a>
 800aada:	1e7b      	subs	r3, r7, #1
 800aadc:	9304      	str	r3, [sp, #16]
 800aade:	4620      	mov	r0, r4
 800aae0:	4b7d      	ldr	r3, [pc, #500]	@ (800acd8 <_dtoa_r+0x5c8>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	4629      	mov	r1, r5
 800aae6:	f7f5 fd87 	bl	80005f8 <__aeabi_dmul>
 800aaea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaee:	9c00      	ldr	r4, [sp, #0]
 800aaf0:	3601      	adds	r6, #1
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f7f5 fd16 	bl	8000524 <__aeabi_i2d>
 800aaf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aafc:	f7f5 fd7c 	bl	80005f8 <__aeabi_dmul>
 800ab00:	4b76      	ldr	r3, [pc, #472]	@ (800acdc <_dtoa_r+0x5cc>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	f7f5 fbc2 	bl	800028c <__adddf3>
 800ab08:	4605      	mov	r5, r0
 800ab0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab0e:	2c00      	cmp	r4, #0
 800ab10:	f040 808d 	bne.w	800ac2e <_dtoa_r+0x51e>
 800ab14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab18:	4b71      	ldr	r3, [pc, #452]	@ (800ace0 <_dtoa_r+0x5d0>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f7f5 fbb4 	bl	8000288 <__aeabi_dsub>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab28:	462a      	mov	r2, r5
 800ab2a:	4633      	mov	r3, r6
 800ab2c:	f7f5 fff4 	bl	8000b18 <__aeabi_dcmpgt>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	f040 828b 	bne.w	800b04c <_dtoa_r+0x93c>
 800ab36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab3a:	462a      	mov	r2, r5
 800ab3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab40:	f7f5 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	f040 8128 	bne.w	800ad9a <_dtoa_r+0x68a>
 800ab4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ab4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ab52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f2c0 815a 	blt.w	800ae0e <_dtoa_r+0x6fe>
 800ab5a:	2f0e      	cmp	r7, #14
 800ab5c:	f300 8157 	bgt.w	800ae0e <_dtoa_r+0x6fe>
 800ab60:	4b5a      	ldr	r3, [pc, #360]	@ (800accc <_dtoa_r+0x5bc>)
 800ab62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab66:	ed93 7b00 	vldr	d7, [r3]
 800ab6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	ed8d 7b00 	vstr	d7, [sp]
 800ab72:	da03      	bge.n	800ab7c <_dtoa_r+0x46c>
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f340 8101 	ble.w	800ad7e <_dtoa_r+0x66e>
 800ab7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab80:	4656      	mov	r6, sl
 800ab82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab86:	4620      	mov	r0, r4
 800ab88:	4629      	mov	r1, r5
 800ab8a:	f7f5 fe5f 	bl	800084c <__aeabi_ddiv>
 800ab8e:	f7f5 ffe3 	bl	8000b58 <__aeabi_d2iz>
 800ab92:	4680      	mov	r8, r0
 800ab94:	f7f5 fcc6 	bl	8000524 <__aeabi_i2d>
 800ab98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab9c:	f7f5 fd2c 	bl	80005f8 <__aeabi_dmul>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4620      	mov	r0, r4
 800aba6:	4629      	mov	r1, r5
 800aba8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800abac:	f7f5 fb6c 	bl	8000288 <__aeabi_dsub>
 800abb0:	f806 4b01 	strb.w	r4, [r6], #1
 800abb4:	9d07      	ldr	r5, [sp, #28]
 800abb6:	eba6 040a 	sub.w	r4, r6, sl
 800abba:	42a5      	cmp	r5, r4
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	f040 8117 	bne.w	800adf2 <_dtoa_r+0x6e2>
 800abc4:	f7f5 fb62 	bl	800028c <__adddf3>
 800abc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abcc:	4604      	mov	r4, r0
 800abce:	460d      	mov	r5, r1
 800abd0:	f7f5 ffa2 	bl	8000b18 <__aeabi_dcmpgt>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	f040 80f9 	bne.w	800adcc <_dtoa_r+0x6bc>
 800abda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abde:	4620      	mov	r0, r4
 800abe0:	4629      	mov	r1, r5
 800abe2:	f7f5 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 800abe6:	b118      	cbz	r0, 800abf0 <_dtoa_r+0x4e0>
 800abe8:	f018 0f01 	tst.w	r8, #1
 800abec:	f040 80ee 	bne.w	800adcc <_dtoa_r+0x6bc>
 800abf0:	4649      	mov	r1, r9
 800abf2:	4658      	mov	r0, fp
 800abf4:	f000 fc90 	bl	800b518 <_Bfree>
 800abf8:	2300      	movs	r3, #0
 800abfa:	7033      	strb	r3, [r6, #0]
 800abfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abfe:	3701      	adds	r7, #1
 800ac00:	601f      	str	r7, [r3, #0]
 800ac02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 831d 	beq.w	800b244 <_dtoa_r+0xb34>
 800ac0a:	601e      	str	r6, [r3, #0]
 800ac0c:	e31a      	b.n	800b244 <_dtoa_r+0xb34>
 800ac0e:	07e2      	lsls	r2, r4, #31
 800ac10:	d505      	bpl.n	800ac1e <_dtoa_r+0x50e>
 800ac12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac16:	f7f5 fcef 	bl	80005f8 <__aeabi_dmul>
 800ac1a:	3601      	adds	r6, #1
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	1064      	asrs	r4, r4, #1
 800ac20:	3508      	adds	r5, #8
 800ac22:	e73f      	b.n	800aaa4 <_dtoa_r+0x394>
 800ac24:	2602      	movs	r6, #2
 800ac26:	e742      	b.n	800aaae <_dtoa_r+0x39e>
 800ac28:	9c07      	ldr	r4, [sp, #28]
 800ac2a:	9704      	str	r7, [sp, #16]
 800ac2c:	e761      	b.n	800aaf2 <_dtoa_r+0x3e2>
 800ac2e:	4b27      	ldr	r3, [pc, #156]	@ (800accc <_dtoa_r+0x5bc>)
 800ac30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac3a:	4454      	add	r4, sl
 800ac3c:	2900      	cmp	r1, #0
 800ac3e:	d053      	beq.n	800ace8 <_dtoa_r+0x5d8>
 800ac40:	4928      	ldr	r1, [pc, #160]	@ (800ace4 <_dtoa_r+0x5d4>)
 800ac42:	2000      	movs	r0, #0
 800ac44:	f7f5 fe02 	bl	800084c <__aeabi_ddiv>
 800ac48:	4633      	mov	r3, r6
 800ac4a:	462a      	mov	r2, r5
 800ac4c:	f7f5 fb1c 	bl	8000288 <__aeabi_dsub>
 800ac50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac54:	4656      	mov	r6, sl
 800ac56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac5a:	f7f5 ff7d 	bl	8000b58 <__aeabi_d2iz>
 800ac5e:	4605      	mov	r5, r0
 800ac60:	f7f5 fc60 	bl	8000524 <__aeabi_i2d>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac6c:	f7f5 fb0c 	bl	8000288 <__aeabi_dsub>
 800ac70:	3530      	adds	r5, #48	@ 0x30
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac7a:	f806 5b01 	strb.w	r5, [r6], #1
 800ac7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac82:	f7f5 ff2b 	bl	8000adc <__aeabi_dcmplt>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d171      	bne.n	800ad6e <_dtoa_r+0x65e>
 800ac8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac8e:	4911      	ldr	r1, [pc, #68]	@ (800acd4 <_dtoa_r+0x5c4>)
 800ac90:	2000      	movs	r0, #0
 800ac92:	f7f5 faf9 	bl	8000288 <__aeabi_dsub>
 800ac96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac9a:	f7f5 ff1f 	bl	8000adc <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f040 8095 	bne.w	800adce <_dtoa_r+0x6be>
 800aca4:	42a6      	cmp	r6, r4
 800aca6:	f43f af50 	beq.w	800ab4a <_dtoa_r+0x43a>
 800acaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800acae:	4b0a      	ldr	r3, [pc, #40]	@ (800acd8 <_dtoa_r+0x5c8>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	f7f5 fca1 	bl	80005f8 <__aeabi_dmul>
 800acb6:	4b08      	ldr	r3, [pc, #32]	@ (800acd8 <_dtoa_r+0x5c8>)
 800acb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800acbc:	2200      	movs	r2, #0
 800acbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acc2:	f7f5 fc99 	bl	80005f8 <__aeabi_dmul>
 800acc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acca:	e7c4      	b.n	800ac56 <_dtoa_r+0x546>
 800accc:	0800c8c8 	.word	0x0800c8c8
 800acd0:	0800c8a0 	.word	0x0800c8a0
 800acd4:	3ff00000 	.word	0x3ff00000
 800acd8:	40240000 	.word	0x40240000
 800acdc:	401c0000 	.word	0x401c0000
 800ace0:	40140000 	.word	0x40140000
 800ace4:	3fe00000 	.word	0x3fe00000
 800ace8:	4631      	mov	r1, r6
 800acea:	4628      	mov	r0, r5
 800acec:	f7f5 fc84 	bl	80005f8 <__aeabi_dmul>
 800acf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800acf4:	9415      	str	r4, [sp, #84]	@ 0x54
 800acf6:	4656      	mov	r6, sl
 800acf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acfc:	f7f5 ff2c 	bl	8000b58 <__aeabi_d2iz>
 800ad00:	4605      	mov	r5, r0
 800ad02:	f7f5 fc0f 	bl	8000524 <__aeabi_i2d>
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad0e:	f7f5 fabb 	bl	8000288 <__aeabi_dsub>
 800ad12:	3530      	adds	r5, #48	@ 0x30
 800ad14:	f806 5b01 	strb.w	r5, [r6], #1
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	42a6      	cmp	r6, r4
 800ad1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad22:	f04f 0200 	mov.w	r2, #0
 800ad26:	d124      	bne.n	800ad72 <_dtoa_r+0x662>
 800ad28:	4bac      	ldr	r3, [pc, #688]	@ (800afdc <_dtoa_r+0x8cc>)
 800ad2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad2e:	f7f5 faad 	bl	800028c <__adddf3>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad3a:	f7f5 feed 	bl	8000b18 <__aeabi_dcmpgt>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d145      	bne.n	800adce <_dtoa_r+0x6be>
 800ad42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad46:	49a5      	ldr	r1, [pc, #660]	@ (800afdc <_dtoa_r+0x8cc>)
 800ad48:	2000      	movs	r0, #0
 800ad4a:	f7f5 fa9d 	bl	8000288 <__aeabi_dsub>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	460b      	mov	r3, r1
 800ad52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad56:	f7f5 fec1 	bl	8000adc <__aeabi_dcmplt>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	f43f aef5 	beq.w	800ab4a <_dtoa_r+0x43a>
 800ad60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ad62:	1e73      	subs	r3, r6, #1
 800ad64:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad6a:	2b30      	cmp	r3, #48	@ 0x30
 800ad6c:	d0f8      	beq.n	800ad60 <_dtoa_r+0x650>
 800ad6e:	9f04      	ldr	r7, [sp, #16]
 800ad70:	e73e      	b.n	800abf0 <_dtoa_r+0x4e0>
 800ad72:	4b9b      	ldr	r3, [pc, #620]	@ (800afe0 <_dtoa_r+0x8d0>)
 800ad74:	f7f5 fc40 	bl	80005f8 <__aeabi_dmul>
 800ad78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad7c:	e7bc      	b.n	800acf8 <_dtoa_r+0x5e8>
 800ad7e:	d10c      	bne.n	800ad9a <_dtoa_r+0x68a>
 800ad80:	4b98      	ldr	r3, [pc, #608]	@ (800afe4 <_dtoa_r+0x8d4>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad88:	f7f5 fc36 	bl	80005f8 <__aeabi_dmul>
 800ad8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad90:	f7f5 feb8 	bl	8000b04 <__aeabi_dcmpge>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	f000 8157 	beq.w	800b048 <_dtoa_r+0x938>
 800ad9a:	2400      	movs	r4, #0
 800ad9c:	4625      	mov	r5, r4
 800ad9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ada0:	43db      	mvns	r3, r3
 800ada2:	9304      	str	r3, [sp, #16]
 800ada4:	4656      	mov	r6, sl
 800ada6:	2700      	movs	r7, #0
 800ada8:	4621      	mov	r1, r4
 800adaa:	4658      	mov	r0, fp
 800adac:	f000 fbb4 	bl	800b518 <_Bfree>
 800adb0:	2d00      	cmp	r5, #0
 800adb2:	d0dc      	beq.n	800ad6e <_dtoa_r+0x65e>
 800adb4:	b12f      	cbz	r7, 800adc2 <_dtoa_r+0x6b2>
 800adb6:	42af      	cmp	r7, r5
 800adb8:	d003      	beq.n	800adc2 <_dtoa_r+0x6b2>
 800adba:	4639      	mov	r1, r7
 800adbc:	4658      	mov	r0, fp
 800adbe:	f000 fbab 	bl	800b518 <_Bfree>
 800adc2:	4629      	mov	r1, r5
 800adc4:	4658      	mov	r0, fp
 800adc6:	f000 fba7 	bl	800b518 <_Bfree>
 800adca:	e7d0      	b.n	800ad6e <_dtoa_r+0x65e>
 800adcc:	9704      	str	r7, [sp, #16]
 800adce:	4633      	mov	r3, r6
 800add0:	461e      	mov	r6, r3
 800add2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800add6:	2a39      	cmp	r2, #57	@ 0x39
 800add8:	d107      	bne.n	800adea <_dtoa_r+0x6da>
 800adda:	459a      	cmp	sl, r3
 800addc:	d1f8      	bne.n	800add0 <_dtoa_r+0x6c0>
 800adde:	9a04      	ldr	r2, [sp, #16]
 800ade0:	3201      	adds	r2, #1
 800ade2:	9204      	str	r2, [sp, #16]
 800ade4:	2230      	movs	r2, #48	@ 0x30
 800ade6:	f88a 2000 	strb.w	r2, [sl]
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	3201      	adds	r2, #1
 800adee:	701a      	strb	r2, [r3, #0]
 800adf0:	e7bd      	b.n	800ad6e <_dtoa_r+0x65e>
 800adf2:	4b7b      	ldr	r3, [pc, #492]	@ (800afe0 <_dtoa_r+0x8d0>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	f7f5 fbff 	bl	80005f8 <__aeabi_dmul>
 800adfa:	2200      	movs	r2, #0
 800adfc:	2300      	movs	r3, #0
 800adfe:	4604      	mov	r4, r0
 800ae00:	460d      	mov	r5, r1
 800ae02:	f7f5 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	f43f aebb 	beq.w	800ab82 <_dtoa_r+0x472>
 800ae0c:	e6f0      	b.n	800abf0 <_dtoa_r+0x4e0>
 800ae0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae10:	2a00      	cmp	r2, #0
 800ae12:	f000 80db 	beq.w	800afcc <_dtoa_r+0x8bc>
 800ae16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae18:	2a01      	cmp	r2, #1
 800ae1a:	f300 80bf 	bgt.w	800af9c <_dtoa_r+0x88c>
 800ae1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ae20:	2a00      	cmp	r2, #0
 800ae22:	f000 80b7 	beq.w	800af94 <_dtoa_r+0x884>
 800ae26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ae2c:	4646      	mov	r6, r8
 800ae2e:	9a08      	ldr	r2, [sp, #32]
 800ae30:	2101      	movs	r1, #1
 800ae32:	441a      	add	r2, r3
 800ae34:	4658      	mov	r0, fp
 800ae36:	4498      	add	r8, r3
 800ae38:	9208      	str	r2, [sp, #32]
 800ae3a:	f000 fc21 	bl	800b680 <__i2b>
 800ae3e:	4605      	mov	r5, r0
 800ae40:	b15e      	cbz	r6, 800ae5a <_dtoa_r+0x74a>
 800ae42:	9b08      	ldr	r3, [sp, #32]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	dd08      	ble.n	800ae5a <_dtoa_r+0x74a>
 800ae48:	42b3      	cmp	r3, r6
 800ae4a:	9a08      	ldr	r2, [sp, #32]
 800ae4c:	bfa8      	it	ge
 800ae4e:	4633      	movge	r3, r6
 800ae50:	eba8 0803 	sub.w	r8, r8, r3
 800ae54:	1af6      	subs	r6, r6, r3
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	9308      	str	r3, [sp, #32]
 800ae5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae5c:	b1f3      	cbz	r3, 800ae9c <_dtoa_r+0x78c>
 800ae5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 80b7 	beq.w	800afd4 <_dtoa_r+0x8c4>
 800ae66:	b18c      	cbz	r4, 800ae8c <_dtoa_r+0x77c>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	4658      	mov	r0, fp
 800ae6e:	f000 fcc7 	bl	800b800 <__pow5mult>
 800ae72:	464a      	mov	r2, r9
 800ae74:	4601      	mov	r1, r0
 800ae76:	4605      	mov	r5, r0
 800ae78:	4658      	mov	r0, fp
 800ae7a:	f000 fc17 	bl	800b6ac <__multiply>
 800ae7e:	4649      	mov	r1, r9
 800ae80:	9004      	str	r0, [sp, #16]
 800ae82:	4658      	mov	r0, fp
 800ae84:	f000 fb48 	bl	800b518 <_Bfree>
 800ae88:	9b04      	ldr	r3, [sp, #16]
 800ae8a:	4699      	mov	r9, r3
 800ae8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae8e:	1b1a      	subs	r2, r3, r4
 800ae90:	d004      	beq.n	800ae9c <_dtoa_r+0x78c>
 800ae92:	4649      	mov	r1, r9
 800ae94:	4658      	mov	r0, fp
 800ae96:	f000 fcb3 	bl	800b800 <__pow5mult>
 800ae9a:	4681      	mov	r9, r0
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	4658      	mov	r0, fp
 800aea0:	f000 fbee 	bl	800b680 <__i2b>
 800aea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aea6:	4604      	mov	r4, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 81cf 	beq.w	800b24c <_dtoa_r+0xb3c>
 800aeae:	461a      	mov	r2, r3
 800aeb0:	4601      	mov	r1, r0
 800aeb2:	4658      	mov	r0, fp
 800aeb4:	f000 fca4 	bl	800b800 <__pow5mult>
 800aeb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	4604      	mov	r4, r0
 800aebe:	f300 8095 	bgt.w	800afec <_dtoa_r+0x8dc>
 800aec2:	9b02      	ldr	r3, [sp, #8]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f040 8087 	bne.w	800afd8 <_dtoa_r+0x8c8>
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f040 8089 	bne.w	800afe8 <_dtoa_r+0x8d8>
 800aed6:	9b03      	ldr	r3, [sp, #12]
 800aed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aedc:	0d1b      	lsrs	r3, r3, #20
 800aede:	051b      	lsls	r3, r3, #20
 800aee0:	b12b      	cbz	r3, 800aeee <_dtoa_r+0x7de>
 800aee2:	9b08      	ldr	r3, [sp, #32]
 800aee4:	3301      	adds	r3, #1
 800aee6:	9308      	str	r3, [sp, #32]
 800aee8:	f108 0801 	add.w	r8, r8, #1
 800aeec:	2301      	movs	r3, #1
 800aeee:	930a      	str	r3, [sp, #40]	@ 0x28
 800aef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 81b0 	beq.w	800b258 <_dtoa_r+0xb48>
 800aef8:	6923      	ldr	r3, [r4, #16]
 800aefa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aefe:	6918      	ldr	r0, [r3, #16]
 800af00:	f000 fb72 	bl	800b5e8 <__hi0bits>
 800af04:	f1c0 0020 	rsb	r0, r0, #32
 800af08:	9b08      	ldr	r3, [sp, #32]
 800af0a:	4418      	add	r0, r3
 800af0c:	f010 001f 	ands.w	r0, r0, #31
 800af10:	d077      	beq.n	800b002 <_dtoa_r+0x8f2>
 800af12:	f1c0 0320 	rsb	r3, r0, #32
 800af16:	2b04      	cmp	r3, #4
 800af18:	dd6b      	ble.n	800aff2 <_dtoa_r+0x8e2>
 800af1a:	9b08      	ldr	r3, [sp, #32]
 800af1c:	f1c0 001c 	rsb	r0, r0, #28
 800af20:	4403      	add	r3, r0
 800af22:	4480      	add	r8, r0
 800af24:	4406      	add	r6, r0
 800af26:	9308      	str	r3, [sp, #32]
 800af28:	f1b8 0f00 	cmp.w	r8, #0
 800af2c:	dd05      	ble.n	800af3a <_dtoa_r+0x82a>
 800af2e:	4649      	mov	r1, r9
 800af30:	4642      	mov	r2, r8
 800af32:	4658      	mov	r0, fp
 800af34:	f000 fcbe 	bl	800b8b4 <__lshift>
 800af38:	4681      	mov	r9, r0
 800af3a:	9b08      	ldr	r3, [sp, #32]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	dd05      	ble.n	800af4c <_dtoa_r+0x83c>
 800af40:	4621      	mov	r1, r4
 800af42:	461a      	mov	r2, r3
 800af44:	4658      	mov	r0, fp
 800af46:	f000 fcb5 	bl	800b8b4 <__lshift>
 800af4a:	4604      	mov	r4, r0
 800af4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d059      	beq.n	800b006 <_dtoa_r+0x8f6>
 800af52:	4621      	mov	r1, r4
 800af54:	4648      	mov	r0, r9
 800af56:	f000 fd19 	bl	800b98c <__mcmp>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	da53      	bge.n	800b006 <_dtoa_r+0x8f6>
 800af5e:	1e7b      	subs	r3, r7, #1
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	4649      	mov	r1, r9
 800af64:	2300      	movs	r3, #0
 800af66:	220a      	movs	r2, #10
 800af68:	4658      	mov	r0, fp
 800af6a:	f000 faf7 	bl	800b55c <__multadd>
 800af6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af70:	4681      	mov	r9, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	f000 8172 	beq.w	800b25c <_dtoa_r+0xb4c>
 800af78:	2300      	movs	r3, #0
 800af7a:	4629      	mov	r1, r5
 800af7c:	220a      	movs	r2, #10
 800af7e:	4658      	mov	r0, fp
 800af80:	f000 faec 	bl	800b55c <__multadd>
 800af84:	9b00      	ldr	r3, [sp, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	4605      	mov	r5, r0
 800af8a:	dc67      	bgt.n	800b05c <_dtoa_r+0x94c>
 800af8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af8e:	2b02      	cmp	r3, #2
 800af90:	dc41      	bgt.n	800b016 <_dtoa_r+0x906>
 800af92:	e063      	b.n	800b05c <_dtoa_r+0x94c>
 800af94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af9a:	e746      	b.n	800ae2a <_dtoa_r+0x71a>
 800af9c:	9b07      	ldr	r3, [sp, #28]
 800af9e:	1e5c      	subs	r4, r3, #1
 800afa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afa2:	42a3      	cmp	r3, r4
 800afa4:	bfbf      	itttt	lt
 800afa6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800afa8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800afaa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800afac:	1ae3      	sublt	r3, r4, r3
 800afae:	bfb4      	ite	lt
 800afb0:	18d2      	addlt	r2, r2, r3
 800afb2:	1b1c      	subge	r4, r3, r4
 800afb4:	9b07      	ldr	r3, [sp, #28]
 800afb6:	bfbc      	itt	lt
 800afb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800afba:	2400      	movlt	r4, #0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	bfb5      	itete	lt
 800afc0:	eba8 0603 	sublt.w	r6, r8, r3
 800afc4:	9b07      	ldrge	r3, [sp, #28]
 800afc6:	2300      	movlt	r3, #0
 800afc8:	4646      	movge	r6, r8
 800afca:	e730      	b.n	800ae2e <_dtoa_r+0x71e>
 800afcc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800afce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800afd0:	4646      	mov	r6, r8
 800afd2:	e735      	b.n	800ae40 <_dtoa_r+0x730>
 800afd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afd6:	e75c      	b.n	800ae92 <_dtoa_r+0x782>
 800afd8:	2300      	movs	r3, #0
 800afda:	e788      	b.n	800aeee <_dtoa_r+0x7de>
 800afdc:	3fe00000 	.word	0x3fe00000
 800afe0:	40240000 	.word	0x40240000
 800afe4:	40140000 	.word	0x40140000
 800afe8:	9b02      	ldr	r3, [sp, #8]
 800afea:	e780      	b.n	800aeee <_dtoa_r+0x7de>
 800afec:	2300      	movs	r3, #0
 800afee:	930a      	str	r3, [sp, #40]	@ 0x28
 800aff0:	e782      	b.n	800aef8 <_dtoa_r+0x7e8>
 800aff2:	d099      	beq.n	800af28 <_dtoa_r+0x818>
 800aff4:	9a08      	ldr	r2, [sp, #32]
 800aff6:	331c      	adds	r3, #28
 800aff8:	441a      	add	r2, r3
 800affa:	4498      	add	r8, r3
 800affc:	441e      	add	r6, r3
 800affe:	9208      	str	r2, [sp, #32]
 800b000:	e792      	b.n	800af28 <_dtoa_r+0x818>
 800b002:	4603      	mov	r3, r0
 800b004:	e7f6      	b.n	800aff4 <_dtoa_r+0x8e4>
 800b006:	9b07      	ldr	r3, [sp, #28]
 800b008:	9704      	str	r7, [sp, #16]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	dc20      	bgt.n	800b050 <_dtoa_r+0x940>
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b012:	2b02      	cmp	r3, #2
 800b014:	dd1e      	ble.n	800b054 <_dtoa_r+0x944>
 800b016:	9b00      	ldr	r3, [sp, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f47f aec0 	bne.w	800ad9e <_dtoa_r+0x68e>
 800b01e:	4621      	mov	r1, r4
 800b020:	2205      	movs	r2, #5
 800b022:	4658      	mov	r0, fp
 800b024:	f000 fa9a 	bl	800b55c <__multadd>
 800b028:	4601      	mov	r1, r0
 800b02a:	4604      	mov	r4, r0
 800b02c:	4648      	mov	r0, r9
 800b02e:	f000 fcad 	bl	800b98c <__mcmp>
 800b032:	2800      	cmp	r0, #0
 800b034:	f77f aeb3 	ble.w	800ad9e <_dtoa_r+0x68e>
 800b038:	4656      	mov	r6, sl
 800b03a:	2331      	movs	r3, #49	@ 0x31
 800b03c:	f806 3b01 	strb.w	r3, [r6], #1
 800b040:	9b04      	ldr	r3, [sp, #16]
 800b042:	3301      	adds	r3, #1
 800b044:	9304      	str	r3, [sp, #16]
 800b046:	e6ae      	b.n	800ada6 <_dtoa_r+0x696>
 800b048:	9c07      	ldr	r4, [sp, #28]
 800b04a:	9704      	str	r7, [sp, #16]
 800b04c:	4625      	mov	r5, r4
 800b04e:	e7f3      	b.n	800b038 <_dtoa_r+0x928>
 800b050:	9b07      	ldr	r3, [sp, #28]
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 8104 	beq.w	800b264 <_dtoa_r+0xb54>
 800b05c:	2e00      	cmp	r6, #0
 800b05e:	dd05      	ble.n	800b06c <_dtoa_r+0x95c>
 800b060:	4629      	mov	r1, r5
 800b062:	4632      	mov	r2, r6
 800b064:	4658      	mov	r0, fp
 800b066:	f000 fc25 	bl	800b8b4 <__lshift>
 800b06a:	4605      	mov	r5, r0
 800b06c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d05a      	beq.n	800b128 <_dtoa_r+0xa18>
 800b072:	6869      	ldr	r1, [r5, #4]
 800b074:	4658      	mov	r0, fp
 800b076:	f000 fa0f 	bl	800b498 <_Balloc>
 800b07a:	4606      	mov	r6, r0
 800b07c:	b928      	cbnz	r0, 800b08a <_dtoa_r+0x97a>
 800b07e:	4b84      	ldr	r3, [pc, #528]	@ (800b290 <_dtoa_r+0xb80>)
 800b080:	4602      	mov	r2, r0
 800b082:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b086:	f7ff bb5a 	b.w	800a73e <_dtoa_r+0x2e>
 800b08a:	692a      	ldr	r2, [r5, #16]
 800b08c:	3202      	adds	r2, #2
 800b08e:	0092      	lsls	r2, r2, #2
 800b090:	f105 010c 	add.w	r1, r5, #12
 800b094:	300c      	adds	r0, #12
 800b096:	f000 ffaf 	bl	800bff8 <memcpy>
 800b09a:	2201      	movs	r2, #1
 800b09c:	4631      	mov	r1, r6
 800b09e:	4658      	mov	r0, fp
 800b0a0:	f000 fc08 	bl	800b8b4 <__lshift>
 800b0a4:	f10a 0301 	add.w	r3, sl, #1
 800b0a8:	9307      	str	r3, [sp, #28]
 800b0aa:	9b00      	ldr	r3, [sp, #0]
 800b0ac:	4453      	add	r3, sl
 800b0ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0b0:	9b02      	ldr	r3, [sp, #8]
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	462f      	mov	r7, r5
 800b0b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	9b07      	ldr	r3, [sp, #28]
 800b0be:	4621      	mov	r1, r4
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	4648      	mov	r0, r9
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	f7ff fa9a 	bl	800a5fe <quorem>
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	9002      	str	r0, [sp, #8]
 800b0ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b0d2:	4648      	mov	r0, r9
 800b0d4:	f000 fc5a 	bl	800b98c <__mcmp>
 800b0d8:	462a      	mov	r2, r5
 800b0da:	9008      	str	r0, [sp, #32]
 800b0dc:	4621      	mov	r1, r4
 800b0de:	4658      	mov	r0, fp
 800b0e0:	f000 fc70 	bl	800b9c4 <__mdiff>
 800b0e4:	68c2      	ldr	r2, [r0, #12]
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	bb02      	cbnz	r2, 800b12c <_dtoa_r+0xa1c>
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	4648      	mov	r0, r9
 800b0ee:	f000 fc4d 	bl	800b98c <__mcmp>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4658      	mov	r0, fp
 800b0f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0fa:	f000 fa0d 	bl	800b518 <_Bfree>
 800b0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b102:	9e07      	ldr	r6, [sp, #28]
 800b104:	ea43 0102 	orr.w	r1, r3, r2
 800b108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b10a:	4319      	orrs	r1, r3
 800b10c:	d110      	bne.n	800b130 <_dtoa_r+0xa20>
 800b10e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b112:	d029      	beq.n	800b168 <_dtoa_r+0xa58>
 800b114:	9b08      	ldr	r3, [sp, #32]
 800b116:	2b00      	cmp	r3, #0
 800b118:	dd02      	ble.n	800b120 <_dtoa_r+0xa10>
 800b11a:	9b02      	ldr	r3, [sp, #8]
 800b11c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b120:	9b00      	ldr	r3, [sp, #0]
 800b122:	f883 8000 	strb.w	r8, [r3]
 800b126:	e63f      	b.n	800ada8 <_dtoa_r+0x698>
 800b128:	4628      	mov	r0, r5
 800b12a:	e7bb      	b.n	800b0a4 <_dtoa_r+0x994>
 800b12c:	2201      	movs	r2, #1
 800b12e:	e7e1      	b.n	800b0f4 <_dtoa_r+0x9e4>
 800b130:	9b08      	ldr	r3, [sp, #32]
 800b132:	2b00      	cmp	r3, #0
 800b134:	db04      	blt.n	800b140 <_dtoa_r+0xa30>
 800b136:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b138:	430b      	orrs	r3, r1
 800b13a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b13c:	430b      	orrs	r3, r1
 800b13e:	d120      	bne.n	800b182 <_dtoa_r+0xa72>
 800b140:	2a00      	cmp	r2, #0
 800b142:	dded      	ble.n	800b120 <_dtoa_r+0xa10>
 800b144:	4649      	mov	r1, r9
 800b146:	2201      	movs	r2, #1
 800b148:	4658      	mov	r0, fp
 800b14a:	f000 fbb3 	bl	800b8b4 <__lshift>
 800b14e:	4621      	mov	r1, r4
 800b150:	4681      	mov	r9, r0
 800b152:	f000 fc1b 	bl	800b98c <__mcmp>
 800b156:	2800      	cmp	r0, #0
 800b158:	dc03      	bgt.n	800b162 <_dtoa_r+0xa52>
 800b15a:	d1e1      	bne.n	800b120 <_dtoa_r+0xa10>
 800b15c:	f018 0f01 	tst.w	r8, #1
 800b160:	d0de      	beq.n	800b120 <_dtoa_r+0xa10>
 800b162:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b166:	d1d8      	bne.n	800b11a <_dtoa_r+0xa0a>
 800b168:	9a00      	ldr	r2, [sp, #0]
 800b16a:	2339      	movs	r3, #57	@ 0x39
 800b16c:	7013      	strb	r3, [r2, #0]
 800b16e:	4633      	mov	r3, r6
 800b170:	461e      	mov	r6, r3
 800b172:	3b01      	subs	r3, #1
 800b174:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b178:	2a39      	cmp	r2, #57	@ 0x39
 800b17a:	d052      	beq.n	800b222 <_dtoa_r+0xb12>
 800b17c:	3201      	adds	r2, #1
 800b17e:	701a      	strb	r2, [r3, #0]
 800b180:	e612      	b.n	800ada8 <_dtoa_r+0x698>
 800b182:	2a00      	cmp	r2, #0
 800b184:	dd07      	ble.n	800b196 <_dtoa_r+0xa86>
 800b186:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b18a:	d0ed      	beq.n	800b168 <_dtoa_r+0xa58>
 800b18c:	9a00      	ldr	r2, [sp, #0]
 800b18e:	f108 0301 	add.w	r3, r8, #1
 800b192:	7013      	strb	r3, [r2, #0]
 800b194:	e608      	b.n	800ada8 <_dtoa_r+0x698>
 800b196:	9b07      	ldr	r3, [sp, #28]
 800b198:	9a07      	ldr	r2, [sp, #28]
 800b19a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d028      	beq.n	800b1f6 <_dtoa_r+0xae6>
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	220a      	movs	r2, #10
 800b1aa:	4658      	mov	r0, fp
 800b1ac:	f000 f9d6 	bl	800b55c <__multadd>
 800b1b0:	42af      	cmp	r7, r5
 800b1b2:	4681      	mov	r9, r0
 800b1b4:	f04f 0300 	mov.w	r3, #0
 800b1b8:	f04f 020a 	mov.w	r2, #10
 800b1bc:	4639      	mov	r1, r7
 800b1be:	4658      	mov	r0, fp
 800b1c0:	d107      	bne.n	800b1d2 <_dtoa_r+0xac2>
 800b1c2:	f000 f9cb 	bl	800b55c <__multadd>
 800b1c6:	4607      	mov	r7, r0
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	9b07      	ldr	r3, [sp, #28]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	9307      	str	r3, [sp, #28]
 800b1d0:	e774      	b.n	800b0bc <_dtoa_r+0x9ac>
 800b1d2:	f000 f9c3 	bl	800b55c <__multadd>
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4607      	mov	r7, r0
 800b1da:	2300      	movs	r3, #0
 800b1dc:	220a      	movs	r2, #10
 800b1de:	4658      	mov	r0, fp
 800b1e0:	f000 f9bc 	bl	800b55c <__multadd>
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	e7f0      	b.n	800b1ca <_dtoa_r+0xaba>
 800b1e8:	9b00      	ldr	r3, [sp, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	bfcc      	ite	gt
 800b1ee:	461e      	movgt	r6, r3
 800b1f0:	2601      	movle	r6, #1
 800b1f2:	4456      	add	r6, sl
 800b1f4:	2700      	movs	r7, #0
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	4658      	mov	r0, fp
 800b1fc:	f000 fb5a 	bl	800b8b4 <__lshift>
 800b200:	4621      	mov	r1, r4
 800b202:	4681      	mov	r9, r0
 800b204:	f000 fbc2 	bl	800b98c <__mcmp>
 800b208:	2800      	cmp	r0, #0
 800b20a:	dcb0      	bgt.n	800b16e <_dtoa_r+0xa5e>
 800b20c:	d102      	bne.n	800b214 <_dtoa_r+0xb04>
 800b20e:	f018 0f01 	tst.w	r8, #1
 800b212:	d1ac      	bne.n	800b16e <_dtoa_r+0xa5e>
 800b214:	4633      	mov	r3, r6
 800b216:	461e      	mov	r6, r3
 800b218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b21c:	2a30      	cmp	r2, #48	@ 0x30
 800b21e:	d0fa      	beq.n	800b216 <_dtoa_r+0xb06>
 800b220:	e5c2      	b.n	800ada8 <_dtoa_r+0x698>
 800b222:	459a      	cmp	sl, r3
 800b224:	d1a4      	bne.n	800b170 <_dtoa_r+0xa60>
 800b226:	9b04      	ldr	r3, [sp, #16]
 800b228:	3301      	adds	r3, #1
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	2331      	movs	r3, #49	@ 0x31
 800b22e:	f88a 3000 	strb.w	r3, [sl]
 800b232:	e5b9      	b.n	800ada8 <_dtoa_r+0x698>
 800b234:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b236:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b294 <_dtoa_r+0xb84>
 800b23a:	b11b      	cbz	r3, 800b244 <_dtoa_r+0xb34>
 800b23c:	f10a 0308 	add.w	r3, sl, #8
 800b240:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	4650      	mov	r0, sl
 800b246:	b019      	add	sp, #100	@ 0x64
 800b248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b24e:	2b01      	cmp	r3, #1
 800b250:	f77f ae37 	ble.w	800aec2 <_dtoa_r+0x7b2>
 800b254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b256:	930a      	str	r3, [sp, #40]	@ 0x28
 800b258:	2001      	movs	r0, #1
 800b25a:	e655      	b.n	800af08 <_dtoa_r+0x7f8>
 800b25c:	9b00      	ldr	r3, [sp, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f77f aed6 	ble.w	800b010 <_dtoa_r+0x900>
 800b264:	4656      	mov	r6, sl
 800b266:	4621      	mov	r1, r4
 800b268:	4648      	mov	r0, r9
 800b26a:	f7ff f9c8 	bl	800a5fe <quorem>
 800b26e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b272:	f806 8b01 	strb.w	r8, [r6], #1
 800b276:	9b00      	ldr	r3, [sp, #0]
 800b278:	eba6 020a 	sub.w	r2, r6, sl
 800b27c:	4293      	cmp	r3, r2
 800b27e:	ddb3      	ble.n	800b1e8 <_dtoa_r+0xad8>
 800b280:	4649      	mov	r1, r9
 800b282:	2300      	movs	r3, #0
 800b284:	220a      	movs	r2, #10
 800b286:	4658      	mov	r0, fp
 800b288:	f000 f968 	bl	800b55c <__multadd>
 800b28c:	4681      	mov	r9, r0
 800b28e:	e7ea      	b.n	800b266 <_dtoa_r+0xb56>
 800b290:	0800c828 	.word	0x0800c828
 800b294:	0800c7ac 	.word	0x0800c7ac

0800b298 <_free_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	4605      	mov	r5, r0
 800b29c:	2900      	cmp	r1, #0
 800b29e:	d041      	beq.n	800b324 <_free_r+0x8c>
 800b2a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2a4:	1f0c      	subs	r4, r1, #4
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	bfb8      	it	lt
 800b2aa:	18e4      	addlt	r4, r4, r3
 800b2ac:	f000 f8e8 	bl	800b480 <__malloc_lock>
 800b2b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b328 <_free_r+0x90>)
 800b2b2:	6813      	ldr	r3, [r2, #0]
 800b2b4:	b933      	cbnz	r3, 800b2c4 <_free_r+0x2c>
 800b2b6:	6063      	str	r3, [r4, #4]
 800b2b8:	6014      	str	r4, [r2, #0]
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2c0:	f000 b8e4 	b.w	800b48c <__malloc_unlock>
 800b2c4:	42a3      	cmp	r3, r4
 800b2c6:	d908      	bls.n	800b2da <_free_r+0x42>
 800b2c8:	6820      	ldr	r0, [r4, #0]
 800b2ca:	1821      	adds	r1, r4, r0
 800b2cc:	428b      	cmp	r3, r1
 800b2ce:	bf01      	itttt	eq
 800b2d0:	6819      	ldreq	r1, [r3, #0]
 800b2d2:	685b      	ldreq	r3, [r3, #4]
 800b2d4:	1809      	addeq	r1, r1, r0
 800b2d6:	6021      	streq	r1, [r4, #0]
 800b2d8:	e7ed      	b.n	800b2b6 <_free_r+0x1e>
 800b2da:	461a      	mov	r2, r3
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	b10b      	cbz	r3, 800b2e4 <_free_r+0x4c>
 800b2e0:	42a3      	cmp	r3, r4
 800b2e2:	d9fa      	bls.n	800b2da <_free_r+0x42>
 800b2e4:	6811      	ldr	r1, [r2, #0]
 800b2e6:	1850      	adds	r0, r2, r1
 800b2e8:	42a0      	cmp	r0, r4
 800b2ea:	d10b      	bne.n	800b304 <_free_r+0x6c>
 800b2ec:	6820      	ldr	r0, [r4, #0]
 800b2ee:	4401      	add	r1, r0
 800b2f0:	1850      	adds	r0, r2, r1
 800b2f2:	4283      	cmp	r3, r0
 800b2f4:	6011      	str	r1, [r2, #0]
 800b2f6:	d1e0      	bne.n	800b2ba <_free_r+0x22>
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	6053      	str	r3, [r2, #4]
 800b2fe:	4408      	add	r0, r1
 800b300:	6010      	str	r0, [r2, #0]
 800b302:	e7da      	b.n	800b2ba <_free_r+0x22>
 800b304:	d902      	bls.n	800b30c <_free_r+0x74>
 800b306:	230c      	movs	r3, #12
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	e7d6      	b.n	800b2ba <_free_r+0x22>
 800b30c:	6820      	ldr	r0, [r4, #0]
 800b30e:	1821      	adds	r1, r4, r0
 800b310:	428b      	cmp	r3, r1
 800b312:	bf04      	itt	eq
 800b314:	6819      	ldreq	r1, [r3, #0]
 800b316:	685b      	ldreq	r3, [r3, #4]
 800b318:	6063      	str	r3, [r4, #4]
 800b31a:	bf04      	itt	eq
 800b31c:	1809      	addeq	r1, r1, r0
 800b31e:	6021      	streq	r1, [r4, #0]
 800b320:	6054      	str	r4, [r2, #4]
 800b322:	e7ca      	b.n	800b2ba <_free_r+0x22>
 800b324:	bd38      	pop	{r3, r4, r5, pc}
 800b326:	bf00      	nop
 800b328:	200021fc 	.word	0x200021fc

0800b32c <malloc>:
 800b32c:	4b02      	ldr	r3, [pc, #8]	@ (800b338 <malloc+0xc>)
 800b32e:	4601      	mov	r1, r0
 800b330:	6818      	ldr	r0, [r3, #0]
 800b332:	f000 b825 	b.w	800b380 <_malloc_r>
 800b336:	bf00      	nop
 800b338:	20000108 	.word	0x20000108

0800b33c <sbrk_aligned>:
 800b33c:	b570      	push	{r4, r5, r6, lr}
 800b33e:	4e0f      	ldr	r6, [pc, #60]	@ (800b37c <sbrk_aligned+0x40>)
 800b340:	460c      	mov	r4, r1
 800b342:	6831      	ldr	r1, [r6, #0]
 800b344:	4605      	mov	r5, r0
 800b346:	b911      	cbnz	r1, 800b34e <sbrk_aligned+0x12>
 800b348:	f000 fe46 	bl	800bfd8 <_sbrk_r>
 800b34c:	6030      	str	r0, [r6, #0]
 800b34e:	4621      	mov	r1, r4
 800b350:	4628      	mov	r0, r5
 800b352:	f000 fe41 	bl	800bfd8 <_sbrk_r>
 800b356:	1c43      	adds	r3, r0, #1
 800b358:	d103      	bne.n	800b362 <sbrk_aligned+0x26>
 800b35a:	f04f 34ff 	mov.w	r4, #4294967295
 800b35e:	4620      	mov	r0, r4
 800b360:	bd70      	pop	{r4, r5, r6, pc}
 800b362:	1cc4      	adds	r4, r0, #3
 800b364:	f024 0403 	bic.w	r4, r4, #3
 800b368:	42a0      	cmp	r0, r4
 800b36a:	d0f8      	beq.n	800b35e <sbrk_aligned+0x22>
 800b36c:	1a21      	subs	r1, r4, r0
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 fe32 	bl	800bfd8 <_sbrk_r>
 800b374:	3001      	adds	r0, #1
 800b376:	d1f2      	bne.n	800b35e <sbrk_aligned+0x22>
 800b378:	e7ef      	b.n	800b35a <sbrk_aligned+0x1e>
 800b37a:	bf00      	nop
 800b37c:	200021f8 	.word	0x200021f8

0800b380 <_malloc_r>:
 800b380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b384:	1ccd      	adds	r5, r1, #3
 800b386:	f025 0503 	bic.w	r5, r5, #3
 800b38a:	3508      	adds	r5, #8
 800b38c:	2d0c      	cmp	r5, #12
 800b38e:	bf38      	it	cc
 800b390:	250c      	movcc	r5, #12
 800b392:	2d00      	cmp	r5, #0
 800b394:	4606      	mov	r6, r0
 800b396:	db01      	blt.n	800b39c <_malloc_r+0x1c>
 800b398:	42a9      	cmp	r1, r5
 800b39a:	d904      	bls.n	800b3a6 <_malloc_r+0x26>
 800b39c:	230c      	movs	r3, #12
 800b39e:	6033      	str	r3, [r6, #0]
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b47c <_malloc_r+0xfc>
 800b3aa:	f000 f869 	bl	800b480 <__malloc_lock>
 800b3ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b3b2:	461c      	mov	r4, r3
 800b3b4:	bb44      	cbnz	r4, 800b408 <_malloc_r+0x88>
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff ffbf 	bl	800b33c <sbrk_aligned>
 800b3be:	1c43      	adds	r3, r0, #1
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	d158      	bne.n	800b476 <_malloc_r+0xf6>
 800b3c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b3c8:	4627      	mov	r7, r4
 800b3ca:	2f00      	cmp	r7, #0
 800b3cc:	d143      	bne.n	800b456 <_malloc_r+0xd6>
 800b3ce:	2c00      	cmp	r4, #0
 800b3d0:	d04b      	beq.n	800b46a <_malloc_r+0xea>
 800b3d2:	6823      	ldr	r3, [r4, #0]
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	eb04 0903 	add.w	r9, r4, r3
 800b3dc:	f000 fdfc 	bl	800bfd8 <_sbrk_r>
 800b3e0:	4581      	cmp	r9, r0
 800b3e2:	d142      	bne.n	800b46a <_malloc_r+0xea>
 800b3e4:	6821      	ldr	r1, [r4, #0]
 800b3e6:	1a6d      	subs	r5, r5, r1
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7ff ffa6 	bl	800b33c <sbrk_aligned>
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	d03a      	beq.n	800b46a <_malloc_r+0xea>
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	442b      	add	r3, r5
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	bb62      	cbnz	r2, 800b45c <_malloc_r+0xdc>
 800b402:	f8c8 7000 	str.w	r7, [r8]
 800b406:	e00f      	b.n	800b428 <_malloc_r+0xa8>
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	1b52      	subs	r2, r2, r5
 800b40c:	d420      	bmi.n	800b450 <_malloc_r+0xd0>
 800b40e:	2a0b      	cmp	r2, #11
 800b410:	d917      	bls.n	800b442 <_malloc_r+0xc2>
 800b412:	1961      	adds	r1, r4, r5
 800b414:	42a3      	cmp	r3, r4
 800b416:	6025      	str	r5, [r4, #0]
 800b418:	bf18      	it	ne
 800b41a:	6059      	strne	r1, [r3, #4]
 800b41c:	6863      	ldr	r3, [r4, #4]
 800b41e:	bf08      	it	eq
 800b420:	f8c8 1000 	streq.w	r1, [r8]
 800b424:	5162      	str	r2, [r4, r5]
 800b426:	604b      	str	r3, [r1, #4]
 800b428:	4630      	mov	r0, r6
 800b42a:	f000 f82f 	bl	800b48c <__malloc_unlock>
 800b42e:	f104 000b 	add.w	r0, r4, #11
 800b432:	1d23      	adds	r3, r4, #4
 800b434:	f020 0007 	bic.w	r0, r0, #7
 800b438:	1ac2      	subs	r2, r0, r3
 800b43a:	bf1c      	itt	ne
 800b43c:	1a1b      	subne	r3, r3, r0
 800b43e:	50a3      	strne	r3, [r4, r2]
 800b440:	e7af      	b.n	800b3a2 <_malloc_r+0x22>
 800b442:	6862      	ldr	r2, [r4, #4]
 800b444:	42a3      	cmp	r3, r4
 800b446:	bf0c      	ite	eq
 800b448:	f8c8 2000 	streq.w	r2, [r8]
 800b44c:	605a      	strne	r2, [r3, #4]
 800b44e:	e7eb      	b.n	800b428 <_malloc_r+0xa8>
 800b450:	4623      	mov	r3, r4
 800b452:	6864      	ldr	r4, [r4, #4]
 800b454:	e7ae      	b.n	800b3b4 <_malloc_r+0x34>
 800b456:	463c      	mov	r4, r7
 800b458:	687f      	ldr	r7, [r7, #4]
 800b45a:	e7b6      	b.n	800b3ca <_malloc_r+0x4a>
 800b45c:	461a      	mov	r2, r3
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	42a3      	cmp	r3, r4
 800b462:	d1fb      	bne.n	800b45c <_malloc_r+0xdc>
 800b464:	2300      	movs	r3, #0
 800b466:	6053      	str	r3, [r2, #4]
 800b468:	e7de      	b.n	800b428 <_malloc_r+0xa8>
 800b46a:	230c      	movs	r3, #12
 800b46c:	6033      	str	r3, [r6, #0]
 800b46e:	4630      	mov	r0, r6
 800b470:	f000 f80c 	bl	800b48c <__malloc_unlock>
 800b474:	e794      	b.n	800b3a0 <_malloc_r+0x20>
 800b476:	6005      	str	r5, [r0, #0]
 800b478:	e7d6      	b.n	800b428 <_malloc_r+0xa8>
 800b47a:	bf00      	nop
 800b47c:	200021fc 	.word	0x200021fc

0800b480 <__malloc_lock>:
 800b480:	4801      	ldr	r0, [pc, #4]	@ (800b488 <__malloc_lock+0x8>)
 800b482:	f7ff b8ba 	b.w	800a5fa <__retarget_lock_acquire_recursive>
 800b486:	bf00      	nop
 800b488:	200021f4 	.word	0x200021f4

0800b48c <__malloc_unlock>:
 800b48c:	4801      	ldr	r0, [pc, #4]	@ (800b494 <__malloc_unlock+0x8>)
 800b48e:	f7ff b8b5 	b.w	800a5fc <__retarget_lock_release_recursive>
 800b492:	bf00      	nop
 800b494:	200021f4 	.word	0x200021f4

0800b498 <_Balloc>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	69c6      	ldr	r6, [r0, #28]
 800b49c:	4604      	mov	r4, r0
 800b49e:	460d      	mov	r5, r1
 800b4a0:	b976      	cbnz	r6, 800b4c0 <_Balloc+0x28>
 800b4a2:	2010      	movs	r0, #16
 800b4a4:	f7ff ff42 	bl	800b32c <malloc>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	61e0      	str	r0, [r4, #28]
 800b4ac:	b920      	cbnz	r0, 800b4b8 <_Balloc+0x20>
 800b4ae:	4b18      	ldr	r3, [pc, #96]	@ (800b510 <_Balloc+0x78>)
 800b4b0:	4818      	ldr	r0, [pc, #96]	@ (800b514 <_Balloc+0x7c>)
 800b4b2:	216b      	movs	r1, #107	@ 0x6b
 800b4b4:	f000 fdae 	bl	800c014 <__assert_func>
 800b4b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4bc:	6006      	str	r6, [r0, #0]
 800b4be:	60c6      	str	r6, [r0, #12]
 800b4c0:	69e6      	ldr	r6, [r4, #28]
 800b4c2:	68f3      	ldr	r3, [r6, #12]
 800b4c4:	b183      	cbz	r3, 800b4e8 <_Balloc+0x50>
 800b4c6:	69e3      	ldr	r3, [r4, #28]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4ce:	b9b8      	cbnz	r0, 800b500 <_Balloc+0x68>
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b4d6:	1d72      	adds	r2, r6, #5
 800b4d8:	0092      	lsls	r2, r2, #2
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 fdb8 	bl	800c050 <_calloc_r>
 800b4e0:	b160      	cbz	r0, 800b4fc <_Balloc+0x64>
 800b4e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4e6:	e00e      	b.n	800b506 <_Balloc+0x6e>
 800b4e8:	2221      	movs	r2, #33	@ 0x21
 800b4ea:	2104      	movs	r1, #4
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 fdaf 	bl	800c050 <_calloc_r>
 800b4f2:	69e3      	ldr	r3, [r4, #28]
 800b4f4:	60f0      	str	r0, [r6, #12]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1e4      	bne.n	800b4c6 <_Balloc+0x2e>
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	bd70      	pop	{r4, r5, r6, pc}
 800b500:	6802      	ldr	r2, [r0, #0]
 800b502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b506:	2300      	movs	r3, #0
 800b508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b50c:	e7f7      	b.n	800b4fe <_Balloc+0x66>
 800b50e:	bf00      	nop
 800b510:	0800c7b9 	.word	0x0800c7b9
 800b514:	0800c839 	.word	0x0800c839

0800b518 <_Bfree>:
 800b518:	b570      	push	{r4, r5, r6, lr}
 800b51a:	69c6      	ldr	r6, [r0, #28]
 800b51c:	4605      	mov	r5, r0
 800b51e:	460c      	mov	r4, r1
 800b520:	b976      	cbnz	r6, 800b540 <_Bfree+0x28>
 800b522:	2010      	movs	r0, #16
 800b524:	f7ff ff02 	bl	800b32c <malloc>
 800b528:	4602      	mov	r2, r0
 800b52a:	61e8      	str	r0, [r5, #28]
 800b52c:	b920      	cbnz	r0, 800b538 <_Bfree+0x20>
 800b52e:	4b09      	ldr	r3, [pc, #36]	@ (800b554 <_Bfree+0x3c>)
 800b530:	4809      	ldr	r0, [pc, #36]	@ (800b558 <_Bfree+0x40>)
 800b532:	218f      	movs	r1, #143	@ 0x8f
 800b534:	f000 fd6e 	bl	800c014 <__assert_func>
 800b538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b53c:	6006      	str	r6, [r0, #0]
 800b53e:	60c6      	str	r6, [r0, #12]
 800b540:	b13c      	cbz	r4, 800b552 <_Bfree+0x3a>
 800b542:	69eb      	ldr	r3, [r5, #28]
 800b544:	6862      	ldr	r2, [r4, #4]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b54c:	6021      	str	r1, [r4, #0]
 800b54e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b552:	bd70      	pop	{r4, r5, r6, pc}
 800b554:	0800c7b9 	.word	0x0800c7b9
 800b558:	0800c839 	.word	0x0800c839

0800b55c <__multadd>:
 800b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	690d      	ldr	r5, [r1, #16]
 800b562:	4607      	mov	r7, r0
 800b564:	460c      	mov	r4, r1
 800b566:	461e      	mov	r6, r3
 800b568:	f101 0c14 	add.w	ip, r1, #20
 800b56c:	2000      	movs	r0, #0
 800b56e:	f8dc 3000 	ldr.w	r3, [ip]
 800b572:	b299      	uxth	r1, r3
 800b574:	fb02 6101 	mla	r1, r2, r1, r6
 800b578:	0c1e      	lsrs	r6, r3, #16
 800b57a:	0c0b      	lsrs	r3, r1, #16
 800b57c:	fb02 3306 	mla	r3, r2, r6, r3
 800b580:	b289      	uxth	r1, r1
 800b582:	3001      	adds	r0, #1
 800b584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b588:	4285      	cmp	r5, r0
 800b58a:	f84c 1b04 	str.w	r1, [ip], #4
 800b58e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b592:	dcec      	bgt.n	800b56e <__multadd+0x12>
 800b594:	b30e      	cbz	r6, 800b5da <__multadd+0x7e>
 800b596:	68a3      	ldr	r3, [r4, #8]
 800b598:	42ab      	cmp	r3, r5
 800b59a:	dc19      	bgt.n	800b5d0 <__multadd+0x74>
 800b59c:	6861      	ldr	r1, [r4, #4]
 800b59e:	4638      	mov	r0, r7
 800b5a0:	3101      	adds	r1, #1
 800b5a2:	f7ff ff79 	bl	800b498 <_Balloc>
 800b5a6:	4680      	mov	r8, r0
 800b5a8:	b928      	cbnz	r0, 800b5b6 <__multadd+0x5a>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e0 <__multadd+0x84>)
 800b5ae:	480d      	ldr	r0, [pc, #52]	@ (800b5e4 <__multadd+0x88>)
 800b5b0:	21ba      	movs	r1, #186	@ 0xba
 800b5b2:	f000 fd2f 	bl	800c014 <__assert_func>
 800b5b6:	6922      	ldr	r2, [r4, #16]
 800b5b8:	3202      	adds	r2, #2
 800b5ba:	f104 010c 	add.w	r1, r4, #12
 800b5be:	0092      	lsls	r2, r2, #2
 800b5c0:	300c      	adds	r0, #12
 800b5c2:	f000 fd19 	bl	800bff8 <memcpy>
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	f7ff ffa5 	bl	800b518 <_Bfree>
 800b5ce:	4644      	mov	r4, r8
 800b5d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5d4:	3501      	adds	r5, #1
 800b5d6:	615e      	str	r6, [r3, #20]
 800b5d8:	6125      	str	r5, [r4, #16]
 800b5da:	4620      	mov	r0, r4
 800b5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e0:	0800c828 	.word	0x0800c828
 800b5e4:	0800c839 	.word	0x0800c839

0800b5e8 <__hi0bits>:
 800b5e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	bf36      	itet	cc
 800b5f0:	0403      	lslcc	r3, r0, #16
 800b5f2:	2000      	movcs	r0, #0
 800b5f4:	2010      	movcc	r0, #16
 800b5f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5fa:	bf3c      	itt	cc
 800b5fc:	021b      	lslcc	r3, r3, #8
 800b5fe:	3008      	addcc	r0, #8
 800b600:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b604:	bf3c      	itt	cc
 800b606:	011b      	lslcc	r3, r3, #4
 800b608:	3004      	addcc	r0, #4
 800b60a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b60e:	bf3c      	itt	cc
 800b610:	009b      	lslcc	r3, r3, #2
 800b612:	3002      	addcc	r0, #2
 800b614:	2b00      	cmp	r3, #0
 800b616:	db05      	blt.n	800b624 <__hi0bits+0x3c>
 800b618:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b61c:	f100 0001 	add.w	r0, r0, #1
 800b620:	bf08      	it	eq
 800b622:	2020      	moveq	r0, #32
 800b624:	4770      	bx	lr

0800b626 <__lo0bits>:
 800b626:	6803      	ldr	r3, [r0, #0]
 800b628:	4602      	mov	r2, r0
 800b62a:	f013 0007 	ands.w	r0, r3, #7
 800b62e:	d00b      	beq.n	800b648 <__lo0bits+0x22>
 800b630:	07d9      	lsls	r1, r3, #31
 800b632:	d421      	bmi.n	800b678 <__lo0bits+0x52>
 800b634:	0798      	lsls	r0, r3, #30
 800b636:	bf49      	itett	mi
 800b638:	085b      	lsrmi	r3, r3, #1
 800b63a:	089b      	lsrpl	r3, r3, #2
 800b63c:	2001      	movmi	r0, #1
 800b63e:	6013      	strmi	r3, [r2, #0]
 800b640:	bf5c      	itt	pl
 800b642:	6013      	strpl	r3, [r2, #0]
 800b644:	2002      	movpl	r0, #2
 800b646:	4770      	bx	lr
 800b648:	b299      	uxth	r1, r3
 800b64a:	b909      	cbnz	r1, 800b650 <__lo0bits+0x2a>
 800b64c:	0c1b      	lsrs	r3, r3, #16
 800b64e:	2010      	movs	r0, #16
 800b650:	b2d9      	uxtb	r1, r3
 800b652:	b909      	cbnz	r1, 800b658 <__lo0bits+0x32>
 800b654:	3008      	adds	r0, #8
 800b656:	0a1b      	lsrs	r3, r3, #8
 800b658:	0719      	lsls	r1, r3, #28
 800b65a:	bf04      	itt	eq
 800b65c:	091b      	lsreq	r3, r3, #4
 800b65e:	3004      	addeq	r0, #4
 800b660:	0799      	lsls	r1, r3, #30
 800b662:	bf04      	itt	eq
 800b664:	089b      	lsreq	r3, r3, #2
 800b666:	3002      	addeq	r0, #2
 800b668:	07d9      	lsls	r1, r3, #31
 800b66a:	d403      	bmi.n	800b674 <__lo0bits+0x4e>
 800b66c:	085b      	lsrs	r3, r3, #1
 800b66e:	f100 0001 	add.w	r0, r0, #1
 800b672:	d003      	beq.n	800b67c <__lo0bits+0x56>
 800b674:	6013      	str	r3, [r2, #0]
 800b676:	4770      	bx	lr
 800b678:	2000      	movs	r0, #0
 800b67a:	4770      	bx	lr
 800b67c:	2020      	movs	r0, #32
 800b67e:	4770      	bx	lr

0800b680 <__i2b>:
 800b680:	b510      	push	{r4, lr}
 800b682:	460c      	mov	r4, r1
 800b684:	2101      	movs	r1, #1
 800b686:	f7ff ff07 	bl	800b498 <_Balloc>
 800b68a:	4602      	mov	r2, r0
 800b68c:	b928      	cbnz	r0, 800b69a <__i2b+0x1a>
 800b68e:	4b05      	ldr	r3, [pc, #20]	@ (800b6a4 <__i2b+0x24>)
 800b690:	4805      	ldr	r0, [pc, #20]	@ (800b6a8 <__i2b+0x28>)
 800b692:	f240 1145 	movw	r1, #325	@ 0x145
 800b696:	f000 fcbd 	bl	800c014 <__assert_func>
 800b69a:	2301      	movs	r3, #1
 800b69c:	6144      	str	r4, [r0, #20]
 800b69e:	6103      	str	r3, [r0, #16]
 800b6a0:	bd10      	pop	{r4, pc}
 800b6a2:	bf00      	nop
 800b6a4:	0800c828 	.word	0x0800c828
 800b6a8:	0800c839 	.word	0x0800c839

0800b6ac <__multiply>:
 800b6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b0:	4614      	mov	r4, r2
 800b6b2:	690a      	ldr	r2, [r1, #16]
 800b6b4:	6923      	ldr	r3, [r4, #16]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	bfa8      	it	ge
 800b6ba:	4623      	movge	r3, r4
 800b6bc:	460f      	mov	r7, r1
 800b6be:	bfa4      	itt	ge
 800b6c0:	460c      	movge	r4, r1
 800b6c2:	461f      	movge	r7, r3
 800b6c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b6c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b6cc:	68a3      	ldr	r3, [r4, #8]
 800b6ce:	6861      	ldr	r1, [r4, #4]
 800b6d0:	eb0a 0609 	add.w	r6, sl, r9
 800b6d4:	42b3      	cmp	r3, r6
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	bfb8      	it	lt
 800b6da:	3101      	addlt	r1, #1
 800b6dc:	f7ff fedc 	bl	800b498 <_Balloc>
 800b6e0:	b930      	cbnz	r0, 800b6f0 <__multiply+0x44>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	4b44      	ldr	r3, [pc, #272]	@ (800b7f8 <__multiply+0x14c>)
 800b6e6:	4845      	ldr	r0, [pc, #276]	@ (800b7fc <__multiply+0x150>)
 800b6e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6ec:	f000 fc92 	bl	800c014 <__assert_func>
 800b6f0:	f100 0514 	add.w	r5, r0, #20
 800b6f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6f8:	462b      	mov	r3, r5
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	4543      	cmp	r3, r8
 800b6fe:	d321      	bcc.n	800b744 <__multiply+0x98>
 800b700:	f107 0114 	add.w	r1, r7, #20
 800b704:	f104 0214 	add.w	r2, r4, #20
 800b708:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b70c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b710:	9302      	str	r3, [sp, #8]
 800b712:	1b13      	subs	r3, r2, r4
 800b714:	3b15      	subs	r3, #21
 800b716:	f023 0303 	bic.w	r3, r3, #3
 800b71a:	3304      	adds	r3, #4
 800b71c:	f104 0715 	add.w	r7, r4, #21
 800b720:	42ba      	cmp	r2, r7
 800b722:	bf38      	it	cc
 800b724:	2304      	movcc	r3, #4
 800b726:	9301      	str	r3, [sp, #4]
 800b728:	9b02      	ldr	r3, [sp, #8]
 800b72a:	9103      	str	r1, [sp, #12]
 800b72c:	428b      	cmp	r3, r1
 800b72e:	d80c      	bhi.n	800b74a <__multiply+0x9e>
 800b730:	2e00      	cmp	r6, #0
 800b732:	dd03      	ble.n	800b73c <__multiply+0x90>
 800b734:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d05b      	beq.n	800b7f4 <__multiply+0x148>
 800b73c:	6106      	str	r6, [r0, #16]
 800b73e:	b005      	add	sp, #20
 800b740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b744:	f843 2b04 	str.w	r2, [r3], #4
 800b748:	e7d8      	b.n	800b6fc <__multiply+0x50>
 800b74a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b74e:	f1ba 0f00 	cmp.w	sl, #0
 800b752:	d024      	beq.n	800b79e <__multiply+0xf2>
 800b754:	f104 0e14 	add.w	lr, r4, #20
 800b758:	46a9      	mov	r9, r5
 800b75a:	f04f 0c00 	mov.w	ip, #0
 800b75e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b762:	f8d9 3000 	ldr.w	r3, [r9]
 800b766:	fa1f fb87 	uxth.w	fp, r7
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b770:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b774:	f8d9 7000 	ldr.w	r7, [r9]
 800b778:	4463      	add	r3, ip
 800b77a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b77e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b782:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b786:	b29b      	uxth	r3, r3
 800b788:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b78c:	4572      	cmp	r2, lr
 800b78e:	f849 3b04 	str.w	r3, [r9], #4
 800b792:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b796:	d8e2      	bhi.n	800b75e <__multiply+0xb2>
 800b798:	9b01      	ldr	r3, [sp, #4]
 800b79a:	f845 c003 	str.w	ip, [r5, r3]
 800b79e:	9b03      	ldr	r3, [sp, #12]
 800b7a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b7a4:	3104      	adds	r1, #4
 800b7a6:	f1b9 0f00 	cmp.w	r9, #0
 800b7aa:	d021      	beq.n	800b7f0 <__multiply+0x144>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	f104 0c14 	add.w	ip, r4, #20
 800b7b2:	46ae      	mov	lr, r5
 800b7b4:	f04f 0a00 	mov.w	sl, #0
 800b7b8:	f8bc b000 	ldrh.w	fp, [ip]
 800b7bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b7c0:	fb09 770b 	mla	r7, r9, fp, r7
 800b7c4:	4457      	add	r7, sl
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b7cc:	f84e 3b04 	str.w	r3, [lr], #4
 800b7d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7d8:	f8be 3000 	ldrh.w	r3, [lr]
 800b7dc:	fb09 330a 	mla	r3, r9, sl, r3
 800b7e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b7e4:	4562      	cmp	r2, ip
 800b7e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7ea:	d8e5      	bhi.n	800b7b8 <__multiply+0x10c>
 800b7ec:	9f01      	ldr	r7, [sp, #4]
 800b7ee:	51eb      	str	r3, [r5, r7]
 800b7f0:	3504      	adds	r5, #4
 800b7f2:	e799      	b.n	800b728 <__multiply+0x7c>
 800b7f4:	3e01      	subs	r6, #1
 800b7f6:	e79b      	b.n	800b730 <__multiply+0x84>
 800b7f8:	0800c828 	.word	0x0800c828
 800b7fc:	0800c839 	.word	0x0800c839

0800b800 <__pow5mult>:
 800b800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b804:	4615      	mov	r5, r2
 800b806:	f012 0203 	ands.w	r2, r2, #3
 800b80a:	4607      	mov	r7, r0
 800b80c:	460e      	mov	r6, r1
 800b80e:	d007      	beq.n	800b820 <__pow5mult+0x20>
 800b810:	4c25      	ldr	r4, [pc, #148]	@ (800b8a8 <__pow5mult+0xa8>)
 800b812:	3a01      	subs	r2, #1
 800b814:	2300      	movs	r3, #0
 800b816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b81a:	f7ff fe9f 	bl	800b55c <__multadd>
 800b81e:	4606      	mov	r6, r0
 800b820:	10ad      	asrs	r5, r5, #2
 800b822:	d03d      	beq.n	800b8a0 <__pow5mult+0xa0>
 800b824:	69fc      	ldr	r4, [r7, #28]
 800b826:	b97c      	cbnz	r4, 800b848 <__pow5mult+0x48>
 800b828:	2010      	movs	r0, #16
 800b82a:	f7ff fd7f 	bl	800b32c <malloc>
 800b82e:	4602      	mov	r2, r0
 800b830:	61f8      	str	r0, [r7, #28]
 800b832:	b928      	cbnz	r0, 800b840 <__pow5mult+0x40>
 800b834:	4b1d      	ldr	r3, [pc, #116]	@ (800b8ac <__pow5mult+0xac>)
 800b836:	481e      	ldr	r0, [pc, #120]	@ (800b8b0 <__pow5mult+0xb0>)
 800b838:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b83c:	f000 fbea 	bl	800c014 <__assert_func>
 800b840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b844:	6004      	str	r4, [r0, #0]
 800b846:	60c4      	str	r4, [r0, #12]
 800b848:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b84c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b850:	b94c      	cbnz	r4, 800b866 <__pow5mult+0x66>
 800b852:	f240 2171 	movw	r1, #625	@ 0x271
 800b856:	4638      	mov	r0, r7
 800b858:	f7ff ff12 	bl	800b680 <__i2b>
 800b85c:	2300      	movs	r3, #0
 800b85e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b862:	4604      	mov	r4, r0
 800b864:	6003      	str	r3, [r0, #0]
 800b866:	f04f 0900 	mov.w	r9, #0
 800b86a:	07eb      	lsls	r3, r5, #31
 800b86c:	d50a      	bpl.n	800b884 <__pow5mult+0x84>
 800b86e:	4631      	mov	r1, r6
 800b870:	4622      	mov	r2, r4
 800b872:	4638      	mov	r0, r7
 800b874:	f7ff ff1a 	bl	800b6ac <__multiply>
 800b878:	4631      	mov	r1, r6
 800b87a:	4680      	mov	r8, r0
 800b87c:	4638      	mov	r0, r7
 800b87e:	f7ff fe4b 	bl	800b518 <_Bfree>
 800b882:	4646      	mov	r6, r8
 800b884:	106d      	asrs	r5, r5, #1
 800b886:	d00b      	beq.n	800b8a0 <__pow5mult+0xa0>
 800b888:	6820      	ldr	r0, [r4, #0]
 800b88a:	b938      	cbnz	r0, 800b89c <__pow5mult+0x9c>
 800b88c:	4622      	mov	r2, r4
 800b88e:	4621      	mov	r1, r4
 800b890:	4638      	mov	r0, r7
 800b892:	f7ff ff0b 	bl	800b6ac <__multiply>
 800b896:	6020      	str	r0, [r4, #0]
 800b898:	f8c0 9000 	str.w	r9, [r0]
 800b89c:	4604      	mov	r4, r0
 800b89e:	e7e4      	b.n	800b86a <__pow5mult+0x6a>
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a6:	bf00      	nop
 800b8a8:	0800c894 	.word	0x0800c894
 800b8ac:	0800c7b9 	.word	0x0800c7b9
 800b8b0:	0800c839 	.word	0x0800c839

0800b8b4 <__lshift>:
 800b8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b8:	460c      	mov	r4, r1
 800b8ba:	6849      	ldr	r1, [r1, #4]
 800b8bc:	6923      	ldr	r3, [r4, #16]
 800b8be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8c2:	68a3      	ldr	r3, [r4, #8]
 800b8c4:	4607      	mov	r7, r0
 800b8c6:	4691      	mov	r9, r2
 800b8c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8cc:	f108 0601 	add.w	r6, r8, #1
 800b8d0:	42b3      	cmp	r3, r6
 800b8d2:	db0b      	blt.n	800b8ec <__lshift+0x38>
 800b8d4:	4638      	mov	r0, r7
 800b8d6:	f7ff fddf 	bl	800b498 <_Balloc>
 800b8da:	4605      	mov	r5, r0
 800b8dc:	b948      	cbnz	r0, 800b8f2 <__lshift+0x3e>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	4b28      	ldr	r3, [pc, #160]	@ (800b984 <__lshift+0xd0>)
 800b8e2:	4829      	ldr	r0, [pc, #164]	@ (800b988 <__lshift+0xd4>)
 800b8e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b8e8:	f000 fb94 	bl	800c014 <__assert_func>
 800b8ec:	3101      	adds	r1, #1
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	e7ee      	b.n	800b8d0 <__lshift+0x1c>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	f100 0114 	add.w	r1, r0, #20
 800b8f8:	f100 0210 	add.w	r2, r0, #16
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	4553      	cmp	r3, sl
 800b900:	db33      	blt.n	800b96a <__lshift+0xb6>
 800b902:	6920      	ldr	r0, [r4, #16]
 800b904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b908:	f104 0314 	add.w	r3, r4, #20
 800b90c:	f019 091f 	ands.w	r9, r9, #31
 800b910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b918:	d02b      	beq.n	800b972 <__lshift+0xbe>
 800b91a:	f1c9 0e20 	rsb	lr, r9, #32
 800b91e:	468a      	mov	sl, r1
 800b920:	2200      	movs	r2, #0
 800b922:	6818      	ldr	r0, [r3, #0]
 800b924:	fa00 f009 	lsl.w	r0, r0, r9
 800b928:	4310      	orrs	r0, r2
 800b92a:	f84a 0b04 	str.w	r0, [sl], #4
 800b92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b932:	459c      	cmp	ip, r3
 800b934:	fa22 f20e 	lsr.w	r2, r2, lr
 800b938:	d8f3      	bhi.n	800b922 <__lshift+0x6e>
 800b93a:	ebac 0304 	sub.w	r3, ip, r4
 800b93e:	3b15      	subs	r3, #21
 800b940:	f023 0303 	bic.w	r3, r3, #3
 800b944:	3304      	adds	r3, #4
 800b946:	f104 0015 	add.w	r0, r4, #21
 800b94a:	4584      	cmp	ip, r0
 800b94c:	bf38      	it	cc
 800b94e:	2304      	movcc	r3, #4
 800b950:	50ca      	str	r2, [r1, r3]
 800b952:	b10a      	cbz	r2, 800b958 <__lshift+0xa4>
 800b954:	f108 0602 	add.w	r6, r8, #2
 800b958:	3e01      	subs	r6, #1
 800b95a:	4638      	mov	r0, r7
 800b95c:	612e      	str	r6, [r5, #16]
 800b95e:	4621      	mov	r1, r4
 800b960:	f7ff fdda 	bl	800b518 <_Bfree>
 800b964:	4628      	mov	r0, r5
 800b966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b96e:	3301      	adds	r3, #1
 800b970:	e7c5      	b.n	800b8fe <__lshift+0x4a>
 800b972:	3904      	subs	r1, #4
 800b974:	f853 2b04 	ldr.w	r2, [r3], #4
 800b978:	f841 2f04 	str.w	r2, [r1, #4]!
 800b97c:	459c      	cmp	ip, r3
 800b97e:	d8f9      	bhi.n	800b974 <__lshift+0xc0>
 800b980:	e7ea      	b.n	800b958 <__lshift+0xa4>
 800b982:	bf00      	nop
 800b984:	0800c828 	.word	0x0800c828
 800b988:	0800c839 	.word	0x0800c839

0800b98c <__mcmp>:
 800b98c:	690a      	ldr	r2, [r1, #16]
 800b98e:	4603      	mov	r3, r0
 800b990:	6900      	ldr	r0, [r0, #16]
 800b992:	1a80      	subs	r0, r0, r2
 800b994:	b530      	push	{r4, r5, lr}
 800b996:	d10e      	bne.n	800b9b6 <__mcmp+0x2a>
 800b998:	3314      	adds	r3, #20
 800b99a:	3114      	adds	r1, #20
 800b99c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b9a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9ac:	4295      	cmp	r5, r2
 800b9ae:	d003      	beq.n	800b9b8 <__mcmp+0x2c>
 800b9b0:	d205      	bcs.n	800b9be <__mcmp+0x32>
 800b9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b6:	bd30      	pop	{r4, r5, pc}
 800b9b8:	42a3      	cmp	r3, r4
 800b9ba:	d3f3      	bcc.n	800b9a4 <__mcmp+0x18>
 800b9bc:	e7fb      	b.n	800b9b6 <__mcmp+0x2a>
 800b9be:	2001      	movs	r0, #1
 800b9c0:	e7f9      	b.n	800b9b6 <__mcmp+0x2a>
	...

0800b9c4 <__mdiff>:
 800b9c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c8:	4689      	mov	r9, r1
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	4648      	mov	r0, r9
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	f7ff ffdb 	bl	800b98c <__mcmp>
 800b9d6:	1e05      	subs	r5, r0, #0
 800b9d8:	d112      	bne.n	800ba00 <__mdiff+0x3c>
 800b9da:	4629      	mov	r1, r5
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f7ff fd5b 	bl	800b498 <_Balloc>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	b928      	cbnz	r0, 800b9f2 <__mdiff+0x2e>
 800b9e6:	4b3f      	ldr	r3, [pc, #252]	@ (800bae4 <__mdiff+0x120>)
 800b9e8:	f240 2137 	movw	r1, #567	@ 0x237
 800b9ec:	483e      	ldr	r0, [pc, #248]	@ (800bae8 <__mdiff+0x124>)
 800b9ee:	f000 fb11 	bl	800c014 <__assert_func>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	b003      	add	sp, #12
 800b9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba00:	bfbc      	itt	lt
 800ba02:	464b      	movlt	r3, r9
 800ba04:	46a1      	movlt	r9, r4
 800ba06:	4630      	mov	r0, r6
 800ba08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba0c:	bfba      	itte	lt
 800ba0e:	461c      	movlt	r4, r3
 800ba10:	2501      	movlt	r5, #1
 800ba12:	2500      	movge	r5, #0
 800ba14:	f7ff fd40 	bl	800b498 <_Balloc>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	b918      	cbnz	r0, 800ba24 <__mdiff+0x60>
 800ba1c:	4b31      	ldr	r3, [pc, #196]	@ (800bae4 <__mdiff+0x120>)
 800ba1e:	f240 2145 	movw	r1, #581	@ 0x245
 800ba22:	e7e3      	b.n	800b9ec <__mdiff+0x28>
 800ba24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba28:	6926      	ldr	r6, [r4, #16]
 800ba2a:	60c5      	str	r5, [r0, #12]
 800ba2c:	f109 0310 	add.w	r3, r9, #16
 800ba30:	f109 0514 	add.w	r5, r9, #20
 800ba34:	f104 0e14 	add.w	lr, r4, #20
 800ba38:	f100 0b14 	add.w	fp, r0, #20
 800ba3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba44:	9301      	str	r3, [sp, #4]
 800ba46:	46d9      	mov	r9, fp
 800ba48:	f04f 0c00 	mov.w	ip, #0
 800ba4c:	9b01      	ldr	r3, [sp, #4]
 800ba4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba52:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba56:	9301      	str	r3, [sp, #4]
 800ba58:	fa1f f38a 	uxth.w	r3, sl
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	b283      	uxth	r3, r0
 800ba60:	1acb      	subs	r3, r1, r3
 800ba62:	0c00      	lsrs	r0, r0, #16
 800ba64:	4463      	add	r3, ip
 800ba66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba74:	4576      	cmp	r6, lr
 800ba76:	f849 3b04 	str.w	r3, [r9], #4
 800ba7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba7e:	d8e5      	bhi.n	800ba4c <__mdiff+0x88>
 800ba80:	1b33      	subs	r3, r6, r4
 800ba82:	3b15      	subs	r3, #21
 800ba84:	f023 0303 	bic.w	r3, r3, #3
 800ba88:	3415      	adds	r4, #21
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	42a6      	cmp	r6, r4
 800ba8e:	bf38      	it	cc
 800ba90:	2304      	movcc	r3, #4
 800ba92:	441d      	add	r5, r3
 800ba94:	445b      	add	r3, fp
 800ba96:	461e      	mov	r6, r3
 800ba98:	462c      	mov	r4, r5
 800ba9a:	4544      	cmp	r4, r8
 800ba9c:	d30e      	bcc.n	800babc <__mdiff+0xf8>
 800ba9e:	f108 0103 	add.w	r1, r8, #3
 800baa2:	1b49      	subs	r1, r1, r5
 800baa4:	f021 0103 	bic.w	r1, r1, #3
 800baa8:	3d03      	subs	r5, #3
 800baaa:	45a8      	cmp	r8, r5
 800baac:	bf38      	it	cc
 800baae:	2100      	movcc	r1, #0
 800bab0:	440b      	add	r3, r1
 800bab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bab6:	b191      	cbz	r1, 800bade <__mdiff+0x11a>
 800bab8:	6117      	str	r7, [r2, #16]
 800baba:	e79d      	b.n	800b9f8 <__mdiff+0x34>
 800babc:	f854 1b04 	ldr.w	r1, [r4], #4
 800bac0:	46e6      	mov	lr, ip
 800bac2:	0c08      	lsrs	r0, r1, #16
 800bac4:	fa1c fc81 	uxtah	ip, ip, r1
 800bac8:	4471      	add	r1, lr
 800baca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bace:	b289      	uxth	r1, r1
 800bad0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bad4:	f846 1b04 	str.w	r1, [r6], #4
 800bad8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800badc:	e7dd      	b.n	800ba9a <__mdiff+0xd6>
 800bade:	3f01      	subs	r7, #1
 800bae0:	e7e7      	b.n	800bab2 <__mdiff+0xee>
 800bae2:	bf00      	nop
 800bae4:	0800c828 	.word	0x0800c828
 800bae8:	0800c839 	.word	0x0800c839

0800baec <__d2b>:
 800baec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800baf0:	460f      	mov	r7, r1
 800baf2:	2101      	movs	r1, #1
 800baf4:	ec59 8b10 	vmov	r8, r9, d0
 800baf8:	4616      	mov	r6, r2
 800bafa:	f7ff fccd 	bl	800b498 <_Balloc>
 800bafe:	4604      	mov	r4, r0
 800bb00:	b930      	cbnz	r0, 800bb10 <__d2b+0x24>
 800bb02:	4602      	mov	r2, r0
 800bb04:	4b23      	ldr	r3, [pc, #140]	@ (800bb94 <__d2b+0xa8>)
 800bb06:	4824      	ldr	r0, [pc, #144]	@ (800bb98 <__d2b+0xac>)
 800bb08:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb0c:	f000 fa82 	bl	800c014 <__assert_func>
 800bb10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb18:	b10d      	cbz	r5, 800bb1e <__d2b+0x32>
 800bb1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb1e:	9301      	str	r3, [sp, #4]
 800bb20:	f1b8 0300 	subs.w	r3, r8, #0
 800bb24:	d023      	beq.n	800bb6e <__d2b+0x82>
 800bb26:	4668      	mov	r0, sp
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	f7ff fd7c 	bl	800b626 <__lo0bits>
 800bb2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb32:	b1d0      	cbz	r0, 800bb6a <__d2b+0x7e>
 800bb34:	f1c0 0320 	rsb	r3, r0, #32
 800bb38:	fa02 f303 	lsl.w	r3, r2, r3
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	40c2      	lsrs	r2, r0
 800bb40:	6163      	str	r3, [r4, #20]
 800bb42:	9201      	str	r2, [sp, #4]
 800bb44:	9b01      	ldr	r3, [sp, #4]
 800bb46:	61a3      	str	r3, [r4, #24]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bf0c      	ite	eq
 800bb4c:	2201      	moveq	r2, #1
 800bb4e:	2202      	movne	r2, #2
 800bb50:	6122      	str	r2, [r4, #16]
 800bb52:	b1a5      	cbz	r5, 800bb7e <__d2b+0x92>
 800bb54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb58:	4405      	add	r5, r0
 800bb5a:	603d      	str	r5, [r7, #0]
 800bb5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb60:	6030      	str	r0, [r6, #0]
 800bb62:	4620      	mov	r0, r4
 800bb64:	b003      	add	sp, #12
 800bb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb6a:	6161      	str	r1, [r4, #20]
 800bb6c:	e7ea      	b.n	800bb44 <__d2b+0x58>
 800bb6e:	a801      	add	r0, sp, #4
 800bb70:	f7ff fd59 	bl	800b626 <__lo0bits>
 800bb74:	9b01      	ldr	r3, [sp, #4]
 800bb76:	6163      	str	r3, [r4, #20]
 800bb78:	3020      	adds	r0, #32
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	e7e8      	b.n	800bb50 <__d2b+0x64>
 800bb7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb86:	6038      	str	r0, [r7, #0]
 800bb88:	6918      	ldr	r0, [r3, #16]
 800bb8a:	f7ff fd2d 	bl	800b5e8 <__hi0bits>
 800bb8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb92:	e7e5      	b.n	800bb60 <__d2b+0x74>
 800bb94:	0800c828 	.word	0x0800c828
 800bb98:	0800c839 	.word	0x0800c839

0800bb9c <__ssputs_r>:
 800bb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba0:	688e      	ldr	r6, [r1, #8]
 800bba2:	461f      	mov	r7, r3
 800bba4:	42be      	cmp	r6, r7
 800bba6:	680b      	ldr	r3, [r1, #0]
 800bba8:	4682      	mov	sl, r0
 800bbaa:	460c      	mov	r4, r1
 800bbac:	4690      	mov	r8, r2
 800bbae:	d82d      	bhi.n	800bc0c <__ssputs_r+0x70>
 800bbb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bbb8:	d026      	beq.n	800bc08 <__ssputs_r+0x6c>
 800bbba:	6965      	ldr	r5, [r4, #20]
 800bbbc:	6909      	ldr	r1, [r1, #16]
 800bbbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbc2:	eba3 0901 	sub.w	r9, r3, r1
 800bbc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbca:	1c7b      	adds	r3, r7, #1
 800bbcc:	444b      	add	r3, r9
 800bbce:	106d      	asrs	r5, r5, #1
 800bbd0:	429d      	cmp	r5, r3
 800bbd2:	bf38      	it	cc
 800bbd4:	461d      	movcc	r5, r3
 800bbd6:	0553      	lsls	r3, r2, #21
 800bbd8:	d527      	bpl.n	800bc2a <__ssputs_r+0x8e>
 800bbda:	4629      	mov	r1, r5
 800bbdc:	f7ff fbd0 	bl	800b380 <_malloc_r>
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	b360      	cbz	r0, 800bc3e <__ssputs_r+0xa2>
 800bbe4:	6921      	ldr	r1, [r4, #16]
 800bbe6:	464a      	mov	r2, r9
 800bbe8:	f000 fa06 	bl	800bff8 <memcpy>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	6126      	str	r6, [r4, #16]
 800bbfa:	6165      	str	r5, [r4, #20]
 800bbfc:	444e      	add	r6, r9
 800bbfe:	eba5 0509 	sub.w	r5, r5, r9
 800bc02:	6026      	str	r6, [r4, #0]
 800bc04:	60a5      	str	r5, [r4, #8]
 800bc06:	463e      	mov	r6, r7
 800bc08:	42be      	cmp	r6, r7
 800bc0a:	d900      	bls.n	800bc0e <__ssputs_r+0x72>
 800bc0c:	463e      	mov	r6, r7
 800bc0e:	6820      	ldr	r0, [r4, #0]
 800bc10:	4632      	mov	r2, r6
 800bc12:	4641      	mov	r1, r8
 800bc14:	f000 f9c6 	bl	800bfa4 <memmove>
 800bc18:	68a3      	ldr	r3, [r4, #8]
 800bc1a:	1b9b      	subs	r3, r3, r6
 800bc1c:	60a3      	str	r3, [r4, #8]
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	4433      	add	r3, r6
 800bc22:	6023      	str	r3, [r4, #0]
 800bc24:	2000      	movs	r0, #0
 800bc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	f000 fa36 	bl	800c09c <_realloc_r>
 800bc30:	4606      	mov	r6, r0
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d1e0      	bne.n	800bbf8 <__ssputs_r+0x5c>
 800bc36:	6921      	ldr	r1, [r4, #16]
 800bc38:	4650      	mov	r0, sl
 800bc3a:	f7ff fb2d 	bl	800b298 <_free_r>
 800bc3e:	230c      	movs	r3, #12
 800bc40:	f8ca 3000 	str.w	r3, [sl]
 800bc44:	89a3      	ldrh	r3, [r4, #12]
 800bc46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc4a:	81a3      	strh	r3, [r4, #12]
 800bc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc50:	e7e9      	b.n	800bc26 <__ssputs_r+0x8a>
	...

0800bc54 <_svfiprintf_r>:
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4698      	mov	r8, r3
 800bc5a:	898b      	ldrh	r3, [r1, #12]
 800bc5c:	061b      	lsls	r3, r3, #24
 800bc5e:	b09d      	sub	sp, #116	@ 0x74
 800bc60:	4607      	mov	r7, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	4614      	mov	r4, r2
 800bc66:	d510      	bpl.n	800bc8a <_svfiprintf_r+0x36>
 800bc68:	690b      	ldr	r3, [r1, #16]
 800bc6a:	b973      	cbnz	r3, 800bc8a <_svfiprintf_r+0x36>
 800bc6c:	2140      	movs	r1, #64	@ 0x40
 800bc6e:	f7ff fb87 	bl	800b380 <_malloc_r>
 800bc72:	6028      	str	r0, [r5, #0]
 800bc74:	6128      	str	r0, [r5, #16]
 800bc76:	b930      	cbnz	r0, 800bc86 <_svfiprintf_r+0x32>
 800bc78:	230c      	movs	r3, #12
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc80:	b01d      	add	sp, #116	@ 0x74
 800bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc86:	2340      	movs	r3, #64	@ 0x40
 800bc88:	616b      	str	r3, [r5, #20]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc8e:	2320      	movs	r3, #32
 800bc90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc94:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc98:	2330      	movs	r3, #48	@ 0x30
 800bc9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800be38 <_svfiprintf_r+0x1e4>
 800bc9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bca2:	f04f 0901 	mov.w	r9, #1
 800bca6:	4623      	mov	r3, r4
 800bca8:	469a      	mov	sl, r3
 800bcaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcae:	b10a      	cbz	r2, 800bcb4 <_svfiprintf_r+0x60>
 800bcb0:	2a25      	cmp	r2, #37	@ 0x25
 800bcb2:	d1f9      	bne.n	800bca8 <_svfiprintf_r+0x54>
 800bcb4:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb8:	d00b      	beq.n	800bcd2 <_svfiprintf_r+0x7e>
 800bcba:	465b      	mov	r3, fp
 800bcbc:	4622      	mov	r2, r4
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	f7ff ff6b 	bl	800bb9c <__ssputs_r>
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	f000 80a7 	beq.w	800be1a <_svfiprintf_r+0x1c6>
 800bccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcce:	445a      	add	r2, fp
 800bcd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f000 809f 	beq.w	800be1a <_svfiprintf_r+0x1c6>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f04f 32ff 	mov.w	r2, #4294967295
 800bce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce6:	f10a 0a01 	add.w	sl, sl, #1
 800bcea:	9304      	str	r3, [sp, #16]
 800bcec:	9307      	str	r3, [sp, #28]
 800bcee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcf2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcf4:	4654      	mov	r4, sl
 800bcf6:	2205      	movs	r2, #5
 800bcf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfc:	484e      	ldr	r0, [pc, #312]	@ (800be38 <_svfiprintf_r+0x1e4>)
 800bcfe:	f7f4 fa67 	bl	80001d0 <memchr>
 800bd02:	9a04      	ldr	r2, [sp, #16]
 800bd04:	b9d8      	cbnz	r0, 800bd3e <_svfiprintf_r+0xea>
 800bd06:	06d0      	lsls	r0, r2, #27
 800bd08:	bf44      	itt	mi
 800bd0a:	2320      	movmi	r3, #32
 800bd0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd10:	0711      	lsls	r1, r2, #28
 800bd12:	bf44      	itt	mi
 800bd14:	232b      	movmi	r3, #43	@ 0x2b
 800bd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd20:	d015      	beq.n	800bd4e <_svfiprintf_r+0xfa>
 800bd22:	9a07      	ldr	r2, [sp, #28]
 800bd24:	4654      	mov	r4, sl
 800bd26:	2000      	movs	r0, #0
 800bd28:	f04f 0c0a 	mov.w	ip, #10
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd32:	3b30      	subs	r3, #48	@ 0x30
 800bd34:	2b09      	cmp	r3, #9
 800bd36:	d94b      	bls.n	800bdd0 <_svfiprintf_r+0x17c>
 800bd38:	b1b0      	cbz	r0, 800bd68 <_svfiprintf_r+0x114>
 800bd3a:	9207      	str	r2, [sp, #28]
 800bd3c:	e014      	b.n	800bd68 <_svfiprintf_r+0x114>
 800bd3e:	eba0 0308 	sub.w	r3, r0, r8
 800bd42:	fa09 f303 	lsl.w	r3, r9, r3
 800bd46:	4313      	orrs	r3, r2
 800bd48:	9304      	str	r3, [sp, #16]
 800bd4a:	46a2      	mov	sl, r4
 800bd4c:	e7d2      	b.n	800bcf4 <_svfiprintf_r+0xa0>
 800bd4e:	9b03      	ldr	r3, [sp, #12]
 800bd50:	1d19      	adds	r1, r3, #4
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	9103      	str	r1, [sp, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	bfbb      	ittet	lt
 800bd5a:	425b      	neglt	r3, r3
 800bd5c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd60:	9307      	strge	r3, [sp, #28]
 800bd62:	9307      	strlt	r3, [sp, #28]
 800bd64:	bfb8      	it	lt
 800bd66:	9204      	strlt	r2, [sp, #16]
 800bd68:	7823      	ldrb	r3, [r4, #0]
 800bd6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd6c:	d10a      	bne.n	800bd84 <_svfiprintf_r+0x130>
 800bd6e:	7863      	ldrb	r3, [r4, #1]
 800bd70:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd72:	d132      	bne.n	800bdda <_svfiprintf_r+0x186>
 800bd74:	9b03      	ldr	r3, [sp, #12]
 800bd76:	1d1a      	adds	r2, r3, #4
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	9203      	str	r2, [sp, #12]
 800bd7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd80:	3402      	adds	r4, #2
 800bd82:	9305      	str	r3, [sp, #20]
 800bd84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be48 <_svfiprintf_r+0x1f4>
 800bd88:	7821      	ldrb	r1, [r4, #0]
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	4650      	mov	r0, sl
 800bd8e:	f7f4 fa1f 	bl	80001d0 <memchr>
 800bd92:	b138      	cbz	r0, 800bda4 <_svfiprintf_r+0x150>
 800bd94:	9b04      	ldr	r3, [sp, #16]
 800bd96:	eba0 000a 	sub.w	r0, r0, sl
 800bd9a:	2240      	movs	r2, #64	@ 0x40
 800bd9c:	4082      	lsls	r2, r0
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	3401      	adds	r4, #1
 800bda2:	9304      	str	r3, [sp, #16]
 800bda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda8:	4824      	ldr	r0, [pc, #144]	@ (800be3c <_svfiprintf_r+0x1e8>)
 800bdaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdae:	2206      	movs	r2, #6
 800bdb0:	f7f4 fa0e 	bl	80001d0 <memchr>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d036      	beq.n	800be26 <_svfiprintf_r+0x1d2>
 800bdb8:	4b21      	ldr	r3, [pc, #132]	@ (800be40 <_svfiprintf_r+0x1ec>)
 800bdba:	bb1b      	cbnz	r3, 800be04 <_svfiprintf_r+0x1b0>
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	3307      	adds	r3, #7
 800bdc0:	f023 0307 	bic.w	r3, r3, #7
 800bdc4:	3308      	adds	r3, #8
 800bdc6:	9303      	str	r3, [sp, #12]
 800bdc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdca:	4433      	add	r3, r6
 800bdcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdce:	e76a      	b.n	800bca6 <_svfiprintf_r+0x52>
 800bdd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd4:	460c      	mov	r4, r1
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	e7a8      	b.n	800bd2c <_svfiprintf_r+0xd8>
 800bdda:	2300      	movs	r3, #0
 800bddc:	3401      	adds	r4, #1
 800bdde:	9305      	str	r3, [sp, #20]
 800bde0:	4619      	mov	r1, r3
 800bde2:	f04f 0c0a 	mov.w	ip, #10
 800bde6:	4620      	mov	r0, r4
 800bde8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdec:	3a30      	subs	r2, #48	@ 0x30
 800bdee:	2a09      	cmp	r2, #9
 800bdf0:	d903      	bls.n	800bdfa <_svfiprintf_r+0x1a6>
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d0c6      	beq.n	800bd84 <_svfiprintf_r+0x130>
 800bdf6:	9105      	str	r1, [sp, #20]
 800bdf8:	e7c4      	b.n	800bd84 <_svfiprintf_r+0x130>
 800bdfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdfe:	4604      	mov	r4, r0
 800be00:	2301      	movs	r3, #1
 800be02:	e7f0      	b.n	800bde6 <_svfiprintf_r+0x192>
 800be04:	ab03      	add	r3, sp, #12
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	462a      	mov	r2, r5
 800be0a:	4b0e      	ldr	r3, [pc, #56]	@ (800be44 <_svfiprintf_r+0x1f0>)
 800be0c:	a904      	add	r1, sp, #16
 800be0e:	4638      	mov	r0, r7
 800be10:	f7fd fe98 	bl	8009b44 <_printf_float>
 800be14:	1c42      	adds	r2, r0, #1
 800be16:	4606      	mov	r6, r0
 800be18:	d1d6      	bne.n	800bdc8 <_svfiprintf_r+0x174>
 800be1a:	89ab      	ldrh	r3, [r5, #12]
 800be1c:	065b      	lsls	r3, r3, #25
 800be1e:	f53f af2d 	bmi.w	800bc7c <_svfiprintf_r+0x28>
 800be22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be24:	e72c      	b.n	800bc80 <_svfiprintf_r+0x2c>
 800be26:	ab03      	add	r3, sp, #12
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	462a      	mov	r2, r5
 800be2c:	4b05      	ldr	r3, [pc, #20]	@ (800be44 <_svfiprintf_r+0x1f0>)
 800be2e:	a904      	add	r1, sp, #16
 800be30:	4638      	mov	r0, r7
 800be32:	f7fe f91f 	bl	800a074 <_printf_i>
 800be36:	e7ed      	b.n	800be14 <_svfiprintf_r+0x1c0>
 800be38:	0800c990 	.word	0x0800c990
 800be3c:	0800c99a 	.word	0x0800c99a
 800be40:	08009b45 	.word	0x08009b45
 800be44:	0800bb9d 	.word	0x0800bb9d
 800be48:	0800c996 	.word	0x0800c996

0800be4c <__sflush_r>:
 800be4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be54:	0716      	lsls	r6, r2, #28
 800be56:	4605      	mov	r5, r0
 800be58:	460c      	mov	r4, r1
 800be5a:	d454      	bmi.n	800bf06 <__sflush_r+0xba>
 800be5c:	684b      	ldr	r3, [r1, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	dc02      	bgt.n	800be68 <__sflush_r+0x1c>
 800be62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be64:	2b00      	cmp	r3, #0
 800be66:	dd48      	ble.n	800befa <__sflush_r+0xae>
 800be68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be6a:	2e00      	cmp	r6, #0
 800be6c:	d045      	beq.n	800befa <__sflush_r+0xae>
 800be6e:	2300      	movs	r3, #0
 800be70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be74:	682f      	ldr	r7, [r5, #0]
 800be76:	6a21      	ldr	r1, [r4, #32]
 800be78:	602b      	str	r3, [r5, #0]
 800be7a:	d030      	beq.n	800bede <__sflush_r+0x92>
 800be7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	0759      	lsls	r1, r3, #29
 800be82:	d505      	bpl.n	800be90 <__sflush_r+0x44>
 800be84:	6863      	ldr	r3, [r4, #4]
 800be86:	1ad2      	subs	r2, r2, r3
 800be88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be8a:	b10b      	cbz	r3, 800be90 <__sflush_r+0x44>
 800be8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be8e:	1ad2      	subs	r2, r2, r3
 800be90:	2300      	movs	r3, #0
 800be92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be94:	6a21      	ldr	r1, [r4, #32]
 800be96:	4628      	mov	r0, r5
 800be98:	47b0      	blx	r6
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	89a3      	ldrh	r3, [r4, #12]
 800be9e:	d106      	bne.n	800beae <__sflush_r+0x62>
 800bea0:	6829      	ldr	r1, [r5, #0]
 800bea2:	291d      	cmp	r1, #29
 800bea4:	d82b      	bhi.n	800befe <__sflush_r+0xb2>
 800bea6:	4a2a      	ldr	r2, [pc, #168]	@ (800bf50 <__sflush_r+0x104>)
 800bea8:	410a      	asrs	r2, r1
 800beaa:	07d6      	lsls	r6, r2, #31
 800beac:	d427      	bmi.n	800befe <__sflush_r+0xb2>
 800beae:	2200      	movs	r2, #0
 800beb0:	6062      	str	r2, [r4, #4]
 800beb2:	04d9      	lsls	r1, r3, #19
 800beb4:	6922      	ldr	r2, [r4, #16]
 800beb6:	6022      	str	r2, [r4, #0]
 800beb8:	d504      	bpl.n	800bec4 <__sflush_r+0x78>
 800beba:	1c42      	adds	r2, r0, #1
 800bebc:	d101      	bne.n	800bec2 <__sflush_r+0x76>
 800bebe:	682b      	ldr	r3, [r5, #0]
 800bec0:	b903      	cbnz	r3, 800bec4 <__sflush_r+0x78>
 800bec2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bec6:	602f      	str	r7, [r5, #0]
 800bec8:	b1b9      	cbz	r1, 800befa <__sflush_r+0xae>
 800beca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bece:	4299      	cmp	r1, r3
 800bed0:	d002      	beq.n	800bed8 <__sflush_r+0x8c>
 800bed2:	4628      	mov	r0, r5
 800bed4:	f7ff f9e0 	bl	800b298 <_free_r>
 800bed8:	2300      	movs	r3, #0
 800beda:	6363      	str	r3, [r4, #52]	@ 0x34
 800bedc:	e00d      	b.n	800befa <__sflush_r+0xae>
 800bede:	2301      	movs	r3, #1
 800bee0:	4628      	mov	r0, r5
 800bee2:	47b0      	blx	r6
 800bee4:	4602      	mov	r2, r0
 800bee6:	1c50      	adds	r0, r2, #1
 800bee8:	d1c9      	bne.n	800be7e <__sflush_r+0x32>
 800beea:	682b      	ldr	r3, [r5, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d0c6      	beq.n	800be7e <__sflush_r+0x32>
 800bef0:	2b1d      	cmp	r3, #29
 800bef2:	d001      	beq.n	800bef8 <__sflush_r+0xac>
 800bef4:	2b16      	cmp	r3, #22
 800bef6:	d11e      	bne.n	800bf36 <__sflush_r+0xea>
 800bef8:	602f      	str	r7, [r5, #0]
 800befa:	2000      	movs	r0, #0
 800befc:	e022      	b.n	800bf44 <__sflush_r+0xf8>
 800befe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf02:	b21b      	sxth	r3, r3
 800bf04:	e01b      	b.n	800bf3e <__sflush_r+0xf2>
 800bf06:	690f      	ldr	r7, [r1, #16]
 800bf08:	2f00      	cmp	r7, #0
 800bf0a:	d0f6      	beq.n	800befa <__sflush_r+0xae>
 800bf0c:	0793      	lsls	r3, r2, #30
 800bf0e:	680e      	ldr	r6, [r1, #0]
 800bf10:	bf08      	it	eq
 800bf12:	694b      	ldreq	r3, [r1, #20]
 800bf14:	600f      	str	r7, [r1, #0]
 800bf16:	bf18      	it	ne
 800bf18:	2300      	movne	r3, #0
 800bf1a:	eba6 0807 	sub.w	r8, r6, r7
 800bf1e:	608b      	str	r3, [r1, #8]
 800bf20:	f1b8 0f00 	cmp.w	r8, #0
 800bf24:	dde9      	ble.n	800befa <__sflush_r+0xae>
 800bf26:	6a21      	ldr	r1, [r4, #32]
 800bf28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf2a:	4643      	mov	r3, r8
 800bf2c:	463a      	mov	r2, r7
 800bf2e:	4628      	mov	r0, r5
 800bf30:	47b0      	blx	r6
 800bf32:	2800      	cmp	r0, #0
 800bf34:	dc08      	bgt.n	800bf48 <__sflush_r+0xfc>
 800bf36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf3e:	81a3      	strh	r3, [r4, #12]
 800bf40:	f04f 30ff 	mov.w	r0, #4294967295
 800bf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf48:	4407      	add	r7, r0
 800bf4a:	eba8 0800 	sub.w	r8, r8, r0
 800bf4e:	e7e7      	b.n	800bf20 <__sflush_r+0xd4>
 800bf50:	dfbffffe 	.word	0xdfbffffe

0800bf54 <_fflush_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	690b      	ldr	r3, [r1, #16]
 800bf58:	4605      	mov	r5, r0
 800bf5a:	460c      	mov	r4, r1
 800bf5c:	b913      	cbnz	r3, 800bf64 <_fflush_r+0x10>
 800bf5e:	2500      	movs	r5, #0
 800bf60:	4628      	mov	r0, r5
 800bf62:	bd38      	pop	{r3, r4, r5, pc}
 800bf64:	b118      	cbz	r0, 800bf6e <_fflush_r+0x1a>
 800bf66:	6a03      	ldr	r3, [r0, #32]
 800bf68:	b90b      	cbnz	r3, 800bf6e <_fflush_r+0x1a>
 800bf6a:	f7fe fa2f 	bl	800a3cc <__sinit>
 800bf6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0f3      	beq.n	800bf5e <_fflush_r+0xa>
 800bf76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf78:	07d0      	lsls	r0, r2, #31
 800bf7a:	d404      	bmi.n	800bf86 <_fflush_r+0x32>
 800bf7c:	0599      	lsls	r1, r3, #22
 800bf7e:	d402      	bmi.n	800bf86 <_fflush_r+0x32>
 800bf80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf82:	f7fe fb3a 	bl	800a5fa <__retarget_lock_acquire_recursive>
 800bf86:	4628      	mov	r0, r5
 800bf88:	4621      	mov	r1, r4
 800bf8a:	f7ff ff5f 	bl	800be4c <__sflush_r>
 800bf8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf90:	07da      	lsls	r2, r3, #31
 800bf92:	4605      	mov	r5, r0
 800bf94:	d4e4      	bmi.n	800bf60 <_fflush_r+0xc>
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	059b      	lsls	r3, r3, #22
 800bf9a:	d4e1      	bmi.n	800bf60 <_fflush_r+0xc>
 800bf9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf9e:	f7fe fb2d 	bl	800a5fc <__retarget_lock_release_recursive>
 800bfa2:	e7dd      	b.n	800bf60 <_fflush_r+0xc>

0800bfa4 <memmove>:
 800bfa4:	4288      	cmp	r0, r1
 800bfa6:	b510      	push	{r4, lr}
 800bfa8:	eb01 0402 	add.w	r4, r1, r2
 800bfac:	d902      	bls.n	800bfb4 <memmove+0x10>
 800bfae:	4284      	cmp	r4, r0
 800bfb0:	4623      	mov	r3, r4
 800bfb2:	d807      	bhi.n	800bfc4 <memmove+0x20>
 800bfb4:	1e43      	subs	r3, r0, #1
 800bfb6:	42a1      	cmp	r1, r4
 800bfb8:	d008      	beq.n	800bfcc <memmove+0x28>
 800bfba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfc2:	e7f8      	b.n	800bfb6 <memmove+0x12>
 800bfc4:	4402      	add	r2, r0
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	428a      	cmp	r2, r1
 800bfca:	d100      	bne.n	800bfce <memmove+0x2a>
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfd6:	e7f7      	b.n	800bfc8 <memmove+0x24>

0800bfd8 <_sbrk_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	4d06      	ldr	r5, [pc, #24]	@ (800bff4 <_sbrk_r+0x1c>)
 800bfdc:	2300      	movs	r3, #0
 800bfde:	4604      	mov	r4, r0
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	602b      	str	r3, [r5, #0]
 800bfe4:	f7f5 fed6 	bl	8001d94 <_sbrk>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_sbrk_r+0x1a>
 800bfec:	682b      	ldr	r3, [r5, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_sbrk_r+0x1a>
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	200021f0 	.word	0x200021f0

0800bff8 <memcpy>:
 800bff8:	440a      	add	r2, r1
 800bffa:	4291      	cmp	r1, r2
 800bffc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c000:	d100      	bne.n	800c004 <memcpy+0xc>
 800c002:	4770      	bx	lr
 800c004:	b510      	push	{r4, lr}
 800c006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c00a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c00e:	4291      	cmp	r1, r2
 800c010:	d1f9      	bne.n	800c006 <memcpy+0xe>
 800c012:	bd10      	pop	{r4, pc}

0800c014 <__assert_func>:
 800c014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c016:	4614      	mov	r4, r2
 800c018:	461a      	mov	r2, r3
 800c01a:	4b09      	ldr	r3, [pc, #36]	@ (800c040 <__assert_func+0x2c>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4605      	mov	r5, r0
 800c020:	68d8      	ldr	r0, [r3, #12]
 800c022:	b954      	cbnz	r4, 800c03a <__assert_func+0x26>
 800c024:	4b07      	ldr	r3, [pc, #28]	@ (800c044 <__assert_func+0x30>)
 800c026:	461c      	mov	r4, r3
 800c028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c02c:	9100      	str	r1, [sp, #0]
 800c02e:	462b      	mov	r3, r5
 800c030:	4905      	ldr	r1, [pc, #20]	@ (800c048 <__assert_func+0x34>)
 800c032:	f000 f86f 	bl	800c114 <fiprintf>
 800c036:	f000 f87f 	bl	800c138 <abort>
 800c03a:	4b04      	ldr	r3, [pc, #16]	@ (800c04c <__assert_func+0x38>)
 800c03c:	e7f4      	b.n	800c028 <__assert_func+0x14>
 800c03e:	bf00      	nop
 800c040:	20000108 	.word	0x20000108
 800c044:	0800c9e6 	.word	0x0800c9e6
 800c048:	0800c9b8 	.word	0x0800c9b8
 800c04c:	0800c9ab 	.word	0x0800c9ab

0800c050 <_calloc_r>:
 800c050:	b570      	push	{r4, r5, r6, lr}
 800c052:	fba1 5402 	umull	r5, r4, r1, r2
 800c056:	b93c      	cbnz	r4, 800c068 <_calloc_r+0x18>
 800c058:	4629      	mov	r1, r5
 800c05a:	f7ff f991 	bl	800b380 <_malloc_r>
 800c05e:	4606      	mov	r6, r0
 800c060:	b928      	cbnz	r0, 800c06e <_calloc_r+0x1e>
 800c062:	2600      	movs	r6, #0
 800c064:	4630      	mov	r0, r6
 800c066:	bd70      	pop	{r4, r5, r6, pc}
 800c068:	220c      	movs	r2, #12
 800c06a:	6002      	str	r2, [r0, #0]
 800c06c:	e7f9      	b.n	800c062 <_calloc_r+0x12>
 800c06e:	462a      	mov	r2, r5
 800c070:	4621      	mov	r1, r4
 800c072:	f7fe fa44 	bl	800a4fe <memset>
 800c076:	e7f5      	b.n	800c064 <_calloc_r+0x14>

0800c078 <__ascii_mbtowc>:
 800c078:	b082      	sub	sp, #8
 800c07a:	b901      	cbnz	r1, 800c07e <__ascii_mbtowc+0x6>
 800c07c:	a901      	add	r1, sp, #4
 800c07e:	b142      	cbz	r2, 800c092 <__ascii_mbtowc+0x1a>
 800c080:	b14b      	cbz	r3, 800c096 <__ascii_mbtowc+0x1e>
 800c082:	7813      	ldrb	r3, [r2, #0]
 800c084:	600b      	str	r3, [r1, #0]
 800c086:	7812      	ldrb	r2, [r2, #0]
 800c088:	1e10      	subs	r0, r2, #0
 800c08a:	bf18      	it	ne
 800c08c:	2001      	movne	r0, #1
 800c08e:	b002      	add	sp, #8
 800c090:	4770      	bx	lr
 800c092:	4610      	mov	r0, r2
 800c094:	e7fb      	b.n	800c08e <__ascii_mbtowc+0x16>
 800c096:	f06f 0001 	mvn.w	r0, #1
 800c09a:	e7f8      	b.n	800c08e <__ascii_mbtowc+0x16>

0800c09c <_realloc_r>:
 800c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	4615      	mov	r5, r2
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	b921      	cbnz	r1, 800c0b2 <_realloc_r+0x16>
 800c0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ac:	4611      	mov	r1, r2
 800c0ae:	f7ff b967 	b.w	800b380 <_malloc_r>
 800c0b2:	b92a      	cbnz	r2, 800c0c0 <_realloc_r+0x24>
 800c0b4:	f7ff f8f0 	bl	800b298 <_free_r>
 800c0b8:	2400      	movs	r4, #0
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0c0:	f000 f841 	bl	800c146 <_malloc_usable_size_r>
 800c0c4:	4285      	cmp	r5, r0
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	d802      	bhi.n	800c0d0 <_realloc_r+0x34>
 800c0ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c0ce:	d8f4      	bhi.n	800c0ba <_realloc_r+0x1e>
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	f7ff f954 	bl	800b380 <_malloc_r>
 800c0d8:	4607      	mov	r7, r0
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d0ec      	beq.n	800c0b8 <_realloc_r+0x1c>
 800c0de:	42b5      	cmp	r5, r6
 800c0e0:	462a      	mov	r2, r5
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	bf28      	it	cs
 800c0e6:	4632      	movcs	r2, r6
 800c0e8:	f7ff ff86 	bl	800bff8 <memcpy>
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	f7ff f8d2 	bl	800b298 <_free_r>
 800c0f4:	463c      	mov	r4, r7
 800c0f6:	e7e0      	b.n	800c0ba <_realloc_r+0x1e>

0800c0f8 <__ascii_wctomb>:
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	4608      	mov	r0, r1
 800c0fc:	b141      	cbz	r1, 800c110 <__ascii_wctomb+0x18>
 800c0fe:	2aff      	cmp	r2, #255	@ 0xff
 800c100:	d904      	bls.n	800c10c <__ascii_wctomb+0x14>
 800c102:	228a      	movs	r2, #138	@ 0x8a
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	f04f 30ff 	mov.w	r0, #4294967295
 800c10a:	4770      	bx	lr
 800c10c:	700a      	strb	r2, [r1, #0]
 800c10e:	2001      	movs	r0, #1
 800c110:	4770      	bx	lr
	...

0800c114 <fiprintf>:
 800c114:	b40e      	push	{r1, r2, r3}
 800c116:	b503      	push	{r0, r1, lr}
 800c118:	4601      	mov	r1, r0
 800c11a:	ab03      	add	r3, sp, #12
 800c11c:	4805      	ldr	r0, [pc, #20]	@ (800c134 <fiprintf+0x20>)
 800c11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c122:	6800      	ldr	r0, [r0, #0]
 800c124:	9301      	str	r3, [sp, #4]
 800c126:	f000 f83f 	bl	800c1a8 <_vfiprintf_r>
 800c12a:	b002      	add	sp, #8
 800c12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c130:	b003      	add	sp, #12
 800c132:	4770      	bx	lr
 800c134:	20000108 	.word	0x20000108

0800c138 <abort>:
 800c138:	b508      	push	{r3, lr}
 800c13a:	2006      	movs	r0, #6
 800c13c:	f000 fa08 	bl	800c550 <raise>
 800c140:	2001      	movs	r0, #1
 800c142:	f7f5 fdaf 	bl	8001ca4 <_exit>

0800c146 <_malloc_usable_size_r>:
 800c146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c14a:	1f18      	subs	r0, r3, #4
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bfbc      	itt	lt
 800c150:	580b      	ldrlt	r3, [r1, r0]
 800c152:	18c0      	addlt	r0, r0, r3
 800c154:	4770      	bx	lr

0800c156 <__sfputc_r>:
 800c156:	6893      	ldr	r3, [r2, #8]
 800c158:	3b01      	subs	r3, #1
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	b410      	push	{r4}
 800c15e:	6093      	str	r3, [r2, #8]
 800c160:	da08      	bge.n	800c174 <__sfputc_r+0x1e>
 800c162:	6994      	ldr	r4, [r2, #24]
 800c164:	42a3      	cmp	r3, r4
 800c166:	db01      	blt.n	800c16c <__sfputc_r+0x16>
 800c168:	290a      	cmp	r1, #10
 800c16a:	d103      	bne.n	800c174 <__sfputc_r+0x1e>
 800c16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c170:	f000 b932 	b.w	800c3d8 <__swbuf_r>
 800c174:	6813      	ldr	r3, [r2, #0]
 800c176:	1c58      	adds	r0, r3, #1
 800c178:	6010      	str	r0, [r2, #0]
 800c17a:	7019      	strb	r1, [r3, #0]
 800c17c:	4608      	mov	r0, r1
 800c17e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <__sfputs_r>:
 800c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c186:	4606      	mov	r6, r0
 800c188:	460f      	mov	r7, r1
 800c18a:	4614      	mov	r4, r2
 800c18c:	18d5      	adds	r5, r2, r3
 800c18e:	42ac      	cmp	r4, r5
 800c190:	d101      	bne.n	800c196 <__sfputs_r+0x12>
 800c192:	2000      	movs	r0, #0
 800c194:	e007      	b.n	800c1a6 <__sfputs_r+0x22>
 800c196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c19a:	463a      	mov	r2, r7
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7ff ffda 	bl	800c156 <__sfputc_r>
 800c1a2:	1c43      	adds	r3, r0, #1
 800c1a4:	d1f3      	bne.n	800c18e <__sfputs_r+0xa>
 800c1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1a8 <_vfiprintf_r>:
 800c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	460d      	mov	r5, r1
 800c1ae:	b09d      	sub	sp, #116	@ 0x74
 800c1b0:	4614      	mov	r4, r2
 800c1b2:	4698      	mov	r8, r3
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	b118      	cbz	r0, 800c1c0 <_vfiprintf_r+0x18>
 800c1b8:	6a03      	ldr	r3, [r0, #32]
 800c1ba:	b90b      	cbnz	r3, 800c1c0 <_vfiprintf_r+0x18>
 800c1bc:	f7fe f906 	bl	800a3cc <__sinit>
 800c1c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1c2:	07d9      	lsls	r1, r3, #31
 800c1c4:	d405      	bmi.n	800c1d2 <_vfiprintf_r+0x2a>
 800c1c6:	89ab      	ldrh	r3, [r5, #12]
 800c1c8:	059a      	lsls	r2, r3, #22
 800c1ca:	d402      	bmi.n	800c1d2 <_vfiprintf_r+0x2a>
 800c1cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1ce:	f7fe fa14 	bl	800a5fa <__retarget_lock_acquire_recursive>
 800c1d2:	89ab      	ldrh	r3, [r5, #12]
 800c1d4:	071b      	lsls	r3, r3, #28
 800c1d6:	d501      	bpl.n	800c1dc <_vfiprintf_r+0x34>
 800c1d8:	692b      	ldr	r3, [r5, #16]
 800c1da:	b99b      	cbnz	r3, 800c204 <_vfiprintf_r+0x5c>
 800c1dc:	4629      	mov	r1, r5
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f000 f938 	bl	800c454 <__swsetup_r>
 800c1e4:	b170      	cbz	r0, 800c204 <_vfiprintf_r+0x5c>
 800c1e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1e8:	07dc      	lsls	r4, r3, #31
 800c1ea:	d504      	bpl.n	800c1f6 <_vfiprintf_r+0x4e>
 800c1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f0:	b01d      	add	sp, #116	@ 0x74
 800c1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f6:	89ab      	ldrh	r3, [r5, #12]
 800c1f8:	0598      	lsls	r0, r3, #22
 800c1fa:	d4f7      	bmi.n	800c1ec <_vfiprintf_r+0x44>
 800c1fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1fe:	f7fe f9fd 	bl	800a5fc <__retarget_lock_release_recursive>
 800c202:	e7f3      	b.n	800c1ec <_vfiprintf_r+0x44>
 800c204:	2300      	movs	r3, #0
 800c206:	9309      	str	r3, [sp, #36]	@ 0x24
 800c208:	2320      	movs	r3, #32
 800c20a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c20e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c212:	2330      	movs	r3, #48	@ 0x30
 800c214:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c3c4 <_vfiprintf_r+0x21c>
 800c218:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c21c:	f04f 0901 	mov.w	r9, #1
 800c220:	4623      	mov	r3, r4
 800c222:	469a      	mov	sl, r3
 800c224:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c228:	b10a      	cbz	r2, 800c22e <_vfiprintf_r+0x86>
 800c22a:	2a25      	cmp	r2, #37	@ 0x25
 800c22c:	d1f9      	bne.n	800c222 <_vfiprintf_r+0x7a>
 800c22e:	ebba 0b04 	subs.w	fp, sl, r4
 800c232:	d00b      	beq.n	800c24c <_vfiprintf_r+0xa4>
 800c234:	465b      	mov	r3, fp
 800c236:	4622      	mov	r2, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	4630      	mov	r0, r6
 800c23c:	f7ff ffa2 	bl	800c184 <__sfputs_r>
 800c240:	3001      	adds	r0, #1
 800c242:	f000 80a7 	beq.w	800c394 <_vfiprintf_r+0x1ec>
 800c246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c248:	445a      	add	r2, fp
 800c24a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c24c:	f89a 3000 	ldrb.w	r3, [sl]
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 809f 	beq.w	800c394 <_vfiprintf_r+0x1ec>
 800c256:	2300      	movs	r3, #0
 800c258:	f04f 32ff 	mov.w	r2, #4294967295
 800c25c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c260:	f10a 0a01 	add.w	sl, sl, #1
 800c264:	9304      	str	r3, [sp, #16]
 800c266:	9307      	str	r3, [sp, #28]
 800c268:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c26c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c26e:	4654      	mov	r4, sl
 800c270:	2205      	movs	r2, #5
 800c272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c276:	4853      	ldr	r0, [pc, #332]	@ (800c3c4 <_vfiprintf_r+0x21c>)
 800c278:	f7f3 ffaa 	bl	80001d0 <memchr>
 800c27c:	9a04      	ldr	r2, [sp, #16]
 800c27e:	b9d8      	cbnz	r0, 800c2b8 <_vfiprintf_r+0x110>
 800c280:	06d1      	lsls	r1, r2, #27
 800c282:	bf44      	itt	mi
 800c284:	2320      	movmi	r3, #32
 800c286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c28a:	0713      	lsls	r3, r2, #28
 800c28c:	bf44      	itt	mi
 800c28e:	232b      	movmi	r3, #43	@ 0x2b
 800c290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c294:	f89a 3000 	ldrb.w	r3, [sl]
 800c298:	2b2a      	cmp	r3, #42	@ 0x2a
 800c29a:	d015      	beq.n	800c2c8 <_vfiprintf_r+0x120>
 800c29c:	9a07      	ldr	r2, [sp, #28]
 800c29e:	4654      	mov	r4, sl
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	f04f 0c0a 	mov.w	ip, #10
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2ac:	3b30      	subs	r3, #48	@ 0x30
 800c2ae:	2b09      	cmp	r3, #9
 800c2b0:	d94b      	bls.n	800c34a <_vfiprintf_r+0x1a2>
 800c2b2:	b1b0      	cbz	r0, 800c2e2 <_vfiprintf_r+0x13a>
 800c2b4:	9207      	str	r2, [sp, #28]
 800c2b6:	e014      	b.n	800c2e2 <_vfiprintf_r+0x13a>
 800c2b8:	eba0 0308 	sub.w	r3, r0, r8
 800c2bc:	fa09 f303 	lsl.w	r3, r9, r3
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	9304      	str	r3, [sp, #16]
 800c2c4:	46a2      	mov	sl, r4
 800c2c6:	e7d2      	b.n	800c26e <_vfiprintf_r+0xc6>
 800c2c8:	9b03      	ldr	r3, [sp, #12]
 800c2ca:	1d19      	adds	r1, r3, #4
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	9103      	str	r1, [sp, #12]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	bfbb      	ittet	lt
 800c2d4:	425b      	neglt	r3, r3
 800c2d6:	f042 0202 	orrlt.w	r2, r2, #2
 800c2da:	9307      	strge	r3, [sp, #28]
 800c2dc:	9307      	strlt	r3, [sp, #28]
 800c2de:	bfb8      	it	lt
 800c2e0:	9204      	strlt	r2, [sp, #16]
 800c2e2:	7823      	ldrb	r3, [r4, #0]
 800c2e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2e6:	d10a      	bne.n	800c2fe <_vfiprintf_r+0x156>
 800c2e8:	7863      	ldrb	r3, [r4, #1]
 800c2ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2ec:	d132      	bne.n	800c354 <_vfiprintf_r+0x1ac>
 800c2ee:	9b03      	ldr	r3, [sp, #12]
 800c2f0:	1d1a      	adds	r2, r3, #4
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	9203      	str	r2, [sp, #12]
 800c2f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2fa:	3402      	adds	r4, #2
 800c2fc:	9305      	str	r3, [sp, #20]
 800c2fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c3d4 <_vfiprintf_r+0x22c>
 800c302:	7821      	ldrb	r1, [r4, #0]
 800c304:	2203      	movs	r2, #3
 800c306:	4650      	mov	r0, sl
 800c308:	f7f3 ff62 	bl	80001d0 <memchr>
 800c30c:	b138      	cbz	r0, 800c31e <_vfiprintf_r+0x176>
 800c30e:	9b04      	ldr	r3, [sp, #16]
 800c310:	eba0 000a 	sub.w	r0, r0, sl
 800c314:	2240      	movs	r2, #64	@ 0x40
 800c316:	4082      	lsls	r2, r0
 800c318:	4313      	orrs	r3, r2
 800c31a:	3401      	adds	r4, #1
 800c31c:	9304      	str	r3, [sp, #16]
 800c31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c322:	4829      	ldr	r0, [pc, #164]	@ (800c3c8 <_vfiprintf_r+0x220>)
 800c324:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c328:	2206      	movs	r2, #6
 800c32a:	f7f3 ff51 	bl	80001d0 <memchr>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d03f      	beq.n	800c3b2 <_vfiprintf_r+0x20a>
 800c332:	4b26      	ldr	r3, [pc, #152]	@ (800c3cc <_vfiprintf_r+0x224>)
 800c334:	bb1b      	cbnz	r3, 800c37e <_vfiprintf_r+0x1d6>
 800c336:	9b03      	ldr	r3, [sp, #12]
 800c338:	3307      	adds	r3, #7
 800c33a:	f023 0307 	bic.w	r3, r3, #7
 800c33e:	3308      	adds	r3, #8
 800c340:	9303      	str	r3, [sp, #12]
 800c342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c344:	443b      	add	r3, r7
 800c346:	9309      	str	r3, [sp, #36]	@ 0x24
 800c348:	e76a      	b.n	800c220 <_vfiprintf_r+0x78>
 800c34a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c34e:	460c      	mov	r4, r1
 800c350:	2001      	movs	r0, #1
 800c352:	e7a8      	b.n	800c2a6 <_vfiprintf_r+0xfe>
 800c354:	2300      	movs	r3, #0
 800c356:	3401      	adds	r4, #1
 800c358:	9305      	str	r3, [sp, #20]
 800c35a:	4619      	mov	r1, r3
 800c35c:	f04f 0c0a 	mov.w	ip, #10
 800c360:	4620      	mov	r0, r4
 800c362:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c366:	3a30      	subs	r2, #48	@ 0x30
 800c368:	2a09      	cmp	r2, #9
 800c36a:	d903      	bls.n	800c374 <_vfiprintf_r+0x1cc>
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d0c6      	beq.n	800c2fe <_vfiprintf_r+0x156>
 800c370:	9105      	str	r1, [sp, #20]
 800c372:	e7c4      	b.n	800c2fe <_vfiprintf_r+0x156>
 800c374:	fb0c 2101 	mla	r1, ip, r1, r2
 800c378:	4604      	mov	r4, r0
 800c37a:	2301      	movs	r3, #1
 800c37c:	e7f0      	b.n	800c360 <_vfiprintf_r+0x1b8>
 800c37e:	ab03      	add	r3, sp, #12
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	462a      	mov	r2, r5
 800c384:	4b12      	ldr	r3, [pc, #72]	@ (800c3d0 <_vfiprintf_r+0x228>)
 800c386:	a904      	add	r1, sp, #16
 800c388:	4630      	mov	r0, r6
 800c38a:	f7fd fbdb 	bl	8009b44 <_printf_float>
 800c38e:	4607      	mov	r7, r0
 800c390:	1c78      	adds	r0, r7, #1
 800c392:	d1d6      	bne.n	800c342 <_vfiprintf_r+0x19a>
 800c394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c396:	07d9      	lsls	r1, r3, #31
 800c398:	d405      	bmi.n	800c3a6 <_vfiprintf_r+0x1fe>
 800c39a:	89ab      	ldrh	r3, [r5, #12]
 800c39c:	059a      	lsls	r2, r3, #22
 800c39e:	d402      	bmi.n	800c3a6 <_vfiprintf_r+0x1fe>
 800c3a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3a2:	f7fe f92b 	bl	800a5fc <__retarget_lock_release_recursive>
 800c3a6:	89ab      	ldrh	r3, [r5, #12]
 800c3a8:	065b      	lsls	r3, r3, #25
 800c3aa:	f53f af1f 	bmi.w	800c1ec <_vfiprintf_r+0x44>
 800c3ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3b0:	e71e      	b.n	800c1f0 <_vfiprintf_r+0x48>
 800c3b2:	ab03      	add	r3, sp, #12
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	462a      	mov	r2, r5
 800c3b8:	4b05      	ldr	r3, [pc, #20]	@ (800c3d0 <_vfiprintf_r+0x228>)
 800c3ba:	a904      	add	r1, sp, #16
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f7fd fe59 	bl	800a074 <_printf_i>
 800c3c2:	e7e4      	b.n	800c38e <_vfiprintf_r+0x1e6>
 800c3c4:	0800c990 	.word	0x0800c990
 800c3c8:	0800c99a 	.word	0x0800c99a
 800c3cc:	08009b45 	.word	0x08009b45
 800c3d0:	0800c185 	.word	0x0800c185
 800c3d4:	0800c996 	.word	0x0800c996

0800c3d8 <__swbuf_r>:
 800c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3da:	460e      	mov	r6, r1
 800c3dc:	4614      	mov	r4, r2
 800c3de:	4605      	mov	r5, r0
 800c3e0:	b118      	cbz	r0, 800c3ea <__swbuf_r+0x12>
 800c3e2:	6a03      	ldr	r3, [r0, #32]
 800c3e4:	b90b      	cbnz	r3, 800c3ea <__swbuf_r+0x12>
 800c3e6:	f7fd fff1 	bl	800a3cc <__sinit>
 800c3ea:	69a3      	ldr	r3, [r4, #24]
 800c3ec:	60a3      	str	r3, [r4, #8]
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	071a      	lsls	r2, r3, #28
 800c3f2:	d501      	bpl.n	800c3f8 <__swbuf_r+0x20>
 800c3f4:	6923      	ldr	r3, [r4, #16]
 800c3f6:	b943      	cbnz	r3, 800c40a <__swbuf_r+0x32>
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f000 f82a 	bl	800c454 <__swsetup_r>
 800c400:	b118      	cbz	r0, 800c40a <__swbuf_r+0x32>
 800c402:	f04f 37ff 	mov.w	r7, #4294967295
 800c406:	4638      	mov	r0, r7
 800c408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c40a:	6823      	ldr	r3, [r4, #0]
 800c40c:	6922      	ldr	r2, [r4, #16]
 800c40e:	1a98      	subs	r0, r3, r2
 800c410:	6963      	ldr	r3, [r4, #20]
 800c412:	b2f6      	uxtb	r6, r6
 800c414:	4283      	cmp	r3, r0
 800c416:	4637      	mov	r7, r6
 800c418:	dc05      	bgt.n	800c426 <__swbuf_r+0x4e>
 800c41a:	4621      	mov	r1, r4
 800c41c:	4628      	mov	r0, r5
 800c41e:	f7ff fd99 	bl	800bf54 <_fflush_r>
 800c422:	2800      	cmp	r0, #0
 800c424:	d1ed      	bne.n	800c402 <__swbuf_r+0x2a>
 800c426:	68a3      	ldr	r3, [r4, #8]
 800c428:	3b01      	subs	r3, #1
 800c42a:	60a3      	str	r3, [r4, #8]
 800c42c:	6823      	ldr	r3, [r4, #0]
 800c42e:	1c5a      	adds	r2, r3, #1
 800c430:	6022      	str	r2, [r4, #0]
 800c432:	701e      	strb	r6, [r3, #0]
 800c434:	6962      	ldr	r2, [r4, #20]
 800c436:	1c43      	adds	r3, r0, #1
 800c438:	429a      	cmp	r2, r3
 800c43a:	d004      	beq.n	800c446 <__swbuf_r+0x6e>
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	07db      	lsls	r3, r3, #31
 800c440:	d5e1      	bpl.n	800c406 <__swbuf_r+0x2e>
 800c442:	2e0a      	cmp	r6, #10
 800c444:	d1df      	bne.n	800c406 <__swbuf_r+0x2e>
 800c446:	4621      	mov	r1, r4
 800c448:	4628      	mov	r0, r5
 800c44a:	f7ff fd83 	bl	800bf54 <_fflush_r>
 800c44e:	2800      	cmp	r0, #0
 800c450:	d0d9      	beq.n	800c406 <__swbuf_r+0x2e>
 800c452:	e7d6      	b.n	800c402 <__swbuf_r+0x2a>

0800c454 <__swsetup_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4b29      	ldr	r3, [pc, #164]	@ (800c4fc <__swsetup_r+0xa8>)
 800c458:	4605      	mov	r5, r0
 800c45a:	6818      	ldr	r0, [r3, #0]
 800c45c:	460c      	mov	r4, r1
 800c45e:	b118      	cbz	r0, 800c468 <__swsetup_r+0x14>
 800c460:	6a03      	ldr	r3, [r0, #32]
 800c462:	b90b      	cbnz	r3, 800c468 <__swsetup_r+0x14>
 800c464:	f7fd ffb2 	bl	800a3cc <__sinit>
 800c468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c46c:	0719      	lsls	r1, r3, #28
 800c46e:	d422      	bmi.n	800c4b6 <__swsetup_r+0x62>
 800c470:	06da      	lsls	r2, r3, #27
 800c472:	d407      	bmi.n	800c484 <__swsetup_r+0x30>
 800c474:	2209      	movs	r2, #9
 800c476:	602a      	str	r2, [r5, #0]
 800c478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	f04f 30ff 	mov.w	r0, #4294967295
 800c482:	e033      	b.n	800c4ec <__swsetup_r+0x98>
 800c484:	0758      	lsls	r0, r3, #29
 800c486:	d512      	bpl.n	800c4ae <__swsetup_r+0x5a>
 800c488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c48a:	b141      	cbz	r1, 800c49e <__swsetup_r+0x4a>
 800c48c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c490:	4299      	cmp	r1, r3
 800c492:	d002      	beq.n	800c49a <__swsetup_r+0x46>
 800c494:	4628      	mov	r0, r5
 800c496:	f7fe feff 	bl	800b298 <_free_r>
 800c49a:	2300      	movs	r3, #0
 800c49c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4a4:	81a3      	strh	r3, [r4, #12]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	6063      	str	r3, [r4, #4]
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	f043 0308 	orr.w	r3, r3, #8
 800c4b4:	81a3      	strh	r3, [r4, #12]
 800c4b6:	6923      	ldr	r3, [r4, #16]
 800c4b8:	b94b      	cbnz	r3, 800c4ce <__swsetup_r+0x7a>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4c4:	d003      	beq.n	800c4ce <__swsetup_r+0x7a>
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f000 f883 	bl	800c5d4 <__smakebuf_r>
 800c4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d2:	f013 0201 	ands.w	r2, r3, #1
 800c4d6:	d00a      	beq.n	800c4ee <__swsetup_r+0x9a>
 800c4d8:	2200      	movs	r2, #0
 800c4da:	60a2      	str	r2, [r4, #8]
 800c4dc:	6962      	ldr	r2, [r4, #20]
 800c4de:	4252      	negs	r2, r2
 800c4e0:	61a2      	str	r2, [r4, #24]
 800c4e2:	6922      	ldr	r2, [r4, #16]
 800c4e4:	b942      	cbnz	r2, 800c4f8 <__swsetup_r+0xa4>
 800c4e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4ea:	d1c5      	bne.n	800c478 <__swsetup_r+0x24>
 800c4ec:	bd38      	pop	{r3, r4, r5, pc}
 800c4ee:	0799      	lsls	r1, r3, #30
 800c4f0:	bf58      	it	pl
 800c4f2:	6962      	ldrpl	r2, [r4, #20]
 800c4f4:	60a2      	str	r2, [r4, #8]
 800c4f6:	e7f4      	b.n	800c4e2 <__swsetup_r+0x8e>
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	e7f7      	b.n	800c4ec <__swsetup_r+0x98>
 800c4fc:	20000108 	.word	0x20000108

0800c500 <_raise_r>:
 800c500:	291f      	cmp	r1, #31
 800c502:	b538      	push	{r3, r4, r5, lr}
 800c504:	4605      	mov	r5, r0
 800c506:	460c      	mov	r4, r1
 800c508:	d904      	bls.n	800c514 <_raise_r+0x14>
 800c50a:	2316      	movs	r3, #22
 800c50c:	6003      	str	r3, [r0, #0]
 800c50e:	f04f 30ff 	mov.w	r0, #4294967295
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c516:	b112      	cbz	r2, 800c51e <_raise_r+0x1e>
 800c518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c51c:	b94b      	cbnz	r3, 800c532 <_raise_r+0x32>
 800c51e:	4628      	mov	r0, r5
 800c520:	f000 f830 	bl	800c584 <_getpid_r>
 800c524:	4622      	mov	r2, r4
 800c526:	4601      	mov	r1, r0
 800c528:	4628      	mov	r0, r5
 800c52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c52e:	f000 b817 	b.w	800c560 <_kill_r>
 800c532:	2b01      	cmp	r3, #1
 800c534:	d00a      	beq.n	800c54c <_raise_r+0x4c>
 800c536:	1c59      	adds	r1, r3, #1
 800c538:	d103      	bne.n	800c542 <_raise_r+0x42>
 800c53a:	2316      	movs	r3, #22
 800c53c:	6003      	str	r3, [r0, #0]
 800c53e:	2001      	movs	r0, #1
 800c540:	e7e7      	b.n	800c512 <_raise_r+0x12>
 800c542:	2100      	movs	r1, #0
 800c544:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c548:	4620      	mov	r0, r4
 800c54a:	4798      	blx	r3
 800c54c:	2000      	movs	r0, #0
 800c54e:	e7e0      	b.n	800c512 <_raise_r+0x12>

0800c550 <raise>:
 800c550:	4b02      	ldr	r3, [pc, #8]	@ (800c55c <raise+0xc>)
 800c552:	4601      	mov	r1, r0
 800c554:	6818      	ldr	r0, [r3, #0]
 800c556:	f7ff bfd3 	b.w	800c500 <_raise_r>
 800c55a:	bf00      	nop
 800c55c:	20000108 	.word	0x20000108

0800c560 <_kill_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	4d07      	ldr	r5, [pc, #28]	@ (800c580 <_kill_r+0x20>)
 800c564:	2300      	movs	r3, #0
 800c566:	4604      	mov	r4, r0
 800c568:	4608      	mov	r0, r1
 800c56a:	4611      	mov	r1, r2
 800c56c:	602b      	str	r3, [r5, #0]
 800c56e:	f7f5 fb89 	bl	8001c84 <_kill>
 800c572:	1c43      	adds	r3, r0, #1
 800c574:	d102      	bne.n	800c57c <_kill_r+0x1c>
 800c576:	682b      	ldr	r3, [r5, #0]
 800c578:	b103      	cbz	r3, 800c57c <_kill_r+0x1c>
 800c57a:	6023      	str	r3, [r4, #0]
 800c57c:	bd38      	pop	{r3, r4, r5, pc}
 800c57e:	bf00      	nop
 800c580:	200021f0 	.word	0x200021f0

0800c584 <_getpid_r>:
 800c584:	f7f5 bb76 	b.w	8001c74 <_getpid>

0800c588 <__swhatbuf_r>:
 800c588:	b570      	push	{r4, r5, r6, lr}
 800c58a:	460c      	mov	r4, r1
 800c58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c590:	2900      	cmp	r1, #0
 800c592:	b096      	sub	sp, #88	@ 0x58
 800c594:	4615      	mov	r5, r2
 800c596:	461e      	mov	r6, r3
 800c598:	da0d      	bge.n	800c5b6 <__swhatbuf_r+0x2e>
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5a0:	f04f 0100 	mov.w	r1, #0
 800c5a4:	bf14      	ite	ne
 800c5a6:	2340      	movne	r3, #64	@ 0x40
 800c5a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	6031      	str	r1, [r6, #0]
 800c5b0:	602b      	str	r3, [r5, #0]
 800c5b2:	b016      	add	sp, #88	@ 0x58
 800c5b4:	bd70      	pop	{r4, r5, r6, pc}
 800c5b6:	466a      	mov	r2, sp
 800c5b8:	f000 f848 	bl	800c64c <_fstat_r>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	dbec      	blt.n	800c59a <__swhatbuf_r+0x12>
 800c5c0:	9901      	ldr	r1, [sp, #4]
 800c5c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c5c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c5ca:	4259      	negs	r1, r3
 800c5cc:	4159      	adcs	r1, r3
 800c5ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5d2:	e7eb      	b.n	800c5ac <__swhatbuf_r+0x24>

0800c5d4 <__smakebuf_r>:
 800c5d4:	898b      	ldrh	r3, [r1, #12]
 800c5d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5d8:	079d      	lsls	r5, r3, #30
 800c5da:	4606      	mov	r6, r0
 800c5dc:	460c      	mov	r4, r1
 800c5de:	d507      	bpl.n	800c5f0 <__smakebuf_r+0x1c>
 800c5e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	6123      	str	r3, [r4, #16]
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	6163      	str	r3, [r4, #20]
 800c5ec:	b003      	add	sp, #12
 800c5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5f0:	ab01      	add	r3, sp, #4
 800c5f2:	466a      	mov	r2, sp
 800c5f4:	f7ff ffc8 	bl	800c588 <__swhatbuf_r>
 800c5f8:	9f00      	ldr	r7, [sp, #0]
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	4639      	mov	r1, r7
 800c5fe:	4630      	mov	r0, r6
 800c600:	f7fe febe 	bl	800b380 <_malloc_r>
 800c604:	b948      	cbnz	r0, 800c61a <__smakebuf_r+0x46>
 800c606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c60a:	059a      	lsls	r2, r3, #22
 800c60c:	d4ee      	bmi.n	800c5ec <__smakebuf_r+0x18>
 800c60e:	f023 0303 	bic.w	r3, r3, #3
 800c612:	f043 0302 	orr.w	r3, r3, #2
 800c616:	81a3      	strh	r3, [r4, #12]
 800c618:	e7e2      	b.n	800c5e0 <__smakebuf_r+0xc>
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	6020      	str	r0, [r4, #0]
 800c61e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c622:	81a3      	strh	r3, [r4, #12]
 800c624:	9b01      	ldr	r3, [sp, #4]
 800c626:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c62a:	b15b      	cbz	r3, 800c644 <__smakebuf_r+0x70>
 800c62c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c630:	4630      	mov	r0, r6
 800c632:	f000 f81d 	bl	800c670 <_isatty_r>
 800c636:	b128      	cbz	r0, 800c644 <__smakebuf_r+0x70>
 800c638:	89a3      	ldrh	r3, [r4, #12]
 800c63a:	f023 0303 	bic.w	r3, r3, #3
 800c63e:	f043 0301 	orr.w	r3, r3, #1
 800c642:	81a3      	strh	r3, [r4, #12]
 800c644:	89a3      	ldrh	r3, [r4, #12]
 800c646:	431d      	orrs	r5, r3
 800c648:	81a5      	strh	r5, [r4, #12]
 800c64a:	e7cf      	b.n	800c5ec <__smakebuf_r+0x18>

0800c64c <_fstat_r>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	4d07      	ldr	r5, [pc, #28]	@ (800c66c <_fstat_r+0x20>)
 800c650:	2300      	movs	r3, #0
 800c652:	4604      	mov	r4, r0
 800c654:	4608      	mov	r0, r1
 800c656:	4611      	mov	r1, r2
 800c658:	602b      	str	r3, [r5, #0]
 800c65a:	f7f5 fb73 	bl	8001d44 <_fstat>
 800c65e:	1c43      	adds	r3, r0, #1
 800c660:	d102      	bne.n	800c668 <_fstat_r+0x1c>
 800c662:	682b      	ldr	r3, [r5, #0]
 800c664:	b103      	cbz	r3, 800c668 <_fstat_r+0x1c>
 800c666:	6023      	str	r3, [r4, #0]
 800c668:	bd38      	pop	{r3, r4, r5, pc}
 800c66a:	bf00      	nop
 800c66c:	200021f0 	.word	0x200021f0

0800c670 <_isatty_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	4d06      	ldr	r5, [pc, #24]	@ (800c68c <_isatty_r+0x1c>)
 800c674:	2300      	movs	r3, #0
 800c676:	4604      	mov	r4, r0
 800c678:	4608      	mov	r0, r1
 800c67a:	602b      	str	r3, [r5, #0]
 800c67c:	f7f5 fb72 	bl	8001d64 <_isatty>
 800c680:	1c43      	adds	r3, r0, #1
 800c682:	d102      	bne.n	800c68a <_isatty_r+0x1a>
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	b103      	cbz	r3, 800c68a <_isatty_r+0x1a>
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
 800c68c:	200021f0 	.word	0x200021f0

0800c690 <_init>:
 800c690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c692:	bf00      	nop
 800c694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c696:	bc08      	pop	{r3}
 800c698:	469e      	mov	lr, r3
 800c69a:	4770      	bx	lr

0800c69c <_fini>:
 800c69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c69e:	bf00      	nop
 800c6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6a2:	bc08      	pop	{r3}
 800c6a4:	469e      	mov	lr, r3
 800c6a6:	4770      	bx	lr
